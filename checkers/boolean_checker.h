#pragma once

#include "table.h"

void assert_contain(ExprID expr_ind, vector<ExprID>& l);
void assert_neg(ExprID expr_id, ExprID neg_expr_id, const vector<Expr>& expr_table);
int list_poly(vector<ExprID> or_args);
void proof_check_bool_resolution(Proof *proof, ProofStep step);
void proof_check_bool_factoring(Proof *proof, ProofStep step);
void proof_check_split(Proof *proof, ProofStep step);
void proof_check_eq_resolve(Proof *proof, ProofStep step);
void proof_check_modus_ponens(Proof *proof, ProofStep step);
void proof_check_not_not_elim(Proof *proof, ProofStep step);
void proof_check_contra(Proof *proof, ProofStep step);
void proof_check_false_from_empty(Proof *proof, ProofStep step);
void proof_check_bool_and_elim(Proof *proof, ProofStep step);
void proof_check_bool_and_intro1(Proof *proof, ProofStep step);
void proof_check_bool_and_intro2(Proof *proof, ProofStep step);
void proof_check_bool_not_or_elim(Proof *proof, ProofStep step);
void proof_check_bool_implies_elim(Proof *proof, ProofStep step);
void proof_check_bool_not_implies_elim1(Proof *proof, ProofStep step);
void proof_check_bool_not_implies_elim2(Proof *proof, ProofStep step);
void proof_check_impl_pos_res1(Proof *proof, ProofStep step);
void proof_check_impl_pos_res2(Proof *proof, ProofStep step);
void proof_check_impl_neg_res(Proof *proof, ProofStep step);
void proof_check_bool_equiv_elim1(Proof *proof, ProofStep step);
void proof_check_bool_equiv_elim2(Proof *proof, ProofStep step);
void proof_check_bool_not_equiv_elim1(Proof *proof, ProofStep step);
void proof_check_bool_not_equiv_elim2(Proof *proof, ProofStep step);
void proof_check_bool_xor_elim1(Proof *proof, ProofStep step);
void proof_check_bool_xor_elim2(Proof *proof, ProofStep step);
void proof_check_bool_not_xor_elim1(Proof *proof, ProofStep step);
void proof_check_bool_not_xor_elim2(Proof *proof, ProofStep step);
void proof_check_xor_pos_res(Proof *proof, ProofStep step);
void proof_check_xor_neg_res(Proof *proof, ProofStep step);
void proof_check_bool_xor1_pos_res(Proof *proof, ProofStep step);
void proof_check_bool_xor1_neg_res(Proof *proof, ProofStep step);
void proof_check_bool_ite_elim1(Proof *proof, ProofStep step);
void proof_check_bool_ite_elim2(Proof *proof, ProofStep step);
void proof_check_bool_not_ite_elim1(Proof *proof, ProofStep step);
void proof_check_bool_not_ite_elim2(Proof *proof, ProofStep step);
void proof_check_bool_ite1_res(Proof *proof, ProofStep step);
void proof_check_bool_ite2_res(Proof *proof, ProofStep step);
void proof_check_bool_not_and(Proof *proof, ProofStep step);
void proof_check_bool_not_and_rev(Proof *proof, ProofStep step);
void proof_check_bool_process_scope(Proof *proof, ProofStep step);
void proof_check_bool_or_single(Proof *proof, ProofStep step);
void proof_check_bool_or_single_rev(Proof *proof, ProofStep step);
void proof_check_bool_true_pos(Proof *proof, ProofStep step);
void proof_check_bool_false_neg(Proof *proof, ProofStep step);
void proof_check_bool_not_pos(Proof *proof, ProofStep step);
void proof_check_bool_not_neg(Proof *proof, ProofStep step);
void proof_check_bool_and_pos(Proof *proof, ProofStep step);
void proof_check_bool_and_neg(Proof *proof, ProofStep step);
void proof_check_bool_or_pos(Proof *proof, ProofStep step);
void proof_check_bool_or_neg(Proof *proof, ProofStep step);
void proof_check_bool_impl_pos1(Proof *proof, ProofStep step);
void proof_check_bool_impl_pos2(Proof *proof, ProofStep step);
void proof_check_bool_impl_neg(Proof *proof, ProofStep step);
void proof_check_bool_equiv_pos1(Proof *proof, ProofStep step);
void proof_check_bool_equiv_pos2(Proof *proof, ProofStep step);
void proof_check_bool_equiv_neg1(Proof *proof, ProofStep step);
void proof_check_bool_equiv_neg2(Proof *proof, ProofStep step);
void proof_check_not_cong(Proof *proof, ProofStep step);
