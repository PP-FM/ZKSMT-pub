unsat
(let-proof ((prem_a0 (assume (P z x))))
(let-proof ((prem_a1 (assume (= x y))))
(let-proof ((prem_a2 (assume (not (P z y)))))
(let-proof ((step_0 (true+ )))
(let-proof ((step_1 (=+1 (P z x) (= (P z x) true))))
(let-proof ((step_2 (=+2 (P z x) true)))
(let-proof ((step_3 (res (P z x) step_1 step_2)))
(let-proof ((step_4 (=-1 (P z x) true)))
(let-proof ((step_5 (=+2 (P z x) (= (P z x) true))))
(let-proof ((step_6 (res (P z x) step_4 step_5)))
(let-proof ((step_7 (res (= (P z x) true) step_3 step_6)))
(let-proof ((step_8 (res true step_0 step_7)))
(let-proof ((step_9 (=-2 (P z x) (= (P z x) true))))
(let-proof ((step_10 (res (= (P z x) (= (P z x) true)) step_8 step_9)))
(let-proof ((step_11 (res (P z x) prem_a0 step_10)))
(let-proof ((step_12 (symm y x)))
(let-proof ((step_13 (refl z)))
(let-proof ((step_14 (cong (P z y) (P z x))))
(let-proof ((step_15 (res (= z z) step_13 step_14)))
(let-proof ((step_16 (res (= y x) step_12 step_15)))
(let-proof ((step_17 (trans (P z y) (P z x) true)))
(let-proof ((step_18 (res (= (P z y) (P z x)) step_16 step_17)))
(let-proof ((step_19 (res (= x y) prem_a1 step_18)))
(let-proof ((step_20 (res (= (P z x) true) step_11 step_19)))
(let-proof ((step_21 (not+ (P z y))))
(let-proof ((step_22 (=+1 (P z y) (= (P z y) true))))
(let-proof ((step_23 (=+2 (P z y) true)))
(let-proof ((step_24 (res (P z y) step_22 step_23)))
(let-proof ((step_25 (=-1 (P z y) true)))
(let-proof ((step_26 (=+2 (P z y) (= (P z y) true))))
(let-proof ((step_27 (res (P z y) step_25 step_26)))
(let-proof ((step_28 (res (= (P z y) true) step_24 step_27)))
(let-proof ((step_29 (res true step_0 step_28)))
(let-proof ((step_30 (cong (not (P z y)) (not (= (P z y) true)))))
(let-proof ((step_31 (res (= (P z y) (= (P z y) true)) step_29 step_30)))
(let-proof ((step_32 (=-2 (not (P z y)) (not (= (P z y) true)))))
(let-proof ((step_33 (res (= (not (P z y)) (not (= (P z y) true))) step_31 step_32)))
(let-proof ((step_34 (res (not (P z y)) step_21 step_33)))
(let-proof ((step_35 (not- (= (P z y) true))))
(let-proof ((step_36 (res (not (= (P z y) true)) step_34 step_35)))
(let-proof ((step_37 (not- (P z y))))
(let-proof ((step_38 (res (not (P z y)) prem_a2 step_37)))
(let-proof ((step_39 (res (P z y) step_36 step_38)))
(let-proof ((step_40 (res (= (P z y) true) step_20 step_39)))
step_40
))))))))))))))))))))))))))))))))))))))))))))
