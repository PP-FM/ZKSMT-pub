unsat
(let-proof ((prem_a0 (assume (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))))))))))))))
(let-proof ((step_0 (not+ held@1)))
(let-proof ((step_1 (not- held@1)))
(let-proof ((step_2 (xor+ (xor held@2 held@1) held@2 held@1)))
(let-proof ((step_3 (not- (xor held@2 held@1))))
(let-proof ((step_4 (true+ )))
(let-proof ((step_5 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true)))
(let-proof ((step_6 (res true step_4 step_5)))
(let-proof ((step_7 (=>+ 0 (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))
(let-proof ((step_8 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))
(let-proof ((step_9 (=>+ 0 (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))
(let-proof ((step_10 (=>+ 1 (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))
(let-proof ((step_11 (and+ (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))
(let-proof ((step_12 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))
(let-proof ((step_13 (res (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))) step_11 step_12)))
(let-proof ((step_14 (and+ (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))
(let-proof ((step_15 (=>+ 1 (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))
(let-proof ((step_16 (res (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))) step_14 step_15)))
(let-proof ((step_17 (false- )))
(let-proof ((step_18 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))))
(let-proof ((step_19 (=>+ 1 true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))))
(let-proof ((step_20 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true)))
(let-proof ((step_21 (res true step_4 step_20)))
(let-proof ((step_22 (and+ (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))))))
(let-proof ((step_23 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))))))
(let-proof ((step_24 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))))))))
(let-proof ((step_25 (not+ (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))))))))))))))
(let-proof ((step_26 (not+ false)))
(let-proof ((step_27 (res false step_26 step_17)))
(let-proof ((step_28 (=+2 (not false) true)))
(let-proof ((step_29 (res (not false) step_27 step_28)))
(let-proof ((step_30 (res true step_4 step_29)))
(let-proof ((step_31 (refl (* 0 ONE))))
(let-proof ((step_32 (refl (not held@0))))
(let-proof ((step_33 (refl held@2)))
(let-proof ((step_34 (poly* (* -1 (* 3 ONE)) (- (* 3 ONE)))))
(let-proof ((step_35 (cong (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (- (* 3 ONE))))))
(let-proof ((step_36 (-def (* 0 ONE) (* 3 ONE))))
(let-proof ((step_37 (poly+ (+ (* 0 ONE) (- (* 3 ONE))) (- (* 3 ONE)))))
(let-proof ((step_38 (trans (- (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (- (* 3 ONE))) (- (* 3 ONE)))))
(let-proof ((step_39 (res (= (+ (* 0 ONE) (- (* 3 ONE))) (- (* 3 ONE))) step_37 step_38)))
(let-proof ((step_40 (res (= (- (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) step_36 step_39)))
(let-proof ((step_41 (res (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (- (* 3 ONE)))) step_35 step_40)))
(let-proof ((step_42 (res (= (* 0 ONE) (* 0 ONE)) step_31 step_41)))
(let-proof ((step_43 (res (= (* -1 (* 3 ONE)) (- (* 3 ONE))) step_34 step_42)))
(let-proof ((step_44 (refl (ControlFlow (* 0 ONE) (* 4 ONE)))))
(let-proof ((step_45 (cong (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))))))
(let-proof ((step_46 (res (= (ControlFlow (* 0 ONE) (* 4 ONE)) (ControlFlow (* 0 ONE) (* 4 ONE))) step_44 step_45)))
(let-proof ((step_47 (res (= (- (* 0 ONE) (* 3 ONE)) (- (* 3 ONE))) step_43 step_46)))
(let-proof ((step_48 (cong (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))))
(let-proof ((step_49 (res (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE)))) step_47 step_48)))
(let-proof ((step_50 (res (= held@2 held@2) step_33 step_49)))
(let-proof ((step_51 (refl (= x@2 x@0))))
(let-proof ((step_52 (refl (not held@1))))
(let-proof ((step_53 (poly* (* -1 (* 1 ONE)) (- (* 1 ONE)))))
(let-proof ((step_54 (cong (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE))))))
(let-proof ((step_55 (-def (* 0 ONE) (* 1 ONE))))
(let-proof ((step_56 (poly+ (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE)))))
(let-proof ((step_57 (trans (- (* 0 ONE) (* 1 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE)))))
(let-proof ((step_58 (res (= (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE))) step_56 step_57)))
(let-proof ((step_59 (res (= (- (* 0 ONE) (* 1 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) step_55 step_58)))
(let-proof ((step_60 (res (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE)))) step_54 step_59)))
(let-proof ((step_61 (res (= (* 0 ONE) (* 0 ONE)) step_31 step_60)))
(let-proof ((step_62 (res (= (* -1 (* 1 ONE)) (- (* 1 ONE))) step_53 step_61)))
(let-proof ((step_63 (refl (ControlFlow (* 0 ONE) (* 2 ONE)))))
(let-proof ((step_64 (cong (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))))
(let-proof ((step_65 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_63 step_64)))
(let-proof ((step_66 (res (= (- (* 0 ONE) (* 1 ONE)) (- (* 1 ONE))) step_62 step_65)))
(let-proof ((step_67 (refl (not (= x@2 x@0)))))
(let-proof ((step_68 (cong (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))))))
(let-proof ((step_69 (res (= (not (= x@2 x@0)) (not (= x@2 x@0))) step_67 step_68)))
(let-proof ((step_70 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) step_66 step_69)))
(let-proof ((step_71 (cong (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))
(let-proof ((step_72 (res (= (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))) step_70 step_71)))
(let-proof ((step_73 (res (= (not held@1) (not held@1)) step_52 step_72)))
(let-proof ((step_74 (refl (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))))
(let-proof ((step_75 (=+1 held@2 held@1)))
(let-proof ((step_76 (res held@1 step_75 step_2)))
(let-proof ((step_77 (xor+ (xor held@2 held@1) held@1 held@2)))
(let-proof ((step_78 (=+2 held@2 held@1)))
(let-proof ((step_79 (res held@1 step_77 step_78)))
(let-proof ((step_80 (res held@2 step_76 step_79)))
(let-proof ((step_81 (=+1 (= held@2 held@1) (not (xor held@2 held@1)))))
(let-proof ((step_82 (res (not (xor held@2 held@1)) step_81 step_3)))
(let-proof ((step_83 (res (xor held@2 held@1) step_80 step_82)))
(let-proof ((step_84 (not+ (xor held@2 held@1))))
(let-proof ((step_85 (=+2 (= held@2 held@1) (not (xor held@2 held@1)))))
(let-proof ((step_86 (res (not (xor held@2 held@1)) step_84 step_85)))
(let-proof ((step_87 (xor+ held@2 held@1 (xor held@2 held@1))))
(let-proof ((step_88 (=-1 held@2 held@1)))
(let-proof ((step_89 (res held@1 step_87 step_88)))
(let-proof ((step_90 (=-2 held@2 held@1)))
(let-proof ((step_91 (xor- held@2 held@1 (xor held@2 held@1))))
(let-proof ((step_92 (res held@1 step_90 step_91)))
(let-proof ((step_93 (res held@2 step_89 step_92)))
(let-proof ((step_94 (res (xor held@2 held@1) step_86 step_93)))
(let-proof ((step_95 (res (= held@2 held@1) step_83 step_94)))
(let-proof ((step_96 (cong (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))))))
(let-proof ((step_97 (res (= (= held@2 held@1) (not (xor held@2 held@1))) step_95 step_96)))
(let-proof ((step_98 (res (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) step_74 step_97)))
(let-proof ((step_99 (cong (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))))
(let-proof ((step_100 (res (= (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))) step_98 step_99)))
(let-proof ((step_101 (res (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)) step_50 step_100)))
(let-proof ((step_102 (cong (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))))))
(let-proof ((step_103 (res (= (= x@2 x@0) (= x@2 x@0)) step_51 step_102)))
(let-proof ((step_104 (res (= (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))) step_101 step_103)))
(let-proof ((step_105 (refl (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)))))
(let-proof ((step_106 (cong (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))
(let-proof ((step_107 (res (= (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE))) step_105 step_106)))
(let-proof ((step_108 (res (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))) step_73 step_107)))
(let-proof ((step_109 (refl (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)))))
(let-proof ((step_110 (cong (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))))))
(let-proof ((step_111 (res (= (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE))) step_109 step_110)))
(let-proof ((step_112 (res (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) step_104 step_111)))
(let-proof ((step_113 (cong (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))
(let-proof ((step_114 (res (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))))) step_112 step_113)))
(let-proof ((step_115 (res (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))) step_108 step_114)))
(let-proof ((step_116 (=+1 (= held@1 true) held@1)))
(let-proof ((step_117 (=-1 held@1 true)))
(let-proof ((step_118 (res (= held@1 true) step_116 step_117)))
(let-proof ((step_119 (=+2 held@1 true)))
(let-proof ((step_120 (=+2 (= held@1 true) held@1)))
(let-proof ((step_121 (res (= held@1 true) step_119 step_120)))
(let-proof ((step_122 (res held@1 step_118 step_121)))
(let-proof ((step_123 (res true step_4 step_122)))
(let-proof ((step_124 (cong (and (= held@1 true) (= x@2 x@0)) (and held@1 (= x@2 x@0)))))
(let-proof ((step_125 (res (= (= held@1 true) held@1) step_123 step_124)))
(let-proof ((step_126 (res (= (= x@2 x@0) (= x@2 x@0)) step_51 step_125)))
(let-proof ((step_127 (cong (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))
(let-proof ((step_128 (res (= (and (= held@1 true) (= x@2 x@0)) (and held@1 (= x@2 x@0))) step_126 step_127)))
(let-proof ((step_129 (res (= (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))) step_115 step_128)))
(let-proof ((step_130 (refl (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)))))
(let-proof ((step_131 (cong (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))
(let-proof ((step_132 (res (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE))) step_130 step_131)))
(let-proof ((step_133 (res (= (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))) step_129 step_132)))
(let-proof ((step_134 (refl (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)))))
(let-proof ((step_135 (cong (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))
(let-proof ((step_136 (res (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE))) step_134 step_135)))
(let-proof ((step_137 (res (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))) step_73 step_136)))
(let-proof ((step_138 (refl (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)))))
(let-proof ((step_139 (cong (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))))))
(let-proof ((step_140 (res (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) step_138 step_139)))
(let-proof ((step_141 (res (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) step_104 step_140)))
(let-proof ((step_142 (cong (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))
(let-proof ((step_143 (res (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))))) step_141 step_142)))
(let-proof ((step_144 (res (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))) step_137 step_143)))
(let-proof ((step_145 (refl (= x@2 x@1))))
(let-proof ((step_146 (=+1 (= held@1 false) (not held@1))))
(let-proof ((step_147 (=-2 held@1 false)))
(let-proof ((step_148 (res held@1 step_0 step_147)))
(let-proof ((step_149 (res (= held@1 false) step_146 step_148)))
(let-proof ((step_150 (=+1 held@1 false)))
(let-proof ((step_151 (res held@1 step_150 step_1)))
(let-proof ((step_152 (=+2 (= held@1 false) (not held@1))))
(let-proof ((step_153 (res (= held@1 false) step_151 step_152)))
(let-proof ((step_154 (res (not held@1) step_149 step_153)))
(let-proof ((step_155 (res false step_154 step_17)))
(let-proof ((step_156 (cong (and (= held@1 false) (= x@2 x@1)) (and (not held@1) (= x@2 x@1)))))
(let-proof ((step_157 (res (= (= held@1 false) (not held@1)) step_155 step_156)))
(let-proof ((step_158 (res (= (= x@2 x@1) (= x@2 x@1)) step_145 step_157)))
(let-proof ((step_159 (cong (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))
(let-proof ((step_160 (res (= (and (= held@1 false) (= x@2 x@1)) (and (not held@1) (= x@2 x@1))) step_158 step_159)))
(let-proof ((step_161 (res (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))) step_144 step_160)))
(let-proof ((step_162 (refl (= x@1 (+ x@0 (* 1 ONE))))))
(let-proof ((step_163 (cong (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))
(let-proof ((step_164 (res (= (= x@1 (+ x@0 (* 1 ONE))) (= x@1 (+ x@0 (* 1 ONE)))) step_162 step_163)))
(let-proof ((step_165 (res (= (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))) step_161 step_164)))
(let-proof ((step_166 (refl true)))
(let-proof ((step_167 (poly* (* -1 (* 8 ONE)) (- (* 8 ONE)))))
(let-proof ((step_168 (cong (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* 0 ONE) (- (* 8 ONE))))))
(let-proof ((step_169 (-def (* 0 ONE) (* 8 ONE))))
(let-proof ((step_170 (poly+ (+ (* 0 ONE) (- (* 8 ONE))) (- (* 8 ONE)))))
(let-proof ((step_171 (trans (- (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* 0 ONE) (- (* 8 ONE))) (- (* 8 ONE)))))
(let-proof ((step_172 (res (= (+ (* 0 ONE) (- (* 8 ONE))) (- (* 8 ONE))) step_170 step_171)))
(let-proof ((step_173 (res (= (- (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) step_169 step_172)))
(let-proof ((step_174 (res (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* 0 ONE) (- (* 8 ONE)))) step_168 step_173)))
(let-proof ((step_175 (res (= (* 0 ONE) (* 0 ONE)) step_31 step_174)))
(let-proof ((step_176 (res (= (* -1 (* 8 ONE)) (- (* 8 ONE))) step_167 step_175)))
(let-proof ((step_177 (refl (ControlFlow (* 0 ONE) (* 7 ONE)))))
(let-proof ((step_178 (cong (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))))))
(let-proof ((step_179 (res (= (ControlFlow (* 0 ONE) (* 7 ONE)) (ControlFlow (* 0 ONE) (* 7 ONE))) step_177 step_178)))
(let-proof ((step_180 (res (= (- (* 0 ONE) (* 8 ONE)) (- (* 8 ONE))) step_176 step_179)))
(let-proof ((step_181 (cong (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true))))
(let-proof ((step_182 (res (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE)))) step_180 step_181)))
(let-proof ((step_183 (res (= true true) step_166 step_182)))
(let-proof ((step_184 (cong (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))
(let-proof ((step_185 (res (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true)) step_183 step_184)))
(let-proof ((step_186 (res (= (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))) step_165 step_185)))
(let-proof ((step_187 (refl (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)))))
(let-proof ((step_188 (cong (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))
(let-proof ((step_189 (res (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE))) step_187 step_188)))
(let-proof ((step_190 (res (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) step_186 step_189)))
(let-proof ((step_191 (cong (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))
(let-proof ((step_192 (res (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))) step_190 step_191)))
(let-proof ((step_193 (res (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))) step_133 step_192)))
(let-proof ((step_194 (cong (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))
(let-proof ((step_195 (res (= (not held@0) (not held@0)) step_32 step_194)))
(let-proof ((step_196 (res (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) step_193 step_195)))
(let-proof ((step_197 (poly* (* -1 (* 11 ONE)) (- (* 11 ONE)))))
(let-proof ((step_198 (cong (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* 0 ONE) (- (* 11 ONE))))))
(let-proof ((step_199 (-def (* 0 ONE) (* 11 ONE))))
(let-proof ((step_200 (poly+ (+ (* 0 ONE) (- (* 11 ONE))) (- (* 11 ONE)))))
(let-proof ((step_201 (trans (- (* 0 ONE) (* 11 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* 0 ONE) (- (* 11 ONE))) (- (* 11 ONE)))))
(let-proof ((step_202 (res (= (+ (* 0 ONE) (- (* 11 ONE))) (- (* 11 ONE))) step_200 step_201)))
(let-proof ((step_203 (res (= (- (* 0 ONE) (* 11 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) step_199 step_202)))
(let-proof ((step_204 (res (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* 0 ONE) (- (* 11 ONE)))) step_198 step_203)))
(let-proof ((step_205 (res (= (* 0 ONE) (* 0 ONE)) step_31 step_204)))
(let-proof ((step_206 (res (= (* -1 (* 11 ONE)) (- (* 11 ONE))) step_197 step_205)))
(let-proof ((step_207 (refl (ControlFlow (* 0 ONE) (* 10 ONE)))))
(let-proof ((step_208 (cong (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))))))
(let-proof ((step_209 (res (= (ControlFlow (* 0 ONE) (* 10 ONE)) (ControlFlow (* 0 ONE) (* 10 ONE))) step_207 step_208)))
(let-proof ((step_210 (res (= (- (* 0 ONE) (* 11 ONE)) (- (* 11 ONE))) step_206 step_209)))
(let-proof ((step_211 (cong (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)))))
(let-proof ((step_212 (res (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE)))) step_210 step_211)))
(let-proof ((step_213 (res (= (not held@0) (not held@0)) step_32 step_212)))
(let-proof ((step_214 (cong (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))
(let-proof ((step_215 (res (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0))) step_213 step_214)))
(let-proof ((step_216 (res (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))) step_196 step_215)))
(let-proof ((step_217 (refl (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)))))
(let-proof ((step_218 (cong (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))
(let-proof ((step_219 (res (= (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE))) step_217 step_218)))
(let-proof ((step_220 (res (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))) step_216 step_219)))
(let-proof ((step_221 (refl (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)))))
(let-proof ((step_222 (=+1 held@2 held@0)))
(let-proof ((step_223 (xor+ (xor held@2 held@0) held@2 held@0)))
(let-proof ((step_224 (res held@0 step_222 step_223)))
(let-proof ((step_225 (xor+ (xor held@2 held@0) held@0 held@2)))
(let-proof ((step_226 (=+2 held@2 held@0)))
(let-proof ((step_227 (res held@0 step_225 step_226)))
(let-proof ((step_228 (res held@2 step_224 step_227)))
(let-proof ((step_229 (=+1 (= held@2 held@0) (not (xor held@2 held@0)))))
(let-proof ((step_230 (not- (xor held@2 held@0))))
(let-proof ((step_231 (res (not (xor held@2 held@0)) step_229 step_230)))
(let-proof ((step_232 (res (xor held@2 held@0) step_228 step_231)))
(let-proof ((step_233 (not+ (xor held@2 held@0))))
(let-proof ((step_234 (=+2 (= held@2 held@0) (not (xor held@2 held@0)))))
(let-proof ((step_235 (res (not (xor held@2 held@0)) step_233 step_234)))
(let-proof ((step_236 (xor+ held@2 held@0 (xor held@2 held@0))))
(let-proof ((step_237 (=-1 held@2 held@0)))
(let-proof ((step_238 (res held@0 step_236 step_237)))
(let-proof ((step_239 (=-2 held@2 held@0)))
(let-proof ((step_240 (xor- held@2 held@0 (xor held@2 held@0))))
(let-proof ((step_241 (res held@0 step_239 step_240)))
(let-proof ((step_242 (res held@2 step_238 step_241)))
(let-proof ((step_243 (res (xor held@2 held@0) step_235 step_242)))
(let-proof ((step_244 (res (= held@2 held@0) step_232 step_243)))
(let-proof ((step_245 (cong (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))))))
(let-proof ((step_246 (res (= (= held@2 held@0) (not (xor held@2 held@0))) step_244 step_245)))
(let-proof ((step_247 (res (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) step_221 step_246)))
(let-proof ((step_248 (cong (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)) (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))))
(let-proof ((step_249 (res (= (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)))) step_247 step_248)))
(let-proof ((step_250 (res (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)) step_50 step_249)))
(let-proof ((step_251 (=+1 (not true) false)))
(let-proof ((step_252 (not- true)))
(let-proof ((step_253 (res true step_4 step_252)))
(let-proof ((step_254 (res (not true) step_251 step_253)))
(let-proof ((step_255 (res false step_254 step_17)))
(let-proof ((step_256 (cong (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2))) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))))))
(let-proof ((step_257 (res (= (not true) false) step_255 step_256)))
(let-proof ((step_258 (res (= (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)) (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))) step_250 step_257)))
(let-proof ((step_259 (refl (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)))))
(let-proof ((step_260 (cong (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))))))
(let-proof ((step_261 (res (= (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE))) step_259 step_260)))
(let-proof ((step_262 (res (= (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2))) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) step_258 step_261)))
(let-proof ((step_263 (cong (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))
(let-proof ((step_264 (res (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))))) step_262 step_263)))
(let-proof ((step_265 (res (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))) step_220 step_264)))
(let-proof ((step_266 (cong (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))))
(let-proof ((step_267 (res (= (not held@0) (not held@0)) step_32 step_266)))
(let-proof ((step_268 (res (= (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))) step_265 step_267)))
(let-proof ((step_269 (refl (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)))))
(let-proof ((step_270 (cong (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))))
(let-proof ((step_271 (res (= (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE))) step_269 step_270)))
(let-proof ((step_272 (res (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))) step_268 step_271)))
(let-proof ((step_273 (cong (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))))))
(let-proof ((step_274 (res (= (not false) true) step_30 step_273)))
(let-proof ((step_275 (res (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))) step_272 step_274)))
(let-proof ((step_276 (poly* (* -1 (* 14 ONE)) (- (* 14 ONE)))))
(let-proof ((step_277 (cong (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* 0 ONE) (- (* 14 ONE))))))
(let-proof ((step_278 (-def (* 0 ONE) (* 14 ONE))))
(let-proof ((step_279 (poly+ (+ (* 0 ONE) (- (* 14 ONE))) (- (* 14 ONE)))))
(let-proof ((step_280 (trans (- (* 0 ONE) (* 14 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* 0 ONE) (- (* 14 ONE))) (- (* 14 ONE)))))
(let-proof ((step_281 (res (= (+ (* 0 ONE) (- (* 14 ONE))) (- (* 14 ONE))) step_279 step_280)))
(let-proof ((step_282 (res (= (- (* 0 ONE) (* 14 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) step_278 step_281)))
(let-proof ((step_283 (res (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* 0 ONE) (- (* 14 ONE)))) step_277 step_282)))
(let-proof ((step_284 (res (= (* 0 ONE) (* 0 ONE)) step_31 step_283)))
(let-proof ((step_285 (res (= (* -1 (* 14 ONE)) (- (* 14 ONE))) step_276 step_284)))
(let-proof ((step_286 (refl (ControlFlow (* 0 ONE) (* 13 ONE)))))
(let-proof ((step_287 (cong (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))))))
(let-proof ((step_288 (res (= (ControlFlow (* 0 ONE) (* 13 ONE)) (ControlFlow (* 0 ONE) (* 13 ONE))) step_286 step_287)))
(let-proof ((step_289 (res (= (- (* 0 ONE) (* 14 ONE)) (- (* 14 ONE))) step_285 step_288)))
(let-proof ((step_290 (cong (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true))))
(let-proof ((step_291 (res (= (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE)))) step_289 step_290)))
(let-proof ((step_292 (res (= (not false) true) step_30 step_291)))
(let-proof ((step_293 (cong (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))))))
(let-proof ((step_294 (res (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true)) step_292 step_293)))
(let-proof ((step_295 (res (= (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))) step_275 step_294)))
(let-proof ((step_296 (refl (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)))))
(let-proof ((step_297 (cong (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))))))))
(let-proof ((step_298 (res (= (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE))) step_296 step_297)))
(let-proof ((step_299 (res (= (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))))) step_295 step_298)))
(let-proof ((step_300 (refl (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)))))
(let-proof ((step_301 (cong (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))))))))
(let-proof ((step_302 (res (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE))) step_300 step_301)))
(let-proof ((step_303 (res (= (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))))) step_299 step_302)))
(let-proof ((step_304 (cong (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))))))))))
(let-proof ((step_305 (res (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))))))) step_303 step_304)))
(let-proof ((step_306 (=-2 (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))))))))))
(let-proof ((step_307 (res (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))))))) step_305 step_306)))
(let-proof ((step_308 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))))))))))) step_25 step_307)))
(let-proof ((step_309 (not- (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))))))))
(let-proof ((step_310 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))))))) step_308 step_309)))
(let-proof ((step_311 (not- (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))))))))))))))
(let-proof ((step_312 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))))))))))))) prem_a0 step_311)))
(let-proof ((step_313 (res (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 0 ONE) (* 14 ONE))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 0 ONE) (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 0 ONE) (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (not held@1))))))))))))))))) step_310 step_312)))
(let-proof ((step_314 (res (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))))) step_24 step_313)))
(let-proof ((step_315 (res (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))))) step_23 step_314)))
(let-proof ((step_316 (res (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))) step_22 step_315)))
(let-proof ((step_317 (res (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (- (* 14 ONE))) true) step_21 step_316)))
(let-proof ((step_318 (res (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))) step_19 step_317)))
(let-proof ((step_319 (res (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))) step_18 step_318)))
(let-proof ((step_320 (not+ held@0)))
(let-proof ((step_321 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0))))
(let-proof ((step_322 (res (not held@0) step_320 step_321)))
(let-proof ((step_323 (=>+ 0 (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))
(let-proof ((step_324 (not- held@0)))
(let-proof ((step_325 (res (not held@0) step_323 step_324)))
(let-proof ((step_326 (res (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))) step_325 step_319)))
(let-proof ((step_327 (res held@0 step_322 step_326)))
(let-proof ((step_328 (and+ (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))
(let-proof ((step_329 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))
(let-proof ((step_330 (res (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))) step_328 step_329)))
(let-proof ((step_331 (res (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) step_327 step_330)))
(let-proof ((step_332 (=>+ 0 false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))))
(let-proof ((step_333 (res false step_332 step_17)))
(let-proof ((step_334 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))))))
(let-proof ((step_335 (res (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))) step_333 step_334)))
(let-proof ((step_336 (and+ (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))))
(let-proof ((step_337 (=>+ 1 (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))))))
(let-proof ((step_338 (res (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))))) step_336 step_337)))
(let-proof ((step_339 (res (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))))) step_338 step_319)))
(let-proof ((step_340 (res (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) step_335 step_339)))
(let-proof ((step_341 (res (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (- (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))))) step_331 step_340)))
(let-proof ((step_342 (=>+ 0 (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))))
(let-proof ((step_343 (=>+ 0 (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))))
(let-proof ((step_344 (=>+ 0 (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))))
(let-proof ((step_345 (and- 1 (not held@1) (= x@2 x@1))))
(let-proof ((step_346 (symm (+ x@0 (* 1 ONE)) x@1)))
(let-proof ((step_347 (symm x@1 x@2)))
(let-proof ((step_348 (trans (+ x@0 (* 1 ONE)) x@1 x@2 x@0)))
(let-proof ((step_349 (res (= x@1 x@2) step_347 step_348)))
(let-proof ((step_350 (res (= (+ x@0 (* 1 ONE)) x@1) step_346 step_349)))
(let-proof ((step_351 (farkas 1 (= (+ x@0 (* 1 ONE)) x@0))))
(let-proof ((step_352 (res (= (+ x@0 (* 1 ONE)) x@0) step_350 step_351)))
(let-proof ((step_353 (res (= x@2 x@1) step_345 step_352)))
(let-proof ((step_354 (res (and (not held@1) (= x@2 x@1)) step_9 step_353)))
(let-proof ((step_355 (res (= x@1 (+ x@0 (* 1 ONE))) step_344 step_354)))
(let-proof ((step_356 (res (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))) step_355 step_10)))
(let-proof ((step_357 (res (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))) step_356 step_13)))
(let-proof ((step_358 (res (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) step_357 step_16)))
(let-proof ((step_359 (res (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))) step_8 step_358)))
(let-proof ((step_360 (res (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))) step_7 step_359)))
(let-proof ((step_361 (and- 0 held@1 (= x@2 x@0))))
(let-proof ((step_362 (res (and held@1 (= x@2 x@0)) step_360 step_361)))
(let-proof ((step_363 (res held@1 step_362 step_2)))
(let-proof ((step_364 (and- 0 (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))))
(let-proof ((step_365 (res (not (xor held@2 held@1)) step_364 step_3)))
(let-proof ((step_366 (res (xor held@2 held@1) step_363 step_365)))
(let-proof ((step_367 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))
(let-proof ((step_368 (res held@2 step_366 step_367)))
(let-proof ((step_369 (res (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) step_343 step_368)))
(let-proof ((step_370 (=>+ 1 (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))))
(let-proof ((step_371 (res (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2) step_369 step_370)))
(let-proof ((step_372 (res (= x@2 x@0) step_342 step_371)))
(let-proof ((step_373 (=>+ 1 (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))))
(let-proof ((step_374 (res (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)) step_372 step_373)))
(let-proof ((step_375 (res (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) step_6 step_374)))
(let-proof ((step_376 (res (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) step_375 step_341)))
(let-proof ((step_377 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))))))
(let-proof ((step_378 (res (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))) step_376 step_377)))
(let-proof ((step_379 (=>+ 1 (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))
(let-proof ((step_380 (res (not held@1) step_0 step_379)))
(let-proof ((step_381 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))
(let-proof ((step_382 (res (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)) step_380 step_381)))
(let-proof ((step_383 (and- 0 (not held@1) (= x@2 x@1))))
(let-proof ((step_384 (res (not held@1) step_383 step_1)))
(let-proof ((step_385 (res held@1 step_382 step_384)))
(let-proof ((step_386 (and+ (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))
(let-proof ((step_387 (=>+ 1 (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))
(let-proof ((step_388 (res (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))) step_386 step_387)))
(let-proof ((step_389 (res (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))) step_385 step_388)))
(let-proof ((step_390 (res (and (not held@1) (= x@2 x@1)) step_9 step_389)))
(let-proof ((step_391 (res (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) step_378 step_390)))
(let-proof ((step_392 (res (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))) step_391 step_10)))
(let-proof ((step_393 (res (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))) step_392 step_13)))
(let-proof ((step_394 (res (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) step_6 step_393)))
(let-proof ((step_395 (res (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) step_394 step_16)))
(let-proof ((step_396 (res (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (- (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))) step_395 step_341)))
(let-proof ((step_397 (res (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))) step_8 step_396)))
(let-proof ((step_398 (=>+ 0 (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))
(let-proof ((step_399 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))
(let-proof ((step_400 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))))))
(let-proof ((step_401 (res (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2))) step_376 step_400)))
(let-proof ((step_402 (and+ (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))))
(let-proof ((step_403 (=>+ 1 (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))))))
(let-proof ((step_404 (res (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)))) step_402 step_403)))
(let-proof ((step_405 (res (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))) step_404 step_397)))
(let-proof ((step_406 (res (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) step_401 step_405)))
(let-proof ((step_407 (res (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))) step_399 step_406)))
(let-proof ((step_408 (res (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1)) step_398 step_407)))
(let-proof ((step_409 (res (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not held@1))))) step_7 step_397)))
(let-proof ((step_410 (and- 1 held@1 (= x@2 x@0))))
(let-proof ((step_411 (res (and held@1 (= x@2 x@0)) step_409 step_410)))
(let-proof ((step_412 (and- 0 (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))))
(let-proof ((step_413 (not- (= x@2 x@0))))
(let-proof ((step_414 (res (not (= x@2 x@0)) step_412 step_413)))
(let-proof ((step_415 (res (= x@2 x@0) step_411 step_414)))
(let-proof ((step_416 (res (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) step_408 step_415)))
step_416
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
