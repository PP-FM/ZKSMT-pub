unsat
(let-proof ((prem_a0 (assume (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y))))))))))
(let-proof ((prem_a1 (assume (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE)))))))
(let-proof ((step_0 (=+1 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (= (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))))
(let-proof ((step_1 (symm (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))
(let-proof ((step_2 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) step_0 step_1)))
(let-proof ((step_3 (symm (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE)))))
(let-proof ((step_4 (=+2 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (= (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))))
(let-proof ((step_5 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) step_3 step_4)))
(let-proof ((step_6 (res (= (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_2 step_5)))
(let-proof ((step_7 (=>+ 0 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))))
(let-proof ((step_8 (=-2 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (= (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))))
(let-proof ((step_9 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (= (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) step_6 step_8)))
(let-proof ((step_10 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) step_7 step_9)))
(let-proof ((step_11 (true+ )))
(let-proof ((step_12 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))
(let-proof ((step_13 (res true step_11 step_12)))
(let-proof ((step_14 (=>+ 1 (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))
(let-proof ((step_15 (res (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true) step_13 step_14)))
(let-proof ((step_16 (and+ (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))
(let-proof ((step_17 (=>+ 1 (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))))
(let-proof ((step_18 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))))
(let-proof ((step_19 (not+ (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y)))))))))
(let-proof ((step_20 (=+1 (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))))
(let-proof ((step_21 (not+ (<= (+ y (* -1 x)) (* 0 ONE)))))
(let-proof ((step_22 (farkas 1 1 (< x y) (<= (+ y (* -1 x)) (* 0 ONE)))))
(let-proof ((step_23 (res (<= (+ y (* -1 x)) (* 0 ONE)) step_21 step_22)))
(let-proof ((step_24 (res (< x y) step_20 step_23)))
(let-proof ((step_25 (total y x)))
(let-proof ((step_26 (total (+ y (* -1 x)) (* 0 ONE))))
(let-proof ((step_27 (farkas 1 1 (<= y x) (< (* 0 ONE) (+ y (* -1 x))))))
(let-proof ((step_28 (res (< (* 0 ONE) (+ y (* -1 x))) step_26 step_27)))
(let-proof ((step_29 (not- (<= (+ y (* -1 x)) (* 0 ONE)))))
(let-proof ((step_30 (res (<= (+ y (* -1 x)) (* 0 ONE)) step_28 step_29)))
(let-proof ((step_31 (res (<= y x) step_25 step_30)))
(let-proof ((step_32 (=+2 (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))))
(let-proof ((step_33 (res (< x y) step_31 step_32)))
(let-proof ((step_34 (res (not (<= (+ y (* -1 x)) (* 0 ONE))) step_24 step_33)))
(let-proof ((step_35 (refl (* 0 ONE))))
(let-proof ((step_36 (refl (ControlFlow (* 0 ONE) (* 2 ONE)))))
(let-proof ((step_37 (refl y)))
(let-proof ((step_38 (=+2 (= y y) true)))
(let-proof ((step_39 (res (= y y) step_37 step_38)))
(let-proof ((step_40 (res true step_11 step_39)))
(let-proof ((step_41 (poly* (* -1 (* 1 ONE)) (- (* 1 ONE)))))
(let-proof ((step_42 (cong (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE))))))
(let-proof ((step_43 (-def (* 0 ONE) (* 1 ONE))))
(let-proof ((step_44 (poly+ (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE)))))
(let-proof ((step_45 (trans (- (* 0 ONE) (* 1 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE)))))
(let-proof ((step_46 (res (= (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE))) step_44 step_45)))
(let-proof ((step_47 (res (= (- (* 0 ONE) (* 1 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) step_43 step_46)))
(let-proof ((step_48 (res (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE)))) step_42 step_47)))
(let-proof ((step_49 (res (= (* 0 ONE) (* 0 ONE)) step_35 step_48)))
(let-proof ((step_50 (res (= (* -1 (* 1 ONE)) (- (* 1 ONE))) step_41 step_49)))
(let-proof ((step_51 (cong (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))))
(let-proof ((step_52 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_36 step_51)))
(let-proof ((step_53 (res (= (- (* 0 ONE) (* 1 ONE)) (- (* 1 ONE))) step_50 step_52)))
(let-proof ((step_54 (cong (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))
(let-proof ((step_55 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) step_53 step_54)))
(let-proof ((step_56 (res (= (= y y) true) step_40 step_55)))
(let-proof ((step_57 (cong (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))
(let-proof ((step_58 (res (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) step_34 step_57)))
(let-proof ((step_59 (res (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)) step_56 step_58)))
(let-proof ((step_60 (poly* (* -1 (* 3 ONE)) (- (* 3 ONE)))))
(let-proof ((step_61 (cong (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (- (* 3 ONE))))))
(let-proof ((step_62 (-def (* 0 ONE) (* 3 ONE))))
(let-proof ((step_63 (poly+ (+ (* 0 ONE) (- (* 3 ONE))) (- (* 3 ONE)))))
(let-proof ((step_64 (trans (- (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (- (* 3 ONE))) (- (* 3 ONE)))))
(let-proof ((step_65 (res (= (+ (* 0 ONE) (- (* 3 ONE))) (- (* 3 ONE))) step_63 step_64)))
(let-proof ((step_66 (res (= (- (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) step_62 step_65)))
(let-proof ((step_67 (res (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (- (* 3 ONE)))) step_61 step_66)))
(let-proof ((step_68 (res (= (* 0 ONE) (* 0 ONE)) step_35 step_67)))
(let-proof ((step_69 (res (= (* -1 (* 3 ONE)) (- (* 3 ONE))) step_60 step_68)))
(let-proof ((step_70 (cong (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))))))
(let-proof ((step_71 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_36 step_70)))
(let-proof ((step_72 (res (= (- (* 0 ONE) (* 3 ONE)) (- (* 3 ONE))) step_69 step_71)))
(let-proof ((step_73 (cong (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))))))
(let-proof ((step_74 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE)))) step_72 step_73)))
(let-proof ((step_75 (res (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) step_34 step_74)))
(let-proof ((step_76 (cong (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))))
(let-proof ((step_77 (res (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))) step_75 step_76)))
(let-proof ((step_78 (res (= (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))) step_59 step_77)))
(let-proof ((step_79 (refl (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))))
(let-proof ((step_80 (=+1 (< y x) (not (<= (+ x (* -1 y)) (* 0 ONE))))))
(let-proof ((step_81 (not+ (<= (+ x (* -1 y)) (* 0 ONE)))))
(let-proof ((step_82 (farkas 1 1 (< y x) (<= (+ x (* -1 y)) (* 0 ONE)))))
(let-proof ((step_83 (res (<= (+ x (* -1 y)) (* 0 ONE)) step_81 step_82)))
(let-proof ((step_84 (res (< y x) step_80 step_83)))
(let-proof ((step_85 (total x y)))
(let-proof ((step_86 (total (+ x (* -1 y)) (* 0 ONE))))
(let-proof ((step_87 (farkas 1 1 (<= x y) (< (* 0 ONE) (+ x (* -1 y))))))
(let-proof ((step_88 (res (< (* 0 ONE) (+ x (* -1 y))) step_86 step_87)))
(let-proof ((step_89 (not- (<= (+ x (* -1 y)) (* 0 ONE)))))
(let-proof ((step_90 (res (<= (+ x (* -1 y)) (* 0 ONE)) step_88 step_89)))
(let-proof ((step_91 (res (<= x y) step_85 step_90)))
(let-proof ((step_92 (=+2 (< y x) (not (<= (+ x (* -1 y)) (* 0 ONE))))))
(let-proof ((step_93 (res (< y x) step_91 step_92)))
(let-proof ((step_94 (res (not (<= (+ x (* -1 y)) (* 0 ONE))) step_84 step_93)))
(let-proof ((step_95 (cong (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))))))
(let-proof ((step_96 (res (= (< y x) (not (<= (+ x (* -1 y)) (* 0 ONE)))) step_94 step_95)))
(let-proof ((step_97 (res (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) step_79 step_96)))
(let-proof ((step_98 (cong (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y))))) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))))
(let-proof ((step_99 (res (= (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))) step_97 step_98)))
(let-proof ((step_100 (res (= (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))) step_78 step_99)))
(let-proof ((step_101 (refl (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)))))
(let-proof ((step_102 (cong (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y)))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))))))
(let-proof ((step_103 (res (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE))) step_101 step_102)))
(let-proof ((step_104 (res (= (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y))))) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))) step_100 step_103)))
(let-proof ((step_105 (cong (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))))))
(let-proof ((step_106 (res (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y)))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))) step_104 step_105)))
(let-proof ((step_107 (=-2 (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))))))
(let-proof ((step_108 (res (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))))) step_106 step_107)))
(let-proof ((step_109 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y))))))) step_19 step_108)))
(let-proof ((step_110 (not- (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))))))
(let-proof ((step_111 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))) step_109 step_110)))
(let-proof ((step_112 (not- (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y)))))))))
(let-proof ((step_113 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y))))))) prem_a0 step_112)))
(let-proof ((step_114 (res (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= y y)))))) step_111 step_113)))
(let-proof ((step_115 (res (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))) step_18 step_114)))
(let-proof ((step_116 (res (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))) step_17 step_115)))
(let-proof ((step_117 (res (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))) step_16 step_116)))
(let-proof ((step_118 (res (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)) step_15 step_117)))
(let-proof ((step_119 (res (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) step_10 step_118)))
(let-proof ((step_120 (not+ (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))))))
(let-proof ((step_121 (cong (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE)))) (not (= (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))))
(let-proof ((step_122 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (= (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) step_6 step_121)))
(let-proof ((step_123 (=-2 (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE)))) (not (= (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))))
(let-proof ((step_124 (res (= (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE)))) (not (= (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))) step_122 step_123)))
(let-proof ((step_125 (res (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE)))) step_120 step_124)))
(let-proof ((step_126 (not- (= (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))))
(let-proof ((step_127 (res (not (= (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) step_125 step_126)))
(let-proof ((step_128 (not- (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))))))
(let-proof ((step_129 (res (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE)))) prem_a1 step_128)))
(let-proof ((step_130 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) step_127 step_129)))
(let-proof ((step_131 (res (= (- (* 3 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_119 step_130)))
step_131
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
