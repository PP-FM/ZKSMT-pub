unsat
(let-proof ((prem_a0 (assume (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))))
(let-proof ((prem_a1 (assume (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))))))
(let-proof ((step_0 (=+1 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))))
(let-proof ((step_1 (symm (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))
(let-proof ((step_2 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) step_0 step_1)))
(let-proof ((step_3 (symm (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))))
(let-proof ((step_4 (=+2 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))))
(let-proof ((step_5 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) step_3 step_4)))
(let-proof ((step_6 (res (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_2 step_5)))
(let-proof ((step_7 (=>+ 0 (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))
(let-proof ((step_8 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))
(let-proof ((step_9 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))
(let-proof ((step_10 (not+ (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))))
(let-proof ((step_11 (refl (= call0formal@barresult@0@@0 null))))
(let-proof ((step_12 (poly* (* -1 (* 1 ONE)) (- (* 1 ONE)))))
(let-proof ((step_13 (refl (* 0 ONE))))
(let-proof ((step_14 (cong (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE))))))
(let-proof ((step_15 (-def (* 0 ONE) (* 1 ONE))))
(let-proof ((step_16 (poly+ (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE)))))
(let-proof ((step_17 (trans (- (* 0 ONE) (* 1 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE)))))
(let-proof ((step_18 (res (= (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE))) step_16 step_17)))
(let-proof ((step_19 (res (= (- (* 0 ONE) (* 1 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) step_15 step_18)))
(let-proof ((step_20 (res (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE)))) step_14 step_19)))
(let-proof ((step_21 (res (= (* 0 ONE) (* 0 ONE)) step_13 step_20)))
(let-proof ((step_22 (res (= (* -1 (* 1 ONE)) (- (* 1 ONE))) step_12 step_21)))
(let-proof ((step_23 (refl (ControlFlow (* 0 ONE) (* 2 ONE)))))
(let-proof ((step_24 (cong (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))))
(let-proof ((step_25 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_23 step_24)))
(let-proof ((step_26 (res (= (- (* 0 ONE) (* 1 ONE)) (- (* 1 ONE))) step_22 step_25)))
(let-proof ((step_27 (refl (= call0formal@barresult@0 null))))
(let-proof ((step_28 (cong (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))))))
(let-proof ((step_29 (res (= (= call0formal@barresult@0 null) (= call0formal@barresult@0 null)) step_27 step_28)))
(let-proof ((step_30 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) step_26 step_29)))
(let-proof ((step_31 (cong (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))
(let-proof ((step_32 (res (= (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))) step_30 step_31)))
(let-proof ((step_33 (res (= (= call0formal@barresult@0@@0 null) (= call0formal@barresult@0@@0 null)) step_11 step_32)))
(let-proof ((step_34 (refl (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)))))
(let-proof ((step_35 (cong (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))
(let-proof ((step_36 (res (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) step_34 step_35)))
(let-proof ((step_37 (res (= (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null))) step_33 step_36)))
(let-proof ((step_38 (refl (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)))))
(let-proof ((step_39 (cong (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))))
(let-proof ((step_40 (res (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE))) step_38 step_39)))
(let-proof ((step_41 (res (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))) step_37 step_40)))
(let-proof ((step_42 (cong (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))))
(let-proof ((step_43 (res (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))) step_41 step_42)))
(let-proof ((step_44 (=-2 (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))))
(let-proof ((step_45 (res (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))) step_43 step_44)))
(let-proof ((step_46 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))) step_10 step_45)))
(let-proof ((step_47 (not- (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))))
(let-proof ((step_48 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))) step_46 step_47)))
(let-proof ((step_49 (not- (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))))
(let-proof ((step_50 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))) prem_a0 step_49)))
(let-proof ((step_51 (res (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))) step_48 step_50)))
(let-proof ((step_52 (res (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))) step_9 step_51)))
(let-proof ((step_53 (res (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null))) step_8 step_52)))
(let-proof ((step_54 (res (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (= call0formal@barresult@0@@0 null)) step_7 step_53)))
(let-proof ((step_55 (and- 1 (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))))
(let-proof ((step_56 (res (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) step_54 step_55)))
(let-proof ((step_57 (=-2 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))))
(let-proof ((step_58 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) step_6 step_57)))
(let-proof ((step_59 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) step_56 step_58)))
(let-proof ((step_60 (not+ (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))))
(let-proof ((step_61 (cong (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))))
(let-proof ((step_62 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) step_6 step_61)))
(let-proof ((step_63 (=-2 (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))))
(let-proof ((step_64 (res (= (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))) step_62 step_63)))
(let-proof ((step_65 (res (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) step_60 step_64)))
(let-proof ((step_66 (not- (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))))
(let-proof ((step_67 (res (not (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) step_65 step_66)))
(let-proof ((step_68 (not- (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))))
(let-proof ((step_69 (res (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) prem_a1 step_68)))
(let-proof ((step_70 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) step_67 step_69)))
(let-proof ((step_71 (res (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_59 step_70)))
step_71
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
