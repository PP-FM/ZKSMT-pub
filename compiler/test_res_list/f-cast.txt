unsat
(let-proof ((prem_a0 (assume (= SHRT_MIN (- (* 32768 ONE))))))
(let-proof ((prem_a1 (assume (= SHRT_MAX (* 32767 ONE)))))
(let-proof ((prem_a2 (assume (= b (- a)))))
(let-proof ((prem_a3 (assume (= (f (- a)) (- (f a))))))
(let-proof ((prem_a4 (assume (or (not (or (< (f b) SHRT_MIN) (< SHRT_MAX (f b)))) err))))
(let-proof ((prem_a5 (assume (not err))))
(let-proof ((prem_a6 (assume (< (f a) SHRT_MIN))))
(let-proof ((step_0 (=+1 (= SHRT_MIN (- (* 32768 ONE))) (= (+ SHRT_MIN (* 32768 ONE)) (* 0 ONE)))))
(let-proof ((step_1 (symm (- (* 32768 ONE)) SHRT_MIN)))
(let-proof ((step_2 (trichotomy (+ SHRT_MIN (* 32768 ONE)) (* 0 ONE))))
(let-proof ((step_3 (farkas 1 1 (= SHRT_MIN (- (* 32768 ONE))) (< (* 0 ONE) (+ SHRT_MIN (* 32768 ONE))))))
(let-proof ((step_4 (res (< (* 0 ONE) (+ SHRT_MIN (* 32768 ONE))) step_2 step_3)))
(let-proof ((step_5 (farkas 1 1 (= (- (* 32768 ONE)) SHRT_MIN) (< (+ SHRT_MIN (* 32768 ONE)) (* 0 ONE)))))
(let-proof ((step_6 (res (< (+ SHRT_MIN (* 32768 ONE)) (* 0 ONE)) step_4 step_5)))
(let-proof ((step_7 (res (= (- (* 32768 ONE)) SHRT_MIN) step_1 step_6)))
(let-proof ((step_8 (res (= SHRT_MIN (- (* 32768 ONE))) step_0 step_7)))
(let-proof ((step_9 (symm (* 0 ONE) (+ SHRT_MIN (* 32768 ONE)))))
(let-proof ((step_10 (trichotomy SHRT_MIN (- (* 32768 ONE)))))
(let-proof ((step_11 (farkas 1 1 (= (+ SHRT_MIN (* 32768 ONE)) (* 0 ONE)) (< (- (* 32768 ONE)) SHRT_MIN))))
(let-proof ((step_12 (res (< (- (* 32768 ONE)) SHRT_MIN) step_10 step_11)))
(let-proof ((step_13 (farkas 1 1 (= (* 0 ONE) (+ SHRT_MIN (* 32768 ONE))) (< SHRT_MIN (- (* 32768 ONE))))))
(let-proof ((step_14 (res (< SHRT_MIN (- (* 32768 ONE))) step_12 step_13)))
(let-proof ((step_15 (res (= (* 0 ONE) (+ SHRT_MIN (* 32768 ONE))) step_9 step_14)))
(let-proof ((step_16 (=+2 (= SHRT_MIN (- (* 32768 ONE))) (= (+ SHRT_MIN (* 32768 ONE)) (* 0 ONE)))))
(let-proof ((step_17 (res (= SHRT_MIN (- (* 32768 ONE))) step_15 step_16)))
(let-proof ((step_18 (res (= (+ SHRT_MIN (* 32768 ONE)) (* 0 ONE)) step_8 step_17)))
(let-proof ((step_19 (=-2 (= SHRT_MIN (- (* 32768 ONE))) (= (+ SHRT_MIN (* 32768 ONE)) (* 0 ONE)))))
(let-proof ((step_20 (res (= (= SHRT_MIN (- (* 32768 ONE))) (= (+ SHRT_MIN (* 32768 ONE)) (* 0 ONE))) step_18 step_19)))
(let-proof ((step_21 (res (= SHRT_MIN (- (* 32768 ONE))) prem_a0 step_20)))
(let-proof ((step_22 (total-int (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE))))
(let-proof ((step_23 (=+1 (= SHRT_MAX (* 32767 ONE)) (= (+ SHRT_MAX (- (* 32767 ONE))) (* 0 ONE)))))
(let-proof ((step_24 (symm (* 32767 ONE) SHRT_MAX)))
(let-proof ((step_25 (trichotomy (+ SHRT_MAX (- (* 32767 ONE))) (* 0 ONE))))
(let-proof ((step_26 (farkas 1 1 (= SHRT_MAX (* 32767 ONE)) (< (* 0 ONE) (+ SHRT_MAX (- (* 32767 ONE)))))))
(let-proof ((step_27 (res (< (* 0 ONE) (+ SHRT_MAX (- (* 32767 ONE)))) step_25 step_26)))
(let-proof ((step_28 (farkas 1 1 (= (* 32767 ONE) SHRT_MAX) (< (+ SHRT_MAX (- (* 32767 ONE))) (* 0 ONE)))))
(let-proof ((step_29 (res (< (+ SHRT_MAX (- (* 32767 ONE))) (* 0 ONE)) step_27 step_28)))
(let-proof ((step_30 (res (= (* 32767 ONE) SHRT_MAX) step_24 step_29)))
(let-proof ((step_31 (res (= SHRT_MAX (* 32767 ONE)) step_23 step_30)))
(let-proof ((step_32 (symm (* 0 ONE) (+ SHRT_MAX (- (* 32767 ONE))))))
(let-proof ((step_33 (trichotomy SHRT_MAX (* 32767 ONE))))
(let-proof ((step_34 (farkas 1 1 (= (+ SHRT_MAX (- (* 32767 ONE))) (* 0 ONE)) (< (* 32767 ONE) SHRT_MAX))))
(let-proof ((step_35 (res (< (* 32767 ONE) SHRT_MAX) step_33 step_34)))
(let-proof ((step_36 (farkas 1 1 (= (* 0 ONE) (+ SHRT_MAX (- (* 32767 ONE)))) (< SHRT_MAX (* 32767 ONE)))))
(let-proof ((step_37 (res (< SHRT_MAX (* 32767 ONE)) step_35 step_36)))
(let-proof ((step_38 (res (= (* 0 ONE) (+ SHRT_MAX (- (* 32767 ONE)))) step_32 step_37)))
(let-proof ((step_39 (=+2 (= SHRT_MAX (* 32767 ONE)) (= (+ SHRT_MAX (- (* 32767 ONE))) (* 0 ONE)))))
(let-proof ((step_40 (res (= SHRT_MAX (* 32767 ONE)) step_38 step_39)))
(let-proof ((step_41 (res (= (+ SHRT_MAX (- (* 32767 ONE))) (* 0 ONE)) step_31 step_40)))
(let-proof ((step_42 (=-2 (= SHRT_MAX (* 32767 ONE)) (= (+ SHRT_MAX (- (* 32767 ONE))) (* 0 ONE)))))
(let-proof ((step_43 (res (= (= SHRT_MAX (* 32767 ONE)) (= (+ SHRT_MAX (- (* 32767 ONE))) (* 0 ONE))) step_41 step_42)))
(let-proof ((step_44 (res (= SHRT_MAX (* 32767 ONE)) prem_a1 step_43)))
(let-proof ((step_45 (-def a)))
(let-proof ((step_46 (refl b)))
(let-proof ((step_47 (cong (= b (- a)) (= b (* -1 a)))))
(let-proof ((step_48 (res (= b b) step_46 step_47)))
(let-proof ((step_49 (res (= (- a) (* -1 a)) step_45 step_48)))
(let-proof ((step_50 (=-2 (= b (- a)) (= b (* -1 a)))))
(let-proof ((step_51 (res (= (= b (- a)) (= b (* -1 a))) step_49 step_50)))
(let-proof ((step_52 (res (= b (- a)) prem_a2 step_51)))
(let-proof ((step_53 (-def (f a))))
(let-proof ((step_54 (cong (f (- a)) (f (* -1 a)))))
(let-proof ((step_55 (res (= (- a) (* -1 a)) step_45 step_54)))
(let-proof ((step_56 (cong (= (f (- a)) (- (f a))) (= (f (* -1 a)) (* -1 (f a))))))
(let-proof ((step_57 (res (= (f (- a)) (f (* -1 a))) step_55 step_56)))
(let-proof ((step_58 (res (= (- (f a)) (* -1 (f a))) step_53 step_57)))
(let-proof ((step_59 (=-2 (= (f (- a)) (- (f a))) (= (f (* -1 a)) (* -1 (f a))))))
(let-proof ((step_60 (res (= (= (f (- a)) (- (f a))) (= (f (* -1 a)) (* -1 (f a)))) step_58 step_59)))
(let-proof ((step_61 (res (= (f (- a)) (- (f a))) prem_a3 step_60)))
(let-proof ((step_62 (cong (f b) (f (* -1 a)))))
(let-proof ((step_63 (trans (f b) (f (* -1 a)) (* -1 (f a)))))
(let-proof ((step_64 (res (= (f b) (f (* -1 a))) step_62 step_63)))
(let-proof ((step_65 (res (= (f (* -1 a)) (* -1 (f a))) step_61 step_64)))
(let-proof ((step_66 (res (= b (* -1 a)) step_52 step_65)))
(let-proof ((step_67 (symm (* -1 (f a)) (f b))))
(let-proof ((step_68 (trichotomy (+ (f a) (f b)) (* 0 ONE))))
(let-proof ((step_69 (farkas 1 1 (= (f b) (* -1 (f a))) (< (* 0 ONE) (+ (f a) (f b))))))
(let-proof ((step_70 (res (< (* 0 ONE) (+ (f a) (f b))) step_68 step_69)))
(let-proof ((step_71 (farkas 1 1 (= (* -1 (f a)) (f b)) (< (+ (f a) (f b)) (* 0 ONE)))))
(let-proof ((step_72 (res (< (+ (f a) (f b)) (* 0 ONE)) step_70 step_71)))
(let-proof ((step_73 (res (= (* -1 (f a)) (f b)) step_67 step_72)))
(let-proof ((step_74 (res (= (f b) (* -1 (f a))) step_66 step_73)))
(let-proof ((step_75 (symm (* 0 ONE) (+ (f a) (f b)))))
(let-proof ((step_76 (total-int (+ SHRT_MIN (* -1 (f a))) (* 0 ONE))))
(let-proof ((step_77 (farkas 1 1 1 1 1 (= (+ SHRT_MIN (* 32768 ONE)) (* 0 ONE)) (<= (* 1 ONE) (+ SHRT_MIN (* -1 (f a)))) (<= (* 1 ONE) (+ SHRT_MAX (* -1 (f b)) (* 1 ONE))) (= (* 0 ONE) (+ (f a) (f b))) (= (+ SHRT_MAX (- (* 32767 ONE))) (* 0 ONE)))))
(let-proof ((step_78 (res (<= (* 1 ONE) (+ SHRT_MIN (* -1 (f a)))) step_76 step_77)))
(let-proof ((step_79 (res (<= (* 1 ONE) (+ SHRT_MAX (* -1 (f b)) (* 1 ONE))) step_22 step_78)))
(let-proof ((step_80 (res (= (* 0 ONE) (+ (f a) (f b))) step_75 step_79)))
(let-proof ((step_81 (res (= (+ (f a) (f b)) (* 0 ONE)) step_74 step_80)))
(let-proof ((step_82 (res (= (+ SHRT_MAX (- (* 32767 ONE))) (* 0 ONE)) step_44 step_81)))
(let-proof ((step_83 (not+ (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)))))
(let-proof ((step_84 (total (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))))
(let-proof ((step_85 (or+ 1 (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))))))
(let-proof ((step_86 (res (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))) step_83 step_85)))
(let-proof ((step_87 (not- (<= (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE)))))
(let-proof ((step_88 (=+1 (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)) (not (<= (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE))))))
(let-proof ((step_89 (not+ (<= (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE)))))
(let-proof ((step_90 (farkas 1 1 (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)) (<= (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE)))))
(let-proof ((step_91 (res (<= (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE)) step_89 step_90)))
(let-proof ((step_92 (res (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)) step_88 step_91)))
(let-proof ((step_93 (farkas 1 1 (< (* 0 ONE) (+ (f b) (* -1 SHRT_MAX))) (<= (* 1 ONE) (+ SHRT_MAX (* -1 (f b)) (* 1 ONE))))))
(let-proof ((step_94 (res (<= (* 1 ONE) (+ SHRT_MAX (* -1 (f b)) (* 1 ONE))) step_22 step_93)))
(let-proof ((step_95 (res (<= (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE)) step_94 step_87)))
(let-proof ((step_96 (res (< (* 0 ONE) (+ (f b) (* -1 SHRT_MAX))) step_84 step_95)))
(let-proof ((step_97 (=+2 (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)) (not (<= (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE))))))
(let-proof ((step_98 (res (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)) step_96 step_97)))
(let-proof ((step_99 (res (not (<= (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE))) step_92 step_98)))
(let-proof ((step_100 (=-2 (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)) (not (<= (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE))))))
(let-proof ((step_101 (res (= (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)) (not (<= (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE)))) step_99 step_100)))
(let-proof ((step_102 (res (not (<= (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE))) step_101 step_87)))
(let-proof ((step_103 (res (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)) step_86 step_102)))
(let-proof ((step_104 (refl err)))
(let-proof ((step_105 (=+1 (< SHRT_MAX (f b)) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))))))
(let-proof ((step_106 (farkas 1 1 (< SHRT_MAX (f b)) (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)))))
(let-proof ((step_107 (res (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)) step_83 step_106)))
(let-proof ((step_108 (res (< SHRT_MAX (f b)) step_105 step_107)))
(let-proof ((step_109 (total (f b) SHRT_MAX)))
(let-proof ((step_110 (farkas 1 1 (<= (f b) SHRT_MAX) (< (* 0 ONE) (+ (f b) (* -1 SHRT_MAX))))))
(let-proof ((step_111 (res (< (* 0 ONE) (+ (f b) (* -1 SHRT_MAX))) step_84 step_110)))
(let-proof ((step_112 (not- (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)))))
(let-proof ((step_113 (res (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)) step_111 step_112)))
(let-proof ((step_114 (res (<= (f b) SHRT_MAX) step_109 step_113)))
(let-proof ((step_115 (=+2 (< SHRT_MAX (f b)) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))))))
(let-proof ((step_116 (res (< SHRT_MAX (f b)) step_114 step_115)))
(let-proof ((step_117 (res (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))) step_108 step_116)))
(let-proof ((step_118 (=+1 (< (f b) SHRT_MIN) (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))))))
(let-proof ((step_119 (not+ (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE)))))
(let-proof ((step_120 (farkas 1 1 (< (f b) SHRT_MIN) (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE)))))
(let-proof ((step_121 (res (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE)) step_119 step_120)))
(let-proof ((step_122 (res (< (f b) SHRT_MIN) step_118 step_121)))
(let-proof ((step_123 (total SHRT_MIN (f b))))
(let-proof ((step_124 (total (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))))
(let-proof ((step_125 (farkas 1 1 (<= SHRT_MIN (f b)) (< (* 0 ONE) (+ SHRT_MIN (* -1 (f b)))))))
(let-proof ((step_126 (res (< (* 0 ONE) (+ SHRT_MIN (* -1 (f b)))) step_124 step_125)))
(let-proof ((step_127 (not- (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE)))))
(let-proof ((step_128 (res (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE)) step_126 step_127)))
(let-proof ((step_129 (res (<= SHRT_MIN (f b)) step_123 step_128)))
(let-proof ((step_130 (=+2 (< (f b) SHRT_MIN) (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))))))
(let-proof ((step_131 (res (< (f b) SHRT_MIN) step_129 step_130)))
(let-proof ((step_132 (res (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) step_122 step_131)))
(let-proof ((step_133 (cong (or (< (f b) SHRT_MIN) (< SHRT_MAX (f b))) (or (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)))))))
(let-proof ((step_134 (res (= (< (f b) SHRT_MIN) (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE)))) step_132 step_133)))
(let-proof ((step_135 (res (= (< SHRT_MAX (f b)) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)))) step_117 step_134)))
(let-proof ((step_136 (cong (not (or (< (f b) SHRT_MIN) (< SHRT_MAX (f b)))) (not (or (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))))))))
(let-proof ((step_137 (res (= (or (< (f b) SHRT_MIN) (< SHRT_MAX (f b))) (or (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))))) step_135 step_136)))
(let-proof ((step_138 (cong (or (not (or (< (f b) SHRT_MIN) (< SHRT_MAX (f b)))) err) (or (not (or (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))))) err))))
(let-proof ((step_139 (res (= (not (or (< (f b) SHRT_MIN) (< SHRT_MAX (f b)))) (not (or (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)))))) step_137 step_138)))
(let-proof ((step_140 (res (= err err) step_104 step_139)))
(let-proof ((step_141 (=-2 (or (not (or (< (f b) SHRT_MIN) (< SHRT_MAX (f b)))) err) (or (not (or (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))))) err))))
(let-proof ((step_142 (res (= (or (not (or (< (f b) SHRT_MIN) (< SHRT_MAX (f b)))) err) (or (not (or (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))))) err)) step_140 step_141)))
(let-proof ((step_143 (res (or (not (or (< (f b) SHRT_MIN) (< SHRT_MAX (f b)))) err) prem_a4 step_142)))
(let-proof ((step_144 (or- (not (or (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))))) err)))
(let-proof ((step_145 (not- (or (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)))))))
(let-proof ((step_146 (res (not (or (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))))) step_144 step_145)))
(let-proof ((step_147 (res (or (not (or (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE))))) err) step_143 step_146)))
(let-proof ((step_148 (not- err)))
(let-proof ((step_149 (res (not err) prem_a5 step_148)))
(let-proof ((step_150 (res err step_147 step_149)))
(let-proof ((step_151 (res (or (not (<= (+ SHRT_MIN (* -1 (f b))) (* 0 ONE))) (not (<= (+ (f b) (* -1 SHRT_MAX)) (* 0 ONE)))) step_103 step_150)))
(let-proof ((step_152 (res (<= (+ SHRT_MAX (* -1 (f b)) (* 1 ONE)) (* 0 ONE)) step_82 step_151)))
(let-proof ((step_153 (not- (<= (+ SHRT_MIN (* -1 (f a))) (* 0 ONE)))))
(let-proof ((step_154 (=+1 (< (f a) SHRT_MIN) (not (<= (+ SHRT_MIN (* -1 (f a))) (* 0 ONE))))))
(let-proof ((step_155 (not+ (<= (+ SHRT_MIN (* -1 (f a))) (* 0 ONE)))))
(let-proof ((step_156 (farkas 1 1 (< (f a) SHRT_MIN) (<= (+ SHRT_MIN (* -1 (f a))) (* 0 ONE)))))
(let-proof ((step_157 (res (<= (+ SHRT_MIN (* -1 (f a))) (* 0 ONE)) step_155 step_156)))
(let-proof ((step_158 (res (< (f a) SHRT_MIN) step_154 step_157)))
(let-proof ((step_159 (total SHRT_MIN (f a))))
(let-proof ((step_160 (total (+ SHRT_MIN (* -1 (f a))) (* 0 ONE))))
(let-proof ((step_161 (farkas 1 1 (<= SHRT_MIN (f a)) (< (* 0 ONE) (+ SHRT_MIN (* -1 (f a)))))))
(let-proof ((step_162 (res (< (* 0 ONE) (+ SHRT_MIN (* -1 (f a)))) step_160 step_161)))
(let-proof ((step_163 (res (<= (+ SHRT_MIN (* -1 (f a))) (* 0 ONE)) step_162 step_153)))
(let-proof ((step_164 (res (<= SHRT_MIN (f a)) step_159 step_163)))
(let-proof ((step_165 (=+2 (< (f a) SHRT_MIN) (not (<= (+ SHRT_MIN (* -1 (f a))) (* 0 ONE))))))
(let-proof ((step_166 (res (< (f a) SHRT_MIN) step_164 step_165)))
(let-proof ((step_167 (res (not (<= (+ SHRT_MIN (* -1 (f a))) (* 0 ONE))) step_158 step_166)))
(let-proof ((step_168 (=-2 (< (f a) SHRT_MIN) (not (<= (+ SHRT_MIN (* -1 (f a))) (* 0 ONE))))))
(let-proof ((step_169 (res (= (< (f a) SHRT_MIN) (not (<= (+ SHRT_MIN (* -1 (f a))) (* 0 ONE)))) step_167 step_168)))
(let-proof ((step_170 (res (not (<= (+ SHRT_MIN (* -1 (f a))) (* 0 ONE))) step_169 step_153)))
(let-proof ((step_171 (res (< (f a) SHRT_MIN) prem_a6 step_170)))
(let-proof ((step_172 (res (<= (+ SHRT_MIN (* -1 (f a))) (* 0 ONE)) step_152 step_171)))
(let-proof ((step_173 (res (= (+ SHRT_MIN (* 32768 ONE)) (* 0 ONE)) step_21 step_172)))
step_173
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
