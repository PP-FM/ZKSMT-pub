unsat
(let-proof ((prem_a0 (assume (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y))))))))
(let-proof ((prem_a1 (assume (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))))))
(let-proof ((step_0 (=+1 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))))
(let-proof ((step_1 (symm (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))
(let-proof ((step_2 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) step_0 step_1)))
(let-proof ((step_3 (symm (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))))
(let-proof ((step_4 (=+2 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))))
(let-proof ((step_5 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) step_3 step_4)))
(let-proof ((step_6 (res (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_2 step_5)))
(let-proof ((step_7 (=>+ 0 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y))))
(let-proof ((step_8 (=>+ 1 (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y)))))
(let-proof ((step_9 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y))))))
(let-proof ((step_10 (not+ (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y)))))))
(let-proof ((step_11 (refl (= x y))))
(let-proof ((step_12 (poly* (* -1 (* 1 ONE)) (- (* 1 ONE)))))
(let-proof ((step_13 (refl (* 0 ONE))))
(let-proof ((step_14 (cong (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE))))))
(let-proof ((step_15 (-def (* 0 ONE) (* 1 ONE))))
(let-proof ((step_16 (poly+ (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE)))))
(let-proof ((step_17 (trans (- (* 0 ONE) (* 1 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE)))))
(let-proof ((step_18 (res (= (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE))) step_16 step_17)))
(let-proof ((step_19 (res (= (- (* 0 ONE) (* 1 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) step_15 step_18)))
(let-proof ((step_20 (res (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE)))) step_14 step_19)))
(let-proof ((step_21 (res (= (* 0 ONE) (* 0 ONE)) step_13 step_20)))
(let-proof ((step_22 (res (= (* -1 (* 1 ONE)) (- (* 1 ONE))) step_12 step_21)))
(let-proof ((step_23 (refl (ControlFlow (* 0 ONE) (* 2 ONE)))))
(let-proof ((step_24 (cong (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))))
(let-proof ((step_25 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_23 step_24)))
(let-proof ((step_26 (res (= (- (* 0 ONE) (* 1 ONE)) (- (* 1 ONE))) step_22 step_25)))
(let-proof ((step_27 (cong (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y)))))
(let-proof ((step_28 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) step_26 step_27)))
(let-proof ((step_29 (res (= (= x y) (= x y)) step_11 step_28)))
(let-proof ((step_30 (refl (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)))))
(let-proof ((step_31 (=+1 (< y x) (not (<= (+ x (* -1 y)) (* 0 ONE))))))
(let-proof ((step_32 (not+ (<= (+ x (* -1 y)) (* 0 ONE)))))
(let-proof ((step_33 (farkas 1 1 (< y x) (<= (+ x (* -1 y)) (* 0 ONE)))))
(let-proof ((step_34 (res (<= (+ x (* -1 y)) (* 0 ONE)) step_32 step_33)))
(let-proof ((step_35 (res (< y x) step_31 step_34)))
(let-proof ((step_36 (total x y)))
(let-proof ((step_37 (total (+ x (* -1 y)) (* 0 ONE))))
(let-proof ((step_38 (farkas 1 1 (<= x y) (< (* 0 ONE) (+ x (* -1 y))))))
(let-proof ((step_39 (res (< (* 0 ONE) (+ x (* -1 y))) step_37 step_38)))
(let-proof ((step_40 (not- (<= (+ x (* -1 y)) (* 0 ONE)))))
(let-proof ((step_41 (res (<= (+ x (* -1 y)) (* 0 ONE)) step_39 step_40)))
(let-proof ((step_42 (res (<= x y) step_36 step_41)))
(let-proof ((step_43 (=+2 (< y x) (not (<= (+ x (* -1 y)) (* 0 ONE))))))
(let-proof ((step_44 (res (< y x) step_42 step_43)))
(let-proof ((step_45 (res (not (<= (+ x (* -1 y)) (* 0 ONE))) step_35 step_44)))
(let-proof ((step_46 (cong (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))))))
(let-proof ((step_47 (res (= (< y x) (not (<= (+ x (* -1 y)) (* 0 ONE)))) step_45 step_46)))
(let-proof ((step_48 (res (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) step_30 step_47)))
(let-proof ((step_49 (cong (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y))) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y))))))
(let-proof ((step_50 (res (= (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)))) step_48 step_49)))
(let-proof ((step_51 (res (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y))) step_29 step_50)))
(let-proof ((step_52 (refl (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)))))
(let-proof ((step_53 (cong (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y)))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y)))))))
(let-proof ((step_54 (res (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE))) step_52 step_53)))
(let-proof ((step_55 (res (= (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y))) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y)))) step_51 step_54)))
(let-proof ((step_56 (cong (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y))))))))
(let-proof ((step_57 (res (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y)))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y))))) step_55 step_56)))
(let-proof ((step_58 (=-2 (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y))))))))
(let-proof ((step_59 (res (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y)))))) step_57 step_58)))
(let-proof ((step_60 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y))))) step_10 step_59)))
(let-proof ((step_61 (not- (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y)))))))
(let-proof ((step_62 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y))))) step_60 step_61)))
(let-proof ((step_63 (not- (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y)))))))
(let-proof ((step_64 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y))))) prem_a0 step_63)))
(let-proof ((step_65 (res (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (< y x) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x y)))) step_62 step_64)))
(let-proof ((step_66 (res (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y)))) step_9 step_65)))
(let-proof ((step_67 (res (=> (and (not (<= (+ x (* -1 y)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y))) step_8 step_66)))
(let-proof ((step_68 (res (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= x y)) step_7 step_67)))
(let-proof ((step_69 (=-2 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))))
(let-proof ((step_70 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) step_6 step_69)))
(let-proof ((step_71 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) step_68 step_70)))
(let-proof ((step_72 (not+ (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))))
(let-proof ((step_73 (cong (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))))
(let-proof ((step_74 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) step_6 step_73)))
(let-proof ((step_75 (=-2 (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))))
(let-proof ((step_76 (res (= (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) (not (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))) step_74 step_75)))
(let-proof ((step_77 (res (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) step_72 step_76)))
(let-proof ((step_78 (not- (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))))
(let-proof ((step_79 (res (not (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) step_77 step_78)))
(let-proof ((step_80 (not- (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))))
(let-proof ((step_81 (res (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) prem_a1 step_80)))
(let-proof ((step_82 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) step_79 step_81)))
(let-proof ((step_83 (res (= (- (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_71 step_82)))
step_83
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
