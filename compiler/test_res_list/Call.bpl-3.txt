unsat
(let-proof ((prem_a0 (assume (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y)))))))))))
(let-proof ((step_0 (=+1 (= w@0 y) (= (+ y (* -1 w@0)) (* 0 ONE)))))
(let-proof ((step_1 (symm y w@0)))
(let-proof ((step_2 (trichotomy (+ y (* -1 w@0)) (* 0 ONE))))
(let-proof ((step_3 (farkas 1 1 (= y w@0) (< (* 0 ONE) (+ y (* -1 w@0))))))
(let-proof ((step_4 (res (< (* 0 ONE) (+ y (* -1 w@0))) step_2 step_3)))
(let-proof ((step_5 (farkas 1 1 (= w@0 y) (< (+ y (* -1 w@0)) (* 0 ONE)))))
(let-proof ((step_6 (res (< (+ y (* -1 w@0)) (* 0 ONE)) step_4 step_5)))
(let-proof ((step_7 (res (= y w@0) step_1 step_6)))
(let-proof ((step_8 (res (= w@0 y) step_0 step_7)))
(let-proof ((step_9 (symm (* 0 ONE) (+ y (* -1 w@0)))))
(let-proof ((step_10 (trichotomy w@0 y)))
(let-proof ((step_11 (farkas 1 1 (= (* 0 ONE) (+ y (* -1 w@0))) (< y w@0))))
(let-proof ((step_12 (res (< y w@0) step_10 step_11)))
(let-proof ((step_13 (farkas 1 1 (= (+ y (* -1 w@0)) (* 0 ONE)) (< w@0 y))))
(let-proof ((step_14 (res (< w@0 y) step_12 step_13)))
(let-proof ((step_15 (res (= (* 0 ONE) (+ y (* -1 w@0))) step_9 step_14)))
(let-proof ((step_16 (=+2 (= w@0 y) (= (+ y (* -1 w@0)) (* 0 ONE)))))
(let-proof ((step_17 (res (= w@0 y) step_15 step_16)))
(let-proof ((step_18 (res (= (+ y (* -1 w@0)) (* 0 ONE)) step_8 step_17)))
(let-proof ((step_19 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))))
(let-proof ((step_20 (not+ (<= (+ x (* -1 y)) (* 0 ONE)))))
(let-proof ((step_21 (not- (<= (+ x (* -1 y)) (* 0 ONE)))))
(let-proof ((step_22 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))))))
(let-proof ((step_23 (not+ (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y))))))))))
(let-proof ((step_24 (=+1 (< y x) (not (<= (+ x (* -1 y)) (* 0 ONE))))))
(let-proof ((step_25 (farkas 1 1 (< y x) (<= (+ x (* -1 y)) (* 0 ONE)))))
(let-proof ((step_26 (res (<= (+ x (* -1 y)) (* 0 ONE)) step_20 step_25)))
(let-proof ((step_27 (res (< y x) step_24 step_26)))
(let-proof ((step_28 (total x y)))
(let-proof ((step_29 (total (+ x (* -1 y)) (* 0 ONE))))
(let-proof ((step_30 (farkas 1 1 (<= x y) (< (* 0 ONE) (+ x (* -1 y))))))
(let-proof ((step_31 (res (< (* 0 ONE) (+ x (* -1 y))) step_29 step_30)))
(let-proof ((step_32 (res (<= (+ x (* -1 y)) (* 0 ONE)) step_31 step_21)))
(let-proof ((step_33 (res (<= x y) step_28 step_32)))
(let-proof ((step_34 (=+2 (< y x) (not (<= (+ x (* -1 y)) (* 0 ONE))))))
(let-proof ((step_35 (res (< y x) step_33 step_34)))
(let-proof ((step_36 (res (not (<= (+ x (* -1 y)) (* 0 ONE))) step_27 step_35)))
(let-proof ((step_37 (refl (* 0 ONE))))
(let-proof ((step_38 (refl (= w@0 y))))
(let-proof ((step_39 (poly* (* -1 (* 3 ONE)) (- (* 3 ONE)))))
(let-proof ((step_40 (cong (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (- (* 3 ONE))))))
(let-proof ((step_41 (-def (* 0 ONE) (* 3 ONE))))
(let-proof ((step_42 (poly+ (+ (* 0 ONE) (- (* 3 ONE))) (- (* 3 ONE)))))
(let-proof ((step_43 (trans (- (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (- (* 3 ONE))) (- (* 3 ONE)))))
(let-proof ((step_44 (res (= (+ (* 0 ONE) (- (* 3 ONE))) (- (* 3 ONE))) step_42 step_43)))
(let-proof ((step_45 (res (= (- (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) step_41 step_44)))
(let-proof ((step_46 (res (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (- (* 3 ONE)))) step_40 step_45)))
(let-proof ((step_47 (res (= (* 0 ONE) (* 0 ONE)) step_37 step_46)))
(let-proof ((step_48 (res (= (* -1 (* 3 ONE)) (- (* 3 ONE))) step_39 step_47)))
(let-proof ((step_49 (refl (ControlFlow (* 0 ONE) (* 4 ONE)))))
(let-proof ((step_50 (cong (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))))))
(let-proof ((step_51 (res (= (ControlFlow (* 0 ONE) (* 4 ONE)) (ControlFlow (* 0 ONE) (* 4 ONE))) step_49 step_50)))
(let-proof ((step_52 (res (= (- (* 0 ONE) (* 3 ONE)) (- (* 3 ONE))) step_48 step_51)))
(let-proof ((step_53 (cong (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y)) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))
(let-proof ((step_54 (res (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE)))) step_52 step_53)))
(let-proof ((step_55 (res (= (= w@0 y) (= w@0 y)) step_38 step_54)))
(let-proof ((step_56 (refl (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))))))
(let-proof ((step_57 (cong (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y))) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))))
(let-proof ((step_58 (res (= (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)))) step_56 step_57)))
(let-proof ((step_59 (res (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y)) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))) step_55 step_58)))
(let-proof ((step_60 (refl (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)))))
(let-proof ((step_61 (cong (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))))
(let-proof ((step_62 (res (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE))) step_60 step_61)))
(let-proof ((step_63 (res (= (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y))) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))) step_59 step_62)))
(let-proof ((step_64 (poly* (* -1 (* 1 ONE)) (- (* 1 ONE)))))
(let-proof ((step_65 (cong (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE))))))
(let-proof ((step_66 (-def (* 0 ONE) (* 1 ONE))))
(let-proof ((step_67 (poly+ (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE)))))
(let-proof ((step_68 (trans (- (* 0 ONE) (* 1 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE)))))
(let-proof ((step_69 (res (= (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE))) step_67 step_68)))
(let-proof ((step_70 (res (= (- (* 0 ONE) (* 1 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) step_66 step_69)))
(let-proof ((step_71 (res (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE)))) step_65 step_70)))
(let-proof ((step_72 (res (= (* 0 ONE) (* 0 ONE)) step_37 step_71)))
(let-proof ((step_73 (res (= (* -1 (* 1 ONE)) (- (* 1 ONE))) step_64 step_72)))
(let-proof ((step_74 (refl (ControlFlow (* 0 ONE) (* 2 ONE)))))
(let-proof ((step_75 (cong (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))))
(let-proof ((step_76 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_74 step_75)))
(let-proof ((step_77 (res (= (- (* 0 ONE) (* 1 ONE)) (- (* 1 ONE))) step_73 step_76)))
(let-proof ((step_78 (cong (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE)))))))
(let-proof ((step_79 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) step_77 step_78)))
(let-proof ((step_80 (res (= (< y x) (not (<= (+ x (* -1 y)) (* 0 ONE)))) step_36 step_79)))
(let-proof ((step_81 (refl (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)))))
(let-proof ((step_82 (cong (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))))))
(let-proof ((step_83 (res (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE))) step_81 step_82)))
(let-proof ((step_84 (res (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) step_80 step_83)))
(let-proof ((step_85 (cong (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y))))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))))))
(let-proof ((step_86 (res (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE)))))) step_84 step_85)))
(let-proof ((step_87 (res (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))) step_63 step_86)))
(let-proof ((step_88 (cong (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y)))))) (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))))))
(let-proof ((step_89 (res (= (< y x) (not (<= (+ x (* -1 y)) (* 0 ONE)))) step_36 step_88)))
(let-proof ((step_90 (res (= (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y))))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))) step_87 step_89)))
(let-proof ((step_91 (refl (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)))))
(let-proof ((step_92 (cong (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))))))))
(let-proof ((step_93 (res (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE))) step_91 step_92)))
(let-proof ((step_94 (res (= (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y)))))) (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))))) step_90 step_93)))
(let-proof ((step_95 (cong (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y)))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))))))))
(let-proof ((step_96 (res (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))))) step_94 step_95)))
(let-proof ((step_97 (=-2 (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y)))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))))))))
(let-proof ((step_98 (res (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y)))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))))))) step_96 step_97)))
(let-proof ((step_99 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y)))))))) step_23 step_98)))
(let-proof ((step_100 (not- (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))))))))
(let-proof ((step_101 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))))) step_99 step_100)))
(let-proof ((step_102 (not- (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y))))))))))
(let-proof ((step_103 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y)))))))) prem_a0 step_102)))
(let-proof ((step_104 (res (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (< y x) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (< y x))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 0 ONE) (* 3 ONE))) (= w@0 y))))))) step_101 step_103)))
(let-proof ((step_105 (res (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 6 ONE)) (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))))) step_22 step_104)))
(let-proof ((step_106 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))))
(let-proof ((step_107 (res (not (<= (+ x (* -1 y)) (* 0 ONE))) step_20 step_106)))
(let-proof ((step_108 (=>+ 0 (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))))))
(let-proof ((step_109 (res (not (<= (+ x (* -1 y)) (* 0 ONE))) step_108 step_21)))
(let-proof ((step_110 (res (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))) step_109 step_105)))
(let-proof ((step_111 (res (<= (+ x (* -1 y)) (* 0 ONE)) step_107 step_110)))
(let-proof ((step_112 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE)))))))
(let-proof ((step_113 (res (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE)))) step_111 step_112)))
(let-proof ((step_114 (and+ (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))))
(let-proof ((step_115 (=>+ 1 (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))))))
(let-proof ((step_116 (res (=> (not (<= (+ x (* -1 y)) (* 0 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))) step_115 step_105)))
(let-proof ((step_117 (res (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))) step_114 step_116)))
(let-proof ((step_118 (res (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 2 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) (not (<= (+ x (* -1 y)) (* 0 ONE))))) step_113 step_117)))
(let-proof ((step_119 (res (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))) step_19 step_118)))
(let-proof ((step_120 (=>+ 0 (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))
(let-proof ((step_121 (res (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))) step_120 step_119)))
(let-proof ((step_122 (and- 0 (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)))))
(let-proof ((step_123 (=-2 (= w@0 y) (= (+ y (* -1 w@0)) (* 0 ONE)))))
(let-proof ((step_124 (res (= (= w@0 y) (= (+ y (* -1 w@0)) (* 0 ONE))) step_18 step_123)))
(let-proof ((step_125 (res (= w@0 y) step_122 step_124)))
(let-proof ((step_126 (res (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) step_121 step_125)))
(let-proof ((step_127 (not+ (= w@0 y))))
(let-proof ((step_128 (cong (not (= w@0 y)) (not (= (+ y (* -1 w@0)) (* 0 ONE))))))
(let-proof ((step_129 (res (= (= w@0 y) (= (+ y (* -1 w@0)) (* 0 ONE))) step_18 step_128)))
(let-proof ((step_130 (=-2 (not (= w@0 y)) (not (= (+ y (* -1 w@0)) (* 0 ONE))))))
(let-proof ((step_131 (res (= (not (= w@0 y)) (not (= (+ y (* -1 w@0)) (* 0 ONE)))) step_129 step_130)))
(let-proof ((step_132 (res (not (= w@0 y)) step_127 step_131)))
(let-proof ((step_133 (not- (= (+ y (* -1 w@0)) (* 0 ONE)))))
(let-proof ((step_134 (res (not (= (+ y (* -1 w@0)) (* 0 ONE))) step_132 step_133)))
(let-proof ((step_135 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))))
(let-proof ((step_136 (res (= w@0 y) step_134 step_135)))
(let-proof ((step_137 (=>+ 1 (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)))))
(let-proof ((step_138 (res (=> (and (= w@0 y) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y))) step_137 step_119)))
(let-proof ((step_139 (res (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (- (* 3 ONE))) (= w@0 y)) step_136 step_138)))
(let-proof ((step_140 (res (= (+ y (* -1 w@0)) (* 0 ONE)) step_126 step_139)))
step_140
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
