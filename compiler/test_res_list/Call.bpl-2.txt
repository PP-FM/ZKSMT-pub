unsat
(let-proof ((prem_a0 (assume (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x))))))))))
(let-proof ((step_0 (true+ )))
(let-proof ((step_1 (not+ (<= (+ y (* -1 x)) (* 0 ONE)))))
(let-proof ((step_2 (not- (<= (+ y (* -1 x)) (* 0 ONE)))))
(let-proof ((step_3 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))))
(let-proof ((step_4 (not+ (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x)))))))))
(let-proof ((step_5 (=+1 (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))))
(let-proof ((step_6 (farkas 1 1 (< x y) (<= (+ y (* -1 x)) (* 0 ONE)))))
(let-proof ((step_7 (res (<= (+ y (* -1 x)) (* 0 ONE)) step_1 step_6)))
(let-proof ((step_8 (res (< x y) step_5 step_7)))
(let-proof ((step_9 (total y x)))
(let-proof ((step_10 (total (+ y (* -1 x)) (* 0 ONE))))
(let-proof ((step_11 (farkas 1 1 (<= y x) (< (* 0 ONE) (+ y (* -1 x))))))
(let-proof ((step_12 (res (< (* 0 ONE) (+ y (* -1 x))) step_10 step_11)))
(let-proof ((step_13 (res (<= (+ y (* -1 x)) (* 0 ONE)) step_12 step_2)))
(let-proof ((step_14 (res (<= y x) step_9 step_13)))
(let-proof ((step_15 (=+2 (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))))
(let-proof ((step_16 (res (< x y) step_14 step_15)))
(let-proof ((step_17 (res (not (<= (+ y (* -1 x)) (* 0 ONE))) step_8 step_16)))
(let-proof ((step_18 (refl (* 0 ONE))))
(let-proof ((step_19 (refl (ControlFlow (* 0 ONE) (* 2 ONE)))))
(let-proof ((step_20 (refl x)))
(let-proof ((step_21 (=+2 (= x x) true)))
(let-proof ((step_22 (res (= x x) step_20 step_21)))
(let-proof ((step_23 (res true step_0 step_22)))
(let-proof ((step_24 (poly* (* -1 (* 1 ONE)) (- (* 1 ONE)))))
(let-proof ((step_25 (cong (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE))))))
(let-proof ((step_26 (-def (* 0 ONE) (* 1 ONE))))
(let-proof ((step_27 (poly+ (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE)))))
(let-proof ((step_28 (trans (- (* 0 ONE) (* 1 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE)))))
(let-proof ((step_29 (res (= (+ (* 0 ONE) (- (* 1 ONE))) (- (* 1 ONE))) step_27 step_28)))
(let-proof ((step_30 (res (= (- (* 0 ONE) (* 1 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) step_26 step_29)))
(let-proof ((step_31 (res (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (- (* 1 ONE)))) step_25 step_30)))
(let-proof ((step_32 (res (= (* 0 ONE) (* 0 ONE)) step_18 step_31)))
(let-proof ((step_33 (res (= (* -1 (* 1 ONE)) (- (* 1 ONE))) step_24 step_32)))
(let-proof ((step_34 (cong (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))))))
(let-proof ((step_35 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_19 step_34)))
(let-proof ((step_36 (res (= (- (* 0 ONE) (* 1 ONE)) (- (* 1 ONE))) step_33 step_35)))
(let-proof ((step_37 (cong (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))
(let-proof ((step_38 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE)))) step_36 step_37)))
(let-proof ((step_39 (res (= (= x x) true) step_23 step_38)))
(let-proof ((step_40 (cong (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))
(let-proof ((step_41 (res (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) step_17 step_40)))
(let-proof ((step_42 (res (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)) step_39 step_41)))
(let-proof ((step_43 (poly* (* -1 (* 3 ONE)) (- (* 3 ONE)))))
(let-proof ((step_44 (cong (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (- (* 3 ONE))))))
(let-proof ((step_45 (-def (* 0 ONE) (* 3 ONE))))
(let-proof ((step_46 (poly+ (+ (* 0 ONE) (- (* 3 ONE))) (- (* 3 ONE)))))
(let-proof ((step_47 (trans (- (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (- (* 3 ONE))) (- (* 3 ONE)))))
(let-proof ((step_48 (res (= (+ (* 0 ONE) (- (* 3 ONE))) (- (* 3 ONE))) step_46 step_47)))
(let-proof ((step_49 (res (= (- (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) step_45 step_48)))
(let-proof ((step_50 (res (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (- (* 3 ONE)))) step_44 step_49)))
(let-proof ((step_51 (res (= (* 0 ONE) (* 0 ONE)) step_18 step_50)))
(let-proof ((step_52 (res (= (* -1 (* 3 ONE)) (- (* 3 ONE))) step_43 step_51)))
(let-proof ((step_53 (cong (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))))))
(let-proof ((step_54 (res (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) step_19 step_53)))
(let-proof ((step_55 (res (= (- (* 0 ONE) (* 3 ONE)) (- (* 3 ONE))) step_52 step_54)))
(let-proof ((step_56 (cong (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))))))
(let-proof ((step_57 (res (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE)))) step_55 step_56)))
(let-proof ((step_58 (res (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) step_17 step_57)))
(let-proof ((step_59 (cong (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))))
(let-proof ((step_60 (res (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))) step_58 step_59)))
(let-proof ((step_61 (res (= (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))) step_42 step_60)))
(let-proof ((step_62 (refl (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))))
(let-proof ((step_63 (cong (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))))))
(let-proof ((step_64 (res (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) step_17 step_63)))
(let-proof ((step_65 (res (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) step_62 step_64)))
(let-proof ((step_66 (cong (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x))))) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))))
(let-proof ((step_67 (res (= (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))) step_65 step_66)))
(let-proof ((step_68 (res (= (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))) step_61 step_67)))
(let-proof ((step_69 (refl (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)))))
(let-proof ((step_70 (cong (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x)))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))))))
(let-proof ((step_71 (res (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE))) step_69 step_70)))
(let-proof ((step_72 (res (= (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x))))) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))) step_68 step_71)))
(let-proof ((step_73 (cong (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))))))
(let-proof ((step_74 (res (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x)))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))) step_72 step_73)))
(let-proof ((step_75 (=-2 (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))))))
(let-proof ((step_76 (res (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))))) step_74 step_75)))
(let-proof ((step_77 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x))))))) step_4 step_76)))
(let-proof ((step_78 (not- (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))))))
(let-proof ((step_79 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))) step_77 step_78)))
(let-proof ((step_80 (not- (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x)))))))))
(let-proof ((step_81 (res (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x))))))) prem_a0 step_80)))
(let-proof ((step_82 (res (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 3 ONE))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 0 ONE) (* 1 ONE))) (= x x)))))) step_79 step_81)))
(let-proof ((step_83 (res (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))) step_3 step_82)))
(let-proof ((step_84 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))))
(let-proof ((step_85 (res (not (<= (+ y (* -1 x)) (* 0 ONE))) step_1 step_84)))
(let-proof ((step_86 (=>+ 1 (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))
(let-proof ((step_87 (res true step_0 step_86)))
(let-proof ((step_88 (=>+ 1 (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))
(let-proof ((step_89 (res (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true) step_87 step_88)))
(let-proof ((step_90 (and+ (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))))
(let-proof ((step_91 (=>+ 1 (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))))
(let-proof ((step_92 (res (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))) step_91 step_83)))
(let-proof ((step_93 (res (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))) step_90 step_92)))
(let-proof ((step_94 (res (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)) step_89 step_93)))
(let-proof ((step_95 (res (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) step_85 step_94)))
(let-proof ((step_96 (=>+ 0 (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true))))))
(let-proof ((step_97 (res (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (- (* 1 ONE))) true)))) step_96 step_83)))
(let-proof ((step_98 (and- 0 (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))))
(let-proof ((step_99 (res (not (<= (+ y (* -1 x)) (* 0 ONE))) step_98 step_2)))
(let-proof ((step_100 (res (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) step_97 step_99)))
(let-proof ((step_101 (res (<= (+ y (* -1 x)) (* 0 ONE)) step_95 step_100)))
step_101
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
