unsat
(let-proof ((prem_a0 (assume (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))))))
(let-proof ((step_0 (false- )))
(let-proof ((step_1 (not+ (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)))))
(let-proof ((step_2 (true+ )))
(let-proof ((step_3 (=+1 (not true) false)))
(let-proof ((step_4 (not- true)))
(let-proof ((step_5 (res true step_2 step_4)))
(let-proof ((step_6 (res (not true) step_3 step_5)))
(let-proof ((step_7 (res false step_6 step_0)))
(let-proof ((step_8 (refl (* 2 ONE))))
(let-proof ((step_9 (=+2 (= (* 2 ONE) (* 2 ONE)) true)))
(let-proof ((step_10 (res (= (* 2 ONE) (* 2 ONE)) step_8 step_9)))
(let-proof ((step_11 (res true step_2 step_10)))
(let-proof ((step_12 (poly+ (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))))
(let-proof ((step_13 (cong (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (= (* 2 ONE) (* 2 ONE)))))
(let-proof ((step_14 (res (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) step_12 step_13)))
(let-proof ((step_15 (res (= (* 2 ONE) (* 2 ONE)) step_8 step_14)))
(let-proof ((step_16 (trans (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (= (* 2 ONE) (* 2 ONE)) true)))
(let-proof ((step_17 (res (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (= (* 2 ONE) (* 2 ONE))) step_15 step_16)))
(let-proof ((step_18 (res (= (= (* 2 ONE) (* 2 ONE)) true) step_11 step_17)))
(let-proof ((step_19 (cong (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) (not true))))
(let-proof ((step_20 (res (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) true) step_18 step_19)))
(let-proof ((step_21 (trans (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) (not true) false)))
(let-proof ((step_22 (res (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) (not true)) step_20 step_21)))
(let-proof ((step_23 (res (= (not true) false) step_7 step_22)))
(let-proof ((step_24 (=-2 (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) false)))
(let-proof ((step_25 (res (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) false) step_23 step_24)))
(let-proof ((step_26 (res (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) step_1 step_25)))
(let-proof ((step_27 (not- (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)))))
(let-proof ((step_28 (res (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) prem_a0 step_27)))
(let-proof ((step_29 (res (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) step_26 step_28)))
(let-proof ((step_30 (res false step_29 step_0)))
step_30
))))))))))))))))))))))))))))))))
