unsat
(let-proof ((prem_a0 (assume (and (= a b) (and (= b c) (and (= c d) (and (= c e) (and (= e f) (not (= a f))))))))))
(let-proof ((step_0 (and- 0 (= a b) (and (= b c) (and (= c d) (and (= c e) (and (= e f) (not (= a f)))))))))
(let-proof ((step_1 (res (and (= a b) (and (= b c) (and (= c d) (and (= c e) (and (= e f) (not (= a f))))))) prem_a0 step_0)))
(let-proof ((step_2 (and- 1 (= a b) (and (= b c) (and (= c d) (and (= c e) (and (= e f) (not (= a f)))))))))
(let-proof ((step_3 (res (and (= a b) (and (= b c) (and (= c d) (and (= c e) (and (= e f) (not (= a f))))))) prem_a0 step_2)))
(let-proof ((step_4 (and- 1 (= b c) (and (= c d) (and (= c e) (and (= e f) (not (= a f))))))))
(let-proof ((step_5 (res (and (= b c) (and (= c d) (and (= c e) (and (= e f) (not (= a f)))))) step_3 step_4)))
(let-proof ((step_6 (and- 1 (= c d) (and (= c e) (and (= e f) (not (= a f)))))))
(let-proof ((step_7 (res (and (= c d) (and (= c e) (and (= e f) (not (= a f))))) step_5 step_6)))
(let-proof ((step_8 (and- 1 (= c e) (and (= e f) (not (= a f))))))
(let-proof ((step_9 (res (and (= c e) (and (= e f) (not (= a f)))) step_7 step_8)))
(let-proof ((step_10 (and- 0 (= e f) (not (= a f)))))
(let-proof ((step_11 (res (and (= e f) (not (= a f))) step_9 step_10)))
(let-proof ((step_12 (and- 0 (= c e) (and (= e f) (not (= a f))))))
(let-proof ((step_13 (res (and (= c e) (and (= e f) (not (= a f)))) step_7 step_12)))
(let-proof ((step_14 (and- 0 (= b c) (and (= c d) (and (= c e) (and (= e f) (not (= a f))))))))
(let-proof ((step_15 (res (and (= b c) (and (= c d) (and (= c e) (and (= e f) (not (= a f)))))) step_3 step_14)))
(let-proof ((step_16 (trans a b c e f)))
(let-proof ((step_17 (and- 1 (= e f) (not (= a f)))))
(let-proof ((step_18 (not- (= a f))))
(let-proof ((step_19 (res (not (= a f)) step_17 step_18)))
(let-proof ((step_20 (res (and (= e f) (not (= a f))) step_9 step_19)))
(let-proof ((step_21 (res (= a f) step_16 step_20)))
(let-proof ((step_22 (res (= b c) step_15 step_21)))
(let-proof ((step_23 (res (= c e) step_13 step_22)))
(let-proof ((step_24 (res (= e f) step_11 step_23)))
(let-proof ((step_25 (res (= a b) step_1 step_24)))
step_25
)))))))))))))))))))))))))))
