unsat
(! (let ((.cse83 (* 2450001 y)) (.cse81 (* 2730000 x)) (.cse80 (* (- 2450001) y)) (.cse88 (* 2450000 y)) (.cse86 (* 2730001 x)) (.cse85 (* (- 2450000) y))) (let ((.cse59 (+ .cse86 .cse85 (- 10000))) (.cse91 (+ (* (- 2730001) x) .cse88 1)) (.cse90 (+ .cse81 .cse80 (- 9999))) (.cse89 (+ (* (- 2730000) x) .cse83))) (let ((.cse46 (<= .cse89 0)) (.cse28 (<= .cse90 0)) (.cse39 (<= .cse91 0)) (.cse3 (<= .cse59 0)) (.cse45 (+ .cse86 .cse85)) (.cse34 (* 910000 x)) (.cse35 (* (- 816667) y))) (let ((.cse52 (+ .cse34 .cse35 1)) (.cse42 (< 0 .cse91)) (.cse23 (<= 1 .cse45)) (.cse32 (< 0 .cse90)) (.cse49 (< 0 .cse89)) (.cse4 (and .cse46 .cse28 .cse39 .cse3))) (let-proof ((.cse43 (total .cse91 0)) (.cse33 (total .cse90 0)) (.cse50 (total .cse89 0))) (let ((.cse37 (<= 1 .cse52)) (.cse0 (<= .cse52 0))) (let-proof ((.cse5 (let ((.cse63 (- .cse86 .cse88)) (.cse74 (- .cse81 .cse83))) (let ((.cse75 (<= 0 .cse74)) (.cse67 (<= .cse74 9999)) (.cse64 (<= 1 .cse63)) (.cse55 (<= .cse63 10000))) (let ((.cse53 (and .cse75 .cse67 .cse64 .cse55))) (res .cse53 (assume .cse53) (let ((.cse54 (= .cse53 .cse4))) (res .cse54 (let ((.cse61 (= .cse63 .cse45))) (let-proof ((.cse62 (let ((.cse84 (* (- 1) .cse88))) (res (= .cse84 .cse85) (poly* .cse84 .cse85) (res (= .cse86 .cse86) (refl .cse86) (let ((.cse87 (+ .cse86 .cse84))) (res (= .cse87 .cse45) (cong (+ .cse86 .cse84) (+ .cse86 .cse85)) (res (= .cse63 .cse87) (-def .cse86 .cse88) (trans .cse63 .cse87 .cse45))))))))) (res (= .cse55 .cse3) (let ((.cse57 (<= .cse45 10000))) (let ((.cse56 (= .cse57 .cse3))) (res .cse56 (res .cse3 (res .cse57 (=+1 .cse56) (let ((.cse58 (< 0 .cse59))) (res .cse58 (total .cse59 0) (farkas 1 .cse57 1 .cse58)))) (res .cse57 (let ((.cse60 (< 10000 .cse45))) (res .cse60 (total .cse45 10000) (farkas 1 .cse60 1 .cse3))) (=+2 .cse56))) (res (= .cse55 .cse57) (res (= 10000 10000) (refl 10000) (res .cse61 .cse62 (cong (<= .cse63 10000) (<= .cse45 10000)))) (trans .cse55 .cse57 .cse3))))) (res (= .cse64 .cse39) (let ((.cse65 (= .cse23 .cse39))) (res .cse65 (res .cse39 (res .cse23 (=+1 .cse65) (res .cse42 .cse43 (farkas 1 .cse23 1 .cse42))) (res .cse23 (let ((.cse66 (< .cse45 1))) (res .cse66 (total 1 .cse45) (farkas 1 .cse66 1 .cse39))) (=+2 .cse65))) (res (= .cse64 .cse23) (res .cse61 .cse62 (res (= 1 1) (refl 1) (cong (<= 1 .cse63) (<= 1 .cse45)))) (trans .cse64 .cse23 .cse39)))) (let ((.cse71 (+ .cse81 .cse80))) (let ((.cse72 (= .cse74 .cse71))) (let-proof ((.cse73 (let ((.cse79 (* (- 1) .cse83))) (res (= .cse79 .cse80) (poly* .cse79 .cse80) (res (= .cse81 .cse81) (refl .cse81) (let ((.cse82 (+ .cse81 .cse79))) (res (= .cse82 .cse71) (cong (+ .cse81 .cse79) (+ .cse81 .cse80)) (res (= .cse74 .cse82) (-def .cse81 .cse83) (trans .cse74 .cse82 .cse71))))))))) (res (= .cse67 .cse28) (let ((.cse69 (<= .cse71 9999))) (let ((.cse68 (= .cse69 .cse28))) (res .cse68 (res .cse28 (res .cse69 (=+1 .cse68) (res .cse32 .cse33 (farkas 1 .cse69 1 .cse32))) (res .cse69 (let ((.cse70 (< 9999 .cse71))) (res .cse70 (total .cse71 9999) (farkas 1 .cse70 1 .cse28))) (=+2 .cse68))) (res (= .cse67 .cse69) (res (= 9999 9999) (refl 9999) (res .cse72 .cse73 (cong (<= .cse74 9999) (<= .cse71 9999)))) (trans .cse67 .cse69 .cse28))))) (res (= .cse75 .cse46) (let ((.cse77 (<= 0 .cse71))) (let ((.cse76 (= .cse77 .cse46))) (res .cse76 (res .cse46 (res .cse77 (=+1 .cse76) (res .cse49 .cse50 (farkas 1 .cse77 1 .cse49))) (res .cse77 (let ((.cse78 (< .cse71 0))) (res .cse78 (total 0 .cse71) (farkas 1 .cse78 1 .cse46))) (=+2 .cse76))) (res (= .cse75 .cse77) (res .cse72 .cse73 (res (= 0 0) (refl 0) (cong (<= 0 .cse74) (<= 0 .cse71)))) (trans .cse75 .cse77 .cse46))))) (cong (and .cse75 .cse67 .cse64 .cse55) (and .cse46 .cse28 .cse39 .cse3))))))))))) (=-2 .cse54)))))))) (.cse38 (total-int .cse52 0))) (res .cse0 (let ((.cse1 (<= .cse45 0))) (let-proof ((.cse24 (total-int .cse45 0))) (let-proof ((.cse26 (! (res .cse39 (res .cse4 .cse5 (and- 2 .cse4)) (let ((.cse40 (not .cse1))) (let-proof ((.cse44 (not- .cse40))) (res .cse40 (let ((.cse41 (= .cse39 .cse40))) (res .cse41 (res .cse40 (res .cse39 (=+1 .cse41) (res .cse1 (not+ .cse40) (farkas 1 .cse39 1 .cse1))) (res .cse39 (res .cse42 .cse43 (res .cse1 (res .cse23 .cse24 (farkas 1 .cse42 1 .cse23)) .cse44)) (=+2 .cse41))) (=-2 .cse41))) .cse44)))) :proves (- .cse1) :input))) (res .cse1 (let ((.cse36 (+ (* 39 x) (* (- 35) y)))) (let ((.cse2 (<= .cse36 0))) (res .cse2 (! (res .cse3 (! (res .cse4 .cse5 (and- 3 .cse4)) :proves (+ .cse3) :input) (let ((.cse27 (+ (* 10 x) (* (- 9) y)))) (let ((.cse6 (<= .cse27 0)) (.cse14 (<= 1 .cse36))) (let-proof ((.cse15 (total-int .cse36 0))) (res .cse6 (! (let ((.cse31 (+ .cse34 .cse35 (- 3333)))) (let ((.cse7 (<= .cse31 0))) (let-proof ((.cse8 (! (res .cse28 (res .cse4 .cse5 (and- 1 .cse4)) (let ((.cse29 (= .cse28 .cse7))) (res .cse29 (res .cse7 (res .cse28 (=+1 .cse29) (let ((.cse30 (< 0 .cse31))) (res .cse30 (total .cse31 0) (farkas 1 .cse28 3 .cse30)))) (res .cse28 (res .cse32 .cse33 (farkas 1 .cse32 3 .cse7)) (=+2 .cse29))) (=-2 .cse29)))) :proves (+ .cse7) :input))) (res .cse7 .cse8 (let ((.cse25 (+ x (* (- 1) y)))) (let ((.cse9 (<= .cse25 0)) (.cse12 (<= 1 .cse27))) (let-proof ((.cse13 (total-int .cse27 0))) (res .cse9 (! (res .cse1 (res .cse7 .cse8 (let ((.cse22 (+ (* 2418002 x) (* (- 2170001) y)))) (let ((.cse10 (<= .cse22 0)) (.cse20 (<= 1 .cse25))) (let-proof ((.cse21 (total-int .cse25 0))) (res .cse10 (let ((.cse18 (<= 1 .cse22))) (let-proof ((.cse19 (total-int .cse22 0))) (res .cse6 (let ((.cse17 (+ (* 2106003 x) (* (- 1890002) y)))) (let ((.cse11 (<= .cse17 0))) (res .cse11 (res .cse2 (! (res .cse12 .cse13 (res .cse14 .cse15 (farkas 23330 .cse14 1 .cse7 13 .cse12))) :proves (+ .cse2 - .cse7 + .cse6) :LA ((- 23330) 1 (- 13))) (! (res .cse12 .cse13 (let ((.cse16 (<= 1 .cse17))) (res .cse16 (total-int .cse17 0) (farkas 1 .cse16 27 .cse12 54007 .cse2)))) :proves (+ .cse11 + .cse6 - .cse2) :LA ((- 1) (- 27) 54007))) (! (res .cse12 .cse13 (res .cse18 .cse19 (farkas 62008 .cse11 54007 .cse18 1 .cse12))) :proves (- .cse11 + .cse10 + .cse6) :LA (62008 (- 54007) (- 1)))))) (! (res .cse20 .cse21 (res .cse18 .cse19 (farkas 248001 .cse6 1 .cse18 62008 .cse20))) :proves (- .cse6 + .cse10 + .cse9) :LA (248001 (- 1) (- 62008)))))) (! (res .cse20 .cse21 (res .cse23 .cse24 (farkas 280001 .cse10 248001 .cse23 1 .cse20))) :proves (- .cse10 + .cse1 + .cse9) :LA (280001 (- 248001) (- 1)))))))) .cse26) :proves (+ .cse9) :rup) (! (res .cse12 .cse13 (farkas 23330 .cse9 1 .cse7 93333 .cse12)) :proves (- .cse9 - .cse7 + .cse6) :LA (23330 1 (- 93333))))))))))) :proves (+ .cse6) :rup) (! (res .cse14 .cse15 (farkas 35 .cse6 70009 .cse14 1 .cse3)) :proves (- .cse6 + .cse2 - .cse3) :LA (35 (- 70009) 1))))))) :proves (+ .cse2) :rup) (! (res .cse23 .cse24 (res .cse37 .cse38 (farkas 35 .cse37 13 .cse23 1726667 .cse2))) :proves (+ .cse0 + .cse1 - .cse2) :LA ((- 35) (- 13) 1726667))))) .cse26)))) (! (res .cse46 (res .cse4 .cse5 (and- 0 .cse4)) (let ((.cse47 (not .cse0))) (let-proof ((.cse51 (not- .cse47))) (res .cse47 (let ((.cse48 (= .cse46 .cse47))) (res .cse48 (res .cse47 (res .cse46 (=+1 .cse48) (res .cse0 (not+ .cse47) (farkas 1 .cse46 3 .cse0))) (res .cse46 (res .cse49 .cse50 (res .cse0 (res .cse37 .cse38 (farkas 1 .cse49 3 .cse37)) .cse51)) (=+2 .cse48))) (=-2 .cse48))) .cse51)))) :proves (- .cse0) :input))))))))) :proves () :rup)
