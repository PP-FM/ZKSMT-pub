unsat
(! (let ((.cse74 (* 2451 y)) (.cse72 (* 2730 x)) (.cse71 (* (- 2451) y)) (.cse79 (* 2450 y)) (.cse77 (* 2731 x)) (.cse76 (* (- 2450) y))) (let ((.cse50 (+ .cse77 .cse76 (- 10))) (.cse82 (+ (* (- 2731) x) .cse79 1)) (.cse81 (+ .cse72 .cse71 (- 9))) (.cse80 (+ (* (- 2730) x) .cse74))) (let ((.cse13 (* (- 1) y)) (.cse37 (<= .cse80 0)) (.cse14 (<= .cse81 0)) (.cse26 (<= .cse82 0)) (.cse33 (<= .cse50 0)) (.cse32 (+ .cse77 .cse76))) (let ((.cse29 (< 0 .cse82)) (.cse8 (<= 1 .cse32)) (.cse20 (< 0 .cse81)) (.cse40 (< 0 .cse80)) (.cse15 (and .cse37 .cse14 .cse26 .cse33)) (.cse25 (+ x .cse13 1))) (let-proof ((.cse30 (total .cse82 0)) (.cse21 (total .cse81 0)) (.cse41 (total .cse80 0))) (let ((.cse0 (<= .cse25 0)) (.cse22 (* 910 x)) (.cse23 (* (- 817) y))) (let-proof ((.cse16 (let ((.cse54 (- .cse77 .cse79)) (.cse65 (- .cse72 .cse74))) (let ((.cse66 (<= 0 .cse65)) (.cse58 (<= .cse65 9)) (.cse55 (<= 1 .cse54)) (.cse46 (<= .cse54 10))) (let ((.cse44 (and .cse66 .cse58 .cse55 .cse46))) (res .cse44 (assume .cse44) (let ((.cse45 (= .cse44 .cse15))) (res .cse45 (let ((.cse52 (= .cse54 .cse32))) (let-proof ((.cse53 (let ((.cse75 (* (- 1) .cse79))) (res (= .cse75 .cse76) (poly* .cse75 .cse76) (res (= .cse77 .cse77) (refl .cse77) (let ((.cse78 (+ .cse77 .cse75))) (res (= .cse78 .cse32) (cong (+ .cse77 .cse75) (+ .cse77 .cse76)) (res (= .cse54 .cse78) (-def .cse77 .cse79) (trans .cse54 .cse78 .cse32))))))))) (res (= .cse46 .cse33) (let ((.cse48 (<= .cse32 10))) (let ((.cse47 (= .cse48 .cse33))) (res .cse47 (res .cse33 (res .cse48 (=+1 .cse47) (let ((.cse49 (< 0 .cse50))) (res .cse49 (total .cse50 0) (farkas 1 .cse48 1 .cse49)))) (res .cse48 (let ((.cse51 (< 10 .cse32))) (res .cse51 (total .cse32 10) (farkas 1 .cse51 1 .cse33))) (=+2 .cse47))) (res (= .cse46 .cse48) (res (= 10 10) (refl 10) (res .cse52 .cse53 (cong (<= .cse54 10) (<= .cse32 10)))) (trans .cse46 .cse48 .cse33))))) (res (= .cse55 .cse26) (let ((.cse56 (= .cse8 .cse26))) (res .cse56 (res .cse26 (res .cse8 (=+1 .cse56) (res .cse29 .cse30 (farkas 1 .cse8 1 .cse29))) (res .cse8 (let ((.cse57 (< .cse32 1))) (res .cse57 (total 1 .cse32) (farkas 1 .cse57 1 .cse26))) (=+2 .cse56))) (res (= .cse55 .cse8) (res .cse52 .cse53 (res (= 1 1) (refl 1) (cong (<= 1 .cse54) (<= 1 .cse32)))) (trans .cse55 .cse8 .cse26)))) (let ((.cse62 (+ .cse72 .cse71))) (let ((.cse63 (= .cse65 .cse62))) (let-proof ((.cse64 (let ((.cse70 (* (- 1) .cse74))) (res (= .cse70 .cse71) (poly* .cse70 .cse71) (res (= .cse72 .cse72) (refl .cse72) (let ((.cse73 (+ .cse72 .cse70))) (res (= .cse73 .cse62) (cong (+ .cse72 .cse70) (+ .cse72 .cse71)) (res (= .cse65 .cse73) (-def .cse72 .cse74) (trans .cse65 .cse73 .cse62))))))))) (res (= .cse58 .cse14) (let ((.cse60 (<= .cse62 9))) (let ((.cse59 (= .cse60 .cse14))) (res .cse59 (res .cse14 (res .cse60 (=+1 .cse59) (res .cse20 .cse21 (farkas 1 .cse60 1 .cse20))) (res .cse60 (let ((.cse61 (< 9 .cse62))) (res .cse61 (total .cse62 9) (farkas 1 .cse61 1 .cse14))) (=+2 .cse59))) (res (= .cse58 .cse60) (res (= 9 9) (refl 9) (res .cse63 .cse64 (cong (<= .cse65 9) (<= .cse62 9)))) (trans .cse58 .cse60 .cse14))))) (res (= .cse66 .cse37) (let ((.cse68 (<= 0 .cse62))) (let ((.cse67 (= .cse68 .cse37))) (res .cse67 (res .cse37 (res .cse68 (=+1 .cse67) (res .cse40 .cse41 (farkas 1 .cse68 1 .cse40))) (res .cse68 (let ((.cse69 (< .cse62 0))) (res .cse69 (total 0 .cse62) (farkas 1 .cse69 1 .cse37))) (=+2 .cse67))) (res (= .cse66 .cse68) (res .cse63 .cse64 (res (= 0 0) (refl 0) (cong (<= 0 .cse65) (<= 0 .cse62)))) (trans .cse66 .cse68 .cse37))))) (cong (and .cse66 .cse58 .cse55 .cse46) (and .cse37 .cse14 .cse26 .cse33))))))))))) (=-2 .cse45))))))))) (res .cse0 (let ((.cse5 (<= .cse32 0)) (.cse12 (+ (* 137 x) (* (- 123) y)))) (let-proof ((.cse9 (total-int .cse32 0))) (let ((.cse1 (<= .cse12 0))) (let-proof ((.cse10 (! (res .cse26 (res .cse15 .cse16 (and- 2 .cse15)) (let ((.cse27 (not .cse5))) (let-proof ((.cse31 (not- .cse27))) (res .cse27 (let ((.cse28 (= .cse26 .cse27))) (res .cse28 (res .cse27 (res .cse26 (=+1 .cse28) (res .cse5 (not+ .cse27) (farkas 1 .cse26 1 .cse5))) (res .cse26 (res .cse29 .cse30 (res .cse5 (res .cse8 .cse9 (farkas 1 .cse29 1 .cse8)) .cse31)) (=+2 .cse28))) (=-2 .cse28))) .cse31)))) :proves (- .cse5) :input))) (res .cse1 (! (let ((.cse19 (+ .cse22 .cse23 (- 3)))) (let ((.cse2 (<= .cse19 0))) (let-proof ((.cse3 (! (res .cse14 (res .cse15 .cse16 (and- 1 .cse15)) (let ((.cse17 (= .cse14 .cse2))) (res .cse17 (res .cse2 (res .cse14 (=+1 .cse17) (let ((.cse18 (< 0 .cse19))) (res .cse18 (total .cse19 0) (farkas 1 .cse14 3 .cse18)))) (res .cse14 (res .cse20 .cse21 (farkas 1 .cse20 3 .cse2)) (=+2 .cse17))) (=-2 .cse17)))) :proves (+ .cse2) :input))) (res .cse2 .cse3 (let ((.cse7 (+ x .cse13))) (let ((.cse4 (<= .cse7 0))) (res .cse4 (! (res .cse2 .cse3 (res .cse5 (! (let ((.cse6 (<= 1 .cse7))) (res .cse6 (total-int .cse7 0) (res .cse8 .cse9 (farkas 93 .cse8 281 .cse2 1727 .cse6)))) :proves (+ .cse5 - .cse2 + .cse4) :LA ((- 93) 281 (- 1727))) .cse10)) :proves (+ .cse4) :rup) (! (let ((.cse11 (<= 1 .cse12))) (res .cse11 (total-int .cse12 0) (farkas 1 .cse4 14 .cse2 93 .cse11))) :proves (- .cse4 - .cse2 + .cse1) :LA (1 14 (- 93)))))))))) :proves (+ .cse1) :rup) (res .cse5 (! (res .cse8 .cse9 (let ((.cse24 (<= 1 .cse25))) (res .cse24 (total-int .cse25 0) (farkas 263 .cse24 281 .cse1 14 .cse8)))) :proves (+ .cse0 - .cse1 + .cse5) :LA ((- 263) 281 (- 14))) .cse10)))))) (! (res .cse33 (! (res .cse15 .cse16 (and- 3 .cse15)) :proves (+ .cse33) :input) (let ((.cse43 (+ .cse22 .cse23 1))) (let ((.cse35 (<= 1 .cse43)) (.cse34 (<= .cse43 0))) (let-proof ((.cse36 (total-int .cse43 0))) (res .cse34 (! (res .cse35 .cse36 (farkas 281 .cse35 93 .cse33 1727 .cse0)) :proves (+ .cse34 - .cse33 - .cse0) :LA ((- 281) 93 1727)) (! (res .cse37 (res .cse15 .cse16 (and- 0 .cse15)) (let ((.cse38 (not .cse34))) (let-proof ((.cse42 (not- .cse38))) (res .cse38 (let ((.cse39 (= .cse37 .cse38))) (res .cse39 (res .cse38 (res .cse37 (=+1 .cse39) (res .cse34 (not+ .cse38) (farkas 1 .cse37 3 .cse34))) (res .cse37 (res .cse40 .cse41 (res .cse34 (res .cse35 .cse36 (farkas 1 .cse40 3 .cse35)) .cse42)) (=+2 .cse39))) (=-2 .cse39))) .cse42)))) :proves (- .cse34) :input)))))) :proves (- .cse0) :rup))))))))) :proves () :rup)
