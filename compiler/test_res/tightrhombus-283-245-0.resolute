unsat
(! (let ((.cse80 (* 2451 y)) (.cse48 (* 2830 x)) (.cse49 (* (- 2451) y)) (.cse85 (* 2450 y)) (.cse83 (* 2831 x)) (.cse82 (* (- 2450) y))) (let ((.cse56 (+ .cse83 .cse82 (- 10))) (.cse87 (+ (* (- 2831) x) .cse85 1)) (.cse68 (+ .cse48 .cse49 (- 9))) (.cse86 (+ (* (- 2830) x) .cse80))) (let ((.cse27 (* (- 1) y)) (.cse41 (<= .cse86 0)) (.cse16 (<= .cse68 0)) (.cse30 (<= .cse87 0)) (.cse37 (<= .cse56 0)) (.cse36 (+ .cse83 .cse82))) (let ((.cse33 (< 0 .cse87)) (.cse22 (<= 1 .cse36)) (.cse44 (< 0 .cse86)) (.cse25 (and .cse41 .cse16 .cse30 .cse37)) (.cse29 (+ x .cse27 1))) (let-proof ((.cse34 (total .cse87 0)) (.cse45 (total .cse86 0))) (let ((.cse0 (<= .cse29 0))) (let-proof ((.cse26 (let ((.cse60 (- .cse83 .cse85)) (.cse73 (- .cse48 .cse80))) (let ((.cse74 (<= 0 .cse73)) (.cse64 (<= .cse73 9)) (.cse61 (<= 1 .cse60)) (.cse52 (<= .cse60 10))) (let ((.cse50 (and .cse74 .cse64 .cse61 .cse52))) (res .cse50 (assume .cse50) (let ((.cse51 (= .cse50 .cse25))) (res .cse51 (let ((.cse58 (= .cse60 .cse36))) (let-proof ((.cse59 (let ((.cse81 (* (- 1) .cse85))) (res (= .cse81 .cse82) (poly* .cse81 .cse82) (res (= .cse83 .cse83) (refl .cse83) (let ((.cse84 (+ .cse83 .cse81))) (res (= .cse84 .cse36) (cong (+ .cse83 .cse81) (+ .cse83 .cse82)) (res (= .cse60 .cse84) (-def .cse83 .cse85) (trans .cse60 .cse84 .cse36))))))))) (res (= .cse52 .cse37) (let ((.cse54 (<= .cse36 10))) (let ((.cse53 (= .cse54 .cse37))) (res .cse53 (res .cse37 (res .cse54 (=+1 .cse53) (let ((.cse55 (< 0 .cse56))) (res .cse55 (total .cse56 0) (farkas 1 .cse54 1 .cse55)))) (res .cse54 (let ((.cse57 (< 10 .cse36))) (res .cse57 (total .cse36 10) (farkas 1 .cse57 1 .cse37))) (=+2 .cse53))) (res (= .cse52 .cse54) (res (= 10 10) (refl 10) (res .cse58 .cse59 (cong (<= .cse60 10) (<= .cse36 10)))) (trans .cse52 .cse54 .cse37))))) (res (= .cse61 .cse30) (let ((.cse62 (= .cse22 .cse30))) (res .cse62 (res .cse30 (res .cse22 (=+1 .cse62) (res .cse33 .cse34 (farkas 1 .cse22 1 .cse33))) (res .cse22 (let ((.cse63 (< .cse36 1))) (res .cse63 (total 1 .cse36) (farkas 1 .cse63 1 .cse30))) (=+2 .cse62))) (res (= .cse61 .cse22) (res .cse58 .cse59 (res (= 1 1) (refl 1) (cong (<= 1 .cse60) (<= 1 .cse36)))) (trans .cse61 .cse22 .cse30)))) (let ((.cse70 (+ .cse48 .cse49))) (let ((.cse71 (= .cse73 .cse70))) (let-proof ((.cse72 (let ((.cse78 (* (- 1) .cse80))) (res (= .cse78 .cse49) (poly* .cse78 .cse49) (res (= .cse48 .cse48) (refl .cse48) (let ((.cse79 (+ .cse48 .cse78))) (res (= .cse79 .cse70) (cong (+ .cse48 .cse78) (+ .cse48 .cse49)) (res (= .cse73 .cse79) (-def .cse48 .cse80) (trans .cse73 .cse79 .cse70))))))))) (res (= .cse64 .cse16) (let ((.cse66 (<= .cse70 9))) (let ((.cse65 (= .cse66 .cse16))) (res .cse65 (res .cse16 (res .cse66 (=+1 .cse65) (let ((.cse67 (< 0 .cse68))) (res .cse67 (total .cse68 0) (farkas 1 .cse66 1 .cse67)))) (res .cse66 (let ((.cse69 (< 9 .cse70))) (res .cse69 (total .cse70 9) (farkas 1 .cse69 1 .cse16))) (=+2 .cse65))) (res (= .cse64 .cse66) (res (= 9 9) (refl 9) (res .cse71 .cse72 (cong (<= .cse73 9) (<= .cse70 9)))) (trans .cse64 .cse66 .cse16))))) (res (= .cse74 .cse41) (let ((.cse76 (<= 0 .cse70))) (let ((.cse75 (= .cse76 .cse41))) (res .cse75 (res .cse41 (res .cse76 (=+1 .cse75) (res .cse44 .cse45 (farkas 1 .cse76 1 .cse44))) (res .cse76 (let ((.cse77 (< .cse70 0))) (res .cse77 (total 0 .cse70) (farkas 1 .cse77 1 .cse41))) (=+2 .cse75))) (res (= .cse74 .cse76) (res .cse71 .cse72 (res (= 0 0) (refl 0) (cong (<= 0 .cse73) (<= 0 .cse70)))) (trans .cse74 .cse76 .cse41))))) (cong (and .cse74 .cse64 .cse61 .cse52) (and .cse41 .cse16 .cse30 .cse37))))))))))) (=-2 .cse51))))))))) (res .cse0 (let ((.cse1 (<= .cse36 0))) (let-proof ((.cse23 (total-int .cse36 0))) (let-proof ((.cse24 (! (res .cse30 (res .cse25 .cse26 (and- 2 .cse25)) (let ((.cse31 (not .cse1))) (let-proof ((.cse35 (not- .cse31))) (res .cse31 (let ((.cse32 (= .cse30 .cse31))) (res .cse32 (res .cse31 (res .cse30 (=+1 .cse32) (res .cse1 (not+ .cse31) (farkas 1 .cse30 1 .cse1))) (res .cse30 (res .cse33 .cse34 (res .cse1 (res .cse22 .cse23 (farkas 1 .cse33 1 .cse22)) .cse35)) (=+2 .cse32))) (=-2 .cse32))) .cse35)))) :proves (- .cse1) :input))) (res .cse1 (let ((.cse11 (+ (* 15 x) (* (- 13) y)))) (let ((.cse2 (<= .cse11 0))) (res .cse2 (! (let ((.cse21 (+ x .cse27))) (let ((.cse19 (+ (* 1359 x) (* (- 1177) y) (- 4))) (.cse12 (<= .cse21 0))) (let-proof ((.cse17 (! (res .cse25 .cse26 (and- 1 .cse25)) :proves (+ .cse16) :input))) (let ((.cse15 (+ (* 8 x) (* (- 7) y))) (.cse6 (<= .cse19 0))) (let-proof ((.cse13 (! (res .cse16 .cse17 (res .cse1 (! (let ((.cse20 (<= 1 .cse21))) (res .cse20 (total-int .cse21 0) (res .cse22 .cse23 (farkas 379 .cse22 381 .cse16 5281 .cse20)))) :proves (+ .cse1 - .cse16 + .cse12) :LA ((- 379) 381 (- 5281))) .cse24)) :proves (+ .cse12) :rup))) (let ((.cse9 (+ (* 1247 x) (* (- 1080) y) (- 3))) (.cse4 (<= .cse15 0))) (let-proof ((.cse7 (! (res .cse16 .cse17 (res .cse12 .cse13 (! (let ((.cse18 (<= 1 .cse19))) (res .cse18 (total-int .cse19 0) (farkas 1 .cse12 182 .cse16 379 .cse18))) :proves (- .cse12 - .cse16 + .cse6) :LA (1 182 (- 379))))) :proves (+ .cse6) :rup))) (let ((.cse3 (<= .cse9 0))) (let-proof ((.cse5 (! (res .cse12 .cse13 (res .cse6 .cse7 (! (let ((.cse14 (<= 1 .cse15))) (res .cse14 (total-int .cse15 0) (farkas 1 .cse6 97 .cse12 182 .cse14))) :proves (- .cse6 - .cse12 + .cse4) :LA (1 97 (- 182))))) :proves (+ .cse4) :rup))) (res .cse3 (! (res .cse4 .cse5 (res .cse6 .cse7 (! (let ((.cse8 (<= 1 .cse9))) (res .cse8 (total-int .cse9 0) (farkas 1 .cse4 89 .cse6 97 .cse8))) :proves (- .cse4 - .cse6 + .cse3) :LA (1 89 (- 97))))) :proves (+ .cse3) :rup) (res .cse4 .cse5 (! (let ((.cse10 (<= 1 .cse11))) (res .cse10 (total-int .cse11 0) (farkas 11 .cse4 89 .cse10 1 .cse3))) :proves (- .cse4 + .cse2 - .cse3) :LA (11 (- 89) 1))))))))))))) :proves (+ .cse2) :rup) (! (res .cse22 .cse23 (let ((.cse28 (<= 1 .cse29))) (res .cse28 (total-int .cse29 0) (farkas 53 .cse28 2 .cse22 381 .cse2)))) :proves (+ .cse0 + .cse1 - .cse2) :LA ((- 53) (- 2) 381))))) .cse24)))) (! (res .cse37 (! (res .cse25 .cse26 (and- 3 .cse25)) :proves (+ .cse37) :input) (let ((.cse47 (+ .cse48 .cse49 1))) (let ((.cse39 (<= 1 .cse47)) (.cse38 (<= .cse47 0))) (let-proof ((.cse40 (total-int .cse47 0))) (res .cse38 (! (res .cse39 .cse40 (farkas 381 .cse39 379 .cse37 5281 .cse0)) :proves (+ .cse38 - .cse37 - .cse0) :LA ((- 381) 379 5281)) (! (res .cse41 (res .cse25 .cse26 (and- 0 .cse25)) (let ((.cse42 (not .cse38))) (let-proof ((.cse46 (not- .cse42))) (res .cse42 (let ((.cse43 (= .cse41 .cse42))) (res .cse43 (res .cse42 (res .cse41 (=+1 .cse43) (res .cse38 (not+ .cse42) (farkas 1 .cse41 1 .cse38))) (res .cse41 (res .cse44 .cse45 (res .cse38 (res .cse39 .cse40 (farkas 1 .cse44 1 .cse39)) .cse46)) (=+2 .cse43))) (=-2 .cse43))) .cse46)))) :proves (- .cse38) :input)))))) :proves (- .cse0) :rup))))))))) :proves () :rup)
