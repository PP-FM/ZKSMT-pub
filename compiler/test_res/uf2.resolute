unsat
(! (let ((.cse6 (p b))) (let ((.cse0 (and (p a) .cse6)) (.cse1 (and .cse6 (p c)))) (let ((.cse2 (or .cse0 .cse1)) (.cse10 (not .cse6)) (.cse5 (= .cse6 true))) (let ((.cse12 (= .cse6 .cse5)) (.cse3 (and .cse2 .cse10))) (let-proof ((.cse4 (assume .cse3)) (.cse13 (res true true+ (res .cse5 (res .cse6 (=+1 .cse12) (=+2 .cse5)) (res .cse6 (=-1 .cse5) (=+2 .cse12)))))) (let-proof ((.cse7 (res .cse12 .cse13 (=-2 .cse12))) (.cse8 (! (res .cse6 (let ((.cse9 (not .cse5))) (res .cse9 (res .cse10 (not+ .cse10) (let ((.cse11 (= .cse10 .cse9))) (res .cse11 (res .cse12 .cse13 (cong (not .cse6) (not .cse5))) (=-2 .cse11)))) (not- .cse9))) (res .cse3 .cse4 (res .cse10 (and- 1 .cse3) (not- .cse10)))) :proves (- .cse5) :input))) (res .cse0 (res .cse1 (! (res .cse2 (res .cse3 .cse4 (and- 0 .cse3)) (or- .cse2)) :proves (+ .cse0 + .cse1) :input) (! (res .cse5 (! (res .cse6 (and- 0 .cse1) .cse7) :proves (- .cse1 + .cse5) :input) .cse8) :proves (- .cse1) :rup)) (! (res .cse5 (! (res .cse6 (and- 1 .cse0) .cse7) :proves (- .cse0 + .cse5) :input) .cse8) :proves (- .cse0) :rup)))))))) :proves () :rup)
