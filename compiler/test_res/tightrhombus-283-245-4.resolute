unsat
(! (let ((.cse106 (* 24500001 y)) (.cse104 (* 28300000 x)) (.cse103 (* (- 24500001) y)) (.cse111 (* 24500000 y)) (.cse109 (* 28300001 x)) (.cse108 (* (- 24500000) y))) (let ((.cse80 (+ .cse109 .cse108 (- 100000))) (.cse113 (+ (* (- 28300001) x) .cse111 1)) (.cse92 (+ .cse104 .cse103 (- 99999))) (.cse112 (+ (* (- 28300000) x) .cse106))) (let ((.cse67 (<= .cse112 0)) (.cse5 (<= .cse92 0)) (.cse60 (<= .cse113 0)) (.cse56 (<= .cse80 0)) (.cse66 (+ .cse109 .cse108))) (let ((.cse73 (+ .cse104 .cse103 1)) (.cse63 (< 0 .cse113)) (.cse49 (<= 1 .cse66)) (.cse70 (< 0 .cse112)) (.cse54 (and .cse67 .cse5 .cse60 .cse56))) (let-proof ((.cse64 (total .cse113 0)) (.cse71 (total .cse112 0))) (let ((.cse58 (<= 1 .cse73)) (.cse0 (<= .cse73 0))) (let-proof ((.cse55 (let ((.cse84 (- .cse109 .cse111)) (.cse97 (- .cse104 .cse106))) (let ((.cse98 (<= 0 .cse97)) (.cse88 (<= .cse97 99999)) (.cse85 (<= 1 .cse84)) (.cse76 (<= .cse84 100000))) (let ((.cse74 (and .cse98 .cse88 .cse85 .cse76))) (res .cse74 (assume .cse74) (let ((.cse75 (= .cse74 .cse54))) (res .cse75 (let ((.cse82 (= .cse84 .cse66))) (let-proof ((.cse83 (let ((.cse107 (* (- 1) .cse111))) (res (= .cse107 .cse108) (poly* .cse107 .cse108) (res (= .cse109 .cse109) (refl .cse109) (let ((.cse110 (+ .cse109 .cse107))) (res (= .cse110 .cse66) (cong (+ .cse109 .cse107) (+ .cse109 .cse108)) (res (= .cse84 .cse110) (-def .cse109 .cse111) (trans .cse84 .cse110 .cse66))))))))) (res (= .cse76 .cse56) (let ((.cse78 (<= .cse66 100000))) (let ((.cse77 (= .cse78 .cse56))) (res .cse77 (res .cse56 (res .cse78 (=+1 .cse77) (let ((.cse79 (< 0 .cse80))) (res .cse79 (total .cse80 0) (farkas 1 .cse78 1 .cse79)))) (res .cse78 (let ((.cse81 (< 100000 .cse66))) (res .cse81 (total .cse66 100000) (farkas 1 .cse81 1 .cse56))) (=+2 .cse77))) (res (= .cse76 .cse78) (res (= 100000 100000) (refl 100000) (res .cse82 .cse83 (cong (<= .cse84 100000) (<= .cse66 100000)))) (trans .cse76 .cse78 .cse56))))) (res (= .cse85 .cse60) (let ((.cse86 (= .cse49 .cse60))) (res .cse86 (res .cse60 (res .cse49 (=+1 .cse86) (res .cse63 .cse64 (farkas 1 .cse49 1 .cse63))) (res .cse49 (let ((.cse87 (< .cse66 1))) (res .cse87 (total 1 .cse66) (farkas 1 .cse87 1 .cse60))) (=+2 .cse86))) (res (= .cse85 .cse49) (res .cse82 .cse83 (res (= 1 1) (refl 1) (cong (<= 1 .cse84) (<= 1 .cse66)))) (trans .cse85 .cse49 .cse60)))) (let ((.cse94 (+ .cse104 .cse103))) (let ((.cse95 (= .cse97 .cse94))) (let-proof ((.cse96 (let ((.cse102 (* (- 1) .cse106))) (res (= .cse102 .cse103) (poly* .cse102 .cse103) (res (= .cse104 .cse104) (refl .cse104) (let ((.cse105 (+ .cse104 .cse102))) (res (= .cse105 .cse94) (cong (+ .cse104 .cse102) (+ .cse104 .cse103)) (res (= .cse97 .cse105) (-def .cse104 .cse106) (trans .cse97 .cse105 .cse94))))))))) (res (= .cse88 .cse5) (let ((.cse90 (<= .cse94 99999))) (let ((.cse89 (= .cse90 .cse5))) (res .cse89 (res .cse5 (res .cse90 (=+1 .cse89) (let ((.cse91 (< 0 .cse92))) (res .cse91 (total .cse92 0) (farkas 1 .cse90 1 .cse91)))) (res .cse90 (let ((.cse93 (< 99999 .cse94))) (res .cse93 (total .cse94 99999) (farkas 1 .cse93 1 .cse5))) (=+2 .cse89))) (res (= .cse88 .cse90) (res (= 99999 99999) (refl 99999) (res .cse95 .cse96 (cong (<= .cse97 99999) (<= .cse94 99999)))) (trans .cse88 .cse90 .cse5))))) (res (= .cse98 .cse67) (let ((.cse100 (<= 0 .cse94))) (let ((.cse99 (= .cse100 .cse67))) (res .cse99 (res .cse67 (res .cse100 (=+1 .cse99) (res .cse70 .cse71 (farkas 1 .cse100 1 .cse70))) (res .cse100 (let ((.cse101 (< .cse94 0))) (res .cse101 (total 0 .cse94) (farkas 1 .cse101 1 .cse67))) (=+2 .cse99))) (res (= .cse98 .cse100) (res .cse95 .cse96 (res (= 0 0) (refl 0) (cong (<= 0 .cse97) (<= 0 .cse94)))) (trans .cse98 .cse100 .cse67))))) (cong (and .cse98 .cse88 .cse85 .cse76) (and .cse67 .cse5 .cse60 .cse56))))))))))) (=-2 .cse75)))))))) (.cse59 (total-int .cse73 0))) (res .cse0 (let ((.cse1 (<= .cse66 0))) (let-proof ((.cse50 (total-int .cse66 0))) (let-proof ((.cse52 (! (res .cse60 (res .cse54 .cse55 (and- 2 .cse54)) (let ((.cse61 (not .cse1))) (let-proof ((.cse65 (not- .cse61))) (res .cse61 (let ((.cse62 (= .cse60 .cse61))) (res .cse62 (res .cse61 (res .cse60 (=+1 .cse62) (res .cse1 (not+ .cse61) (farkas 1 .cse60 1 .cse1))) (res .cse60 (res .cse63 .cse64 (res .cse1 (res .cse49 .cse50 (farkas 1 .cse63 1 .cse49)) .cse65)) (=+2 .cse62))) (=-2 .cse62))) .cse65)))) :proves (- .cse1) :input))) (res .cse1 (let ((.cse57 (+ (* 283 x) (* (- 245) y)))) (let ((.cse2 (<= .cse57 0))) (res .cse2 (! (let ((.cse53 (+ (* 216 x) (* (- 187) y)))) (let ((.cse16 (<= 1 .cse57)) (.cse3 (<= .cse53 0))) (let-proof ((.cse17 (total-int .cse57 0))) (res .cse3 (! (let ((.cse51 (+ x (* (- 1) y)))) (let ((.cse4 (<= .cse51 0)) (.cse18 (<= 1 .cse53))) (let-proof ((.cse6 (! (res .cse54 .cse55 (and- 1 .cse54)) :proves (+ .cse5) :input)) (.cse19 (total-int .cse53 0))) (res .cse4 (! (res .cse5 .cse6 (res .cse1 (let ((.cse48 (+ (* 20445308 x) (* (- 17700001) y)))) (let ((.cse7 (<= .cse48 0)) (.cse46 (<= 1 .cse51))) (let-proof ((.cse47 (total-int .cse51 0))) (res .cse7 (let ((.cse45 (+ (* 8 x) (* (- 7) y)))) (let ((.cse8 (<= .cse45 0)) (.cse43 (<= 1 .cse48))) (let-proof ((.cse44 (total-int .cse48 0))) (res .cse8 (let ((.cse42 (+ (* 12590615 x) (* (- 10900002) y)))) (let ((.cse9 (<= .cse42 0)) (.cse40 (<= 1 .cse45))) (let-proof ((.cse41 (total-int .cse45 0))) (res .cse9 (let ((.cse39 (+ (* 15 x) (* (- 13) y)))) (let ((.cse37 (<= 1 .cse42)) (.cse10 (<= .cse39 0))) (let-proof ((.cse38 (total-int .cse42 0))) (res .cse10 (let ((.cse36 (+ (* 4735922 x) (* (- 4100003) y)))) (let ((.cse34 (<= 1 .cse39)) (.cse11 (<= .cse36 0))) (let-proof ((.cse35 (total-int .cse39 0))) (res .cse11 (let ((.cse33 (+ (* 82 x) (* (- 71) y)))) (let ((.cse12 (<= .cse33 0)) (.cse31 (<= 1 .cse36))) (let-proof ((.cse32 (total-int .cse36 0))) (res .cse12 (let ((.cse30 (+ (* 1617151 x) (* (- 1400007) y)))) (let ((.cse13 (<= .cse30 0)) (.cse28 (<= 1 .cse33))) (let-proof ((.cse29 (total-int .cse33 0))) (res .cse13 (let ((.cse27 (+ (* 149 x) (* (- 129) y)))) (let ((.cse14 (<= .cse27 0)) (.cse25 (<= 1 .cse30))) (let-proof ((.cse26 (total-int .cse30 0))) (res .cse14 (let ((.cse24 (+ (* 115531 x) (* (- 100018) y)))) (let ((.cse22 (<= 1 .cse27)) (.cse15 (<= .cse24 0))) (let-proof ((.cse23 (total-int .cse27 0))) (res .cse15 (let ((.cse20 (<= 1 .cse24))) (let-proof ((.cse21 (total-int .cse24 0))) (res .cse3 (res .cse2 (! (res .cse16 .cse17 (res .cse18 .cse19 (farkas 1 .cse5 283 .cse18 99784 .cse16))) :proves (- .cse5 + .cse3 + .cse2) :LA (1 (- 283) (- 99784))) (! (res .cse18 .cse19 (res .cse20 .cse21 (farkas 1 .cse20 1 .cse18 409 .cse2))) :proves (+ .cse15 + .cse3 - .cse2) :LA ((- 1) (- 1) 409))) (! (res .cse22 .cse23 (res .cse20 .cse21 (farkas 1 .cse20 409 .cse22 817 .cse3))) :proves (+ .cse15 + .cse14 - .cse3) :LA ((- 1) (- 409) 817))))) (! (res .cse25 .cse26 (res .cse22 .cse23 (farkas 1 .cse22 817 .cse25 11436 .cse15))) :proves (+ .cse14 + .cse13 - .cse15) :LA ((- 1) (- 817) 11436)))))) (! (res .cse25 .cse26 (res .cse28 .cse29 (farkas 11436 .cse28 17147 .cse14 1 .cse25))) :proves (+ .cse12 - .cse14 + .cse13) :LA ((- 11436) 17147 (- 1))))))) (! (res .cse31 .cse32 (res .cse28 .cse29 (farkas 50216 .cse13 1 .cse28 17147 .cse31))) :proves (- .cse13 + .cse12 + .cse11) :LA (50216 (- 1) (- 17147))))))) (! (res .cse31 .cse32 (res .cse34 .cse35 (farkas 50216 .cse34 66941 .cse12 1 .cse31))) :proves (+ .cse10 - .cse12 + .cse11) :LA ((- 50216) 66941 (- 1))))))) (! (res .cse37 .cse38 (res .cse34 .cse35 (farkas 1 .cse34 177965 .cse11 66941 .cse37))) :proves (+ .cse10 - .cse11 + .cse9) :LA ((- 1) 177965 (- 66941))))))) (! (res .cse40 .cse41 (res .cse37 .cse38 (farkas 1 .cse37 177965 .cse40 934289 .cse10))) :proves (+ .cse9 + .cse8 - .cse10) :LA ((- 1) (- 177965) 934289)))))) (! (res .cse40 .cse41 (res .cse43 .cse44 (farkas 1517148 .cse9 934289 .cse43 1 .cse40))) :proves (- .cse9 + .cse7 + .cse8) :LA (1517148 (- 934289) (- 1))))))) (! (res .cse46 .cse47 (res .cse43 .cse44 (farkas 2745307 .cse8 1 .cse43 1517148 .cse46))) :proves (- .cse8 + .cse7 + .cse4) :LA (2745307 (- 1) (- 1517148))))))) (! (res .cse46 .cse47 (res .cse49 .cse50 (farkas 3800001 .cse7 2745307 .cse49 1 .cse46))) :proves (- .cse7 + .cse1 + .cse4) :LA (3800001 (- 2745307) (- 1))))))) .cse52)) :proves (+ .cse4) :rup) (res .cse5 .cse6 (! (res .cse18 .cse19 (farkas 29 .cse5 99784 .cse4 3799999 .cse18)) :proves (- .cse5 - .cse4 + .cse3) :LA (29 99784 (- 3799999)))))))) :proves (+ .cse3) :rup) (res .cse56 (! (res .cse54 .cse55 (and- 3 .cse54)) :proves (+ .cse56) :input) (! (res .cse16 .cse17 (farkas 1 .cse56 100187 .cse16 245 .cse3)) :proves (- .cse56 + .cse2 - .cse3) :LA (1 (- 100187) 245))))))) :proves (+ .cse2) :rup) (! (res .cse49 .cse50 (res .cse58 .cse59 (farkas 245 .cse58 283 .cse49 52800001 .cse2))) :proves (+ .cse0 + .cse1 - .cse2) :LA ((- 245) (- 283) 52800001))))) .cse52)))) (! (res .cse67 (res .cse54 .cse55 (and- 0 .cse54)) (let ((.cse68 (not .cse0))) (let-proof ((.cse72 (not- .cse68))) (res .cse68 (let ((.cse69 (= .cse67 .cse68))) (res .cse69 (res .cse68 (res .cse67 (=+1 .cse69) (res .cse0 (not+ .cse68) (farkas 1 .cse67 1 .cse0))) (res .cse67 (res .cse70 .cse71 (res .cse0 (res .cse58 .cse59 (farkas 1 .cse70 1 .cse58)) .cse72)) (=+2 .cse69))) (=-2 .cse69))) .cse72)))) :proves (- .cse0) :input))))))))) :proves () :rup)
