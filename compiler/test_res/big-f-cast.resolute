unsat
(! (let ((.cse625 (and (not fa0) min0)) (.cse1311 (not fa1))) (let ((.cse622 (and .cse1311 min1)) (.cse621 (and (or min1 .cse1311) .cse625))) (let ((.cse623 (or .cse622 .cse621)) (.cse1310 (not fa2))) (let ((.cse618 (and .cse1310 min2)) (.cse617 (and (or min2 .cse1310) .cse623))) (let ((.cse619 (or .cse618 .cse617)) (.cse1309 (not fa3))) (let ((.cse614 (and .cse1309 min3)) (.cse613 (and (or min3 .cse1309) .cse619))) (let ((.cse615 (or .cse614 .cse613)) (.cse1308 (not fa4))) (let ((.cse610 (and .cse1308 min4)) (.cse609 (and (or min4 .cse1308) .cse615))) (let ((.cse611 (or .cse610 .cse609)) (.cse1307 (not fa5))) (let ((.cse606 (and .cse1307 min5)) (.cse605 (and (or min5 .cse1307) .cse611))) (let ((.cse607 (or .cse606 .cse605)) (.cse1306 (not fa6))) (let ((.cse602 (and .cse1306 min6)) (.cse601 (and (or min6 .cse1306) .cse607))) (let ((.cse603 (or .cse602 .cse601)) (.cse1305 (not fa7))) (let ((.cse598 (and .cse1305 min7)) (.cse597 (and (or min7 .cse1305) .cse603))) (let ((.cse599 (or .cse598 .cse597)) (.cse1304 (not fa8))) (let ((.cse594 (and .cse1304 min8)) (.cse593 (and (or min8 .cse1304) .cse599))) (let ((.cse595 (or .cse594 .cse593)) (.cse1303 (not fa9))) (let ((.cse590 (and .cse1303 min9)) (.cse589 (and (or min9 .cse1303) .cse595))) (let ((.cse591 (or .cse590 .cse589)) (.cse1302 (not fa10))) (let ((.cse586 (and .cse1302 min10)) (.cse585 (and (or min10 .cse1302) .cse591))) (let ((.cse587 (or .cse586 .cse585)) (.cse1301 (not fa11))) (let ((.cse582 (and .cse1301 min11)) (.cse581 (and (or min11 .cse1301) .cse587))) (let ((.cse583 (or .cse582 .cse581)) (.cse1300 (not fa12))) (let ((.cse578 (and .cse1300 min12)) (.cse577 (and (or min12 .cse1300) .cse583))) (let ((.cse579 (or .cse578 .cse577)) (.cse1299 (not fa13))) (let ((.cse574 (and .cse1299 min13)) (.cse573 (and (or min13 .cse1299) .cse579))) (let ((.cse575 (or .cse574 .cse573)) (.cse1298 (not fa14))) (let ((.cse570 (and .cse1298 min14)) (.cse569 (and (or min14 .cse1298) .cse575))) (let ((.cse571 (or .cse570 .cse569)) (.cse461 (not fa15))) (let ((.cse551 (and .cse461 min15)) (.cse535 (and (or min15 .cse461) .cse571))) (let ((.cse552 (or .cse551 .cse535)) (.cse441 (not fa16))) (let ((.cse537 (and .cse441 min16)) (.cse549 (and (or min16 .cse441) .cse552))) (let ((.cse550 (or .cse537 .cse549)) (.cse421 (not fa17))) (let ((.cse539 (and .cse421 min17)) (.cse547 (and (or min17 .cse421) .cse550))) (let ((.cse548 (or .cse539 .cse547)) (.cse401 (not fa18))) (let ((.cse541 (and .cse401 min18)) (.cse545 (and (or min18 .cse401) .cse548))) (let ((.cse546 (or .cse541 .cse545)) (.cse381 (not fa19))) (let ((.cse542 (and .cse381 min19)) (.cse543 (and (or min19 .cse381) .cse546))) (let ((.cse544 (or .cse542 .cse543)) (.cse360 (not fa20))) (let ((.cse532 (and .cse360 min20)) (.cse533 (and (or min20 .cse360) .cse544))) (let ((.cse534 (or .cse532 .cse533)) (.cse339 (not fa21))) (let ((.cse522 (and .cse339 min21)) (.cse523 (and (or min21 .cse339) .cse534))) (let ((.cse524 (or .cse522 .cse523)) (.cse318 (not fa22))) (let ((.cse501 (and .cse318 min22)) (.cse513 (and (or min22 .cse318) .cse524))) (let ((.cse514 (or .cse501 .cse513)) (.cse297 (not fa23))) (let ((.cse503 (and .cse297 min23)) (.cse511 (and (or min23 .cse297) .cse514))) (let ((.cse512 (or .cse503 .cse511)) (.cse276 (not fa24))) (let ((.cse505 (and .cse276 min24)) (.cse509 (and (or min24 .cse276) .cse512))) (let ((.cse510 (or .cse505 .cse509)) (.cse255 (not fa25))) (let ((.cse506 (and .cse255 min25)) (.cse507 (and (or min25 .cse255) .cse510))) (let ((.cse508 (or .cse506 .cse507)) (.cse234 (not fa26))) (let ((.cse487 (and .cse234 min26)) (.cse467 (and (or min26 .cse234) .cse508))) (let ((.cse491 (or .cse487 .cse467)) (.cse213 (not fa27))) (let ((.cse489 (and .cse213 min27)) (.cse488 (and (or min27 .cse213) .cse491))) (let ((.cse490 (or .cse489 .cse488)) (.cse192 (not fa28))) (let ((.cse477 (and .cse192 min28)) (.cse481 (and (or min28 .cse192) .cse490))) (let ((.cse482 (or .cse477 .cse481)) (.cse171 (not fa29))) (let ((.cse478 (and .cse171 min29)) (.cse479 (and (or min29 .cse171) .cse482))) (let ((.cse480 (or .cse478 .cse479)) (.cse56 (not fa30))) (let ((.cse470 (and .cse56 min30)) (.cse471 (and (or min30 .cse56) .cse480)) (.cse19 (not min31)) (.cse60 (xor fb31 fna31)) (.cse3 (xor fb30 fna30)) (.cse126 (xor fb29 fna29)) (.cse133 (xor fb28 fna28)) (.cse132 (xor fb27 fna27)) (.cse71 (xor fb26 fna26)) (.cse91 (xor fb25 fna25)) (.cse90 (xor fb24 fna24)) (.cse125 (xor fb23 fna23)) (.cse119 (xor fb22 fna22)) (.cse81 (xor fb21 fna21)) (.cse138 (xor fb20 fna20)) (.cse96 (xor fb19 fna19)) (.cse110 (xor fb18 fna18)) (.cse127 (xor fb17 fna17)) (.cse101 (xor fb16 fna16)) (.cse124 (xor fb15 fna15)) (.cse1240 (xor fb14 fna14)) (.cse1244 (xor fb13 fna13)) (.cse1248 (xor fb12 fna12)) (.cse1252 (xor fb11 fna11)) (.cse1256 (xor fb10 fna10)) (.cse1260 (xor fb9 fna9)) (.cse1264 (xor fb8 fna8)) (.cse1268 (xor fb7 fna7)) (.cse1272 (xor fb6 fna6)) (.cse1276 (xor fb5 fna5)) (.cse1280 (xor fb4 fna4)) (.cse1284 (xor fb3 fna3)) (.cse1288 (xor fb2 fna2)) (.cse1292 (xor fb1 fna1)) (.cse1296 (xor fb0 fna0))) (let ((.cse1297 (not .cse1296)) (.cse1293 (not .cse1292)) (.cse1289 (not .cse1288)) (.cse1285 (not .cse1284)) (.cse1281 (not .cse1280)) (.cse1277 (not .cse1276)) (.cse1273 (not .cse1272)) (.cse1269 (not .cse1268)) (.cse1265 (not .cse1264)) (.cse1261 (not .cse1260)) (.cse1257 (not .cse1256)) (.cse1253 (not .cse1252)) (.cse1249 (not .cse1248)) (.cse1245 (not .cse1244)) (.cse1241 (not .cse1240)) (.cse860 (not .cse124)) (.cse866 (not .cse101)) (.cse854 (not .cse127)) (.cse864 (not .cse110)) (.cse868 (not .cse96)) (.cse848 (not .cse138)) (.cse874 (not .cse81)) (.cse862 (not .cse119)) (.cse858 (not .cse125)) (.cse872 (not .cse90)) (.cse870 (not .cse91)) (.cse896 (not .cse71)) (.cse852 (not .cse132)) (.cse850 (not .cse133)) (.cse856 (not .cse126)) (.cse901 (not .cse3)) (.cse903 (not .cse60)) (.cse949 (or fa31 .cse19)) (.cse472 (or .cse470 .cse471))) (let ((.cse468 (and .cse949 .cse472)) (.cse59 (xor fa31 carry30)) (.cse0 (xor fa30 carry29)) (.cse1 (and .cse56 carry29)) (.cse846 (and .cse1297 .cse1293 .cse1289 .cse1285 .cse1281 .cse1277 .cse1273 .cse1269 .cse1265 .cse1261 .cse1257 .cse1253 .cse1249 .cse1245 .cse1241 .cse860 .cse866 .cse854 .cse864 .cse868 .cse848 .cse874 .cse862 .cse858 .cse872 .cse870 .cse896 .cse852 .cse850 .cse856 .cse901 .cse903))) (let-proof ((.cse948 (! (assume min31) :proves (+ min31) :input)) (.cse950 (not- .cse19)) (.cse845 (xor+ (fb31 fna31) (fb31) (fna31))) (.cse61 (xor+ (fb31 fna31) (fna31) (fb31))) (.cse904 (not- .cse903)) (.cse838 (xor+ (fb30 fna30) (fb30) (fna30))) (.cse49 (xor+ (fb30 fna30) (fna30) (fb30))) (.cse902 (not- .cse901)) (.cse835 (xor+ (fb29 fna29) (fb29) (fna29))) (.cse857 (not- .cse856)) (.cse831 (xor+ (fb28 fna28) (fb28) (fna28))) (.cse851 (not- .cse850)) (.cse822 (xor+ (fb27 fna27) (fb27) (fna27))) (.cse853 (not- .cse852)) (.cse813 (xor+ (fb26 fna26) (fb26) (fna26))) (.cse897 (not- .cse896)) (.cse804 (xor+ (fb25 fna25) (fb25) (fna25))) (.cse871 (not- .cse870)) (.cse795 (xor+ (fb24 fna24) (fb24) (fna24))) (.cse873 (not- .cse872)) (.cse786 (xor+ (fb23 fna23) (fb23) (fna23))) (.cse859 (not- .cse858)) (.cse777 (xor+ (fb22 fna22) (fb22) (fna22))) (.cse863 (not- .cse862)) (.cse768 (xor+ (fb21 fna21) (fb21) (fna21))) (.cse875 (not- .cse874)) (.cse759 (xor+ (fb20 fna20) (fb20) (fna20))) (.cse849 (not- .cse848)) (.cse750 (xor+ (fb19 fna19) (fb19) (fna19))) (.cse869 (not- .cse868)) (.cse741 (xor+ (fb18 fna18) (fb18) (fna18))) (.cse865 (not- .cse864)) (.cse732 (xor+ (fb17 fna17) (fb17) (fna17))) (.cse855 (not- .cse854)) (.cse723 (xor+ (fb16 fna16) (fb16) (fna16))) (.cse867 (not- .cse866)) (.cse716 (xor+ (fb15 fna15) (fb15) (fna15))) (.cse861 (not- .cse860))) (let ((.cse17 (or fb_less_min max_less_fb)) (.cse63 (xor fna31 nfa31)) (.cse51 (xor fna30 nfa30)) (.cse68 (xor carry30 .cse1)) (.cse54 (xor nfa30 .cse0)) (.cse66 (xor nfa31 .cse59))) (let-proof ((.cse847 (! (res fb_eq_fna (! (res b_eq_na (! (let ((.cse959 (xor b31 na31))) (let ((.cse1160 (= b31 na31)) (.cse992 (not .cse959))) (let ((.cse1065 (= .cse1160 .cse992))) (let-proof ((.cse1192 (not- .cse992)) (.cse993 (not+ .cse992))) (let-proof ((.cse1066 (res .cse1160 (res .cse959 (res b31 (res na31 (=+1 .cse1160) (xor+ (b31 na31) (b31) (na31))) (res na31 (xor+ (b31 na31) (na31) (b31)) (=+2 .cse1160))) (res .cse992 (=+1 .cse1065) .cse1192)) (res .cse959 (res .cse992 .cse993 (=+2 .cse1065)) (res b31 (res na31 (xor+ (b31) (na31) (b31 na31)) (=-1 .cse1160)) (res na31 (=-2 .cse1160) (xor- (b31) (na31) (b31 na31)))))))) (res .cse959 (let ((.cse960 (xor b30 na30))) (let ((.cse1159 (= b30 na30)) (.cse994 (not .cse960))) (let ((.cse1067 (= .cse1159 .cse994))) (let-proof ((.cse1191 (not- .cse994)) (.cse995 (not+ .cse994))) (let-proof ((.cse1068 (res .cse1159 (res .cse960 (res b30 (res na30 (=+1 .cse1159) (xor+ (b30 na30) (b30) (na30))) (res na30 (xor+ (b30 na30) (na30) (b30)) (=+2 .cse1159))) (res .cse994 (=+1 .cse1067) .cse1191)) (res .cse960 (res .cse994 .cse995 (=+2 .cse1067)) (res b30 (res na30 (xor+ (b30) (na30) (b30 na30)) (=-1 .cse1159)) (res na30 (=-2 .cse1159) (xor- (b30) (na30) (b30 na30)))))))) (res .cse960 (let ((.cse961 (xor b29 na29))) (let ((.cse1158 (= b29 na29)) (.cse996 (not .cse961))) (let ((.cse1069 (= .cse1158 .cse996))) (let-proof ((.cse1190 (not- .cse996)) (.cse997 (not+ .cse996))) (let-proof ((.cse1070 (res .cse1158 (res .cse961 (res b29 (res na29 (=+1 .cse1158) (xor+ (b29 na29) (b29) (na29))) (res na29 (xor+ (b29 na29) (na29) (b29)) (=+2 .cse1158))) (res .cse996 (=+1 .cse1069) .cse1190)) (res .cse961 (res .cse996 .cse997 (=+2 .cse1069)) (res b29 (res na29 (xor+ (b29) (na29) (b29 na29)) (=-1 .cse1158)) (res na29 (=-2 .cse1158) (xor- (b29) (na29) (b29 na29)))))))) (res .cse961 (let ((.cse962 (xor b28 na28))) (let ((.cse1157 (= b28 na28)) (.cse998 (not .cse962))) (let ((.cse1071 (= .cse1157 .cse998))) (let-proof ((.cse1189 (not- .cse998)) (.cse999 (not+ .cse998))) (let-proof ((.cse1072 (res .cse1157 (res .cse962 (res b28 (res na28 (=+1 .cse1157) (xor+ (b28 na28) (b28) (na28))) (res na28 (xor+ (b28 na28) (na28) (b28)) (=+2 .cse1157))) (res .cse998 (=+1 .cse1071) .cse1189)) (res .cse962 (res .cse998 .cse999 (=+2 .cse1071)) (res b28 (res na28 (xor+ (b28) (na28) (b28 na28)) (=-1 .cse1157)) (res na28 (=-2 .cse1157) (xor- (b28) (na28) (b28 na28)))))))) (res .cse962 (let ((.cse963 (xor b27 na27))) (let ((.cse1156 (= b27 na27)) (.cse1000 (not .cse963))) (let ((.cse1073 (= .cse1156 .cse1000))) (let-proof ((.cse1188 (not- .cse1000)) (.cse1001 (not+ .cse1000))) (let-proof ((.cse1074 (res .cse1156 (res .cse963 (res b27 (res na27 (=+1 .cse1156) (xor+ (b27 na27) (b27) (na27))) (res na27 (xor+ (b27 na27) (na27) (b27)) (=+2 .cse1156))) (res .cse1000 (=+1 .cse1073) .cse1188)) (res .cse963 (res .cse1000 .cse1001 (=+2 .cse1073)) (res b27 (res na27 (xor+ (b27) (na27) (b27 na27)) (=-1 .cse1156)) (res na27 (=-2 .cse1156) (xor- (b27) (na27) (b27 na27)))))))) (res .cse963 (let ((.cse964 (xor b26 na26))) (let ((.cse1155 (= b26 na26)) (.cse1002 (not .cse964))) (let ((.cse1075 (= .cse1155 .cse1002))) (let-proof ((.cse1187 (not- .cse1002)) (.cse1003 (not+ .cse1002))) (let-proof ((.cse1076 (res .cse1155 (res .cse964 (res b26 (res na26 (=+1 .cse1155) (xor+ (b26 na26) (b26) (na26))) (res na26 (xor+ (b26 na26) (na26) (b26)) (=+2 .cse1155))) (res .cse1002 (=+1 .cse1075) .cse1187)) (res .cse964 (res .cse1002 .cse1003 (=+2 .cse1075)) (res b26 (res na26 (xor+ (b26) (na26) (b26 na26)) (=-1 .cse1155)) (res na26 (=-2 .cse1155) (xor- (b26) (na26) (b26 na26)))))))) (res .cse964 (let ((.cse965 (xor b25 na25))) (let ((.cse1154 (= b25 na25)) (.cse1004 (not .cse965))) (let ((.cse1077 (= .cse1154 .cse1004))) (let-proof ((.cse1186 (not- .cse1004)) (.cse1005 (not+ .cse1004))) (let-proof ((.cse1078 (res .cse1154 (res .cse965 (res b25 (res na25 (=+1 .cse1154) (xor+ (b25 na25) (b25) (na25))) (res na25 (xor+ (b25 na25) (na25) (b25)) (=+2 .cse1154))) (res .cse1004 (=+1 .cse1077) .cse1186)) (res .cse965 (res .cse1004 .cse1005 (=+2 .cse1077)) (res b25 (res na25 (xor+ (b25) (na25) (b25 na25)) (=-1 .cse1154)) (res na25 (=-2 .cse1154) (xor- (b25) (na25) (b25 na25)))))))) (res .cse965 (let ((.cse966 (xor b24 na24))) (let ((.cse1153 (= b24 na24)) (.cse1006 (not .cse966))) (let ((.cse1079 (= .cse1153 .cse1006))) (let-proof ((.cse1185 (not- .cse1006)) (.cse1007 (not+ .cse1006))) (let-proof ((.cse1080 (res .cse1153 (res .cse966 (res b24 (res na24 (=+1 .cse1153) (xor+ (b24 na24) (b24) (na24))) (res na24 (xor+ (b24 na24) (na24) (b24)) (=+2 .cse1153))) (res .cse1006 (=+1 .cse1079) .cse1185)) (res .cse966 (res .cse1006 .cse1007 (=+2 .cse1079)) (res b24 (res na24 (xor+ (b24) (na24) (b24 na24)) (=-1 .cse1153)) (res na24 (=-2 .cse1153) (xor- (b24) (na24) (b24 na24)))))))) (res .cse966 (let ((.cse967 (xor b23 na23))) (let ((.cse1152 (= b23 na23)) (.cse1008 (not .cse967))) (let ((.cse1081 (= .cse1152 .cse1008))) (let-proof ((.cse1184 (not- .cse1008)) (.cse1009 (not+ .cse1008))) (let-proof ((.cse1082 (res .cse1152 (res .cse967 (res b23 (res na23 (=+1 .cse1152) (xor+ (b23 na23) (b23) (na23))) (res na23 (xor+ (b23 na23) (na23) (b23)) (=+2 .cse1152))) (res .cse1008 (=+1 .cse1081) .cse1184)) (res .cse967 (res .cse1008 .cse1009 (=+2 .cse1081)) (res b23 (res na23 (xor+ (b23) (na23) (b23 na23)) (=-1 .cse1152)) (res na23 (=-2 .cse1152) (xor- (b23) (na23) (b23 na23)))))))) (res .cse967 (let ((.cse968 (xor b22 na22))) (let ((.cse1151 (= b22 na22)) (.cse1010 (not .cse968))) (let ((.cse1083 (= .cse1151 .cse1010))) (let-proof ((.cse1183 (not- .cse1010)) (.cse1011 (not+ .cse1010))) (let-proof ((.cse1084 (res .cse1151 (res .cse968 (res b22 (res na22 (=+1 .cse1151) (xor+ (b22 na22) (b22) (na22))) (res na22 (xor+ (b22 na22) (na22) (b22)) (=+2 .cse1151))) (res .cse1010 (=+1 .cse1083) .cse1183)) (res .cse968 (res .cse1010 .cse1011 (=+2 .cse1083)) (res b22 (res na22 (xor+ (b22) (na22) (b22 na22)) (=-1 .cse1151)) (res na22 (=-2 .cse1151) (xor- (b22) (na22) (b22 na22)))))))) (res .cse968 (let ((.cse969 (xor b21 na21))) (let ((.cse1150 (= b21 na21)) (.cse1012 (not .cse969))) (let ((.cse1085 (= .cse1150 .cse1012))) (let-proof ((.cse1182 (not- .cse1012)) (.cse1013 (not+ .cse1012))) (let-proof ((.cse1086 (res .cse1150 (res .cse969 (res b21 (res na21 (=+1 .cse1150) (xor+ (b21 na21) (b21) (na21))) (res na21 (xor+ (b21 na21) (na21) (b21)) (=+2 .cse1150))) (res .cse1012 (=+1 .cse1085) .cse1182)) (res .cse969 (res .cse1012 .cse1013 (=+2 .cse1085)) (res b21 (res na21 (xor+ (b21) (na21) (b21 na21)) (=-1 .cse1150)) (res na21 (=-2 .cse1150) (xor- (b21) (na21) (b21 na21)))))))) (res .cse969 (let ((.cse970 (xor b20 na20))) (let ((.cse1149 (= b20 na20)) (.cse1014 (not .cse970))) (let ((.cse1087 (= .cse1149 .cse1014))) (let-proof ((.cse1181 (not- .cse1014)) (.cse1015 (not+ .cse1014))) (let-proof ((.cse1088 (res .cse1149 (res .cse970 (res b20 (res na20 (=+1 .cse1149) (xor+ (b20 na20) (b20) (na20))) (res na20 (xor+ (b20 na20) (na20) (b20)) (=+2 .cse1149))) (res .cse1014 (=+1 .cse1087) .cse1181)) (res .cse970 (res .cse1014 .cse1015 (=+2 .cse1087)) (res b20 (res na20 (xor+ (b20) (na20) (b20 na20)) (=-1 .cse1149)) (res na20 (=-2 .cse1149) (xor- (b20) (na20) (b20 na20)))))))) (res .cse970 (let ((.cse971 (xor b19 na19))) (let ((.cse1148 (= b19 na19)) (.cse1016 (not .cse971))) (let ((.cse1089 (= .cse1148 .cse1016))) (let-proof ((.cse1180 (not- .cse1016)) (.cse1017 (not+ .cse1016))) (let-proof ((.cse1090 (res .cse1148 (res .cse971 (res b19 (res na19 (=+1 .cse1148) (xor+ (b19 na19) (b19) (na19))) (res na19 (xor+ (b19 na19) (na19) (b19)) (=+2 .cse1148))) (res .cse1016 (=+1 .cse1089) .cse1180)) (res .cse971 (res .cse1016 .cse1017 (=+2 .cse1089)) (res b19 (res na19 (xor+ (b19) (na19) (b19 na19)) (=-1 .cse1148)) (res na19 (=-2 .cse1148) (xor- (b19) (na19) (b19 na19)))))))) (res .cse971 (let ((.cse972 (xor b18 na18))) (let ((.cse1147 (= b18 na18)) (.cse1018 (not .cse972))) (let ((.cse1091 (= .cse1147 .cse1018))) (let-proof ((.cse1179 (not- .cse1018)) (.cse1019 (not+ .cse1018))) (let-proof ((.cse1092 (res .cse1147 (res .cse972 (res b18 (res na18 (=+1 .cse1147) (xor+ (b18 na18) (b18) (na18))) (res na18 (xor+ (b18 na18) (na18) (b18)) (=+2 .cse1147))) (res .cse1018 (=+1 .cse1091) .cse1179)) (res .cse972 (res .cse1018 .cse1019 (=+2 .cse1091)) (res b18 (res na18 (xor+ (b18) (na18) (b18 na18)) (=-1 .cse1147)) (res na18 (=-2 .cse1147) (xor- (b18) (na18) (b18 na18)))))))) (res .cse972 (let ((.cse973 (xor b17 na17))) (let ((.cse1146 (= b17 na17)) (.cse1020 (not .cse973))) (let ((.cse1093 (= .cse1146 .cse1020))) (let-proof ((.cse1178 (not- .cse1020)) (.cse1021 (not+ .cse1020))) (let-proof ((.cse1094 (res .cse1146 (res .cse973 (res b17 (res na17 (=+1 .cse1146) (xor+ (b17 na17) (b17) (na17))) (res na17 (xor+ (b17 na17) (na17) (b17)) (=+2 .cse1146))) (res .cse1020 (=+1 .cse1093) .cse1178)) (res .cse973 (res .cse1020 .cse1021 (=+2 .cse1093)) (res b17 (res na17 (xor+ (b17) (na17) (b17 na17)) (=-1 .cse1146)) (res na17 (=-2 .cse1146) (xor- (b17) (na17) (b17 na17)))))))) (res .cse973 (let ((.cse974 (xor b16 na16))) (let ((.cse1145 (= b16 na16)) (.cse1022 (not .cse974))) (let ((.cse1095 (= .cse1145 .cse1022))) (let-proof ((.cse1177 (not- .cse1022)) (.cse1023 (not+ .cse1022))) (let-proof ((.cse1096 (res .cse1145 (res .cse974 (res b16 (res na16 (=+1 .cse1145) (xor+ (b16 na16) (b16) (na16))) (res na16 (xor+ (b16 na16) (na16) (b16)) (=+2 .cse1145))) (res .cse1022 (=+1 .cse1095) .cse1177)) (res .cse974 (res .cse1022 .cse1023 (=+2 .cse1095)) (res b16 (res na16 (xor+ (b16) (na16) (b16 na16)) (=-1 .cse1145)) (res na16 (=-2 .cse1145) (xor- (b16) (na16) (b16 na16)))))))) (res .cse974 (let ((.cse975 (xor b15 na15))) (let ((.cse1144 (= b15 na15)) (.cse1024 (not .cse975))) (let ((.cse1097 (= .cse1144 .cse1024))) (let-proof ((.cse1176 (not- .cse1024)) (.cse1025 (not+ .cse1024))) (let-proof ((.cse1098 (res .cse1144 (res .cse975 (res b15 (res na15 (=+1 .cse1144) (xor+ (b15 na15) (b15) (na15))) (res na15 (xor+ (b15 na15) (na15) (b15)) (=+2 .cse1144))) (res .cse1024 (=+1 .cse1097) .cse1176)) (res .cse975 (res .cse1024 .cse1025 (=+2 .cse1097)) (res b15 (res na15 (xor+ (b15) (na15) (b15 na15)) (=-1 .cse1144)) (res na15 (=-2 .cse1144) (xor- (b15) (na15) (b15 na15)))))))) (res .cse975 (let ((.cse976 (xor b14 na14))) (let ((.cse1143 (= b14 na14)) (.cse1026 (not .cse976))) (let ((.cse1099 (= .cse1143 .cse1026))) (let-proof ((.cse1175 (not- .cse1026)) (.cse1027 (not+ .cse1026))) (let-proof ((.cse1100 (res .cse1143 (res .cse976 (res b14 (res na14 (=+1 .cse1143) (xor+ (b14 na14) (b14) (na14))) (res na14 (xor+ (b14 na14) (na14) (b14)) (=+2 .cse1143))) (res .cse1026 (=+1 .cse1099) .cse1175)) (res .cse976 (res .cse1026 .cse1027 (=+2 .cse1099)) (res b14 (res na14 (xor+ (b14) (na14) (b14 na14)) (=-1 .cse1143)) (res na14 (=-2 .cse1143) (xor- (b14) (na14) (b14 na14)))))))) (res .cse976 (let ((.cse977 (xor b13 na13))) (let ((.cse1142 (= b13 na13)) (.cse1028 (not .cse977))) (let ((.cse1101 (= .cse1142 .cse1028))) (let-proof ((.cse1174 (not- .cse1028)) (.cse1029 (not+ .cse1028))) (let-proof ((.cse1102 (res .cse1142 (res .cse977 (res b13 (res na13 (=+1 .cse1142) (xor+ (b13 na13) (b13) (na13))) (res na13 (xor+ (b13 na13) (na13) (b13)) (=+2 .cse1142))) (res .cse1028 (=+1 .cse1101) .cse1174)) (res .cse977 (res .cse1028 .cse1029 (=+2 .cse1101)) (res b13 (res na13 (xor+ (b13) (na13) (b13 na13)) (=-1 .cse1142)) (res na13 (=-2 .cse1142) (xor- (b13) (na13) (b13 na13)))))))) (res .cse977 (let ((.cse978 (xor b12 na12))) (let ((.cse1141 (= b12 na12)) (.cse1030 (not .cse978))) (let ((.cse1103 (= .cse1141 .cse1030))) (let-proof ((.cse1173 (not- .cse1030)) (.cse1031 (not+ .cse1030))) (let-proof ((.cse1104 (res .cse1141 (res .cse978 (res b12 (res na12 (=+1 .cse1141) (xor+ (b12 na12) (b12) (na12))) (res na12 (xor+ (b12 na12) (na12) (b12)) (=+2 .cse1141))) (res .cse1030 (=+1 .cse1103) .cse1173)) (res .cse978 (res .cse1030 .cse1031 (=+2 .cse1103)) (res b12 (res na12 (xor+ (b12) (na12) (b12 na12)) (=-1 .cse1141)) (res na12 (=-2 .cse1141) (xor- (b12) (na12) (b12 na12)))))))) (res .cse978 (let ((.cse979 (xor b11 na11))) (let ((.cse1140 (= b11 na11)) (.cse1032 (not .cse979))) (let ((.cse1105 (= .cse1140 .cse1032))) (let-proof ((.cse1172 (not- .cse1032)) (.cse1033 (not+ .cse1032))) (let-proof ((.cse1106 (res .cse1140 (res .cse979 (res b11 (res na11 (=+1 .cse1140) (xor+ (b11 na11) (b11) (na11))) (res na11 (xor+ (b11 na11) (na11) (b11)) (=+2 .cse1140))) (res .cse1032 (=+1 .cse1105) .cse1172)) (res .cse979 (res .cse1032 .cse1033 (=+2 .cse1105)) (res b11 (res na11 (xor+ (b11) (na11) (b11 na11)) (=-1 .cse1140)) (res na11 (=-2 .cse1140) (xor- (b11) (na11) (b11 na11)))))))) (res .cse979 (let ((.cse980 (xor b10 na10))) (let ((.cse1139 (= b10 na10)) (.cse1034 (not .cse980))) (let ((.cse1107 (= .cse1139 .cse1034))) (let-proof ((.cse1171 (not- .cse1034)) (.cse1035 (not+ .cse1034))) (let-proof ((.cse1108 (res .cse1139 (res .cse980 (res b10 (res na10 (=+1 .cse1139) (xor+ (b10 na10) (b10) (na10))) (res na10 (xor+ (b10 na10) (na10) (b10)) (=+2 .cse1139))) (res .cse1034 (=+1 .cse1107) .cse1171)) (res .cse980 (res .cse1034 .cse1035 (=+2 .cse1107)) (res b10 (res na10 (xor+ (b10) (na10) (b10 na10)) (=-1 .cse1139)) (res na10 (=-2 .cse1139) (xor- (b10) (na10) (b10 na10)))))))) (res .cse980 (let ((.cse981 (xor b9 na9))) (let ((.cse1138 (= b9 na9)) (.cse1036 (not .cse981))) (let ((.cse1109 (= .cse1138 .cse1036))) (let-proof ((.cse1170 (not- .cse1036)) (.cse1037 (not+ .cse1036))) (let-proof ((.cse1110 (res .cse1138 (res .cse981 (res b9 (res na9 (=+1 .cse1138) (xor+ (b9 na9) (b9) (na9))) (res na9 (xor+ (b9 na9) (na9) (b9)) (=+2 .cse1138))) (res .cse1036 (=+1 .cse1109) .cse1170)) (res .cse981 (res .cse1036 .cse1037 (=+2 .cse1109)) (res b9 (res na9 (xor+ (b9) (na9) (b9 na9)) (=-1 .cse1138)) (res na9 (=-2 .cse1138) (xor- (b9) (na9) (b9 na9)))))))) (res .cse981 (let ((.cse982 (xor b8 na8))) (let ((.cse1137 (= b8 na8)) (.cse1038 (not .cse982))) (let ((.cse1111 (= .cse1137 .cse1038))) (let-proof ((.cse1169 (not- .cse1038)) (.cse1039 (not+ .cse1038))) (let-proof ((.cse1112 (res .cse1137 (res .cse982 (res b8 (res na8 (=+1 .cse1137) (xor+ (b8 na8) (b8) (na8))) (res na8 (xor+ (b8 na8) (na8) (b8)) (=+2 .cse1137))) (res .cse1038 (=+1 .cse1111) .cse1169)) (res .cse982 (res .cse1038 .cse1039 (=+2 .cse1111)) (res b8 (res na8 (xor+ (b8) (na8) (b8 na8)) (=-1 .cse1137)) (res na8 (=-2 .cse1137) (xor- (b8) (na8) (b8 na8)))))))) (res .cse982 (let ((.cse983 (xor b7 na7))) (let ((.cse1136 (= b7 na7)) (.cse1040 (not .cse983))) (let ((.cse1113 (= .cse1136 .cse1040))) (let-proof ((.cse1168 (not- .cse1040)) (.cse1041 (not+ .cse1040))) (let-proof ((.cse1114 (res .cse1136 (res .cse983 (res b7 (res na7 (=+1 .cse1136) (xor+ (b7 na7) (b7) (na7))) (res na7 (xor+ (b7 na7) (na7) (b7)) (=+2 .cse1136))) (res .cse1040 (=+1 .cse1113) .cse1168)) (res .cse983 (res .cse1040 .cse1041 (=+2 .cse1113)) (res b7 (res na7 (xor+ (b7) (na7) (b7 na7)) (=-1 .cse1136)) (res na7 (=-2 .cse1136) (xor- (b7) (na7) (b7 na7)))))))) (res .cse983 (let ((.cse984 (xor b6 na6))) (let ((.cse1135 (= b6 na6)) (.cse1042 (not .cse984))) (let ((.cse1115 (= .cse1135 .cse1042))) (let-proof ((.cse1167 (not- .cse1042)) (.cse1043 (not+ .cse1042))) (let-proof ((.cse1116 (res .cse1135 (res .cse984 (res b6 (res na6 (=+1 .cse1135) (xor+ (b6 na6) (b6) (na6))) (res na6 (xor+ (b6 na6) (na6) (b6)) (=+2 .cse1135))) (res .cse1042 (=+1 .cse1115) .cse1167)) (res .cse984 (res .cse1042 .cse1043 (=+2 .cse1115)) (res b6 (res na6 (xor+ (b6) (na6) (b6 na6)) (=-1 .cse1135)) (res na6 (=-2 .cse1135) (xor- (b6) (na6) (b6 na6)))))))) (res .cse984 (let ((.cse985 (xor b5 na5))) (let ((.cse1134 (= b5 na5)) (.cse1044 (not .cse985))) (let ((.cse1117 (= .cse1134 .cse1044))) (let-proof ((.cse1166 (not- .cse1044)) (.cse1045 (not+ .cse1044))) (let-proof ((.cse1118 (res .cse1134 (res .cse985 (res b5 (res na5 (=+1 .cse1134) (xor+ (b5 na5) (b5) (na5))) (res na5 (xor+ (b5 na5) (na5) (b5)) (=+2 .cse1134))) (res .cse1044 (=+1 .cse1117) .cse1166)) (res .cse985 (res .cse1044 .cse1045 (=+2 .cse1117)) (res b5 (res na5 (xor+ (b5) (na5) (b5 na5)) (=-1 .cse1134)) (res na5 (=-2 .cse1134) (xor- (b5) (na5) (b5 na5)))))))) (res .cse985 (let ((.cse986 (xor b4 na4))) (let ((.cse1133 (= b4 na4)) (.cse1046 (not .cse986))) (let ((.cse1119 (= .cse1133 .cse1046))) (let-proof ((.cse1165 (not- .cse1046)) (.cse1047 (not+ .cse1046))) (let-proof ((.cse1120 (res .cse1133 (res .cse986 (res b4 (res na4 (=+1 .cse1133) (xor+ (b4 na4) (b4) (na4))) (res na4 (xor+ (b4 na4) (na4) (b4)) (=+2 .cse1133))) (res .cse1046 (=+1 .cse1119) .cse1165)) (res .cse986 (res .cse1046 .cse1047 (=+2 .cse1119)) (res b4 (res na4 (xor+ (b4) (na4) (b4 na4)) (=-1 .cse1133)) (res na4 (=-2 .cse1133) (xor- (b4) (na4) (b4 na4)))))))) (res .cse986 (let ((.cse987 (xor b3 na3))) (let ((.cse1132 (= b3 na3)) (.cse1048 (not .cse987))) (let ((.cse1121 (= .cse1132 .cse1048))) (let-proof ((.cse1164 (not- .cse1048)) (.cse1049 (not+ .cse1048))) (let-proof ((.cse1122 (res .cse1132 (res .cse987 (res b3 (res na3 (=+1 .cse1132) (xor+ (b3 na3) (b3) (na3))) (res na3 (xor+ (b3 na3) (na3) (b3)) (=+2 .cse1132))) (res .cse1048 (=+1 .cse1121) .cse1164)) (res .cse987 (res .cse1048 .cse1049 (=+2 .cse1121)) (res b3 (res na3 (xor+ (b3) (na3) (b3 na3)) (=-1 .cse1132)) (res na3 (=-2 .cse1132) (xor- (b3) (na3) (b3 na3)))))))) (res .cse987 (let ((.cse988 (xor b2 na2))) (let ((.cse1131 (= b2 na2)) (.cse1050 (not .cse988))) (let ((.cse1123 (= .cse1131 .cse1050))) (let-proof ((.cse1163 (not- .cse1050)) (.cse1051 (not+ .cse1050))) (let-proof ((.cse1124 (res .cse1131 (res .cse988 (res b2 (res na2 (=+1 .cse1131) (xor+ (b2 na2) (b2) (na2))) (res na2 (xor+ (b2 na2) (na2) (b2)) (=+2 .cse1131))) (res .cse1050 (=+1 .cse1123) .cse1163)) (res .cse988 (res .cse1050 .cse1051 (=+2 .cse1123)) (res b2 (res na2 (xor+ (b2) (na2) (b2 na2)) (=-1 .cse1131)) (res na2 (=-2 .cse1131) (xor- (b2) (na2) (b2 na2)))))))) (res .cse988 (let ((.cse989 (xor b0 na0))) (let ((.cse1129 (= b0 na0)) (.cse1054 (not .cse989))) (let ((.cse1127 (= .cse1129 .cse1054))) (let-proof ((.cse1162 (not- .cse1054)) (.cse1055 (not+ .cse1054))) (let-proof ((.cse1128 (res .cse1129 (res .cse989 (res b0 (res na0 (=+1 .cse1129) (xor+ (b0 na0) (b0) (na0))) (res na0 (xor+ (b0 na0) (na0) (b0)) (=+2 .cse1129))) (res .cse1054 (=+1 .cse1127) .cse1162)) (res .cse989 (res .cse1054 .cse1055 (=+2 .cse1127)) (res b0 (res na0 (xor+ (b0) (na0) (b0 na0)) (=-1 .cse1129)) (res na0 (=-2 .cse1129) (xor- (b0) (na0) (b0 na0)))))))) (res .cse989 (let ((.cse990 (xor b1 na1))) (let ((.cse1130 (= b1 na1)) (.cse1052 (not .cse990))) (let ((.cse1125 (= .cse1130 .cse1052))) (let-proof ((.cse1161 (not- .cse1052)) (.cse1053 (not+ .cse1052))) (let-proof ((.cse1126 (res .cse1130 (res .cse990 (res b1 (res na1 (=+1 .cse1130) (xor+ (b1 na1) (b1) (na1))) (res na1 (xor+ (b1 na1) (na1) (b1)) (=+2 .cse1130))) (res .cse1052 (=+1 .cse1125) .cse1161)) (res .cse990 (res .cse1052 .cse1053 (=+2 .cse1125)) (res b1 (res na1 (xor+ (b1) (na1) (b1 na1)) (=-1 .cse1130)) (res na1 (=-2 .cse1130) (xor- (b1) (na1) (b1 na1)))))))) (res .cse990 (! (let ((.cse991 (and .cse1054 .cse1052 .cse1050 .cse1048 .cse1046 .cse1044 .cse1042 .cse1040 .cse1038 .cse1036 .cse1034 .cse1032 .cse1030 .cse1028 .cse1026 .cse1024 .cse1022 .cse1020 .cse1018 .cse1016 .cse1014 .cse1012 .cse1010 .cse1008 .cse1006 .cse1004 .cse1002 .cse1000 .cse998 .cse996 .cse994 .cse992))) (res .cse991 (res .cse992 .cse993 (res .cse994 .cse995 (res .cse996 .cse997 (res .cse998 .cse999 (res .cse1000 .cse1001 (res .cse1002 .cse1003 (res .cse1004 .cse1005 (res .cse1006 .cse1007 (res .cse1008 .cse1009 (res .cse1010 .cse1011 (res .cse1012 .cse1013 (res .cse1014 .cse1015 (res .cse1016 .cse1017 (res .cse1018 .cse1019 (res .cse1020 .cse1021 (res .cse1022 .cse1023 (res .cse1024 .cse1025 (res .cse1026 .cse1027 (res .cse1028 .cse1029 (res .cse1030 .cse1031 (res .cse1032 .cse1033 (res .cse1034 .cse1035 (res .cse1036 .cse1037 (res .cse1038 .cse1039 (res .cse1040 .cse1041 (res .cse1042 .cse1043 (res .cse1044 .cse1045 (res .cse1046 .cse1047 (res .cse1048 .cse1049 (res .cse1050 .cse1051 (res .cse1052 .cse1053 (res .cse1054 .cse1055 (and+ .cse991))))))))))))))))))))))))))))))))) (let ((.cse1056 (xor b_eq_na .cse991))) (let-proof ((.cse1057 (xor+ (b_eq_na .cse991) (b_eq_na) (.cse991)))) (res .cse1056 .cse1057 (let ((.cse1064 (and .cse1129 .cse1130 .cse1131 .cse1132 .cse1133 .cse1134 .cse1135 .cse1136 .cse1137 .cse1138 .cse1139 .cse1140 .cse1141 .cse1142 .cse1143 .cse1144 .cse1145 .cse1146 .cse1147 .cse1148 .cse1149 .cse1150 .cse1151 .cse1152 .cse1153 .cse1154 .cse1155 .cse1156 .cse1157 .cse1158 .cse1159 .cse1160))) (let ((.cse1058 (= b_eq_na .cse1064))) (res .cse1058 (assume .cse1058) (let ((.cse1059 (not .cse1056))) (let-proof ((.cse1063 (not- .cse1059))) (res .cse1059 (let ((.cse1060 (= .cse1058 .cse1059))) (res .cse1060 (let ((.cse1062 (= b_eq_na .cse991))) (let ((.cse1061 (= .cse1062 .cse1059))) (res .cse1061 (res .cse1062 (res .cse1056 (res b_eq_na (res .cse991 (=+1 .cse1062) .cse1057) (res .cse991 (xor+ (b_eq_na .cse991) (.cse991) (b_eq_na)) (=+2 .cse1062))) (res .cse1059 (=+1 .cse1061) .cse1063)) (res .cse1056 (res .cse1059 (not+ .cse1059) (=+2 .cse1061)) (res b_eq_na (res .cse991 (xor+ (b_eq_na) (.cse991) (b_eq_na .cse991)) (=-1 .cse1062)) (res .cse991 (=-2 .cse1062) (xor- (b_eq_na) (.cse991) (b_eq_na .cse991)))))) (res (= .cse1058 .cse1062) (res (= .cse1064 .cse991) (res .cse1065 .cse1066 (res .cse1067 .cse1068 (res .cse1069 .cse1070 (res .cse1071 .cse1072 (res .cse1073 .cse1074 (res .cse1075 .cse1076 (res .cse1077 .cse1078 (res .cse1079 .cse1080 (res .cse1081 .cse1082 (res .cse1083 .cse1084 (res .cse1085 .cse1086 (res .cse1087 .cse1088 (res .cse1089 .cse1090 (res .cse1091 .cse1092 (res .cse1093 .cse1094 (res .cse1095 .cse1096 (res .cse1097 .cse1098 (res .cse1099 .cse1100 (res .cse1101 .cse1102 (res .cse1103 .cse1104 (res .cse1105 .cse1106 (res .cse1107 .cse1108 (res .cse1109 .cse1110 (res .cse1111 .cse1112 (res .cse1113 .cse1114 (res .cse1115 .cse1116 (res .cse1117 .cse1118 (res .cse1119 .cse1120 (res .cse1121 .cse1122 (res .cse1123 .cse1124 (res .cse1125 .cse1126 (res .cse1127 .cse1128 (cong (and .cse1129 .cse1130 .cse1131 .cse1132 .cse1133 .cse1134 .cse1135 .cse1136 .cse1137 .cse1138 .cse1139 .cse1140 .cse1141 .cse1142 .cse1143 .cse1144 .cse1145 .cse1146 .cse1147 .cse1148 .cse1149 .cse1150 .cse1151 .cse1152 .cse1153 .cse1154 .cse1155 .cse1156 .cse1157 .cse1158 .cse1159 .cse1160) (and .cse1054 .cse1052 .cse1050 .cse1048 .cse1046 .cse1044 .cse1042 .cse1040 .cse1038 .cse1036 .cse1034 .cse1032 .cse1030 .cse1028 .cse1026 .cse1024 .cse1022 .cse1020 .cse1018 .cse1016 .cse1014 .cse1012 .cse1010 .cse1008 .cse1006 .cse1004 .cse1002 .cse1000 .cse998 .cse996 .cse994 .cse992)))))))))))))))))))))))))))))))))) (res (= b_eq_na b_eq_na) (refl b_eq_na) (cong (= b_eq_na .cse1064) (= b_eq_na .cse991)))) (trans .cse1058 .cse1062 .cse1059))))) (=-2 .cse1060))) .cse1063))))))))))) :proves (+ b_eq_na + .cse990 + .cse989 + .cse988 + .cse987 + .cse986 + .cse985 + .cse984 + .cse983 + .cse982 + .cse981 + .cse980 + .cse979 + .cse978 + .cse977 + .cse976 + .cse975 + .cse974 + .cse973 + .cse972 + .cse971 + .cse970 + .cse969 + .cse968 + .cse967 + .cse966 + .cse965 + .cse964 + .cse963 + .cse962 + .cse961 + .cse960 + .cse959) :input) (! (res .cse1130 (assume .cse1130) (res .cse1052 (res .cse1125 .cse1126 (=-2 .cse1125)) .cse1161)) :proves (- .cse990) :input))))))) (! (res .cse1129 (assume .cse1129) (res .cse1054 (res .cse1127 .cse1128 (=-2 .cse1127)) .cse1162)) :proves (- .cse989) :input))))))) (! (res .cse1131 (assume .cse1131) (res .cse1050 (res .cse1123 .cse1124 (=-2 .cse1123)) .cse1163)) :proves (- .cse988) :input))))))) (! (res .cse1132 (assume .cse1132) (res .cse1048 (res .cse1121 .cse1122 (=-2 .cse1121)) .cse1164)) :proves (- .cse987) :input))))))) (! (res .cse1133 (assume .cse1133) (res .cse1046 (res .cse1119 .cse1120 (=-2 .cse1119)) .cse1165)) :proves (- .cse986) :input))))))) (! (res .cse1134 (assume .cse1134) (res .cse1044 (res .cse1117 .cse1118 (=-2 .cse1117)) .cse1166)) :proves (- .cse985) :input))))))) (! (res .cse1135 (assume .cse1135) (res .cse1042 (res .cse1115 .cse1116 (=-2 .cse1115)) .cse1167)) :proves (- .cse984) :input))))))) (! (res .cse1136 (assume .cse1136) (res .cse1040 (res .cse1113 .cse1114 (=-2 .cse1113)) .cse1168)) :proves (- .cse983) :input))))))) (! (res .cse1137 (assume .cse1137) (res .cse1038 (res .cse1111 .cse1112 (=-2 .cse1111)) .cse1169)) :proves (- .cse982) :input))))))) (! (res .cse1138 (assume .cse1138) (res .cse1036 (res .cse1109 .cse1110 (=-2 .cse1109)) .cse1170)) :proves (- .cse981) :input))))))) (! (res .cse1139 (assume .cse1139) (res .cse1034 (res .cse1107 .cse1108 (=-2 .cse1107)) .cse1171)) :proves (- .cse980) :input))))))) (! (res .cse1140 (assume .cse1140) (res .cse1032 (res .cse1105 .cse1106 (=-2 .cse1105)) .cse1172)) :proves (- .cse979) :input))))))) (! (res .cse1141 (assume .cse1141) (res .cse1030 (res .cse1103 .cse1104 (=-2 .cse1103)) .cse1173)) :proves (- .cse978) :input))))))) (! (res .cse1142 (assume .cse1142) (res .cse1028 (res .cse1101 .cse1102 (=-2 .cse1101)) .cse1174)) :proves (- .cse977) :input))))))) (! (res .cse1143 (assume .cse1143) (res .cse1026 (res .cse1099 .cse1100 (=-2 .cse1099)) .cse1175)) :proves (- .cse976) :input))))))) (! (res .cse1144 (assume .cse1144) (res .cse1024 (res .cse1097 .cse1098 (=-2 .cse1097)) .cse1176)) :proves (- .cse975) :input))))))) (! (res .cse1145 (assume .cse1145) (res .cse1022 (res .cse1095 .cse1096 (=-2 .cse1095)) .cse1177)) :proves (- .cse974) :input))))))) (! (res .cse1146 (assume .cse1146) (res .cse1020 (res .cse1093 .cse1094 (=-2 .cse1093)) .cse1178)) :proves (- .cse973) :input))))))) (! (res .cse1147 (assume .cse1147) (res .cse1018 (res .cse1091 .cse1092 (=-2 .cse1091)) .cse1179)) :proves (- .cse972) :input))))))) (! (res .cse1148 (assume .cse1148) (res .cse1016 (res .cse1089 .cse1090 (=-2 .cse1089)) .cse1180)) :proves (- .cse971) :input))))))) (! (res .cse1149 (assume .cse1149) (res .cse1014 (res .cse1087 .cse1088 (=-2 .cse1087)) .cse1181)) :proves (- .cse970) :input))))))) (! (res .cse1150 (assume .cse1150) (res .cse1012 (res .cse1085 .cse1086 (=-2 .cse1085)) .cse1182)) :proves (- .cse969) :input))))))) (! (res .cse1151 (assume .cse1151) (res .cse1010 (res .cse1083 .cse1084 (=-2 .cse1083)) .cse1183)) :proves (- .cse968) :input))))))) (! (res .cse1152 (assume .cse1152) (res .cse1008 (res .cse1081 .cse1082 (=-2 .cse1081)) .cse1184)) :proves (- .cse967) :input))))))) (! (res .cse1153 (assume .cse1153) (res .cse1006 (res .cse1079 .cse1080 (=-2 .cse1079)) .cse1185)) :proves (- .cse966) :input))))))) (! (res .cse1154 (assume .cse1154) (res .cse1004 (res .cse1077 .cse1078 (=-2 .cse1077)) .cse1186)) :proves (- .cse965) :input))))))) (! (res .cse1155 (assume .cse1155) (res .cse1002 (res .cse1075 .cse1076 (=-2 .cse1075)) .cse1187)) :proves (- .cse964) :input))))))) (! (res .cse1156 (assume .cse1156) (res .cse1000 (res .cse1073 .cse1074 (=-2 .cse1073)) .cse1188)) :proves (- .cse963) :input))))))) (! (res .cse1157 (assume .cse1157) (res .cse998 (res .cse1071 .cse1072 (=-2 .cse1071)) .cse1189)) :proves (- .cse962) :input))))))) (! (res .cse1158 (assume .cse1158) (res .cse996 (res .cse1069 .cse1070 (=-2 .cse1069)) .cse1190)) :proves (- .cse961) :input))))))) (! (res .cse1159 (assume .cse1159) (res .cse994 (res .cse1067 .cse1068 (=-2 .cse1067)) .cse1191)) :proves (- .cse960) :input))))))) (! (res .cse1160 (assume .cse1160) (res .cse992 (res .cse1065 .cse1066 (=-2 .cse1065)) .cse1192)) :proves (- .cse959) :input))))))) :proves (+ b_eq_na) :rup) (! (let ((.cse1194 (not b_eq_na))) (let ((.cse1193 (or fb_eq_fna .cse1194))) (res .cse1193 (assume .cse1193) (res .cse1194 (or- .cse1193) (not- .cse1194))))) :proves (+ fb_eq_fna - b_eq_na) :input)) :proves (+ fb_eq_fna) :rup) (! (let ((.cse1195 (xor fb_eq_fna .cse846))) (let-proof ((.cse1196 (xor+ (fb_eq_fna .cse846) (.cse846) (fb_eq_fna)))) (res .cse1195 .cse1196 (let ((.cse1295 (= fb0 fna0)) (.cse1291 (= fb1 fna1)) (.cse1287 (= fb2 fna2)) (.cse1283 (= fb3 fna3)) (.cse1279 (= fb4 fna4)) (.cse1275 (= fb5 fna5)) (.cse1271 (= fb6 fna6)) (.cse1267 (= fb7 fna7)) (.cse1263 (= fb8 fna8)) (.cse1259 (= fb9 fna9)) (.cse1255 (= fb10 fna10)) (.cse1251 (= fb11 fna11)) (.cse1247 (= fb12 fna12)) (.cse1243 (= fb13 fna13)) (.cse1239 (= fb14 fna14)) (.cse1237 (= fb15 fna15)) (.cse1235 (= fb16 fna16)) (.cse1233 (= fb17 fna17)) (.cse1231 (= fb18 fna18)) (.cse1229 (= fb19 fna19)) (.cse1227 (= fb20 fna20)) (.cse1225 (= fb21 fna21)) (.cse1223 (= fb22 fna22)) (.cse1221 (= fb23 fna23)) (.cse1219 (= fb24 fna24)) (.cse1217 (= fb25 fna25)) (.cse1215 (= fb26 fna26)) (.cse1213 (= fb27 fna27)) (.cse1211 (= fb28 fna28)) (.cse1209 (= fb29 fna29)) (.cse1207 (= fb30 fna30)) (.cse1205 (= fb31 fna31))) (let ((.cse1203 (and .cse1295 .cse1291 .cse1287 .cse1283 .cse1279 .cse1275 .cse1271 .cse1267 .cse1263 .cse1259 .cse1255 .cse1251 .cse1247 .cse1243 .cse1239 .cse1237 .cse1235 .cse1233 .cse1231 .cse1229 .cse1227 .cse1225 .cse1223 .cse1221 .cse1219 .cse1217 .cse1215 .cse1213 .cse1211 .cse1209 .cse1207 .cse1205))) (let ((.cse1197 (= fb_eq_fna .cse1203))) (res .cse1197 (assume .cse1197) (let ((.cse1198 (not .cse1195))) (let-proof ((.cse1202 (not- .cse1198))) (res .cse1198 (let ((.cse1199 (= .cse1197 .cse1198))) (res .cse1199 (let ((.cse1201 (= fb_eq_fna .cse846))) (let ((.cse1200 (= .cse1201 .cse1198))) (res .cse1200 (res .cse1201 (res .cse1195 (res fb_eq_fna (res .cse846 (=+1 .cse1201) (xor+ (fb_eq_fna .cse846) (fb_eq_fna) (.cse846))) (res .cse846 .cse1196 (=+2 .cse1201))) (res .cse1198 (=+1 .cse1200) .cse1202)) (res .cse1195 (res .cse1198 (not+ .cse1198) (=+2 .cse1200)) (res fb_eq_fna (res .cse846 (xor+ (fb_eq_fna) (.cse846) (fb_eq_fna .cse846)) (=-1 .cse1201)) (res .cse846 (=-2 .cse1201) (xor- (fb_eq_fna) (.cse846) (fb_eq_fna .cse846)))))) (res (= .cse1197 .cse1201) (res (= .cse1203 .cse846) (let ((.cse1204 (= .cse1205 .cse903))) (res .cse1204 (res .cse1205 (res .cse60 (res fb31 (res fna31 (=+1 .cse1205) .cse845) (res fna31 .cse61 (=+2 .cse1205))) (res .cse903 (=+1 .cse1204) .cse904)) (res .cse60 (res .cse903 (not+ .cse903) (=+2 .cse1204)) (res fb31 (res fna31 (xor+ (fb31) (fna31) (fb31 fna31)) (=-1 .cse1205)) (res fna31 (=-2 .cse1205) (xor- (fb31) (fna31) (fb31 fna31)))))) (let ((.cse1206 (= .cse1207 .cse901))) (res .cse1206 (res .cse1207 (res .cse3 (res fb30 (res fna30 (=+1 .cse1207) .cse838) (res fna30 .cse49 (=+2 .cse1207))) (res .cse901 (=+1 .cse1206) .cse902)) (res .cse3 (res .cse901 (not+ .cse901) (=+2 .cse1206)) (res fb30 (res fna30 (xor+ (fb30) (fna30) (fb30 fna30)) (=-1 .cse1207)) (res fna30 (=-2 .cse1207) (xor- (fb30) (fna30) (fb30 fna30)))))) (let ((.cse1208 (= .cse1209 .cse856))) (res .cse1208 (res .cse1209 (res .cse126 (res fb29 (res fna29 (=+1 .cse1209) .cse835) (res fna29 (xor+ (fb29 fna29) (fna29) (fb29)) (=+2 .cse1209))) (res .cse856 (=+1 .cse1208) .cse857)) (res .cse126 (res .cse856 (not+ .cse856) (=+2 .cse1208)) (res fb29 (res fna29 (xor+ (fb29) (fna29) (fb29 fna29)) (=-1 .cse1209)) (res fna29 (=-2 .cse1209) (xor- (fb29) (fna29) (fb29 fna29)))))) (let ((.cse1210 (= .cse1211 .cse850))) (res .cse1210 (res .cse1211 (res .cse133 (res fb28 (res fna28 (=+1 .cse1211) .cse831) (res fna28 (xor+ (fb28 fna28) (fna28) (fb28)) (=+2 .cse1211))) (res .cse850 (=+1 .cse1210) .cse851)) (res .cse133 (res .cse850 (not+ .cse850) (=+2 .cse1210)) (res fb28 (res fna28 (xor+ (fb28) (fna28) (fb28 fna28)) (=-1 .cse1211)) (res fna28 (=-2 .cse1211) (xor- (fb28) (fna28) (fb28 fna28)))))) (let ((.cse1212 (= .cse1213 .cse852))) (res .cse1212 (res .cse1213 (res .cse132 (res fb27 (res fna27 (=+1 .cse1213) .cse822) (res fna27 (xor+ (fb27 fna27) (fna27) (fb27)) (=+2 .cse1213))) (res .cse852 (=+1 .cse1212) .cse853)) (res .cse132 (res .cse852 (not+ .cse852) (=+2 .cse1212)) (res fb27 (res fna27 (xor+ (fb27) (fna27) (fb27 fna27)) (=-1 .cse1213)) (res fna27 (=-2 .cse1213) (xor- (fb27) (fna27) (fb27 fna27)))))) (let ((.cse1214 (= .cse1215 .cse896))) (res .cse1214 (res .cse1215 (res .cse71 (res fb26 (res fna26 (=+1 .cse1215) .cse813) (res fna26 (xor+ (fb26 fna26) (fna26) (fb26)) (=+2 .cse1215))) (res .cse896 (=+1 .cse1214) .cse897)) (res .cse71 (res .cse896 (not+ .cse896) (=+2 .cse1214)) (res fb26 (res fna26 (xor+ (fb26) (fna26) (fb26 fna26)) (=-1 .cse1215)) (res fna26 (=-2 .cse1215) (xor- (fb26) (fna26) (fb26 fna26)))))) (let ((.cse1216 (= .cse1217 .cse870))) (res .cse1216 (res .cse1217 (res .cse91 (res fb25 (res fna25 (=+1 .cse1217) .cse804) (res fna25 (xor+ (fb25 fna25) (fna25) (fb25)) (=+2 .cse1217))) (res .cse870 (=+1 .cse1216) .cse871)) (res .cse91 (res .cse870 (not+ .cse870) (=+2 .cse1216)) (res fb25 (res fna25 (xor+ (fb25) (fna25) (fb25 fna25)) (=-1 .cse1217)) (res fna25 (=-2 .cse1217) (xor- (fb25) (fna25) (fb25 fna25)))))) (let ((.cse1218 (= .cse1219 .cse872))) (res .cse1218 (res .cse1219 (res .cse90 (res fb24 (res fna24 (=+1 .cse1219) .cse795) (res fna24 (xor+ (fb24 fna24) (fna24) (fb24)) (=+2 .cse1219))) (res .cse872 (=+1 .cse1218) .cse873)) (res .cse90 (res .cse872 (not+ .cse872) (=+2 .cse1218)) (res fb24 (res fna24 (xor+ (fb24) (fna24) (fb24 fna24)) (=-1 .cse1219)) (res fna24 (=-2 .cse1219) (xor- (fb24) (fna24) (fb24 fna24)))))) (let ((.cse1220 (= .cse1221 .cse858))) (res .cse1220 (res .cse1221 (res .cse125 (res fb23 (res fna23 (=+1 .cse1221) .cse786) (res fna23 (xor+ (fb23 fna23) (fna23) (fb23)) (=+2 .cse1221))) (res .cse858 (=+1 .cse1220) .cse859)) (res .cse125 (res .cse858 (not+ .cse858) (=+2 .cse1220)) (res fb23 (res fna23 (xor+ (fb23) (fna23) (fb23 fna23)) (=-1 .cse1221)) (res fna23 (=-2 .cse1221) (xor- (fb23) (fna23) (fb23 fna23)))))) (let ((.cse1222 (= .cse1223 .cse862))) (res .cse1222 (res .cse1223 (res .cse119 (res fb22 (res fna22 (=+1 .cse1223) .cse777) (res fna22 (xor+ (fb22 fna22) (fna22) (fb22)) (=+2 .cse1223))) (res .cse862 (=+1 .cse1222) .cse863)) (res .cse119 (res .cse862 (not+ .cse862) (=+2 .cse1222)) (res fb22 (res fna22 (xor+ (fb22) (fna22) (fb22 fna22)) (=-1 .cse1223)) (res fna22 (=-2 .cse1223) (xor- (fb22) (fna22) (fb22 fna22)))))) (let ((.cse1224 (= .cse1225 .cse874))) (res .cse1224 (res .cse1225 (res .cse81 (res fb21 (res fna21 (=+1 .cse1225) .cse768) (res fna21 (xor+ (fb21 fna21) (fna21) (fb21)) (=+2 .cse1225))) (res .cse874 (=+1 .cse1224) .cse875)) (res .cse81 (res .cse874 (not+ .cse874) (=+2 .cse1224)) (res fb21 (res fna21 (xor+ (fb21) (fna21) (fb21 fna21)) (=-1 .cse1225)) (res fna21 (=-2 .cse1225) (xor- (fb21) (fna21) (fb21 fna21)))))) (let ((.cse1226 (= .cse1227 .cse848))) (res .cse1226 (res .cse1227 (res .cse138 (res fb20 (res fna20 (=+1 .cse1227) .cse759) (res fna20 (xor+ (fb20 fna20) (fna20) (fb20)) (=+2 .cse1227))) (res .cse848 (=+1 .cse1226) .cse849)) (res .cse138 (res .cse848 (not+ .cse848) (=+2 .cse1226)) (res fb20 (res fna20 (xor+ (fb20) (fna20) (fb20 fna20)) (=-1 .cse1227)) (res fna20 (=-2 .cse1227) (xor- (fb20) (fna20) (fb20 fna20)))))) (let ((.cse1228 (= .cse1229 .cse868))) (res .cse1228 (res .cse1229 (res .cse96 (res fb19 (res fna19 (=+1 .cse1229) .cse750) (res fna19 (xor+ (fb19 fna19) (fna19) (fb19)) (=+2 .cse1229))) (res .cse868 (=+1 .cse1228) .cse869)) (res .cse96 (res .cse868 (not+ .cse868) (=+2 .cse1228)) (res fb19 (res fna19 (xor+ (fb19) (fna19) (fb19 fna19)) (=-1 .cse1229)) (res fna19 (=-2 .cse1229) (xor- (fb19) (fna19) (fb19 fna19)))))) (let ((.cse1230 (= .cse1231 .cse864))) (res .cse1230 (res .cse1231 (res .cse110 (res fb18 (res fna18 (=+1 .cse1231) .cse741) (res fna18 (xor+ (fb18 fna18) (fna18) (fb18)) (=+2 .cse1231))) (res .cse864 (=+1 .cse1230) .cse865)) (res .cse110 (res .cse864 (not+ .cse864) (=+2 .cse1230)) (res fb18 (res fna18 (xor+ (fb18) (fna18) (fb18 fna18)) (=-1 .cse1231)) (res fna18 (=-2 .cse1231) (xor- (fb18) (fna18) (fb18 fna18)))))) (let ((.cse1232 (= .cse1233 .cse854))) (res .cse1232 (res .cse1233 (res .cse127 (res fb17 (res fna17 (=+1 .cse1233) .cse732) (res fna17 (xor+ (fb17 fna17) (fna17) (fb17)) (=+2 .cse1233))) (res .cse854 (=+1 .cse1232) .cse855)) (res .cse127 (res .cse854 (not+ .cse854) (=+2 .cse1232)) (res fb17 (res fna17 (xor+ (fb17) (fna17) (fb17 fna17)) (=-1 .cse1233)) (res fna17 (=-2 .cse1233) (xor- (fb17) (fna17) (fb17 fna17)))))) (let ((.cse1234 (= .cse1235 .cse866))) (res .cse1234 (res .cse1235 (res .cse101 (res fb16 (res fna16 (=+1 .cse1235) .cse723) (res fna16 (xor+ (fb16 fna16) (fna16) (fb16)) (=+2 .cse1235))) (res .cse866 (=+1 .cse1234) .cse867)) (res .cse101 (res .cse866 (not+ .cse866) (=+2 .cse1234)) (res fb16 (res fna16 (xor+ (fb16) (fna16) (fb16 fna16)) (=-1 .cse1235)) (res fna16 (=-2 .cse1235) (xor- (fb16) (fna16) (fb16 fna16)))))) (let ((.cse1236 (= .cse1237 .cse860))) (res .cse1236 (res .cse1237 (res .cse124 (res fb15 (res fna15 (=+1 .cse1237) .cse716) (res fna15 (xor+ (fb15 fna15) (fna15) (fb15)) (=+2 .cse1237))) (res .cse860 (=+1 .cse1236) .cse861)) (res .cse124 (res .cse860 (not+ .cse860) (=+2 .cse1236)) (res fb15 (res fna15 (xor+ (fb15) (fna15) (fb15 fna15)) (=-1 .cse1237)) (res fna15 (=-2 .cse1237) (xor- (fb15) (fna15) (fb15 fna15)))))) (let ((.cse1238 (= .cse1239 .cse1241))) (res .cse1238 (res .cse1239 (res .cse1240 (res fb14 (res fna14 (=+1 .cse1239) (xor+ (fb14 fna14) (fb14) (fna14))) (res fna14 (xor+ (fb14 fna14) (fna14) (fb14)) (=+2 .cse1239))) (res .cse1241 (=+1 .cse1238) (not- .cse1241))) (res .cse1240 (res .cse1241 (not+ .cse1241) (=+2 .cse1238)) (res fb14 (res fna14 (xor+ (fb14) (fna14) (fb14 fna14)) (=-1 .cse1239)) (res fna14 (=-2 .cse1239) (xor- (fb14) (fna14) (fb14 fna14)))))) (let ((.cse1242 (= .cse1243 .cse1245))) (res .cse1242 (res .cse1243 (res .cse1244 (res fb13 (res fna13 (=+1 .cse1243) (xor+ (fb13 fna13) (fb13) (fna13))) (res fna13 (xor+ (fb13 fna13) (fna13) (fb13)) (=+2 .cse1243))) (res .cse1245 (=+1 .cse1242) (not- .cse1245))) (res .cse1244 (res .cse1245 (not+ .cse1245) (=+2 .cse1242)) (res fb13 (res fna13 (xor+ (fb13) (fna13) (fb13 fna13)) (=-1 .cse1243)) (res fna13 (=-2 .cse1243) (xor- (fb13) (fna13) (fb13 fna13)))))) (let ((.cse1246 (= .cse1247 .cse1249))) (res .cse1246 (res .cse1247 (res .cse1248 (res fb12 (res fna12 (=+1 .cse1247) (xor+ (fb12 fna12) (fb12) (fna12))) (res fna12 (xor+ (fb12 fna12) (fna12) (fb12)) (=+2 .cse1247))) (res .cse1249 (=+1 .cse1246) (not- .cse1249))) (res .cse1248 (res .cse1249 (not+ .cse1249) (=+2 .cse1246)) (res fb12 (res fna12 (xor+ (fb12) (fna12) (fb12 fna12)) (=-1 .cse1247)) (res fna12 (=-2 .cse1247) (xor- (fb12) (fna12) (fb12 fna12)))))) (let ((.cse1250 (= .cse1251 .cse1253))) (res .cse1250 (res .cse1251 (res .cse1252 (res fb11 (res fna11 (=+1 .cse1251) (xor+ (fb11 fna11) (fb11) (fna11))) (res fna11 (xor+ (fb11 fna11) (fna11) (fb11)) (=+2 .cse1251))) (res .cse1253 (=+1 .cse1250) (not- .cse1253))) (res .cse1252 (res .cse1253 (not+ .cse1253) (=+2 .cse1250)) (res fb11 (res fna11 (xor+ (fb11) (fna11) (fb11 fna11)) (=-1 .cse1251)) (res fna11 (=-2 .cse1251) (xor- (fb11) (fna11) (fb11 fna11)))))) (let ((.cse1254 (= .cse1255 .cse1257))) (res .cse1254 (res .cse1255 (res .cse1256 (res fb10 (res fna10 (=+1 .cse1255) (xor+ (fb10 fna10) (fb10) (fna10))) (res fna10 (xor+ (fb10 fna10) (fna10) (fb10)) (=+2 .cse1255))) (res .cse1257 (=+1 .cse1254) (not- .cse1257))) (res .cse1256 (res .cse1257 (not+ .cse1257) (=+2 .cse1254)) (res fb10 (res fna10 (xor+ (fb10) (fna10) (fb10 fna10)) (=-1 .cse1255)) (res fna10 (=-2 .cse1255) (xor- (fb10) (fna10) (fb10 fna10)))))) (let ((.cse1258 (= .cse1259 .cse1261))) (res .cse1258 (res .cse1259 (res .cse1260 (res fb9 (res fna9 (=+1 .cse1259) (xor+ (fb9 fna9) (fb9) (fna9))) (res fna9 (xor+ (fb9 fna9) (fna9) (fb9)) (=+2 .cse1259))) (res .cse1261 (=+1 .cse1258) (not- .cse1261))) (res .cse1260 (res .cse1261 (not+ .cse1261) (=+2 .cse1258)) (res fb9 (res fna9 (xor+ (fb9) (fna9) (fb9 fna9)) (=-1 .cse1259)) (res fna9 (=-2 .cse1259) (xor- (fb9) (fna9) (fb9 fna9)))))) (let ((.cse1262 (= .cse1263 .cse1265))) (res .cse1262 (res .cse1263 (res .cse1264 (res fb8 (res fna8 (=+1 .cse1263) (xor+ (fb8 fna8) (fb8) (fna8))) (res fna8 (xor+ (fb8 fna8) (fna8) (fb8)) (=+2 .cse1263))) (res .cse1265 (=+1 .cse1262) (not- .cse1265))) (res .cse1264 (res .cse1265 (not+ .cse1265) (=+2 .cse1262)) (res fb8 (res fna8 (xor+ (fb8) (fna8) (fb8 fna8)) (=-1 .cse1263)) (res fna8 (=-2 .cse1263) (xor- (fb8) (fna8) (fb8 fna8)))))) (let ((.cse1266 (= .cse1267 .cse1269))) (res .cse1266 (res .cse1267 (res .cse1268 (res fb7 (res fna7 (=+1 .cse1267) (xor+ (fb7 fna7) (fb7) (fna7))) (res fna7 (xor+ (fb7 fna7) (fna7) (fb7)) (=+2 .cse1267))) (res .cse1269 (=+1 .cse1266) (not- .cse1269))) (res .cse1268 (res .cse1269 (not+ .cse1269) (=+2 .cse1266)) (res fb7 (res fna7 (xor+ (fb7) (fna7) (fb7 fna7)) (=-1 .cse1267)) (res fna7 (=-2 .cse1267) (xor- (fb7) (fna7) (fb7 fna7)))))) (let ((.cse1270 (= .cse1271 .cse1273))) (res .cse1270 (res .cse1271 (res .cse1272 (res fb6 (res fna6 (=+1 .cse1271) (xor+ (fb6 fna6) (fb6) (fna6))) (res fna6 (xor+ (fb6 fna6) (fna6) (fb6)) (=+2 .cse1271))) (res .cse1273 (=+1 .cse1270) (not- .cse1273))) (res .cse1272 (res .cse1273 (not+ .cse1273) (=+2 .cse1270)) (res fb6 (res fna6 (xor+ (fb6) (fna6) (fb6 fna6)) (=-1 .cse1271)) (res fna6 (=-2 .cse1271) (xor- (fb6) (fna6) (fb6 fna6)))))) (let ((.cse1274 (= .cse1275 .cse1277))) (res .cse1274 (res .cse1275 (res .cse1276 (res fb5 (res fna5 (=+1 .cse1275) (xor+ (fb5 fna5) (fb5) (fna5))) (res fna5 (xor+ (fb5 fna5) (fna5) (fb5)) (=+2 .cse1275))) (res .cse1277 (=+1 .cse1274) (not- .cse1277))) (res .cse1276 (res .cse1277 (not+ .cse1277) (=+2 .cse1274)) (res fb5 (res fna5 (xor+ (fb5) (fna5) (fb5 fna5)) (=-1 .cse1275)) (res fna5 (=-2 .cse1275) (xor- (fb5) (fna5) (fb5 fna5)))))) (let ((.cse1278 (= .cse1279 .cse1281))) (res .cse1278 (res .cse1279 (res .cse1280 (res fb4 (res fna4 (=+1 .cse1279) (xor+ (fb4 fna4) (fb4) (fna4))) (res fna4 (xor+ (fb4 fna4) (fna4) (fb4)) (=+2 .cse1279))) (res .cse1281 (=+1 .cse1278) (not- .cse1281))) (res .cse1280 (res .cse1281 (not+ .cse1281) (=+2 .cse1278)) (res fb4 (res fna4 (xor+ (fb4) (fna4) (fb4 fna4)) (=-1 .cse1279)) (res fna4 (=-2 .cse1279) (xor- (fb4) (fna4) (fb4 fna4)))))) (let ((.cse1282 (= .cse1283 .cse1285))) (res .cse1282 (res .cse1283 (res .cse1284 (res fb3 (res fna3 (=+1 .cse1283) (xor+ (fb3 fna3) (fb3) (fna3))) (res fna3 (xor+ (fb3 fna3) (fna3) (fb3)) (=+2 .cse1283))) (res .cse1285 (=+1 .cse1282) (not- .cse1285))) (res .cse1284 (res .cse1285 (not+ .cse1285) (=+2 .cse1282)) (res fb3 (res fna3 (xor+ (fb3) (fna3) (fb3 fna3)) (=-1 .cse1283)) (res fna3 (=-2 .cse1283) (xor- (fb3) (fna3) (fb3 fna3)))))) (let ((.cse1286 (= .cse1287 .cse1289))) (res .cse1286 (res .cse1287 (res .cse1288 (res fb2 (res fna2 (=+1 .cse1287) (xor+ (fb2 fna2) (fb2) (fna2))) (res fna2 (xor+ (fb2 fna2) (fna2) (fb2)) (=+2 .cse1287))) (res .cse1289 (=+1 .cse1286) (not- .cse1289))) (res .cse1288 (res .cse1289 (not+ .cse1289) (=+2 .cse1286)) (res fb2 (res fna2 (xor+ (fb2) (fna2) (fb2 fna2)) (=-1 .cse1287)) (res fna2 (=-2 .cse1287) (xor- (fb2) (fna2) (fb2 fna2)))))) (let ((.cse1290 (= .cse1291 .cse1293))) (res .cse1290 (res .cse1291 (res .cse1292 (res fb1 (res fna1 (=+1 .cse1291) (xor+ (fb1 fna1) (fb1) (fna1))) (res fna1 (xor+ (fb1 fna1) (fna1) (fb1)) (=+2 .cse1291))) (res .cse1293 (=+1 .cse1290) (not- .cse1293))) (res .cse1292 (res .cse1293 (not+ .cse1293) (=+2 .cse1290)) (res fb1 (res fna1 (xor+ (fb1) (fna1) (fb1 fna1)) (=-1 .cse1291)) (res fna1 (=-2 .cse1291) (xor- (fb1) (fna1) (fb1 fna1)))))) (let ((.cse1294 (= .cse1295 .cse1297))) (res .cse1294 (res .cse1295 (res .cse1296 (res fb0 (res fna0 (=+1 .cse1295) (xor+ (fb0 fna0) (fb0) (fna0))) (res fna0 (xor+ (fb0 fna0) (fna0) (fb0)) (=+2 .cse1295))) (res .cse1297 (=+1 .cse1294) (not- .cse1297))) (res .cse1296 (res .cse1297 (not+ .cse1297) (=+2 .cse1294)) (res fb0 (res fna0 (xor+ (fb0) (fna0) (fb0 fna0)) (=-1 .cse1295)) (res fna0 (=-2 .cse1295) (xor- (fb0) (fna0) (fb0 fna0)))))) (cong (and .cse1295 .cse1291 .cse1287 .cse1283 .cse1279 .cse1275 .cse1271 .cse1267 .cse1263 .cse1259 .cse1255 .cse1251 .cse1247 .cse1243 .cse1239 .cse1237 .cse1235 .cse1233 .cse1231 .cse1229 .cse1227 .cse1225 .cse1223 .cse1221 .cse1219 .cse1217 .cse1215 .cse1213 .cse1211 .cse1209 .cse1207 .cse1205) (and .cse1297 .cse1293 .cse1289 .cse1285 .cse1281 .cse1277 .cse1273 .cse1269 .cse1265 .cse1261 .cse1257 .cse1253 .cse1249 .cse1245 .cse1241 .cse860 .cse866 .cse854 .cse864 .cse868 .cse848 .cse874 .cse862 .cse858 .cse872 .cse870 .cse896 .cse852 .cse850 .cse856 .cse901 .cse903)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (res (= fb_eq_fna fb_eq_fna) (refl fb_eq_fna) (cong (= fb_eq_fna .cse1203) (= fb_eq_fna .cse846)))) (trans .cse1197 .cse1201 .cse1198))))) (=-2 .cse1199))) .cse1202)))))))))) :proves (+ .cse846 - fb_eq_fna) :input)) :proves (+ .cse846) :rup)) (.cse844 (xor+ (fna31 nfa31) (fna31) (nfa31))) (.cse64 (xor+ (fna31 nfa31) (nfa31) (fna31))) (.cse834 (xor+ (fna30 nfa30) (fna30) (nfa30))) (.cse52 (xor+ (fna30 nfa30) (nfa30) (fna30))) (.cse466 (xor+ (carry30 .cse1) (carry30) (.cse1))) (.cse69 (xor+ (carry30 .cse1) (.cse1) (carry30))) (.cse465 (not+ .cse56)) (.cse57 (not- .cse56)) (.cse469 (! (let ((.cse951 (and fa31 .cse19))) (res .cse951 (res fa_less_min (! (assume fa_less_min) :proves (+ fa_less_min) :input) (! (let ((.cse952 (or .cse951 .cse468))) (res .cse952 (let ((.cse953 (xor fa_less_min .cse952))) (let-proof ((.cse954 (xor+ (fa_less_min .cse952) (.cse952) (fa_less_min)))) (res .cse953 .cse954 (let ((.cse955 (= fa_less_min .cse952))) (res .cse955 (assume .cse955) (let ((.cse956 (not .cse953))) (let-proof ((.cse958 (not- .cse956))) (res .cse956 (let ((.cse957 (= .cse955 .cse956))) (res .cse957 (res .cse955 (res .cse953 (res fa_less_min (res .cse952 (=+1 .cse955) (xor+ (fa_less_min .cse952) (fa_less_min) (.cse952))) (res .cse952 .cse954 (=+2 .cse955))) (res .cse956 (=+1 .cse957) .cse958)) (res .cse953 (res .cse956 (not+ .cse956) (=+2 .cse957)) (res fa_less_min (res .cse952 (xor+ (fa_less_min) (.cse952) (fa_less_min .cse952)) (=-1 .cse955)) (res .cse952 (=-2 .cse955) (xor- (fa_less_min) (.cse952) (fa_less_min .cse952)))))) (=-2 .cse957))) .cse958)))))))) (or- .cse952))) :proves (- fa_less_min + .cse468 + .cse951) :input)) (! (res min31 .cse948 (! (res .cse19 (and- 1 .cse951) .cse950) :proves (- .cse951 - min31) :input)) :proves (- .cse951) :rup))) :proves (+ .cse468) :rup))) (let-proof ((.cse58 (! (res min31 .cse948 (res .cse468 .cse469 (! (res .cse949 (and- 0 .cse468) (res .cse19 (or- .cse949) .cse950)) :proves (- .cse468 + fa31 - min31) :input))) :proves (+ fa31) :rup)) (.cse67 (let ((.cse946 (not fa31))) (let ((.cse947 (xor .cse946 carry30))) (let ((.cse932 (= nfa31 .cse947))) (res .cse932 (assume .cse932) (let ((.cse933 (not .cse66))) (let-proof ((.cse934 (not+ .cse933))) (res .cse933 .cse934 (let ((.cse935 (not .cse933))) (res .cse935 (let ((.cse936 (= .cse932 .cse935))) (res .cse936 (let ((.cse940 (not .cse59))) (let ((.cse937 (= nfa31 .cse940))) (let-proof ((.cse942 (not- .cse940)) (.cse941 (not+ .cse940))) (res (= .cse937 .cse935) (let ((.cse943 (xor nfa31 .cse940))) (let ((.cse938 (not .cse943))) (res (= .cse938 .cse935) (let ((.cse939 (= .cse943 .cse933))) (res .cse939 (res (xor .cse940 .cse59) (res .cse59 (res .cse940 .cse941 (xor+ (.cse940 .cse59) (.cse59) (.cse940))) (res .cse940 (xor+ (.cse940 .cse59) (.cse940) (.cse59)) .cse942)) (res .cse943 (res .cse933 (=+1 .cse939) (res .cse66 (xor+ (nfa31 .cse940) (nfa31 .cse59) (.cse940 .cse59)) (not- .cse933))) (res .cse933 (res .cse66 .cse934 (xor- (nfa31 .cse59) (.cse940 .cse59) (nfa31 .cse940))) (=+2 .cse939)))) (cong (not .cse943) (not .cse933)))) (let ((.cse944 (= .cse937 .cse938))) (res .cse944 (res .cse937 (res .cse943 (res nfa31 (res .cse940 (=+1 .cse937) (xor+ (nfa31 .cse940) (nfa31) (.cse940))) (res .cse940 (xor+ (nfa31 .cse940) (.cse940) (nfa31)) (=+2 .cse937))) (res .cse938 (=+1 .cse944) (not- .cse938))) (res .cse943 (res .cse938 (not+ .cse938) (=+2 .cse944)) (res nfa31 (res .cse940 (xor+ (nfa31) (.cse940) (nfa31 .cse940)) (=-1 .cse937)) (res .cse940 (=-2 .cse937) (xor- (nfa31) (.cse940) (nfa31 .cse940)))))) (trans .cse937 .cse938 .cse935)))))) (res (= .cse932 .cse937) (let ((.cse945 (= .cse947 .cse940))) (res .cse945 (res (xor .cse946 fa31) (res fa31 (res .cse946 (not+ .cse946) (xor+ (.cse946 fa31) (fa31) (.cse946))) (res .cse946 (xor+ (.cse946 fa31) (.cse946) (fa31)) (not- .cse946))) (res .cse947 (res .cse940 (=+1 .cse945) (res .cse59 (xor+ (.cse946 carry30) (fa31 carry30) (.cse946 fa31)) .cse942)) (res .cse940 (res .cse59 .cse941 (xor- (fa31 carry30) (.cse946 fa31) (.cse946 carry30))) (=+2 .cse945)))) (res (= nfa31 nfa31) (refl nfa31) (cong (= nfa31 .cse947) (= nfa31 .cse940))))) (trans .cse932 .cse937 .cse935)))))) (=-2 .cse936))) (not- .cse935))))))))))) (.cse55 (let ((.cse931 (xor .cse56 carry29))) (let ((.cse917 (= nfa30 .cse931))) (res .cse917 (assume .cse917) (let ((.cse918 (not .cse54))) (let-proof ((.cse919 (not+ .cse918))) (res .cse918 .cse919 (let ((.cse920 (not .cse918))) (res .cse920 (let ((.cse921 (= .cse917 .cse920))) (res .cse921 (let ((.cse925 (not .cse0))) (let ((.cse922 (= nfa30 .cse925))) (let-proof ((.cse927 (not- .cse925)) (.cse926 (not+ .cse925))) (res (= .cse922 .cse920) (let ((.cse928 (xor nfa30 .cse925))) (let ((.cse923 (not .cse928))) (res (= .cse923 .cse920) (let ((.cse924 (= .cse928 .cse918))) (res .cse924 (res (xor .cse925 .cse0) (res .cse0 (res .cse925 .cse926 (xor+ (.cse925 .cse0) (.cse0) (.cse925))) (res .cse925 (xor+ (.cse925 .cse0) (.cse925) (.cse0)) .cse927)) (res .cse928 (res .cse918 (=+1 .cse924) (res .cse54 (xor+ (nfa30 .cse925) (nfa30 .cse0) (.cse925 .cse0)) (not- .cse918))) (res .cse918 (res .cse54 .cse919 (xor- (nfa30 .cse0) (.cse925 .cse0) (nfa30 .cse925))) (=+2 .cse924)))) (cong (not .cse928) (not .cse918)))) (let ((.cse929 (= .cse922 .cse923))) (res .cse929 (res .cse922 (res .cse928 (res nfa30 (res .cse925 (=+1 .cse922) (xor+ (nfa30 .cse925) (nfa30) (.cse925))) (res .cse925 (xor+ (nfa30 .cse925) (.cse925) (nfa30)) (=+2 .cse922))) (res .cse923 (=+1 .cse929) (not- .cse923))) (res .cse928 (res .cse923 (not+ .cse923) (=+2 .cse929)) (res nfa30 (res .cse925 (xor+ (nfa30) (.cse925) (nfa30 .cse925)) (=-1 .cse922)) (res .cse925 (=-2 .cse922) (xor- (nfa30) (.cse925) (nfa30 .cse925)))))) (trans .cse922 .cse923 .cse920)))))) (res (= .cse917 .cse922) (let ((.cse930 (= .cse931 .cse925))) (res .cse930 (res (xor .cse56 fa30) (res fa30 (res .cse56 .cse465 (xor+ (.cse56 fa30) (fa30) (.cse56))) (res .cse56 (xor+ (.cse56 fa30) (.cse56) (fa30)) .cse57)) (res .cse931 (res .cse925 (=+1 .cse930) (res .cse0 (xor+ (.cse56 carry29) (fa30 carry29) (.cse56 fa30)) .cse927)) (res .cse925 (res .cse0 .cse926 (xor- (fa30 carry29) (.cse56 fa30) (.cse56 carry29))) (=+2 .cse930)))) (res (= nfa30 nfa30) (refl nfa30) (cong (= nfa30 .cse931) (= nfa30 .cse925))))) (trans .cse917 .cse922 .cse920)))))) (=-2 .cse921))) (not- .cse920)))))))))) (.cse70 (let ((.cse913 (= carry30 .cse1))) (res .cse913 (assume .cse913) (let ((.cse914 (not .cse68))) (let-proof ((.cse916 (not- .cse914))) (res .cse914 (let ((.cse915 (= .cse913 .cse914))) (res .cse915 (res .cse913 (res .cse68 (res carry30 (res .cse1 (=+1 .cse913) .cse466) (res .cse1 .cse69 (=+2 .cse913))) (res .cse914 (=+1 .cse915) .cse916)) (res .cse68 (res .cse914 (not+ .cse914) (=+2 .cse915)) (res carry30 (res .cse1 (xor+ (carry30) (.cse1) (carry30 .cse1)) (=-1 .cse913)) (res .cse1 (=-2 .cse913) (xor- (carry30) (.cse1) (carry30 .cse1)))))) (=-2 .cse915))) .cse916)))))) (.cse53 (let ((.cse909 (= fna30 nfa30))) (res .cse909 (assume .cse909) (let ((.cse910 (not .cse51))) (let-proof ((.cse912 (not- .cse910))) (res .cse910 (let ((.cse911 (= .cse909 .cse910))) (res .cse911 (res .cse909 (res .cse51 (res fna30 (res nfa30 (=+1 .cse909) .cse834) (res nfa30 .cse52 (=+2 .cse909))) (res .cse910 (=+1 .cse911) .cse912)) (res .cse51 (res .cse910 (not+ .cse910) (=+2 .cse911)) (res fna30 (res nfa30 (xor+ (fna30) (nfa30) (fna30 nfa30)) (=-1 .cse909)) (res nfa30 (=-2 .cse909) (xor- (fna30) (nfa30) (fna30 nfa30)))))) (=-2 .cse911))) .cse912)))))) (.cse65 (let ((.cse905 (= fna31 nfa31))) (res .cse905 (assume .cse905) (let ((.cse906 (not .cse63))) (let-proof ((.cse908 (not- .cse906))) (res .cse906 (let ((.cse907 (= .cse905 .cse906))) (res .cse907 (res .cse905 (res .cse63 (res fna31 (res nfa31 (=+1 .cse905) .cse844) (res nfa31 .cse64 (=+2 .cse905))) (res .cse906 (=+1 .cse907) .cse908)) (res .cse63 (res .cse906 (not+ .cse906) (=+2 .cse907)) (res fna31 (res nfa31 (xor+ (fna31) (nfa31) (fna31 nfa31)) (=-1 .cse905)) (res nfa31 (=-2 .cse905) (xor- (fna31) (nfa31) (fna31 nfa31)))))) (=-2 .cse907))) .cse908)))))) (.cse62 (! (res .cse846 .cse847 (! (res .cse903 (and- 31 .cse846) .cse904) :proves (- .cse846 - .cse60) :input)) :proves (- .cse60) :rup)) (.cse50 (! (res .cse846 .cse847 (! (res .cse901 (and- 30 .cse846) .cse902) :proves (- .cse846 - .cse3) :input)) :proves (- .cse3) :rup)) (.cse18 (! (res err (! (let ((.cse899 (not .cse17))) (let ((.cse898 (or .cse899 err))) (res .cse898 (assume .cse898) (res .cse899 (or- .cse898) (not- .cse899))))) :proves (- .cse17 + err) :input) (! (let ((.cse900 (not err))) (res .cse900 (assume .cse900) (not- .cse900))) :proves (- err) :input)) :proves (- .cse17) :rup))) (let-proof ((.cse9 (! (let ((.cse116 (not max22))) (let-proof ((.cse118 (! (res .cse116 (assume .cse116) (not- .cse116)) :proves (- max22) :input))) (res max22 (res .cse71 (let ((.cse112 (not max19))) (let-proof ((.cse114 (! (res .cse112 (assume .cse112) (not- .cse112)) :proves (- max19) :input))) (res max19 (let ((.cse140 (not max16))) (let-proof ((.cse142 (! (res .cse140 (assume .cse140) (not- .cse140)) :proves (- max16) :input))) (res max16 (let ((.cse73 (not max27))) (let ((.cse72 (or fb27 .cse73))) (let-proof ((.cse74 (not+ .cse73)) (.cse75 (! (res .cse73 (assume .cse73) (not- .cse73)) :proves (- max27) :input))) (res .cse72 (! (res max27 (! (res .cse73 .cse74 (or+ 1 .cse72)) :proves (+ .cse72 + max27) :input) .cse75) :proves (+ .cse72) :rup) (let ((.cse725 (not max15))) (let ((.cse724 (and .cse725 fb15))) (let ((.cse139 (or fb16 .cse140)) (.cse364 (or .cse724 (and (or fb15 .cse725) (let ((.cse882 (not max14))) (or (and .cse882 fb14) (and (or fb14 .cse882) (let ((.cse883 (not max13))) (or (and .cse883 fb13) (and (or fb13 .cse883) (let ((.cse884 (not max12))) (or (and .cse884 fb12) (and (or fb12 .cse884) (let ((.cse885 (not max11))) (or (and .cse885 fb11) (and (or fb11 .cse885) (let ((.cse886 (not max10))) (or (and .cse886 fb10) (and (or fb10 .cse886) (let ((.cse887 (not max9))) (or (and .cse887 fb9) (and (or fb9 .cse887) (let ((.cse888 (not max8))) (or (and .cse888 fb8) (and (or fb8 .cse888) (let ((.cse889 (not max7))) (or (and .cse889 fb7) (and (or fb7 .cse889) (let ((.cse890 (not max6))) (or (and .cse890 fb6) (and (or fb6 .cse890) (let ((.cse891 (not max5))) (or (and .cse891 fb5) (and (or fb5 .cse891) (let ((.cse892 (not max4))) (or (and .cse892 fb4) (and (or fb4 .cse892) (let ((.cse893 (not max3))) (or (and .cse893 fb3) (and (or fb3 .cse893) (let ((.cse894 (not max2))) (or (and .cse894 fb2) (and (or fb2 .cse894) (let ((.cse895 (not max1))) (or (and .cse895 fb1) (and (or fb1 .cse895) (and (not max0) fb0))))))))))))))))))))))))))))))))))))))))))))))) (let ((.cse733 (and .cse140 fb16)) (.cse734 (and .cse139 .cse364)) (.cse78 (not max17))) (let ((.cse77 (or fb17 .cse78)) (.cse343 (or .cse733 .cse734))) (let ((.cse742 (and .cse78 fb17)) (.cse743 (and .cse77 .cse343)) (.cse107 (not max18))) (let ((.cse106 (or fb18 .cse107)) (.cse322 (or .cse742 .cse743))) (let ((.cse751 (and .cse107 fb18)) (.cse752 (and .cse106 .cse322))) (let ((.cse111 (or fb19 .cse112)) (.cse301 (or .cse751 .cse752))) (let ((.cse760 (and .cse112 fb19)) (.cse761 (and .cse111 .cse301)) (.cse121 (not max20))) (let ((.cse120 (or fb20 .cse121)) (.cse280 (or .cse760 .cse761))) (let ((.cse769 (and .cse121 fb20)) (.cse770 (and .cse120 .cse280)) (.cse144 (not max21))) (let ((.cse143 (or fb21 .cse144)) (.cse259 (or .cse769 .cse770))) (let ((.cse778 (and .cse144 fb21)) (.cse779 (and .cse143 .cse259))) (let ((.cse115 (or fb22 .cse116)) (.cse238 (or .cse778 .cse779))) (let ((.cse787 (and .cse116 fb22)) (.cse788 (and .cse115 .cse238)) (.cse83 (not max23))) (let ((.cse82 (or fb23 .cse83)) (.cse217 (or .cse787 .cse788))) (let ((.cse796 (and .cse83 fb23)) (.cse797 (and .cse82 .cse217)) (.cse87 (not max24))) (let ((.cse86 (or fb24 .cse87)) (.cse196 (or .cse796 .cse797))) (let ((.cse805 (and .cse87 fb24)) (.cse806 (and .cse86 .cse196)) (.cse129 (not max25))) (let ((.cse128 (or fb25 .cse129)) (.cse175 (or .cse805 .cse806))) (let ((.cse814 (and .cse129 fb25)) (.cse815 (and .cse128 .cse175)) (.cse103 (not max26))) (let ((.cse102 (or fb26 .cse103)) (.cse154 (or .cse814 .cse815))) (let ((.cse823 (and .cse103 fb26)) (.cse824 (and .cse102 .cse154))) (let ((.cse153 (or .cse823 .cse824))) (let ((.cse832 (and .cse73 fb27)) (.cse833 (and .cse72 .cse153)) (.cse135 (not max28))) (let ((.cse134 (or fb28 .cse135)) (.cse152 (or .cse832 .cse833))) (let ((.cse836 (and .cse135 fb28)) (.cse837 (and .cse134 .cse152)) (.cse98 (not max29))) (let ((.cse97 (or fb29 .cse98)) (.cse151 (or .cse836 .cse837))) (let ((.cse839 (and .cse98 fb29)) (.cse840 (and .cse97 .cse151)) (.cse93 (not max30))) (let ((.cse92 (or fb30 .cse93)) (.cse150 (or .cse839 .cse840))) (let ((.cse841 (and .cse93 fb30)) (.cse842 (and .cse92 .cse150)) (.cse148 (not fb31))) (let ((.cse147 (or max31 .cse148)) (.cse149 (or .cse841 .cse842))) (let ((.cse843 (and .cse147 .cse149))) (let ((.cse76 (or (and max31 .cse148) .cse843))) (res .cse76 (let-proof ((.cse105 (! (res .cse103 (assume .cse103) (not- .cse103)) :proves (- max26) :input))) (res max26 (let-proof ((.cse79 (not+ .cse78)) (.cse80 (! (res .cse78 (assume .cse78) (not- .cse78)) :proves (- max17) :input))) (res .cse77 (! (res max17 (! (res .cse78 .cse79 (or+ 1 .cse77)) :proves (+ .cse77 + max17) :input) .cse80) :proves (+ .cse77) :rup) (res .cse81 (let-proof ((.cse84 (not+ .cse83)) (.cse85 (! (res .cse83 (assume .cse83) (not- .cse83)) :proves (- max23) :input))) (res .cse82 (! (res max23 (! (res .cse83 .cse84 (or+ 1 .cse82)) :proves (+ .cse82 + max23) :input) .cse85) :proves (+ .cse82) :rup) (let-proof ((.cse88 (not+ .cse87)) (.cse89 (! (res .cse87 (assume .cse87) (not- .cse87)) :proves (- max24) :input))) (res .cse86 (! (res max24 (! (res .cse87 .cse88 (or+ 1 .cse86)) :proves (+ .cse86 + max24) :input) .cse89) :proves (+ .cse86) :rup) (res .cse90 (let-proof ((.cse100 (! (res .cse98 (assume .cse98) (not- .cse98)) :proves (- max29) :input))) (res max29 (res .cse91 (let-proof ((.cse123 (! (res .cse121 (assume .cse121) (not- .cse121)) :proves (- max20) :input))) (res max20 (let-proof ((.cse94 (not+ .cse93)) (.cse95 (! (res .cse93 (assume .cse93) (not- .cse93)) :proves (- max30) :input))) (res .cse92 (! (res max30 (! (res .cse93 .cse94 (or+ 1 .cse92)) :proves (+ .cse92 + max30) :input) .cse95) :proves (+ .cse92) :rup) (res max30 (let-proof ((.cse137 (! (res .cse135 (assume .cse135) (not- .cse135)) :proves (- max28) :input))) (res max28 (let-proof ((.cse131 (! (res .cse129 (assume .cse129) (not- .cse129)) :proves (- max25) :input))) (res max25 (res .cse96 (let-proof ((.cse99 (not+ .cse98))) (res .cse97 (! (res max29 (! (res .cse98 .cse99 (or+ 1 .cse97)) :proves (+ .cse97 + max29) :input) .cse100) :proves (+ .cse97) :rup) (res fa31 .cse58 (res .cse101 (let-proof ((.cse104 (not+ .cse103))) (res .cse102 (! (res max26 (! (res .cse103 .cse104 (or+ 1 .cse102)) :proves (+ .cse102 + max26) :input) .cse105) :proves (+ .cse102) :rup) (res max24 (let-proof ((.cse108 (not+ .cse107)) (.cse109 (! (res .cse107 (assume .cse107) (not- .cse107)) :proves (- max18) :input))) (res .cse106 (! (res max18 (! (res .cse107 .cse108 (or+ 1 .cse106)) :proves (+ .cse106 + max18) :input) .cse109) :proves (+ .cse106) :rup) (res .cse110 (let-proof ((.cse113 (not+ .cse112))) (res .cse111 (! (res max19 (! (res .cse112 .cse113 (or+ 1 .cse111)) :proves (+ .cse111 + max19) :input) .cse114) :proves (+ .cse111) :rup) (let-proof ((.cse117 (not+ .cse116))) (res .cse115 (! (res max22 (! (res .cse116 .cse117 (or+ 1 .cse115)) :proves (+ .cse115 + max22) :input) .cse118) :proves (+ .cse115) :rup) (res .cse3 (res .cse119 (let-proof ((.cse122 (not+ .cse121))) (res .cse120 (! (res max20 (! (res .cse121 .cse122 (or+ 1 .cse120)) :proves (+ .cse120 + max20) :input) .cse123) :proves (+ .cse120) :rup) (res .cse124 (res .cse125 (res .cse60 (res .cse126 (res .cse127 (let-proof ((.cse130 (not+ .cse129))) (res .cse128 (! (res max25 (! (res .cse129 .cse130 (or+ 1 .cse128)) :proves (+ .cse128 + max25) :input) .cse131) :proves (+ .cse128) :rup) (res max15 (res .cse132 (res .cse133 (let-proof ((.cse136 (not+ .cse135))) (res .cse134 (! (res max28 (! (res .cse135 .cse136 (or+ 1 .cse134)) :proves (+ .cse134 + max28) :input) .cse137) :proves (+ .cse134) :rup) (res .cse138 (res max27 (res max17 (let-proof ((.cse141 (not+ .cse140))) (res .cse139 (! (res max16 (! (res .cse140 .cse141 (or+ 1 .cse139)) :proves (+ .cse139 + max16) :input) .cse142) :proves (+ .cse139) :rup) (let-proof ((.cse145 (not+ .cse144)) (.cse146 (! (res .cse144 (assume .cse144) (not- .cse144)) :proves (- max21) :input))) (res .cse143 (! (res max21 (! (res .cse144 .cse145 (or+ 1 .cse143)) :proves (+ .cse143 + max21) :input) .cse146) :proves (+ .cse143) :rup) (res max18 (res max23 (res max21 (res fna31 (res .cse147 (! (res .cse148 (not+ .cse148) (or+ 1 .cse147)) :proves (+ .cse147 + fb31) :input) (res nfa31 (res .cse149 (res .cse59 (! (res .cse66 .cse67 (xor+ (nfa31) (.cse59) (nfa31 .cse59))) :proves (+ .cse59 + nfa31) :input) (res .cse150 (res fb30 (res carry30 (res .cse151 (res fb29 (res fna30 (res .cse152 (res fb28 (res fna29 (res nfa30 (res .cse153 (res fb27 (res fna28 (res nfa29 (res .cse0 (! (res .cse54 .cse55 (xor+ (nfa30) (.cse0) (nfa30 .cse0))) :proves (+ .cse0 + nfa30) :input) (res .cse154 (res fb26 (res fna27 (res nfa28 (let ((.cse155 (xor fa29 carry28))) (let-proof ((.cse173 (not- .cse171)) (.cse172 (not+ .cse171))) (res .cse155 (! (let ((.cse156 (xor nfa29 .cse155))) (res .cse156 (let ((.cse174 (xor .cse171 carry28))) (let ((.cse157 (= nfa29 .cse174))) (res .cse157 (assume .cse157) (let ((.cse158 (not .cse156))) (let-proof ((.cse159 (not+ .cse158))) (res .cse158 .cse159 (let ((.cse160 (not .cse158))) (res .cse160 (let ((.cse161 (= .cse157 .cse160))) (res .cse161 (let ((.cse165 (not .cse155))) (let ((.cse162 (= nfa29 .cse165))) (let-proof ((.cse167 (not- .cse165)) (.cse166 (not+ .cse165))) (res (= .cse162 .cse160) (let ((.cse168 (xor nfa29 .cse165))) (let ((.cse163 (not .cse168))) (res (= .cse163 .cse160) (let ((.cse164 (= .cse168 .cse158))) (res .cse164 (res (xor .cse165 .cse155) (res .cse155 (res .cse165 .cse166 (xor+ (.cse165 .cse155) (.cse155) (.cse165))) (res .cse165 (xor+ (.cse165 .cse155) (.cse165) (.cse155)) .cse167)) (res .cse168 (res .cse158 (=+1 .cse164) (res .cse156 (xor+ (nfa29 .cse165) (nfa29 .cse155) (.cse165 .cse155)) (not- .cse158))) (res .cse158 (res .cse156 .cse159 (xor- (nfa29 .cse155) (.cse165 .cse155) (nfa29 .cse165))) (=+2 .cse164)))) (cong (not .cse168) (not .cse158)))) (let ((.cse169 (= .cse162 .cse163))) (res .cse169 (res .cse162 (res .cse168 (res nfa29 (res .cse165 (=+1 .cse162) (xor+ (nfa29 .cse165) (nfa29) (.cse165))) (res .cse165 (xor+ (nfa29 .cse165) (.cse165) (nfa29)) (=+2 .cse162))) (res .cse163 (=+1 .cse169) (not- .cse163))) (res .cse168 (res .cse163 (not+ .cse163) (=+2 .cse169)) (res nfa29 (res .cse165 (xor+ (nfa29) (.cse165) (nfa29 .cse165)) (=-1 .cse162)) (res .cse165 (=-2 .cse162) (xor- (nfa29) (.cse165) (nfa29 .cse165)))))) (trans .cse162 .cse163 .cse160)))))) (res (= .cse157 .cse162) (let ((.cse170 (= .cse174 .cse165))) (res .cse170 (res (xor .cse171 fa29) (res fa29 (res .cse171 .cse172 (xor+ (.cse171 fa29) (fa29) (.cse171))) (res .cse171 (xor+ (.cse171 fa29) (.cse171) (fa29)) .cse173)) (res .cse174 (res .cse165 (=+1 .cse170) (res .cse155 (xor+ (.cse171 carry28) (fa29 carry28) (.cse171 fa29)) .cse167)) (res .cse165 (res .cse155 .cse166 (xor- (fa29 carry28) (.cse171 fa29) (.cse171 carry28))) (=+2 .cse170)))) (res (= nfa29 nfa29) (refl nfa29) (cong (= nfa29 .cse174) (= nfa29 .cse165))))) (trans .cse157 .cse162 .cse160)))))) (=-2 .cse161))) (not- .cse160))))))))) (xor+ (nfa29) (.cse155) (nfa29 .cse155)))) :proves (+ .cse155 + nfa29) :input) (res .cse175 (res fb25 (res fna26 (res nfa27 (let ((.cse176 (xor fa28 carry27))) (let-proof ((.cse194 (not- .cse192)) (.cse193 (not+ .cse192))) (res .cse176 (! (let ((.cse177 (xor nfa28 .cse176))) (res .cse177 (let ((.cse195 (xor .cse192 carry27))) (let ((.cse178 (= nfa28 .cse195))) (res .cse178 (assume .cse178) (let ((.cse179 (not .cse177))) (let-proof ((.cse180 (not+ .cse179))) (res .cse179 .cse180 (let ((.cse181 (not .cse179))) (res .cse181 (let ((.cse182 (= .cse178 .cse181))) (res .cse182 (let ((.cse186 (not .cse176))) (let ((.cse183 (= nfa28 .cse186))) (let-proof ((.cse188 (not- .cse186)) (.cse187 (not+ .cse186))) (res (= .cse183 .cse181) (let ((.cse189 (xor nfa28 .cse186))) (let ((.cse184 (not .cse189))) (res (= .cse184 .cse181) (let ((.cse185 (= .cse189 .cse179))) (res .cse185 (res (xor .cse186 .cse176) (res .cse176 (res .cse186 .cse187 (xor+ (.cse186 .cse176) (.cse176) (.cse186))) (res .cse186 (xor+ (.cse186 .cse176) (.cse186) (.cse176)) .cse188)) (res .cse189 (res .cse179 (=+1 .cse185) (res .cse177 (xor+ (nfa28 .cse186) (nfa28 .cse176) (.cse186 .cse176)) (not- .cse179))) (res .cse179 (res .cse177 .cse180 (xor- (nfa28 .cse176) (.cse186 .cse176) (nfa28 .cse186))) (=+2 .cse185)))) (cong (not .cse189) (not .cse179)))) (let ((.cse190 (= .cse183 .cse184))) (res .cse190 (res .cse183 (res .cse189 (res nfa28 (res .cse186 (=+1 .cse183) (xor+ (nfa28 .cse186) (nfa28) (.cse186))) (res .cse186 (xor+ (nfa28 .cse186) (.cse186) (nfa28)) (=+2 .cse183))) (res .cse184 (=+1 .cse190) (not- .cse184))) (res .cse189 (res .cse184 (not+ .cse184) (=+2 .cse190)) (res nfa28 (res .cse186 (xor+ (nfa28) (.cse186) (nfa28 .cse186)) (=-1 .cse183)) (res .cse186 (=-2 .cse183) (xor- (nfa28) (.cse186) (nfa28 .cse186)))))) (trans .cse183 .cse184 .cse181)))))) (res (= .cse178 .cse183) (let ((.cse191 (= .cse195 .cse186))) (res .cse191 (res (xor .cse192 fa28) (res fa28 (res .cse192 .cse193 (xor+ (.cse192 fa28) (fa28) (.cse192))) (res .cse192 (xor+ (.cse192 fa28) (.cse192) (fa28)) .cse194)) (res .cse195 (res .cse186 (=+1 .cse191) (res .cse176 (xor+ (.cse192 carry27) (fa28 carry27) (.cse192 fa28)) .cse188)) (res .cse186 (res .cse176 .cse187 (xor- (fa28 carry27) (.cse192 fa28) (.cse192 carry27))) (=+2 .cse191)))) (res (= nfa28 nfa28) (refl nfa28) (cong (= nfa28 .cse195) (= nfa28 .cse186))))) (trans .cse178 .cse183 .cse181)))))) (=-2 .cse182))) (not- .cse181))))))))) (xor+ (nfa28) (.cse176) (nfa28 .cse176)))) :proves (+ .cse176 + nfa28) :input) (res .cse196 (res fb24 (res fna25 (res nfa26 (let ((.cse197 (xor fa27 carry26))) (let-proof ((.cse215 (not- .cse213)) (.cse214 (not+ .cse213))) (res .cse197 (! (let ((.cse198 (xor nfa27 .cse197))) (res .cse198 (let ((.cse216 (xor .cse213 carry26))) (let ((.cse199 (= nfa27 .cse216))) (res .cse199 (assume .cse199) (let ((.cse200 (not .cse198))) (let-proof ((.cse201 (not+ .cse200))) (res .cse200 .cse201 (let ((.cse202 (not .cse200))) (res .cse202 (let ((.cse203 (= .cse199 .cse202))) (res .cse203 (let ((.cse207 (not .cse197))) (let ((.cse204 (= nfa27 .cse207))) (let-proof ((.cse209 (not- .cse207)) (.cse208 (not+ .cse207))) (res (= .cse204 .cse202) (let ((.cse210 (xor nfa27 .cse207))) (let ((.cse205 (not .cse210))) (res (= .cse205 .cse202) (let ((.cse206 (= .cse210 .cse200))) (res .cse206 (res (xor .cse207 .cse197) (res .cse197 (res .cse207 .cse208 (xor+ (.cse207 .cse197) (.cse197) (.cse207))) (res .cse207 (xor+ (.cse207 .cse197) (.cse207) (.cse197)) .cse209)) (res .cse210 (res .cse200 (=+1 .cse206) (res .cse198 (xor+ (nfa27 .cse207) (nfa27 .cse197) (.cse207 .cse197)) (not- .cse200))) (res .cse200 (res .cse198 .cse201 (xor- (nfa27 .cse197) (.cse207 .cse197) (nfa27 .cse207))) (=+2 .cse206)))) (cong (not .cse210) (not .cse200)))) (let ((.cse211 (= .cse204 .cse205))) (res .cse211 (res .cse204 (res .cse210 (res nfa27 (res .cse207 (=+1 .cse204) (xor+ (nfa27 .cse207) (nfa27) (.cse207))) (res .cse207 (xor+ (nfa27 .cse207) (.cse207) (nfa27)) (=+2 .cse204))) (res .cse205 (=+1 .cse211) (not- .cse205))) (res .cse210 (res .cse205 (not+ .cse205) (=+2 .cse211)) (res nfa27 (res .cse207 (xor+ (nfa27) (.cse207) (nfa27 .cse207)) (=-1 .cse204)) (res .cse207 (=-2 .cse204) (xor- (nfa27) (.cse207) (nfa27 .cse207)))))) (trans .cse204 .cse205 .cse202)))))) (res (= .cse199 .cse204) (let ((.cse212 (= .cse216 .cse207))) (res .cse212 (res (xor .cse213 fa27) (res fa27 (res .cse213 .cse214 (xor+ (.cse213 fa27) (fa27) (.cse213))) (res .cse213 (xor+ (.cse213 fa27) (.cse213) (fa27)) .cse215)) (res .cse216 (res .cse207 (=+1 .cse212) (res .cse197 (xor+ (.cse213 carry26) (fa27 carry26) (.cse213 fa27)) .cse209)) (res .cse207 (res .cse197 .cse208 (xor- (fa27 carry26) (.cse213 fa27) (.cse213 carry26))) (=+2 .cse212)))) (res (= nfa27 nfa27) (refl nfa27) (cong (= nfa27 .cse216) (= nfa27 .cse207))))) (trans .cse199 .cse204 .cse202)))))) (=-2 .cse203))) (not- .cse202))))))))) (xor+ (nfa27) (.cse197) (nfa27 .cse197)))) :proves (+ .cse197 + nfa27) :input) (res .cse217 (res fb23 (res fna24 (res nfa25 (let ((.cse218 (xor fa26 carry25))) (let-proof ((.cse236 (not- .cse234)) (.cse235 (not+ .cse234))) (res .cse218 (! (let ((.cse219 (xor nfa26 .cse218))) (res .cse219 (let ((.cse237 (xor .cse234 carry25))) (let ((.cse220 (= nfa26 .cse237))) (res .cse220 (assume .cse220) (let ((.cse221 (not .cse219))) (let-proof ((.cse222 (not+ .cse221))) (res .cse221 .cse222 (let ((.cse223 (not .cse221))) (res .cse223 (let ((.cse224 (= .cse220 .cse223))) (res .cse224 (let ((.cse228 (not .cse218))) (let ((.cse225 (= nfa26 .cse228))) (let-proof ((.cse230 (not- .cse228)) (.cse229 (not+ .cse228))) (res (= .cse225 .cse223) (let ((.cse231 (xor nfa26 .cse228))) (let ((.cse226 (not .cse231))) (res (= .cse226 .cse223) (let ((.cse227 (= .cse231 .cse221))) (res .cse227 (res (xor .cse228 .cse218) (res .cse218 (res .cse228 .cse229 (xor+ (.cse228 .cse218) (.cse218) (.cse228))) (res .cse228 (xor+ (.cse228 .cse218) (.cse228) (.cse218)) .cse230)) (res .cse231 (res .cse221 (=+1 .cse227) (res .cse219 (xor+ (nfa26 .cse228) (nfa26 .cse218) (.cse228 .cse218)) (not- .cse221))) (res .cse221 (res .cse219 .cse222 (xor- (nfa26 .cse218) (.cse228 .cse218) (nfa26 .cse228))) (=+2 .cse227)))) (cong (not .cse231) (not .cse221)))) (let ((.cse232 (= .cse225 .cse226))) (res .cse232 (res .cse225 (res .cse231 (res nfa26 (res .cse228 (=+1 .cse225) (xor+ (nfa26 .cse228) (nfa26) (.cse228))) (res .cse228 (xor+ (nfa26 .cse228) (.cse228) (nfa26)) (=+2 .cse225))) (res .cse226 (=+1 .cse232) (not- .cse226))) (res .cse231 (res .cse226 (not+ .cse226) (=+2 .cse232)) (res nfa26 (res .cse228 (xor+ (nfa26) (.cse228) (nfa26 .cse228)) (=-1 .cse225)) (res .cse228 (=-2 .cse225) (xor- (nfa26) (.cse228) (nfa26 .cse228)))))) (trans .cse225 .cse226 .cse223)))))) (res (= .cse220 .cse225) (let ((.cse233 (= .cse237 .cse228))) (res .cse233 (res (xor .cse234 fa26) (res fa26 (res .cse234 .cse235 (xor+ (.cse234 fa26) (fa26) (.cse234))) (res .cse234 (xor+ (.cse234 fa26) (.cse234) (fa26)) .cse236)) (res .cse237 (res .cse228 (=+1 .cse233) (res .cse218 (xor+ (.cse234 carry25) (fa26 carry25) (.cse234 fa26)) .cse230)) (res .cse228 (res .cse218 .cse229 (xor- (fa26 carry25) (.cse234 fa26) (.cse234 carry25))) (=+2 .cse233)))) (res (= nfa26 nfa26) (refl nfa26) (cong (= nfa26 .cse237) (= nfa26 .cse228))))) (trans .cse220 .cse225 .cse223)))))) (=-2 .cse224))) (not- .cse223))))))))) (xor+ (nfa26) (.cse218) (nfa26 .cse218)))) :proves (+ .cse218 + nfa26) :input) (res .cse238 (res fb22 (res fna23 (res nfa24 (let ((.cse239 (xor fa25 carry24))) (let-proof ((.cse257 (not- .cse255)) (.cse256 (not+ .cse255))) (res .cse239 (! (let ((.cse240 (xor nfa25 .cse239))) (res .cse240 (let ((.cse258 (xor .cse255 carry24))) (let ((.cse241 (= nfa25 .cse258))) (res .cse241 (assume .cse241) (let ((.cse242 (not .cse240))) (let-proof ((.cse243 (not+ .cse242))) (res .cse242 .cse243 (let ((.cse244 (not .cse242))) (res .cse244 (let ((.cse245 (= .cse241 .cse244))) (res .cse245 (let ((.cse249 (not .cse239))) (let ((.cse246 (= nfa25 .cse249))) (let-proof ((.cse251 (not- .cse249)) (.cse250 (not+ .cse249))) (res (= .cse246 .cse244) (let ((.cse252 (xor nfa25 .cse249))) (let ((.cse247 (not .cse252))) (res (= .cse247 .cse244) (let ((.cse248 (= .cse252 .cse242))) (res .cse248 (res (xor .cse249 .cse239) (res .cse239 (res .cse249 .cse250 (xor+ (.cse249 .cse239) (.cse239) (.cse249))) (res .cse249 (xor+ (.cse249 .cse239) (.cse249) (.cse239)) .cse251)) (res .cse252 (res .cse242 (=+1 .cse248) (res .cse240 (xor+ (nfa25 .cse249) (nfa25 .cse239) (.cse249 .cse239)) (not- .cse242))) (res .cse242 (res .cse240 .cse243 (xor- (nfa25 .cse239) (.cse249 .cse239) (nfa25 .cse249))) (=+2 .cse248)))) (cong (not .cse252) (not .cse242)))) (let ((.cse253 (= .cse246 .cse247))) (res .cse253 (res .cse246 (res .cse252 (res nfa25 (res .cse249 (=+1 .cse246) (xor+ (nfa25 .cse249) (nfa25) (.cse249))) (res .cse249 (xor+ (nfa25 .cse249) (.cse249) (nfa25)) (=+2 .cse246))) (res .cse247 (=+1 .cse253) (not- .cse247))) (res .cse252 (res .cse247 (not+ .cse247) (=+2 .cse253)) (res nfa25 (res .cse249 (xor+ (nfa25) (.cse249) (nfa25 .cse249)) (=-1 .cse246)) (res .cse249 (=-2 .cse246) (xor- (nfa25) (.cse249) (nfa25 .cse249)))))) (trans .cse246 .cse247 .cse244)))))) (res (= .cse241 .cse246) (let ((.cse254 (= .cse258 .cse249))) (res .cse254 (res (xor .cse255 fa25) (res fa25 (res .cse255 .cse256 (xor+ (.cse255 fa25) (fa25) (.cse255))) (res .cse255 (xor+ (.cse255 fa25) (.cse255) (fa25)) .cse257)) (res .cse258 (res .cse249 (=+1 .cse254) (res .cse239 (xor+ (.cse255 carry24) (fa25 carry24) (.cse255 fa25)) .cse251)) (res .cse249 (res .cse239 .cse250 (xor- (fa25 carry24) (.cse255 fa25) (.cse255 carry24))) (=+2 .cse254)))) (res (= nfa25 nfa25) (refl nfa25) (cong (= nfa25 .cse258) (= nfa25 .cse249))))) (trans .cse241 .cse246 .cse244)))))) (=-2 .cse245))) (not- .cse244))))))))) (xor+ (nfa25) (.cse239) (nfa25 .cse239)))) :proves (+ .cse239 + nfa25) :input) (res .cse259 (res fb21 (res fna22 (res nfa23 (let ((.cse260 (xor fa24 carry23))) (let-proof ((.cse278 (not- .cse276)) (.cse277 (not+ .cse276))) (res .cse260 (! (let ((.cse261 (xor nfa24 .cse260))) (res .cse261 (let ((.cse279 (xor .cse276 carry23))) (let ((.cse262 (= nfa24 .cse279))) (res .cse262 (assume .cse262) (let ((.cse263 (not .cse261))) (let-proof ((.cse264 (not+ .cse263))) (res .cse263 .cse264 (let ((.cse265 (not .cse263))) (res .cse265 (let ((.cse266 (= .cse262 .cse265))) (res .cse266 (let ((.cse270 (not .cse260))) (let ((.cse267 (= nfa24 .cse270))) (let-proof ((.cse272 (not- .cse270)) (.cse271 (not+ .cse270))) (res (= .cse267 .cse265) (let ((.cse273 (xor nfa24 .cse270))) (let ((.cse268 (not .cse273))) (res (= .cse268 .cse265) (let ((.cse269 (= .cse273 .cse263))) (res .cse269 (res (xor .cse270 .cse260) (res .cse260 (res .cse270 .cse271 (xor+ (.cse270 .cse260) (.cse260) (.cse270))) (res .cse270 (xor+ (.cse270 .cse260) (.cse270) (.cse260)) .cse272)) (res .cse273 (res .cse263 (=+1 .cse269) (res .cse261 (xor+ (nfa24 .cse270) (nfa24 .cse260) (.cse270 .cse260)) (not- .cse263))) (res .cse263 (res .cse261 .cse264 (xor- (nfa24 .cse260) (.cse270 .cse260) (nfa24 .cse270))) (=+2 .cse269)))) (cong (not .cse273) (not .cse263)))) (let ((.cse274 (= .cse267 .cse268))) (res .cse274 (res .cse267 (res .cse273 (res nfa24 (res .cse270 (=+1 .cse267) (xor+ (nfa24 .cse270) (nfa24) (.cse270))) (res .cse270 (xor+ (nfa24 .cse270) (.cse270) (nfa24)) (=+2 .cse267))) (res .cse268 (=+1 .cse274) (not- .cse268))) (res .cse273 (res .cse268 (not+ .cse268) (=+2 .cse274)) (res nfa24 (res .cse270 (xor+ (nfa24) (.cse270) (nfa24 .cse270)) (=-1 .cse267)) (res .cse270 (=-2 .cse267) (xor- (nfa24) (.cse270) (nfa24 .cse270)))))) (trans .cse267 .cse268 .cse265)))))) (res (= .cse262 .cse267) (let ((.cse275 (= .cse279 .cse270))) (res .cse275 (res (xor .cse276 fa24) (res fa24 (res .cse276 .cse277 (xor+ (.cse276 fa24) (fa24) (.cse276))) (res .cse276 (xor+ (.cse276 fa24) (.cse276) (fa24)) .cse278)) (res .cse279 (res .cse270 (=+1 .cse275) (res .cse260 (xor+ (.cse276 carry23) (fa24 carry23) (.cse276 fa24)) .cse272)) (res .cse270 (res .cse260 .cse271 (xor- (fa24 carry23) (.cse276 fa24) (.cse276 carry23))) (=+2 .cse275)))) (res (= nfa24 nfa24) (refl nfa24) (cong (= nfa24 .cse279) (= nfa24 .cse270))))) (trans .cse262 .cse267 .cse265)))))) (=-2 .cse266))) (not- .cse265))))))))) (xor+ (nfa24) (.cse260) (nfa24 .cse260)))) :proves (+ .cse260 + nfa24) :input) (res .cse280 (res fb20 (res fna21 (res nfa22 (let ((.cse281 (xor fa23 carry22))) (let-proof ((.cse299 (not- .cse297)) (.cse298 (not+ .cse297))) (res .cse281 (! (let ((.cse282 (xor nfa23 .cse281))) (res .cse282 (let ((.cse300 (xor .cse297 carry22))) (let ((.cse283 (= nfa23 .cse300))) (res .cse283 (assume .cse283) (let ((.cse284 (not .cse282))) (let-proof ((.cse285 (not+ .cse284))) (res .cse284 .cse285 (let ((.cse286 (not .cse284))) (res .cse286 (let ((.cse287 (= .cse283 .cse286))) (res .cse287 (let ((.cse291 (not .cse281))) (let ((.cse288 (= nfa23 .cse291))) (let-proof ((.cse293 (not- .cse291)) (.cse292 (not+ .cse291))) (res (= .cse288 .cse286) (let ((.cse294 (xor nfa23 .cse291))) (let ((.cse289 (not .cse294))) (res (= .cse289 .cse286) (let ((.cse290 (= .cse294 .cse284))) (res .cse290 (res (xor .cse291 .cse281) (res .cse281 (res .cse291 .cse292 (xor+ (.cse291 .cse281) (.cse281) (.cse291))) (res .cse291 (xor+ (.cse291 .cse281) (.cse291) (.cse281)) .cse293)) (res .cse294 (res .cse284 (=+1 .cse290) (res .cse282 (xor+ (nfa23 .cse291) (nfa23 .cse281) (.cse291 .cse281)) (not- .cse284))) (res .cse284 (res .cse282 .cse285 (xor- (nfa23 .cse281) (.cse291 .cse281) (nfa23 .cse291))) (=+2 .cse290)))) (cong (not .cse294) (not .cse284)))) (let ((.cse295 (= .cse288 .cse289))) (res .cse295 (res .cse288 (res .cse294 (res nfa23 (res .cse291 (=+1 .cse288) (xor+ (nfa23 .cse291) (nfa23) (.cse291))) (res .cse291 (xor+ (nfa23 .cse291) (.cse291) (nfa23)) (=+2 .cse288))) (res .cse289 (=+1 .cse295) (not- .cse289))) (res .cse294 (res .cse289 (not+ .cse289) (=+2 .cse295)) (res nfa23 (res .cse291 (xor+ (nfa23) (.cse291) (nfa23 .cse291)) (=-1 .cse288)) (res .cse291 (=-2 .cse288) (xor- (nfa23) (.cse291) (nfa23 .cse291)))))) (trans .cse288 .cse289 .cse286)))))) (res (= .cse283 .cse288) (let ((.cse296 (= .cse300 .cse291))) (res .cse296 (res (xor .cse297 fa23) (res fa23 (res .cse297 .cse298 (xor+ (.cse297 fa23) (fa23) (.cse297))) (res .cse297 (xor+ (.cse297 fa23) (.cse297) (fa23)) .cse299)) (res .cse300 (res .cse291 (=+1 .cse296) (res .cse281 (xor+ (.cse297 carry22) (fa23 carry22) (.cse297 fa23)) .cse293)) (res .cse291 (res .cse281 .cse292 (xor- (fa23 carry22) (.cse297 fa23) (.cse297 carry22))) (=+2 .cse296)))) (res (= nfa23 nfa23) (refl nfa23) (cong (= nfa23 .cse300) (= nfa23 .cse291))))) (trans .cse283 .cse288 .cse286)))))) (=-2 .cse287))) (not- .cse286))))))))) (xor+ (nfa23) (.cse281) (nfa23 .cse281)))) :proves (+ .cse281 + nfa23) :input) (res .cse301 (res fb19 (res fna20 (res nfa21 (let ((.cse302 (xor fa22 carry21))) (let-proof ((.cse320 (not- .cse318)) (.cse319 (not+ .cse318))) (res .cse302 (! (let ((.cse303 (xor nfa22 .cse302))) (res .cse303 (let ((.cse321 (xor .cse318 carry21))) (let ((.cse304 (= nfa22 .cse321))) (res .cse304 (assume .cse304) (let ((.cse305 (not .cse303))) (let-proof ((.cse306 (not+ .cse305))) (res .cse305 .cse306 (let ((.cse307 (not .cse305))) (res .cse307 (let ((.cse308 (= .cse304 .cse307))) (res .cse308 (let ((.cse312 (not .cse302))) (let ((.cse309 (= nfa22 .cse312))) (let-proof ((.cse314 (not- .cse312)) (.cse313 (not+ .cse312))) (res (= .cse309 .cse307) (let ((.cse315 (xor nfa22 .cse312))) (let ((.cse310 (not .cse315))) (res (= .cse310 .cse307) (let ((.cse311 (= .cse315 .cse305))) (res .cse311 (res (xor .cse312 .cse302) (res .cse302 (res .cse312 .cse313 (xor+ (.cse312 .cse302) (.cse302) (.cse312))) (res .cse312 (xor+ (.cse312 .cse302) (.cse312) (.cse302)) .cse314)) (res .cse315 (res .cse305 (=+1 .cse311) (res .cse303 (xor+ (nfa22 .cse312) (nfa22 .cse302) (.cse312 .cse302)) (not- .cse305))) (res .cse305 (res .cse303 .cse306 (xor- (nfa22 .cse302) (.cse312 .cse302) (nfa22 .cse312))) (=+2 .cse311)))) (cong (not .cse315) (not .cse305)))) (let ((.cse316 (= .cse309 .cse310))) (res .cse316 (res .cse309 (res .cse315 (res nfa22 (res .cse312 (=+1 .cse309) (xor+ (nfa22 .cse312) (nfa22) (.cse312))) (res .cse312 (xor+ (nfa22 .cse312) (.cse312) (nfa22)) (=+2 .cse309))) (res .cse310 (=+1 .cse316) (not- .cse310))) (res .cse315 (res .cse310 (not+ .cse310) (=+2 .cse316)) (res nfa22 (res .cse312 (xor+ (nfa22) (.cse312) (nfa22 .cse312)) (=-1 .cse309)) (res .cse312 (=-2 .cse309) (xor- (nfa22) (.cse312) (nfa22 .cse312)))))) (trans .cse309 .cse310 .cse307)))))) (res (= .cse304 .cse309) (let ((.cse317 (= .cse321 .cse312))) (res .cse317 (res (xor .cse318 fa22) (res fa22 (res .cse318 .cse319 (xor+ (.cse318 fa22) (fa22) (.cse318))) (res .cse318 (xor+ (.cse318 fa22) (.cse318) (fa22)) .cse320)) (res .cse321 (res .cse312 (=+1 .cse317) (res .cse302 (xor+ (.cse318 carry21) (fa22 carry21) (.cse318 fa22)) .cse314)) (res .cse312 (res .cse302 .cse313 (xor- (fa22 carry21) (.cse318 fa22) (.cse318 carry21))) (=+2 .cse317)))) (res (= nfa22 nfa22) (refl nfa22) (cong (= nfa22 .cse321) (= nfa22 .cse312))))) (trans .cse304 .cse309 .cse307)))))) (=-2 .cse308))) (not- .cse307))))))))) (xor+ (nfa22) (.cse302) (nfa22 .cse302)))) :proves (+ .cse302 + nfa22) :input) (res .cse322 (res fb18 (res fna19 (res nfa20 (let ((.cse323 (xor fa21 carry20))) (let-proof ((.cse340 (not+ .cse339)) (.cse341 (not- .cse339))) (res .cse323 (! (let ((.cse324 (xor nfa21 .cse323))) (res .cse324 (let ((.cse342 (xor .cse339 carry20))) (let ((.cse325 (= nfa21 .cse342))) (res .cse325 (assume .cse325) (let ((.cse326 (not .cse324))) (let-proof ((.cse327 (not+ .cse326))) (res .cse326 .cse327 (let ((.cse328 (not .cse326))) (res .cse328 (let ((.cse329 (= .cse325 .cse328))) (res .cse329 (let ((.cse333 (not .cse323))) (let ((.cse330 (= nfa21 .cse333))) (let-proof ((.cse335 (not- .cse333)) (.cse334 (not+ .cse333))) (res (= .cse330 .cse328) (let ((.cse336 (xor nfa21 .cse333))) (let ((.cse331 (not .cse336))) (res (= .cse331 .cse328) (let ((.cse332 (= .cse336 .cse326))) (res .cse332 (res (xor .cse333 .cse323) (res .cse323 (res .cse333 .cse334 (xor+ (.cse333 .cse323) (.cse323) (.cse333))) (res .cse333 (xor+ (.cse333 .cse323) (.cse333) (.cse323)) .cse335)) (res .cse336 (res .cse326 (=+1 .cse332) (res .cse324 (xor+ (nfa21 .cse333) (nfa21 .cse323) (.cse333 .cse323)) (not- .cse326))) (res .cse326 (res .cse324 .cse327 (xor- (nfa21 .cse323) (.cse333 .cse323) (nfa21 .cse333))) (=+2 .cse332)))) (cong (not .cse336) (not .cse326)))) (let ((.cse337 (= .cse330 .cse331))) (res .cse337 (res .cse330 (res .cse336 (res nfa21 (res .cse333 (=+1 .cse330) (xor+ (nfa21 .cse333) (nfa21) (.cse333))) (res .cse333 (xor+ (nfa21 .cse333) (.cse333) (nfa21)) (=+2 .cse330))) (res .cse331 (=+1 .cse337) (not- .cse331))) (res .cse336 (res .cse331 (not+ .cse331) (=+2 .cse337)) (res nfa21 (res .cse333 (xor+ (nfa21) (.cse333) (nfa21 .cse333)) (=-1 .cse330)) (res .cse333 (=-2 .cse330) (xor- (nfa21) (.cse333) (nfa21 .cse333)))))) (trans .cse330 .cse331 .cse328)))))) (res (= .cse325 .cse330) (let ((.cse338 (= .cse342 .cse333))) (res .cse338 (res (xor .cse339 fa21) (res fa21 (res .cse339 .cse340 (xor+ (.cse339 fa21) (fa21) (.cse339))) (res .cse339 (xor+ (.cse339 fa21) (.cse339) (fa21)) .cse341)) (res .cse342 (res .cse333 (=+1 .cse338) (res .cse323 (xor+ (.cse339 carry20) (fa21 carry20) (.cse339 fa21)) .cse335)) (res .cse333 (res .cse323 .cse334 (xor- (fa21 carry20) (.cse339 fa21) (.cse339 carry20))) (=+2 .cse338)))) (res (= nfa21 nfa21) (refl nfa21) (cong (= nfa21 .cse342) (= nfa21 .cse333))))) (trans .cse325 .cse330 .cse328)))))) (=-2 .cse329))) (not- .cse328))))))))) (xor+ (nfa21) (.cse323) (nfa21 .cse323)))) :proves (+ .cse323 + nfa21) :input) (res .cse343 (res fb17 (res fna18 (res nfa19 (let ((.cse344 (xor fa20 carry19))) (let-proof ((.cse361 (not+ .cse360)) (.cse362 (not- .cse360))) (res .cse344 (! (let ((.cse345 (xor nfa20 .cse344))) (res .cse345 (let ((.cse363 (xor .cse360 carry19))) (let ((.cse346 (= nfa20 .cse363))) (res .cse346 (assume .cse346) (let ((.cse347 (not .cse345))) (let-proof ((.cse348 (not+ .cse347))) (res .cse347 .cse348 (let ((.cse349 (not .cse347))) (res .cse349 (let ((.cse350 (= .cse346 .cse349))) (res .cse350 (let ((.cse354 (not .cse344))) (let ((.cse351 (= nfa20 .cse354))) (let-proof ((.cse356 (not- .cse354)) (.cse355 (not+ .cse354))) (res (= .cse351 .cse349) (let ((.cse357 (xor nfa20 .cse354))) (let ((.cse352 (not .cse357))) (res (= .cse352 .cse349) (let ((.cse353 (= .cse357 .cse347))) (res .cse353 (res (xor .cse354 .cse344) (res .cse344 (res .cse354 .cse355 (xor+ (.cse354 .cse344) (.cse344) (.cse354))) (res .cse354 (xor+ (.cse354 .cse344) (.cse354) (.cse344)) .cse356)) (res .cse357 (res .cse347 (=+1 .cse353) (res .cse345 (xor+ (nfa20 .cse354) (nfa20 .cse344) (.cse354 .cse344)) (not- .cse347))) (res .cse347 (res .cse345 .cse348 (xor- (nfa20 .cse344) (.cse354 .cse344) (nfa20 .cse354))) (=+2 .cse353)))) (cong (not .cse357) (not .cse347)))) (let ((.cse358 (= .cse351 .cse352))) (res .cse358 (res .cse351 (res .cse357 (res nfa20 (res .cse354 (=+1 .cse351) (xor+ (nfa20 .cse354) (nfa20) (.cse354))) (res .cse354 (xor+ (nfa20 .cse354) (.cse354) (nfa20)) (=+2 .cse351))) (res .cse352 (=+1 .cse358) (not- .cse352))) (res .cse357 (res .cse352 (not+ .cse352) (=+2 .cse358)) (res nfa20 (res .cse354 (xor+ (nfa20) (.cse354) (nfa20 .cse354)) (=-1 .cse351)) (res .cse354 (=-2 .cse351) (xor- (nfa20) (.cse354) (nfa20 .cse354)))))) (trans .cse351 .cse352 .cse349)))))) (res (= .cse346 .cse351) (let ((.cse359 (= .cse363 .cse354))) (res .cse359 (res (xor .cse360 fa20) (res fa20 (res .cse360 .cse361 (xor+ (.cse360 fa20) (fa20) (.cse360))) (res .cse360 (xor+ (.cse360 fa20) (.cse360) (fa20)) .cse362)) (res .cse363 (res .cse354 (=+1 .cse359) (res .cse344 (xor+ (.cse360 carry19) (fa20 carry19) (.cse360 fa20)) .cse356)) (res .cse354 (res .cse344 .cse355 (xor- (fa20 carry19) (.cse360 fa20) (.cse360 carry19))) (=+2 .cse359)))) (res (= nfa20 nfa20) (refl nfa20) (cong (= nfa20 .cse363) (= nfa20 .cse354))))) (trans .cse346 .cse351 .cse349)))))) (=-2 .cse350))) (not- .cse349))))))))) (xor+ (nfa20) (.cse344) (nfa20 .cse344)))) :proves (+ .cse344 + nfa20) :input) (res .cse364 (res fb16 (res fna17 (res nfa18 (let ((.cse365 (xor fa19 carry18))) (let-proof ((.cse383 (not- .cse381)) (.cse382 (not+ .cse381))) (res .cse365 (! (let ((.cse366 (xor nfa19 .cse365))) (res .cse366 (let ((.cse384 (xor .cse381 carry18))) (let ((.cse367 (= nfa19 .cse384))) (res .cse367 (assume .cse367) (let ((.cse368 (not .cse366))) (let-proof ((.cse369 (not+ .cse368))) (res .cse368 .cse369 (let ((.cse370 (not .cse368))) (res .cse370 (let ((.cse371 (= .cse367 .cse370))) (res .cse371 (let ((.cse375 (not .cse365))) (let ((.cse372 (= nfa19 .cse375))) (let-proof ((.cse377 (not- .cse375)) (.cse376 (not+ .cse375))) (res (= .cse372 .cse370) (let ((.cse378 (xor nfa19 .cse375))) (let ((.cse373 (not .cse378))) (res (= .cse373 .cse370) (let ((.cse374 (= .cse378 .cse368))) (res .cse374 (res (xor .cse375 .cse365) (res .cse365 (res .cse375 .cse376 (xor+ (.cse375 .cse365) (.cse365) (.cse375))) (res .cse375 (xor+ (.cse375 .cse365) (.cse375) (.cse365)) .cse377)) (res .cse378 (res .cse368 (=+1 .cse374) (res .cse366 (xor+ (nfa19 .cse375) (nfa19 .cse365) (.cse375 .cse365)) (not- .cse368))) (res .cse368 (res .cse366 .cse369 (xor- (nfa19 .cse365) (.cse375 .cse365) (nfa19 .cse375))) (=+2 .cse374)))) (cong (not .cse378) (not .cse368)))) (let ((.cse379 (= .cse372 .cse373))) (res .cse379 (res .cse372 (res .cse378 (res nfa19 (res .cse375 (=+1 .cse372) (xor+ (nfa19 .cse375) (nfa19) (.cse375))) (res .cse375 (xor+ (nfa19 .cse375) (.cse375) (nfa19)) (=+2 .cse372))) (res .cse373 (=+1 .cse379) (not- .cse373))) (res .cse378 (res .cse373 (not+ .cse373) (=+2 .cse379)) (res nfa19 (res .cse375 (xor+ (nfa19) (.cse375) (nfa19 .cse375)) (=-1 .cse372)) (res .cse375 (=-2 .cse372) (xor- (nfa19) (.cse375) (nfa19 .cse375)))))) (trans .cse372 .cse373 .cse370)))))) (res (= .cse367 .cse372) (let ((.cse380 (= .cse384 .cse375))) (res .cse380 (res (xor .cse381 fa19) (res fa19 (res .cse381 .cse382 (xor+ (.cse381 fa19) (fa19) (.cse381))) (res .cse381 (xor+ (.cse381 fa19) (.cse381) (fa19)) .cse383)) (res .cse384 (res .cse375 (=+1 .cse380) (res .cse365 (xor+ (.cse381 carry18) (fa19 carry18) (.cse381 fa19)) .cse377)) (res .cse375 (res .cse365 .cse376 (xor- (fa19 carry18) (.cse381 fa19) (.cse381 carry18))) (=+2 .cse380)))) (res (= nfa19 nfa19) (refl nfa19) (cong (= nfa19 .cse384) (= nfa19 .cse375))))) (trans .cse367 .cse372 .cse370)))))) (=-2 .cse371))) (not- .cse370))))))))) (xor+ (nfa19) (.cse365) (nfa19 .cse365)))) :proves (+ .cse365 + nfa19) :input) (res fb15 (res fna16 (res nfa17 (let ((.cse385 (xor fa18 carry17))) (let-proof ((.cse403 (not- .cse401)) (.cse402 (not+ .cse401))) (res .cse385 (! (let ((.cse386 (xor nfa18 .cse385))) (res .cse386 (let ((.cse404 (xor .cse401 carry17))) (let ((.cse387 (= nfa18 .cse404))) (res .cse387 (assume .cse387) (let ((.cse388 (not .cse386))) (let-proof ((.cse389 (not+ .cse388))) (res .cse388 .cse389 (let ((.cse390 (not .cse388))) (res .cse390 (let ((.cse391 (= .cse387 .cse390))) (res .cse391 (let ((.cse395 (not .cse385))) (let ((.cse392 (= nfa18 .cse395))) (let-proof ((.cse397 (not- .cse395)) (.cse396 (not+ .cse395))) (res (= .cse392 .cse390) (let ((.cse398 (xor nfa18 .cse395))) (let ((.cse393 (not .cse398))) (res (= .cse393 .cse390) (let ((.cse394 (= .cse398 .cse388))) (res .cse394 (res (xor .cse395 .cse385) (res .cse385 (res .cse395 .cse396 (xor+ (.cse395 .cse385) (.cse385) (.cse395))) (res .cse395 (xor+ (.cse395 .cse385) (.cse395) (.cse385)) .cse397)) (res .cse398 (res .cse388 (=+1 .cse394) (res .cse386 (xor+ (nfa18 .cse395) (nfa18 .cse385) (.cse395 .cse385)) (not- .cse388))) (res .cse388 (res .cse386 .cse389 (xor- (nfa18 .cse385) (.cse395 .cse385) (nfa18 .cse395))) (=+2 .cse394)))) (cong (not .cse398) (not .cse388)))) (let ((.cse399 (= .cse392 .cse393))) (res .cse399 (res .cse392 (res .cse398 (res nfa18 (res .cse395 (=+1 .cse392) (xor+ (nfa18 .cse395) (nfa18) (.cse395))) (res .cse395 (xor+ (nfa18 .cse395) (.cse395) (nfa18)) (=+2 .cse392))) (res .cse393 (=+1 .cse399) (not- .cse393))) (res .cse398 (res .cse393 (not+ .cse393) (=+2 .cse399)) (res nfa18 (res .cse395 (xor+ (nfa18) (.cse395) (nfa18 .cse395)) (=-1 .cse392)) (res .cse395 (=-2 .cse392) (xor- (nfa18) (.cse395) (nfa18 .cse395)))))) (trans .cse392 .cse393 .cse390)))))) (res (= .cse387 .cse392) (let ((.cse400 (= .cse404 .cse395))) (res .cse400 (res (xor .cse401 fa18) (res fa18 (res .cse401 .cse402 (xor+ (.cse401 fa18) (fa18) (.cse401))) (res .cse401 (xor+ (.cse401 fa18) (.cse401) (fa18)) .cse403)) (res .cse404 (res .cse395 (=+1 .cse400) (res .cse385 (xor+ (.cse401 carry17) (fa18 carry17) (.cse401 fa18)) .cse397)) (res .cse395 (res .cse385 .cse396 (xor- (fa18 carry17) (.cse401 fa18) (.cse401 carry17))) (=+2 .cse400)))) (res (= nfa18 nfa18) (refl nfa18) (cong (= nfa18 .cse404) (= nfa18 .cse395))))) (trans .cse387 .cse392 .cse390)))))) (=-2 .cse391))) (not- .cse390))))))))) (xor+ (nfa18) (.cse385) (nfa18 .cse385)))) :proves (+ .cse385 + nfa18) :input) (res fna15 (res nfa16 (let ((.cse405 (xor fa17 carry16))) (let-proof ((.cse423 (not- .cse421)) (.cse422 (not+ .cse421))) (res .cse405 (! (let ((.cse406 (xor nfa17 .cse405))) (res .cse406 (let ((.cse424 (xor .cse421 carry16))) (let ((.cse407 (= nfa17 .cse424))) (res .cse407 (assume .cse407) (let ((.cse408 (not .cse406))) (let-proof ((.cse409 (not+ .cse408))) (res .cse408 .cse409 (let ((.cse410 (not .cse408))) (res .cse410 (let ((.cse411 (= .cse407 .cse410))) (res .cse411 (let ((.cse415 (not .cse405))) (let ((.cse412 (= nfa17 .cse415))) (let-proof ((.cse417 (not- .cse415)) (.cse416 (not+ .cse415))) (res (= .cse412 .cse410) (let ((.cse418 (xor nfa17 .cse415))) (let ((.cse413 (not .cse418))) (res (= .cse413 .cse410) (let ((.cse414 (= .cse418 .cse408))) (res .cse414 (res (xor .cse415 .cse405) (res .cse405 (res .cse415 .cse416 (xor+ (.cse415 .cse405) (.cse405) (.cse415))) (res .cse415 (xor+ (.cse415 .cse405) (.cse415) (.cse405)) .cse417)) (res .cse418 (res .cse408 (=+1 .cse414) (res .cse406 (xor+ (nfa17 .cse415) (nfa17 .cse405) (.cse415 .cse405)) (not- .cse408))) (res .cse408 (res .cse406 .cse409 (xor- (nfa17 .cse405) (.cse415 .cse405) (nfa17 .cse415))) (=+2 .cse414)))) (cong (not .cse418) (not .cse408)))) (let ((.cse419 (= .cse412 .cse413))) (res .cse419 (res .cse412 (res .cse418 (res nfa17 (res .cse415 (=+1 .cse412) (xor+ (nfa17 .cse415) (nfa17) (.cse415))) (res .cse415 (xor+ (nfa17 .cse415) (.cse415) (nfa17)) (=+2 .cse412))) (res .cse413 (=+1 .cse419) (not- .cse413))) (res .cse418 (res .cse413 (not+ .cse413) (=+2 .cse419)) (res nfa17 (res .cse415 (xor+ (nfa17) (.cse415) (nfa17 .cse415)) (=-1 .cse412)) (res .cse415 (=-2 .cse412) (xor- (nfa17) (.cse415) (nfa17 .cse415)))))) (trans .cse412 .cse413 .cse410)))))) (res (= .cse407 .cse412) (let ((.cse420 (= .cse424 .cse415))) (res .cse420 (res (xor .cse421 fa17) (res fa17 (res .cse421 .cse422 (xor+ (.cse421 fa17) (fa17) (.cse421))) (res .cse421 (xor+ (.cse421 fa17) (.cse421) (fa17)) .cse423)) (res .cse424 (res .cse415 (=+1 .cse420) (res .cse405 (xor+ (.cse421 carry16) (fa17 carry16) (.cse421 fa17)) .cse417)) (res .cse415 (res .cse405 .cse416 (xor- (fa17 carry16) (.cse421 fa17) (.cse421 carry16))) (=+2 .cse420)))) (res (= nfa17 nfa17) (refl nfa17) (cong (= nfa17 .cse424) (= nfa17 .cse415))))) (trans .cse407 .cse412 .cse410)))))) (=-2 .cse411))) (not- .cse410))))))))) (xor+ (nfa17) (.cse405) (nfa17 .cse405)))) :proves (+ .cse405 + nfa17) :input) (res nfa15 (let ((.cse425 (xor fa16 carry15))) (let-proof ((.cse443 (not- .cse441)) (.cse442 (not+ .cse441))) (res .cse425 (! (let ((.cse426 (xor nfa16 .cse425))) (res .cse426 (let ((.cse444 (xor .cse441 carry15))) (let ((.cse427 (= nfa16 .cse444))) (res .cse427 (assume .cse427) (let ((.cse428 (not .cse426))) (let-proof ((.cse429 (not+ .cse428))) (res .cse428 .cse429 (let ((.cse430 (not .cse428))) (res .cse430 (let ((.cse431 (= .cse427 .cse430))) (res .cse431 (let ((.cse435 (not .cse425))) (let ((.cse432 (= nfa16 .cse435))) (let-proof ((.cse437 (not- .cse435)) (.cse436 (not+ .cse435))) (res (= .cse432 .cse430) (let ((.cse438 (xor nfa16 .cse435))) (let ((.cse433 (not .cse438))) (res (= .cse433 .cse430) (let ((.cse434 (= .cse438 .cse428))) (res .cse434 (res (xor .cse435 .cse425) (res .cse425 (res .cse435 .cse436 (xor+ (.cse435 .cse425) (.cse425) (.cse435))) (res .cse435 (xor+ (.cse435 .cse425) (.cse435) (.cse425)) .cse437)) (res .cse438 (res .cse428 (=+1 .cse434) (res .cse426 (xor+ (nfa16 .cse435) (nfa16 .cse425) (.cse435 .cse425)) (not- .cse428))) (res .cse428 (res .cse426 .cse429 (xor- (nfa16 .cse425) (.cse435 .cse425) (nfa16 .cse435))) (=+2 .cse434)))) (cong (not .cse438) (not .cse428)))) (let ((.cse439 (= .cse432 .cse433))) (res .cse439 (res .cse432 (res .cse438 (res nfa16 (res .cse435 (=+1 .cse432) (xor+ (nfa16 .cse435) (nfa16) (.cse435))) (res .cse435 (xor+ (nfa16 .cse435) (.cse435) (nfa16)) (=+2 .cse432))) (res .cse433 (=+1 .cse439) (not- .cse433))) (res .cse438 (res .cse433 (not+ .cse433) (=+2 .cse439)) (res nfa16 (res .cse435 (xor+ (nfa16) (.cse435) (nfa16 .cse435)) (=-1 .cse432)) (res .cse435 (=-2 .cse432) (xor- (nfa16) (.cse435) (nfa16 .cse435)))))) (trans .cse432 .cse433 .cse430)))))) (res (= .cse427 .cse432) (let ((.cse440 (= .cse444 .cse435))) (res .cse440 (res (xor .cse441 fa16) (res fa16 (res .cse441 .cse442 (xor+ (.cse441 fa16) (fa16) (.cse441))) (res .cse441 (xor+ (.cse441 fa16) (.cse441) (fa16)) .cse443)) (res .cse444 (res .cse435 (=+1 .cse440) (res .cse425 (xor+ (.cse441 carry15) (fa16 carry15) (.cse441 fa16)) .cse437)) (res .cse435 (res .cse425 .cse436 (xor- (fa16 carry15) (.cse441 fa16) (.cse441 carry15))) (=+2 .cse440)))) (res (= nfa16 nfa16) (refl nfa16) (cong (= nfa16 .cse444) (= nfa16 .cse435))))) (trans .cse427 .cse432 .cse430)))))) (=-2 .cse431))) (not- .cse430))))))))) (xor+ (nfa16) (.cse425) (nfa16 .cse425)))) :proves (+ .cse425 + nfa16) :input) (let ((.cse445 (xor fa15 carry14))) (let-proof ((.cse462 (not+ .cse461)) (.cse463 (not- .cse461))) (res .cse445 (! (let ((.cse446 (xor nfa15 .cse445))) (res .cse446 (let ((.cse464 (xor .cse461 carry14))) (let ((.cse447 (= nfa15 .cse464))) (res .cse447 (assume .cse447) (let ((.cse448 (not .cse446))) (let-proof ((.cse449 (not+ .cse448))) (res .cse448 .cse449 (let ((.cse450 (not .cse448))) (res .cse450 (let ((.cse451 (= .cse447 .cse450))) (res .cse451 (let ((.cse455 (not .cse445))) (let ((.cse452 (= nfa15 .cse455))) (let-proof ((.cse457 (not- .cse455)) (.cse456 (not+ .cse455))) (res (= .cse452 .cse450) (let ((.cse458 (xor nfa15 .cse455))) (let ((.cse453 (not .cse458))) (res (= .cse453 .cse450) (let ((.cse454 (= .cse458 .cse448))) (res .cse454 (res (xor .cse455 .cse445) (res .cse445 (res .cse455 .cse456 (xor+ (.cse455 .cse445) (.cse445) (.cse455))) (res .cse455 (xor+ (.cse455 .cse445) (.cse455) (.cse445)) .cse457)) (res .cse458 (res .cse448 (=+1 .cse454) (res .cse446 (xor+ (nfa15 .cse455) (nfa15 .cse445) (.cse455 .cse445)) (not- .cse448))) (res .cse448 (res .cse446 .cse449 (xor- (nfa15 .cse445) (.cse455 .cse445) (nfa15 .cse455))) (=+2 .cse454)))) (cong (not .cse458) (not .cse448)))) (let ((.cse459 (= .cse452 .cse453))) (res .cse459 (res .cse452 (res .cse458 (res nfa15 (res .cse455 (=+1 .cse452) (xor+ (nfa15 .cse455) (nfa15) (.cse455))) (res .cse455 (xor+ (nfa15 .cse455) (.cse455) (nfa15)) (=+2 .cse452))) (res .cse453 (=+1 .cse459) (not- .cse453))) (res .cse458 (res .cse453 (not+ .cse453) (=+2 .cse459)) (res nfa15 (res .cse455 (xor+ (nfa15) (.cse455) (nfa15 .cse455)) (=-1 .cse452)) (res .cse455 (=-2 .cse452) (xor- (nfa15) (.cse455) (nfa15 .cse455)))))) (trans .cse452 .cse453 .cse450)))))) (res (= .cse447 .cse452) (let ((.cse460 (= .cse464 .cse455))) (res .cse460 (res (xor .cse461 fa15) (res fa15 (res .cse461 .cse462 (xor+ (.cse461 fa15) (fa15) (.cse461))) (res .cse461 (xor+ (.cse461 fa15) (.cse461) (fa15)) .cse463)) (res .cse464 (res .cse455 (=+1 .cse460) (res .cse445 (xor+ (.cse461 carry14) (fa15 carry14) (.cse461 fa15)) .cse457)) (res .cse455 (res .cse445 .cse456 (xor- (fa15 carry14) (.cse461 fa15) (.cse461 carry14))) (=+2 .cse460)))) (res (= nfa15 nfa15) (refl nfa15) (cong (= nfa15 .cse464) (= nfa15 .cse455))))) (trans .cse447 .cse452 .cse450)))))) (=-2 .cse451))) (not- .cse450))))))))) (xor+ (nfa15) (.cse445) (nfa15 .cse445)))) :proves (+ .cse445 + nfa15) :input) (res fa30 (! (res carry29 (! (xor+ (fa30) (carry29) (fa30 carry29)) :proves (+ carry29 + fa30 - .cse0) :input) (! (res .cse1 (res .cse56 .cse465 (and+ .cse1)) (res .cse68 .cse466 .cse70)) :proves (+ fa30 + carry30 - carry29) :input)) :proves (- .cse0 + fa30 + carry30) :rup) (let-proof ((.cse499 (! (xor- (fa30 carry29) (fa30) (carry29)) :proves (- carry29 - fa30 - .cse0) :input))) (res carry29 (let ((.cse486 (and .cse234 carry25)) (.cse476 (and .cse192 carry27))) (let ((.cse495 (xor carry28 .cse476)) (.cse492 (xor carry26 .cse486))) (let-proof ((.cse695 (xor+ (carry28 .cse476) (carry28) (.cse476))) (.cse496 (xor+ (carry28 .cse476) (.cse476) (carry28))) (.cse694 (xor+ (carry26 .cse486) (carry26) (.cse486))) (.cse493 (xor+ (carry26 .cse486) (.cse486) (carry26)))) (let-proof ((.cse494 (let ((.cse700 (= carry26 .cse486))) (res .cse700 (assume .cse700) (let ((.cse701 (not .cse492))) (let-proof ((.cse703 (not- .cse701))) (res .cse701 (let ((.cse702 (= .cse700 .cse701))) (res .cse702 (res .cse700 (res .cse492 (res carry26 (res .cse486 (=+1 .cse700) .cse694) (res .cse486 .cse493 (=+2 .cse700))) (res .cse701 (=+1 .cse702) .cse703)) (res .cse492 (res .cse701 (not+ .cse701) (=+2 .cse702)) (res carry26 (res .cse486 (xor+ (carry26) (.cse486) (carry26 .cse486)) (=-1 .cse700)) (res .cse486 (=-2 .cse700) (xor- (carry26) (.cse486) (carry26 .cse486)))))) (=-2 .cse702))) .cse703)))))) (.cse497 (let ((.cse696 (= carry28 .cse476))) (res .cse696 (assume .cse696) (let ((.cse697 (not .cse495))) (let-proof ((.cse699 (not- .cse697))) (res .cse697 (let ((.cse698 (= .cse696 .cse697))) (res .cse698 (res .cse696 (res .cse495 (res carry28 (res .cse476 (=+1 .cse696) .cse695) (res .cse476 .cse496 (=+2 .cse696))) (res .cse697 (=+1 .cse698) .cse699)) (res .cse495 (res .cse697 (not+ .cse697) (=+2 .cse698)) (res carry28 (res .cse476 (xor+ (carry28) (.cse476) (carry28 .cse476)) (=-1 .cse696)) (res .cse476 (=-2 .cse696) (xor- (carry28) (.cse476) (carry28 .cse476)))))) (=-2 .cse698))) .cse699))))))) (let-proof ((.cse473 (! (xor+ (fa28) (carry27) (fa28 carry27)) :proves (+ carry27 + fa28 - .cse176) :input)) (.cse474 (! (res .cse476 (res .cse192 .cse193 (and+ .cse476)) (res .cse495 .cse695 .cse497)) :proves (+ fa28 - carry27 + carry28) :input)) (.cse483 (! (xor+ (fa26) (carry25) (fa26 carry25)) :proves (+ carry25 + fa26 - .cse218) :input)) (.cse484 (! (res .cse486 (res .cse234 .cse235 (and+ .cse486)) (res .cse492 .cse694 .cse494)) :proves (+ fa26 - carry25 + carry26) :input)) (.cse485 (res fa27 (! (let ((.cse687 (and .cse213 carry26))) (res .cse687 (res .cse213 .cse214 (and+ .cse687)) (let ((.cse688 (xor carry27 .cse687))) (let-proof ((.cse689 (xor+ (carry27 .cse687) (carry27) (.cse687)))) (res .cse688 .cse689 (let ((.cse690 (= carry27 .cse687))) (res .cse690 (assume .cse690) (let ((.cse691 (not .cse688))) (let-proof ((.cse693 (not- .cse691))) (res .cse691 (let ((.cse692 (= .cse690 .cse691))) (res .cse692 (res .cse690 (res .cse688 (res carry27 (res .cse687 (=+1 .cse690) .cse689) (res .cse687 (xor+ (carry27 .cse687) (.cse687) (carry27)) (=+2 .cse690))) (res .cse691 (=+1 .cse692) .cse693)) (res .cse688 (res .cse691 (not+ .cse691) (=+2 .cse692)) (res carry27 (res .cse687 (xor+ (carry27) (.cse687) (carry27 .cse687)) (=-1 .cse690)) (res .cse687 (=-2 .cse690) (xor- (carry27) (.cse687) (carry27 .cse687)))))) (=-2 .cse692))) .cse693)))))))))) :proves (+ fa27 - carry26 + carry27) :input) (! (xor- (fa27 carry26) (fa27) (carry26)) :proves (- carry26 - fa27 - .cse197) :input))) (.cse498 (! (xor- (fa28 carry27) (fa28) (carry27)) :proves (- carry27 - fa28 - .cse176) :input)) (.cse475 (res fa29 (! (let ((.cse680 (and .cse171 carry28))) (res .cse680 (res .cse171 .cse172 (and+ .cse680)) (let ((.cse681 (xor carry29 .cse680))) (let-proof ((.cse682 (xor+ (carry29 .cse680) (carry29) (.cse680)))) (res .cse681 .cse682 (let ((.cse683 (= carry29 .cse680))) (res .cse683 (assume .cse683) (let ((.cse684 (not .cse681))) (let-proof ((.cse686 (not- .cse684))) (res .cse684 (let ((.cse685 (= .cse683 .cse684))) (res .cse685 (res .cse683 (res .cse681 (res carry29 (res .cse680 (=+1 .cse683) .cse682) (res .cse680 (xor+ (carry29 .cse680) (.cse680) (carry29)) (=+2 .cse683))) (res .cse684 (=+1 .cse685) .cse686)) (res .cse681 (res .cse684 (not+ .cse684) (=+2 .cse685)) (res carry29 (res .cse680 (xor+ (carry29) (.cse680) (carry29 .cse680)) (=-1 .cse683)) (res .cse680 (=-2 .cse683) (xor- (carry29) (.cse680) (carry29 .cse680)))))) (=-2 .cse685))) .cse686)))))))))) :proves (+ fa29 - carry28 + carry29) :input) (! (xor- (fa29 carry28) (fa29) (carry28)) :proves (- carry28 - fa29 - .cse155) :input)))) (res .cse467 (! (res .cse468 .cse469 (res carry29 (res .cse470 (res .cse471 (! (res .cse472 (and- 1 .cse468) (or- .cse472)) :proves (+ .cse471 + .cse470 - .cse468) :input) (res fa28 (res carry27 .cse473 (res carry28 .cse474 .cse475)) (! (res .cse476 (res carry27 (res .cse477 (res carry28 (res fa29 (! (xor+ (fa29) (carry28) (fa29 carry28)) :proves (+ carry28 + fa29 - .cse155) :input) (res .cse478 (res .cse479 (! (res .cse480 (and- 1 .cse471) (or- .cse480)) :proves (+ .cse479 + .cse478 - .cse471) :input) (res .cse481 (! (res .cse482 (and- 1 .cse479) (or- .cse482)) :proves (+ .cse477 + .cse481 - .cse479) :input) (res fa26 (res carry25 .cse483 (res carry26 .cse484 .cse485)) (! (res .cse486 (res .cse487 (res carry26 (res .cse488 (res fa27 (! (xor+ (fa27) (carry26) (fa27 carry26)) :proves (+ carry26 + fa27 - .cse197) :input) (res .cse489 (! (res .cse490 (and- 1 .cse481) (or- .cse490)) :proves (+ .cse488 + .cse489 - .cse481) :input) (! (res .cse213 (and- 0 .cse489) .cse215) :proves (- .cse489 - fa27) :input))) (! (res .cse491 (and- 1 .cse488) (or- .cse491)) :proves (+ .cse467 + .cse487 - .cse488) :input)) (! (res .cse492 .cse493 .cse494) :proves (+ .cse486 - carry26) :input)) (! (res .cse234 (and- 0 .cse487) .cse236) :proves (- .cse487 - fa26) :input)) (! (res .cse234 (and- 0 .cse486) .cse236) :proves (- .cse486 - fa26) :input)) :proves (- fa26 + .cse467 - .cse481 - .cse197) :rup)))) (! (res .cse171 (and- 0 .cse478) .cse173) :proves (- .cse478 - fa29) :input))) (! (res .cse495 .cse496 .cse497) :proves (+ .cse476 - carry28) :input)) (! (res .cse192 (and- 0 .cse477) .cse194) :proves (- .cse477 - fa28) :input)) .cse498) (! (res .cse192 (and- 0 .cse476) .cse194) :proves (- .cse476 - fa28) :input)) :proves (- fa28 + .cse467 - .cse471 - .cse155 - .cse197 - .cse176 - .cse218) :rup))) (! (res .cse56 (and- 0 .cse470) .cse57) :proves (- .cse470 - fa30) :input)) .cse499)) :proves (+ .cse467 - fa30 - .cse155 - .cse197 - .cse176 - .cse0 - .cse218) :rup) (res carry28 (res fa28 (! (res carry27 .cse473 .cse474) :proves (+ fa28 - .cse176 + carry28) :rup) (res carry27 (res carry26 (res fa26 (! (res carry25 .cse483 .cse484) :proves (+ fa26 + carry26 - .cse218) :rup) (res carry25 (let ((.cse500 (and .cse318 carry21)) (.cse502 (and .cse297 carry22)) (.cse504 (and .cse276 carry23))) (let ((.cse649 (xor carry24 .cse504)) (.cse652 (xor carry23 .cse502)) (.cse655 (xor carry22 .cse500))) (let-proof ((.cse660 (xor+ (carry24 .cse504) (carry24) (.cse504))) (.cse650 (xor+ (carry24 .cse504) (.cse504) (carry24))) (.cse659 (xor+ (carry23 .cse502) (carry23) (.cse502))) (.cse653 (xor+ (carry23 .cse502) (.cse502) (carry23))) (.cse658 (xor+ (carry22 .cse500) (carry22) (.cse500))) (.cse656 (xor+ (carry22 .cse500) (.cse500) (carry22)))) (let-proof ((.cse657 (let ((.cse676 (= carry22 .cse500))) (res .cse676 (assume .cse676) (let ((.cse677 (not .cse655))) (let-proof ((.cse679 (not- .cse677))) (res .cse677 (let ((.cse678 (= .cse676 .cse677))) (res .cse678 (res .cse676 (res .cse655 (res carry22 (res .cse500 (=+1 .cse676) .cse658) (res .cse500 .cse656 (=+2 .cse676))) (res .cse677 (=+1 .cse678) .cse679)) (res .cse655 (res .cse677 (not+ .cse677) (=+2 .cse678)) (res carry22 (res .cse500 (xor+ (carry22) (.cse500) (carry22 .cse500)) (=-1 .cse676)) (res .cse500 (=-2 .cse676) (xor- (carry22) (.cse500) (carry22 .cse500)))))) (=-2 .cse678))) .cse679)))))) (.cse654 (let ((.cse672 (= carry23 .cse502))) (res .cse672 (assume .cse672) (let ((.cse673 (not .cse652))) (let-proof ((.cse675 (not- .cse673))) (res .cse673 (let ((.cse674 (= .cse672 .cse673))) (res .cse674 (res .cse672 (res .cse652 (res carry23 (res .cse502 (=+1 .cse672) .cse659) (res .cse502 .cse653 (=+2 .cse672))) (res .cse673 (=+1 .cse674) .cse675)) (res .cse652 (res .cse673 (not+ .cse673) (=+2 .cse674)) (res carry23 (res .cse502 (xor+ (carry23) (.cse502) (carry23 .cse502)) (=-1 .cse672)) (res .cse502 (=-2 .cse672) (xor- (carry23) (.cse502) (carry23 .cse502)))))) (=-2 .cse674))) .cse675)))))) (.cse651 (let ((.cse668 (= carry24 .cse504))) (res .cse668 (assume .cse668) (let ((.cse669 (not .cse649))) (let-proof ((.cse671 (not- .cse669))) (res .cse669 (let ((.cse670 (= .cse668 .cse669))) (res .cse670 (res .cse668 (res .cse649 (res carry24 (res .cse504 (=+1 .cse668) .cse660) (res .cse504 .cse650 (=+2 .cse668))) (res .cse669 (=+1 .cse670) .cse671)) (res .cse649 (res .cse669 (not+ .cse669) (=+2 .cse670)) (res carry24 (res .cse504 (xor+ (carry24) (.cse504) (carry24 .cse504)) (=-1 .cse668)) (res .cse504 (=-2 .cse668) (xor- (carry24) (.cse504) (carry24 .cse504)))))) (=-2 .cse670))) .cse671))))))) (res carry21 (! (res .cse500 (res fa22 (! (xor+ (fa22) (carry21) (fa22 carry21)) :proves (+ carry21 + fa22 - .cse302) :input) (res carry22 (res .cse501 (res .cse502 (res fa23 (! (xor+ (fa23) (carry22) (fa23 carry22)) :proves (+ carry22 + fa23 - .cse281) :input) (res carry23 (res .cse503 (res .cse504 (res fa24 (! (xor+ (fa24) (carry23) (fa24 carry23)) :proves (+ carry23 + fa24 - .cse260) :input) (res carry24 (res .cse505 (res fa25 (! (xor+ (fa25) (carry24) (fa25 carry24)) :proves (+ carry24 + fa25 - .cse239) :input) (res .cse506 (res .cse507 (! (res .cse508 (and- 1 .cse467) (or- .cse508)) :proves (+ .cse507 + .cse506 - .cse467) :input) (res .cse509 (! (res .cse510 (and- 1 .cse507) (or- .cse510)) :proves (- .cse507 + .cse509 + .cse505) :input) (res .cse511 (! (res .cse512 (and- 1 .cse509) (or- .cse512)) :proves (- .cse509 + .cse511 + .cse503) :input) (res .cse513 (! (res .cse514 (and- 1 .cse511) (or- .cse514)) :proves (- .cse511 + .cse513 + .cse501) :input) (res fa21 (res carry20 (! (xor+ (fa21) (carry20) (fa21 carry20)) :proves (+ carry20 + fa21 - .cse323) :input) (! (let ((.cse515 (and .cse339 carry20))) (res .cse515 (res .cse339 .cse340 (and+ .cse515)) (let ((.cse516 (xor carry21 .cse515))) (let-proof ((.cse517 (xor+ (carry21 .cse515) (carry21) (.cse515)))) (res .cse516 .cse517 (let ((.cse518 (= carry21 .cse515))) (res .cse518 (assume .cse518) (let ((.cse519 (not .cse516))) (let-proof ((.cse521 (not- .cse519))) (res .cse519 (let ((.cse520 (= .cse518 .cse519))) (res .cse520 (res .cse518 (res .cse516 (res carry21 (res .cse515 (=+1 .cse518) .cse517) (res .cse515 (xor+ (carry21 .cse515) (.cse515) (carry21)) (=+2 .cse518))) (res .cse519 (=+1 .cse520) .cse521)) (res .cse516 (res .cse519 (not+ .cse519) (=+2 .cse520)) (res carry21 (res .cse515 (xor+ (carry21) (.cse515) (carry21 .cse515)) (=-1 .cse518)) (res .cse515 (=-2 .cse518) (xor- (carry21) (.cse515) (carry21 .cse515)))))) (=-2 .cse520))) .cse521)))))))))) :proves (+ fa21 + carry21 - carry20) :input)) (! (res carry20 (res .cse522 (res .cse523 (! (res .cse524 (and- 1 .cse513) (or- .cse524)) :proves (+ .cse522 + .cse523 - .cse513) :input) (res fa20 (! (res carry19 (! (xor+ (fa20) (carry19) (fa20 carry19)) :proves (+ carry19 + fa20 - .cse344) :input) (! (let ((.cse525 (and .cse360 carry19))) (res .cse525 (res .cse360 .cse361 (and+ .cse525)) (let ((.cse526 (xor carry20 .cse525))) (let-proof ((.cse527 (xor+ (carry20 .cse525) (carry20) (.cse525)))) (res .cse526 .cse527 (let ((.cse528 (= carry20 .cse525))) (res .cse528 (assume .cse528) (let ((.cse529 (not .cse526))) (let-proof ((.cse531 (not- .cse529))) (res .cse529 (let ((.cse530 (= .cse528 .cse529))) (res .cse530 (res .cse528 (res .cse526 (res carry20 (res .cse525 (=+1 .cse528) .cse527) (res .cse525 (xor+ (carry20 .cse525) (.cse525) (carry20)) (=+2 .cse528))) (res .cse529 (=+1 .cse530) .cse531)) (res .cse526 (res .cse529 (not+ .cse529) (=+2 .cse530)) (res carry20 (res .cse525 (xor+ (carry20) (.cse525) (carry20 .cse525)) (=-1 .cse528)) (res .cse525 (=-2 .cse528) (xor- (carry20) (.cse525) (carry20 .cse525)))))) (=-2 .cse530))) .cse531)))))))))) :proves (+ fa20 + carry20 - carry19) :input)) :proves (+ fa20 + carry20 - .cse344) :rup) (res carry19 (res .cse532 (res .cse533 (! (res .cse534 (and- 1 .cse523) (or- .cse534)) :proves (+ .cse533 + .cse532 - .cse523) :input) (let ((.cse536 (and .cse441 carry15)) (.cse538 (and .cse421 carry16)) (.cse540 (and .cse401 carry17))) (let ((.cse560 (xor carry18 .cse540)) (.cse563 (xor carry17 .cse538)) (.cse566 (xor carry16 .cse536))) (let-proof ((.cse629 (xor+ (carry18 .cse540) (carry18) (.cse540))) (.cse561 (xor+ (carry18 .cse540) (.cse540) (carry18))) (.cse628 (xor+ (carry17 .cse538) (carry17) (.cse538))) (.cse564 (xor+ (carry17 .cse538) (.cse538) (carry17))) (.cse627 (xor+ (carry16 .cse536) (carry16) (.cse536))) (.cse567 (xor+ (carry16 .cse536) (.cse536) (carry16)))) (let-proof ((.cse568 (let ((.cse645 (= carry16 .cse536))) (res .cse645 (assume .cse645) (let ((.cse646 (not .cse566))) (let-proof ((.cse648 (not- .cse646))) (res .cse646 (let ((.cse647 (= .cse645 .cse646))) (res .cse647 (res .cse645 (res .cse566 (res carry16 (res .cse536 (=+1 .cse645) .cse627) (res .cse536 .cse567 (=+2 .cse645))) (res .cse646 (=+1 .cse647) .cse648)) (res .cse566 (res .cse646 (not+ .cse646) (=+2 .cse647)) (res carry16 (res .cse536 (xor+ (carry16) (.cse536) (carry16 .cse536)) (=-1 .cse645)) (res .cse536 (=-2 .cse645) (xor- (carry16) (.cse536) (carry16 .cse536)))))) (=-2 .cse647))) .cse648)))))) (.cse565 (let ((.cse641 (= carry17 .cse538))) (res .cse641 (assume .cse641) (let ((.cse642 (not .cse563))) (let-proof ((.cse644 (not- .cse642))) (res .cse642 (let ((.cse643 (= .cse641 .cse642))) (res .cse643 (res .cse641 (res .cse563 (res carry17 (res .cse538 (=+1 .cse641) .cse628) (res .cse538 .cse564 (=+2 .cse641))) (res .cse642 (=+1 .cse643) .cse644)) (res .cse563 (res .cse642 (not+ .cse642) (=+2 .cse643)) (res carry17 (res .cse538 (xor+ (carry17) (.cse538) (carry17 .cse538)) (=-1 .cse641)) (res .cse538 (=-2 .cse641) (xor- (carry17) (.cse538) (carry17 .cse538)))))) (=-2 .cse643))) .cse644)))))) (.cse562 (let ((.cse637 (= carry18 .cse540))) (res .cse637 (assume .cse637) (let ((.cse638 (not .cse560))) (let-proof ((.cse640 (not- .cse638))) (res .cse638 (let ((.cse639 (= .cse637 .cse638))) (res .cse639 (res .cse637 (res .cse560 (res carry18 (res .cse540 (=+1 .cse637) .cse629) (res .cse540 .cse561 (=+2 .cse637))) (res .cse638 (=+1 .cse639) .cse640)) (res .cse560 (res .cse638 (not+ .cse638) (=+2 .cse639)) (res carry18 (res .cse540 (xor+ (carry18) (.cse540) (carry18 .cse540)) (=-1 .cse637)) (res .cse540 (=-2 .cse637) (xor- (carry18) (.cse540) (carry18 .cse540)))))) (=-2 .cse639))) .cse640))))))) (res carry15 (! (res .cse535 (res .cse536 (res fa16 (! (xor+ (fa16) (carry15) (fa16 carry15)) :proves (+ carry15 + fa16 - .cse425) :input) (res carry16 (res .cse537 (res .cse538 (res fa17 (! (xor+ (fa17) (carry16) (fa17 carry16)) :proves (+ carry16 + fa17 - .cse405) :input) (res carry17 (res .cse539 (res .cse540 (res fa18 (! (xor+ (fa18) (carry17) (fa18 carry17)) :proves (+ carry17 + fa18 - .cse385) :input) (res carry18 (res .cse541 (res fa19 (! (xor+ (fa19) (carry18) (fa19 carry18)) :proves (+ carry18 + fa19 - .cse365) :input) (res .cse542 (res .cse543 (! (res .cse544 (and- 1 .cse533) (or- .cse544)) :proves (+ .cse543 + .cse542 - .cse533) :input) (res .cse545 (! (res .cse546 (and- 1 .cse543) (or- .cse546)) :proves (- .cse543 + .cse545 + .cse541) :input) (res .cse547 (! (res .cse548 (and- 1 .cse545) (or- .cse548)) :proves (- .cse545 + .cse547 + .cse539) :input) (res .cse549 (! (res .cse550 (and- 1 .cse547) (or- .cse550)) :proves (- .cse547 + .cse549 + .cse537) :input) (res .cse551 (! (res .cse552 (and- 1 .cse549) (or- .cse552)) :proves (- .cse549 + .cse551 + .cse535) :input) (res fa15 (res carry14 (! (xor+ (fa15) (carry14) (fa15 carry14)) :proves (+ carry14 + fa15 - .cse445) :input) (! (let ((.cse553 (and .cse461 carry14))) (res .cse553 (res .cse461 .cse462 (and+ .cse553)) (let ((.cse554 (xor carry15 .cse553))) (let-proof ((.cse555 (xor+ (carry15 .cse553) (carry15) (.cse553)))) (res .cse554 .cse555 (let ((.cse556 (= carry15 .cse553))) (res .cse556 (assume .cse556) (let ((.cse557 (not .cse554))) (let-proof ((.cse559 (not- .cse557))) (res .cse557 (let ((.cse558 (= .cse556 .cse557))) (res .cse558 (res .cse556 (res .cse554 (res carry15 (res .cse553 (=+1 .cse556) .cse555) (res .cse553 (xor+ (carry15 .cse553) (.cse553) (carry15)) (=+2 .cse556))) (res .cse557 (=+1 .cse558) .cse559)) (res .cse554 (res .cse557 (not+ .cse557) (=+2 .cse558)) (res carry15 (res .cse553 (xor+ (carry15) (.cse553) (carry15 .cse553)) (=-1 .cse556)) (res .cse553 (=-2 .cse556) (xor- (carry15) (.cse553) (carry15 .cse553)))))) (=-2 .cse558))) .cse559)))))))))) :proves (+ fa15 + carry15 - carry14) :input)) (! (res .cse461 (and- 0 .cse551) .cse463) :proves (- .cse551 - fa15) :input))))))) (! (res .cse381 (and- 0 .cse542) .cse383) :proves (- .cse542 - fa19) :input))) (! (res .cse401 (and- 0 .cse541) .cse403) :proves (- .cse541 - fa18) :input)) (! (res .cse560 .cse561 .cse562) :proves (+ .cse540 - carry18) :input))) (! (and- 1 .cse540) :proves (- .cse540 + carry17) :input)) (! (res .cse421 (and- 0 .cse539) .cse423) :proves (- .cse539 - fa17) :input)) (! (res .cse563 .cse564 .cse565) :proves (+ .cse538 - carry17) :input))) (! (and- 1 .cse538) :proves (- .cse538 + carry16) :input)) (! (res .cse441 (and- 0 .cse537) .cse443) :proves (- .cse537 - fa16) :input)) (! (res .cse566 .cse567 .cse568) :proves (+ .cse536 - carry16) :input))) (! (and- 1 .cse536) :proves (- .cse536 + carry15) :input)) (! (res .cse569 (res .cse570 (! (res .cse571 (and- 1 .cse535) (or- .cse571)) :proves (- .cse535 + .cse570 + .cse569) :input) (! (res min14 (! (and- 1 .cse570) :proves (- .cse570 + min14) :input) (! (let ((.cse572 (not min14))) (res .cse572 (assume .cse572) (not- .cse572))) :proves (- min14) :input)) :proves (- .cse570) :rup)) (! (res .cse573 (res .cse574 (! (res .cse575 (and- 1 .cse569) (or- .cse575)) :proves (- .cse569 + .cse574 + .cse573) :input) (! (res min13 (! (and- 1 .cse574) :proves (- .cse574 + min13) :input) (! (let ((.cse576 (not min13))) (res .cse576 (assume .cse576) (not- .cse576))) :proves (- min13) :input)) :proves (- .cse574) :rup)) (! (res .cse577 (res .cse578 (! (res .cse579 (and- 1 .cse573) (or- .cse579)) :proves (- .cse573 + .cse578 + .cse577) :input) (! (res min12 (! (and- 1 .cse578) :proves (- .cse578 + min12) :input) (! (let ((.cse580 (not min12))) (res .cse580 (assume .cse580) (not- .cse580))) :proves (- min12) :input)) :proves (- .cse578) :rup)) (! (res .cse581 (res .cse582 (! (res .cse583 (and- 1 .cse577) (or- .cse583)) :proves (- .cse577 + .cse582 + .cse581) :input) (! (res min11 (! (and- 1 .cse582) :proves (- .cse582 + min11) :input) (! (let ((.cse584 (not min11))) (res .cse584 (assume .cse584) (not- .cse584))) :proves (- min11) :input)) :proves (- .cse582) :rup)) (! (res .cse585 (res .cse586 (! (res .cse587 (and- 1 .cse581) (or- .cse587)) :proves (- .cse581 + .cse586 + .cse585) :input) (! (res min10 (! (and- 1 .cse586) :proves (- .cse586 + min10) :input) (! (let ((.cse588 (not min10))) (res .cse588 (assume .cse588) (not- .cse588))) :proves (- min10) :input)) :proves (- .cse586) :rup)) (! (res .cse589 (res .cse590 (! (res .cse591 (and- 1 .cse585) (or- .cse591)) :proves (- .cse585 + .cse590 + .cse589) :input) (! (res min9 (! (and- 1 .cse590) :proves (- .cse590 + min9) :input) (! (let ((.cse592 (not min9))) (res .cse592 (assume .cse592) (not- .cse592))) :proves (- min9) :input)) :proves (- .cse590) :rup)) (! (res .cse593 (res .cse594 (! (res .cse595 (and- 1 .cse589) (or- .cse595)) :proves (- .cse589 + .cse594 + .cse593) :input) (! (res min8 (! (and- 1 .cse594) :proves (- .cse594 + min8) :input) (! (let ((.cse596 (not min8))) (res .cse596 (assume .cse596) (not- .cse596))) :proves (- min8) :input)) :proves (- .cse594) :rup)) (! (res .cse597 (res .cse598 (! (res .cse599 (and- 1 .cse593) (or- .cse599)) :proves (- .cse593 + .cse598 + .cse597) :input) (! (res min7 (! (and- 1 .cse598) :proves (- .cse598 + min7) :input) (! (let ((.cse600 (not min7))) (res .cse600 (assume .cse600) (not- .cse600))) :proves (- min7) :input)) :proves (- .cse598) :rup)) (! (res .cse601 (res .cse602 (! (res .cse603 (and- 1 .cse597) (or- .cse603)) :proves (- .cse597 + .cse602 + .cse601) :input) (! (res min6 (! (and- 1 .cse602) :proves (- .cse602 + min6) :input) (! (let ((.cse604 (not min6))) (res .cse604 (assume .cse604) (not- .cse604))) :proves (- min6) :input)) :proves (- .cse602) :rup)) (! (res .cse605 (res .cse606 (! (res .cse607 (and- 1 .cse601) (or- .cse607)) :proves (- .cse601 + .cse606 + .cse605) :input) (! (res min5 (! (and- 1 .cse606) :proves (- .cse606 + min5) :input) (! (let ((.cse608 (not min5))) (res .cse608 (assume .cse608) (not- .cse608))) :proves (- min5) :input)) :proves (- .cse606) :rup)) (! (res .cse609 (res .cse610 (! (res .cse611 (and- 1 .cse605) (or- .cse611)) :proves (- .cse605 + .cse610 + .cse609) :input) (! (res min4 (! (and- 1 .cse610) :proves (- .cse610 + min4) :input) (! (let ((.cse612 (not min4))) (res .cse612 (assume .cse612) (not- .cse612))) :proves (- min4) :input)) :proves (- .cse610) :rup)) (! (res .cse613 (res .cse614 (! (res .cse615 (and- 1 .cse609) (or- .cse615)) :proves (- .cse609 + .cse614 + .cse613) :input) (! (res min3 (! (and- 1 .cse614) :proves (- .cse614 + min3) :input) (! (let ((.cse616 (not min3))) (res .cse616 (assume .cse616) (not- .cse616))) :proves (- min3) :input)) :proves (- .cse614) :rup)) (! (res .cse617 (res .cse618 (! (res .cse619 (and- 1 .cse613) (or- .cse619)) :proves (- .cse613 + .cse618 + .cse617) :input) (! (res min2 (! (and- 1 .cse618) :proves (- .cse618 + min2) :input) (! (let ((.cse620 (not min2))) (res .cse620 (assume .cse620) (not- .cse620))) :proves (- min2) :input)) :proves (- .cse618) :rup)) (! (res .cse621 (res .cse622 (! (res .cse623 (and- 1 .cse617) (or- .cse623)) :proves (- .cse617 + .cse622 + .cse621) :input) (! (res min1 (! (and- 1 .cse622) :proves (- .cse622 + min1) :input) (! (let ((.cse624 (not min1))) (res .cse624 (assume .cse624) (not- .cse624))) :proves (- min1) :input)) :proves (- .cse622) :rup)) (! (res .cse625 (! (and- 1 .cse621) :proves (- .cse621 + .cse625) :input) (! (res min0 (! (and- 1 .cse625) :proves (- .cse625 + min0) :input) (! (let ((.cse626 (not min0))) (res .cse626 (assume .cse626) (not- .cse626))) :proves (- min0) :input)) :proves (- .cse625) :rup)) :proves (- .cse621) :rup)) :proves (- .cse617) :rup)) :proves (- .cse613) :rup)) :proves (- .cse609) :rup)) :proves (- .cse605) :rup)) :proves (- .cse601) :rup)) :proves (- .cse597) :rup)) :proves (- .cse593) :rup)) :proves (- .cse589) :rup)) :proves (- .cse585) :rup)) :proves (- .cse581) :rup)) :proves (- .cse577) :rup)) :proves (- .cse573) :rup)) :proves (- .cse569) :rup)) :proves (- .cse535) :rup)) :proves (- .cse533 + carry15 - .cse405 - .cse445 - .cse365 - .cse425 - .cse385) :rup) (res fa16 (res carry16 (! (res .cse536 (res .cse441 .cse442 (and+ .cse536)) (res .cse566 .cse627 .cse568)) :proves (+ fa16 + carry16 - carry15) :input) (res fa17 (res carry17 (! (res .cse538 (res .cse421 .cse422 (and+ .cse538)) (res .cse563 .cse628 .cse565)) :proves (+ fa17 + carry17 - carry16) :input) (res fa18 (res carry18 (! (res .cse540 (res .cse401 .cse402 (and+ .cse540)) (res .cse560 .cse629 .cse562)) :proves (+ fa18 + carry18 - carry17) :input) (res fa19 (! (let ((.cse630 (and .cse381 carry18))) (res .cse630 (res .cse381 .cse382 (and+ .cse630)) (let ((.cse631 (xor carry19 .cse630))) (let-proof ((.cse632 (xor+ (carry19 .cse630) (carry19) (.cse630)))) (res .cse631 .cse632 (let ((.cse633 (= carry19 .cse630))) (res .cse633 (assume .cse633) (let ((.cse634 (not .cse631))) (let-proof ((.cse636 (not- .cse634))) (res .cse634 (let ((.cse635 (= .cse633 .cse634))) (res .cse635 (res .cse633 (res .cse631 (res carry19 (res .cse630 (=+1 .cse633) .cse632) (res .cse630 (xor+ (carry19 .cse630) (.cse630) (carry19)) (=+2 .cse633))) (res .cse634 (=+1 .cse635) .cse636)) (res .cse631 (res .cse634 (not+ .cse634) (=+2 .cse635)) (res carry19 (res .cse630 (xor+ (carry19) (.cse630) (carry19 .cse630)) (=-1 .cse633)) (res .cse630 (=-2 .cse633) (xor- (carry19) (.cse630) (carry19 .cse630)))))) (=-2 .cse635))) .cse636)))))))))) :proves (+ fa19 + carry19 - carry18) :input) (! (xor- (fa19 carry18) (fa19) (carry18)) :proves (- carry18 - fa19 - .cse365) :input))) (! (xor- (fa18 carry17) (fa18) (carry17)) :proves (- carry17 - fa18 - .cse385) :input))) (! (xor- (fa17 carry16) (fa17) (carry16)) :proves (- carry16 - fa17 - .cse405) :input))) (! (xor- (fa16 carry15) (fa16) (carry15)) :proves (- carry15 - fa16 - .cse425) :input)))))))) (! (res .cse360 (and- 0 .cse532) .cse362) :proves (- .cse532 - fa20) :input)) (! (xor- (fa20 carry19) (fa20) (carry19)) :proves (- carry19 - fa20 - .cse344) :input)))) (! (res .cse339 (and- 0 .cse522) .cse341) :proves (- .cse522 - fa21) :input)) (! (xor- (fa21 carry20) (fa21) (carry20)) :proves (- carry20 - fa21 - .cse323) :input)) :proves (- fa21 - .cse513 - .cse405 - .cse445 - .cse323 - .cse365 - .cse425 - .cse344 - .cse385) :rup)))))) (! (res .cse255 (and- 0 .cse506) .cse257) :proves (- .cse506 - fa25) :input))) (! (res .cse276 (and- 0 .cse505) .cse278) :proves (- .cse505 - fa24) :input)) (! (res .cse649 .cse650 .cse651) :proves (+ .cse504 - carry24) :input))) (! (and- 1 .cse504) :proves (- .cse504 + carry23) :input)) (! (res .cse297 (and- 0 .cse503) .cse299) :proves (- .cse503 - fa23) :input)) (! (res .cse652 .cse653 .cse654) :proves (+ .cse502 - carry23) :input))) (! (and- 1 .cse502) :proves (- .cse502 + carry22) :input)) (! (res .cse318 (and- 0 .cse501) .cse320) :proves (- .cse501 - fa22) :input)) (! (res .cse655 .cse656 .cse657) :proves (+ .cse500 - carry22) :input))) (! (and- 1 .cse500) :proves (- .cse500 + carry21) :input)) :proves (+ carry21 - .cse281 - .cse260 - .cse405 - .cse385 - .cse323 - .cse302 - .cse467 - .cse239 - .cse425 - .cse365 - .cse344 - .cse445) :rup) (res fa22 (res carry22 (! (res .cse500 (res .cse318 .cse319 (and+ .cse500)) (res .cse655 .cse658 .cse657)) :proves (+ fa22 + carry22 - carry21) :input) (res fa23 (res carry23 (! (res .cse502 (res .cse297 .cse298 (and+ .cse502)) (res .cse652 .cse659 .cse654)) :proves (+ fa23 + carry23 - carry22) :input) (res fa24 (res carry24 (! (res .cse504 (res .cse276 .cse277 (and+ .cse504)) (res .cse649 .cse660 .cse651)) :proves (+ fa24 + carry24 - carry23) :input) (res fa25 (! (let ((.cse661 (and .cse255 carry24))) (res .cse661 (res .cse255 .cse256 (and+ .cse661)) (let ((.cse662 (xor carry25 .cse661))) (let-proof ((.cse663 (xor+ (carry25 .cse661) (carry25) (.cse661)))) (res .cse662 .cse663 (let ((.cse664 (= carry25 .cse661))) (res .cse664 (assume .cse664) (let ((.cse665 (not .cse662))) (let-proof ((.cse667 (not- .cse665))) (res .cse665 (let ((.cse666 (= .cse664 .cse665))) (res .cse666 (res .cse664 (res .cse662 (res carry25 (res .cse661 (=+1 .cse664) .cse663) (res .cse661 (xor+ (carry25 .cse661) (.cse661) (carry25)) (=+2 .cse664))) (res .cse665 (=+1 .cse666) .cse667)) (res .cse662 (res .cse665 (not+ .cse665) (=+2 .cse666)) (res carry25 (res .cse661 (xor+ (carry25) (.cse661) (carry25 .cse661)) (=-1 .cse664)) (res .cse661 (=-2 .cse664) (xor- (carry25) (.cse661) (carry25 .cse661)))))) (=-2 .cse666))) .cse667)))))))))) :proves (+ fa25 - carry24 + carry25) :input) (! (xor- (fa25 carry24) (fa25) (carry24)) :proves (- carry24 - fa25 - .cse239) :input))) (! (xor- (fa24 carry23) (fa24) (carry23)) :proves (- carry23 - fa24 - .cse260) :input))) (! (xor- (fa23 carry22) (fa23) (carry22)) :proves (- carry22 - fa23 - .cse281) :input))) (! (xor- (fa22 carry21) (fa22) (carry21)) :proves (- carry21 - fa22 - .cse302) :input))))))) (! (xor- (fa26 carry25) (fa26) (carry25)) :proves (- carry25 - fa26 - .cse218) :input))) (! .cse485 :proves (- carry26 + carry27 - .cse197) :rup)) .cse498)) (! .cse475 :proves (- carry28 + carry29 - .cse155) :rup)))))))) .cse499))))))))) (! (let ((.cse704 (xor fna15 nfa15))) (let-proof ((.cse705 (xor+ (fna15 nfa15) (fna15) (nfa15)))) (res .cse704 .cse705 (let ((.cse706 (= fna15 nfa15))) (res .cse706 (assume .cse706) (let ((.cse707 (not .cse704))) (let-proof ((.cse709 (not- .cse707))) (res .cse707 (let ((.cse708 (= .cse706 .cse707))) (res .cse708 (res .cse706 (res .cse704 (res fna15 (res nfa15 (=+1 .cse706) .cse705) (res nfa15 (xor+ (fna15 nfa15) (nfa15) (fna15)) (=+2 .cse706))) (res .cse707 (=+1 .cse708) .cse709)) (res .cse704 (res .cse707 (not+ .cse707) (=+2 .cse708)) (res fna15 (res nfa15 (xor+ (fna15) (nfa15) (fna15 nfa15)) (=-1 .cse706)) (res nfa15 (=-2 .cse706) (xor- (fna15) (nfa15) (fna15 nfa15)))))) (=-2 .cse708))) .cse709)))))))) :proves (- nfa15 + fna15) :input))))) (! (let ((.cse710 (xor fna16 nfa16))) (let-proof ((.cse711 (xor+ (fna16 nfa16) (fna16) (nfa16)))) (res .cse710 .cse711 (let ((.cse712 (= fna16 nfa16))) (res .cse712 (assume .cse712) (let ((.cse713 (not .cse710))) (let-proof ((.cse715 (not- .cse713))) (res .cse713 (let ((.cse714 (= .cse712 .cse713))) (res .cse714 (res .cse712 (res .cse710 (res fna16 (res nfa16 (=+1 .cse712) .cse711) (res nfa16 (xor+ (fna16 nfa16) (nfa16) (fna16)) (=+2 .cse712))) (res .cse713 (=+1 .cse714) .cse715)) (res .cse710 (res .cse713 (not+ .cse713) (=+2 .cse714)) (res fna16 (res nfa16 (xor+ (fna16) (nfa16) (fna16 nfa16)) (=-1 .cse712)) (res nfa16 (=-2 .cse712) (xor- (fna16) (nfa16) (fna16 nfa16)))))) (=-2 .cse714))) .cse715)))))))) :proves (- nfa16 + fna16) :input)) (! .cse716 :proves (- fna15 + fb15 + .cse124) :input))))) (! (let ((.cse717 (xor fna17 nfa17))) (let-proof ((.cse718 (xor+ (fna17 nfa17) (fna17) (nfa17)))) (res .cse717 .cse718 (let ((.cse719 (= fna17 nfa17))) (res .cse719 (assume .cse719) (let ((.cse720 (not .cse717))) (let-proof ((.cse722 (not- .cse720))) (res .cse720 (let ((.cse721 (= .cse719 .cse720))) (res .cse721 (res .cse719 (res .cse717 (res fna17 (res nfa17 (=+1 .cse719) .cse718) (res nfa17 (xor+ (fna17 nfa17) (nfa17) (fna17)) (=+2 .cse719))) (res .cse720 (=+1 .cse721) .cse722)) (res .cse717 (res .cse720 (not+ .cse720) (=+2 .cse721)) (res fna17 (res nfa17 (xor+ (fna17) (nfa17) (fna17 nfa17)) (=-1 .cse719)) (res nfa17 (=-2 .cse719) (xor- (fna17) (nfa17) (fna17 nfa17)))))) (=-2 .cse721))) .cse722)))))))) :proves (- nfa17 + fna17) :input)) (! .cse723 :proves (- fna16 + fb16 + .cse101) :input)) (! (res .cse724 (res .cse725 (not+ .cse725) (and+ .cse724)) (or+ 0 .cse364)) :proves (+ .cse364 - fb15 + max15) :input))))) (! (let ((.cse726 (xor fna18 nfa18))) (let-proof ((.cse727 (xor+ (fna18 nfa18) (fna18) (nfa18)))) (res .cse726 .cse727 (let ((.cse728 (= fna18 nfa18))) (res .cse728 (assume .cse728) (let ((.cse729 (not .cse726))) (let-proof ((.cse731 (not- .cse729))) (res .cse729 (let ((.cse730 (= .cse728 .cse729))) (res .cse730 (res .cse728 (res .cse726 (res fna18 (res nfa18 (=+1 .cse728) .cse727) (res nfa18 (xor+ (fna18 nfa18) (nfa18) (fna18)) (=+2 .cse728))) (res .cse729 (=+1 .cse730) .cse731)) (res .cse726 (res .cse729 (not+ .cse729) (=+2 .cse730)) (res fna18 (res nfa18 (xor+ (fna18) (nfa18) (fna18 nfa18)) (=-1 .cse728)) (res nfa18 (=-2 .cse728) (xor- (fna18) (nfa18) (fna18 nfa18)))))) (=-2 .cse730))) .cse731)))))))) :proves (- nfa18 + fna18) :input)) (! .cse732 :proves (- fna17 + fb17 + .cse127) :input)) (! (res .cse733 (res .cse140 .cse141 (and+ .cse733)) (or+ 0 .cse343)) :proves (+ .cse343 - fb16 + max16) :input)) (! (res .cse734 (and+ .cse734) (or+ 1 .cse343)) :proves (+ .cse343 - .cse364 - .cse139) :input))))) (! (let ((.cse735 (xor fna19 nfa19))) (let-proof ((.cse736 (xor+ (fna19 nfa19) (fna19) (nfa19)))) (res .cse735 .cse736 (let ((.cse737 (= fna19 nfa19))) (res .cse737 (assume .cse737) (let ((.cse738 (not .cse735))) (let-proof ((.cse740 (not- .cse738))) (res .cse738 (let ((.cse739 (= .cse737 .cse738))) (res .cse739 (res .cse737 (res .cse735 (res fna19 (res nfa19 (=+1 .cse737) .cse736) (res nfa19 (xor+ (fna19 nfa19) (nfa19) (fna19)) (=+2 .cse737))) (res .cse738 (=+1 .cse739) .cse740)) (res .cse735 (res .cse738 (not+ .cse738) (=+2 .cse739)) (res fna19 (res nfa19 (xor+ (fna19) (nfa19) (fna19 nfa19)) (=-1 .cse737)) (res nfa19 (=-2 .cse737) (xor- (fna19) (nfa19) (fna19 nfa19)))))) (=-2 .cse739))) .cse740)))))))) :proves (- nfa19 + fna19) :input)) (! .cse741 :proves (- fna18 + fb18 + .cse110) :input)) (! (res .cse742 (res .cse78 .cse79 (and+ .cse742)) (or+ 0 .cse322)) :proves (+ .cse322 - fb17 + max17) :input)) (! (res .cse743 (and+ .cse743) (or+ 1 .cse322)) :proves (+ .cse322 - .cse343 - .cse77) :input))))) (! (let ((.cse744 (xor fna20 nfa20))) (let-proof ((.cse745 (xor+ (fna20 nfa20) (fna20) (nfa20)))) (res .cse744 .cse745 (let ((.cse746 (= fna20 nfa20))) (res .cse746 (assume .cse746) (let ((.cse747 (not .cse744))) (let-proof ((.cse749 (not- .cse747))) (res .cse747 (let ((.cse748 (= .cse746 .cse747))) (res .cse748 (res .cse746 (res .cse744 (res fna20 (res nfa20 (=+1 .cse746) .cse745) (res nfa20 (xor+ (fna20 nfa20) (nfa20) (fna20)) (=+2 .cse746))) (res .cse747 (=+1 .cse748) .cse749)) (res .cse744 (res .cse747 (not+ .cse747) (=+2 .cse748)) (res fna20 (res nfa20 (xor+ (fna20) (nfa20) (fna20 nfa20)) (=-1 .cse746)) (res nfa20 (=-2 .cse746) (xor- (fna20) (nfa20) (fna20 nfa20)))))) (=-2 .cse748))) .cse749)))))))) :proves (- nfa20 + fna20) :input)) (! .cse750 :proves (- fna19 + fb19 + .cse96) :input)) (! (res .cse751 (res .cse107 .cse108 (and+ .cse751)) (or+ 0 .cse301)) :proves (+ .cse301 - fb18 + max18) :input)) (! (res .cse752 (and+ .cse752) (or+ 1 .cse301)) :proves (+ .cse301 - .cse322 - .cse106) :input))))) (! (let ((.cse753 (xor fna21 nfa21))) (let-proof ((.cse754 (xor+ (fna21 nfa21) (fna21) (nfa21)))) (res .cse753 .cse754 (let ((.cse755 (= fna21 nfa21))) (res .cse755 (assume .cse755) (let ((.cse756 (not .cse753))) (let-proof ((.cse758 (not- .cse756))) (res .cse756 (let ((.cse757 (= .cse755 .cse756))) (res .cse757 (res .cse755 (res .cse753 (res fna21 (res nfa21 (=+1 .cse755) .cse754) (res nfa21 (xor+ (fna21 nfa21) (nfa21) (fna21)) (=+2 .cse755))) (res .cse756 (=+1 .cse757) .cse758)) (res .cse753 (res .cse756 (not+ .cse756) (=+2 .cse757)) (res fna21 (res nfa21 (xor+ (fna21) (nfa21) (fna21 nfa21)) (=-1 .cse755)) (res nfa21 (=-2 .cse755) (xor- (fna21) (nfa21) (fna21 nfa21)))))) (=-2 .cse757))) .cse758)))))))) :proves (- nfa21 + fna21) :input)) (! .cse759 :proves (- fna20 + fb20 + .cse138) :input)) (! (res .cse760 (res .cse112 .cse113 (and+ .cse760)) (or+ 0 .cse280)) :proves (+ .cse280 - fb19 + max19) :input)) (! (res .cse761 (and+ .cse761) (or+ 1 .cse280)) :proves (+ .cse280 - .cse301 - .cse111) :input))))) (! (let ((.cse762 (xor fna22 nfa22))) (let-proof ((.cse763 (xor+ (fna22 nfa22) (fna22) (nfa22)))) (res .cse762 .cse763 (let ((.cse764 (= fna22 nfa22))) (res .cse764 (assume .cse764) (let ((.cse765 (not .cse762))) (let-proof ((.cse767 (not- .cse765))) (res .cse765 (let ((.cse766 (= .cse764 .cse765))) (res .cse766 (res .cse764 (res .cse762 (res fna22 (res nfa22 (=+1 .cse764) .cse763) (res nfa22 (xor+ (fna22 nfa22) (nfa22) (fna22)) (=+2 .cse764))) (res .cse765 (=+1 .cse766) .cse767)) (res .cse762 (res .cse765 (not+ .cse765) (=+2 .cse766)) (res fna22 (res nfa22 (xor+ (fna22) (nfa22) (fna22 nfa22)) (=-1 .cse764)) (res nfa22 (=-2 .cse764) (xor- (fna22) (nfa22) (fna22 nfa22)))))) (=-2 .cse766))) .cse767)))))))) :proves (- nfa22 + fna22) :input)) (! .cse768 :proves (- fna21 + fb21 + .cse81) :input)) (! (res .cse769 (res .cse121 .cse122 (and+ .cse769)) (or+ 0 .cse259)) :proves (+ .cse259 - fb20 + max20) :input)) (! (res .cse770 (and+ .cse770) (or+ 1 .cse259)) :proves (+ .cse259 - .cse280 - .cse120) :input))))) (! (let ((.cse771 (xor fna23 nfa23))) (let-proof ((.cse772 (xor+ (fna23 nfa23) (fna23) (nfa23)))) (res .cse771 .cse772 (let ((.cse773 (= fna23 nfa23))) (res .cse773 (assume .cse773) (let ((.cse774 (not .cse771))) (let-proof ((.cse776 (not- .cse774))) (res .cse774 (let ((.cse775 (= .cse773 .cse774))) (res .cse775 (res .cse773 (res .cse771 (res fna23 (res nfa23 (=+1 .cse773) .cse772) (res nfa23 (xor+ (fna23 nfa23) (nfa23) (fna23)) (=+2 .cse773))) (res .cse774 (=+1 .cse775) .cse776)) (res .cse771 (res .cse774 (not+ .cse774) (=+2 .cse775)) (res fna23 (res nfa23 (xor+ (fna23) (nfa23) (fna23 nfa23)) (=-1 .cse773)) (res nfa23 (=-2 .cse773) (xor- (fna23) (nfa23) (fna23 nfa23)))))) (=-2 .cse775))) .cse776)))))))) :proves (- nfa23 + fna23) :input)) (! .cse777 :proves (- fna22 + fb22 + .cse119) :input)) (! (res .cse778 (res .cse144 .cse145 (and+ .cse778)) (or+ 0 .cse238)) :proves (+ .cse238 - fb21 + max21) :input)) (! (res .cse779 (and+ .cse779) (or+ 1 .cse238)) :proves (+ .cse238 - .cse259 - .cse143) :input))))) (! (let ((.cse780 (xor fna24 nfa24))) (let-proof ((.cse781 (xor+ (fna24 nfa24) (fna24) (nfa24)))) (res .cse780 .cse781 (let ((.cse782 (= fna24 nfa24))) (res .cse782 (assume .cse782) (let ((.cse783 (not .cse780))) (let-proof ((.cse785 (not- .cse783))) (res .cse783 (let ((.cse784 (= .cse782 .cse783))) (res .cse784 (res .cse782 (res .cse780 (res fna24 (res nfa24 (=+1 .cse782) .cse781) (res nfa24 (xor+ (fna24 nfa24) (nfa24) (fna24)) (=+2 .cse782))) (res .cse783 (=+1 .cse784) .cse785)) (res .cse780 (res .cse783 (not+ .cse783) (=+2 .cse784)) (res fna24 (res nfa24 (xor+ (fna24) (nfa24) (fna24 nfa24)) (=-1 .cse782)) (res nfa24 (=-2 .cse782) (xor- (fna24) (nfa24) (fna24 nfa24)))))) (=-2 .cse784))) .cse785)))))))) :proves (- nfa24 + fna24) :input)) (! .cse786 :proves (- fna23 + fb23 + .cse125) :input)) (! (res .cse787 (res .cse116 .cse117 (and+ .cse787)) (or+ 0 .cse217)) :proves (+ .cse217 - fb22 + max22) :input)) (! (res .cse788 (and+ .cse788) (or+ 1 .cse217)) :proves (+ .cse217 - .cse238 - .cse115) :input))))) (! (let ((.cse789 (xor fna25 nfa25))) (let-proof ((.cse790 (xor+ (fna25 nfa25) (fna25) (nfa25)))) (res .cse789 .cse790 (let ((.cse791 (= fna25 nfa25))) (res .cse791 (assume .cse791) (let ((.cse792 (not .cse789))) (let-proof ((.cse794 (not- .cse792))) (res .cse792 (let ((.cse793 (= .cse791 .cse792))) (res .cse793 (res .cse791 (res .cse789 (res fna25 (res nfa25 (=+1 .cse791) .cse790) (res nfa25 (xor+ (fna25 nfa25) (nfa25) (fna25)) (=+2 .cse791))) (res .cse792 (=+1 .cse793) .cse794)) (res .cse789 (res .cse792 (not+ .cse792) (=+2 .cse793)) (res fna25 (res nfa25 (xor+ (fna25) (nfa25) (fna25 nfa25)) (=-1 .cse791)) (res nfa25 (=-2 .cse791) (xor- (fna25) (nfa25) (fna25 nfa25)))))) (=-2 .cse793))) .cse794)))))))) :proves (- nfa25 + fna25) :input)) (! .cse795 :proves (- fna24 + fb24 + .cse90) :input)) (! (res .cse796 (res .cse83 .cse84 (and+ .cse796)) (or+ 0 .cse196)) :proves (+ .cse196 - fb23 + max23) :input)) (! (res .cse797 (and+ .cse797) (or+ 1 .cse196)) :proves (+ .cse196 - .cse217 - .cse82) :input))))) (! (let ((.cse798 (xor fna26 nfa26))) (let-proof ((.cse799 (xor+ (fna26 nfa26) (fna26) (nfa26)))) (res .cse798 .cse799 (let ((.cse800 (= fna26 nfa26))) (res .cse800 (assume .cse800) (let ((.cse801 (not .cse798))) (let-proof ((.cse803 (not- .cse801))) (res .cse801 (let ((.cse802 (= .cse800 .cse801))) (res .cse802 (res .cse800 (res .cse798 (res fna26 (res nfa26 (=+1 .cse800) .cse799) (res nfa26 (xor+ (fna26 nfa26) (nfa26) (fna26)) (=+2 .cse800))) (res .cse801 (=+1 .cse802) .cse803)) (res .cse798 (res .cse801 (not+ .cse801) (=+2 .cse802)) (res fna26 (res nfa26 (xor+ (fna26) (nfa26) (fna26 nfa26)) (=-1 .cse800)) (res nfa26 (=-2 .cse800) (xor- (fna26) (nfa26) (fna26 nfa26)))))) (=-2 .cse802))) .cse803)))))))) :proves (- nfa26 + fna26) :input)) (! .cse804 :proves (- fna25 + fb25 + .cse91) :input)) (! (res .cse805 (res .cse87 .cse88 (and+ .cse805)) (or+ 0 .cse175)) :proves (+ .cse175 - fb24 + max24) :input)) (! (res .cse806 (and+ .cse806) (or+ 1 .cse175)) :proves (+ .cse175 - .cse196 - .cse86) :input))))) (! (let ((.cse807 (xor fna27 nfa27))) (let-proof ((.cse808 (xor+ (fna27 nfa27) (fna27) (nfa27)))) (res .cse807 .cse808 (let ((.cse809 (= fna27 nfa27))) (res .cse809 (assume .cse809) (let ((.cse810 (not .cse807))) (let-proof ((.cse812 (not- .cse810))) (res .cse810 (let ((.cse811 (= .cse809 .cse810))) (res .cse811 (res .cse809 (res .cse807 (res fna27 (res nfa27 (=+1 .cse809) .cse808) (res nfa27 (xor+ (fna27 nfa27) (nfa27) (fna27)) (=+2 .cse809))) (res .cse810 (=+1 .cse811) .cse812)) (res .cse807 (res .cse810 (not+ .cse810) (=+2 .cse811)) (res fna27 (res nfa27 (xor+ (fna27) (nfa27) (fna27 nfa27)) (=-1 .cse809)) (res nfa27 (=-2 .cse809) (xor- (fna27) (nfa27) (fna27 nfa27)))))) (=-2 .cse811))) .cse812)))))))) :proves (- nfa27 + fna27) :input)) (! .cse813 :proves (- fna26 + fb26 + .cse71) :input)) (! (res .cse814 (res .cse129 .cse130 (and+ .cse814)) (or+ 0 .cse154)) :proves (+ .cse154 - fb25 + max25) :input)) (! (res .cse815 (and+ .cse815) (or+ 1 .cse154)) :proves (+ .cse154 - .cse175 - .cse128) :input))))) (! (let ((.cse816 (xor fna28 nfa28))) (let-proof ((.cse817 (xor+ (fna28 nfa28) (fna28) (nfa28)))) (res .cse816 .cse817 (let ((.cse818 (= fna28 nfa28))) (res .cse818 (assume .cse818) (let ((.cse819 (not .cse816))) (let-proof ((.cse821 (not- .cse819))) (res .cse819 (let ((.cse820 (= .cse818 .cse819))) (res .cse820 (res .cse818 (res .cse816 (res fna28 (res nfa28 (=+1 .cse818) .cse817) (res nfa28 (xor+ (fna28 nfa28) (nfa28) (fna28)) (=+2 .cse818))) (res .cse819 (=+1 .cse820) .cse821)) (res .cse816 (res .cse819 (not+ .cse819) (=+2 .cse820)) (res fna28 (res nfa28 (xor+ (fna28) (nfa28) (fna28 nfa28)) (=-1 .cse818)) (res nfa28 (=-2 .cse818) (xor- (fna28) (nfa28) (fna28 nfa28)))))) (=-2 .cse820))) .cse821)))))))) :proves (- nfa28 + fna28) :input)) (! .cse822 :proves (- fna27 + fb27 + .cse132) :input)) (! (res .cse823 (res .cse103 .cse104 (and+ .cse823)) (or+ 0 .cse153)) :proves (+ .cse153 - fb26 + max26) :input)) (! (res .cse824 (and+ .cse824) (or+ 1 .cse153)) :proves (+ .cse153 - .cse154 - .cse102) :input))) (! (let ((.cse825 (xor fna29 nfa29))) (let-proof ((.cse826 (xor+ (fna29 nfa29) (fna29) (nfa29)))) (res .cse825 .cse826 (let ((.cse827 (= fna29 nfa29))) (res .cse827 (assume .cse827) (let ((.cse828 (not .cse825))) (let-proof ((.cse830 (not- .cse828))) (res .cse828 (let ((.cse829 (= .cse827 .cse828))) (res .cse829 (res .cse827 (res .cse825 (res fna29 (res nfa29 (=+1 .cse827) .cse826) (res nfa29 (xor+ (fna29 nfa29) (nfa29) (fna29)) (=+2 .cse827))) (res .cse828 (=+1 .cse829) .cse830)) (res .cse825 (res .cse828 (not+ .cse828) (=+2 .cse829)) (res fna29 (res nfa29 (xor+ (fna29) (nfa29) (fna29 nfa29)) (=-1 .cse827)) (res nfa29 (=-2 .cse827) (xor- (fna29) (nfa29) (fna29 nfa29)))))) (=-2 .cse829))) .cse830)))))))) :proves (- nfa29 + fna29) :input)) (! .cse831 :proves (- fna28 + fb28 + .cse133) :input)) (! (res .cse832 (res .cse73 .cse74 (and+ .cse832)) (or+ 0 .cse152)) :proves (+ .cse152 - fb27 + max27) :input)) (! (res .cse833 (and+ .cse833) (or+ 1 .cse152)) :proves (+ .cse152 - .cse153 - .cse72) :input)) (! (res .cse51 .cse834 .cse53) :proves (- nfa30 + fna30) :input)) (! .cse835 :proves (- fna29 + fb29 + .cse126) :input)) (! (res .cse836 (res .cse135 .cse136 (and+ .cse836)) (or+ 0 .cse151)) :proves (+ .cse151 - fb28 + max28) :input)) (! (res .cse837 (and+ .cse837) (or+ 1 .cse151)) :proves (+ .cse151 - .cse152 - .cse134) :input)) (! .cse838 :proves (- fna30 + fb30 + .cse3) :input)) (! (res .cse839 (res .cse98 .cse99 (and+ .cse839)) (or+ 0 .cse150)) :proves (+ .cse150 - fb29 + max29) :input)) (! (res .cse840 (and+ .cse840) (or+ 1 .cse150)) :proves (+ .cse150 - .cse151 - .cse97) :input)) (! (xor- (fa31 carry30) (fa31) (carry30)) :proves (- .cse59 - carry30 - fa31) :input)) (! (res .cse841 (res .cse93 .cse94 (and+ .cse841)) (or+ 0 .cse149)) :proves (+ .cse149 - fb30 + max30) :input)) (! (res .cse842 (and+ .cse842) (or+ 1 .cse149)) :proves (+ .cse149 - .cse150 - .cse92) :input))) (! (res .cse843 (and+ .cse843) (or+ 1 .cse76)) :proves (- .cse149 - .cse147 + .cse76) :input)) (! (res .cse63 .cse844 .cse65) :proves (- nfa31 + fna31) :input))) (! .cse845 :proves (- fna31 + fb31 + .cse60) :input)) .cse146) .cse85) .cse109))))) .cse80) .cse75) (! (res .cse846 .cse847 (! (res .cse848 (and- 20 .cse846) .cse849) :proves (- .cse846 - .cse138) :input)) :proves (- .cse138) :rup)))) (! (res .cse846 .cse847 (! (res .cse850 (and- 28 .cse846) .cse851) :proves (- .cse846 - .cse133) :input)) :proves (- .cse133) :rup)) (! (res .cse846 .cse847 (! (res .cse852 (and- 27 .cse846) .cse853) :proves (- .cse846 - .cse132) :input)) :proves (- .cse132) :rup)) (! (res .cse725 (assume .cse725) (not- .cse725)) :proves (- max15) :input)))) (! (res .cse846 .cse847 (! (res .cse854 (and- 17 .cse846) .cse855) :proves (- .cse846 - .cse127) :input)) :proves (- .cse127) :rup)) (! (res .cse846 .cse847 (! (res .cse856 (and- 29 .cse846) .cse857) :proves (- .cse846 - .cse126) :input)) :proves (- .cse126) :rup)) .cse62) (! (res .cse846 .cse847 (! (res .cse858 (and- 23 .cse846) .cse859) :proves (- .cse846 - .cse125) :input)) :proves (- .cse125) :rup)) (! (res .cse846 .cse847 (! (res .cse860 (and- 15 .cse846) .cse861) :proves (- .cse846 - .cse124) :input)) :proves (- .cse124) :rup)))) (! (res .cse846 .cse847 (! (res .cse862 (and- 22 .cse846) .cse863) :proves (- .cse846 - .cse119) :input)) :proves (- .cse119) :rup)) .cse50))))) (! (res .cse846 .cse847 (! (res .cse864 (and- 18 .cse846) .cse865) :proves (- .cse846 - .cse110) :input)) :proves (- .cse110) :rup)))) .cse89))) (! (res .cse846 .cse847 (! (res .cse866 (and- 16 .cse846) .cse867) :proves (- .cse846 - .cse101) :input)) :proves (- .cse101) :rup))))) (! (res .cse846 .cse847 (! (res .cse868 (and- 19 .cse846) .cse869) :proves (- .cse846 - .cse96) :input)) :proves (- .cse96) :rup)) .cse131)) .cse137)) .cse95))) .cse123)) (! (res .cse846 .cse847 (! (res .cse870 (and- 25 .cse846) .cse871) :proves (- .cse846 - .cse91) :input)) :proves (- .cse91) :rup)) .cse100)) (! (res .cse846 .cse847 (! (res .cse872 (and- 24 .cse846) .cse873) :proves (- .cse846 - .cse90) :input)) :proves (- .cse90) :rup)))))) (! (res .cse846 .cse847 (! (res .cse874 (and- 21 .cse846) .cse875) :proves (- .cse846 - .cse81) :input)) :proves (- .cse81) :rup)))) .cse105)) (! (res max_less_fb (! (let ((.cse876 (xor max_less_fb .cse76))) (let-proof ((.cse877 (xor+ (max_less_fb .cse76) (max_less_fb) (.cse76)))) (res .cse876 .cse877 (let ((.cse878 (= max_less_fb .cse76))) (res .cse878 (assume .cse878) (let ((.cse879 (not .cse876))) (let-proof ((.cse881 (not- .cse879))) (res .cse879 (let ((.cse880 (= .cse878 .cse879))) (res .cse880 (res .cse878 (res .cse876 (res max_less_fb (res .cse76 (=+1 .cse878) .cse877) (res .cse76 (xor+ (max_less_fb .cse76) (.cse76) (max_less_fb)) (=+2 .cse878))) (res .cse879 (=+1 .cse880) .cse881)) (res .cse876 (res .cse879 (not+ .cse879) (=+2 .cse880)) (res max_less_fb (res .cse76 (xor+ (max_less_fb) (.cse76) (max_less_fb .cse76)) (=-1 .cse878)) (res .cse76 (=-2 .cse878) (xor- (max_less_fb) (.cse76) (max_less_fb .cse76)))))) (=-2 .cse880))) .cse881)))))))) :proves (- .cse76 + max_less_fb) :input) (! (res .cse17 (! (or+ 1 .cse17) :proves (+ .cse17 - max_less_fb) :input) .cse18) :proves (- max_less_fb) :rup)) :proves (- .cse76) :rup))))))))))))))))))))))))))))))))))))))))) .cse142))) .cse114))) (! (res .cse846 .cse847 (! (res .cse896 (and- 26 .cse846) .cse897) :proves (- .cse846 - .cse71) :input)) :proves (- .cse71) :rup)) .cse118))) :proves (+ fb31) :rup))) (let-proof ((.cse2 (! (res carry30 (! (res fa31 .cse58 (res .cse59 (! (xor+ (fa31 carry30) (carry30) (fa31)) :proves (+ .cse59 + carry30 - fa31) :input) (! (res nfa31 (! (res fna31 (! (res .cse60 (res fb31 .cse9 (! .cse61 :proves (+ fna31 - fb31 + .cse60) :input)) .cse62) :proves (+ fna31) :rup) (! (res .cse63 .cse64 .cse65) :proves (+ nfa31 - fna31) :input)) :proves (+ nfa31) :rup) (! (res .cse66 .cse67 (xor- (nfa31 .cse59) (nfa31) (.cse59))) :proves (- .cse59 - nfa31) :input)) :proves (- .cse59) :rup))) :proves (+ carry30) :rup) (! (res .cse68 .cse69 .cse70) :proves (+ .cse1 - carry30) :input)) :proves (+ .cse1) :rup))) (res fa30 (res .cse0 (res carry29 (! (res .cse1 .cse2 (! (and- 1 .cse1) :proves (- .cse1 + carry29) :input)) :proves (+ carry29) :rup) (! (xor+ (fa30 carry29) (fa30) (carry29)) :proves (+ .cse0 + fa30 - carry29) :input)) (! (res nfa30 (! (res fna30 (! (res .cse3 (res fb30 (! (res min30 (! (assume min30) :proves (+ min30) :input) (let ((.cse6 (not fb30))) (let ((.cse5 (and .cse6 min30))) (let ((.cse4 (or .cse5 (and (or min30 .cse6) (let ((.cse20 (not fb29))) (or (and .cse20 min29) (and (or min29 .cse20) (let ((.cse21 (not fb28))) (or (and .cse21 min28) (and (or min28 .cse21) (let ((.cse22 (not fb27))) (or (and .cse22 min27) (and (or min27 .cse22) (let ((.cse23 (not fb26))) (or (and .cse23 min26) (and (or min26 .cse23) (let ((.cse24 (not fb25))) (or (and .cse24 min25) (and (or min25 .cse24) (let ((.cse25 (not fb24))) (or (and .cse25 min24) (and (or min24 .cse25) (let ((.cse26 (not fb23))) (or (and .cse26 min23) (and (or min23 .cse26) (let ((.cse27 (not fb22))) (or (and .cse27 min22) (and (or min22 .cse27) (let ((.cse28 (not fb21))) (or (and .cse28 min21) (and (or min21 .cse28) (let ((.cse29 (not fb20))) (or (and .cse29 min20) (and (or min20 .cse29) (let ((.cse30 (not fb19))) (or (and .cse30 min19) (and (or min19 .cse30) (let ((.cse31 (not fb18))) (or (and .cse31 min18) (and (or min18 .cse31) (let ((.cse32 (not fb17))) (or (and .cse32 min17) (and (or min17 .cse32) (let ((.cse33 (not fb16))) (or (and .cse33 min16) (and (or min16 .cse33) (let ((.cse34 (not fb15))) (or (and .cse34 min15) (and (or min15 .cse34) (let ((.cse35 (not fb14))) (or (and .cse35 min14) (and (or min14 .cse35) (let ((.cse36 (not fb13))) (or (and .cse36 min13) (and (or min13 .cse36) (let ((.cse37 (not fb12))) (or (and .cse37 min12) (and (or min12 .cse37) (let ((.cse38 (not fb11))) (or (and .cse38 min11) (and (or min11 .cse38) (let ((.cse39 (not fb10))) (or (and .cse39 min10) (and (or min10 .cse39) (let ((.cse40 (not fb9))) (or (and .cse40 min9) (and (or min9 .cse40) (let ((.cse41 (not fb8))) (or (and .cse41 min8) (and (or min8 .cse41) (let ((.cse42 (not fb7))) (or (and .cse42 min7) (and (or min7 .cse42) (let ((.cse43 (not fb6))) (or (and .cse43 min6) (and (or min6 .cse43) (let ((.cse44 (not fb5))) (or (and .cse44 min5) (and (or min5 .cse44) (let ((.cse45 (not fb4))) (or (and .cse45 min4) (and (or min4 .cse45) (let ((.cse46 (not fb3))) (or (and .cse46 min3) (and (or min3 .cse46) (let ((.cse47 (not fb2))) (or (and .cse47 min2) (and (or min2 .cse47) (let ((.cse48 (not fb1))) (or (and .cse48 min1) (and (or min1 .cse48) (and (not fb0) min0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (res .cse4 (! (res .cse5 (res .cse6 (not+ .cse6) (and+ .cse5)) (or+ 0 .cse4)) :proves (+ .cse4 + fb30 - min30) :input) (! (let ((.cse8 (or fb31 .cse19))) (let ((.cse10 (and .cse8 .cse4))) (let ((.cse7 (or (and fb31 .cse19) .cse10))) (res .cse7 (res .cse8 (! (res fb31 .cse9 (! (or+ 0 .cse8) :proves (+ .cse8 - fb31) :input)) :proves (+ .cse8) :rup) (! (res .cse10 (and+ .cse10) (or+ 1 .cse7)) :proves (- .cse4 - .cse8 + .cse7) :input)) (! (res fb_less_min (! (let ((.cse11 (xor fb_less_min .cse7))) (let-proof ((.cse12 (xor+ (fb_less_min .cse7) (fb_less_min) (.cse7)))) (res .cse11 .cse12 (let ((.cse13 (= fb_less_min .cse7))) (res .cse13 (assume .cse13) (let ((.cse14 (not .cse11))) (let-proof ((.cse16 (not- .cse14))) (res .cse14 (let ((.cse15 (= .cse13 .cse14))) (res .cse15 (res .cse13 (res .cse11 (res fb_less_min (res .cse7 (=+1 .cse13) .cse12) (res .cse7 (xor+ (fb_less_min .cse7) (.cse7) (fb_less_min)) (=+2 .cse13))) (res .cse14 (=+1 .cse15) .cse16)) (res .cse11 (res .cse14 (not+ .cse14) (=+2 .cse15)) (res fb_less_min (res .cse7 (xor+ (fb_less_min) (.cse7) (fb_less_min .cse7)) (=-1 .cse13)) (res .cse7 (=-2 .cse13) (xor- (fb_less_min) (.cse7) (fb_less_min .cse7)))))) (=-2 .cse15))) .cse16)))))))) :proves (- .cse7 + fb_less_min) :input) (! (res .cse17 (! (or+ 0 .cse17) :proves (+ .cse17 - fb_less_min) :input) .cse18) :proves (- fb_less_min) :rup)) :proves (- .cse7) :rup))))) :proves (- .cse4) :rup)))))) :proves (+ fb30) :rup) (! .cse49 :proves (+ fna30 - fb30 + .cse3) :input)) .cse50) :proves (+ fna30) :rup) (! (res .cse51 .cse52 .cse53) :proves (+ nfa30 - fna30) :input)) :proves (+ nfa30) :rup) (! (res .cse54 .cse55 (xor- (nfa30 .cse0) (nfa30) (.cse0))) :proves (- .cse0 - nfa30) :input)) :proves (- .cse0) :rup)) (! (res .cse1 .cse2 (! (res .cse56 (and- 0 .cse1) .cse57) :proves (- .cse1 - fa30) :input)) :proves (- fa30) :rup)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :proves () :rup)
