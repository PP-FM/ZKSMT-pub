unsat
(! (let ((.cse97 (* 24501 y)) (.cse95 (* 28300 x)) (.cse94 (* (- 24501) y)) (.cse102 (* 24500 y)) (.cse100 (* 28301 x)) (.cse99 (* (- 24500) y))) (let ((.cse105 (+ .cse100 .cse99 (- 100))) (.cse104 (+ (* (- 28301) x) .cse102 1)) (.cse83 (+ .cse95 .cse94 (- 99))) (.cse103 (+ (* (- 28300) x) .cse97))) (let ((.cse58 (<= .cse103 0)) (.cse2 (<= .cse83 0)) (.cse51 (<= .cse104 0)) (.cse28 (<= .cse105 0))) (let ((.cse64 (+ .cse95 .cse94 1)) (.cse34 (< 0 .cse105)) (.cse54 (< 0 .cse104)) (.cse61 (< 0 .cse103)) (.cse29 (and .cse58 .cse2 .cse51 .cse28))) (let-proof ((.cse35 (total .cse105 0)) (.cse55 (total .cse104 0)) (.cse62 (total .cse103 0))) (let ((.cse45 (<= 1 .cse64)) (.cse0 (<= .cse64 0))) (let-proof ((.cse30 (let ((.cse74 (- .cse100 .cse102)) (.cse88 (- .cse95 .cse97))) (let ((.cse89 (<= 0 .cse88)) (.cse79 (<= .cse88 99)) (.cse75 (<= 1 .cse74)) (.cse67 (<= .cse74 100))) (let ((.cse65 (and .cse89 .cse79 .cse75 .cse67))) (res .cse65 (assume .cse65) (let ((.cse66 (= .cse65 .cse29))) (res .cse66 (let ((.cse71 (+ .cse100 .cse99))) (let ((.cse72 (= .cse74 .cse71))) (let-proof ((.cse73 (let ((.cse98 (* (- 1) .cse102))) (res (= .cse98 .cse99) (poly* .cse98 .cse99) (res (= .cse100 .cse100) (refl .cse100) (let ((.cse101 (+ .cse100 .cse98))) (res (= .cse101 .cse71) (cong (+ .cse100 .cse98) (+ .cse100 .cse99)) (res (= .cse74 .cse101) (-def .cse100 .cse102) (trans .cse74 .cse101 .cse71))))))))) (res (= .cse67 .cse28) (let ((.cse69 (<= .cse71 100))) (let ((.cse68 (= .cse69 .cse28))) (res .cse68 (res .cse28 (res .cse69 (=+1 .cse68) (res .cse34 .cse35 (farkas 1 .cse69 1 .cse34))) (res .cse69 (let ((.cse70 (< 100 .cse71))) (res .cse70 (total .cse71 100) (farkas 1 .cse70 1 .cse28))) (=+2 .cse68))) (res (= .cse67 .cse69) (res (= 100 100) (refl 100) (res .cse72 .cse73 (cong (<= .cse74 100) (<= .cse71 100)))) (trans .cse67 .cse69 .cse28))))) (res (= .cse75 .cse51) (let ((.cse77 (<= 1 .cse71))) (let ((.cse76 (= .cse77 .cse51))) (res .cse76 (res .cse51 (res .cse77 (=+1 .cse76) (res .cse54 .cse55 (farkas 1 .cse77 1 .cse54))) (res .cse77 (let ((.cse78 (< .cse71 1))) (res .cse78 (total 1 .cse71) (farkas 1 .cse78 1 .cse51))) (=+2 .cse76))) (res (= .cse75 .cse77) (res .cse72 .cse73 (res (= 1 1) (refl 1) (cong (<= 1 .cse74) (<= 1 .cse71)))) (trans .cse75 .cse77 .cse51))))) (let ((.cse85 (+ .cse95 .cse94))) (let ((.cse86 (= .cse88 .cse85))) (let-proof ((.cse87 (let ((.cse93 (* (- 1) .cse97))) (res (= .cse93 .cse94) (poly* .cse93 .cse94) (res (= .cse95 .cse95) (refl .cse95) (let ((.cse96 (+ .cse95 .cse93))) (res (= .cse96 .cse85) (cong (+ .cse95 .cse93) (+ .cse95 .cse94)) (res (= .cse88 .cse96) (-def .cse95 .cse97) (trans .cse88 .cse96 .cse85))))))))) (res (= .cse79 .cse2) (let ((.cse81 (<= .cse85 99))) (let ((.cse80 (= .cse81 .cse2))) (res .cse80 (res .cse2 (res .cse81 (=+1 .cse80) (let ((.cse82 (< 0 .cse83))) (res .cse82 (total .cse83 0) (farkas 1 .cse81 1 .cse82)))) (res .cse81 (let ((.cse84 (< 99 .cse85))) (res .cse84 (total .cse85 99) (farkas 1 .cse84 1 .cse2))) (=+2 .cse80))) (res (= .cse79 .cse81) (res (= 99 99) (refl 99) (res .cse86 .cse87 (cong (<= .cse88 99) (<= .cse85 99)))) (trans .cse79 .cse81 .cse2))))) (res (= .cse89 .cse58) (let ((.cse91 (<= 0 .cse85))) (let ((.cse90 (= .cse91 .cse58))) (res .cse90 (res .cse58 (res .cse91 (=+1 .cse90) (res .cse61 .cse62 (farkas 1 .cse91 1 .cse61))) (res .cse91 (let ((.cse92 (< .cse85 0))) (res .cse92 (total 0 .cse85) (farkas 1 .cse92 1 .cse58))) (=+2 .cse90))) (res (= .cse89 .cse91) (res .cse86 .cse87 (res (= 0 0) (refl 0) (cong (<= 0 .cse88) (<= 0 .cse85)))) (trans .cse89 .cse91 .cse58))))) (cong (and .cse89 .cse79 .cse75 .cse67) (and .cse58 .cse2 .cse51 .cse28)))))))))))) (=-2 .cse66)))))))) (.cse46 (total-int .cse64 0))) (let-proof ((.cse50 (! (res .cse58 (res .cse29 .cse30 (and- 0 .cse29)) (let ((.cse59 (not .cse0))) (let-proof ((.cse63 (not- .cse59))) (res .cse59 (let ((.cse60 (= .cse58 .cse59))) (res .cse60 (res .cse59 (res .cse58 (=+1 .cse60) (res .cse0 (not+ .cse59) (farkas 1 .cse58 1 .cse0))) (res .cse58 (res .cse61 .cse62 (res .cse0 (res .cse45 .cse46 (farkas 1 .cse61 1 .cse45)) .cse63)) (=+2 .cse60))) (=-2 .cse60))) .cse63)))) :proves (- .cse0) :input))) (res .cse0 (let ((.cse47 (* 4043 x)) (.cse48 (* (- 3500) y))) (let ((.cse57 (+ .cse47 .cse48))) (let ((.cse21 (<= 1 .cse57)) (.cse5 (<= .cse57 0)) (.cse49 (+ (* 2673 x) (* (- 2314) y)))) (let-proof ((.cse22 (total-int .cse57 0))) (let ((.cse1 (<= .cse49 0))) (let-proof ((.cse26 (! (res .cse51 (res .cse29 .cse30 (and- 2 .cse29)) (let ((.cse52 (not .cse5))) (let-proof ((.cse56 (not- .cse52))) (res .cse52 (let ((.cse53 (= .cse51 .cse52))) (res .cse53 (res .cse52 (res .cse51 (=+1 .cse53) (res .cse5 (not+ .cse52) (farkas 1 .cse51 7 .cse5))) (res .cse51 (res .cse54 .cse55 (res .cse5 (res .cse21 .cse22 (farkas 1 .cse54 7 .cse21)) .cse56)) (=+2 .cse53))) (=-2 .cse53))) .cse56)))) :proves (- .cse5) :input))) (res .cse1 (! (res .cse0 (let-proof ((.cse3 (! (res .cse29 .cse30 (and- 1 .cse29)) :proves (+ .cse2) :input))) (res .cse2 .cse3 (let ((.cse23 (+ x (* (- 1) y)))) (let ((.cse4 (<= .cse23 0)) (.cse24 (* 3358 x)) (.cse25 (* (- 2907) y)) (.cse9 (<= 1 .cse49))) (let-proof ((.cse10 (total-int .cse49 0))) (res .cse4 (! (res .cse2 .cse3 (res .cse5 (let ((.cse20 (+ .cse24 .cse25))) (let ((.cse6 (<= .cse20 0)) (.cse18 (<= 1 .cse23))) (let-proof ((.cse19 (total-int .cse23 0))) (res .cse6 (let ((.cse17 (+ (* 8 x) (* (- 7) y)))) (let ((.cse7 (<= .cse17 0)) (.cse15 (<= 1 .cse20))) (let-proof ((.cse16 (total-int .cse20 0))) (res .cse7 (let ((.cse13 (<= 1 .cse17))) (let-proof ((.cse14 (total-int .cse17 0))) (res .cse1 (let ((.cse12 (+ (* 15 x) (* (- 13) y)))) (let ((.cse8 (<= .cse12 0))) (res .cse8 (! (res .cse9 .cse10 (let ((.cse11 (<= 1 .cse12))) (res .cse11 (total-int .cse12 0) (farkas 39 .cse2 4973 .cse11 385 .cse9)))) :proves (- .cse2 + .cse8 + .cse1) :LA (39 (- 4973) (- 385))) (! (res .cse13 .cse14 (res .cse9 .cse10 (farkas 1 .cse9 39 .cse13 199 .cse8))) :proves (+ .cse1 + .cse7 - .cse8) :LA ((- 1) (- 39) 199))))) (! (res .cse13 .cse14 (res .cse15 .cse16 (farkas 250 .cse1 199 .cse15 1 .cse13))) :proves (- .cse1 + .cse6 + .cse7) :LA (250 (- 199) (- 1)))))) (! (res .cse18 .cse19 (res .cse15 .cse16 (farkas 451 .cse7 1 .cse15 250 .cse18))) :proves (- .cse7 + .cse6 + .cse4) :LA (451 (- 1) (- 250))))))) (! (res .cse18 .cse19 (res .cse21 .cse22 (farkas 543 .cse6 451 .cse21 1 .cse18))) :proves (- .cse6 + .cse5 + .cse4) :LA (543 (- 451) (- 1))))))) .cse26)) :proves (+ .cse4) :rup) (let ((.cse33 (+ .cse47 .cse48 (- 14)))) (let ((.cse27 (<= .cse33 0))) (res .cse27 (! (res .cse28 (res .cse29 .cse30 (and- 3 .cse29)) (let ((.cse31 (= .cse28 .cse27))) (res .cse31 (res .cse27 (res .cse28 (=+1 .cse31) (let ((.cse32 (<= 1 .cse33))) (res .cse32 (total-int .cse33 0) (farkas 1 .cse28 7 .cse32)))) (res .cse28 (res .cse34 .cse35 (farkas 1 .cse34 7 .cse27)) (=+2 .cse31))) (=-2 .cse31)))) :proves (+ .cse27) :input) (let ((.cse38 (+ (* 149 x) (* (- 129) y)))) (let ((.cse36 (<= .cse38 0))) (res .cse36 (! (res .cse9 .cse10 (let ((.cse37 (<= 1 .cse38))) (res .cse37 (total-int .cse38 0) (farkas 31 .cse2 4973 .cse37 51 .cse9)))) :proves (- .cse2 + .cse36 + .cse1) :LA (31 (- 4973) (- 51))) (let ((.cse44 (+ (* 216 x) (* (- 187) y)))) (let ((.cse39 (<= .cse44 0))) (res .cse39 (let ((.cse42 (+ .cse24 .cse25 (- 11)))) (let ((.cse40 (<= .cse42 0))) (res .cse40 (! (let ((.cse41 (<= 1 .cse42))) (res .cse41 (total-int .cse42 0) (farkas 543 .cse41 1 .cse4 451 .cse27))) :proves (+ .cse40 - .cse4 - .cse27) :LA ((- 543) 1 451)) (! (let ((.cse43 (<= 1 .cse44))) (res .cse43 (total-int .cse44 0) (farkas 39 .cse43 34 .cse36 1 .cse40))) :proves (+ .cse39 - .cse36 - .cse40) :LA ((- 39) 34 1))))) (! (res .cse9 .cse10 (res .cse45 .cse46 (farkas 27 .cse45 116 .cse9 4973 .cse39))) :proves (+ .cse0 + .cse1 - .cse39) :LA ((- 27) (- 116) 4973))))))))))))))))) .cse50) :proves (+ .cse1) :rup) (res .cse5 (! (res .cse21 .cse22 (res .cse45 .cse46 (farkas 2 .cse45 4973 .cse21 7543 .cse1))) :proves (+ .cse0 + .cse5 - .cse1) :LA ((- 2) (- 4973) 7543)) .cse26)))))))) .cse50))))))))) :proves () :rup)
