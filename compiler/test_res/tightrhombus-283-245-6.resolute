unsat
(! (let ((.cse109 (* 2450000001 y)) (.cse107 (* 2830000000 x)) (.cse106 (* (- 2450000001) y)) (.cse114 (* 2450000000 y)) (.cse112 (* 2830000001 x)) (.cse111 (* (- 2450000000) y))) (let ((.cse83 (+ .cse112 .cse111 (- 10000000))) (.cse116 (+ (* (- 2830000001) x) .cse114 1)) (.cse95 (+ .cse107 .cse106 (- 9999999))) (.cse115 (+ (* (- 2830000000) x) .cse109))) (let ((.cse70 (<= .cse115 0)) (.cse4 (<= .cse95 0)) (.cse63 (<= .cse116 0)) (.cse59 (<= .cse83 0)) (.cse69 (+ .cse112 .cse111))) (let ((.cse76 (+ .cse107 .cse106 1)) (.cse66 (< 0 .cse116)) (.cse52 (<= 1 .cse69)) (.cse73 (< 0 .cse115)) (.cse57 (and .cse70 .cse4 .cse63 .cse59))) (let-proof ((.cse67 (total .cse116 0)) (.cse74 (total .cse115 0))) (let ((.cse61 (<= 1 .cse76)) (.cse0 (<= .cse76 0))) (let-proof ((.cse58 (let ((.cse87 (- .cse112 .cse114)) (.cse100 (- .cse107 .cse109))) (let ((.cse101 (<= 0 .cse100)) (.cse91 (<= .cse100 9999999)) (.cse88 (<= 1 .cse87)) (.cse79 (<= .cse87 10000000))) (let ((.cse77 (and .cse101 .cse91 .cse88 .cse79))) (res .cse77 (assume .cse77) (let ((.cse78 (= .cse77 .cse57))) (res .cse78 (let ((.cse85 (= .cse87 .cse69))) (let-proof ((.cse86 (let ((.cse110 (* (- 1) .cse114))) (res (= .cse110 .cse111) (poly* .cse110 .cse111) (res (= .cse112 .cse112) (refl .cse112) (let ((.cse113 (+ .cse112 .cse110))) (res (= .cse113 .cse69) (cong (+ .cse112 .cse110) (+ .cse112 .cse111)) (res (= .cse87 .cse113) (-def .cse112 .cse114) (trans .cse87 .cse113 .cse69))))))))) (res (= .cse79 .cse59) (let ((.cse81 (<= .cse69 10000000))) (let ((.cse80 (= .cse81 .cse59))) (res .cse80 (res .cse59 (res .cse81 (=+1 .cse80) (let ((.cse82 (< 0 .cse83))) (res .cse82 (total .cse83 0) (farkas 1 .cse81 1 .cse82)))) (res .cse81 (let ((.cse84 (< 10000000 .cse69))) (res .cse84 (total .cse69 10000000) (farkas 1 .cse84 1 .cse59))) (=+2 .cse80))) (res (= .cse79 .cse81) (res (= 10000000 10000000) (refl 10000000) (res .cse85 .cse86 (cong (<= .cse87 10000000) (<= .cse69 10000000)))) (trans .cse79 .cse81 .cse59))))) (res (= .cse88 .cse63) (let ((.cse89 (= .cse52 .cse63))) (res .cse89 (res .cse63 (res .cse52 (=+1 .cse89) (res .cse66 .cse67 (farkas 1 .cse52 1 .cse66))) (res .cse52 (let ((.cse90 (< .cse69 1))) (res .cse90 (total 1 .cse69) (farkas 1 .cse90 1 .cse63))) (=+2 .cse89))) (res (= .cse88 .cse52) (res .cse85 .cse86 (res (= 1 1) (refl 1) (cong (<= 1 .cse87) (<= 1 .cse69)))) (trans .cse88 .cse52 .cse63)))) (let ((.cse97 (+ .cse107 .cse106))) (let ((.cse98 (= .cse100 .cse97))) (let-proof ((.cse99 (let ((.cse105 (* (- 1) .cse109))) (res (= .cse105 .cse106) (poly* .cse105 .cse106) (res (= .cse107 .cse107) (refl .cse107) (let ((.cse108 (+ .cse107 .cse105))) (res (= .cse108 .cse97) (cong (+ .cse107 .cse105) (+ .cse107 .cse106)) (res (= .cse100 .cse108) (-def .cse107 .cse109) (trans .cse100 .cse108 .cse97))))))))) (res (= .cse91 .cse4) (let ((.cse93 (<= .cse97 9999999))) (let ((.cse92 (= .cse93 .cse4))) (res .cse92 (res .cse4 (res .cse93 (=+1 .cse92) (let ((.cse94 (< 0 .cse95))) (res .cse94 (total .cse95 0) (farkas 1 .cse93 1 .cse94)))) (res .cse93 (let ((.cse96 (< 9999999 .cse97))) (res .cse96 (total .cse97 9999999) (farkas 1 .cse96 1 .cse4))) (=+2 .cse92))) (res (= .cse91 .cse93) (res (= 9999999 9999999) (refl 9999999) (res .cse98 .cse99 (cong (<= .cse100 9999999) (<= .cse97 9999999)))) (trans .cse91 .cse93 .cse4))))) (res (= .cse101 .cse70) (let ((.cse103 (<= 0 .cse97))) (let ((.cse102 (= .cse103 .cse70))) (res .cse102 (res .cse70 (res .cse103 (=+1 .cse102) (res .cse73 .cse74 (farkas 1 .cse103 1 .cse73))) (res .cse103 (let ((.cse104 (< .cse97 0))) (res .cse104 (total 0 .cse97) (farkas 1 .cse104 1 .cse70))) (=+2 .cse102))) (res (= .cse101 .cse103) (res .cse98 .cse99 (res (= 0 0) (refl 0) (cong (<= 0 .cse100) (<= 0 .cse97)))) (trans .cse101 .cse103 .cse70))))) (cong (and .cse101 .cse91 .cse88 .cse79) (and .cse70 .cse4 .cse63 .cse59))))))))))) (=-2 .cse78)))))))) (.cse62 (total-int .cse76 0))) (res .cse0 (let ((.cse1 (<= .cse69 0))) (let-proof ((.cse53 (total-int .cse69 0))) (let-proof ((.cse55 (! (res .cse63 (res .cse57 .cse58 (and- 2 .cse57)) (let ((.cse64 (not .cse1))) (let-proof ((.cse68 (not- .cse64))) (res .cse64 (let ((.cse65 (= .cse63 .cse64))) (res .cse65 (res .cse64 (res .cse63 (=+1 .cse65) (res .cse1 (not+ .cse64) (farkas 1 .cse63 1 .cse1))) (res .cse63 (res .cse66 .cse67 (res .cse1 (res .cse52 .cse53 (farkas 1 .cse66 1 .cse52)) .cse68)) (=+2 .cse65))) (=-2 .cse65))) .cse68)))) :proves (- .cse1) :input))) (res .cse1 (let ((.cse60 (+ (* 283 x) (* (- 245) y)))) (let ((.cse2 (<= .cse60 0))) (res .cse2 (! (let ((.cse56 (+ (* 216 x) (* (- 187) y)))) (let ((.cse19 (<= 1 .cse60)) (.cse3 (<= .cse56 0))) (let-proof ((.cse20 (total-int .cse60 0))) (res .cse3 (! (let-proof ((.cse5 (! (res .cse57 .cse58 (and- 1 .cse57)) :proves (+ .cse4) :input))) (res .cse4 .cse5 (let ((.cse54 (+ x (* (- 1) y)))) (let ((.cse6 (<= .cse54 0)) (.cse17 (<= 1 .cse56))) (let-proof ((.cse18 (total-int .cse56 0))) (res .cse6 (! (res .cse1 (res .cse4 .cse5 (let ((.cse51 (+ (* 1929020410 x) (* (- 1670000001) y)))) (let ((.cse7 (<= .cse51 0)) (.cse49 (<= 1 .cse54))) (let-proof ((.cse50 (total-int .cse54 0))) (res .cse7 (let ((.cse48 (+ (* 8 x) (* (- 7) y)))) (let ((.cse8 (<= .cse48 0)) (.cse46 (<= 1 .cse51))) (let-proof ((.cse47 (total-int .cse51 0))) (res .cse8 (let ((.cse45 (+ (* 1028040819 x) (* (- 890000002) y)))) (let ((.cse9 (<= .cse45 0)) (.cse43 (<= 1 .cse48))) (let-proof ((.cse44 (total-int .cse48 0))) (res .cse9 (let ((.cse42 (+ (* 15 x) (* (- 13) y)))) (let ((.cse40 (<= 1 .cse45)) (.cse10 (<= .cse42 0))) (let-proof ((.cse41 (total-int .cse45 0))) (res .cse10 (let ((.cse39 (+ (* 127061228 x) (* (- 110000003) y)))) (let ((.cse37 (<= 1 .cse42)) (.cse11 (<= .cse39 0))) (let-proof ((.cse38 (total-int .cse42 0))) (res .cse11 (let ((.cse36 (+ (* 82 x) (* (- 71) y)))) (let ((.cse12 (<= .cse36 0)) (.cse34 (<= 1 .cse39))) (let-proof ((.cse35 (total-int .cse39 0))) (res .cse12 (let ((.cse33 (+ (* 115510233 x) (* (- 100000025) y)))) (let ((.cse13 (<= .cse33 0)) (.cse31 (<= 1 .cse36))) (let-proof ((.cse32 (total-int .cse36 0))) (res .cse13 (let ((.cse30 (+ (* 149 x) (* (- 129) y)))) (let ((.cse14 (<= .cse30 0)) (.cse28 (<= 1 .cse33))) (let-proof ((.cse29 (total-int .cse33 0))) (res .cse14 (let ((.cse27 (+ (* 103959238 x) (* (- 90000047) y)))) (let ((.cse25 (<= 1 .cse30)) (.cse15 (<= .cse27 0))) (let-proof ((.cse26 (total-int .cse30 0))) (res .cse15 (let ((.cse23 (<= 1 .cse27))) (let-proof ((.cse24 (total-int .cse27 0))) (res .cse3 (let ((.cse22 (+ (* 92408243 x) (* (- 80000069) y)))) (let ((.cse16 (<= .cse22 0))) (res .cse16 (res .cse2 (! (res .cse17 .cse18 (res .cse19 .cse20 (farkas 9999784 .cse19 283 .cse17 1 .cse4))) :proves (+ .cse2 + .cse3 - .cse4) :LA ((- 9999784) (- 283) 1)) (! (let ((.cse21 (<= 1 .cse22))) (res .cse21 (total-int .cse22 0) (res .cse17 .cse18 (farkas 8 .cse17 1 .cse21 326537 .cse2)))) :proves (+ .cse3 + .cse16 - .cse2) :LA ((- 8) (- 1) 326537))) (! (res .cse17 .cse18 (res .cse23 .cse24 (farkas 326537 .cse23 1 .cse17 367354 .cse16))) :proves (+ .cse15 + .cse3 - .cse16) :LA ((- 326537) (- 1) 367354))))) (! (res .cse25 .cse26 (res .cse23 .cse24 (farkas 1 .cse23 367354 .cse25 734699 .cse3))) :proves (+ .cse15 + .cse14 - .cse3) :LA ((- 1) (- 367354) 734699))))) (! (res .cse28 .cse29 (res .cse25 .cse26 (farkas 1 .cse25 734699 .cse28 816332 .cse15))) :proves (+ .cse14 + .cse13 - .cse15) :LA ((- 1) (- 734699) 816332)))))) (! (res .cse28 .cse29 (res .cse31 .cse32 (farkas 816332 .cse31 1224493 .cse14 1 .cse28))) :proves (+ .cse12 - .cse14 + .cse13) :LA ((- 816332) 1224493 (- 1))))))) (! (res .cse34 .cse35 (res .cse31 .cse32 (farkas 1346942 .cse13 1 .cse31 1224493 .cse34))) :proves (- .cse13 + .cse12 + .cse11) :LA (1346942 (- 1) (- 1224493))))))) (! (res .cse34 .cse35 (res .cse37 .cse38 (farkas 1346942 .cse37 1795919 .cse12 1 .cse34))) :proves (+ .cse10 - .cse12 + .cse11) :LA ((- 1346942) 1795919 (- 1))))))) (! (res .cse40 .cse41 (res .cse37 .cse38 (farkas 1 .cse37 14530617 .cse11 1795919 .cse40))) :proves (+ .cse10 - .cse11 + .cse9) :LA ((- 1) 14530617 (- 1795919))))))) (! (res .cse43 .cse44 (res .cse40 .cse41 (farkas 1 .cse40 14530617 .cse43 76285717 .cse10))) :proves (+ .cse9 + .cse8 - .cse10) :LA ((- 1) (- 14530617) 76285717)))))) (! (res .cse43 .cse44 (res .cse46 .cse47 (farkas 143142862 .cse9 76285717 .cse46 1 .cse43))) :proves (- .cse9 + .cse7 + .cse8) :LA (143142862 (- 76285717) (- 1))))))) (! (res .cse49 .cse50 (res .cse46 .cse47 (farkas 259020409 .cse8 1 .cse46 143142862 .cse49))) :proves (- .cse8 + .cse7 + .cse6) :LA (259020409 (- 1) (- 143142862))))))) (! (res .cse49 .cse50 (res .cse52 .cse53 (farkas 380000001 .cse7 259020409 .cse52 1 .cse49))) :proves (- .cse7 + .cse1 + .cse6) :LA (380000001 (- 259020409) (- 1)))))))) .cse55) :proves (+ .cse6) :rup) (! (res .cse17 .cse18 (farkas 9999784 .cse6 379999999 .cse17 29 .cse4)) :proves (- .cse6 + .cse3 - .cse4) :LA (9999784 (- 379999999) 29)))))))) :proves (+ .cse3) :rup) (res .cse59 (! (res .cse57 .cse58 (and- 3 .cse57)) :proves (+ .cse59) :input) (! (res .cse19 .cse20 (farkas 10000187 .cse19 1 .cse59 245 .cse3)) :proves (+ .cse2 - .cse59 - .cse3) :LA ((- 10000187) 1 245))))))) :proves (+ .cse2) :rup) (! (res .cse52 .cse53 (res .cse61 .cse62 (farkas 245 .cse61 283 .cse52 5280000001 .cse2))) :proves (+ .cse0 + .cse1 - .cse2) :LA ((- 245) (- 283) 5280000001))))) .cse55)))) (! (res .cse70 (res .cse57 .cse58 (and- 0 .cse57)) (let ((.cse71 (not .cse0))) (let-proof ((.cse75 (not- .cse71))) (res .cse71 (let ((.cse72 (= .cse70 .cse71))) (res .cse72 (res .cse71 (res .cse70 (=+1 .cse72) (res .cse0 (not+ .cse71) (farkas 1 .cse70 1 .cse0))) (res .cse70 (res .cse73 .cse74 (res .cse0 (res .cse61 .cse62 (farkas 1 .cse73 1 .cse61)) .cse75)) (=+2 .cse72))) (=-2 .cse72))) .cse75)))) :proves (- .cse0) :input))))))))) :proves () :rup)
