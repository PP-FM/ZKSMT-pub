unsat
(! (let ((.cse39 (ControlFlow 0 4))) (let ((.cse32 (= .cse39 (- 3))) (.cse4 (= w@0 y)) (.cse62 (+ y (* (- 1) w@0)))) (let ((.cse0 (= .cse62 0)) (.cse1 (and .cse4 (= (ControlFlow 0 5) 4))) (.cse7 (=> .cse32 .cse4))) (let ((.cse2 (=> .cse1 .cse7)) (.cse5 (= .cse4 .cse0))) (let-proof ((.cse6 (res .cse0 (res .cse4 (=+1 .cse5) (let ((.cse59 (= y w@0))) (res .cse59 (symm y w@0) (let ((.cse60 (< .cse62 0))) (res .cse60 (let ((.cse61 (< 0 .cse62))) (res .cse61 (trichotomy .cse62 0) (farkas 1 .cse59 1 .cse61))) (farkas 1 .cse4 1 .cse60)))))) (res .cse4 (let ((.cse63 (= 0 .cse62))) (res .cse63 (symm 0 .cse62) (let ((.cse64 (< w@0 y))) (res .cse64 (let ((.cse65 (< y w@0))) (res .cse65 (trichotomy w@0 y) (farkas 1 .cse63 1 .cse65))) (farkas 1 .cse0 1 .cse64))))) (=+2 .cse5)))) (.cse3 (! (let ((.cse58 (ControlFlow 0 6))) (let ((.cse40 (= .cse58 5))) (let ((.cse11 (=> .cse40 .cse2))) (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse2) :input) (! (let ((.cse56 (+ x (* (- 1) y)))) (let ((.cse14 (<= .cse56 0)) (.cse51 (ControlFlow 0 2))) (let ((.cse46 (= .cse51 (- 1))) (.cse15 (not .cse14))) (let ((.cse53 (= .cse58 2)) (.cse13 (=> .cse46 .cse15))) (let ((.cse12 (=> .cse53 .cse13))) (let ((.cse20 (and .cse12 .cse11))) (let ((.cse17 (=> .cse15 .cse20))) (let-proof ((.cse16 (not+ .cse15)) (.cse18 (not- .cse15))) (let-proof ((.cse19 (let ((.cse57 (= (ControlFlow 0 0) 6))) (let ((.cse21 (=> .cse57 .cse17))) (res .cse21 (=>+ 1 .cse21) (let ((.cse33 (- 0 3))) (let ((.cse31 (= .cse39 .cse33)) (.cse47 (- 0 1))) (let ((.cse45 (= .cse51 .cse47)) (.cse52 (< y x)) (.cse30 (=> .cse31 .cse4))) (let ((.cse29 (=> .cse1 .cse30)) (.cse42 (=> .cse45 .cse52))) (let ((.cse41 (=> .cse53 .cse42)) (.cse28 (=> .cse40 .cse29))) (let ((.cse27 (and .cse41 .cse28))) (let ((.cse26 (=> .cse52 .cse27))) (let ((.cse22 (=> .cse57 .cse26))) (let ((.cse24 (not .cse22))) (res .cse22 (let ((.cse23 (not .cse21))) (res .cse23 (res .cse24 (not+ .cse24) (let ((.cse25 (= .cse24 .cse23))) (res .cse25 (res (= .cse22 .cse21) (res (= .cse26 .cse17) (let ((.cse43 (= .cse52 .cse15))) (let-proof ((.cse44 (res .cse15 (res .cse52 (=+1 .cse43) (res .cse14 .cse16 (farkas 1 .cse52 1 .cse14))) (res .cse52 (let ((.cse54 (<= x y))) (res .cse54 (total x y) (res .cse14 (let ((.cse55 (< 0 .cse56))) (res .cse55 (total .cse56 0) (farkas 1 .cse54 1 .cse55))) .cse18))) (=+2 .cse43))))) (res (= .cse27 .cse20) (let ((.cse35 (= 0 0))) (let-proof ((.cse36 (refl 0))) (res (= .cse28 .cse11) (res (= .cse29 .cse2) (res (= .cse30 .cse7) (res (= .cse4 .cse4) (refl .cse4) (res (= .cse31 .cse32) (res (= .cse33 (- 3)) (let ((.cse34 (* (- 1) 3))) (res (= .cse34 (- 3)) (poly* .cse34 (- 3)) (res .cse35 .cse36 (let ((.cse37 (+ 0 .cse34)) (.cse38 (+ 0 (- 3)))) (res (= .cse37 .cse38) (cong (+ 0 .cse34) (+ 0 (- 3))) (res (= .cse33 .cse37) (-def 0 3) (res (= .cse38 (- 3)) (poly+ .cse38 (- 3)) (trans .cse33 .cse37 .cse38 (- 3))))))))) (res (= .cse39 .cse39) (refl .cse39) (cong (= .cse39 .cse33) (= .cse39 (- 3))))) (cong (=> .cse31 .cse4) (=> .cse32 .cse4)))) (res (= .cse1 .cse1) (refl .cse1) (cong (=> .cse1 .cse30) (=> .cse1 .cse7)))) (res (= .cse40 .cse40) (refl .cse40) (cong (=> .cse40 .cse29) (=> .cse40 .cse2)))) (res (= .cse41 .cse12) (res (= .cse42 .cse13) (res .cse43 .cse44 (res (= .cse45 .cse46) (res (= .cse47 (- 1)) (let ((.cse48 (* (- 1) 1))) (res (= .cse48 (- 1)) (poly* .cse48 (- 1)) (res .cse35 .cse36 (let ((.cse49 (+ 0 .cse48)) (.cse50 (+ 0 (- 1)))) (res (= .cse49 .cse50) (cong (+ 0 .cse48) (+ 0 (- 1))) (res (= .cse47 .cse49) (-def 0 1) (res (= .cse50 (- 1)) (poly+ .cse50 (- 1)) (trans .cse47 .cse49 .cse50 (- 1))))))))) (res (= .cse51 .cse51) (refl .cse51) (cong (= .cse51 .cse47) (= .cse51 (- 1))))) (cong (=> .cse45 .cse52) (=> .cse46 .cse15)))) (res (= .cse53 .cse53) (refl .cse53) (cong (=> .cse53 .cse42) (=> .cse53 .cse13)))) (cong (and .cse41 .cse28) (and .cse12 .cse11)))))) (res .cse43 .cse44 (cong (=> .cse52 .cse27) (=> .cse15 .cse20)))))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse26) (=> .cse57 .cse17)))) (cong (not .cse22) (not .cse21))) (=-2 .cse25)))) (not- .cse23))) (res .cse24 (assume .cse24) (not- .cse24))))))))))))))))) (res .cse12 (! (res .cse13 (! (res .cse14 (! (res .cse15 .cse16 (=>+ 1 .cse13)) :proves (+ .cse13 + .cse14) :input) (! (res .cse17 (res .cse15 (=>+ 0 .cse17) .cse18) .cse19) :proves (- .cse14) :input)) :proves (+ .cse13) :rup) (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse13) :input)) :proves (+ .cse12) :rup) (! (res .cse20 (and+ .cse20) (res .cse17 (=>+ 1 .cse17) .cse19)) :proves (- .cse12 - .cse11) :input))))))))))) :proves (- .cse11) :rup))))) :proves (- .cse2) :rup))) (res .cse0 (res .cse1 (! (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + .cse1) :input) .cse3) :proves (+ .cse1) :rup) (! (res .cse4 (and- 0 .cse1) (res .cse5 .cse6 (=-2 .cse5))) :proves (- .cse1 + .cse0) :input)) (! (res .cse7 (! (res .cse4 (let ((.cse8 (not .cse0))) (res .cse8 (let ((.cse9 (not .cse4))) (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res .cse5 .cse6 (cong (not .cse4) (not .cse0))) (=-2 .cse10))))) (not- .cse8))) (=>+ 1 .cse7)) :proves (+ .cse7 - .cse0) :input) (! (res .cse2 (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse7) :input) .cse3) :proves (- .cse7) :rup)) :proves (- .cse0) :rup))))))) :proves () :rup)
