unsat
(! (let-proof ((.cse6 false-)) (res false (let ((.cse10 (+ 1 1))) (let ((.cse0 (= .cse10 2))) (let ((.cse1 (not .cse0))) (res .cse0 (res .cse1 (not+ .cse1) (let ((.cse2 (= .cse1 false))) (res .cse2 (let ((.cse4 (not true))) (let ((.cse3 (= .cse4 false))) (let-proof ((.cse5 true+)) (res .cse3 (res false (res .cse4 (=+1 .cse3) (res true .cse5 (not- .cse4))) .cse6) (res (= .cse1 .cse4) (res (= .cse0 true) (let ((.cse8 (= 2 2))) (let ((.cse7 (= .cse8 true))) (let-proof ((.cse9 (refl 2))) (res .cse7 (res true .cse5 (res .cse8 .cse9 (=+2 .cse7))) (res (= .cse0 .cse8) (res .cse8 .cse9 (res .cse0 (poly+ .cse10 2) (cong (= .cse10 2) (= 2 2)))) (trans .cse0 .cse8 true)))))) (cong (not .cse0) (not true))) (trans .cse1 .cse4 false)))))) (=-2 .cse2)))) (res .cse1 (assume .cse1) (not- .cse1)))))) .cse6)) :proves () :input)
