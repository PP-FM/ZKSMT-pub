unsat
(! (let ((.cse20 (f a)) (.cse21 (f b)) (.cse13 (p b))) (let ((.cse3 (p a)) (.cse15 (not .cse13)) (.cse18 (= .cse20 .cse21))) (let ((.cse25 (not .cse18)) (.cse1 (and .cse3 .cse15))) (let ((.cse6 (= b c)) (.cse22 (or .cse25 .cse1))) (let ((.cse8 (= a c)) (.cse23 (and .cse6 .cse22))) (let ((.cse26 (and .cse8 .cse23))) (let-proof ((.cse27 (assume .cse26))) (let-proof ((.cse24 (res .cse26 .cse27 (and- 1 .cse26)))) (let-proof ((.cse7 (! (res .cse23 .cse24 (and- 0 .cse23)) :proves (+ .cse6) :input)) (.cse9 (! (res .cse26 .cse27 (and- 0 .cse26)) :proves (+ .cse8) :input))) (let ((.cse0 (= .cse3 true))) (let-proof ((.cse2 (! (res .cse18 (! (res .cse6 .cse7 (res .cse8 .cse9 (let ((.cse19 (= a b))) (res .cse19 (! (res (= c b) (symm c b) (trans a c b)) :proves (+ .cse19 - .cse8 - .cse6) :trans (a c b)) (! (cong (f a) (f b)) :proves (+ .cse18 - .cse19) :cong (.cse20 .cse21)))))) :proves (+ .cse18) :rup) (! (res .cse22 (res .cse23 .cse24 (and- 1 .cse23)) (res .cse25 (or- .cse22) (not- .cse25))) :proves (- .cse18 + .cse1) :input)) :proves (+ .cse1) :rup)) (.cse5 true+)) (res .cse0 (res .cse1 .cse2 (! (res .cse3 (and- 0 .cse1) (let ((.cse4 (= .cse3 .cse0))) (res .cse4 (res true .cse5 (res .cse0 (res .cse3 (=+1 .cse4) (=+2 .cse0)) (res .cse3 (=-1 .cse0) (=+2 .cse4)))) (=-2 .cse4)))) :proves (- .cse1 + .cse0) :input)) (! (res .cse6 .cse7 (res .cse8 .cse9 (let ((.cse10 (= .cse13 true))) (res .cse10 (let ((.cse11 (= b a))) (res .cse11 (! (res (= c a) (symm c a) (trans b c a)) :proves (+ .cse11 - .cse6 - .cse8) :trans (b c a)) (let ((.cse12 (= .cse13 .cse3))) (res .cse12 (! (cong (p b) (p a)) :proves (+ .cse12 - .cse11) :cong (.cse13 .cse3)) (! (trans .cse13 .cse3 true) :proves (+ .cse10 - .cse12 - .cse0) :trans (.cse13 .cse3 true)))))) (! (res .cse1 .cse2 (! (res .cse13 (let ((.cse14 (not .cse10))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (let ((.cse17 (= .cse13 .cse10))) (res .cse17 (res true .cse5 (res .cse10 (res .cse13 (=+1 .cse17) (=+2 .cse10)) (res .cse13 (=-1 .cse10) (=+2 .cse17)))) (cong (not .cse13) (not .cse10)))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (and- 1 .cse1) (not- .cse15))) :proves (- .cse1 - .cse10) :input)) :proves (- .cse10) :rup))))) :proves (- .cse0) :rup))))))))))))) :proves () :rup)
