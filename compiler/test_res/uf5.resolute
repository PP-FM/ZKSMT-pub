unsat
(! (let ((.cse12 (= a f))) (let ((.cse3 (= e f)) (.cse13 (not .cse12))) (let ((.cse6 (= c e)) (.cse4 (and .cse3 .cse13))) (let ((.cse7 (and .cse6 .cse4))) (let ((.cse9 (= b c)) (.cse14 (and (= c d) .cse7))) (let ((.cse0 (= a b)) (.cse10 (and .cse9 .cse14))) (let ((.cse1 (and .cse0 .cse10))) (let-proof ((.cse2 (assume .cse1))) (res .cse0 (! (res .cse1 .cse2 (and- 0 .cse1)) :proves (+ .cse0) :input) (! (let-proof ((.cse11 (res .cse1 .cse2 (and- 1 .cse1)))) (let-proof ((.cse8 (res .cse14 (res .cse10 .cse11 (and- 1 .cse10)) (and- 1 .cse14)))) (let-proof ((.cse5 (res .cse7 .cse8 (and- 1 .cse7)))) (res .cse3 (! (res .cse4 .cse5 (and- 0 .cse4)) :proves (+ .cse3) :input) (res .cse6 (! (res .cse7 .cse8 (and- 0 .cse7)) :proves (+ .cse6) :input) (res .cse9 (! (res .cse10 .cse11 (and- 0 .cse10)) :proves (+ .cse9) :input) (res .cse12 (! (trans a b c e f) :proves (+ .cse12 - .cse0 - .cse9 - .cse6 - .cse3) :trans (a b c e f)) (! (res .cse4 .cse5 (res .cse13 (and- 1 .cse4) (not- .cse13))) :proves (- .cse12) :input)))))))) :proves (- .cse0) :rup)))))))))) :proves () :rup)
