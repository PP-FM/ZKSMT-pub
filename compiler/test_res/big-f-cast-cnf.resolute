unsat
(! (let ((.cse904 (not min31))) (let ((.cse610 (not fb_eq_fna31)) (.cse897 (not fb31)) (.cse611 (not fna31)) (.cse604 (not fa31)) (.cse607 (not nfa31)) (.cse28 (not carry30)) (.cse71 (not fa_min_lt_right31)) (.cse763 (not fb_eq_fna))) (let-proof ((.cse901 (! (assume min31) :proves (+ min31) :input)) (.cse906 (not- .cse904))) (let ((.cse23 (not nfa30)) (.cse12 (not fb_eq_fna30)) (.cse17 (not fna30)) (.cse13 (not fb30)) (.cse22 (not carry29)) (.cse27 (not fa30)) (.cse3 (not min30))) (let-proof ((.cse887 (! (let ((.cse1206 (not err))) (res .cse1206 (assume .cse1206) (not- .cse1206))) :proves (- err) :input)) (.cse761 (! (res b_eq_na (! (res b_eq_na26 (! (let ((.cse917 (not na26))) (let-proof ((.cse918 (not- .cse917))) (res b26 (! (res na26 (! (let ((.cse915 (or b26 na26 b_eq_na26))) (res .cse915 (assume .cse915) (or- .cse915))) :proves (+ b26 + na26 + b_eq_na26) :input) (! (let ((.cse916 (or b26 .cse917))) (res .cse916 (assume .cse916) (res .cse917 (or- .cse916) .cse918))) :proves (+ b26 - na26) :input)) :proves (+ b26 + b_eq_na26) :rup) (let ((.cse920 (not b26))) (let-proof ((.cse921 (not- .cse920))) (res na26 (! (let ((.cse919 (or .cse920 na26))) (res .cse919 (assume .cse919) (res .cse920 (or- .cse919) .cse921))) :proves (- b26 + na26) :input) (! (let ((.cse922 (or .cse920 .cse917 b_eq_na26))) (res .cse922 (assume .cse922) (res .cse917 (res .cse920 (or- .cse922) .cse921) .cse918))) :proves (+ b_eq_na26 - na26 - b26) :input))))))) :proves (+ b_eq_na26) :rup) (res b_eq_na27 (! (let ((.cse925 (not na27))) (let-proof ((.cse926 (not- .cse925))) (res b27 (! (res na27 (! (let ((.cse923 (or b27 na27 b_eq_na27))) (res .cse923 (assume .cse923) (or- .cse923))) :proves (+ b27 + na27 + b_eq_na27) :input) (! (let ((.cse924 (or b27 .cse925))) (res .cse924 (assume .cse924) (res .cse925 (or- .cse924) .cse926))) :proves (+ b27 - na27) :input)) :proves (+ b27 + b_eq_na27) :rup) (let ((.cse928 (not b27))) (let-proof ((.cse929 (not- .cse928))) (res na27 (! (let ((.cse927 (or .cse928 na27))) (res .cse927 (assume .cse927) (res .cse928 (or- .cse927) .cse929))) :proves (- b27 + na27) :input) (! (let ((.cse930 (or .cse928 .cse925 b_eq_na27))) (res .cse930 (assume .cse930) (res .cse925 (res .cse928 (or- .cse930) .cse929) .cse926))) :proves (+ b_eq_na27 - na27 - b27) :input))))))) :proves (+ b_eq_na27) :rup) (res b_eq_na1 (! (let ((.cse933 (not b1))) (let-proof ((.cse934 (not- .cse933))) (res na1 (! (res b1 (! (let ((.cse931 (or b1 na1 b_eq_na1))) (res .cse931 (assume .cse931) (or- .cse931))) :proves (+ b1 + na1 + b_eq_na1) :input) (! (let ((.cse932 (or .cse933 na1))) (res .cse932 (assume .cse932) (res .cse933 (or- .cse932) .cse934))) :proves (- b1 + na1) :input)) :proves (+ b_eq_na1 + na1) :rup) (let ((.cse936 (not na1))) (let-proof ((.cse937 (not- .cse936))) (res b1 (! (let ((.cse935 (or b1 .cse936))) (res .cse935 (assume .cse935) (res .cse936 (or- .cse935) .cse937))) :proves (+ b1 - na1) :input) (! (let ((.cse938 (or .cse933 .cse936 b_eq_na1))) (res .cse938 (assume .cse938) (res .cse936 (res .cse933 (or- .cse938) .cse934) .cse937))) :proves (- b1 + b_eq_na1 - na1) :input))))))) :proves (+ b_eq_na1) :rup) (res b_eq_na15 (! (let ((.cse941 (not b15))) (let-proof ((.cse942 (not- .cse941))) (res na15 (! (res b15 (! (let ((.cse939 (or b15 na15 b_eq_na15))) (res .cse939 (assume .cse939) (or- .cse939))) :proves (+ b15 + na15 + b_eq_na15) :input) (! (let ((.cse940 (or .cse941 na15))) (res .cse940 (assume .cse940) (res .cse941 (or- .cse940) .cse942))) :proves (- b15 + na15) :input)) :proves (+ na15 + b_eq_na15) :rup) (let ((.cse944 (not na15))) (let-proof ((.cse945 (not- .cse944))) (res b15 (! (let ((.cse943 (or b15 .cse944))) (res .cse943 (assume .cse943) (res .cse944 (or- .cse943) .cse945))) :proves (+ b15 - na15) :input) (! (let ((.cse946 (or .cse941 .cse944 b_eq_na15))) (res .cse946 (assume .cse946) (res .cse944 (res .cse941 (or- .cse946) .cse942) .cse945))) :proves (- b15 + b_eq_na15 - na15) :input))))))) :proves (+ b_eq_na15) :rup) (res b_eq_na9 (! (let ((.cse949 (not b9))) (let-proof ((.cse950 (not- .cse949))) (res na9 (! (res b9 (! (let ((.cse947 (or b9 na9 b_eq_na9))) (res .cse947 (assume .cse947) (or- .cse947))) :proves (+ b9 + na9 + b_eq_na9) :input) (! (let ((.cse948 (or .cse949 na9))) (res .cse948 (assume .cse948) (res .cse949 (or- .cse948) .cse950))) :proves (- b9 + na9) :input)) :proves (+ b_eq_na9 + na9) :rup) (let ((.cse952 (not na9))) (let-proof ((.cse953 (not- .cse952))) (res b9 (! (let ((.cse951 (or b9 .cse952))) (res .cse951 (assume .cse951) (res .cse952 (or- .cse951) .cse953))) :proves (+ b9 - na9) :input) (! (let ((.cse954 (or .cse949 .cse952 b_eq_na9))) (res .cse954 (assume .cse954) (res .cse952 (res .cse949 (or- .cse954) .cse950) .cse953))) :proves (- b9 + b_eq_na9 - na9) :input))))))) :proves (+ b_eq_na9) :rup) (res b_eq_na12 (! (let ((.cse957 (not na12))) (let-proof ((.cse958 (not- .cse957))) (res b12 (! (res na12 (! (let ((.cse955 (or b12 na12 b_eq_na12))) (res .cse955 (assume .cse955) (or- .cse955))) :proves (+ b12 + na12 + b_eq_na12) :input) (! (let ((.cse956 (or b12 .cse957))) (res .cse956 (assume .cse956) (res .cse957 (or- .cse956) .cse958))) :proves (+ b12 - na12) :input)) :proves (+ b_eq_na12 + b12) :rup) (let ((.cse960 (not b12))) (let-proof ((.cse961 (not- .cse960))) (res na12 (! (let ((.cse959 (or .cse960 na12))) (res .cse959 (assume .cse959) (res .cse960 (or- .cse959) .cse961))) :proves (- b12 + na12) :input) (! (let ((.cse962 (or .cse960 .cse957 b_eq_na12))) (res .cse962 (assume .cse962) (res .cse957 (res .cse960 (or- .cse962) .cse961) .cse958))) :proves (+ b_eq_na12 - na12 - b12) :input))))))) :proves (+ b_eq_na12) :rup) (res b_eq_na20 (! (let ((.cse965 (not b20))) (let-proof ((.cse966 (not- .cse965))) (res na20 (! (res b20 (! (let ((.cse963 (or b20 na20 b_eq_na20))) (res .cse963 (assume .cse963) (or- .cse963))) :proves (+ b20 + na20 + b_eq_na20) :input) (! (let ((.cse964 (or .cse965 na20))) (res .cse964 (assume .cse964) (res .cse965 (or- .cse964) .cse966))) :proves (- b20 + na20) :input)) :proves (+ b_eq_na20 + na20) :rup) (let ((.cse968 (not na20))) (let-proof ((.cse969 (not- .cse968))) (res b20 (! (let ((.cse967 (or b20 .cse968))) (res .cse967 (assume .cse967) (res .cse968 (or- .cse967) .cse969))) :proves (+ b20 - na20) :input) (! (let ((.cse970 (or .cse965 .cse968 b_eq_na20))) (res .cse970 (assume .cse970) (res .cse968 (res .cse965 (or- .cse970) .cse966) .cse969))) :proves (- b20 + b_eq_na20 - na20) :input))))))) :proves (+ b_eq_na20) :rup) (res b_eq_na14 (! (let ((.cse973 (not na14))) (let-proof ((.cse974 (not- .cse973))) (res b14 (! (res na14 (! (let ((.cse971 (or b14 na14 b_eq_na14))) (res .cse971 (assume .cse971) (or- .cse971))) :proves (+ na14 + b14 + b_eq_na14) :input) (! (let ((.cse972 (or b14 .cse973))) (res .cse972 (assume .cse972) (res .cse973 (or- .cse972) .cse974))) :proves (+ b14 - na14) :input)) :proves (+ b_eq_na14 + b14) :rup) (let ((.cse976 (not b14))) (let-proof ((.cse977 (not- .cse976))) (res na14 (! (let ((.cse975 (or .cse976 na14))) (res .cse975 (assume .cse975) (res .cse976 (or- .cse975) .cse977))) :proves (- b14 + na14) :input) (! (let ((.cse978 (or .cse976 .cse973 b_eq_na14))) (res .cse978 (assume .cse978) (res .cse973 (res .cse976 (or- .cse978) .cse977) .cse974))) :proves (+ b_eq_na14 - na14 - b14) :input))))))) :proves (+ b_eq_na14) :rup) (res b_eq_na22 (! (let ((.cse981 (not b22))) (let-proof ((.cse982 (not- .cse981))) (res na22 (! (res b22 (! (let ((.cse979 (or b22 na22 b_eq_na22))) (res .cse979 (assume .cse979) (or- .cse979))) :proves (+ na22 + b22 + b_eq_na22) :input) (! (let ((.cse980 (or .cse981 na22))) (res .cse980 (assume .cse980) (res .cse981 (or- .cse980) .cse982))) :proves (- b22 + na22) :input)) :proves (+ b_eq_na22 + na22) :rup) (let ((.cse984 (not na22))) (let-proof ((.cse985 (not- .cse984))) (res b22 (! (let ((.cse983 (or b22 .cse984))) (res .cse983 (assume .cse983) (res .cse984 (or- .cse983) .cse985))) :proves (+ b22 - na22) :input) (! (let ((.cse986 (or .cse981 .cse984 b_eq_na22))) (res .cse986 (assume .cse986) (res .cse984 (res .cse981 (or- .cse986) .cse982) .cse985))) :proves (- b22 + b_eq_na22 - na22) :input))))))) :proves (+ b_eq_na22) :rup) (res b_eq_na28 (! (let ((.cse989 (not na28))) (let-proof ((.cse990 (not- .cse989))) (res b28 (! (res na28 (! (let ((.cse987 (or b28 na28 b_eq_na28))) (res .cse987 (assume .cse987) (or- .cse987))) :proves (+ b28 + na28 + b_eq_na28) :input) (! (let ((.cse988 (or b28 .cse989))) (res .cse988 (assume .cse988) (res .cse989 (or- .cse988) .cse990))) :proves (+ b28 - na28) :input)) :proves (+ b28 + b_eq_na28) :rup) (let ((.cse992 (not b28))) (let-proof ((.cse993 (not- .cse992))) (res na28 (! (let ((.cse991 (or .cse992 na28))) (res .cse991 (assume .cse991) (res .cse992 (or- .cse991) .cse993))) :proves (- b28 + na28) :input) (! (let ((.cse994 (or .cse992 .cse989 b_eq_na28))) (res .cse994 (assume .cse994) (res .cse989 (res .cse992 (or- .cse994) .cse993) .cse990))) :proves (+ b_eq_na28 - na28 - b28) :input))))))) :proves (+ b_eq_na28) :rup) (res b_eq_na3 (! (let ((.cse997 (not b3))) (let-proof ((.cse998 (not- .cse997))) (res na3 (! (res b3 (! (let ((.cse995 (or b3 na3 b_eq_na3))) (res .cse995 (assume .cse995) (or- .cse995))) :proves (+ b3 + na3 + b_eq_na3) :input) (! (let ((.cse996 (or .cse997 na3))) (res .cse996 (assume .cse996) (res .cse997 (or- .cse996) .cse998))) :proves (- b3 + na3) :input)) :proves (+ na3 + b_eq_na3) :rup) (let ((.cse1000 (not na3))) (let-proof ((.cse1001 (not- .cse1000))) (res b3 (! (let ((.cse999 (or b3 .cse1000))) (res .cse999 (assume .cse999) (res .cse1000 (or- .cse999) .cse1001))) :proves (+ b3 - na3) :input) (! (let ((.cse1002 (or .cse997 .cse1000 b_eq_na3))) (res .cse1002 (assume .cse1002) (res .cse1000 (res .cse997 (or- .cse1002) .cse998) .cse1001))) :proves (- b3 + b_eq_na3 - na3) :input))))))) :proves (+ b_eq_na3) :rup) (res b_eq_na16 (! (let ((.cse1005 (not b16))) (let-proof ((.cse1006 (not- .cse1005))) (res na16 (! (res b16 (! (let ((.cse1003 (or b16 na16 b_eq_na16))) (res .cse1003 (assume .cse1003) (or- .cse1003))) :proves (+ na16 + b16 + b_eq_na16) :input) (! (let ((.cse1004 (or .cse1005 na16))) (res .cse1004 (assume .cse1004) (res .cse1005 (or- .cse1004) .cse1006))) :proves (- b16 + na16) :input)) :proves (+ b_eq_na16 + na16) :rup) (let ((.cse1008 (not na16))) (let-proof ((.cse1009 (not- .cse1008))) (res b16 (! (let ((.cse1007 (or b16 .cse1008))) (res .cse1007 (assume .cse1007) (res .cse1008 (or- .cse1007) .cse1009))) :proves (+ b16 - na16) :input) (! (let ((.cse1010 (or .cse1005 .cse1008 b_eq_na16))) (res .cse1010 (assume .cse1010) (res .cse1008 (res .cse1005 (or- .cse1010) .cse1006) .cse1009))) :proves (- b16 + b_eq_na16 - na16) :input))))))) :proves (+ b_eq_na16) :rup) (res b_eq_na31 (! (let ((.cse1013 (not b31))) (let-proof ((.cse1014 (not- .cse1013))) (res na31 (! (res b31 (! (let ((.cse1011 (or b31 na31 b_eq_na31))) (res .cse1011 (assume .cse1011) (or- .cse1011))) :proves (+ na31 + b31 + b_eq_na31) :input) (! (let ((.cse1012 (or .cse1013 na31))) (res .cse1012 (assume .cse1012) (res .cse1013 (or- .cse1012) .cse1014))) :proves (- b31 + na31) :input)) :proves (+ na31 + b_eq_na31) :rup) (let ((.cse1016 (not na31))) (let-proof ((.cse1017 (not- .cse1016))) (res b31 (! (let ((.cse1015 (or b31 .cse1016))) (res .cse1015 (assume .cse1015) (res .cse1016 (or- .cse1015) .cse1017))) :proves (+ b31 - na31) :input) (! (let ((.cse1018 (or .cse1013 .cse1016 b_eq_na31))) (res .cse1018 (assume .cse1018) (res .cse1016 (res .cse1013 (or- .cse1018) .cse1014) .cse1017))) :proves (- b31 + b_eq_na31 - na31) :input))))))) :proves (+ b_eq_na31) :rup) (res b_eq_na5 (! (let ((.cse1021 (not na5))) (let-proof ((.cse1022 (not- .cse1021))) (res b5 (! (res na5 (! (let ((.cse1019 (or b5 na5 b_eq_na5))) (res .cse1019 (assume .cse1019) (or- .cse1019))) :proves (+ b5 + na5 + b_eq_na5) :input) (! (let ((.cse1020 (or b5 .cse1021))) (res .cse1020 (assume .cse1020) (res .cse1021 (or- .cse1020) .cse1022))) :proves (+ b5 - na5) :input)) :proves (+ b_eq_na5 + b5) :rup) (let ((.cse1024 (not b5))) (let-proof ((.cse1025 (not- .cse1024))) (res na5 (! (let ((.cse1023 (or .cse1024 na5))) (res .cse1023 (assume .cse1023) (res .cse1024 (or- .cse1023) .cse1025))) :proves (- b5 + na5) :input) (! (let ((.cse1026 (or .cse1024 .cse1021 b_eq_na5))) (res .cse1026 (assume .cse1026) (res .cse1021 (res .cse1024 (or- .cse1026) .cse1025) .cse1022))) :proves (+ b_eq_na5 - na5 - b5) :input))))))) :proves (+ b_eq_na5) :rup) (res b_eq_na29 (! (let ((.cse1029 (not na29))) (let-proof ((.cse1030 (not- .cse1029))) (res b29 (! (res na29 (! (let ((.cse1027 (or b29 na29 b_eq_na29))) (res .cse1027 (assume .cse1027) (or- .cse1027))) :proves (+ b29 + na29 + b_eq_na29) :input) (! (let ((.cse1028 (or b29 .cse1029))) (res .cse1028 (assume .cse1028) (res .cse1029 (or- .cse1028) .cse1030))) :proves (+ b29 - na29) :input)) :proves (+ b_eq_na29 + b29) :rup) (let ((.cse1032 (not b29))) (let-proof ((.cse1033 (not- .cse1032))) (res na29 (! (let ((.cse1031 (or .cse1032 na29))) (res .cse1031 (assume .cse1031) (res .cse1032 (or- .cse1031) .cse1033))) :proves (- b29 + na29) :input) (! (let ((.cse1034 (or .cse1032 .cse1029 b_eq_na29))) (res .cse1034 (assume .cse1034) (res .cse1029 (res .cse1032 (or- .cse1034) .cse1033) .cse1030))) :proves (+ b_eq_na29 - na29 - b29) :input))))))) :proves (+ b_eq_na29) :rup) (res b_eq_na21 (! (let ((.cse1037 (not b21))) (let-proof ((.cse1038 (not- .cse1037))) (res na21 (! (res b21 (! (let ((.cse1035 (or b21 na21 b_eq_na21))) (res .cse1035 (assume .cse1035) (or- .cse1035))) :proves (+ na21 + b21 + b_eq_na21) :input) (! (let ((.cse1036 (or .cse1037 na21))) (res .cse1036 (assume .cse1036) (res .cse1037 (or- .cse1036) .cse1038))) :proves (- b21 + na21) :input)) :proves (+ b_eq_na21 + na21) :rup) (let ((.cse1040 (not na21))) (let-proof ((.cse1041 (not- .cse1040))) (res b21 (! (let ((.cse1039 (or b21 .cse1040))) (res .cse1039 (assume .cse1039) (res .cse1040 (or- .cse1039) .cse1041))) :proves (+ b21 - na21) :input) (! (let ((.cse1042 (or .cse1037 .cse1040 b_eq_na21))) (res .cse1042 (assume .cse1042) (res .cse1040 (res .cse1037 (or- .cse1042) .cse1038) .cse1041))) :proves (- b21 + b_eq_na21 - na21) :input))))))) :proves (+ b_eq_na21) :rup) (res b_eq_na13 (! (let ((.cse1045 (not b13))) (let-proof ((.cse1046 (not- .cse1045))) (res na13 (! (res b13 (! (let ((.cse1043 (or b13 na13 b_eq_na13))) (res .cse1043 (assume .cse1043) (or- .cse1043))) :proves (+ b13 + na13 + b_eq_na13) :input) (! (let ((.cse1044 (or .cse1045 na13))) (res .cse1044 (assume .cse1044) (res .cse1045 (or- .cse1044) .cse1046))) :proves (- b13 + na13) :input)) :proves (+ na13 + b_eq_na13) :rup) (let ((.cse1048 (not na13))) (let-proof ((.cse1049 (not- .cse1048))) (res b13 (! (let ((.cse1047 (or b13 .cse1048))) (res .cse1047 (assume .cse1047) (res .cse1048 (or- .cse1047) .cse1049))) :proves (+ b13 - na13) :input) (! (let ((.cse1050 (or .cse1045 .cse1048 b_eq_na13))) (res .cse1050 (assume .cse1050) (res .cse1048 (res .cse1045 (or- .cse1050) .cse1046) .cse1049))) :proves (- b13 + b_eq_na13 - na13) :input))))))) :proves (+ b_eq_na13) :rup) (res b_eq_na25 (! (let ((.cse1053 (not b25))) (let-proof ((.cse1054 (not- .cse1053))) (res na25 (! (res b25 (! (let ((.cse1051 (or b25 na25 b_eq_na25))) (res .cse1051 (assume .cse1051) (or- .cse1051))) :proves (+ na25 + b25 + b_eq_na25) :input) (! (let ((.cse1052 (or .cse1053 na25))) (res .cse1052 (assume .cse1052) (res .cse1053 (or- .cse1052) .cse1054))) :proves (- b25 + na25) :input)) :proves (+ na25 + b_eq_na25) :rup) (let ((.cse1056 (not na25))) (let-proof ((.cse1057 (not- .cse1056))) (res b25 (! (let ((.cse1055 (or b25 .cse1056))) (res .cse1055 (assume .cse1055) (res .cse1056 (or- .cse1055) .cse1057))) :proves (+ b25 - na25) :input) (! (let ((.cse1058 (or .cse1053 .cse1056 b_eq_na25))) (res .cse1058 (assume .cse1058) (res .cse1056 (res .cse1053 (or- .cse1058) .cse1054) .cse1057))) :proves (- b25 + b_eq_na25 - na25) :input))))))) :proves (+ b_eq_na25) :rup) (res b_eq_na7 (! (let ((.cse1061 (not b7))) (let-proof ((.cse1062 (not- .cse1061))) (res na7 (! (res b7 (! (let ((.cse1059 (or b7 na7 b_eq_na7))) (res .cse1059 (assume .cse1059) (or- .cse1059))) :proves (+ na7 + b7 + b_eq_na7) :input) (! (let ((.cse1060 (or .cse1061 na7))) (res .cse1060 (assume .cse1060) (res .cse1061 (or- .cse1060) .cse1062))) :proves (- b7 + na7) :input)) :proves (+ b_eq_na7 + na7) :rup) (let ((.cse1064 (not na7))) (let-proof ((.cse1065 (not- .cse1064))) (res b7 (! (let ((.cse1063 (or b7 .cse1064))) (res .cse1063 (assume .cse1063) (res .cse1064 (or- .cse1063) .cse1065))) :proves (+ b7 - na7) :input) (! (let ((.cse1066 (or .cse1061 .cse1064 b_eq_na7))) (res .cse1066 (assume .cse1066) (res .cse1064 (res .cse1061 (or- .cse1066) .cse1062) .cse1065))) :proves (- b7 + b_eq_na7 - na7) :input))))))) :proves (+ b_eq_na7) :rup) (res b_eq_na30 (! (let ((.cse1069 (not b30))) (let-proof ((.cse1070 (not- .cse1069))) (res na30 (! (res b30 (! (let ((.cse1067 (or b30 na30 b_eq_na30))) (res .cse1067 (assume .cse1067) (or- .cse1067))) :proves (+ b30 + na30 + b_eq_na30) :input) (! (let ((.cse1068 (or .cse1069 na30))) (res .cse1068 (assume .cse1068) (res .cse1069 (or- .cse1068) .cse1070))) :proves (- b30 + na30) :input)) :proves (+ na30 + b_eq_na30) :rup) (let ((.cse1072 (not na30))) (let-proof ((.cse1073 (not- .cse1072))) (res b30 (! (let ((.cse1071 (or b30 .cse1072))) (res .cse1071 (assume .cse1071) (res .cse1072 (or- .cse1071) .cse1073))) :proves (+ b30 - na30) :input) (! (let ((.cse1074 (or .cse1069 .cse1072 b_eq_na30))) (res .cse1074 (assume .cse1074) (res .cse1072 (res .cse1069 (or- .cse1074) .cse1070) .cse1073))) :proves (- b30 + b_eq_na30 - na30) :input))))))) :proves (+ b_eq_na30) :rup) (res b_eq_na6 (! (let ((.cse1077 (not na6))) (let-proof ((.cse1078 (not- .cse1077))) (res b6 (! (res na6 (! (let ((.cse1075 (or b6 na6 b_eq_na6))) (res .cse1075 (assume .cse1075) (or- .cse1075))) :proves (+ na6 + b6 + b_eq_na6) :input) (! (let ((.cse1076 (or b6 .cse1077))) (res .cse1076 (assume .cse1076) (res .cse1077 (or- .cse1076) .cse1078))) :proves (+ b6 - na6) :input)) :proves (+ b6 + b_eq_na6) :rup) (let ((.cse1080 (not b6))) (let-proof ((.cse1081 (not- .cse1080))) (res na6 (! (let ((.cse1079 (or .cse1080 na6))) (res .cse1079 (assume .cse1079) (res .cse1080 (or- .cse1079) .cse1081))) :proves (- b6 + na6) :input) (! (let ((.cse1082 (or .cse1080 .cse1077 b_eq_na6))) (res .cse1082 (assume .cse1082) (res .cse1077 (res .cse1080 (or- .cse1082) .cse1081) .cse1078))) :proves (+ b_eq_na6 - na6 - b6) :input))))))) :proves (+ b_eq_na6) :rup) (res b_eq_na8 (! (let ((.cse1085 (not b8))) (let-proof ((.cse1086 (not- .cse1085))) (res na8 (! (res b8 (! (let ((.cse1083 (or b8 na8 b_eq_na8))) (res .cse1083 (assume .cse1083) (or- .cse1083))) :proves (+ na8 + b8 + b_eq_na8) :input) (! (let ((.cse1084 (or .cse1085 na8))) (res .cse1084 (assume .cse1084) (res .cse1085 (or- .cse1084) .cse1086))) :proves (- b8 + na8) :input)) :proves (+ na8 + b_eq_na8) :rup) (let ((.cse1088 (not na8))) (let-proof ((.cse1089 (not- .cse1088))) (res b8 (! (let ((.cse1087 (or b8 .cse1088))) (res .cse1087 (assume .cse1087) (res .cse1088 (or- .cse1087) .cse1089))) :proves (+ b8 - na8) :input) (! (let ((.cse1090 (or .cse1085 .cse1088 b_eq_na8))) (res .cse1090 (assume .cse1090) (res .cse1088 (res .cse1085 (or- .cse1090) .cse1086) .cse1089))) :proves (- b8 + b_eq_na8 - na8) :input))))))) :proves (+ b_eq_na8) :rup) (res b_eq_na2 (! (let ((.cse1093 (not b2))) (let-proof ((.cse1094 (not- .cse1093))) (res na2 (! (res b2 (! (let ((.cse1091 (or b2 na2 b_eq_na2))) (res .cse1091 (assume .cse1091) (or- .cse1091))) :proves (+ na2 + b2 + b_eq_na2) :input) (! (let ((.cse1092 (or .cse1093 na2))) (res .cse1092 (assume .cse1092) (res .cse1093 (or- .cse1092) .cse1094))) :proves (- b2 + na2) :input)) :proves (+ b_eq_na2 + na2) :rup) (let ((.cse1096 (not na2))) (let-proof ((.cse1097 (not- .cse1096))) (res b2 (! (let ((.cse1095 (or b2 .cse1096))) (res .cse1095 (assume .cse1095) (res .cse1096 (or- .cse1095) .cse1097))) :proves (+ b2 - na2) :input) (! (let ((.cse1098 (or .cse1093 .cse1096 b_eq_na2))) (res .cse1098 (assume .cse1098) (res .cse1096 (res .cse1093 (or- .cse1098) .cse1094) .cse1097))) :proves (- b2 + b_eq_na2 - na2) :input))))))) :proves (+ b_eq_na2) :rup) (res b_eq_na10 (! (let ((.cse1101 (not na10))) (let-proof ((.cse1102 (not- .cse1101))) (res b10 (! (res na10 (! (let ((.cse1099 (or b10 na10 b_eq_na10))) (res .cse1099 (assume .cse1099) (or- .cse1099))) :proves (+ na10 + b10 + b_eq_na10) :input) (! (let ((.cse1100 (or b10 .cse1101))) (res .cse1100 (assume .cse1100) (res .cse1101 (or- .cse1100) .cse1102))) :proves (+ b10 - na10) :input)) :proves (+ b10 + b_eq_na10) :rup) (let ((.cse1104 (not b10))) (let-proof ((.cse1105 (not- .cse1104))) (res na10 (! (let ((.cse1103 (or .cse1104 na10))) (res .cse1103 (assume .cse1103) (res .cse1104 (or- .cse1103) .cse1105))) :proves (- b10 + na10) :input) (! (let ((.cse1106 (or .cse1104 .cse1101 b_eq_na10))) (res .cse1106 (assume .cse1106) (res .cse1101 (res .cse1104 (or- .cse1106) .cse1105) .cse1102))) :proves (+ b_eq_na10 - na10 - b10) :input))))))) :proves (+ b_eq_na10) :rup) (res b_eq_na19 (! (let ((.cse1109 (not na19))) (let-proof ((.cse1110 (not- .cse1109))) (res b19 (! (res na19 (! (let ((.cse1107 (or b19 na19 b_eq_na19))) (res .cse1107 (assume .cse1107) (or- .cse1107))) :proves (+ b19 + na19 + b_eq_na19) :input) (! (let ((.cse1108 (or b19 .cse1109))) (res .cse1108 (assume .cse1108) (res .cse1109 (or- .cse1108) .cse1110))) :proves (+ b19 - na19) :input)) :proves (+ b19 + b_eq_na19) :rup) (let ((.cse1112 (not b19))) (let-proof ((.cse1113 (not- .cse1112))) (res na19 (! (let ((.cse1111 (or .cse1112 na19))) (res .cse1111 (assume .cse1111) (res .cse1112 (or- .cse1111) .cse1113))) :proves (- b19 + na19) :input) (! (let ((.cse1114 (or .cse1112 .cse1109 b_eq_na19))) (res .cse1114 (assume .cse1114) (res .cse1109 (res .cse1112 (or- .cse1114) .cse1113) .cse1110))) :proves (+ b_eq_na19 - na19 - b19) :input))))))) :proves (+ b_eq_na19) :rup) (res b_eq_na18 (! (let ((.cse1117 (not na18))) (let-proof ((.cse1118 (not- .cse1117))) (res b18 (! (res na18 (! (let ((.cse1115 (or b18 na18 b_eq_na18))) (res .cse1115 (assume .cse1115) (or- .cse1115))) :proves (+ b18 + na18 + b_eq_na18) :input) (! (let ((.cse1116 (or b18 .cse1117))) (res .cse1116 (assume .cse1116) (res .cse1117 (or- .cse1116) .cse1118))) :proves (+ b18 - na18) :input)) :proves (+ b_eq_na18 + b18) :rup) (let ((.cse1120 (not b18))) (let-proof ((.cse1121 (not- .cse1120))) (res na18 (! (let ((.cse1119 (or .cse1120 na18))) (res .cse1119 (assume .cse1119) (res .cse1120 (or- .cse1119) .cse1121))) :proves (- b18 + na18) :input) (! (let ((.cse1122 (or .cse1120 .cse1117 b_eq_na18))) (res .cse1122 (assume .cse1122) (res .cse1117 (res .cse1120 (or- .cse1122) .cse1121) .cse1118))) :proves (+ b_eq_na18 - na18 - b18) :input))))))) :proves (+ b_eq_na18) :rup) (res b_eq_na17 (! (let ((.cse1125 (not na17))) (let-proof ((.cse1126 (not- .cse1125))) (res b17 (! (res na17 (! (let ((.cse1123 (or b17 na17 b_eq_na17))) (res .cse1123 (assume .cse1123) (or- .cse1123))) :proves (+ b17 + na17 + b_eq_na17) :input) (! (let ((.cse1124 (or b17 .cse1125))) (res .cse1124 (assume .cse1124) (res .cse1125 (or- .cse1124) .cse1126))) :proves (+ b17 - na17) :input)) :proves (+ b17 + b_eq_na17) :rup) (let ((.cse1128 (not b17))) (let-proof ((.cse1129 (not- .cse1128))) (res na17 (! (let ((.cse1127 (or .cse1128 na17))) (res .cse1127 (assume .cse1127) (res .cse1128 (or- .cse1127) .cse1129))) :proves (- b17 + na17) :input) (! (let ((.cse1130 (or .cse1128 .cse1125 b_eq_na17))) (res .cse1130 (assume .cse1130) (res .cse1125 (res .cse1128 (or- .cse1130) .cse1129) .cse1126))) :proves (+ b_eq_na17 - na17 - b17) :input))))))) :proves (+ b_eq_na17) :rup) (res b_eq_na11 (! (let ((.cse1133 (not na11))) (let-proof ((.cse1134 (not- .cse1133))) (res b11 (! (res na11 (! (let ((.cse1131 (or b11 na11 b_eq_na11))) (res .cse1131 (assume .cse1131) (or- .cse1131))) :proves (+ b11 + na11 + b_eq_na11) :input) (! (let ((.cse1132 (or b11 .cse1133))) (res .cse1132 (assume .cse1132) (res .cse1133 (or- .cse1132) .cse1134))) :proves (+ b11 - na11) :input)) :proves (+ b11 + b_eq_na11) :rup) (let ((.cse1136 (not b11))) (let-proof ((.cse1137 (not- .cse1136))) (res na11 (! (let ((.cse1135 (or .cse1136 na11))) (res .cse1135 (assume .cse1135) (res .cse1136 (or- .cse1135) .cse1137))) :proves (- b11 + na11) :input) (! (let ((.cse1138 (or .cse1136 .cse1133 b_eq_na11))) (res .cse1138 (assume .cse1138) (res .cse1133 (res .cse1136 (or- .cse1138) .cse1137) .cse1134))) :proves (+ b_eq_na11 - na11 - b11) :input))))))) :proves (+ b_eq_na11) :rup) (res b_eq_na0 (! (let ((.cse1141 (not b0))) (let-proof ((.cse1142 (not- .cse1141))) (res na0 (! (res b0 (! (let ((.cse1139 (or b0 na0 b_eq_na0))) (res .cse1139 (assume .cse1139) (or- .cse1139))) :proves (+ na0 + b0 + b_eq_na0) :input) (! (let ((.cse1140 (or .cse1141 na0))) (res .cse1140 (assume .cse1140) (res .cse1141 (or- .cse1140) .cse1142))) :proves (- b0 + na0) :input)) :proves (+ b_eq_na0 + na0) :rup) (let ((.cse1144 (not na0))) (let-proof ((.cse1145 (not- .cse1144))) (res b0 (! (let ((.cse1143 (or b0 .cse1144))) (res .cse1143 (assume .cse1143) (res .cse1144 (or- .cse1143) .cse1145))) :proves (+ b0 - na0) :input) (! (let ((.cse1146 (or .cse1141 .cse1144 b_eq_na0))) (res .cse1146 (assume .cse1146) (res .cse1144 (res .cse1141 (or- .cse1146) .cse1142) .cse1145))) :proves (- b0 + b_eq_na0 - na0) :input))))))) :proves (+ b_eq_na0) :rup) (res b_eq_na24 (! (let ((.cse1149 (not b24))) (let-proof ((.cse1150 (not- .cse1149))) (res na24 (! (res b24 (! (let ((.cse1147 (or b24 na24 b_eq_na24))) (res .cse1147 (assume .cse1147) (or- .cse1147))) :proves (+ na24 + b24 + b_eq_na24) :input) (! (let ((.cse1148 (or .cse1149 na24))) (res .cse1148 (assume .cse1148) (res .cse1149 (or- .cse1148) .cse1150))) :proves (- b24 + na24) :input)) :proves (+ na24 + b_eq_na24) :rup) (let ((.cse1152 (not na24))) (let-proof ((.cse1153 (not- .cse1152))) (res b24 (! (let ((.cse1151 (or b24 .cse1152))) (res .cse1151 (assume .cse1151) (res .cse1152 (or- .cse1151) .cse1153))) :proves (+ b24 - na24) :input) (! (let ((.cse1154 (or .cse1149 .cse1152 b_eq_na24))) (res .cse1154 (assume .cse1154) (res .cse1152 (res .cse1149 (or- .cse1154) .cse1150) .cse1153))) :proves (- b24 + b_eq_na24 - na24) :input))))))) :proves (+ b_eq_na24) :rup) (res b_eq_na4 (! (let ((.cse1157 (not b4))) (let-proof ((.cse1158 (not- .cse1157))) (res na4 (! (res b4 (! (let ((.cse1155 (or b4 na4 b_eq_na4))) (res .cse1155 (assume .cse1155) (or- .cse1155))) :proves (+ na4 + b4 + b_eq_na4) :input) (! (let ((.cse1156 (or .cse1157 na4))) (res .cse1156 (assume .cse1156) (res .cse1157 (or- .cse1156) .cse1158))) :proves (- b4 + na4) :input)) :proves (+ b_eq_na4 + na4) :rup) (let ((.cse1160 (not na4))) (let-proof ((.cse1161 (not- .cse1160))) (res b4 (! (let ((.cse1159 (or b4 .cse1160))) (res .cse1159 (assume .cse1159) (res .cse1160 (or- .cse1159) .cse1161))) :proves (+ b4 - na4) :input) (! (let ((.cse1162 (or .cse1157 .cse1160 b_eq_na4))) (res .cse1162 (assume .cse1162) (res .cse1160 (res .cse1157 (or- .cse1162) .cse1158) .cse1161))) :proves (- b4 + b_eq_na4 - na4) :input))))))) :proves (+ b_eq_na4) :rup) (res b_eq_na23 (! (let ((.cse1165 (not b23))) (let-proof ((.cse1166 (not- .cse1165))) (res na23 (! (res b23 (! (let ((.cse1163 (or b23 na23 b_eq_na23))) (res .cse1163 (assume .cse1163) (or- .cse1163))) :proves (+ b23 + na23 + b_eq_na23) :input) (! (let ((.cse1164 (or .cse1165 na23))) (res .cse1164 (assume .cse1164) (res .cse1165 (or- .cse1164) .cse1166))) :proves (- b23 + na23) :input)) :proves (+ b_eq_na23 + na23) :rup) (let ((.cse1168 (not na23))) (let-proof ((.cse1169 (not- .cse1168))) (res b23 (! (let ((.cse1167 (or b23 .cse1168))) (res .cse1167 (assume .cse1167) (res .cse1168 (or- .cse1167) .cse1169))) :proves (+ b23 - na23) :input) (! (let ((.cse1170 (or .cse1165 .cse1168 b_eq_na23))) (res .cse1170 (assume .cse1170) (res .cse1168 (res .cse1165 (or- .cse1170) .cse1166) .cse1169))) :proves (- b23 + b_eq_na23 - na23) :input))))))) :proves (+ b_eq_na23) :rup) (! (let ((.cse1203 (not b_eq_na0)) (.cse1202 (not b_eq_na1)) (.cse1201 (not b_eq_na2)) (.cse1200 (not b_eq_na3)) (.cse1199 (not b_eq_na4)) (.cse1198 (not b_eq_na5)) (.cse1197 (not b_eq_na6)) (.cse1196 (not b_eq_na7)) (.cse1195 (not b_eq_na8)) (.cse1194 (not b_eq_na9)) (.cse1193 (not b_eq_na10)) (.cse1192 (not b_eq_na11)) (.cse1191 (not b_eq_na12)) (.cse1190 (not b_eq_na13)) (.cse1189 (not b_eq_na14)) (.cse1188 (not b_eq_na15)) (.cse1187 (not b_eq_na16)) (.cse1186 (not b_eq_na17)) (.cse1185 (not b_eq_na18)) (.cse1184 (not b_eq_na19)) (.cse1183 (not b_eq_na20)) (.cse1182 (not b_eq_na21)) (.cse1181 (not b_eq_na22)) (.cse1180 (not b_eq_na23)) (.cse1179 (not b_eq_na24)) (.cse1178 (not b_eq_na25)) (.cse1177 (not b_eq_na26)) (.cse1176 (not b_eq_na27)) (.cse1175 (not b_eq_na28)) (.cse1174 (not b_eq_na29)) (.cse1173 (not b_eq_na30)) (.cse1172 (not b_eq_na31))) (let ((.cse1171 (or b_eq_na .cse1203 .cse1202 .cse1201 .cse1200 .cse1199 .cse1198 .cse1197 .cse1196 .cse1195 .cse1194 .cse1193 .cse1192 .cse1191 .cse1190 .cse1189 .cse1188 .cse1187 .cse1186 .cse1185 .cse1184 .cse1183 .cse1182 .cse1181 .cse1180 .cse1179 .cse1178 .cse1177 .cse1176 .cse1175 .cse1174 .cse1173 .cse1172))) (res .cse1171 (assume .cse1171) (res .cse1172 (res .cse1173 (res .cse1174 (res .cse1175 (res .cse1176 (res .cse1177 (res .cse1178 (res .cse1179 (res .cse1180 (res .cse1181 (res .cse1182 (res .cse1183 (res .cse1184 (res .cse1185 (res .cse1186 (res .cse1187 (res .cse1188 (res .cse1189 (res .cse1190 (res .cse1191 (res .cse1192 (res .cse1193 (res .cse1194 (res .cse1195 (res .cse1196 (res .cse1197 (res .cse1198 (res .cse1199 (res .cse1200 (res .cse1201 (res .cse1202 (res .cse1203 (or- .cse1171) (not- .cse1203)) (not- .cse1202)) (not- .cse1201)) (not- .cse1200)) (not- .cse1199)) (not- .cse1198)) (not- .cse1197)) (not- .cse1196)) (not- .cse1195)) (not- .cse1194)) (not- .cse1193)) (not- .cse1192)) (not- .cse1191)) (not- .cse1190)) (not- .cse1189)) (not- .cse1188)) (not- .cse1187)) (not- .cse1186)) (not- .cse1185)) (not- .cse1184)) (not- .cse1183)) (not- .cse1182)) (not- .cse1181)) (not- .cse1180)) (not- .cse1179)) (not- .cse1178)) (not- .cse1177)) (not- .cse1176)) (not- .cse1175)) (not- .cse1174)) (not- .cse1173)) (not- .cse1172))))) :proves (+ b_eq_na - b_eq_na23 - b_eq_na4 - b_eq_na24 - b_eq_na0 - b_eq_na11 - b_eq_na17 - b_eq_na18 - b_eq_na19 - b_eq_na10 - b_eq_na2 - b_eq_na8 - b_eq_na6 - b_eq_na30 - b_eq_na7 - b_eq_na25 - b_eq_na13 - b_eq_na21 - b_eq_na29 - b_eq_na5 - b_eq_na31 - b_eq_na16 - b_eq_na3 - b_eq_na28 - b_eq_na22 - b_eq_na14 - b_eq_na20 - b_eq_na12 - b_eq_na9 - b_eq_na15 - b_eq_na1 - b_eq_na27 - b_eq_na26) :input))))))))))))))))))))))))))))))))) :proves (+ b_eq_na) :rup) (! (let ((.cse1205 (not b_eq_na))) (let ((.cse1204 (or fb_eq_fna .cse1205))) (res .cse1204 (assume .cse1204) (res .cse1205 (or- .cse1204) (not- .cse1205))))) :proves (+ fb_eq_fna - b_eq_na) :input)) :proves (+ fb_eq_fna) :rup)) (.cse764 (not- .cse763)) (.cse69 (! (res fa_min_lt_left31 (res fa_less_min (! (assume fa_less_min) :proves (+ fa_less_min) :input) (! (let ((.cse912 (not fa_less_min))) (let ((.cse911 (or .cse912 fa_min_lt_left31 fa_min_lt_right31))) (res .cse911 (assume .cse911) (res .cse912 (or- .cse911) (not- .cse912))))) :proves (- fa_less_min + fa_min_lt_right31 + fa_min_lt_left31) :input)) (! (res min31 .cse901 (! (let ((.cse914 (not fa_min_lt_left31))) (let ((.cse913 (or .cse914 .cse904))) (res .cse913 (assume .cse913) (res .cse904 (res .cse914 (or- .cse913) (not- .cse914)) .cse906)))) :proves (- fa_min_lt_left31 - min31) :input)) :proves (- fa_min_lt_left31) :rup)) :proves (+ fa_min_lt_right31) :rup)) (.cse72 (not- .cse71)) (.cse29 (not- .cse28)) (.cse608 (not- .cse607)) (.cse605 (not- .cse604)) (.cse612 (not- .cse611)) (.cse898 (not- .cse897)) (.cse613 (not- .cse610))) (let-proof ((.cse1 (! (assume min30) :proves (+ min30) :input)) (.cse4 (not- .cse3)) (.cse33 (! (let ((.cse910 (or .cse897 fna31 .cse610))) (res .cse910 (assume .cse910) (res .cse610 (res .cse897 (or- .cse910) .cse898) .cse613))) :proves (- fb31 + fna31 - fb_eq_fna31) :input)) (.cse34 (! (let ((.cse909 (or .cse611 nfa31))) (res .cse909 (assume .cse909) (res .cse611 (or- .cse909) .cse612))) :proves (- fna31 + nfa31) :input)) (.cse35 (! (let ((.cse908 (or .cse607 .cse604 carry30))) (res .cse908 (assume .cse908) (res .cse604 (res .cse607 (or- .cse908) .cse608) .cse605))) :proves (- nfa31 + carry30 - fa31) :input)) (.cse20 (! (let ((.cse907 (or .cse28 carry29))) (res .cse907 (assume .cse907) (res .cse28 (or- .cse907) .cse29))) :proves (- carry30 + carry29) :input)) (.cse31 (! (res min31 .cse901 (res fa_min_lt_sub31 (! (res fa_min_lt_right31 .cse69 (! (let ((.cse902 (or .cse71 fa_min_lt_sub31))) (res .cse902 (assume .cse902) (res .cse71 (or- .cse902) .cse72))) :proves (- fa_min_lt_right31 + fa_min_lt_sub31) :input)) :proves (+ fa_min_lt_sub31) :rup) (! (let ((.cse905 (not fa_min_lt_sub31))) (let ((.cse903 (or .cse905 fa31 .cse904))) (res .cse903 (assume .cse903) (res .cse904 (res .cse905 (or- .cse903) (not- .cse905)) .cse906)))) :proves (- fa_min_lt_sub31 + fa31 - min31) :input))) :proves (+ fa31) :rup)) (.cse0 (! (res fb_eq_fna .cse761 (! (let ((.cse900 (or .cse763 fb_eq_fna30))) (res .cse900 (assume .cse900) (res .cse763 (or- .cse900) .cse764))) :proves (- fb_eq_fna + fb_eq_fna30) :input)) :proves (+ fb_eq_fna30) :rup)) (.cse32 (! (res fb_eq_fna .cse761 (! (let ((.cse899 (or .cse763 fb_eq_fna31))) (res .cse899 (assume .cse899) (res .cse763 (or- .cse899) .cse764))) :proves (- fb_eq_fna + fb_eq_fna31) :input)) :proves (+ fb_eq_fna31) :rup)) (.cse30 (not- .cse27)) (.cse25 (not- .cse22)) (.cse8 (! (let ((.cse896 (or fb_min_lt_sub31 .cse897))) (res .cse896 (assume .cse896) (res .cse897 (or- .cse896) .cse898))) :proves (+ fb_min_lt_sub31 - fb31) :input)) (.cse9 (! (let ((.cse895 (not fb_min_lt_sub31)) (.cse894 (not fb_min_lt30))) (let ((.cse893 (or fb_min_lt_right31 .cse895 .cse894))) (res .cse893 (assume .cse893) (res .cse894 (res .cse895 (or- .cse893) (not- .cse895)) (not- .cse894))))) :proves (- fb_min_lt30 - fb_min_lt_sub31 + fb_min_lt_right31) :input)) (.cse10 (! (res fb_less_min (! (let ((.cse890 (not fb_min_lt_right31))) (let ((.cse889 (or fb_less_min .cse890))) (res .cse889 (assume .cse889) (res .cse890 (or- .cse889) (not- .cse890))))) :proves (+ fb_less_min - fb_min_lt_right31) :input) (! (res err (! (let ((.cse892 (not fb_less_min))) (let ((.cse891 (or .cse892 err))) (res .cse891 (assume .cse891) (res .cse892 (or- .cse891) (not- .cse892))))) :proves (- fb_less_min + err) :input) .cse887) :proves (- fb_less_min) :rup)) :proves (- fb_min_lt_right31) :rup)) (.cse14 (not- .cse13)) (.cse18 (not- .cse17)) (.cse15 (not- .cse12)) (.cse24 (not- .cse23))) (let-proof ((.cse7 (! (let-proof ((.cse36 (! (let ((.cse888 (or max_fb_lt_sub31 fb31))) (res .cse888 (assume .cse888) (or- .cse888))) :proves (+ max_fb_lt_sub31 + fb31) :input))) (res max_fb_lt_sub31 .cse36 (! (let-proof ((.cse465 (! (res max_less_fb (! (let ((.cse884 (not max_fb_lt_right31))) (let ((.cse883 (or max_less_fb .cse884))) (res .cse883 (assume .cse883) (res .cse884 (or- .cse883) (not- .cse884))))) :proves (+ max_less_fb - max_fb_lt_right31) :input) (! (res err (! (let ((.cse886 (not max_less_fb))) (let ((.cse885 (or .cse886 err))) (res .cse885 (assume .cse885) (res .cse886 (or- .cse885) (not- .cse886))))) :proves (- max_less_fb + err) :input) .cse887) :proves (- max_less_fb) :rup)) :proves (- max_fb_lt_right31) :rup))) (res max_fb_lt_right31 (let-proof ((.cse418 (! (let ((.cse882 (not max_fb_lt_sub31)) (.cse881 (not max_fb_lt30))) (let ((.cse880 (or max_fb_lt_right31 .cse882 .cse881))) (res .cse880 (assume .cse880) (res .cse881 (res .cse882 (or- .cse880) (not- .cse882)) (not- .cse881))))) :proves (- max_fb_lt30 - max_fb_lt_sub31 + max_fb_lt_right31) :input))) (res max_fb_lt30 (! (let-proof ((.cse416 (! (let ((.cse879 (not max_fb_lt_right30))) (let ((.cse878 (or max_fb_lt30 .cse879))) (res .cse878 (assume .cse878) (res .cse879 (or- .cse878) (not- .cse879))))) :proves (+ max_fb_lt30 - max_fb_lt_right30) :input))) (res max_fb_lt_right30 (! (let-proof ((.cse468 (! (let ((.cse877 (not max30))) (res .cse877 (assume .cse877) (not- .cse877))) :proves (- max30) :input))) (let-proof ((.cse37 (! (res max30 (! (let ((.cse876 (or max_fb_lt_sub30 max30))) (res .cse876 (assume .cse876) (or- .cse876))) :proves (+ max_fb_lt_sub30 + max30) :input) .cse468) :proves (+ max_fb_lt_sub30) :rup))) (res max_fb_lt_sub30 .cse37 (let-proof ((.cse414 (! (let ((.cse875 (not max_fb_lt_sub30)) (.cse874 (not max_fb_lt29))) (let ((.cse873 (or max_fb_lt_right30 .cse875 .cse874))) (res .cse873 (assume .cse873) (res .cse874 (res .cse875 (or- .cse873) (not- .cse875)) (not- .cse874))))) :proves (+ max_fb_lt_right30 - max_fb_lt29 - max_fb_lt_sub30) :input))) (res max_fb_lt29 (! (let-proof ((.cse412 (! (let ((.cse872 (not max_fb_lt_right29))) (let ((.cse871 (or max_fb_lt29 .cse872))) (res .cse871 (assume .cse871) (res .cse872 (or- .cse871) (not- .cse872))))) :proves (+ max_fb_lt29 - max_fb_lt_right29) :input))) (res max_fb_lt_right29 (! (let-proof ((.cse478 (! (let ((.cse870 (not max29))) (res .cse870 (assume .cse870) (not- .cse870))) :proves (- max29) :input))) (let-proof ((.cse38 (! (res max29 (! (let ((.cse869 (or max_fb_lt_sub29 max29))) (res .cse869 (assume .cse869) (or- .cse869))) :proves (+ max_fb_lt_sub29 + max29) :input) .cse478) :proves (+ max_fb_lt_sub29) :rup))) (res max_fb_lt_sub29 .cse38 (let-proof ((.cse409 (! (let ((.cse868 (not max_fb_lt_sub29)) (.cse867 (not max_fb_lt28))) (let ((.cse866 (or max_fb_lt_right29 .cse868 .cse867))) (res .cse866 (assume .cse866) (res .cse867 (res .cse868 (or- .cse866) (not- .cse868)) (not- .cse867))))) :proves (+ max_fb_lt_right29 - max_fb_lt28 - max_fb_lt_sub29) :input))) (res max_fb_lt28 (! (let-proof ((.cse407 (! (let ((.cse865 (not max_fb_lt_right28))) (let ((.cse864 (or max_fb_lt28 .cse865))) (res .cse864 (assume .cse864) (res .cse865 (or- .cse864) (not- .cse865))))) :proves (+ max_fb_lt28 - max_fb_lt_right28) :input))) (res max_fb_lt_right28 (! (let-proof ((.cse471 (! (let ((.cse863 (not max28))) (res .cse863 (assume .cse863) (not- .cse863))) :proves (- max28) :input))) (let-proof ((.cse39 (! (res max28 (! (let ((.cse862 (or max_fb_lt_sub28 max28))) (res .cse862 (assume .cse862) (or- .cse862))) :proves (+ max_fb_lt_sub28 + max28) :input) .cse471) :proves (+ max_fb_lt_sub28) :rup))) (res max_fb_lt_sub28 .cse39 (let-proof ((.cse402 (! (let ((.cse861 (not max_fb_lt_sub28)) (.cse860 (not max_fb_lt27))) (let ((.cse859 (or max_fb_lt_right28 .cse861 .cse860))) (res .cse859 (assume .cse859) (res .cse860 (res .cse861 (or- .cse859) (not- .cse861)) (not- .cse860))))) :proves (+ max_fb_lt_right28 - max_fb_lt27 - max_fb_lt_sub28) :input))) (res max_fb_lt27 (! (let-proof ((.cse398 (! (let ((.cse858 (not max_fb_lt_right27))) (let ((.cse857 (or max_fb_lt27 .cse858))) (res .cse857 (assume .cse857) (res .cse858 (or- .cse857) (not- .cse858))))) :proves (+ max_fb_lt27 - max_fb_lt_right27) :input))) (res max_fb_lt_right27 (! (let-proof ((.cse474 (! (let ((.cse856 (not max27))) (res .cse856 (assume .cse856) (not- .cse856))) :proves (- max27) :input))) (let-proof ((.cse40 (! (res max27 (! (let ((.cse855 (or max_fb_lt_sub27 max27))) (res .cse855 (assume .cse855) (or- .cse855))) :proves (+ max_fb_lt_sub27 + max27) :input) .cse474) :proves (+ max_fb_lt_sub27) :rup))) (res max_fb_lt_sub27 .cse40 (let-proof ((.cse395 (! (let ((.cse854 (not max_fb_lt_sub27)) (.cse853 (not max_fb_lt26))) (let ((.cse852 (or max_fb_lt_right27 .cse854 .cse853))) (res .cse852 (assume .cse852) (res .cse853 (res .cse854 (or- .cse852) (not- .cse854)) (not- .cse853))))) :proves (+ max_fb_lt_right27 - max_fb_lt26 - max_fb_lt_sub27) :input))) (res max_fb_lt26 (! (let-proof ((.cse388 (! (let ((.cse851 (not max_fb_lt_right26))) (let ((.cse850 (or max_fb_lt26 .cse851))) (res .cse850 (assume .cse850) (res .cse851 (or- .cse850) (not- .cse851))))) :proves (+ max_fb_lt26 - max_fb_lt_right26) :input))) (res max_fb_lt_right26 (! (let-proof ((.cse464 (! (let ((.cse849 (not max26))) (res .cse849 (assume .cse849) (not- .cse849))) :proves (- max26) :input))) (let-proof ((.cse41 (! (res max26 (! (let ((.cse848 (or max_fb_lt_sub26 max26))) (res .cse848 (assume .cse848) (or- .cse848))) :proves (+ max_fb_lt_sub26 + max26) :input) .cse464) :proves (+ max_fb_lt_sub26) :rup))) (res max_fb_lt_sub26 .cse41 (let-proof ((.cse385 (! (let ((.cse847 (not max_fb_lt_sub26)) (.cse846 (not max_fb_lt25))) (let ((.cse845 (or max_fb_lt_right26 .cse847 .cse846))) (res .cse845 (assume .cse845) (res .cse846 (res .cse847 (or- .cse845) (not- .cse847)) (not- .cse846))))) :proves (+ max_fb_lt_right26 - max_fb_lt25 - max_fb_lt_sub26) :input))) (res max_fb_lt25 (! (let-proof ((.cse379 (! (let ((.cse844 (not max_fb_lt_right25))) (let ((.cse843 (or max_fb_lt25 .cse844))) (res .cse843 (assume .cse843) (res .cse844 (or- .cse843) (not- .cse844))))) :proves (+ max_fb_lt25 - max_fb_lt_right25) :input))) (res max_fb_lt_right25 (! (let-proof ((.cse467 (! (let ((.cse842 (not max25))) (res .cse842 (assume .cse842) (not- .cse842))) :proves (- max25) :input))) (let-proof ((.cse42 (! (res max25 (! (let ((.cse841 (or max_fb_lt_sub25 max25))) (res .cse841 (assume .cse841) (or- .cse841))) :proves (+ max_fb_lt_sub25 + max25) :input) .cse467) :proves (+ max_fb_lt_sub25) :rup))) (res max_fb_lt_sub25 .cse42 (let-proof ((.cse372 (! (let ((.cse840 (not max_fb_lt_sub25)) (.cse839 (not max_fb_lt24))) (let ((.cse838 (or max_fb_lt_right25 .cse840 .cse839))) (res .cse838 (assume .cse838) (res .cse839 (res .cse840 (or- .cse838) (not- .cse840)) (not- .cse839))))) :proves (+ max_fb_lt_right25 - max_fb_lt24 - max_fb_lt_sub25) :input))) (res max_fb_lt24 (! (let-proof ((.cse369 (! (let ((.cse837 (not max_fb_lt_right24))) (let ((.cse836 (or max_fb_lt24 .cse837))) (res .cse836 (assume .cse836) (res .cse837 (or- .cse836) (not- .cse837))))) :proves (+ max_fb_lt24 - max_fb_lt_right24) :input))) (res max_fb_lt_right24 (! (let-proof ((.cse477 (! (let ((.cse835 (not max24))) (res .cse835 (assume .cse835) (not- .cse835))) :proves (- max24) :input))) (let-proof ((.cse43 (! (res max24 (! (let ((.cse834 (or max_fb_lt_sub24 max24))) (res .cse834 (assume .cse834) (or- .cse834))) :proves (+ max_fb_lt_sub24 + max24) :input) .cse477) :proves (+ max_fb_lt_sub24) :rup))) (res max_fb_lt_sub24 .cse43 (let-proof ((.cse366 (! (let ((.cse833 (not max_fb_lt_sub24)) (.cse832 (not max_fb_lt23))) (let ((.cse831 (or max_fb_lt_right24 .cse833 .cse832))) (res .cse831 (assume .cse831) (res .cse832 (res .cse833 (or- .cse831) (not- .cse833)) (not- .cse832))))) :proves (+ max_fb_lt_right24 - max_fb_lt23 - max_fb_lt_sub24) :input))) (res max_fb_lt23 (! (let-proof ((.cse359 (! (let ((.cse830 (not max_fb_lt_right23))) (let ((.cse829 (or max_fb_lt23 .cse830))) (res .cse829 (assume .cse829) (res .cse830 (or- .cse829) (not- .cse830))))) :proves (+ max_fb_lt23 - max_fb_lt_right23) :input))) (res max_fb_lt_right23 (! (let-proof ((.cse462 (! (let ((.cse828 (not max23))) (res .cse828 (assume .cse828) (not- .cse828))) :proves (- max23) :input))) (let-proof ((.cse44 (! (res max23 (! (let ((.cse827 (or max_fb_lt_sub23 max23))) (res .cse827 (assume .cse827) (or- .cse827))) :proves (+ max_fb_lt_sub23 + max23) :input) .cse462) :proves (+ max_fb_lt_sub23) :rup))) (res max_fb_lt_sub23 .cse44 (let-proof ((.cse356 (! (let ((.cse826 (not max_fb_lt_sub23)) (.cse825 (not max_fb_lt22))) (let ((.cse824 (or max_fb_lt_right23 .cse826 .cse825))) (res .cse824 (assume .cse824) (res .cse825 (res .cse826 (or- .cse824) (not- .cse826)) (not- .cse825))))) :proves (+ max_fb_lt_right23 - max_fb_lt22 - max_fb_lt_sub23) :input))) (res max_fb_lt22 (! (let-proof ((.cse349 (! (let ((.cse823 (not max_fb_lt_right22))) (let ((.cse822 (or max_fb_lt22 .cse823))) (res .cse822 (assume .cse822) (res .cse823 (or- .cse822) (not- .cse823))))) :proves (+ max_fb_lt22 - max_fb_lt_right22) :input))) (res max_fb_lt_right22 (! (let-proof ((.cse466 (! (let ((.cse821 (not max22))) (res .cse821 (assume .cse821) (not- .cse821))) :proves (- max22) :input))) (let-proof ((.cse45 (! (res max22 (! (let ((.cse820 (or max_fb_lt_sub22 max22))) (res .cse820 (assume .cse820) (or- .cse820))) :proves (+ max_fb_lt_sub22 + max22) :input) .cse466) :proves (+ max_fb_lt_sub22) :rup))) (res max_fb_lt_sub22 .cse45 (let-proof ((.cse346 (! (let ((.cse819 (not max_fb_lt_sub22)) (.cse818 (not max_fb_lt21))) (let ((.cse817 (or max_fb_lt_right22 .cse819 .cse818))) (res .cse817 (assume .cse817) (res .cse818 (res .cse819 (or- .cse817) (not- .cse819)) (not- .cse818))))) :proves (+ max_fb_lt_right22 - max_fb_lt21 - max_fb_lt_sub22) :input))) (res max_fb_lt21 (! (let-proof ((.cse339 (! (let ((.cse816 (not max_fb_lt_right21))) (let ((.cse815 (or max_fb_lt21 .cse816))) (res .cse815 (assume .cse815) (res .cse816 (or- .cse815) (not- .cse816))))) :proves (+ max_fb_lt21 - max_fb_lt_right21) :input))) (res max_fb_lt_right21 (! (let-proof ((.cse472 (! (let ((.cse814 (not max21))) (res .cse814 (assume .cse814) (not- .cse814))) :proves (- max21) :input))) (let-proof ((.cse46 (! (res max21 (! (let ((.cse813 (or max_fb_lt_sub21 max21))) (res .cse813 (assume .cse813) (or- .cse813))) :proves (+ max_fb_lt_sub21 + max21) :input) .cse472) :proves (+ max_fb_lt_sub21) :rup))) (res max_fb_lt_sub21 .cse46 (let-proof ((.cse336 (! (let ((.cse812 (not max_fb_lt_sub21)) (.cse811 (not max_fb_lt20))) (let ((.cse810 (or max_fb_lt_right21 .cse812 .cse811))) (res .cse810 (assume .cse810) (res .cse811 (res .cse812 (or- .cse810) (not- .cse812)) (not- .cse811))))) :proves (+ max_fb_lt_right21 - max_fb_lt20 - max_fb_lt_sub21) :input))) (res max_fb_lt20 (! (let-proof ((.cse329 (! (let ((.cse809 (not max_fb_lt_right20))) (let ((.cse808 (or max_fb_lt20 .cse809))) (res .cse808 (assume .cse808) (res .cse809 (or- .cse808) (not- .cse809))))) :proves (+ max_fb_lt20 - max_fb_lt_right20) :input))) (res max_fb_lt_right20 (! (let-proof ((.cse463 (! (let ((.cse807 (not max20))) (res .cse807 (assume .cse807) (not- .cse807))) :proves (- max20) :input))) (let-proof ((.cse47 (! (res max20 (! (let ((.cse806 (or max_fb_lt_sub20 max20))) (res .cse806 (assume .cse806) (or- .cse806))) :proves (+ max_fb_lt_sub20 + max20) :input) .cse463) :proves (+ max_fb_lt_sub20) :rup))) (res max_fb_lt_sub20 .cse47 (let-proof ((.cse326 (! (let ((.cse805 (not max_fb_lt_sub20)) (.cse804 (not max_fb_lt19))) (let ((.cse803 (or max_fb_lt_right20 .cse805 .cse804))) (res .cse803 (assume .cse803) (res .cse804 (res .cse805 (or- .cse803) (not- .cse805)) (not- .cse804))))) :proves (+ max_fb_lt_right20 - max_fb_lt19 - max_fb_lt_sub20) :input))) (res max_fb_lt19 (! (let-proof ((.cse318 (! (let ((.cse802 (not max_fb_lt_right19))) (let ((.cse801 (or max_fb_lt19 .cse802))) (res .cse801 (assume .cse801) (res .cse802 (or- .cse801) (not- .cse802))))) :proves (+ max_fb_lt19 - max_fb_lt_right19) :input))) (res max_fb_lt_right19 (! (let-proof ((.cse475 (! (let ((.cse800 (not max19))) (res .cse800 (assume .cse800) (not- .cse800))) :proves (- max19) :input))) (let-proof ((.cse48 (! (res max19 (! (let ((.cse799 (or max_fb_lt_sub19 max19))) (res .cse799 (assume .cse799) (or- .cse799))) :proves (+ max_fb_lt_sub19 + max19) :input) .cse475) :proves (+ max_fb_lt_sub19) :rup))) (res max_fb_lt_sub19 .cse48 (let-proof ((.cse315 (! (let ((.cse798 (not max_fb_lt_sub19)) (.cse797 (not max_fb_lt18))) (let ((.cse796 (or max_fb_lt_right19 .cse798 .cse797))) (res .cse796 (assume .cse796) (res .cse797 (res .cse798 (or- .cse796) (not- .cse798)) (not- .cse797))))) :proves (+ max_fb_lt_right19 - max_fb_lt18 - max_fb_lt_sub19) :input))) (res max_fb_lt18 (! (let-proof ((.cse307 (! (let ((.cse795 (not max_fb_lt_right18))) (let ((.cse794 (or max_fb_lt18 .cse795))) (res .cse794 (assume .cse794) (res .cse795 (or- .cse794) (not- .cse795))))) :proves (+ max_fb_lt18 - max_fb_lt_right18) :input))) (res max_fb_lt_right18 (! (let-proof ((.cse476 (! (let ((.cse793 (not max18))) (res .cse793 (assume .cse793) (not- .cse793))) :proves (- max18) :input))) (let-proof ((.cse49 (! (res max18 (! (let ((.cse792 (or max_fb_lt_sub18 max18))) (res .cse792 (assume .cse792) (or- .cse792))) :proves (+ max_fb_lt_sub18 + max18) :input) .cse476) :proves (+ max_fb_lt_sub18) :rup))) (res max_fb_lt_sub18 .cse49 (let-proof ((.cse304 (! (let ((.cse791 (not max_fb_lt_sub18)) (.cse790 (not max_fb_lt17))) (let ((.cse789 (or max_fb_lt_right18 .cse791 .cse790))) (res .cse789 (assume .cse789) (res .cse790 (res .cse791 (or- .cse789) (not- .cse791)) (not- .cse790))))) :proves (+ max_fb_lt_right18 - max_fb_lt17 - max_fb_lt_sub18) :input))) (res max_fb_lt17 (! (let-proof ((.cse298 (! (let ((.cse788 (not max_fb_lt_right17))) (let ((.cse787 (or max_fb_lt17 .cse788))) (res .cse787 (assume .cse787) (res .cse788 (or- .cse787) (not- .cse788))))) :proves (+ max_fb_lt17 - max_fb_lt_right17) :input))) (res max_fb_lt_right17 (! (let-proof ((.cse470 (! (let ((.cse786 (not max17))) (res .cse786 (assume .cse786) (not- .cse786))) :proves (- max17) :input))) (let-proof ((.cse50 (! (res max17 (! (let ((.cse785 (or max_fb_lt_sub17 max17))) (res .cse785 (assume .cse785) (or- .cse785))) :proves (+ max_fb_lt_sub17 + max17) :input) .cse470) :proves (+ max_fb_lt_sub17) :rup))) (res max_fb_lt_sub17 .cse50 (let-proof ((.cse291 (! (let ((.cse784 (not max_fb_lt_sub17)) (.cse783 (not max_fb_lt16))) (let ((.cse782 (or max_fb_lt_right17 .cse784 .cse783))) (res .cse782 (assume .cse782) (res .cse783 (res .cse784 (or- .cse782) (not- .cse784)) (not- .cse783))))) :proves (+ max_fb_lt_right17 - max_fb_lt16 - max_fb_lt_sub17) :input))) (res max_fb_lt16 (! (res max_fb_lt_sub28 .cse39 (res fb_min_lt_sub25 (! (res min25 (! (assume min25) :proves (+ min25) :input) (! (let ((.cse52 (not min25))) (let ((.cse51 (or fb_min_lt_sub25 .cse52))) (res .cse51 (assume .cse51) (res .cse52 (or- .cse51) (not- .cse52))))) :proves (+ fb_min_lt_sub25 - min25) :input)) :proves (+ fb_min_lt_sub25) :rup) (res max29 (let-proof ((.cse53 (! (res fb_eq_fna .cse761 (! (let ((.cse781 (or .cse763 fb_eq_fna26))) (res .cse781 (assume .cse781) (res .cse763 (or- .cse781) .cse764))) :proves (- fb_eq_fna + fb_eq_fna26) :input)) :proves (+ fb_eq_fna26) :rup))) (res fb_eq_fna26 .cse53 (let-proof ((.cse54 (! (res fb_eq_fna .cse761 (! (let ((.cse780 (or .cse763 fb_eq_fna27))) (res .cse780 (assume .cse780) (res .cse763 (or- .cse780) .cse764))) :proves (- fb_eq_fna + fb_eq_fna27) :input)) :proves (+ fb_eq_fna27) :rup))) (res fb_eq_fna27 .cse54 (res max24 (let-proof ((.cse55 (! (res fb_eq_fna .cse761 (! (let ((.cse779 (or .cse763 fb_eq_fna21))) (res .cse779 (assume .cse779) (res .cse763 (or- .cse779) .cse764))) :proves (- fb_eq_fna + fb_eq_fna21) :input)) :proves (+ fb_eq_fna21) :rup))) (res fb_eq_fna21 .cse55 (res max18 (let-proof ((.cse56 (! (res fb_eq_fna .cse761 (! (let ((.cse778 (or .cse763 fb_eq_fna15))) (res .cse778 (assume .cse778) (res .cse763 (or- .cse778) .cse764))) :proves (- fb_eq_fna + fb_eq_fna15) :input)) :proves (+ fb_eq_fna15) :rup))) (res fb_eq_fna15 .cse56 (let-proof ((.cse57 (! (res fb_eq_fna .cse761 (! (let ((.cse777 (or .cse763 fb_eq_fna24))) (res .cse777 (assume .cse777) (res .cse763 (or- .cse777) .cse764))) :proves (- fb_eq_fna + fb_eq_fna24) :input)) :proves (+ fb_eq_fna24) :rup))) (res fb_eq_fna24 .cse57 (res max_fb_lt_sub20 .cse47 (res max19 (res max_fb_lt_sub26 .cse41 (res max_fb_lt_sub22 .cse45 (res fb_min_lt_sub26 (! (res min26 (! (assume min26) :proves (+ min26) :input) (! (let ((.cse59 (not min26))) (let ((.cse58 (or fb_min_lt_sub26 .cse59))) (res .cse58 (assume .cse58) (res .cse59 (or- .cse58) (not- .cse59))))) :proves (+ fb_min_lt_sub26 - min26) :input)) :proves (+ fb_min_lt_sub26) :rup) (let-proof ((.cse60 (! (res fb_eq_fna .cse761 (! (let ((.cse776 (or .cse763 fb_eq_fna25))) (res .cse776 (assume .cse776) (res .cse763 (or- .cse776) .cse764))) :proves (- fb_eq_fna + fb_eq_fna25) :input)) :proves (+ fb_eq_fna25) :rup))) (res fb_eq_fna25 .cse60 (let-proof ((.cse469 (! (let ((.cse775 (not max16))) (res .cse775 (assume .cse775) (not- .cse775))) :proves (- max16) :input))) (let-proof ((.cse61 (! (res max16 (! (let ((.cse774 (or max_fb_lt_sub16 max16))) (res .cse774 (assume .cse774) (or- .cse774))) :proves (+ max_fb_lt_sub16 + max16) :input) .cse469) :proves (+ max_fb_lt_sub16) :rup))) (res max_fb_lt_sub16 .cse61 (res fb_min_lt_sub29 (! (res min29 (! (assume min29) :proves (+ min29) :input) (! (let ((.cse63 (not min29))) (let ((.cse62 (or fb_min_lt_sub29 .cse63))) (res .cse62 (assume .cse62) (res .cse63 (or- .cse62) (not- .cse63))))) :proves (+ fb_min_lt_sub29 - min29) :input)) :proves (+ fb_min_lt_sub29) :rup) (res max27 (res max_fb_lt_sub25 .cse42 (let-proof ((.cse473 (! (let ((.cse773 (not max15))) (res .cse773 (assume .cse773) (not- .cse773))) :proves (- max15) :input))) (res max15 (res min16 (! (assume min16) :proves (+ min16) :input) (res fb_min_lt_sub24 (! (res min24 (! (assume min24) :proves (+ min24) :input) (! (let ((.cse65 (not min24))) (let ((.cse64 (or fb_min_lt_sub24 .cse65))) (res .cse64 (assume .cse64) (res .cse65 (or- .cse64) (not- .cse65))))) :proves (+ fb_min_lt_sub24 - min24) :input)) :proves (+ fb_min_lt_sub24) :rup) (let-proof ((.cse66 (! (res fb_eq_fna .cse761 (! (let ((.cse772 (or .cse763 fb_eq_fna17))) (res .cse772 (assume .cse772) (res .cse763 (or- .cse772) .cse764))) :proves (- fb_eq_fna + fb_eq_fna17) :input)) :proves (+ fb_eq_fna17) :rup))) (res fb_eq_fna17 .cse66 (res fb_min_lt_sub30 (! (res min30 .cse1 (! (let ((.cse67 (or fb_min_lt_sub30 .cse3))) (res .cse67 (assume .cse67) (res .cse3 (or- .cse67) .cse4))) :proves (+ fb_min_lt_sub30 - min30) :input)) :proves (+ fb_min_lt_sub30) :rup) (let-proof ((.cse68 (! (res fb_eq_fna .cse761 (! (let ((.cse771 (or .cse763 fb_eq_fna28))) (res .cse771 (assume .cse771) (res .cse763 (or- .cse771) .cse764))) :proves (- fb_eq_fna + fb_eq_fna28) :input)) :proves (+ fb_eq_fna28) :rup))) (res fb_eq_fna28 .cse68 (res max21 (let ((.cse163 (not fa15)) (.cse460 (not carry15)) (.cse159 (not fa16)) (.cse457 (not carry16)) (.cse273 (not fa17)) (.cse454 (not carry17)) (.cse284 (not fa18)) (.cse451 (not carry18)) (.cse294 (not fa19)) (.cse448 (not carry19)) (.cse301 (not fa20)) (.cse445 (not carry20)) (.cse311 (not fa21)) (.cse442 (not carry21)) (.cse321 (not fa22)) (.cse439 (not carry22)) (.cse331 (not fa23)) (.cse436 (not carry23)) (.cse341 (not fa24)) (.cse433 (not carry24)) (.cse351 (not fa25)) (.cse430 (not carry25)) (.cse361 (not fa26)) (.cse427 (not carry26)) (.cse374 (not fa27)) (.cse424 (not carry27)) (.cse381 (not fa28)) (.cse421 (not carry28)) (.cse391 (not fa29))) (let-proof ((.cse73 (! (res fb_eq_fna .cse761 (! (let ((.cse770 (or .cse763 fb_eq_fna20))) (res .cse770 (assume .cse770) (res .cse763 (or- .cse770) .cse764))) :proves (- fb_eq_fna + fb_eq_fna20) :input)) :proves (+ fb_eq_fna20) :rup)) (.cse74 (! (res fb_eq_fna .cse761 (! (let ((.cse769 (or .cse763 fb_eq_fna16))) (res .cse769 (assume .cse769) (res .cse763 (or- .cse769) .cse764))) :proves (- fb_eq_fna + fb_eq_fna16) :input)) :proves (+ fb_eq_fna16) :rup)) (.cse75 (! (res fb_eq_fna .cse761 (! (let ((.cse768 (or .cse763 fb_eq_fna19))) (res .cse768 (assume .cse768) (res .cse763 (or- .cse768) .cse764))) :proves (- fb_eq_fna + fb_eq_fna19) :input)) :proves (+ fb_eq_fna19) :rup)) (.cse76 (! (res fb_eq_fna .cse761 (! (let ((.cse767 (or .cse763 fb_eq_fna22))) (res .cse767 (assume .cse767) (res .cse763 (or- .cse767) .cse764))) :proves (- fb_eq_fna + fb_eq_fna22) :input)) :proves (+ fb_eq_fna22) :rup)) (.cse77 (! (res fb_eq_fna .cse761 (! (let ((.cse766 (or .cse763 fb_eq_fna29))) (res .cse766 (assume .cse766) (res .cse763 (or- .cse766) .cse764))) :proves (- fb_eq_fna + fb_eq_fna29) :input)) :proves (+ fb_eq_fna29) :rup)) (.cse78 (! (res fb_eq_fna .cse761 (! (let ((.cse765 (or .cse763 fb_eq_fna23))) (res .cse765 (assume .cse765) (res .cse763 (or- .cse765) .cse764))) :proves (- fb_eq_fna + fb_eq_fna23) :input)) :proves (+ fb_eq_fna23) :rup)) (.cse79 (! (res fb_eq_fna .cse761 (! (let ((.cse762 (or .cse763 fb_eq_fna18))) (res .cse762 (assume .cse762) (res .cse763 (or- .cse762) .cse764))) :proves (- fb_eq_fna + fb_eq_fna18) :input)) :proves (+ fb_eq_fna18) :rup)) (.cse393 (not- .cse391)) (.cse422 (not- .cse421)) (.cse383 (not- .cse381)) (.cse425 (not- .cse424)) (.cse376 (not- .cse374)) (.cse428 (not- .cse427)) (.cse363 (not- .cse361)) (.cse431 (not- .cse430)) (.cse353 (not- .cse351)) (.cse434 (not- .cse433)) (.cse343 (not- .cse341)) (.cse437 (not- .cse436)) (.cse333 (not- .cse331)) (.cse440 (not- .cse439)) (.cse323 (not- .cse321)) (.cse443 (not- .cse442)) (.cse313 (not- .cse311)) (.cse446 (not- .cse445)) (.cse303 (not- .cse301)) (.cse449 (not- .cse448)) (.cse296 (not- .cse294)) (.cse452 (not- .cse451)) (.cse286 (not- .cse284)) (.cse455 (not- .cse454)) (.cse275 (not- .cse273)) (.cse458 (not- .cse457)) (.cse280 (! (let ((.cse760 (not nfa17))) (let ((.cse759 (or fna17 .cse760))) (res .cse759 (assume .cse759) (res .cse760 (or- .cse759) (not- .cse760))))) :proves (+ fna17 - nfa17) :input)) (.cse287 (! (let ((.cse758 (not fna17)) (.cse757 (not fb_eq_fna17))) (let ((.cse756 (or fb17 .cse758 .cse757))) (res .cse756 (assume .cse756) (res .cse757 (res .cse758 (or- .cse756) (not- .cse758)) (not- .cse757))))) :proves (+ fb17 - fna17 - fb_eq_fna17) :input)) (.cse292 (! (let ((.cse755 (not nfa18))) (let ((.cse754 (or fna18 .cse755))) (res .cse754 (assume .cse754) (res .cse755 (or- .cse754) (not- .cse755))))) :proves (+ fna18 - nfa18) :input)) (.cse290 (! (let ((.cse753 (not fb17))) (let ((.cse752 (or max_fb_lt_left17 max17 .cse753))) (res .cse752 (assume .cse752) (res .cse753 (or- .cse752) (not- .cse753))))) :proves (+ max_fb_lt_left17 - fb17 + max17) :input)) (.cse299 (! (let ((.cse751 (not fna18)) (.cse750 (not fb_eq_fna18))) (let ((.cse749 (or fb18 .cse751 .cse750))) (res .cse749 (assume .cse749) (res .cse750 (res .cse751 (or- .cse749) (not- .cse751)) (not- .cse750))))) :proves (+ fb18 - fna18 - fb_eq_fna18) :input)) (.cse297 (! (let ((.cse748 (not max_fb_lt_left17))) (let ((.cse747 (or max_fb_lt17 .cse748))) (res .cse747 (assume .cse747) (res .cse748 (or- .cse747) (not- .cse748))))) :proves (+ max_fb_lt17 - max_fb_lt_left17) :input)) (.cse306 (! (let ((.cse746 (not nfa19))) (let ((.cse745 (or fna19 .cse746))) (res .cse745 (assume .cse745) (res .cse746 (or- .cse745) (not- .cse746))))) :proves (+ fna19 - nfa19) :input)) (.cse305 (! (let ((.cse744 (not fb18))) (let ((.cse743 (or max_fb_lt_left18 max18 .cse744))) (res .cse743 (assume .cse743) (res .cse744 (or- .cse743) (not- .cse744))))) :proves (+ max_fb_lt_left18 - fb18 + max18) :input)) (.cse309 (! (let ((.cse742 (not fna19)) (.cse741 (not fb_eq_fna19))) (let ((.cse740 (or fb19 .cse742 .cse741))) (res .cse740 (assume .cse740) (res .cse741 (res .cse742 (or- .cse740) (not- .cse742)) (not- .cse741))))) :proves (+ fb19 - fna19 - fb_eq_fna19) :input)) (.cse308 (! (let ((.cse739 (not max_fb_lt_left18))) (let ((.cse738 (or max_fb_lt18 .cse739))) (res .cse738 (assume .cse738) (res .cse739 (or- .cse738) (not- .cse739))))) :proves (+ max_fb_lt18 - max_fb_lt_left18) :input)) (.cse316 (! (let ((.cse737 (not fb19))) (let ((.cse736 (or max_fb_lt_left19 max19 .cse737))) (res .cse736 (assume .cse736) (res .cse737 (or- .cse736) (not- .cse737))))) :proves (+ max_fb_lt_left19 - fb19 + max19) :input)) (.cse314 (! (let ((.cse735 (not nfa20))) (let ((.cse734 (or fna20 .cse735))) (res .cse734 (assume .cse734) (res .cse735 (or- .cse734) (not- .cse735))))) :proves (+ fna20 - nfa20) :input)) (.cse319 (! (let ((.cse733 (not max_fb_lt_left19))) (let ((.cse732 (or max_fb_lt19 .cse733))) (res .cse732 (assume .cse732) (res .cse733 (or- .cse732) (not- .cse733))))) :proves (+ max_fb_lt19 - max_fb_lt_left19) :input)) (.cse317 (! (let ((.cse731 (not fna20)) (.cse730 (not fb_eq_fna20))) (let ((.cse729 (or fb20 .cse731 .cse730))) (res .cse729 (assume .cse729) (res .cse730 (res .cse731 (or- .cse729) (not- .cse731)) (not- .cse730))))) :proves (+ fb20 - fna20 - fb_eq_fna20) :input)) (.cse325 (! (let ((.cse728 (not fb20))) (let ((.cse727 (or max_fb_lt_left20 max20 .cse728))) (res .cse727 (assume .cse727) (res .cse728 (or- .cse727) (not- .cse728))))) :proves (+ max_fb_lt_left20 - fb20 + max20) :input)) (.cse324 (! (let ((.cse726 (not nfa21))) (let ((.cse725 (or fna21 .cse726))) (res .cse725 (assume .cse725) (res .cse726 (or- .cse725) (not- .cse726))))) :proves (+ fna21 - nfa21) :input)) (.cse328 (! (let ((.cse724 (not max_fb_lt_left20))) (let ((.cse723 (or max_fb_lt20 .cse724))) (res .cse723 (assume .cse723) (res .cse724 (or- .cse723) (not- .cse724))))) :proves (+ max_fb_lt20 - max_fb_lt_left20) :input)) (.cse327 (! (let ((.cse722 (not fna21)) (.cse721 (not fb_eq_fna21))) (let ((.cse720 (or fb21 .cse722 .cse721))) (res .cse720 (assume .cse720) (res .cse721 (res .cse722 (or- .cse720) (not- .cse722)) (not- .cse721))))) :proves (+ fb21 - fna21 - fb_eq_fna21) :input)) (.cse335 (! (let ((.cse719 (not fb21))) (let ((.cse718 (or max_fb_lt_left21 max21 .cse719))) (res .cse718 (assume .cse718) (res .cse719 (or- .cse718) (not- .cse719))))) :proves (+ max_fb_lt_left21 - fb21 + max21) :input)) (.cse334 (! (let ((.cse717 (not nfa22))) (let ((.cse716 (or fna22 .cse717))) (res .cse716 (assume .cse716) (res .cse717 (or- .cse716) (not- .cse717))))) :proves (+ fna22 - nfa22) :input)) (.cse338 (! (let ((.cse715 (not max_fb_lt_left21))) (let ((.cse714 (or max_fb_lt21 .cse715))) (res .cse714 (assume .cse714) (res .cse715 (or- .cse714) (not- .cse715))))) :proves (+ max_fb_lt21 - max_fb_lt_left21) :input)) (.cse337 (! (let ((.cse713 (not fna22)) (.cse712 (not fb_eq_fna22))) (let ((.cse711 (or fb22 .cse713 .cse712))) (res .cse711 (assume .cse711) (res .cse712 (res .cse713 (or- .cse711) (not- .cse713)) (not- .cse712))))) :proves (- fna22 + fb22 - fb_eq_fna22) :input)) (.cse345 (! (let ((.cse710 (not fb22))) (let ((.cse709 (or max_fb_lt_left22 max22 .cse710))) (res .cse709 (assume .cse709) (res .cse710 (or- .cse709) (not- .cse710))))) :proves (+ max_fb_lt_left22 - fb22 + max22) :input)) (.cse344 (! (let ((.cse708 (not nfa23))) (let ((.cse707 (or fna23 .cse708))) (res .cse707 (assume .cse707) (res .cse708 (or- .cse707) (not- .cse708))))) :proves (+ fna23 - nfa23) :input)) (.cse348 (! (let ((.cse706 (not max_fb_lt_left22))) (let ((.cse705 (or max_fb_lt22 .cse706))) (res .cse705 (assume .cse705) (res .cse706 (or- .cse705) (not- .cse706))))) :proves (+ max_fb_lt22 - max_fb_lt_left22) :input)) (.cse347 (! (let ((.cse704 (not fna23)) (.cse703 (not fb_eq_fna23))) (let ((.cse702 (or fb23 .cse704 .cse703))) (res .cse702 (assume .cse702) (res .cse703 (res .cse704 (or- .cse702) (not- .cse704)) (not- .cse703))))) :proves (+ fb23 - fna23 - fb_eq_fna23) :input)) (.cse355 (! (let ((.cse701 (not fb23))) (let ((.cse700 (or max_fb_lt_left23 max23 .cse701))) (res .cse700 (assume .cse700) (res .cse701 (or- .cse700) (not- .cse701))))) :proves (+ max_fb_lt_left23 - fb23 + max23) :input)) (.cse354 (! (let ((.cse699 (not nfa24))) (let ((.cse698 (or fna24 .cse699))) (res .cse698 (assume .cse698) (res .cse699 (or- .cse698) (not- .cse699))))) :proves (+ fna24 - nfa24) :input)) (.cse358 (! (let ((.cse697 (not max_fb_lt_left23))) (let ((.cse696 (or max_fb_lt23 .cse697))) (res .cse696 (assume .cse696) (res .cse697 (or- .cse696) (not- .cse697))))) :proves (+ max_fb_lt23 - max_fb_lt_left23) :input)) (.cse357 (! (let ((.cse695 (not fna24)) (.cse694 (not fb_eq_fna24))) (let ((.cse693 (or fb24 .cse695 .cse694))) (res .cse693 (assume .cse693) (res .cse694 (res .cse695 (or- .cse693) (not- .cse695)) (not- .cse694))))) :proves (+ fb24 - fna24 - fb_eq_fna24) :input)) (.cse365 (! (let ((.cse692 (not fb24))) (let ((.cse691 (or max_fb_lt_left24 max24 .cse692))) (res .cse691 (assume .cse691) (res .cse692 (or- .cse691) (not- .cse692))))) :proves (+ max_fb_lt_left24 - fb24 + max24) :input)) (.cse364 (! (let ((.cse690 (not nfa25))) (let ((.cse689 (or fna25 .cse690))) (res .cse689 (assume .cse689) (res .cse690 (or- .cse689) (not- .cse690))))) :proves (+ fna25 - nfa25) :input)) (.cse368 (! (let ((.cse688 (not max_fb_lt_left24))) (let ((.cse687 (or max_fb_lt24 .cse688))) (res .cse687 (assume .cse687) (res .cse688 (or- .cse687) (not- .cse688))))) :proves (+ max_fb_lt24 - max_fb_lt_left24) :input)) (.cse367 (! (let ((.cse686 (not fna25)) (.cse685 (not fb_eq_fna25))) (let ((.cse684 (or fb25 .cse686 .cse685))) (res .cse684 (assume .cse684) (res .cse685 (res .cse686 (or- .cse684) (not- .cse686)) (not- .cse685))))) :proves (+ fb25 - fna25 - fb_eq_fna25) :input)) (.cse371 (! (let ((.cse683 (not fb25))) (let ((.cse682 (or max_fb_lt_left25 max25 .cse683))) (res .cse682 (assume .cse682) (res .cse683 (or- .cse682) (not- .cse683))))) :proves (+ max_fb_lt_left25 - fb25 + max25) :input)) (.cse370 (! (let ((.cse681 (not nfa26))) (let ((.cse680 (or fna26 .cse681))) (res .cse680 (assume .cse680) (res .cse681 (or- .cse680) (not- .cse681))))) :proves (+ fna26 - nfa26) :input)) (.cse378 (! (let ((.cse679 (not max_fb_lt_left25))) (let ((.cse678 (or max_fb_lt25 .cse679))) (res .cse678 (assume .cse678) (res .cse679 (or- .cse678) (not- .cse679))))) :proves (+ max_fb_lt25 - max_fb_lt_left25) :input)) (.cse377 (! (let ((.cse677 (not fna26)) (.cse676 (not fb_eq_fna26))) (let ((.cse675 (or fb26 .cse677 .cse676))) (res .cse675 (assume .cse675) (res .cse676 (res .cse677 (or- .cse675) (not- .cse677)) (not- .cse676))))) :proves (+ fb26 - fna26 - fb_eq_fna26) :input)) (.cse386 (! (let ((.cse674 (not nfa27))) (let ((.cse673 (or fna27 .cse674))) (res .cse673 (assume .cse673) (res .cse674 (or- .cse673) (not- .cse674))))) :proves (+ fna27 - nfa27) :input)) (.cse384 (! (let ((.cse672 (not fb26))) (let ((.cse671 (or max_fb_lt_left26 max26 .cse672))) (res .cse671 (assume .cse671) (res .cse672 (or- .cse671) (not- .cse672))))) :proves (+ max_fb_lt_left26 - fb26 + max26) :input)) (.cse389 (! (let ((.cse670 (not fna27)) (.cse669 (not fb_eq_fna27))) (let ((.cse668 (or fb27 .cse670 .cse669))) (res .cse668 (assume .cse668) (res .cse669 (res .cse670 (or- .cse668) (not- .cse670)) (not- .cse669))))) :proves (+ fb27 - fna27 - fb_eq_fna27) :input)) (.cse387 (! (let ((.cse667 (not max_fb_lt_left26))) (let ((.cse666 (or max_fb_lt26 .cse667))) (res .cse666 (assume .cse666) (res .cse667 (or- .cse666) (not- .cse667))))) :proves (+ max_fb_lt26 - max_fb_lt_left26) :input)) (.cse396 (! (let ((.cse665 (not fb27))) (let ((.cse664 (or max_fb_lt_left27 max27 .cse665))) (res .cse664 (assume .cse664) (res .cse665 (or- .cse664) (not- .cse665))))) :proves (+ max_fb_lt_left27 - fb27 + max27) :input)) (.cse394 (! (let ((.cse663 (not nfa28))) (let ((.cse662 (or fna28 .cse663))) (res .cse662 (assume .cse662) (res .cse663 (or- .cse662) (not- .cse663))))) :proves (+ fna28 - nfa28) :input)) (.cse399 (! (let ((.cse661 (not max_fb_lt_left27))) (let ((.cse660 (or max_fb_lt27 .cse661))) (res .cse660 (assume .cse660) (res .cse661 (or- .cse660) (not- .cse661))))) :proves (+ max_fb_lt27 - max_fb_lt_left27) :input)) (.cse397 (! (let ((.cse659 (not fna28)) (.cse658 (not fb_eq_fna28))) (let ((.cse657 (or fb28 .cse659 .cse658))) (res .cse657 (assume .cse657) (res .cse658 (res .cse659 (or- .cse657) (not- .cse659)) (not- .cse658))))) :proves (+ fb28 - fna28 - fb_eq_fna28) :input)) (.cse401 (! (let ((.cse656 (not fb28))) (let ((.cse655 (or max_fb_lt_left28 max28 .cse656))) (res .cse655 (assume .cse655) (res .cse656 (or- .cse655) (not- .cse656))))) :proves (+ max_fb_lt_left28 - fb28 + max28) :input)) (.cse400 (! (let ((.cse654 (not nfa29))) (let ((.cse653 (or fna29 .cse654))) (res .cse653 (assume .cse653) (res .cse654 (or- .cse653) (not- .cse654))))) :proves (+ fna29 - nfa29) :input)) (.cse406 (! (let ((.cse652 (not max_fb_lt_left28))) (let ((.cse651 (or max_fb_lt28 .cse652))) (res .cse651 (assume .cse651) (res .cse652 (or- .cse651) (not- .cse652))))) :proves (+ max_fb_lt28 - max_fb_lt_left28) :input)) (.cse405 (! (let ((.cse650 (not fna29)) (.cse649 (not fb_eq_fna29))) (let ((.cse648 (or fb29 .cse650 .cse649))) (res .cse648 (assume .cse648) (res .cse649 (res .cse650 (or- .cse648) (not- .cse650)) (not- .cse649))))) :proves (+ fb29 - fna29 - fb_eq_fna29) :input)) (.cse410 (! (let ((.cse647 (or fna30 .cse23))) (res .cse647 (assume .cse647) (res .cse23 (or- .cse647) .cse24))) :proves (+ fna30 - nfa30) :input)) (.cse408 (! (let ((.cse646 (not fb29))) (let ((.cse645 (or max_fb_lt_left29 max29 .cse646))) (res .cse645 (assume .cse645) (res .cse646 (or- .cse645) (not- .cse646))))) :proves (+ max_fb_lt_left29 - fb29 + max29) :input)) (.cse413 (! (let ((.cse644 (or fb30 .cse17 .cse12))) (res .cse644 (assume .cse644) (res .cse12 (res .cse17 (or- .cse644) .cse18) .cse15))) :proves (+ fb30 - fna30 - fb_eq_fna30) :input)) (.cse411 (! (let ((.cse643 (not max_fb_lt_left29))) (let ((.cse642 (or max_fb_lt29 .cse643))) (res .cse642 (assume .cse642) (res .cse643 (or- .cse642) (not- .cse643))))) :proves (+ max_fb_lt29 - max_fb_lt_left29) :input)) (.cse415 (! (let ((.cse641 (or max_fb_lt_left30 max30 .cse13))) (res .cse641 (assume .cse641) (res .cse13 (or- .cse641) .cse14))) :proves (+ max_fb_lt_left30 - fb30 + max30) :input)) (.cse417 (! (let ((.cse640 (not max_fb_lt_left30))) (let ((.cse639 (or max_fb_lt30 .cse640))) (res .cse639 (assume .cse639) (res .cse640 (or- .cse639) (not- .cse640))))) :proves (+ max_fb_lt30 - max_fb_lt_left30) :input)) (.cse161 (not- .cse159)) (.cse461 (not- .cse460)) (.cse165 (not- .cse163)) (.cse270 (! (let ((.cse638 (not nfa15))) (let ((.cse637 (or fna15 .cse638))) (res .cse637 (assume .cse637) (res .cse638 (or- .cse637) (not- .cse638))))) :proves (+ fna15 - nfa15) :input)) (.cse271 (! (let ((.cse636 (not fna15)) (.cse635 (not fb_eq_fna15))) (let ((.cse634 (or fb15 .cse636 .cse635))) (res .cse634 (assume .cse634) (res .cse635 (res .cse636 (or- .cse634) (not- .cse636)) (not- .cse635))))) :proves (+ fb15 - fna15 - fb_eq_fna15) :input)) (.cse277 (! (let ((.cse633 (not fb15))) (let ((.cse632 (or max_fb_lt_left15 max15 .cse633))) (res .cse632 (assume .cse632) (res .cse633 (or- .cse632) (not- .cse633))))) :proves (+ max_fb_lt_left15 - fb15 + max15) :input)) (.cse276 (! (let ((.cse631 (not nfa16))) (let ((.cse630 (or fna16 .cse631))) (res .cse630 (assume .cse630) (res .cse631 (or- .cse630) (not- .cse631))))) :proves (+ fna16 - nfa16) :input)) (.cse279 (! (let ((.cse629 (not max_fb_lt_left15))) (let ((.cse628 (or max_fb_lt15 .cse629))) (res .cse628 (assume .cse628) (res .cse629 (or- .cse628) (not- .cse629))))) :proves (+ max_fb_lt15 - max_fb_lt_left15) :input)) (.cse278 (! (let ((.cse627 (not fna16)) (.cse626 (not fb_eq_fna16))) (let ((.cse625 (or fb16 .cse627 .cse626))) (res .cse625 (assume .cse625) (res .cse626 (res .cse627 (or- .cse625) (not- .cse627)) (not- .cse626))))) :proves (+ fb16 - fna16 - fb_eq_fna16) :input)) (.cse282 (! (let ((.cse624 (not max_fb_lt_sub16)) (.cse623 (not max_fb_lt15))) (let ((.cse622 (or max_fb_lt_right16 .cse624 .cse623))) (res .cse622 (assume .cse622) (res .cse623 (res .cse624 (or- .cse622) (not- .cse624)) (not- .cse623))))) :proves (+ max_fb_lt_right16 - max_fb_lt15 - max_fb_lt_sub16) :input)) (.cse281 (! (let ((.cse621 (not fb16))) (let ((.cse620 (or max_fb_lt_left16 max16 .cse621))) (res .cse620 (assume .cse620) (res .cse621 (or- .cse620) (not- .cse621))))) :proves (+ max_fb_lt_left16 - fb16 + max16) :input)) (.cse289 (! (let ((.cse619 (not max_fb_lt_right16))) (let ((.cse618 (or max_fb_lt16 .cse619))) (res .cse618 (assume .cse618) (res .cse619 (or- .cse618) (not- .cse619))))) :proves (+ max_fb_lt16 - max_fb_lt_right16) :input)) (.cse288 (! (let ((.cse617 (not max_fb_lt_left16))) (let ((.cse616 (or max_fb_lt16 .cse617))) (res .cse616 (assume .cse616) (res .cse617 (or- .cse616) (not- .cse617))))) :proves (+ max_fb_lt16 - max_fb_lt_left16) :input))) (res carry14 (! (res max_fb_lt_sub28 .cse39 (res max29 (res fb_eq_fna26 .cse53 (res fb_eq_fna27 .cse54 (res max24 (res fb_eq_fna21 .cse55 (res max18 (res fa_min_lt30 (! (res fa_min_lt_right31 .cse69 (! (let ((.cse70 (or .cse71 fa_min_lt30))) (res .cse70 (assume .cse70) (res .cse71 (or- .cse70) .cse72))) :proves (- fa_min_lt_right31 + fa_min_lt30) :input)) :proves (+ fa_min_lt30) :rup) (res fb_eq_fna24 .cse57 (res max_fb_lt_sub20 .cse47 (res max19 (res fb_eq_fna15 .cse56 (res max_fb_lt_sub26 .cse41 (res max_fb_lt_sub22 .cse45 (res fb_eq_fna25 .cse60 (res max_fb_lt_sub16 .cse61 (res max27 (res max_fb_lt_sub25 .cse42 (res max15 (res fb_eq_fna17 .cse66 (res fb_eq_fna28 .cse68 (res max21 (res max28 (res max_fb_lt_sub23 .cse44 (res max_fb_lt_sub24 .cse43 (res fa31 .cse31 (res max_fb_lt_sub30 .cse37 (res max_fb_lt_sub21 .cse46 (res fb_eq_fna20 .cse73 (res max17 (res max16 (res fb_eq_fna16 .cse74 (res fb_eq_fna19 .cse75 (res fb_eq_fna22 .cse76 (res fb_eq_fna30 .cse0 (res max30 (res max25 (res max22 (res max_fb_lt_sub17 .cse50 (res fb_eq_fna31 .cse32 (res max_fb_lt_right31 (res max_fb_lt_sub29 .cse38 (res fb_eq_fna29 .cse77 (res max26 (res max_fb_lt_sub19 .cse48 (res max_fb_lt_sub18 .cse49 (res fb_eq_fna23 .cse78 (res max20 (res max23 (res fb_eq_fna18 .cse79 (res max_fb_lt_sub27 .cse40 (let-proof ((.cse166 (! (let ((.cse459 (or .cse460 carry14))) (res .cse459 (assume .cse459) (res .cse460 (or- .cse459) .cse461))) :proves (- carry15 + carry14) :input))) (res carry15 (res carry16 (res carry17 (res carry18 (res carry19 (res carry20 (res carry21 (res carry22 (res carry23 (res carry24 (res carry25 (res carry26 (res carry27 (res carry28 (res carry29 (res carry30 (res nfa31 (res fna31 (res fb31 (res max_fb_lt_sub31 .cse36 (res max_fb_lt30 (res max_fb_lt_left30 (res max_fb_lt_right30 (res fb30 (res max_fb_lt29 (res fna30 (res max_fb_lt_right29 (res max_fb_lt_left29 (res nfa30 (res max_fb_lt28 (res fb29 (res fa30 (! (let ((.cse80 (or nfa30 fa30 carry29))) (res .cse80 (assume .cse80) (or- .cse80))) :proves (+ carry29 + fa30 + nfa30) :input) (res max_fb_lt_right28 (res max_fb_lt_left28 (res fna29 (res fa_min_lt_left30 (res max_fb_lt27 (res fb28 (res nfa29 (res fa_min_lt_right30 (! (let ((.cse82 (not fa_min_lt30))) (let ((.cse81 (or .cse82 fa_min_lt_left30 fa_min_lt_right30))) (res .cse81 (assume .cse81) (res .cse82 (or- .cse81) (not- .cse82))))) :proves (+ fa_min_lt_right30 + fa_min_lt_left30 - fa_min_lt30) :input) (res max_fb_lt_left27 (res max_fb_lt_right27 (res fna28 (res fa29 (! (let ((.cse83 (or nfa29 fa29 carry28))) (res .cse83 (assume .cse83) (or- .cse83))) :proves (+ carry28 + fa29 + nfa29) :input) (res fa_min_lt29 (! (let ((.cse85 (not fa_min_lt_right30))) (let ((.cse84 (or .cse85 fa_min_lt29))) (res .cse84 (assume .cse84) (res .cse85 (or- .cse84) (not- .cse85))))) :proves (- fa_min_lt_right30 + fa_min_lt29) :input) (res fb27 (res max_fb_lt26 (res nfa28 (res fa_min_lt_left29 (res fa_min_lt_right29 (! (let ((.cse87 (not fa_min_lt29))) (let ((.cse86 (or .cse87 fa_min_lt_left29 fa_min_lt_right29))) (res .cse86 (assume .cse86) (res .cse87 (or- .cse86) (not- .cse87))))) :proves (+ fa_min_lt_right29 - fa_min_lt29 + fa_min_lt_left29) :input) (res fna27 (res max_fb_lt_right26 (res max_fb_lt_left26 (res fa28 (! (let ((.cse88 (or nfa28 fa28 carry27))) (res .cse88 (assume .cse88) (or- .cse88))) :proves (+ carry27 + fa28 + nfa28) :input) (res fa_min_lt28 (! (let ((.cse90 (not fa_min_lt_right29))) (let ((.cse89 (or .cse90 fa_min_lt28))) (res .cse89 (assume .cse89) (res .cse90 (or- .cse89) (not- .cse90))))) :proves (- fa_min_lt_right29 + fa_min_lt28) :input) (res nfa27 (res max_fb_lt25 (res fb26 (res fa_min_lt_left28 (res fa_min_lt_right28 (! (let ((.cse92 (not fa_min_lt28))) (let ((.cse91 (or .cse92 fa_min_lt_left28 fa_min_lt_right28))) (res .cse91 (assume .cse91) (res .cse92 (or- .cse91) (not- .cse92))))) :proves (+ fa_min_lt_right28 - fa_min_lt28 + fa_min_lt_left28) :input) (res fa27 (! (let ((.cse93 (or nfa27 fa27 carry26))) (res .cse93 (assume .cse93) (or- .cse93))) :proves (+ carry26 + fa27 + nfa27) :input) (res max_fb_lt_right25 (res max_fb_lt_left25 (res fna26 (res fa_min_lt27 (! (let ((.cse95 (not fa_min_lt_right28))) (let ((.cse94 (or .cse95 fa_min_lt27))) (res .cse94 (assume .cse94) (res .cse95 (or- .cse94) (not- .cse95))))) :proves (- fa_min_lt_right28 + fa_min_lt27) :input) (res fa_min_lt_left27 (res max_fb_lt24 (res fb25 (res nfa26 (res fa_min_lt_right27 (! (let ((.cse97 (not fa_min_lt27))) (let ((.cse96 (or .cse97 fa_min_lt_left27 fa_min_lt_right27))) (res .cse96 (assume .cse96) (res .cse97 (or- .cse96) (not- .cse97))))) :proves (+ fa_min_lt_right27 - fa_min_lt27 + fa_min_lt_left27) :input) (res max_fb_lt_right24 (res max_fb_lt_left24 (res fna25 (res fa26 (! (let ((.cse98 (or nfa26 fa26 carry25))) (res .cse98 (assume .cse98) (or- .cse98))) :proves (+ carry25 + fa26 + nfa26) :input) (res fa_min_lt26 (! (let ((.cse100 (not fa_min_lt_right27))) (let ((.cse99 (or .cse100 fa_min_lt26))) (res .cse99 (assume .cse99) (res .cse100 (or- .cse99) (not- .cse100))))) :proves (- fa_min_lt_right27 + fa_min_lt26) :input) (res max_fb_lt23 (res fb24 (res nfa25 (res fa_min_lt_left26 (res fa_min_lt_right26 (! (let ((.cse102 (not fa_min_lt26))) (let ((.cse101 (or .cse102 fa_min_lt_left26 fa_min_lt_right26))) (res .cse101 (assume .cse101) (res .cse102 (or- .cse101) (not- .cse102))))) :proves (+ fa_min_lt_right26 - fa_min_lt26 + fa_min_lt_left26) :input) (res max_fb_lt_right23 (res max_fb_lt_left23 (res fna24 (res fa25 (! (let ((.cse103 (or nfa25 fa25 carry24))) (res .cse103 (assume .cse103) (or- .cse103))) :proves (+ carry24 + fa25 + nfa25) :input) (res fa_min_lt25 (! (let ((.cse105 (not fa_min_lt_right26))) (let ((.cse104 (or .cse105 fa_min_lt25))) (res .cse104 (assume .cse104) (res .cse105 (or- .cse104) (not- .cse105))))) :proves (- fa_min_lt_right26 + fa_min_lt25) :input) (res max_fb_lt22 (res fb23 (res nfa24 (res fa_min_lt_left25 (res fa_min_lt_right25 (! (let ((.cse107 (not fa_min_lt25))) (let ((.cse106 (or .cse107 fa_min_lt_left25 fa_min_lt_right25))) (res .cse106 (assume .cse106) (res .cse107 (or- .cse106) (not- .cse107))))) :proves (+ fa_min_lt_right25 - fa_min_lt25 + fa_min_lt_left25) :input) (res max_fb_lt_right22 (res max_fb_lt_left22 (res fna23 (res fa24 (! (let ((.cse108 (or nfa24 fa24 carry23))) (res .cse108 (assume .cse108) (or- .cse108))) :proves (+ carry23 + fa24 + nfa24) :input) (res fa_min_lt24 (! (let ((.cse110 (not fa_min_lt_right25))) (let ((.cse109 (or .cse110 fa_min_lt24))) (res .cse109 (assume .cse109) (res .cse110 (or- .cse109) (not- .cse110))))) :proves (- fa_min_lt_right25 + fa_min_lt24) :input) (res max_fb_lt21 (res fb22 (res nfa23 (res fa_min_lt_left24 (res fa_min_lt_right24 (! (let ((.cse112 (not fa_min_lt24))) (let ((.cse111 (or .cse112 fa_min_lt_left24 fa_min_lt_right24))) (res .cse111 (assume .cse111) (res .cse112 (or- .cse111) (not- .cse112))))) :proves (+ fa_min_lt_right24 - fa_min_lt24 + fa_min_lt_left24) :input) (res max_fb_lt_right21 (res max_fb_lt_left21 (res fna22 (res fa23 (! (let ((.cse113 (or nfa23 fa23 carry22))) (res .cse113 (assume .cse113) (or- .cse113))) :proves (+ carry22 + fa23 + nfa23) :input) (res fa_min_lt23 (! (let ((.cse115 (not fa_min_lt_right24))) (let ((.cse114 (or .cse115 fa_min_lt23))) (res .cse114 (assume .cse114) (res .cse115 (or- .cse114) (not- .cse115))))) :proves (- fa_min_lt_right24 + fa_min_lt23) :input) (res max_fb_lt20 (res fb21 (res nfa22 (res fa_min_lt_left23 (res fa_min_lt_right23 (! (let ((.cse117 (not fa_min_lt23))) (let ((.cse116 (or .cse117 fa_min_lt_left23 fa_min_lt_right23))) (res .cse116 (assume .cse116) (res .cse117 (or- .cse116) (not- .cse117))))) :proves (+ fa_min_lt_right23 - fa_min_lt23 + fa_min_lt_left23) :input) (res max_fb_lt_right20 (res max_fb_lt_left20 (res fna21 (res fa22 (! (let ((.cse118 (or nfa22 fa22 carry21))) (res .cse118 (assume .cse118) (or- .cse118))) :proves (+ carry21 + fa22 + nfa22) :input) (res fa_min_lt22 (! (let ((.cse120 (not fa_min_lt_right23))) (let ((.cse119 (or .cse120 fa_min_lt22))) (res .cse119 (assume .cse119) (res .cse120 (or- .cse119) (not- .cse120))))) :proves (- fa_min_lt_right23 + fa_min_lt22) :input) (res max_fb_lt19 (res fb20 (res nfa21 (res fa_min_lt_left22 (res fa_min_lt_right22 (! (let ((.cse122 (not fa_min_lt22))) (let ((.cse121 (or .cse122 fa_min_lt_left22 fa_min_lt_right22))) (res .cse121 (assume .cse121) (res .cse122 (or- .cse121) (not- .cse122))))) :proves (+ fa_min_lt_right22 - fa_min_lt22 + fa_min_lt_left22) :input) (res max_fb_lt_left19 (res max_fb_lt_right19 (res fna20 (res fa21 (! (let ((.cse123 (or nfa21 fa21 carry20))) (res .cse123 (assume .cse123) (or- .cse123))) :proves (+ carry20 + fa21 + nfa21) :input) (res fa_min_lt21 (! (let ((.cse125 (not fa_min_lt_right22))) (let ((.cse124 (or .cse125 fa_min_lt21))) (res .cse124 (assume .cse124) (res .cse125 (or- .cse124) (not- .cse125))))) :proves (- fa_min_lt_right22 + fa_min_lt21) :input) (res fb19 (res max_fb_lt18 (res nfa20 (res fa_min_lt_left21 (res fa_min_lt_right21 (! (let ((.cse127 (not fa_min_lt21))) (let ((.cse126 (or .cse127 fa_min_lt_left21 fa_min_lt_right21))) (res .cse126 (assume .cse126) (res .cse127 (or- .cse126) (not- .cse127))))) :proves (- fa_min_lt21 + fa_min_lt_right21 + fa_min_lt_left21) :input) (res fna19 (res max_fb_lt_left18 (res max_fb_lt_right18 (res fa20 (! (let ((.cse128 (or nfa20 fa20 carry19))) (res .cse128 (assume .cse128) (or- .cse128))) :proves (+ carry19 + fa20 + nfa20) :input) (res fa_min_lt20 (! (let ((.cse130 (not fa_min_lt_right21))) (let ((.cse129 (or .cse130 fa_min_lt20))) (res .cse129 (assume .cse129) (res .cse130 (or- .cse129) (not- .cse130))))) :proves (- fa_min_lt_right21 + fa_min_lt20) :input) (res nfa19 (res fb18 (res max_fb_lt17 (res fa_min_lt_left20 (res fa_min_lt_right20 (! (let ((.cse132 (not fa_min_lt20))) (let ((.cse131 (or .cse132 fa_min_lt_left20 fa_min_lt_right20))) (res .cse131 (assume .cse131) (res .cse132 (or- .cse131) (not- .cse132))))) :proves (- fa_min_lt20 + fa_min_lt_right20 + fa_min_lt_left20) :input) (res fa19 (! (let ((.cse133 (or nfa19 fa19 carry18))) (res .cse133 (assume .cse133) (or- .cse133))) :proves (+ carry18 + fa19 + nfa19) :input) (res fna18 (res max_fb_lt_right17 (res max_fb_lt_left17 (res fa_min_lt19 (! (let ((.cse135 (not fa_min_lt_right20))) (let ((.cse134 (or .cse135 fa_min_lt19))) (res .cse134 (assume .cse134) (res .cse135 (or- .cse134) (not- .cse135))))) :proves (- fa_min_lt_right20 + fa_min_lt19) :input) (res fa_min_lt_left19 (res nfa18 (res max_fb_lt16 (res fb17 (res fa_min_lt_right19 (! (let ((.cse137 (not fa_min_lt19))) (let ((.cse136 (or .cse137 fa_min_lt_left19 fa_min_lt_right19))) (res .cse136 (assume .cse136) (res .cse137 (or- .cse136) (not- .cse137))))) :proves (- fa_min_lt19 + fa_min_lt_right19 + fa_min_lt_left19) :input) (res fa18 (! (let ((.cse138 (or nfa18 fa18 carry17))) (res .cse138 (assume .cse138) (or- .cse138))) :proves (+ carry17 + fa18 + nfa18) :input) (res max_fb_lt_right16 (res max_fb_lt_left16 (res fna17 (res fa_min_lt18 (! (let ((.cse140 (not fa_min_lt_right19))) (let ((.cse139 (or .cse140 fa_min_lt18))) (res .cse139 (assume .cse139) (res .cse140 (or- .cse139) (not- .cse140))))) :proves (- fa_min_lt_right19 + fa_min_lt18) :input) (res fa_min_lt_left18 (res max_fb_lt15 (res fb16 (res nfa17 (res fa_min_lt_right18 (! (let ((.cse142 (not fa_min_lt18))) (let ((.cse141 (or .cse142 fa_min_lt_left18 fa_min_lt_right18))) (res .cse141 (assume .cse141) (res .cse142 (or- .cse141) (not- .cse142))))) :proves (- fa_min_lt18 + fa_min_lt_right18 + fa_min_lt_left18) :input) (res max_fb_lt_left15 (res fna16 (res fa17 (! (let ((.cse143 (or nfa17 fa17 carry16))) (res .cse143 (assume .cse143) (or- .cse143))) :proves (+ carry16 + fa17 + nfa17) :input) (res fa_min_lt17 (! (let ((.cse145 (not fa_min_lt_right18))) (let ((.cse144 (or .cse145 fa_min_lt17))) (res .cse144 (assume .cse144) (res .cse145 (or- .cse144) (not- .cse145))))) :proves (- fa_min_lt_right18 + fa_min_lt17) :input) (res fb15 (res nfa16 (res fa_min_lt_left17 (res fa_min_lt_right17 (! (let ((.cse147 (not fa_min_lt17))) (let ((.cse146 (or .cse147 fa_min_lt_left17 fa_min_lt_right17))) (res .cse146 (assume .cse146) (res .cse147 (or- .cse146) (not- .cse147))))) :proves (- fa_min_lt17 + fa_min_lt_right17 + fa_min_lt_left17) :input) (res fna15 (res fa_min_lt16 (! (let ((.cse149 (not fa_min_lt_right17))) (let ((.cse148 (or .cse149 fa_min_lt16))) (res .cse148 (assume .cse148) (res .cse149 (or- .cse148) (not- .cse149))))) :proves (- fa_min_lt_right17 + fa_min_lt16) :input) (res nfa15 (! (res fa_min_lt_right15 (res carry15 (res fa15 (! (let ((.cse150 (or nfa15 fa15 carry14))) (res .cse150 (assume .cse150) (or- .cse150))) :proves (+ carry14 + fa15 + nfa15) :input) (res fa16 (! (let ((.cse151 (or nfa16 fa16 carry15))) (res .cse151 (assume .cse151) (or- .cse151))) :proves (+ carry15 + fa16 + nfa16) :input) (res fa_min_lt_left15 (res fa_min_lt_left16 (res fa_min_lt15 (res fa_min_lt_right16 (! (let ((.cse153 (not fa_min_lt16))) (let ((.cse152 (or .cse153 fa_min_lt_left16 fa_min_lt_right16))) (res .cse152 (assume .cse152) (res .cse153 (or- .cse152) (not- .cse153))))) :proves (+ fa_min_lt_right16 + fa_min_lt_left16 - fa_min_lt16) :input) (! (let ((.cse155 (not fa_min_lt_right16))) (let ((.cse154 (or .cse155 fa_min_lt15))) (res .cse154 (assume .cse154) (res .cse155 (or- .cse154) (not- .cse155))))) :proves (- fa_min_lt_right16 + fa_min_lt15) :input)) (! (let ((.cse157 (not fa_min_lt15))) (let ((.cse156 (or .cse157 fa_min_lt_left15 fa_min_lt_right15))) (res .cse156 (assume .cse156) (res .cse157 (or- .cse156) (not- .cse157))))) :proves (- fa_min_lt15 + fa_min_lt_left15 + fa_min_lt_right15) :input)) (! (let ((.cse160 (not fa_min_lt_left16))) (let ((.cse158 (or .cse160 .cse159))) (res .cse158 (assume .cse158) (res .cse159 (res .cse160 (or- .cse158) (not- .cse160)) .cse161)))) :proves (- fa_min_lt_left16 - fa16) :input)) (! (let ((.cse164 (not fa_min_lt_left15))) (let ((.cse162 (or .cse164 .cse163))) (res .cse162 (assume .cse162) (res .cse163 (res .cse164 (or- .cse162) (not- .cse164)) .cse165)))) :proves (- fa_min_lt_left15 - fa15) :input)))) .cse166) (! (res fa_min_lt14 (! (let ((.cse168 (not fa_min_lt_right15))) (let ((.cse167 (or .cse168 fa_min_lt14))) (res .cse167 (assume .cse167) (res .cse168 (or- .cse167) (not- .cse168))))) :proves (- fa_min_lt_right15 + fa_min_lt14) :input) (! (res fa_min_lt_left14 (res fa_min_lt_right14 (! (let ((.cse170 (not fa_min_lt14))) (let ((.cse169 (or .cse170 fa_min_lt_left14 fa_min_lt_right14))) (res .cse169 (assume .cse169) (res .cse170 (or- .cse169) (not- .cse170))))) :proves (- fa_min_lt14 + fa_min_lt_right14 + fa_min_lt_left14) :input) (! (res fa_min_lt13 (! (let ((.cse172 (not fa_min_lt_right14))) (let ((.cse171 (or .cse172 fa_min_lt13))) (res .cse171 (assume .cse171) (res .cse172 (or- .cse171) (not- .cse172))))) :proves (- fa_min_lt_right14 + fa_min_lt13) :input) (! (res fa_min_lt_left13 (res fa_min_lt_right13 (! (let ((.cse174 (not fa_min_lt13))) (let ((.cse173 (or .cse174 fa_min_lt_left13 fa_min_lt_right13))) (res .cse173 (assume .cse173) (res .cse174 (or- .cse173) (not- .cse174))))) :proves (- fa_min_lt13 + fa_min_lt_right13 + fa_min_lt_left13) :input) (! (res fa_min_lt12 (! (let ((.cse176 (not fa_min_lt_right13))) (let ((.cse175 (or .cse176 fa_min_lt12))) (res .cse175 (assume .cse175) (res .cse176 (or- .cse175) (not- .cse176))))) :proves (- fa_min_lt_right13 + fa_min_lt12) :input) (! (res fa_min_lt_left12 (res fa_min_lt_right12 (! (let ((.cse178 (not fa_min_lt12))) (let ((.cse177 (or .cse178 fa_min_lt_left12 fa_min_lt_right12))) (res .cse177 (assume .cse177) (res .cse178 (or- .cse177) (not- .cse178))))) :proves (- fa_min_lt12 + fa_min_lt_right12 + fa_min_lt_left12) :input) (! (res fa_min_lt11 (! (let ((.cse180 (not fa_min_lt_right12))) (let ((.cse179 (or .cse180 fa_min_lt11))) (res .cse179 (assume .cse179) (res .cse180 (or- .cse179) (not- .cse180))))) :proves (- fa_min_lt_right12 + fa_min_lt11) :input) (! (res fa_min_lt_left11 (res fa_min_lt_right11 (! (let ((.cse182 (not fa_min_lt11))) (let ((.cse181 (or .cse182 fa_min_lt_left11 fa_min_lt_right11))) (res .cse181 (assume .cse181) (res .cse182 (or- .cse181) (not- .cse182))))) :proves (- fa_min_lt11 + fa_min_lt_right11 + fa_min_lt_left11) :input) (! (res fa_min_lt10 (! (let ((.cse184 (not fa_min_lt_right11))) (let ((.cse183 (or .cse184 fa_min_lt10))) (res .cse183 (assume .cse183) (res .cse184 (or- .cse183) (not- .cse184))))) :proves (- fa_min_lt_right11 + fa_min_lt10) :input) (! (res fa_min_lt_left10 (res fa_min_lt_right10 (! (let ((.cse186 (not fa_min_lt10))) (let ((.cse185 (or .cse186 fa_min_lt_left10 fa_min_lt_right10))) (res .cse185 (assume .cse185) (res .cse186 (or- .cse185) (not- .cse186))))) :proves (- fa_min_lt10 + fa_min_lt_right10 + fa_min_lt_left10) :input) (! (res fa_min_lt9 (! (let ((.cse188 (not fa_min_lt_right10))) (let ((.cse187 (or .cse188 fa_min_lt9))) (res .cse187 (assume .cse187) (res .cse188 (or- .cse187) (not- .cse188))))) :proves (- fa_min_lt_right10 + fa_min_lt9) :input) (! (res fa_min_lt_left9 (res fa_min_lt_right9 (! (let ((.cse190 (not fa_min_lt9))) (let ((.cse189 (or .cse190 fa_min_lt_left9 fa_min_lt_right9))) (res .cse189 (assume .cse189) (res .cse190 (or- .cse189) (not- .cse190))))) :proves (- fa_min_lt9 + fa_min_lt_right9 + fa_min_lt_left9) :input) (! (res fa_min_lt8 (! (let ((.cse192 (not fa_min_lt_right9))) (let ((.cse191 (or .cse192 fa_min_lt8))) (res .cse191 (assume .cse191) (res .cse192 (or- .cse191) (not- .cse192))))) :proves (- fa_min_lt_right9 + fa_min_lt8) :input) (! (res fa_min_lt_left8 (res fa_min_lt_right8 (! (let ((.cse194 (not fa_min_lt8))) (let ((.cse193 (or .cse194 fa_min_lt_left8 fa_min_lt_right8))) (res .cse193 (assume .cse193) (res .cse194 (or- .cse193) (not- .cse194))))) :proves (- fa_min_lt8 + fa_min_lt_right8 + fa_min_lt_left8) :input) (! (res fa_min_lt7 (! (let ((.cse196 (not fa_min_lt_right8))) (let ((.cse195 (or .cse196 fa_min_lt7))) (res .cse195 (assume .cse195) (res .cse196 (or- .cse195) (not- .cse196))))) :proves (- fa_min_lt_right8 + fa_min_lt7) :input) (! (res fa_min_lt_left7 (res fa_min_lt_right7 (! (let ((.cse198 (not fa_min_lt7))) (let ((.cse197 (or .cse198 fa_min_lt_left7 fa_min_lt_right7))) (res .cse197 (assume .cse197) (res .cse198 (or- .cse197) (not- .cse198))))) :proves (- fa_min_lt7 + fa_min_lt_right7 + fa_min_lt_left7) :input) (! (res fa_min_lt6 (! (let ((.cse200 (not fa_min_lt_right7))) (let ((.cse199 (or .cse200 fa_min_lt6))) (res .cse199 (assume .cse199) (res .cse200 (or- .cse199) (not- .cse200))))) :proves (- fa_min_lt_right7 + fa_min_lt6) :input) (! (res fa_min_lt_left6 (res fa_min_lt_right6 (! (let ((.cse202 (not fa_min_lt6))) (let ((.cse201 (or .cse202 fa_min_lt_left6 fa_min_lt_right6))) (res .cse201 (assume .cse201) (res .cse202 (or- .cse201) (not- .cse202))))) :proves (- fa_min_lt6 + fa_min_lt_right6 + fa_min_lt_left6) :input) (! (res fa_min_lt5 (! (let ((.cse204 (not fa_min_lt_right6))) (let ((.cse203 (or .cse204 fa_min_lt5))) (res .cse203 (assume .cse203) (res .cse204 (or- .cse203) (not- .cse204))))) :proves (- fa_min_lt_right6 + fa_min_lt5) :input) (! (res fa_min_lt_left5 (res fa_min_lt_right5 (! (let ((.cse206 (not fa_min_lt5))) (let ((.cse205 (or .cse206 fa_min_lt_left5 fa_min_lt_right5))) (res .cse205 (assume .cse205) (res .cse206 (or- .cse205) (not- .cse206))))) :proves (- fa_min_lt5 + fa_min_lt_right5 + fa_min_lt_left5) :input) (! (res fa_min_lt4 (! (let ((.cse208 (not fa_min_lt_right5))) (let ((.cse207 (or .cse208 fa_min_lt4))) (res .cse207 (assume .cse207) (res .cse208 (or- .cse207) (not- .cse208))))) :proves (- fa_min_lt_right5 + fa_min_lt4) :input) (! (res fa_min_lt_left4 (res fa_min_lt_right4 (! (let ((.cse210 (not fa_min_lt4))) (let ((.cse209 (or .cse210 fa_min_lt_left4 fa_min_lt_right4))) (res .cse209 (assume .cse209) (res .cse210 (or- .cse209) (not- .cse210))))) :proves (- fa_min_lt4 + fa_min_lt_right4 + fa_min_lt_left4) :input) (! (res fa_min_lt3 (! (let ((.cse212 (not fa_min_lt_right4))) (let ((.cse211 (or .cse212 fa_min_lt3))) (res .cse211 (assume .cse211) (res .cse212 (or- .cse211) (not- .cse212))))) :proves (- fa_min_lt_right4 + fa_min_lt3) :input) (! (res fa_min_lt_left3 (res fa_min_lt_right3 (! (let ((.cse214 (not fa_min_lt3))) (let ((.cse213 (or .cse214 fa_min_lt_left3 fa_min_lt_right3))) (res .cse213 (assume .cse213) (res .cse214 (or- .cse213) (not- .cse214))))) :proves (- fa_min_lt3 + fa_min_lt_right3 + fa_min_lt_left3) :input) (! (res fa_min_lt2 (! (let ((.cse216 (not fa_min_lt_right3))) (let ((.cse215 (or .cse216 fa_min_lt2))) (res .cse215 (assume .cse215) (res .cse216 (or- .cse215) (not- .cse216))))) :proves (- fa_min_lt_right3 + fa_min_lt2) :input) (! (res fa_min_lt_left2 (res fa_min_lt_right2 (! (let ((.cse218 (not fa_min_lt2))) (let ((.cse217 (or .cse218 fa_min_lt_left2 fa_min_lt_right2))) (res .cse217 (assume .cse217) (res .cse218 (or- .cse217) (not- .cse218))))) :proves (- fa_min_lt2 + fa_min_lt_right2 + fa_min_lt_left2) :input) (! (res fa_min_lt1 (! (let ((.cse220 (not fa_min_lt_right2))) (let ((.cse219 (or .cse220 fa_min_lt1))) (res .cse219 (assume .cse219) (res .cse220 (or- .cse219) (not- .cse220))))) :proves (- fa_min_lt_right2 + fa_min_lt1) :input) (! (res fa_min_lt_right1 (res fa_min_lt_left1 (! (let ((.cse222 (not fa_min_lt1))) (let ((.cse221 (or .cse222 fa_min_lt_left1 fa_min_lt_right1))) (res .cse221 (assume .cse221) (res .cse222 (or- .cse221) (not- .cse222))))) :proves (- fa_min_lt1 + fa_min_lt_left1 + fa_min_lt_right1) :input) (! (res min1 (! (let ((.cse224 (not fa_min_lt_left1))) (let ((.cse223 (or .cse224 min1))) (res .cse223 (assume .cse223) (res .cse224 (or- .cse223) (not- .cse224))))) :proves (- fa_min_lt_left1 + min1) :input) (! (let ((.cse225 (not min1))) (res .cse225 (assume .cse225) (not- .cse225))) :proves (- min1) :input)) :proves (- fa_min_lt_left1) :rup)) (! (res fa_min_lt0 (! (let ((.cse227 (not fa_min_lt_right1))) (let ((.cse226 (or .cse227 fa_min_lt0))) (res .cse226 (assume .cse226) (res .cse227 (or- .cse226) (not- .cse227))))) :proves (- fa_min_lt_right1 + fa_min_lt0) :input) (! (res min0 (! (let ((.cse229 (not fa_min_lt0))) (let ((.cse228 (or .cse229 min0))) (res .cse228 (assume .cse228) (res .cse229 (or- .cse228) (not- .cse229))))) :proves (- fa_min_lt0 + min0) :input) (! (let ((.cse230 (not min0))) (res .cse230 (assume .cse230) (not- .cse230))) :proves (- min0) :input)) :proves (- fa_min_lt0) :rup)) :proves (- fa_min_lt_right1) :rup)) :proves (- fa_min_lt1) :rup)) :proves (- fa_min_lt_right2) :rup)) (! (res min2 (! (let ((.cse232 (not fa_min_lt_left2))) (let ((.cse231 (or .cse232 min2))) (res .cse231 (assume .cse231) (res .cse232 (or- .cse231) (not- .cse232))))) :proves (- fa_min_lt_left2 + min2) :input) (! (let ((.cse233 (not min2))) (res .cse233 (assume .cse233) (not- .cse233))) :proves (- min2) :input)) :proves (- fa_min_lt_left2) :rup)) :proves (- fa_min_lt2) :rup)) :proves (- fa_min_lt_right3) :rup)) (! (res min3 (! (let ((.cse235 (not fa_min_lt_left3))) (let ((.cse234 (or .cse235 min3))) (res .cse234 (assume .cse234) (res .cse235 (or- .cse234) (not- .cse235))))) :proves (- fa_min_lt_left3 + min3) :input) (! (let ((.cse236 (not min3))) (res .cse236 (assume .cse236) (not- .cse236))) :proves (- min3) :input)) :proves (- fa_min_lt_left3) :rup)) :proves (- fa_min_lt3) :rup)) :proves (- fa_min_lt_right4) :rup)) (! (res min4 (! (let ((.cse238 (not fa_min_lt_left4))) (let ((.cse237 (or .cse238 min4))) (res .cse237 (assume .cse237) (res .cse238 (or- .cse237) (not- .cse238))))) :proves (- fa_min_lt_left4 + min4) :input) (! (let ((.cse239 (not min4))) (res .cse239 (assume .cse239) (not- .cse239))) :proves (- min4) :input)) :proves (- fa_min_lt_left4) :rup)) :proves (- fa_min_lt4) :rup)) :proves (- fa_min_lt_right5) :rup)) (! (res min5 (! (let ((.cse241 (not fa_min_lt_left5))) (let ((.cse240 (or .cse241 min5))) (res .cse240 (assume .cse240) (res .cse241 (or- .cse240) (not- .cse241))))) :proves (- fa_min_lt_left5 + min5) :input) (! (let ((.cse242 (not min5))) (res .cse242 (assume .cse242) (not- .cse242))) :proves (- min5) :input)) :proves (- fa_min_lt_left5) :rup)) :proves (- fa_min_lt5) :rup)) :proves (- fa_min_lt_right6) :rup)) (! (res min6 (! (let ((.cse244 (not fa_min_lt_left6))) (let ((.cse243 (or .cse244 min6))) (res .cse243 (assume .cse243) (res .cse244 (or- .cse243) (not- .cse244))))) :proves (- fa_min_lt_left6 + min6) :input) (! (let ((.cse245 (not min6))) (res .cse245 (assume .cse245) (not- .cse245))) :proves (- min6) :input)) :proves (- fa_min_lt_left6) :rup)) :proves (- fa_min_lt6) :rup)) :proves (- fa_min_lt_right7) :rup)) (! (res min7 (! (let ((.cse247 (not fa_min_lt_left7))) (let ((.cse246 (or .cse247 min7))) (res .cse246 (assume .cse246) (res .cse247 (or- .cse246) (not- .cse247))))) :proves (- fa_min_lt_left7 + min7) :input) (! (let ((.cse248 (not min7))) (res .cse248 (assume .cse248) (not- .cse248))) :proves (- min7) :input)) :proves (- fa_min_lt_left7) :rup)) :proves (- fa_min_lt7) :rup)) :proves (- fa_min_lt_right8) :rup)) (! (res min8 (! (let ((.cse250 (not fa_min_lt_left8))) (let ((.cse249 (or .cse250 min8))) (res .cse249 (assume .cse249) (res .cse250 (or- .cse249) (not- .cse250))))) :proves (- fa_min_lt_left8 + min8) :input) (! (let ((.cse251 (not min8))) (res .cse251 (assume .cse251) (not- .cse251))) :proves (- min8) :input)) :proves (- fa_min_lt_left8) :rup)) :proves (- fa_min_lt8) :rup)) :proves (- fa_min_lt_right9) :rup)) (! (res min9 (! (let ((.cse253 (not fa_min_lt_left9))) (let ((.cse252 (or .cse253 min9))) (res .cse252 (assume .cse252) (res .cse253 (or- .cse252) (not- .cse253))))) :proves (- fa_min_lt_left9 + min9) :input) (! (let ((.cse254 (not min9))) (res .cse254 (assume .cse254) (not- .cse254))) :proves (- min9) :input)) :proves (- fa_min_lt_left9) :rup)) :proves (- fa_min_lt9) :rup)) :proves (- fa_min_lt_right10) :rup)) (! (res min10 (! (let ((.cse256 (not fa_min_lt_left10))) (let ((.cse255 (or .cse256 min10))) (res .cse255 (assume .cse255) (res .cse256 (or- .cse255) (not- .cse256))))) :proves (- fa_min_lt_left10 + min10) :input) (! (let ((.cse257 (not min10))) (res .cse257 (assume .cse257) (not- .cse257))) :proves (- min10) :input)) :proves (- fa_min_lt_left10) :rup)) :proves (- fa_min_lt10) :rup)) :proves (- fa_min_lt_right11) :rup)) (! (res min11 (! (let ((.cse259 (not fa_min_lt_left11))) (let ((.cse258 (or .cse259 min11))) (res .cse258 (assume .cse258) (res .cse259 (or- .cse258) (not- .cse259))))) :proves (- fa_min_lt_left11 + min11) :input) (! (let ((.cse260 (not min11))) (res .cse260 (assume .cse260) (not- .cse260))) :proves (- min11) :input)) :proves (- fa_min_lt_left11) :rup)) :proves (- fa_min_lt11) :rup)) :proves (- fa_min_lt_right12) :rup)) (! (res min12 (! (let ((.cse262 (not fa_min_lt_left12))) (let ((.cse261 (or .cse262 min12))) (res .cse261 (assume .cse261) (res .cse262 (or- .cse261) (not- .cse262))))) :proves (- fa_min_lt_left12 + min12) :input) (! (let ((.cse263 (not min12))) (res .cse263 (assume .cse263) (not- .cse263))) :proves (- min12) :input)) :proves (- fa_min_lt_left12) :rup)) :proves (- fa_min_lt12) :rup)) :proves (- fa_min_lt_right13) :rup)) (! (res min13 (! (let ((.cse265 (not fa_min_lt_left13))) (let ((.cse264 (or .cse265 min13))) (res .cse264 (assume .cse264) (res .cse265 (or- .cse264) (not- .cse265))))) :proves (- fa_min_lt_left13 + min13) :input) (! (let ((.cse266 (not min13))) (res .cse266 (assume .cse266) (not- .cse266))) :proves (- min13) :input)) :proves (- fa_min_lt_left13) :rup)) :proves (- fa_min_lt13) :rup)) :proves (- fa_min_lt_right14) :rup)) (! (res min14 (! (let ((.cse268 (not fa_min_lt_left14))) (let ((.cse267 (or .cse268 min14))) (res .cse267 (assume .cse267) (res .cse268 (or- .cse267) (not- .cse268))))) :proves (- fa_min_lt_left14 + min14) :input) (! (let ((.cse269 (not min14))) (res .cse269 (assume .cse269) (not- .cse269))) :proves (- min14) :input)) :proves (- fa_min_lt_left14) :rup)) :proves (- fa_min_lt14) :rup)) :proves (- fa_min_lt_right15) :rup)) :proves (+ carry14 - fa_min_lt16 + nfa15 + nfa16) :rup) .cse270)) .cse271)) (! (let ((.cse274 (not fa_min_lt_left17))) (let ((.cse272 (or .cse274 .cse273))) (res .cse272 (assume .cse272) (res .cse273 (res .cse274 (or- .cse272) (not- .cse274)) .cse275)))) :proves (- fa_min_lt_left17 - fa17) :input)) .cse276) .cse277))) .cse278) .cse279)) .cse280) .cse281) .cse282) (! (let ((.cse285 (not fa_min_lt_left18))) (let ((.cse283 (or .cse285 .cse284))) (res .cse283 (assume .cse283) (res .cse284 (res .cse285 (or- .cse283) (not- .cse285)) .cse286)))) :proves (- fa_min_lt_left18 - fa18) :input))) .cse287) .cse288) .cse289))) .cse290) .cse291) .cse292) (! (let ((.cse295 (not fa_min_lt_left19))) (let ((.cse293 (or .cse295 .cse294))) (res .cse293 (assume .cse293) (res .cse294 (res .cse295 (or- .cse293) (not- .cse295)) .cse296)))) :proves (- fa_min_lt_left19 - fa19) :input))) .cse297) .cse298) .cse299))) (! (let ((.cse302 (not fa_min_lt_left20))) (let ((.cse300 (or .cse302 .cse301))) (res .cse300 (assume .cse300) (res .cse301 (res .cse302 (or- .cse300) (not- .cse302)) .cse303)))) :proves (- fa_min_lt_left20 - fa20) :input)) .cse304) .cse305) .cse306))) .cse307) .cse308) .cse309)) (! (let ((.cse312 (not fa_min_lt_left21))) (let ((.cse310 (or .cse312 .cse311))) (res .cse310 (assume .cse310) (res .cse311 (res .cse312 (or- .cse310) (not- .cse312)) .cse313)))) :proves (- fa_min_lt_left21 - fa21) :input)) .cse314) .cse315) .cse316))) .cse317) .cse318) .cse319)) (! (let ((.cse322 (not fa_min_lt_left22))) (let ((.cse320 (or .cse322 .cse321))) (res .cse320 (assume .cse320) (res .cse321 (res .cse322 (or- .cse320) (not- .cse322)) .cse323)))) :proves (- fa_min_lt_left22 - fa22) :input)) .cse324) .cse325) .cse326))) .cse327) .cse328) .cse329)) (! (let ((.cse332 (not fa_min_lt_left23))) (let ((.cse330 (or .cse332 .cse331))) (res .cse330 (assume .cse330) (res .cse331 (res .cse332 (or- .cse330) (not- .cse332)) .cse333)))) :proves (- fa_min_lt_left23 - fa23) :input)) .cse334) .cse335) .cse336))) .cse337) .cse338) .cse339)) (! (let ((.cse342 (not fa_min_lt_left24))) (let ((.cse340 (or .cse342 .cse341))) (res .cse340 (assume .cse340) (res .cse341 (res .cse342 (or- .cse340) (not- .cse342)) .cse343)))) :proves (- fa_min_lt_left24 - fa24) :input)) .cse344) .cse345) .cse346))) .cse347) .cse348) .cse349)) (! (let ((.cse352 (not fa_min_lt_left25))) (let ((.cse350 (or .cse352 .cse351))) (res .cse350 (assume .cse350) (res .cse351 (res .cse352 (or- .cse350) (not- .cse352)) .cse353)))) :proves (- fa_min_lt_left25 - fa25) :input)) .cse354) .cse355) .cse356))) .cse357) .cse358) .cse359)) (! (let ((.cse362 (not fa_min_lt_left26))) (let ((.cse360 (or .cse362 .cse361))) (res .cse360 (assume .cse360) (res .cse361 (res .cse362 (or- .cse360) (not- .cse362)) .cse363)))) :proves (- fa_min_lt_left26 - fa26) :input)) .cse364) .cse365) .cse366))) .cse367) .cse368) .cse369)) .cse370) .cse371) .cse372) (! (let ((.cse375 (not fa_min_lt_left27))) (let ((.cse373 (or .cse375 .cse374))) (res .cse373 (assume .cse373) (res .cse374 (res .cse375 (or- .cse373) (not- .cse375)) .cse376)))) :proves (- fa_min_lt_left27 - fa27) :input))) .cse377) .cse378) .cse379))) (! (let ((.cse382 (not fa_min_lt_left28))) (let ((.cse380 (or .cse382 .cse381))) (res .cse380 (assume .cse380) (res .cse381 (res .cse382 (or- .cse380) (not- .cse382)) .cse383)))) :proves (- fa_min_lt_left28 - fa28) :input)) .cse384) .cse385) .cse386))) .cse387) .cse388) .cse389)) (! (let ((.cse392 (not fa_min_lt_left29))) (let ((.cse390 (or .cse392 .cse391))) (res .cse390 (assume .cse390) (res .cse391 (res .cse392 (or- .cse390) (not- .cse392)) .cse393)))) :proves (- fa_min_lt_left29 - fa29) :input)) .cse394) .cse395) .cse396))) .cse397) .cse398) .cse399)) .cse400) .cse401) .cse402) (! (let ((.cse404 (not fa_min_lt_left30))) (let ((.cse403 (or .cse404 .cse27))) (res .cse403 (assume .cse403) (res .cse27 (res .cse404 (or- .cse403) (not- .cse404)) .cse30)))) :proves (- fa_min_lt_left30 - fa30) :input)) .cse405) .cse406) .cse407)) .cse408) .cse409) .cse410) .cse411) .cse412) .cse413) .cse414) .cse415) .cse416) .cse417) .cse418)) .cse33) .cse34) .cse35) .cse20) (! (let ((.cse419 (or .cse22 carry28))) (res .cse419 (assume .cse419) (res .cse22 (or- .cse419) .cse25))) :proves (- carry29 + carry28) :input)) (! (let ((.cse420 (or .cse421 carry27))) (res .cse420 (assume .cse420) (res .cse421 (or- .cse420) .cse422))) :proves (- carry28 + carry27) :input)) (! (let ((.cse423 (or .cse424 carry26))) (res .cse423 (assume .cse423) (res .cse424 (or- .cse423) .cse425))) :proves (- carry27 + carry26) :input)) (! (let ((.cse426 (or .cse427 carry25))) (res .cse426 (assume .cse426) (res .cse427 (or- .cse426) .cse428))) :proves (- carry26 + carry25) :input)) (! (let ((.cse429 (or .cse430 carry24))) (res .cse429 (assume .cse429) (res .cse430 (or- .cse429) .cse431))) :proves (- carry25 + carry24) :input)) (! (let ((.cse432 (or .cse433 carry23))) (res .cse432 (assume .cse432) (res .cse433 (or- .cse432) .cse434))) :proves (- carry24 + carry23) :input)) (! (let ((.cse435 (or .cse436 carry22))) (res .cse435 (assume .cse435) (res .cse436 (or- .cse435) .cse437))) :proves (- carry23 + carry22) :input)) (! (let ((.cse438 (or .cse439 carry21))) (res .cse438 (assume .cse438) (res .cse439 (or- .cse438) .cse440))) :proves (- carry22 + carry21) :input)) (! (let ((.cse441 (or .cse442 carry20))) (res .cse441 (assume .cse441) (res .cse442 (or- .cse441) .cse443))) :proves (- carry21 + carry20) :input)) (! (let ((.cse444 (or .cse445 carry19))) (res .cse444 (assume .cse444) (res .cse445 (or- .cse444) .cse446))) :proves (- carry20 + carry19) :input)) (! (let ((.cse447 (or .cse448 carry18))) (res .cse447 (assume .cse447) (res .cse448 (or- .cse447) .cse449))) :proves (- carry19 + carry18) :input)) (! (let ((.cse450 (or .cse451 carry17))) (res .cse450 (assume .cse450) (res .cse451 (or- .cse450) .cse452))) :proves (- carry18 + carry17) :input)) (! (let ((.cse453 (or .cse454 carry16))) (res .cse453 (assume .cse453) (res .cse454 (or- .cse453) .cse455))) :proves (- carry17 + carry16) :input)) (! (let ((.cse456 (or .cse457 carry15))) (res .cse456 (assume .cse456) (res .cse457 (or- .cse456) .cse458))) :proves (- carry16 + carry15) :input)) .cse166)))) .cse462) .cse463)))) .cse464))) .cse465))) .cse466) .cse467) .cse468))))) .cse469) .cse470))))))) .cse471) .cse472))) .cse473)) .cse474)))))) .cse475)))) .cse476)) .cse477))) .cse478)) :proves (+ carry14) :rup) (res max28 (res max_fb_lt_sub23 .cse44 (res max_fb_lt_sub24 .cse43 (res fa31 .cse31 (res max_fb_lt_sub30 .cse37 (res max_fb_lt_sub21 .cse46 (res fb_eq_fna20 .cse73 (res fb_min_lt_sub23 (! (res min23 (! (assume min23) :proves (+ min23) :input) (! (let ((.cse480 (not min23))) (let ((.cse479 (or fb_min_lt_sub23 .cse480))) (res .cse479 (assume .cse479) (res .cse480 (or- .cse479) (not- .cse480))))) :proves (+ fb_min_lt_sub23 - min23) :input)) :proves (+ fb_min_lt_sub23) :rup) (res max16 (res max17 (res fb_eq_fna16 .cse74 (res fb_min_lt_sub27 (! (res min27 (! (assume min27) :proves (+ min27) :input) (! (let ((.cse482 (not min27))) (let ((.cse481 (or fb_min_lt_sub27 .cse482))) (res .cse481 (assume .cse481) (res .cse482 (or- .cse481) (not- .cse482))))) :proves (+ fb_min_lt_sub27 - min27) :input)) :proves (+ fb_min_lt_sub27) :rup) (res fb_min_lt_sub28 (! (res min28 (! (assume min28) :proves (+ min28) :input) (! (let ((.cse484 (not min28))) (let ((.cse483 (or fb_min_lt_sub28 .cse484))) (res .cse483 (assume .cse483) (res .cse484 (or- .cse483) (not- .cse484))))) :proves (+ fb_min_lt_sub28 - min28) :input)) :proves (+ fb_min_lt_sub28) :rup) (res fb_eq_fna19 .cse75 (res fb_min_lt_sub22 (! (res min22 (! (assume min22) :proves (+ min22) :input) (! (let ((.cse486 (not min22))) (let ((.cse485 (or fb_min_lt_sub22 .cse486))) (res .cse485 (assume .cse485) (res .cse486 (or- .cse485) (not- .cse486))))) :proves (+ fb_min_lt_sub22 - min22) :input)) :proves (+ fb_min_lt_sub22) :rup) (res fb_eq_fna22 .cse76 (res fb_eq_fna30 .cse0 (res fb_min_lt_sub17 (! (res min17 (! (assume min17) :proves (+ min17) :input) (! (let ((.cse488 (not min17))) (let ((.cse487 (or fb_min_lt_sub17 .cse488))) (res .cse487 (assume .cse487) (res .cse488 (or- .cse487) (not- .cse488))))) :proves (+ fb_min_lt_sub17 - min17) :input)) :proves (+ fb_min_lt_sub17) :rup) (res fb_min_lt_sub21 (! (res min21 (! (assume min21) :proves (+ min21) :input) (! (let ((.cse490 (not min21))) (let ((.cse489 (or fb_min_lt_sub21 .cse490))) (res .cse489 (assume .cse489) (res .cse490 (or- .cse489) (not- .cse490))))) :proves (+ fb_min_lt_sub21 - min21) :input)) :proves (+ fb_min_lt_sub21) :rup) (res fb_min_lt_sub18 (! (res min18 (! (assume min18) :proves (+ min18) :input) (! (let ((.cse492 (not min18))) (let ((.cse491 (or fb_min_lt_sub18 .cse492))) (res .cse491 (assume .cse491) (res .cse492 (or- .cse491) (not- .cse492))))) :proves (+ fb_min_lt_sub18 - min18) :input)) :proves (+ fb_min_lt_sub18) :rup) (res max30 (res max25 (res max22 (res fb_eq_fna31 .cse32 (res fb_min_lt_sub19 (! (res min19 (! (assume min19) :proves (+ min19) :input) (! (let ((.cse494 (not min19))) (let ((.cse493 (or fb_min_lt_sub19 .cse494))) (res .cse493 (assume .cse493) (res .cse494 (or- .cse493) (not- .cse494))))) :proves (+ fb_min_lt_sub19 - min19) :input)) :proves (+ fb_min_lt_sub19) :rup) (res max_fb_lt_right31 (res fb_min_lt_right31 (res max_fb_lt_sub29 .cse38 (res fb_eq_fna29 .cse77 (res max26 (res max_fb_lt_sub19 .cse48 (res max_fb_lt_sub18 .cse49 (res fb_eq_fna23 .cse78 (res max20 (res max23 (res fb_eq_fna18 .cse79 (res max_fb_lt_sub27 .cse40 (res fb_min_lt_sub20 (! (res min20 (! (assume min20) :proves (+ min20) :input) (! (let ((.cse496 (not min20))) (let ((.cse495 (or fb_min_lt_sub20 .cse496))) (res .cse495 (assume .cse495) (res .cse496 (or- .cse495) (not- .cse496))))) :proves (+ fb_min_lt_sub20 - min20) :input)) :proves (+ fb_min_lt_sub20) :rup) (res max_fb_lt_left16 (res max_fb_lt_right16 (res fb16 (res max_fb_lt15 (res fb_min_lt_left16 (! (let ((.cse498 (not min16))) (let ((.cse497 (or fb_min_lt_left16 fb16 .cse498))) (res .cse497 (assume .cse497) (res .cse498 (or- .cse497) (not- .cse498))))) :proves (+ fb_min_lt_left16 + fb16 - min16) :input) (res fna16 (res max_fb_lt_left15 (res fb_min_lt16 (! (let ((.cse500 (not fb_min_lt_left16))) (let ((.cse499 (or fb_min_lt16 .cse500))) (res .cse499 (assume .cse499) (res .cse500 (or- .cse499) (not- .cse500))))) :proves (+ fb_min_lt16 - fb_min_lt_left16) :input) (res nfa16 (res fb15 (res fb_min_lt_right17 (! (let ((.cse503 (not fb_min_lt_sub17)) (.cse502 (not fb_min_lt16))) (let ((.cse501 (or fb_min_lt_right17 .cse503 .cse502))) (res .cse501 (assume .cse501) (res .cse502 (res .cse503 (or- .cse501) (not- .cse503)) (not- .cse502))))) :proves (+ fb_min_lt_right17 - fb_min_lt16 - fb_min_lt_sub17) :input) (res fna15 (res fb_min_lt17 (! (let ((.cse505 (not fb_min_lt_right17))) (let ((.cse504 (or fb_min_lt17 .cse505))) (res .cse504 (assume .cse504) (res .cse505 (or- .cse504) (not- .cse505))))) :proves (+ fb_min_lt17 - fb_min_lt_right17) :input) (res nfa15 (res fb_min_lt_right18 (! (let ((.cse508 (not fb_min_lt_sub18)) (.cse507 (not fb_min_lt17))) (let ((.cse506 (or fb_min_lt_right18 .cse508 .cse507))) (res .cse506 (assume .cse506) (res .cse507 (res .cse508 (or- .cse506) (not- .cse508)) (not- .cse507))))) :proves (+ fb_min_lt_right18 - fb_min_lt17 - fb_min_lt_sub18) :input) (let ((.cse512 (not carry14))) (let-proof ((.cse513 (not- .cse512))) (res fa15 (res fb_min_lt18 (! (let ((.cse510 (not fb_min_lt_right18))) (let ((.cse509 (or fb_min_lt18 .cse510))) (res .cse509 (assume .cse509) (res .cse510 (or- .cse509) (not- .cse510))))) :proves (+ fb_min_lt18 - fb_min_lt_right18) :input) (res carry15 (! (let ((.cse511 (or carry15 fa15 .cse512))) (res .cse511 (assume .cse511) (res .cse512 (or- .cse511) .cse513))) :proves (+ carry15 + fa15 - carry14) :input) (res fb_min_lt_right19 (! (let ((.cse516 (not fb_min_lt_sub19)) (.cse515 (not fb_min_lt18))) (let ((.cse514 (or fb_min_lt_right19 .cse516 .cse515))) (res .cse514 (assume .cse514) (res .cse515 (res .cse516 (or- .cse514) (not- .cse516)) (not- .cse515))))) :proves (+ fb_min_lt_right19 - fb_min_lt18 - fb_min_lt_sub19) :input) (res fa16 (res fb_min_lt19 (! (let ((.cse518 (not fb_min_lt_right19))) (let ((.cse517 (or fb_min_lt19 .cse518))) (res .cse517 (assume .cse517) (res .cse518 (or- .cse517) (not- .cse518))))) :proves (+ fb_min_lt19 - fb_min_lt_right19) :input) (res carry16 (! (let ((.cse519 (or carry16 fa16 .cse460))) (res .cse519 (assume .cse519) (res .cse460 (or- .cse519) .cse461))) :proves (+ carry16 + fa16 - carry15) :input) (res fb_min_lt_right20 (! (let ((.cse522 (not fb_min_lt_sub20)) (.cse521 (not fb_min_lt19))) (let ((.cse520 (or fb_min_lt_right20 .cse522 .cse521))) (res .cse520 (assume .cse520) (res .cse521 (res .cse522 (or- .cse520) (not- .cse522)) (not- .cse521))))) :proves (+ fb_min_lt_right20 - fb_min_lt19 - fb_min_lt_sub20) :input) (res fb_min_lt20 (! (let ((.cse524 (not fb_min_lt_right20))) (let ((.cse523 (or fb_min_lt20 .cse524))) (res .cse523 (assume .cse523) (res .cse524 (or- .cse523) (not- .cse524))))) :proves (+ fb_min_lt20 - fb_min_lt_right20) :input) (res fb_min_lt_right21 (! (let ((.cse527 (not fb_min_lt_sub21)) (.cse526 (not fb_min_lt20))) (let ((.cse525 (or fb_min_lt_right21 .cse527 .cse526))) (res .cse525 (assume .cse525) (res .cse526 (res .cse527 (or- .cse525) (not- .cse527)) (not- .cse526))))) :proves (+ fb_min_lt_right21 - fb_min_lt20 - fb_min_lt_sub21) :input) (res fb_min_lt21 (! (let ((.cse529 (not fb_min_lt_right21))) (let ((.cse528 (or fb_min_lt21 .cse529))) (res .cse528 (assume .cse528) (res .cse529 (or- .cse528) (not- .cse529))))) :proves (+ fb_min_lt21 - fb_min_lt_right21) :input) (res fb_min_lt_right22 (! (let ((.cse532 (not fb_min_lt_sub22)) (.cse531 (not fb_min_lt21))) (let ((.cse530 (or fb_min_lt_right22 .cse532 .cse531))) (res .cse530 (assume .cse530) (res .cse531 (res .cse532 (or- .cse530) (not- .cse532)) (not- .cse531))))) :proves (+ fb_min_lt_right22 - fb_min_lt21 - fb_min_lt_sub22) :input) (res fb_min_lt22 (! (let ((.cse534 (not fb_min_lt_right22))) (let ((.cse533 (or fb_min_lt22 .cse534))) (res .cse533 (assume .cse533) (res .cse534 (or- .cse533) (not- .cse534))))) :proves (+ fb_min_lt22 - fb_min_lt_right22) :input) (res fb_min_lt_right23 (! (let ((.cse537 (not fb_min_lt_sub23)) (.cse536 (not fb_min_lt22))) (let ((.cse535 (or fb_min_lt_right23 .cse537 .cse536))) (res .cse535 (assume .cse535) (res .cse536 (res .cse537 (or- .cse535) (not- .cse537)) (not- .cse536))))) :proves (+ fb_min_lt_right23 - fb_min_lt22 - fb_min_lt_sub23) :input) (res fb_min_lt23 (! (let ((.cse539 (not fb_min_lt_right23))) (let ((.cse538 (or fb_min_lt23 .cse539))) (res .cse538 (assume .cse538) (res .cse539 (or- .cse538) (not- .cse539))))) :proves (+ fb_min_lt23 - fb_min_lt_right23) :input) (res fb_min_lt_right24 (! (let ((.cse542 (not fb_min_lt_sub24)) (.cse541 (not fb_min_lt23))) (let ((.cse540 (or fb_min_lt_right24 .cse542 .cse541))) (res .cse540 (assume .cse540) (res .cse541 (res .cse542 (or- .cse540) (not- .cse542)) (not- .cse541))))) :proves (+ fb_min_lt_right24 - fb_min_lt23 - fb_min_lt_sub24) :input) (res fb_min_lt24 (! (let ((.cse544 (not fb_min_lt_right24))) (let ((.cse543 (or fb_min_lt24 .cse544))) (res .cse543 (assume .cse543) (res .cse544 (or- .cse543) (not- .cse544))))) :proves (+ fb_min_lt24 - fb_min_lt_right24) :input) (res fb_min_lt_right25 (! (let ((.cse547 (not fb_min_lt_sub25)) (.cse546 (not fb_min_lt24))) (let ((.cse545 (or fb_min_lt_right25 .cse547 .cse546))) (res .cse545 (assume .cse545) (res .cse546 (res .cse547 (or- .cse545) (not- .cse547)) (not- .cse546))))) :proves (+ fb_min_lt_right25 - fb_min_lt24 - fb_min_lt_sub25) :input) (res fb_min_lt25 (! (let ((.cse549 (not fb_min_lt_right25))) (let ((.cse548 (or fb_min_lt25 .cse549))) (res .cse548 (assume .cse548) (res .cse549 (or- .cse548) (not- .cse549))))) :proves (+ fb_min_lt25 - fb_min_lt_right25) :input) (res fb_min_lt_right26 (! (let ((.cse552 (not fb_min_lt_sub26)) (.cse551 (not fb_min_lt25))) (let ((.cse550 (or fb_min_lt_right26 .cse552 .cse551))) (res .cse550 (assume .cse550) (res .cse551 (res .cse552 (or- .cse550) (not- .cse552)) (not- .cse551))))) :proves (+ fb_min_lt_right26 - fb_min_lt25 - fb_min_lt_sub26) :input) (res fb_min_lt26 (! (let ((.cse554 (not fb_min_lt_right26))) (let ((.cse553 (or fb_min_lt26 .cse554))) (res .cse553 (assume .cse553) (res .cse554 (or- .cse553) (not- .cse554))))) :proves (+ fb_min_lt26 - fb_min_lt_right26) :input) (res fb_min_lt_right27 (! (let ((.cse557 (not fb_min_lt_sub27)) (.cse556 (not fb_min_lt26))) (let ((.cse555 (or fb_min_lt_right27 .cse557 .cse556))) (res .cse555 (assume .cse555) (res .cse556 (res .cse557 (or- .cse555) (not- .cse557)) (not- .cse556))))) :proves (+ fb_min_lt_right27 - fb_min_lt26 - fb_min_lt_sub27) :input) (res fb_min_lt27 (! (let ((.cse559 (not fb_min_lt_right27))) (let ((.cse558 (or fb_min_lt27 .cse559))) (res .cse558 (assume .cse558) (res .cse559 (or- .cse558) (not- .cse559))))) :proves (+ fb_min_lt27 - fb_min_lt_right27) :input) (res fb_min_lt_right28 (! (let ((.cse562 (not fb_min_lt_sub28)) (.cse561 (not fb_min_lt27))) (let ((.cse560 (or fb_min_lt_right28 .cse562 .cse561))) (res .cse560 (assume .cse560) (res .cse561 (res .cse562 (or- .cse560) (not- .cse562)) (not- .cse561))))) :proves (+ fb_min_lt_right28 - fb_min_lt27 - fb_min_lt_sub28) :input) (res fb_min_lt28 (! (let ((.cse564 (not fb_min_lt_right28))) (let ((.cse563 (or fb_min_lt28 .cse564))) (res .cse563 (assume .cse563) (res .cse564 (or- .cse563) (not- .cse564))))) :proves (+ fb_min_lt28 - fb_min_lt_right28) :input) (res fb_min_lt_right29 (! (let ((.cse567 (not fb_min_lt_sub29)) (.cse566 (not fb_min_lt28))) (let ((.cse565 (or fb_min_lt_right29 .cse567 .cse566))) (res .cse565 (assume .cse565) (res .cse566 (res .cse567 (or- .cse565) (not- .cse567)) (not- .cse566))))) :proves (+ fb_min_lt_right29 - fb_min_lt28 - fb_min_lt_sub29) :input) (res fb_min_lt29 (! (let ((.cse569 (not fb_min_lt_right29))) (let ((.cse568 (or fb_min_lt29 .cse569))) (res .cse568 (assume .cse568) (res .cse569 (or- .cse568) (not- .cse569))))) :proves (+ fb_min_lt29 - fb_min_lt_right29) :input) (res fb_min_lt_right30 (! (let ((.cse572 (not fb_min_lt_sub30)) (.cse571 (not fb_min_lt29))) (let ((.cse570 (or fb_min_lt_right30 .cse572 .cse571))) (res .cse570 (assume .cse570) (res .cse571 (res .cse572 (or- .cse570) (not- .cse572)) (not- .cse571))))) :proves (+ fb_min_lt_right30 - fb_min_lt29 - fb_min_lt_sub30) :input) (res fb_min_lt30 (! (let ((.cse574 (not fb_min_lt_right30))) (let ((.cse573 (or fb_min_lt30 .cse574))) (res .cse573 (assume .cse573) (res .cse574 (or- .cse573) (not- .cse574))))) :proves (+ fb_min_lt30 - fb_min_lt_right30) :input) (res fb_min_lt_sub31 (res fb31 (res max_fb_lt_sub31 .cse36 (res fna31 (res max_fb_lt30 (res nfa31 (res max_fb_lt_right30 (res max_fb_lt_left30 (res carry30 (res max_fb_lt29 (res fb30 (res max_fb_lt_left29 (res max_fb_lt_right29 (res fna30 (res fb29 (res max_fb_lt28 (res nfa30 (res fna29 (res max_fb_lt_left28 (res max_fb_lt_right28 (res nfa29 (res fb28 (res max_fb_lt27 (res fna28 (res max_fb_lt_right27 (res max_fb_lt_left27 (res nfa28 (res max_fb_lt26 (res fb27 (res max_fb_lt_left26 (res max_fb_lt_right26 (res fna27 (res fb26 (res max_fb_lt25 (res nfa27 (res fna26 (res max_fb_lt_left25 (res max_fb_lt_right25 (res nfa26 (res fb25 (res max_fb_lt24 (res fna25 (res max_fb_lt_left24 (res max_fb_lt_right24 (res nfa25 (res fb24 (res max_fb_lt23 (res fna24 (res max_fb_lt_left23 (res max_fb_lt_right23 (res nfa24 (res fb23 (res max_fb_lt22 (res fna23 (res max_fb_lt_left22 (res max_fb_lt_right22 (res nfa23 (res fb22 (res max_fb_lt21 (res fna22 (res max_fb_lt_left21 (res max_fb_lt_right21 (res nfa22 (res fb21 (res max_fb_lt20 (res fna21 (res max_fb_lt_left20 (res max_fb_lt_right20 (res nfa21 (res fb20 (res max_fb_lt19 (res fna20 (res max_fb_lt_right19 (res max_fb_lt_left19 (res nfa20 (res max_fb_lt18 (res fb19 (res max_fb_lt_right18 (res max_fb_lt_left18 (res fna19 (res max_fb_lt17 (res fb18 (res nfa19 (res max_fb_lt_left17 (res fna18 (res fb17 (res nfa18 (res fna17 (res nfa17 (res fa17 (res carry17 (! (let ((.cse575 (or carry17 fa17 .cse457))) (res .cse575 (assume .cse575) (res .cse457 (or- .cse575) .cse458))) :proves (+ carry17 + fa17 - carry16) :input) (res fa18 (res carry18 (! (let ((.cse576 (or carry18 fa18 .cse454))) (res .cse576 (assume .cse576) (res .cse454 (or- .cse576) .cse455))) :proves (+ carry18 + fa18 - carry17) :input) (res fa19 (res carry19 (! (let ((.cse577 (or carry19 fa19 .cse451))) (res .cse577 (assume .cse577) (res .cse451 (or- .cse577) .cse452))) :proves (+ carry19 + fa19 - carry18) :input) (res fa20 (res carry20 (! (let ((.cse578 (or carry20 fa20 .cse448))) (res .cse578 (assume .cse578) (res .cse448 (or- .cse578) .cse449))) :proves (+ carry20 + fa20 - carry19) :input) (res fa21 (res carry21 (! (let ((.cse579 (or carry21 fa21 .cse445))) (res .cse579 (assume .cse579) (res .cse445 (or- .cse579) .cse446))) :proves (+ carry21 + fa21 - carry20) :input) (res fa22 (res carry22 (! (let ((.cse580 (or carry22 fa22 .cse442))) (res .cse580 (assume .cse580) (res .cse442 (or- .cse580) .cse443))) :proves (+ carry22 + fa22 - carry21) :input) (res fa23 (res carry23 (! (let ((.cse581 (or carry23 fa23 .cse439))) (res .cse581 (assume .cse581) (res .cse439 (or- .cse581) .cse440))) :proves (+ carry23 + fa23 - carry22) :input) (res fa24 (res carry24 (! (let ((.cse582 (or carry24 fa24 .cse436))) (res .cse582 (assume .cse582) (res .cse436 (or- .cse582) .cse437))) :proves (+ carry24 + fa24 - carry23) :input) (res fa25 (res carry25 (! (let ((.cse583 (or carry25 fa25 .cse433))) (res .cse583 (assume .cse583) (res .cse433 (or- .cse583) .cse434))) :proves (+ carry25 + fa25 - carry24) :input) (res fa26 (res carry26 (! (let ((.cse584 (or carry26 fa26 .cse430))) (res .cse584 (assume .cse584) (res .cse430 (or- .cse584) .cse431))) :proves (+ carry26 + fa26 - carry25) :input) (res fa27 (res carry27 (! (let ((.cse585 (or carry27 fa27 .cse427))) (res .cse585 (assume .cse585) (res .cse427 (or- .cse585) .cse428))) :proves (+ carry27 + fa27 - carry26) :input) (res fa28 (res carry28 (! (let ((.cse586 (or carry28 fa28 .cse424))) (res .cse586 (assume .cse586) (res .cse424 (or- .cse586) .cse425))) :proves (+ carry28 + fa28 - carry27) :input) (res fa29 (res carry29 (! (let ((.cse587 (or carry29 fa29 .cse421))) (res .cse587 (assume .cse587) (res .cse421 (or- .cse587) .cse422))) :proves (+ carry29 + fa29 - carry28) :input) (res fa30 (! (let ((.cse588 (or carry30 fa30 .cse22))) (res .cse588 (assume .cse588) (res .cse22 (or- .cse588) .cse25))) :proves (- carry29 + carry30 + fa30) :input) (! (let ((.cse589 (or nfa30 .cse27 .cse22))) (res .cse589 (assume .cse589) (res .cse22 (res .cse27 (or- .cse589) .cse30) .cse25))) :proves (- carry29 - fa30 + nfa30) :input))) (! (let ((.cse590 (or nfa29 .cse391 .cse421))) (res .cse590 (assume .cse590) (res .cse421 (res .cse391 (or- .cse590) .cse393) .cse422))) :proves (- fa29 - carry28 + nfa29) :input))) (! (let ((.cse591 (or nfa28 .cse381 .cse424))) (res .cse591 (assume .cse591) (res .cse424 (res .cse381 (or- .cse591) .cse383) .cse425))) :proves (- carry27 - fa28 + nfa28) :input))) (! (let ((.cse592 (or nfa27 .cse374 .cse427))) (res .cse592 (assume .cse592) (res .cse427 (res .cse374 (or- .cse592) .cse376) .cse428))) :proves (- fa27 - carry26 + nfa27) :input))) (! (let ((.cse593 (or nfa26 .cse361 .cse430))) (res .cse593 (assume .cse593) (res .cse430 (res .cse361 (or- .cse593) .cse363) .cse431))) :proves (- carry25 - fa26 + nfa26) :input))) (! (let ((.cse594 (or nfa25 .cse351 .cse433))) (res .cse594 (assume .cse594) (res .cse433 (res .cse351 (or- .cse594) .cse353) .cse434))) :proves (- carry24 - fa25 + nfa25) :input))) (! (let ((.cse595 (or nfa24 .cse341 .cse436))) (res .cse595 (assume .cse595) (res .cse436 (res .cse341 (or- .cse595) .cse343) .cse437))) :proves (- fa24 - carry23 + nfa24) :input))) (! (let ((.cse596 (or nfa23 .cse331 .cse439))) (res .cse596 (assume .cse596) (res .cse439 (res .cse331 (or- .cse596) .cse333) .cse440))) :proves (- fa23 - carry22 + nfa23) :input))) (! (let ((.cse597 (or nfa22 .cse321 .cse442))) (res .cse597 (assume .cse597) (res .cse442 (res .cse321 (or- .cse597) .cse323) .cse443))) :proves (- carry21 - fa22 + nfa22) :input))) (! (let ((.cse598 (or nfa21 .cse311 .cse445))) (res .cse598 (assume .cse598) (res .cse445 (res .cse311 (or- .cse598) .cse313) .cse446))) :proves (- fa21 - carry20 + nfa21) :input))) (! (let ((.cse599 (or nfa20 .cse301 .cse448))) (res .cse599 (assume .cse599) (res .cse448 (res .cse301 (or- .cse599) .cse303) .cse449))) :proves (- fa20 - carry19 + nfa20) :input))) (! (let ((.cse600 (or nfa19 .cse294 .cse451))) (res .cse600 (assume .cse600) (res .cse451 (res .cse294 (or- .cse600) .cse296) .cse452))) :proves (- fa19 - carry18 + nfa19) :input))) (! (let ((.cse601 (or nfa18 .cse284 .cse454))) (res .cse601 (assume .cse601) (res .cse454 (res .cse284 (or- .cse601) .cse286) .cse455))) :proves (- fa18 - carry17 + nfa18) :input))) (! (let ((.cse602 (or nfa17 .cse273 .cse457))) (res .cse602 (assume .cse602) (res .cse457 (res .cse273 (or- .cse602) .cse275) .cse458))) :proves (- fa17 + nfa17 - carry16) :input)) .cse280) .cse287) .cse292) .cse290) .cse299) .cse297) .cse306) .cse305) .cse304) .cse309) .cse308) .cse307) .cse316) .cse315) .cse314) .cse319) .cse318) .cse317) .cse326) .cse325) .cse324) .cse329) .cse328) .cse327) .cse336) .cse335) .cse334) .cse339) .cse338) .cse337) .cse346) .cse345) .cse344) .cse349) .cse348) .cse347) .cse356) .cse355) .cse354) .cse359) .cse358) .cse357) .cse366) .cse365) .cse364) .cse369) .cse368) .cse367) .cse372) .cse371) .cse370) .cse379) .cse378) .cse377) .cse386) .cse385) .cse384) .cse389) .cse388) .cse387) .cse396) .cse395) .cse394) .cse399) .cse398) .cse397) .cse402) .cse401) .cse400) .cse407) .cse406) .cse405) .cse410) .cse409) .cse408) .cse413) .cse412) .cse411) .cse415) .cse414) (! (let ((.cse603 (or nfa31 .cse604 .cse28))) (res .cse603 (assume .cse603) (res .cse28 (res .cse604 (or- .cse603) .cse605) .cse29))) :proves (+ nfa31 - carry30 - fa31) :input)) .cse417) .cse416) (! (let ((.cse606 (or fna31 .cse607))) (res .cse606 (assume .cse606) (res .cse607 (or- .cse606) .cse608))) :proves (+ fna31 - nfa31) :input)) .cse418) (! (let ((.cse609 (or fb31 .cse611 .cse610))) (res .cse609 (assume .cse609) (res .cse610 (res .cse611 (or- .cse609) .cse612) .cse613))) :proves (+ fb31 - fna31 - fb_eq_fna31) :input))) .cse8) .cse9))))))))))))))))))))))))) (! (let ((.cse614 (or nfa16 .cse159 .cse460))) (res .cse614 (assume .cse614) (res .cse460 (res .cse159 (or- .cse614) .cse161) .cse461))) :proves (- fa16 - carry15 + nfa16) :input))))) (! (let ((.cse615 (or nfa15 .cse163 .cse512))) (res .cse615 (assume .cse615) (res .cse512 (res .cse163 (or- .cse615) .cse165) .cse513))) :proves (- fa15 + nfa15 - carry14) :input))))) .cse270)) .cse271)) .cse277) .cse276)) .cse279) .cse278)) .cse282) .cse281) .cse289) .cse288)))) .cse462) .cse463)))) .cse464))) .cse10) .cse465))) .cse466) .cse467) .cse468))))))))))) .cse470) .cse469)))))))) .cse471)))) .cse472)))))))) .cse473))) .cse474)))))))))) .cse475)))))) .cse476))) .cse477))))) .cse478))) :proves (+ max_fb_lt16) :rup) .cse291))))) :proves (+ max_fb_lt_right17) :rup) .cse298)) :proves (+ max_fb_lt17) :rup) .cse304))))) :proves (+ max_fb_lt_right18) :rup) .cse307)) :proves (+ max_fb_lt18) :rup) .cse315))))) :proves (+ max_fb_lt_right19) :rup) .cse318)) :proves (+ max_fb_lt19) :rup) .cse326))))) :proves (+ max_fb_lt_right20) :rup) .cse329)) :proves (+ max_fb_lt20) :rup) .cse336))))) :proves (+ max_fb_lt_right21) :rup) .cse339)) :proves (+ max_fb_lt21) :rup) .cse346))))) :proves (+ max_fb_lt_right22) :rup) .cse349)) :proves (+ max_fb_lt22) :rup) .cse356))))) :proves (+ max_fb_lt_right23) :rup) .cse359)) :proves (+ max_fb_lt23) :rup) .cse366))))) :proves (+ max_fb_lt_right24) :rup) .cse369)) :proves (+ max_fb_lt24) :rup) .cse372))))) :proves (+ max_fb_lt_right25) :rup) .cse379)) :proves (+ max_fb_lt25) :rup) .cse385))))) :proves (+ max_fb_lt_right26) :rup) .cse388)) :proves (+ max_fb_lt26) :rup) .cse395))))) :proves (+ max_fb_lt_right27) :rup) .cse398)) :proves (+ max_fb_lt27) :rup) .cse402))))) :proves (+ max_fb_lt_right28) :rup) .cse407)) :proves (+ max_fb_lt28) :rup) .cse409))))) :proves (+ max_fb_lt_right29) :rup) .cse412)) :proves (+ max_fb_lt29) :rup) .cse414))))) :proves (+ max_fb_lt_right30) :rup) .cse416)) :proves (+ max_fb_lt30) :rup) .cse418)) .cse465)) :proves (- max_fb_lt_sub31) :rup))) :proves (+ fb31) :rup))) (res fna30 (! (res fb_eq_fna30 .cse0 (res fb30 (! (res min30 .cse1 (res fb_min_lt_left30 (! (let ((.cse2 (or fb_min_lt_left30 fb30 .cse3))) (res .cse2 (assume .cse2) (res .cse3 (or- .cse2) .cse4))) :proves (+ fb_min_lt_left30 + fb30 - min30) :input) (! (res fb_min_lt30 (! (let ((.cse6 (not fb_min_lt_left30))) (let ((.cse5 (or fb_min_lt30 .cse6))) (res .cse5 (assume .cse5) (res .cse6 (or- .cse5) (not- .cse6))))) :proves (+ fb_min_lt30 - fb_min_lt_left30) :input) (! (res fb_min_lt_right31 (res fb_min_lt_sub31 (! (res fb31 .cse7 .cse8) :proves (+ fb_min_lt_sub31) :rup) .cse9) .cse10) :proves (- fb_min_lt30) :rup)) :proves (- fb_min_lt_left30) :rup))) :proves (+ fb30) :rup) (! (let ((.cse11 (or .cse13 fna30 .cse12))) (res .cse11 (assume .cse11) (res .cse12 (res .cse13 (or- .cse11) .cse14) .cse15))) :proves (- fb30 + fna30 - fb_eq_fna30) :input))) :proves (+ fna30) :rup) (res nfa30 (! (let ((.cse16 (or .cse17 nfa30))) (res .cse16 (assume .cse16) (res .cse17 (or- .cse16) .cse18))) :proves (- fna30 + nfa30) :input) (! (let-proof ((.cse19 (! (res fa31 .cse31 (res nfa31 (! (res fna31 (! (res fb_eq_fna31 .cse32 (res fb31 .cse7 .cse33)) :proves (+ fna31) :rup) .cse34) :proves (+ nfa31) :rup) .cse35)) :proves (+ carry30) :rup))) (res carry29 (! (res carry30 .cse19 .cse20) :proves (+ carry29) :rup) (res fa30 (! (let ((.cse21 (or .cse23 fa30 .cse22))) (res .cse21 (assume .cse21) (res .cse22 (res .cse23 (or- .cse21) .cse24) .cse25))) :proves (- nfa30 + fa30 - carry29) :input) (! (res carry30 .cse19 (! (let ((.cse26 (or .cse28 .cse27))) (res .cse26 (assume .cse26) (res .cse27 (res .cse28 (or- .cse26) .cse29) .cse30))) :proves (- carry30 - fa30) :input)) :proves (- fa30) :rup)))) :proves (- nfa30) :rup)))))))))) :proves () :rup)
