unsat
(! (let ((.cse7 (P z y))) (let ((.cse0 (= .cse7 true))) (let-proof ((.cse4 true+)) (res .cse0 (let ((.cse2 (P z x))) (let ((.cse1 (= .cse2 true))) (res .cse1 (! (res .cse2 (assume .cse2) (let ((.cse3 (= .cse2 .cse1))) (res .cse3 (res true .cse4 (res .cse1 (res .cse2 (=+1 .cse3) (=+2 .cse1)) (res .cse2 (=-1 .cse1) (=+2 .cse3)))) (=-2 .cse3)))) :proves (+ .cse1) :input) (let ((.cse5 (= x y))) (res .cse5 (! (assume .cse5) :proves (+ .cse5) :input) (let ((.cse6 (= .cse7 .cse2))) (res .cse6 (! (res (= y x) (symm y x) (res (= z z) (refl z) (cong (P z y) (P z x)))) :proves (+ .cse6 - .cse5) :cong (.cse7 .cse2)) (! (trans .cse7 .cse2 true) :proves (+ .cse0 - .cse6 - .cse1) :trans (.cse7 .cse2 true))))))))) (! (let ((.cse9 (not .cse7))) (res .cse7 (let ((.cse8 (not .cse0))) (res .cse8 (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (let ((.cse11 (= .cse7 .cse0))) (res .cse11 (res true .cse4 (res .cse0 (res .cse7 (=+1 .cse11) (=+2 .cse0)) (res .cse7 (=-1 .cse0) (=+2 .cse11)))) (cong (not .cse7) (not .cse0)))) (=-2 .cse10)))) (not- .cse8))) (res .cse9 (assume .cse9) (not- .cse9)))) :proves (- .cse0) :input))))) :proves () :rup)
