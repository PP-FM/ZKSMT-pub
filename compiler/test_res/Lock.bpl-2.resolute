unsat
(! (let ((.cse36 (xor held@2 held@1)) (.cse166 (ControlFlow 0 4))) (let ((.cse161 (= .cse166 (- 3))) (.cse42 (not .cse36)) (.cse123 (= (ControlFlow 0 6) 4)) (.cse134 (ControlFlow 0 2)) (.cse9 (= x@2 x@0))) (let ((.cse12 (not .cse9)) (.cse129 (= .cse134 (- 1))) (.cse35 (and .cse42 .cse123)) (.cse34 (=> .cse161 held@2))) (let ((.cse33 (=> .cse35 .cse34)) (.cse0 (and .cse12 .cse129)) (.cse25 (not held@1)) (.cse117 (ControlFlow 0 7))) (let ((.cse102 (= .cse117 2)) (.cse1 (=> .cse0 .cse25)) (.cse104 (= .cse117 6)) (.cse4 (=> .cse9 .cse33))) (let ((.cse182 (ControlFlow 0 9)) (.cse21 (=> .cse104 .cse4)) (.cse24 (=> .cse102 .cse1)) (.cse38 (= x@2 x@1))) (let ((.cse22 (and .cse25 .cse38)) (.cse28 (and .cse21 .cse24)) (.cse40 (+ x@0 1)) (.cse82 (= .cse182 2)) (.cse87 (= .cse182 6))) (let ((.cse3 (=> .cse87 .cse4)) (.cse2 (=> .cse82 .cse1)) (.cse37 (= x@1 .cse40)) (.cse20 (=> .cse22 .cse28)) (.cse110 (= .cse117 (- 8)))) (let ((.cse17 (=> .cse110 true)) (.cse19 (=> .cse37 .cse20)) (.cse10 (and held@1 .cse9)) (.cse7 (and .cse3 .cse2)) (.cse144 (ControlFlow 0 10))) (let ((.cse94 (= .cse144 9)) (.cse6 (=> .cse10 .cse7)) (.cse118 (= .cse144 7)) (.cse97 (and .cse17 .cse19))) (let ((.cse16 (=> .cse118 .cse97)) (.cse13 (=> .cse94 .cse6))) (let ((.cse46 (not held@0)) (.cse75 (and .cse16 .cse13))) (let ((.cse15 (=> .cse46 .cse75))) (let-proof ((.cse26 (not+ .cse25)) (.cse27 (not- .cse25)) (.cse41 (xor+ (held@2 held@1) (held@2) (held@1))) (.cse43 (not- .cse42)) (.cse57 true+)) (let-proof ((.cse18 (! (res true .cse57 (=>+ 1 .cse17)) :proves (+ .cse17) :input)) (.cse11 (! (=>+ 0 .cse6) :proves (+ .cse6 + .cse10) :input)) (.cse14 (! (=>+ 1 .cse13) :proves (+ .cse13 - .cse6) :input)) (.cse23 (! (=>+ 0 .cse20) :proves (+ .cse20 + .cse22) :input)) (.cse29 (! (=>+ 1 .cse19) :proves (+ .cse19 - .cse20) :input)) (.cse30 (! (res .cse97 (and+ .cse97) (=>+ 1 .cse16)) :proves (+ .cse16 - .cse19 - .cse17) :input)) (.cse31 (! (res .cse75 (and+ .cse75) (=>+ 1 .cse15)) :proves (- .cse13 - .cse16 + .cse15) :input)) (.cse32 (! (let ((.cse155 (xor held@2 held@0))) (let ((.cse156 (not .cse155)) (.cse152 (= (ControlFlow 0 5) 4))) (let ((.cse139 (= .cse144 (- 11))) (.cse151 (and .cse156 .cse152))) (let ((.cse149 (=> .cse151 .cse34)) (.cse45 (=> .cse139 .cse46)) (.cse181 (ControlFlow 0 12))) (let ((.cse145 (= .cse181 10)) (.cse49 (and .cse45 .cse15)) (.cse159 (= .cse181 5)) (.cse51 (=> false .cse149))) (let ((.cse50 (=> .cse159 .cse51)) (.cse44 (=> .cse145 .cse49))) (let ((.cse53 (and .cse50 .cse44))) (let ((.cse47 (=> .cse46 .cse53))) (let-proof ((.cse52 false-)) (let-proof ((.cse48 (! (let ((.cse178 (ControlFlow 0 13))) (let ((.cse167 (= .cse178 12))) (let ((.cse54 (=> .cse167 .cse47))) (res .cse54 (! (=>+ 1 .cse54) :proves (+ .cse54 - .cse47) :input) (! (let ((.cse55 (=> true .cse54))) (res .cse55 (! (=>+ 1 .cse55) :proves (+ .cse55 - .cse54) :input) (! (let ((.cse173 (= .cse178 (- 14)))) (let ((.cse56 (=> .cse173 true))) (res .cse56 (! (res true .cse57 (=>+ 1 .cse56)) :proves (+ .cse56) :input) (! (let ((.cse58 (and .cse56 .cse55))) (res .cse58 (and+ .cse58) (let ((.cse179 (= (ControlFlow 0 15) 13))) (let ((.cse59 (=> .cse179 .cse58))) (res .cse59 (=>+ 1 .cse59) (let ((.cse180 (= (ControlFlow 0 0) 15))) (let ((.cse60 (=> .cse180 .cse59))) (res .cse60 (=>+ 1 .cse60) (let ((.cse162 (- 0 3))) (let ((.cse160 (= .cse166 .cse162)) (.cse125 (= held@2 held@1)) (.cse130 (- 0 1))) (let ((.cse128 (= .cse134 .cse130)) (.cse122 (and .cse125 .cse123)) (.cse126 (=> .cse160 held@2))) (let ((.cse119 (=> .cse122 .cse126)) (.cse127 (and .cse12 .cse128))) (let ((.cse83 (=> .cse127 .cse25)) (.cse88 (=> .cse9 .cse119))) (let ((.cse103 (=> .cse104 .cse88)) (.cse101 (=> .cse102 .cse83)) (.cse107 (= held@1 false))) (let ((.cse111 (- 0 8)) (.cse105 (and .cse107 .cse38)) (.cse100 (and .cse103 .cse101))) (let ((.cse84 (=> .cse87 .cse88)) (.cse79 (=> .cse82 .cse83)) (.cse93 (= held@1 true)) (.cse99 (=> .cse105 .cse100)) (.cse109 (= .cse117 .cse111))) (let ((.cse108 (=> .cse109 true)) (.cse98 (=> .cse37 .cse99)) (.cse89 (and .cse93 .cse9)) (.cse78 (and .cse84 .cse79))) (let ((.cse77 (=> .cse89 .cse78)) (.cse96 (and .cse108 .cse98))) (let ((.cse154 (= held@2 held@0)) (.cse140 (- 0 11)) (.cse95 (=> .cse118 .cse96)) (.cse76 (=> .cse94 .cse77))) (let ((.cse74 (and .cse95 .cse76)) (.cse138 (= .cse144 .cse140)) (.cse150 (and .cse154 .cse152))) (let ((.cse158 (not true)) (.cse148 (=> .cse150 .cse126)) (.cse137 (=> .cse138 .cse46)) (.cse73 (=> .cse46 .cse74))) (let ((.cse72 (and .cse137 .cse73)) (.cse147 (=> .cse158 .cse148))) (let ((.cse146 (=> .cse159 .cse147)) (.cse71 (=> .cse145 .cse72))) (let ((.cse70 (and .cse146 .cse71))) (let ((.cse174 (- 0 14)) (.cse69 (=> .cse46 .cse70))) (let ((.cse68 (=> .cse167 .cse69)) (.cse172 (= .cse178 .cse174)) (.cse170 (not false))) (let ((.cse171 (=> .cse172 .cse170)) (.cse67 (=> .cse170 .cse68))) (let ((.cse66 (and .cse171 .cse67))) (let ((.cse65 (=> .cse179 .cse66))) (let ((.cse61 (=> .cse180 .cse65))) (let ((.cse63 (not .cse61))) (res .cse61 (let ((.cse62 (not .cse60))) (res .cse62 (res .cse63 (not+ .cse63) (let ((.cse64 (= .cse63 .cse62))) (res .cse64 (res (= .cse61 .cse60) (res (= .cse65 .cse59) (res (= .cse66 .cse58) (let ((.cse168 (= .cse170 true))) (let ((.cse113 (= 0 0))) (let-proof ((.cse169 (res true .cse57 (res .cse170 (res false (not+ .cse170) .cse52) (=+2 .cse168)))) (.cse114 (refl 0))) (res (= .cse67 .cse55) (res (= .cse68 .cse54) (res (= .cse69 .cse47) (let ((.cse135 (= .cse46 .cse46))) (let-proof ((.cse136 (refl .cse46))) (res (= .cse70 .cse53) (let ((.cse120 (= .cse126 .cse34))) (let-proof ((.cse121 (res (= held@2 held@2) (refl held@2) (res (= .cse160 .cse161) (res (= .cse162 (- 3)) (let ((.cse163 (* (- 1) 3))) (res (= .cse163 (- 3)) (poly* .cse163 (- 3)) (res .cse113 .cse114 (let ((.cse164 (+ 0 .cse163)) (.cse165 (+ 0 (- 3)))) (res (= .cse164 .cse165) (cong (+ 0 .cse163) (+ 0 (- 3))) (res (= .cse162 .cse164) (-def 0 3) (res (= .cse165 (- 3)) (poly+ .cse165 (- 3)) (trans .cse162 .cse164 .cse165 (- 3))))))))) (res (= .cse166 .cse166) (refl .cse166) (cong (= .cse166 .cse162) (= .cse166 (- 3))))) (cong (=> .cse160 held@2) (=> .cse161 held@2)))))) (res (= .cse71 .cse44) (res (= .cse72 .cse49) (res (= .cse73 .cse15) (res (= .cse74 .cse75) (let ((.cse90 (= .cse9 .cse9))) (let-proof ((.cse91 (refl .cse9))) (let ((.cse80 (= .cse83 .cse1)) (.cse85 (= .cse88 .cse4))) (let-proof ((.cse81 (res (= .cse25 .cse25) (refl .cse25) (res (= .cse127 .cse0) (res (= .cse128 .cse129) (res (= .cse130 (- 1)) (let ((.cse131 (* (- 1) 1))) (res (= .cse131 (- 1)) (poly* .cse131 (- 1)) (res .cse113 .cse114 (let ((.cse132 (+ 0 .cse131)) (.cse133 (+ 0 (- 1)))) (res (= .cse132 .cse133) (cong (+ 0 .cse131) (+ 0 (- 1))) (res (= .cse130 .cse132) (-def 0 1) (res (= .cse133 (- 1)) (poly+ .cse133 (- 1)) (trans .cse130 .cse132 .cse133 (- 1))))))))) (res (= .cse134 .cse134) (refl .cse134) (cong (= .cse134 .cse130) (= .cse134 (- 1))))) (res (= .cse12 .cse12) (refl .cse12) (cong (and .cse12 .cse128) (and .cse12 .cse129)))) (cong (=> .cse127 .cse25) (=> .cse0 .cse25))))) (.cse86 (res (= .cse119 .cse33) (res .cse120 .cse121 (res (= .cse122 .cse35) (res (= .cse123 .cse123) (refl .cse123) (let ((.cse124 (= .cse125 .cse42))) (res .cse124 (res .cse125 (res .cse36 (res held@2 (res held@1 (=+1 .cse125) .cse41) (res held@1 (xor+ (held@2 held@1) (held@1) (held@2)) (=+2 .cse125))) (res .cse42 (=+1 .cse124) .cse43)) (res .cse36 (res .cse42 (not+ .cse42) (=+2 .cse124)) (res held@2 (res held@1 (xor+ (held@2) (held@1) (held@2 held@1)) (=-1 .cse125)) (res held@1 (=-2 .cse125) (xor- (held@2) (held@1) (held@2 held@1)))))) (cong (and .cse125 .cse123) (and .cse42 .cse123))))) (cong (=> .cse122 .cse126) (=> .cse35 .cse34)))) (res .cse90 .cse91 (cong (=> .cse9 .cse119) (=> .cse9 .cse33)))))) (res (= .cse76 .cse13) (res (= .cse77 .cse6) (res (= .cse78 .cse7) (res (= .cse79 .cse2) (res .cse80 .cse81 (res (= .cse82 .cse82) (refl .cse82) (cong (=> .cse82 .cse83) (=> .cse82 .cse1)))) (res (= .cse84 .cse3) (res .cse85 .cse86 (res (= .cse87 .cse87) (refl .cse87) (cong (=> .cse87 .cse88) (=> .cse87 .cse4)))) (cong (and .cse84 .cse79) (and .cse3 .cse2)))) (res (= .cse89 .cse10) (res .cse90 .cse91 (let ((.cse92 (= .cse93 held@1))) (res .cse92 (res true .cse57 (res held@1 (res .cse93 (=+1 .cse92) (=-1 .cse93)) (res .cse93 (=+2 .cse93) (=+2 .cse92)))) (cong (and .cse93 .cse9) (and held@1 .cse9))))) (cong (=> .cse89 .cse78) (=> .cse10 .cse7)))) (res (= .cse94 .cse94) (refl .cse94) (cong (=> .cse94 .cse77) (=> .cse94 .cse6)))) (res (= .cse95 .cse16) (res (= .cse96 .cse97) (res (= .cse98 .cse19) (res (= .cse99 .cse20) (res (= .cse100 .cse28) (res (= .cse101 .cse24) (res .cse80 .cse81 (res (= .cse102 .cse102) (refl .cse102) (cong (=> .cse102 .cse83) (=> .cse102 .cse1)))) (res (= .cse103 .cse21) (res .cse85 .cse86 (res (= .cse104 .cse104) (refl .cse104) (cong (=> .cse104 .cse88) (=> .cse104 .cse4)))) (cong (and .cse103 .cse101) (and .cse21 .cse24)))) (res (= .cse105 .cse22) (res (= .cse38 .cse38) (refl .cse38) (let ((.cse106 (= .cse107 .cse25))) (res .cse106 (res false (res .cse25 (res .cse107 (=+1 .cse106) (res held@1 .cse26 (=-2 .cse107))) (res .cse107 (res held@1 (=+1 .cse107) .cse27) (=+2 .cse106))) .cse52) (cong (and .cse107 .cse38) (and .cse25 .cse38))))) (cong (=> .cse105 .cse100) (=> .cse22 .cse28)))) (res (= .cse37 .cse37) (refl .cse37) (cong (=> .cse37 .cse99) (=> .cse37 .cse20)))) (res (= .cse108 .cse17) (res (= true true) (refl true) (res (= .cse109 .cse110) (res (= .cse111 (- 8)) (let ((.cse112 (* (- 1) 8))) (res (= .cse112 (- 8)) (poly* .cse112 (- 8)) (res .cse113 .cse114 (let ((.cse115 (+ 0 .cse112)) (.cse116 (+ 0 (- 8)))) (res (= .cse115 .cse116) (cong (+ 0 .cse112) (+ 0 (- 8))) (res (= .cse111 .cse115) (-def 0 8) (res (= .cse116 (- 8)) (poly+ .cse116 (- 8)) (trans .cse111 .cse115 .cse116 (- 8))))))))) (res (= .cse117 .cse117) (refl .cse117) (cong (= .cse117 .cse111) (= .cse117 (- 8))))) (cong (=> .cse109 true) (=> .cse110 true)))) (cong (and .cse108 .cse98) (and .cse17 .cse19)))) (res (= .cse118 .cse118) (refl .cse118) (cong (=> .cse118 .cse96) (=> .cse118 .cse97)))) (cong (and .cse95 .cse76) (and .cse16 .cse13)))))))) (res .cse135 .cse136 (cong (=> .cse46 .cse74) (=> .cse46 .cse75)))) (res (= .cse137 .cse45) (res .cse135 .cse136 (res (= .cse138 .cse139) (res (= .cse140 (- 11)) (let ((.cse141 (* (- 1) 11))) (res (= .cse141 (- 11)) (poly* .cse141 (- 11)) (res .cse113 .cse114 (let ((.cse142 (+ 0 .cse141)) (.cse143 (+ 0 (- 11)))) (res (= .cse142 .cse143) (cong (+ 0 .cse141) (+ 0 (- 11))) (res (= .cse140 .cse142) (-def 0 11) (res (= .cse143 (- 11)) (poly+ .cse143 (- 11)) (trans .cse140 .cse142 .cse143 (- 11))))))))) (res (= .cse144 .cse144) (refl .cse144) (cong (= .cse144 .cse140) (= .cse144 (- 11))))) (cong (=> .cse138 .cse46) (=> .cse139 .cse46)))) (cong (and .cse137 .cse73) (and .cse45 .cse15)))) (res (= .cse145 .cse145) (refl .cse145) (cong (=> .cse145 .cse72) (=> .cse145 .cse49)))) (res (= .cse146 .cse50) (res (= .cse147 .cse51) (res (= .cse148 .cse149) (res .cse120 .cse121 (res (= .cse150 .cse151) (res (= .cse152 .cse152) (refl .cse152) (let ((.cse153 (= .cse154 .cse156))) (res .cse153 (res .cse154 (res .cse155 (res held@2 (res held@0 (=+1 .cse154) (xor+ (held@2 held@0) (held@2) (held@0))) (res held@0 (xor+ (held@2 held@0) (held@0) (held@2)) (=+2 .cse154))) (res .cse156 (=+1 .cse153) (not- .cse156))) (res .cse155 (res .cse156 (not+ .cse156) (=+2 .cse153)) (res held@2 (res held@0 (xor+ (held@2) (held@0) (held@2 held@0)) (=-1 .cse154)) (res held@0 (=-2 .cse154) (xor- (held@2) (held@0) (held@2 held@0)))))) (cong (and .cse154 .cse152) (and .cse156 .cse152))))) (cong (=> .cse150 .cse126) (=> .cse151 .cse34)))) (let ((.cse157 (= .cse158 false))) (res .cse157 (res false (res .cse158 (=+1 .cse157) (res true .cse57 (not- .cse158))) .cse52) (cong (=> .cse158 .cse148) (=> false .cse149))))) (res (= .cse159 .cse159) (refl .cse159) (cong (=> .cse159 .cse147) (=> .cse159 .cse51)))) (cong (and .cse146 .cse71) (and .cse50 .cse44)))))) (res .cse135 .cse136 (cong (=> .cse46 .cse70) (=> .cse46 .cse53)))))) (res (= .cse167 .cse167) (refl .cse167) (cong (=> .cse167 .cse69) (=> .cse167 .cse47)))) (res .cse168 .cse169 (cong (=> .cse170 .cse68) (=> true .cse54)))) (res (= .cse171 .cse56) (res .cse168 .cse169 (res (= .cse172 .cse173) (res (= .cse174 (- 14)) (let ((.cse175 (* (- 1) 14))) (res (= .cse175 (- 14)) (poly* .cse175 (- 14)) (res .cse113 .cse114 (let ((.cse176 (+ 0 .cse175)) (.cse177 (+ 0 (- 14)))) (res (= .cse176 .cse177) (cong (+ 0 .cse175) (+ 0 (- 14))) (res (= .cse174 .cse176) (-def 0 14) (res (= .cse177 (- 14)) (poly+ .cse177 (- 14)) (trans .cse174 .cse176 .cse177 (- 14))))))))) (res (= .cse178 .cse178) (refl .cse178) (cong (= .cse178 .cse174) (= .cse178 (- 14))))) (cong (=> .cse172 .cse170) (=> .cse173 true)))) (cong (and .cse171 .cse67) (and .cse56 .cse55))))))) (res (= .cse179 .cse179) (refl .cse179) (cong (=> .cse179 .cse66) (=> .cse179 .cse58)))) (res (= .cse180 .cse180) (refl .cse180) (cong (=> .cse180 .cse65) (=> .cse180 .cse59)))) (cong (not .cse61) (not .cse60))) (=-2 .cse64)))) (not- .cse62))) (res .cse63 (assume .cse63) (not- .cse63)))))))))))))))))))))))))))))))))) :proves (- .cse56 - .cse55) :input)))) :proves (- .cse55) :rup))) :proves (- .cse54) :rup))))) :proves (- .cse47) :rup))) (res .cse44 (res .cse45 (! (res held@0 (! (res .cse46 (not+ .cse46) (=>+ 1 .cse45)) :proves (+ .cse45 + held@0) :input) (! (res .cse47 (! (res .cse46 (=>+ 0 .cse47) (not- .cse46)) :proves (+ .cse47 - held@0) :input) .cse48) :proves (- held@0) :rup)) :proves (+ .cse45) :rup) (! (res .cse49 (and+ .cse49) (=>+ 1 .cse44)) :proves (- .cse15 - .cse45 + .cse44) :input)) (! (res .cse50 (! (res .cse51 (! (res false (=>+ 0 .cse51) .cse52) :proves (+ .cse51) :input) (! (=>+ 1 .cse50) :proves (+ .cse50 - .cse51) :input)) :proves (+ .cse50) :rup) (res .cse47 (! (res .cse53 (and+ .cse53) (=>+ 1 .cse47)) :proves (+ .cse47 - .cse44 - .cse50) :input) .cse48)) :proves (- .cse44) :rup)))))))))))) :proves (- .cse15) :rup))) (let-proof ((.cse5 (! (res .cse15 (res .cse17 .cse18 (res .cse33 (res .cse9 (! (=>+ 0 .cse4) :proves (+ .cse4 + .cse9) :input) (res .cse34 (res .cse35 (! (=>+ 0 .cse33) :proves (+ .cse33 + .cse35) :input) (res held@2 (res .cse36 (res held@1 (res .cse10 (res .cse6 .cse11 (res .cse13 .cse14 (res .cse16 (res .cse19 (res .cse20 (res .cse37 (! (=>+ 0 .cse19) :proves (+ .cse19 + .cse37) :input) (res .cse22 .cse23 (res .cse38 (! (and- 1 .cse22) :proves (- .cse22 + .cse38) :input) (let ((.cse39 (= .cse40 x@0))) (res .cse39 (! (res (= .cse40 x@1) (symm .cse40 x@1) (res (= x@1 x@2) (symm x@1 x@2) (trans .cse40 x@1 x@2 x@0))) :proves (+ .cse39 - .cse37 - .cse38 - .cse9) :trans (.cse40 x@1 x@2 x@0)) (! (farkas 1 .cse39) :proves (- .cse39) :EQ)))))) .cse29) .cse30) .cse31))) (! (and- 0 .cse10) :proves (- .cse10 + held@1) :input)) (! .cse41 :proves (+ .cse36 - held@1 + held@2) :input)) (! (res .cse42 (and- 0 .cse35) .cse43) :proves (- .cse35 - .cse36) :input)) (! (=>+ 1 .cse34) :proves (+ .cse34 - held@2) :input))) (! (=>+ 1 .cse33) :proves (+ .cse33 - .cse34) :input))) (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse33) :input))) .cse32) :proves (+ .cse4) :rup))) (let-proof ((.cse8 (! (res .cse13 .cse14 (! (res .cse15 (res .cse16 (! (res .cse17 .cse18 (res .cse19 (! (res .cse20 (! (res .cse21 (! (res .cse4 .cse5 (! (=>+ 1 .cse21) :proves (+ .cse21 - .cse4) :input)) :proves (+ .cse21) :rup) (res .cse22 .cse23 (res .cse24 (res held@1 (res .cse1 (! (res .cse25 .cse26 (=>+ 1 .cse1)) :proves (+ .cse1 + held@1) :input) (! (=>+ 1 .cse24) :proves (+ .cse24 - .cse1) :input)) (! (res .cse25 (and- 0 .cse22) .cse27) :proves (- .cse22 - held@1) :input)) (! (res .cse28 (and+ .cse28) (=>+ 1 .cse20)) :proves (+ .cse20 - .cse24 - .cse21) :input)))) :proves (+ .cse20) :rup) .cse29) :proves (+ .cse19) :rup) .cse30)) :proves (+ .cse16) :rup) .cse31) .cse32) :proves (- .cse13) :rup)) :proves (- .cse6) :rup))) (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) (! (res .cse2 (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse1) :input) (! (res .cse3 (! (res .cse4 .cse5 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse4) :input)) :proves (+ .cse3) :rup) (res .cse6 (! (res .cse7 (and+ .cse7) (=>+ 1 .cse6)) :proves (+ .cse6 - .cse2 - .cse3) :input) .cse8)) :proves (- .cse2) :rup)) :proves (- .cse1) :rup)) :proves (+ .cse0) :rup) (res .cse9 (! (res .cse10 (! (res .cse6 .cse11 .cse8) :proves (+ .cse10) :rup) (! (and- 1 .cse10) :proves (- .cse10 + .cse9) :input)) :proves (+ .cse9) :rup) (! (res .cse12 (and- 0 .cse0) (not- .cse12)) :proves (- .cse0 - .cse9) :input)))))))))))))))))))) :proves () :rup)
