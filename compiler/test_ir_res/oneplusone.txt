vars: ONE
premises:
  a0: (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)))
steps:
  derived clause number: 0
  rule: or_single
  expr args: []
  clause args: [premise a0]
  backptr: nil
  conclusion: (or (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))))

  derived clause number: 1
  rule: false-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not false))

  derived clause number: 2
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)))

  derived clause number: 3
  rule: true+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or true)

  derived clause number: 4
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not true) false) (not true) false)

  derived clause number: 5
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (not true)) (not true))

  derived clause number: 6
  rule: resolution
  expr args: [(not true), (or (not (not true))), (or )]
  clause args: [derived 3, derived 5]
  backptr: nil
  conclusion: (or (not (not true)))

  derived clause number: 7
  rule: resolution
  expr args: [(not (not true)), (or ), (or (= (not true) false) false)]
  clause args: [derived 4, derived 6]
  backptr: nil
  conclusion: (or (= (not true) false) false)

  derived clause number: 8
  rule: resolution
  expr args: [(not false), (or ), (or (= (not true) false))]
  clause args: [derived 7, derived 1]
  backptr: nil
  conclusion: (or (= (not true) false))

  derived clause number: 9
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 2 ONE) (* 2 ONE)))

  derived clause number: 10
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (* 2 ONE) (* 2 ONE)) true) (not (= (* 2 ONE) (* 2 ONE))) (not true))

  derived clause number: 11
  rule: resolution
  expr args: [(not (= (* 2 ONE) (* 2 ONE))), (or (= (= (* 2 ONE) (* 2 ONE)) true) (not true)), (or )]
  clause args: [derived 9, derived 10]
  backptr: nil
  conclusion: (or (= (= (* 2 ONE) (* 2 ONE)) true) (not true))

  derived clause number: 12
  rule: resolution
  expr args: [(not true), (or (= (= (* 2 ONE) (* 2 ONE)) true)), (or )]
  clause args: [derived 3, derived 11]
  backptr: nil
  conclusion: (or (= (= (* 2 ONE) (* 2 ONE)) true))

  derived clause number: 13
  rule: consolidate
  expr args: [(+ ), (+ (* 1 ONE) (* 1 ONE)), (+ (* 2 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 ONE) (* 1 ONE)) (+ (* 2 ONE)))

  derived clause number: 14
  rule: or_single
  expr args: []
  clause args: [derived 13]
  backptr: nil
  conclusion: (or (= (+ (* 1 ONE) (* 1 ONE)) (+ (* 2 ONE))))

  derived clause number: 15
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 2 ONE)) (* 2 ONE))

  derived clause number: 16
  rule: or_single
  expr args: []
  clause args: [derived 15]
  backptr: nil
  conclusion: (or (= (+ (* 2 ONE)) (* 2 ONE)))

  derived clause number: 17
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (not (= (+ (* 1 ONE) (* 1 ONE)) (+ (* 2 ONE)))) (not (= (+ (* 2 ONE)) (* 2 ONE))))

  derived clause number: 18
  rule: resolution
  expr args: [(not (= (+ (* 1 ONE) (* 1 ONE)) (+ (* 2 ONE)))), (or (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (not (= (+ (* 2 ONE)) (* 2 ONE)))), (or )]
  clause args: [derived 14, derived 17]
  backptr: nil
  conclusion: (or (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (not (= (+ (* 2 ONE)) (* 2 ONE))))

  derived clause number: 19
  rule: resolution
  expr args: [(not (= (+ (* 2 ONE)) (* 2 ONE))), (or (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))), (or )]
  clause args: [derived 16, derived 18]
  backptr: nil
  conclusion: (or (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)))

  derived clause number: 20
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (= (* 2 ONE) (* 2 ONE))) (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) (not (= (* 2 ONE) (* 2 ONE))))

  derived clause number: 21
  rule: resolution
  expr args: [(not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))), (or (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (= (* 2 ONE) (* 2 ONE))) (not (= (* 2 ONE) (* 2 ONE)))), (or )]
  clause args: [derived 19, derived 20]
  backptr: nil
  conclusion: (or (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (= (* 2 ONE) (* 2 ONE))) (not (= (* 2 ONE) (* 2 ONE))))

  derived clause number: 22
  rule: resolution
  expr args: [(not (= (* 2 ONE) (* 2 ONE))), (or (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (= (* 2 ONE) (* 2 ONE)))), (or )]
  clause args: [derived 9, derived 21]
  backptr: nil
  conclusion: (or (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (= (* 2 ONE) (* 2 ONE))))

  derived clause number: 23
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) true) (not (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (= (* 2 ONE) (* 2 ONE)))) (not (= (= (* 2 ONE) (* 2 ONE)) true)))

  derived clause number: 24
  rule: resolution
  expr args: [(not (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) (= (* 2 ONE) (* 2 ONE)))), (or (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) true) (not (= (= (* 2 ONE) (* 2 ONE)) true))), (or )]
  clause args: [derived 22, derived 23]
  backptr: nil
  conclusion: (or (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) true) (not (= (= (* 2 ONE) (* 2 ONE)) true)))

  derived clause number: 25
  rule: resolution
  expr args: [(not (= (= (* 2 ONE) (* 2 ONE)) true)), (or (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) true)), (or )]
  clause args: [derived 12, derived 24]
  backptr: nil
  conclusion: (or (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) true))

  derived clause number: 26
  rule: not_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) (not true)) (not (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) true)))

  derived clause number: 27
  rule: resolution
  expr args: [(not (= (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) true)), (or (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) (not true))), (or )]
  clause args: [derived 25, derived 26]
  backptr: nil
  conclusion: (or (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) (not true)))

  derived clause number: 28
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) false) (not (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) (not true))) (not (= (not true) false)))

  derived clause number: 29
  rule: resolution
  expr args: [(not (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) (not true))), (or (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) false) (not (= (not true) false))), (or )]
  clause args: [derived 27, derived 28]
  backptr: nil
  conclusion: (or (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) false) (not (= (not true) false)))

  derived clause number: 30
  rule: resolution
  expr args: [(not (= (not true) false)), (or (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) false)), (or )]
  clause args: [derived 8, derived 29]
  backptr: nil
  conclusion: (or (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) false))

  derived clause number: 31
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) false)) (not (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)))) false)

  derived clause number: 32
  rule: resolution
  expr args: [(not (= (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))) false)), (or (not (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)))) false), (or )]
  clause args: [derived 30, derived 31]
  backptr: nil
  conclusion: (or (not (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)))) false)

  derived clause number: 33
  rule: resolution
  expr args: [(not (not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)))), (or false), (or (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)))]
  clause args: [derived 2, derived 32]
  backptr: nil
  conclusion: (or (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE)) false)

  derived clause number: 34
  rule: resolution
  expr args: [(not (= (+ (* 1 ONE) (* 1 ONE)) (* 2 ONE))), (or ), (or false)]
  clause args: [derived 33, derived 0]
  backptr: nil
  conclusion: (or false)

  derived clause number: 35
  rule: resolution
  expr args: [(not false), (or ), (or )]
  clause args: [derived 34, derived 1]
  backptr: nil
  conclusion: (or )

  derived clause number: 36
  rule: or_nil
  expr args: []
  clause args: [derived 35]
  backptr: nil
  conclusion: false

