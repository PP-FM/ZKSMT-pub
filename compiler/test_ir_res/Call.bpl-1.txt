vars: ControlFlow ONE call0formal@barresult@0 call0formal@barresult@0@@0 null
premises:
  a0: (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))))
  a1: (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))
steps:
  derived clause number: 0
  rule: or_single
  expr args: []
  clause args: [premise a0]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))))))

  derived clause number: 1
  rule: or_single
  expr args: []
  clause args: [premise a1]
  backptr: nil
  conclusion: (or (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 2
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))

  derived clause number: 3
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 4
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))), (or (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))]
  clause args: [derived 2, derived 3]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))

  derived clause number: 5
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (not (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))

  derived clause number: 6
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))

  derived clause number: 7
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (not (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))), (or (not (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))]
  clause args: [derived 5, derived 6]
  backptr: nil
  conclusion: (or (not (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (not (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))

  derived clause number: 8
  rule: factoring
  expr args: []
  clause args: [derived 4]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))

  derived clause number: 9
  rule: factoring
  expr args: []
  clause args: [derived 7]
  backptr: nil
  conclusion: (or (not (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))

  derived clause number: 10
  rule: resolution
  expr args: [(not (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))), (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))]
  clause args: [derived 8, derived 9]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))

  derived clause number: 11
  rule: =>+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)) (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 12
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))) (not (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))

  derived clause number: 13
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))) (not (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))

  derived clause number: 14
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))))

  derived clause number: 15
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= call0formal@barresult@0@@0 null) (= call0formal@barresult@0@@0 null)))

  derived clause number: 16
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 ONE)) (* 1 ONE))

  derived clause number: 17
  rule: or_single
  expr args: []
  clause args: [derived 16]
  backptr: nil
  conclusion: (or (= (+ (* 1 ONE)) (* 1 ONE)))

  derived clause number: 18
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 ONE) (+ (* 1 ONE))) (not (= (+ (* 1 ONE)) (* 1 ONE))))

  derived clause number: 19
  rule: resolution
  expr args: [(not (= (+ (* 1 ONE)) (* 1 ONE))), (or (= (* 1 ONE) (+ (* 1 ONE)))), (or )]
  clause args: [derived 17, derived 18]
  backptr: nil
  conclusion: (or (= (* 1 ONE) (+ (* 1 ONE))))

  derived clause number: 20
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE)))) (not (= (* 1 ONE) (+ (* 1 ONE)))))

  derived clause number: 21
  rule: resolution
  expr args: [(not (= (* 1 ONE) (+ (* 1 ONE)))), (or (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE))))), (or )]
  clause args: [derived 19, derived 20]
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE)))))

  derived clause number: 22
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE)))

  derived clause number: 23
  rule: or_single
  expr args: []
  clause args: [derived 22]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE))))

  derived clause number: 24
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE))) (not (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE))))) (not (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE)))))

  derived clause number: 25
  rule: resolution
  expr args: [(not (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE))))), (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE))) (not (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE))))), (or )]
  clause args: [derived 21, derived 24]
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE))) (not (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE)))))

  derived clause number: 26
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE)))), (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))), (or )]
  clause args: [derived 23, derived 25]
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE))))

  derived clause number: 27
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* -1 ONE)) (* -1 (* 1 ONE))) (not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 28
  rule: resolution
  expr args: [(not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))), (or (= (+ (* -1 ONE)) (* -1 (* 1 ONE)))), (or )]
  clause args: [derived 26, derived 27]
  backptr: nil
  conclusion: (or (= (+ (* -1 ONE)) (* -1 (* 1 ONE))))

  derived clause number: 29
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE)) (* 0 ONE))

  derived clause number: 30
  rule: or_single
  expr args: []
  clause args: [derived 29]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE)) (* 0 ONE)))

  derived clause number: 31
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 0 ONE) (+ (* 0 ONE))) (not (= (+ (* 0 ONE)) (* 0 ONE))))

  derived clause number: 32
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE)) (* 0 ONE))), (or (= (* 0 ONE) (+ (* 0 ONE)))), (or )]
  clause args: [derived 30, derived 31]
  backptr: nil
  conclusion: (or (= (* 0 ONE) (+ (* 0 ONE))))

  derived clause number: 33
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))) (not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 34
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE)))) (not (= (* -1 (* 1 ONE)) (+ (* -1 ONE))))), (or )]
  clause args: [derived 32, derived 33]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE)))) (not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 35
  rule: resolution
  expr args: [(not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE))))), (or )]
  clause args: [derived 26, derived 34]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE)))))

  derived clause number: 36
  rule: flatten
  expr args: [(+ (+ (* -1 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (+ (* -1 ONE))))

  derived clause number: 37
  rule: or_single
  expr args: []
  clause args: [derived 36]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (+ (* -1 ONE)))))

  derived clause number: 38
  rule: flatten
  expr args: [(+ (* 0 ONE)), (+ (+ (* -1 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))

  derived clause number: 39
  rule: or_single
  expr args: []
  clause args: [derived 38]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))))

  derived clause number: 40
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (+ (* -1 ONE))))) (not (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))))

  derived clause number: 41
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (+ (* -1 ONE))))), (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))))), (or )]
  clause args: [derived 37, derived 40]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))))

  derived clause number: 42
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or )]
  clause args: [derived 39, derived 41]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))))

  derived clause number: 43
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE))))) (not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))))

  derived clause number: 44
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE))))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))))), (or )]
  clause args: [derived 35, derived 43]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))))

  derived clause number: 45
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or )]
  clause args: [derived 42, derived 44]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE))))

  derived clause number: 46
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE) (* -1 ONE)), (+ (* -1 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE)))

  derived clause number: 47
  rule: or_single
  expr args: []
  clause args: [derived 46]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE))))

  derived clause number: 48
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE)))) (not (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 49
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE))) (not (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE))))), (or )]
  clause args: [derived 45, derived 48]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE))) (not (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 50
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE)))), (or )]
  clause args: [derived 47, derived 49]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE))))

  derived clause number: 51
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE)))) (not (= (+ (* -1 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 52
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))) (not (= (+ (* -1 ONE)) (* -1 (* 1 ONE))))), (or )]
  clause args: [derived 50, derived 51]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))) (not (= (+ (* -1 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 53
  rule: resolution
  expr args: [(not (= (+ (* -1 ONE)) (* -1 (* 1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE)))), (or )]
  clause args: [derived 28, derived 52]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))))

  derived clause number: 54
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))

  derived clause number: 55
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE)))))

  derived clause number: 56
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))))), (or )]
  clause args: [derived 54, derived 55]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE)))))

  derived clause number: 57
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))), (or )]
  clause args: [derived 53, derived 56]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 58
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= call0formal@barresult@0 null) (= call0formal@barresult@0 null)))

  derived clause number: 59
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))) (not (= (= call0formal@barresult@0 null) (= call0formal@barresult@0 null))) (not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))))

  derived clause number: 60
  rule: resolution
  expr args: [(not (= (= call0formal@barresult@0 null) (= call0formal@barresult@0 null))), (or (= (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))) (not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))), (or )]
  clause args: [derived 58, derived 59]
  backptr: nil
  conclusion: (or (= (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))) (not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))))

  derived clause number: 61
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))), (or (= (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))), (or )]
  clause args: [derived 57, derived 60]
  backptr: nil
  conclusion: (or (= (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))))

  derived clause number: 62
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))) (not (= (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))) (not (= (= call0formal@barresult@0@@0 null) (= call0formal@barresult@0@@0 null))))

  derived clause number: 63
  rule: resolution
  expr args: [(not (= (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))), (or (= (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))) (not (= (= call0formal@barresult@0@@0 null) (= call0formal@barresult@0@@0 null)))), (or )]
  clause args: [derived 61, derived 62]
  backptr: nil
  conclusion: (or (= (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))) (not (= (= call0formal@barresult@0@@0 null) (= call0formal@barresult@0@@0 null))))

  derived clause number: 64
  rule: resolution
  expr args: [(not (= (= call0formal@barresult@0@@0 null) (= call0formal@barresult@0@@0 null))), (or (= (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))), (or )]
  clause args: [derived 15, derived 63]
  backptr: nil
  conclusion: (or (= (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))

  derived clause number: 65
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE))))

  derived clause number: 66
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))) (not (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)))) (not (= (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))

  derived clause number: 67
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))) (not (= (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))), (or )]
  clause args: [derived 65, derived 66]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))) (not (= (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))

  derived clause number: 68
  rule: resolution
  expr args: [(not (= (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))), (or )]
  clause args: [derived 64, derived 67]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))

  derived clause number: 69
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE))))

  derived clause number: 70
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))) (not (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))

  derived clause number: 71
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))), (or )]
  clause args: [derived 69, derived 70]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))

  derived clause number: 72
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))), (or )]
  clause args: [derived 68, derived 71]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))

  derived clause number: 73
  rule: not_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))))

  derived clause number: 74
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))), (or (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))), (or )]
  clause args: [derived 72, derived 73]
  backptr: nil
  conclusion: (or (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))))

  derived clause number: 75
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))) (not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))

  derived clause number: 76
  rule: resolution
  expr args: [(not (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))), (or (not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))), (or )]
  clause args: [derived 74, derived 75]
  backptr: nil
  conclusion: (or (not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))

  derived clause number: 77
  rule: resolution
  expr args: [(not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))), (or (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))))]
  clause args: [derived 14, derived 76]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null)))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))

  derived clause number: 78
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (= call0formal@barresult@0@@0 null))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))]
  clause args: [derived 77, derived 0]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))))

  derived clause number: 79
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))]
  clause args: [derived 13, derived 78]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))))

  derived clause number: 80
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* 2 ONE)) (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null)))), (or ), (or (not (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))]
  clause args: [derived 12, derived 79]
  backptr: nil
  conclusion: (or (not (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))))

  derived clause number: 81
  rule: resolution
  expr args: [(not (=> (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= call0formal@barresult@0@@0 null))), (or ), (or (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))]
  clause args: [derived 11, derived 80]
  backptr: nil
  conclusion: (or (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 82
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))

  derived clause number: 83
  rule: resolution
  expr args: [(not (and (= call0formal@barresult@0 null) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))), (or (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))), (or )]
  clause args: [derived 81, derived 82]
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))

  derived clause number: 84
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))) (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))

  derived clause number: 85
  rule: factoring
  expr args: []
  clause args: [derived 10]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))

  derived clause number: 86
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))), (or (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))), (or )]
  clause args: [derived 85, derived 84]
  backptr: nil
  conclusion: (or (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))

  derived clause number: 87
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))), (or (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))), (or )]
  clause args: [derived 83, derived 86]
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))

  derived clause number: 88
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))), (or ), (or (not (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))]
  clause args: [derived 5, derived 1]
  backptr: nil
  conclusion: (or (not (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))))

  derived clause number: 89
  rule: resolution
  expr args: [(not (= (* -1 (* 1 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))), (or ), (or )]
  clause args: [derived 87, derived 88]
  backptr: nil
  conclusion: (or )

  derived clause number: 90
  rule: or_nil
  expr args: []
  clause args: [derived 89]
  backptr: nil
  conclusion: false

