vars: ControlFlow ONE x y
premises:
  a0: (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))))
steps:
  derived clause number: 0
  rule: or_single
  expr args: []
  clause args: [premise a0]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))))))

  derived clause number: 1
  rule: true+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or true)

  derived clause number: 2
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (<= (+ y (* -1 x)) (* 0 ONE))) (<= (+ y (* -1 x)) (* 0 ONE)))

  derived clause number: 3
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (not (<= (+ y (* -1 x)) (* 0 ONE)))) (not (<= (+ y (* -1 x)) (* 0 ONE))))

  derived clause number: 4
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))) (not (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))

  derived clause number: 5
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))))

  derived clause number: 6
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))

  derived clause number: 7
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x)) (* 1 x))

  derived clause number: 8
  rule: or_single
  expr args: []
  clause args: [derived 7]
  backptr: nil
  conclusion: (or (= (+ (* 1 x)) (* 1 x)))

  derived clause number: 9
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 x) (+ (* 1 x))) (not (= (+ (* 1 x)) (* 1 x))))

  derived clause number: 10
  rule: resolution
  expr args: [(not (= (+ (* 1 x)) (* 1 x))), (or (= (* 1 x) (+ (* 1 x)))), (or )]
  clause args: [derived 8, derived 9]
  backptr: nil
  conclusion: (or (= (* 1 x) (+ (* 1 x))))

  derived clause number: 11
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* -1 y)) (* -1 y))

  derived clause number: 12
  rule: or_single
  expr args: []
  clause args: [derived 11]
  backptr: nil
  conclusion: (or (= (+ (* -1 y)) (* -1 y)))

  derived clause number: 13
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 y) (+ (* -1 y))) (not (= (+ (* -1 y)) (* -1 y))))

  derived clause number: 14
  rule: resolution
  expr args: [(not (= (+ (* -1 y)) (* -1 y))), (or (= (* -1 y) (+ (* -1 y)))), (or )]
  clause args: [derived 12, derived 13]
  backptr: nil
  conclusion: (or (= (* -1 y) (+ (* -1 y))))

  derived clause number: 15
  rule: mul_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* 1 y) y)

  derived clause number: 16
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 y)) (* 1 y))

  derived clause number: 17
  rule: or_single
  expr args: []
  clause args: [derived 16]
  backptr: nil
  conclusion: (or (= (+ (* 1 y)) (* 1 y)))

  derived clause number: 18
  rule: or_single
  expr args: []
  clause args: [derived 15]
  backptr: nil
  conclusion: (or (= (* 1 y) y))

  derived clause number: 19
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 y)) y) (not (= (+ (* 1 y)) (* 1 y))) (not (= (* 1 y) y)))

  derived clause number: 20
  rule: resolution
  expr args: [(not (= (+ (* 1 y)) (* 1 y))), (or (= (+ (* 1 y)) y) (not (= (* 1 y) y))), (or )]
  clause args: [derived 17, derived 19]
  backptr: nil
  conclusion: (or (= (+ (* 1 y)) y) (not (= (* 1 y) y)))

  derived clause number: 21
  rule: resolution
  expr args: [(not (= (* 1 y) y)), (or (= (+ (* 1 y)) y)), (or )]
  clause args: [derived 18, derived 20]
  backptr: nil
  conclusion: (or (= (+ (* 1 y)) y))

  derived clause number: 22
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= y (+ (* 1 y))) (not (= (+ (* 1 y)) y)))

  derived clause number: 23
  rule: resolution
  expr args: [(not (= (+ (* 1 y)) y)), (or (= y (+ (* 1 y)))), (or )]
  clause args: [derived 21, derived 22]
  backptr: nil
  conclusion: (or (= y (+ (* 1 y))))

  derived clause number: 24
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* -1 x)) (* -1 x))

  derived clause number: 25
  rule: or_single
  expr args: []
  clause args: [derived 24]
  backptr: nil
  conclusion: (or (= (+ (* -1 x)) (* -1 x)))

  derived clause number: 26
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 x) (+ (* -1 x))) (not (= (+ (* -1 x)) (* -1 x))))

  derived clause number: 27
  rule: resolution
  expr args: [(not (= (+ (* -1 x)) (* -1 x))), (or (= (* -1 x) (+ (* -1 x)))), (or )]
  clause args: [derived 25, derived 26]
  backptr: nil
  conclusion: (or (= (* -1 x) (+ (* -1 x))))

  derived clause number: 28
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ y (* -1 x)) (+ (+ (* 1 y)) (+ (* -1 x)))) (not (= y (+ (* 1 y)))) (not (= (* -1 x) (+ (* -1 x)))))

  derived clause number: 29
  rule: resolution
  expr args: [(not (= y (+ (* 1 y)))), (or (= (+ y (* -1 x)) (+ (+ (* 1 y)) (+ (* -1 x)))) (not (= (* -1 x) (+ (* -1 x))))), (or )]
  clause args: [derived 23, derived 28]
  backptr: nil
  conclusion: (or (= (+ y (* -1 x)) (+ (+ (* 1 y)) (+ (* -1 x)))) (not (= (* -1 x) (+ (* -1 x)))))

  derived clause number: 30
  rule: resolution
  expr args: [(not (= (* -1 x) (+ (* -1 x)))), (or (= (+ y (* -1 x)) (+ (+ (* 1 y)) (+ (* -1 x))))), (or )]
  clause args: [derived 27, derived 29]
  backptr: nil
  conclusion: (or (= (+ y (* -1 x)) (+ (+ (* 1 y)) (+ (* -1 x)))))

  derived clause number: 31
  rule: flatten
  expr args: [(+ (+ (* -1 x))), (+ (+ (* 1 y)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (+ (* -1 x))))

  derived clause number: 32
  rule: or_single
  expr args: []
  clause args: [derived 31]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (+ (* -1 x)))))

  derived clause number: 33
  rule: flatten
  expr args: [(+ (* 1 y)), (+ (+ (* -1 x)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 y) (+ (* -1 x))) (+ (* 1 y) (* -1 x)))

  derived clause number: 34
  rule: or_single
  expr args: []
  clause args: [derived 33]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (+ (* -1 x))) (+ (* 1 y) (* -1 x))))

  derived clause number: 35
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (* -1 x))) (not (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (+ (* -1 x))))) (not (= (+ (* 1 y) (+ (* -1 x))) (+ (* 1 y) (* -1 x)))))

  derived clause number: 36
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (+ (* -1 x))))), (or (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (* -1 x))) (not (= (+ (* 1 y) (+ (* -1 x))) (+ (* 1 y) (* -1 x))))), (or )]
  clause args: [derived 32, derived 35]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (* -1 x))) (not (= (+ (* 1 y) (+ (* -1 x))) (+ (* 1 y) (* -1 x)))))

  derived clause number: 37
  rule: resolution
  expr args: [(not (= (+ (* 1 y) (+ (* -1 x))) (+ (* 1 y) (* -1 x)))), (or (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (* -1 x)))), (or )]
  clause args: [derived 34, derived 36]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (* -1 x))))

  derived clause number: 38
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ y (* -1 x)) (+ (* 1 y) (* -1 x))) (not (= (+ y (* -1 x)) (+ (+ (* 1 y)) (+ (* -1 x))))) (not (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (* -1 x)))))

  derived clause number: 39
  rule: resolution
  expr args: [(not (= (+ y (* -1 x)) (+ (+ (* 1 y)) (+ (* -1 x))))), (or (= (+ y (* -1 x)) (+ (* 1 y) (* -1 x))) (not (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (* -1 x))))), (or )]
  clause args: [derived 30, derived 38]
  backptr: nil
  conclusion: (or (= (+ y (* -1 x)) (+ (* 1 y) (* -1 x))) (not (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (* -1 x)))))

  derived clause number: 40
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 y)) (+ (* -1 x))) (+ (* 1 y) (* -1 x)))), (or (= (+ y (* -1 x)) (+ (* 1 y) (* -1 x)))), (or )]
  clause args: [derived 37, derived 39]
  backptr: nil
  conclusion: (or (= (+ y (* -1 x)) (+ (* 1 y) (* -1 x))))

  derived clause number: 41
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (+ y (* -1 x))) (* 1 (+ (* 1 y) (* -1 x)))) (not (= (+ y (* -1 x)) (+ (* 1 y) (* -1 x)))))

  derived clause number: 42
  rule: resolution
  expr args: [(not (= (+ y (* -1 x)) (+ (* 1 y) (* -1 x)))), (or (= (* 1 (+ y (* -1 x))) (* 1 (+ (* 1 y) (* -1 x))))), (or )]
  clause args: [derived 40, derived 41]
  backptr: nil
  conclusion: (or (= (* 1 (+ y (* -1 x))) (* 1 (+ (* 1 y) (* -1 x)))))

  derived clause number: 43
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* 1 (+ (* 1 y) (* -1 x))) (+ (* 1 y) (* -1 x)))

  derived clause number: 44
  rule: or_single
  expr args: []
  clause args: [derived 43]
  backptr: nil
  conclusion: (or (= (* 1 (+ (* 1 y) (* -1 x))) (+ (* 1 y) (* -1 x))))

  derived clause number: 45
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (+ y (* -1 x))) (+ (* 1 y) (* -1 x))) (not (= (* 1 (+ y (* -1 x))) (* 1 (+ (* 1 y) (* -1 x))))) (not (= (* 1 (+ (* 1 y) (* -1 x))) (+ (* 1 y) (* -1 x)))))

  derived clause number: 46
  rule: resolution
  expr args: [(not (= (* 1 (+ y (* -1 x))) (* 1 (+ (* 1 y) (* -1 x))))), (or (= (* 1 (+ y (* -1 x))) (+ (* 1 y) (* -1 x))) (not (= (* 1 (+ (* 1 y) (* -1 x))) (+ (* 1 y) (* -1 x))))), (or )]
  clause args: [derived 42, derived 45]
  backptr: nil
  conclusion: (or (= (* 1 (+ y (* -1 x))) (+ (* 1 y) (* -1 x))) (not (= (* 1 (+ (* 1 y) (* -1 x))) (+ (* 1 y) (* -1 x)))))

  derived clause number: 47
  rule: resolution
  expr args: [(not (= (* 1 (+ (* 1 y) (* -1 x))) (+ (* 1 y) (* -1 x)))), (or (= (* 1 (+ y (* -1 x))) (+ (* 1 y) (* -1 x)))), (or )]
  clause args: [derived 44, derived 46]
  backptr: nil
  conclusion: (or (= (* 1 (+ y (* -1 x))) (+ (* 1 y) (* -1 x))))

  derived clause number: 48
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE)) (* 0 ONE))

  derived clause number: 49
  rule: or_single
  expr args: []
  clause args: [derived 48]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE)) (* 0 ONE)))

  derived clause number: 50
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 0 ONE) (+ (* 0 ONE))) (not (= (+ (* 0 ONE)) (* 0 ONE))))

  derived clause number: 51
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE)) (* 0 ONE))), (or (= (* 0 ONE) (+ (* 0 ONE)))), (or )]
  clause args: [derived 49, derived 50]
  backptr: nil
  conclusion: (or (= (* 0 ONE) (+ (* 0 ONE))))

  derived clause number: 52
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 0 ONE)) (* -1 (+ (* 0 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))))

  derived clause number: 53
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (* -1 (* 0 ONE)) (* -1 (+ (* 0 ONE))))), (or )]
  clause args: [derived 51, derived 52]
  backptr: nil
  conclusion: (or (= (* -1 (* 0 ONE)) (* -1 (+ (* 0 ONE)))))

  derived clause number: 54
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 0 ONE))) (+ (* 0 ONE)))

  derived clause number: 55
  rule: or_single
  expr args: []
  clause args: [derived 54]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 0 ONE))) (+ (* 0 ONE))))

  derived clause number: 56
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 0 ONE)) (+ (* 0 ONE))) (not (= (* -1 (* 0 ONE)) (* -1 (+ (* 0 ONE))))) (not (= (* -1 (+ (* 0 ONE))) (+ (* 0 ONE)))))

  derived clause number: 57
  rule: resolution
  expr args: [(not (= (* -1 (* 0 ONE)) (* -1 (+ (* 0 ONE))))), (or (= (* -1 (* 0 ONE)) (+ (* 0 ONE))) (not (= (* -1 (+ (* 0 ONE))) (+ (* 0 ONE))))), (or )]
  clause args: [derived 53, derived 56]
  backptr: nil
  conclusion: (or (= (* -1 (* 0 ONE)) (+ (* 0 ONE))) (not (= (* -1 (+ (* 0 ONE))) (+ (* 0 ONE)))))

  derived clause number: 58
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 0 ONE))) (+ (* 0 ONE)))), (or (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))), (or )]
  clause args: [derived 55, derived 57]
  backptr: nil
  conclusion: (or (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))

  derived clause number: 59
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))) (not (= (* 1 x) (+ (* 1 x)))) (not (= (* -1 y) (+ (* -1 y)))) (not (= (* 1 (+ y (* -1 x))) (+ (* 1 y) (* -1 x)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 60
  rule: resolution
  expr args: [(not (= (* 1 x) (+ (* 1 x)))), (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))) (not (= (* -1 y) (+ (* -1 y)))) (not (= (* 1 (+ y (* -1 x))) (+ (* 1 y) (* -1 x)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 10, derived 59]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))) (not (= (* -1 y) (+ (* -1 y)))) (not (= (* 1 (+ y (* -1 x))) (+ (* 1 y) (* -1 x)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 61
  rule: resolution
  expr args: [(not (= (* -1 y) (+ (* -1 y)))), (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))) (not (= (* 1 (+ y (* -1 x))) (+ (* 1 y) (* -1 x)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 14, derived 60]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))) (not (= (* 1 (+ y (* -1 x))) (+ (* 1 y) (* -1 x)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 62
  rule: resolution
  expr args: [(not (= (* 1 (+ y (* -1 x))) (+ (* 1 y) (* -1 x)))), (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 47, derived 61]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 63
  rule: resolution
  expr args: [(not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))), (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 58, derived 62]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))))

  derived clause number: 64
  rule: flatten
  expr args: [(+ (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))), (+ (+ (* 1 x)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))

  derived clause number: 65
  rule: or_single
  expr args: []
  clause args: [derived 64]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))))

  derived clause number: 66
  rule: flatten
  expr args: [(+ (* 1 x) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))), (+ (+ (* -1 y)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))

  derived clause number: 67
  rule: or_single
  expr args: []
  clause args: [derived 66]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))))

  derived clause number: 68
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))) (not (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))) (not (= (+ (* 1 x) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))))

  derived clause number: 69
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))) (not (= (+ (* 1 x) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))))), (or )]
  clause args: [derived 65, derived 68]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))) (not (= (+ (* 1 x) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))))

  derived clause number: 70
  rule: resolution
  expr args: [(not (= (+ (* 1 x) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 67, derived 69]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE)))))

  derived clause number: 71
  rule: flatten
  expr args: [(+ (* 1 x) (* -1 y) (+ (* 0 ONE))), (+ (+ (* 1 y) (* -1 x)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))))

  derived clause number: 72
  rule: or_single
  expr args: []
  clause args: [derived 71]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE)))))

  derived clause number: 73
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE)))) (not (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))) (not (= (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))))))

  derived clause number: 74
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE)))) (not (= (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE)))))), (or )]
  clause args: [derived 70, derived 73]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE)))) (not (= (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))))))

  derived clause number: 75
  rule: resolution
  expr args: [(not (= (+ (* 1 x) (* -1 y) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))))), (or )]
  clause args: [derived 72, derived 74]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE)))))

  derived clause number: 76
  rule: flatten
  expr args: [(+ (* 1 x) (* -1 y) (* 1 y) (* -1 x)), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)))

  derived clause number: 77
  rule: or_single
  expr args: []
  clause args: [derived 76]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE))))

  derived clause number: 78
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE))) (not (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))))) (not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)))))

  derived clause number: 79
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE))) (not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE))))), (or )]
  clause args: [derived 75, derived 78]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE))) (not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)))))

  derived clause number: 80
  rule: resolution
  expr args: [(not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)))), (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)))), (or )]
  clause args: [derived 77, derived 79]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE))))

  derived clause number: 81
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE))) (not (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))) (not (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)))))

  derived clause number: 82
  rule: resolution
  expr args: [(not (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))))), (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE))) (not (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE))))), (or )]
  clause args: [derived 63, derived 81]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE))) (not (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)))))

  derived clause number: 83
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x)) (+ (* -1 y)) (+ (* 1 y) (* -1 x)) (+ (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)))), (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)))), (or )]
  clause args: [derived 80, derived 82]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE))))

  derived clause number: 84
  rule: consolidate
  expr args: [(+ (* 1 x) (* -1 y) (* 1 y) (* -1 x)), (+ (* 0 ONE)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x)))

  derived clause number: 85
  rule: or_single
  expr args: []
  clause args: [derived 84]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x))))

  derived clause number: 86
  rule: consolidate
  expr args: [(+ (* -1 y) (* 1 y)), (+ (* 1 x) (* -1 x)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x)) (+ (* -1 y) (* 1 y)))

  derived clause number: 87
  rule: or_single
  expr args: []
  clause args: [derived 86]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x)) (+ (* -1 y) (* 1 y))))

  derived clause number: 88
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ (* -1 y) (* 1 y))) (not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x)))) (not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x)) (+ (* -1 y) (* 1 y)))))

  derived clause number: 89
  rule: resolution
  expr args: [(not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x)))), (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ (* -1 y) (* 1 y))) (not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x)) (+ (* -1 y) (* 1 y))))), (or )]
  clause args: [derived 85, derived 88]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ (* -1 y) (* 1 y))) (not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x)) (+ (* -1 y) (* 1 y)))))

  derived clause number: 90
  rule: resolution
  expr args: [(not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x)) (+ (* -1 y) (* 1 y)))), (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ (* -1 y) (* 1 y)))), (or )]
  clause args: [derived 87, derived 89]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ (* -1 y) (* 1 y))))

  derived clause number: 91
  rule: consolidate
  expr args: [(+ ), (+ (* -1 y) (* 1 y)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* -1 y) (* 1 y)) (+ ))

  derived clause number: 92
  rule: or_single
  expr args: []
  clause args: [derived 91]
  backptr: nil
  conclusion: (or (= (+ (* -1 y) (* 1 y)) (+ )))

  derived clause number: 93
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ )) (not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ (* -1 y) (* 1 y)))) (not (= (+ (* -1 y) (* 1 y)) (+ ))))

  derived clause number: 94
  rule: resolution
  expr args: [(not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ (* -1 y) (* 1 y)))), (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ )) (not (= (+ (* -1 y) (* 1 y)) (+ )))), (or )]
  clause args: [derived 90, derived 93]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ )) (not (= (+ (* -1 y) (* 1 y)) (+ ))))

  derived clause number: 95
  rule: resolution
  expr args: [(not (= (+ (* -1 y) (* 1 y)) (+ ))), (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ ))), (or )]
  clause args: [derived 92, derived 94]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ )))

  derived clause number: 96
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)))) (not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ ))))

  derived clause number: 97
  rule: resolution
  expr args: [(not (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)))), (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ )))), (or )]
  clause args: [derived 83, derived 96]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ ))))

  derived clause number: 98
  rule: resolution
  expr args: [(not (= (+ (* 1 x) (* -1 y) (* 1 y) (* -1 x) (* 0 ONE)) (+ ))), (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ ))), (or )]
  clause args: [derived 95, derived 97]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ )))

  derived clause number: 99
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE)) (+ ))

  derived clause number: 100
  rule: or_single
  expr args: []
  clause args: [derived 99]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE)) (+ )))

  derived clause number: 101
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ ) (+ (* 0 ONE))) (not (= (+ (* 0 ONE)) (+ ))))

  derived clause number: 102
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE)) (+ ))), (or (= (+ ) (+ (* 0 ONE)))), (or )]
  clause args: [derived 100, derived 101]
  backptr: nil
  conclusion: (or (= (+ ) (+ (* 0 ONE))))

  derived clause number: 103
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ ))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 104
  rule: resolution
  expr args: [(not (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ ))), (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE))))), (or )]
  clause args: [derived 98, derived 103]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 105
  rule: resolution
  expr args: [(not (= (+ ) (+ (* 0 ONE)))), (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 0 ONE)))), (or )]
  clause args: [derived 102, derived 104]
  backptr: nil
  conclusion: (or (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 0 ONE))))

  derived clause number: 106
  rule: or_single_rev
  expr args: []
  clause args: [derived 105]
  backptr: nil
  conclusion: (= (+ (* 1 x) (* -1 y) (* 1 (+ y (* -1 x))) (* -1 (* 0 ONE))) (+ (* 0 ONE)))

  derived clause number: 107
  rule: farkas
  expr args: []
  clause args: [derived 106]
  backptr: nil
  conclusion: (or (not (< x y)) (not (<= (+ y (* -1 x)) (* 0 ONE))))

  derived clause number: 108
  rule: resolution
  expr args: [(not (< x y)), (or (not (<= (+ y (* -1 x)) (* 0 ONE)))), (or (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (not (<= (+ y (* -1 x)) (* 0 ONE))))]
  clause args: [derived 6, derived 107]
  backptr: nil
  conclusion: (or (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (not (<= (+ y (* -1 x)) (* 0 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))

  derived clause number: 109
  rule: total
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (<= y x) (< x y))

  derived clause number: 110
  rule: total
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (<= (+ y (* -1 x)) (* 0 ONE)) (< (* 0 ONE) (+ y (* -1 x))))

  derived clause number: 111
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 y) (+ (* 1 y))) (not (= (+ (* 1 y)) (* 1 y))))

  derived clause number: 112
  rule: resolution
  expr args: [(not (= (+ (* 1 y)) (* 1 y))), (or (= (* 1 y) (+ (* 1 y)))), (or )]
  clause args: [derived 17, derived 111]
  backptr: nil
  conclusion: (or (= (* 1 y) (+ (* 1 y))))

  derived clause number: 113
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (* 0 ONE)) (* 1 (+ (* 0 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))))

  derived clause number: 114
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (* 1 (* 0 ONE)) (* 1 (+ (* 0 ONE))))), (or )]
  clause args: [derived 51, derived 113]
  backptr: nil
  conclusion: (or (= (* 1 (* 0 ONE)) (* 1 (+ (* 0 ONE)))))

  derived clause number: 115
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* 1 (+ (* 0 ONE))) (+ (* 0 ONE)))

  derived clause number: 116
  rule: or_single
  expr args: []
  clause args: [derived 115]
  backptr: nil
  conclusion: (or (= (* 1 (+ (* 0 ONE))) (+ (* 0 ONE))))

  derived clause number: 117
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (* 0 ONE)) (+ (* 0 ONE))) (not (= (* 1 (* 0 ONE)) (* 1 (+ (* 0 ONE))))) (not (= (* 1 (+ (* 0 ONE))) (+ (* 0 ONE)))))

  derived clause number: 118
  rule: resolution
  expr args: [(not (= (* 1 (* 0 ONE)) (* 1 (+ (* 0 ONE))))), (or (= (* 1 (* 0 ONE)) (+ (* 0 ONE))) (not (= (* 1 (+ (* 0 ONE))) (+ (* 0 ONE))))), (or )]
  clause args: [derived 114, derived 117]
  backptr: nil
  conclusion: (or (= (* 1 (* 0 ONE)) (+ (* 0 ONE))) (not (= (* 1 (+ (* 0 ONE))) (+ (* 0 ONE)))))

  derived clause number: 119
  rule: resolution
  expr args: [(not (= (* 1 (+ (* 0 ONE))) (+ (* 0 ONE)))), (or (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))), (or )]
  clause args: [derived 116, derived 118]
  backptr: nil
  conclusion: (or (= (* 1 (* 0 ONE)) (+ (* 0 ONE))))

  derived clause number: 120
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (+ y (* -1 x))) (* -1 (+ (* 1 y) (* -1 x)))) (not (= (+ y (* -1 x)) (+ (* 1 y) (* -1 x)))))

  derived clause number: 121
  rule: resolution
  expr args: [(not (= (+ y (* -1 x)) (+ (* 1 y) (* -1 x)))), (or (= (* -1 (+ y (* -1 x))) (* -1 (+ (* 1 y) (* -1 x))))), (or )]
  clause args: [derived 40, derived 120]
  backptr: nil
  conclusion: (or (= (* -1 (+ y (* -1 x))) (* -1 (+ (* 1 y) (* -1 x)))))

  derived clause number: 122
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 1 y) (* -1 x))) (+ (* -1 y) (* 1 x)))

  derived clause number: 123
  rule: or_single
  expr args: []
  clause args: [derived 122]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 1 y) (* -1 x))) (+ (* -1 y) (* 1 x))))

  derived clause number: 124
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x))) (not (= (* -1 (+ y (* -1 x))) (* -1 (+ (* 1 y) (* -1 x))))) (not (= (* -1 (+ (* 1 y) (* -1 x))) (+ (* -1 y) (* 1 x)))))

  derived clause number: 125
  rule: resolution
  expr args: [(not (= (* -1 (+ y (* -1 x))) (* -1 (+ (* 1 y) (* -1 x))))), (or (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x))) (not (= (* -1 (+ (* 1 y) (* -1 x))) (+ (* -1 y) (* 1 x))))), (or )]
  clause args: [derived 121, derived 124]
  backptr: nil
  conclusion: (or (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x))) (not (= (* -1 (+ (* 1 y) (* -1 x))) (+ (* -1 y) (* 1 x)))))

  derived clause number: 126
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 1 y) (* -1 x))) (+ (* -1 y) (* 1 x)))), (or (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x)))), (or )]
  clause args: [derived 123, derived 125]
  backptr: nil
  conclusion: (or (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x))))

  derived clause number: 127
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))) (not (= (* 1 y) (+ (* 1 y)))) (not (= (* -1 x) (+ (* -1 x)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x)))))

  derived clause number: 128
  rule: resolution
  expr args: [(not (= (* 1 y) (+ (* 1 y)))), (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))) (not (= (* -1 x) (+ (* -1 x)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x))))), (or )]
  clause args: [derived 112, derived 127]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))) (not (= (* -1 x) (+ (* -1 x)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x)))))

  derived clause number: 129
  rule: resolution
  expr args: [(not (= (* -1 x) (+ (* -1 x)))), (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x))))), (or )]
  clause args: [derived 27, derived 128]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x)))))

  derived clause number: 130
  rule: resolution
  expr args: [(not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))), (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))) (not (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x))))), (or )]
  clause args: [derived 119, derived 129]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))) (not (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x)))))

  derived clause number: 131
  rule: resolution
  expr args: [(not (= (* -1 (+ y (* -1 x))) (+ (* -1 y) (* 1 x)))), (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))), (or )]
  clause args: [derived 126, derived 130]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))))

  derived clause number: 132
  rule: flatten
  expr args: [(+ (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))), (+ (+ (* 1 y)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))

  derived clause number: 133
  rule: or_single
  expr args: []
  clause args: [derived 132]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))))

  derived clause number: 134
  rule: flatten
  expr args: [(+ (* 1 y) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))), (+ (+ (* -1 x)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 y) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))

  derived clause number: 135
  rule: or_single
  expr args: []
  clause args: [derived 134]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))))

  derived clause number: 136
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))) (not (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))) (not (= (+ (* 1 y) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))))

  derived clause number: 137
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))), (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))) (not (= (+ (* 1 y) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))))), (or )]
  clause args: [derived 133, derived 136]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))) (not (= (+ (* 1 y) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))))

  derived clause number: 138
  rule: resolution
  expr args: [(not (= (+ (* 1 y) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))), (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))), (or )]
  clause args: [derived 135, derived 137]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x)))))

  derived clause number: 139
  rule: flatten
  expr args: [(+ (* 1 y) (* -1 x) (+ (* -1 y) (* 1 x))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))))

  derived clause number: 140
  rule: or_single
  expr args: []
  clause args: [derived 139]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x)))))

  derived clause number: 141
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x)))) (not (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))) (not (= (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))))))

  derived clause number: 142
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))), (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x)))) (not (= (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x)))))), (or )]
  clause args: [derived 138, derived 141]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x)))) (not (= (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))))))

  derived clause number: 143
  rule: resolution
  expr args: [(not (= (+ (* 1 y) (* -1 x) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))))), (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))))), (or )]
  clause args: [derived 140, derived 142]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x)))))

  derived clause number: 144
  rule: flatten
  expr args: [(+ (* 1 y) (* -1 x) (* 0 ONE)), (+ (+ (* -1 y) (* 1 x)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)))

  derived clause number: 145
  rule: or_single
  expr args: []
  clause args: [derived 144]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x))))

  derived clause number: 146
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x))) (not (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))))) (not (= (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)))))

  derived clause number: 147
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))))), (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x))) (not (= (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x))))), (or )]
  clause args: [derived 143, derived 146]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x))) (not (= (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)))))

  derived clause number: 148
  rule: resolution
  expr args: [(not (= (+ (* 1 y) (* -1 x) (* 0 ONE) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)))), (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)))), (or )]
  clause args: [derived 145, derived 147]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x))))

  derived clause number: 149
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x))) (not (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))) (not (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)))))

  derived clause number: 150
  rule: resolution
  expr args: [(not (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))))), (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x))) (not (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x))))), (or )]
  clause args: [derived 131, derived 149]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x))) (not (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)))))

  derived clause number: 151
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 y)) (+ (* -1 x)) (+ (* 0 ONE)) (+ (* -1 y) (* 1 x))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)))), (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)))), (or )]
  clause args: [derived 148, derived 150]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x))))

  derived clause number: 152
  rule: consolidate
  expr args: [(+ (* 1 y) (* -1 x) (* -1 y) (* 1 x)), (+ (* 0 ONE)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 x) (* -1 y) (* 1 x)))

  derived clause number: 153
  rule: or_single
  expr args: []
  clause args: [derived 152]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 x) (* -1 y) (* 1 x))))

  derived clause number: 154
  rule: consolidate
  expr args: [(+ (* 1 y) (* -1 y)), (+ (* -1 x) (* 1 x)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 y) (* -1 x) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y)))

  derived clause number: 155
  rule: or_single
  expr args: []
  clause args: [derived 154]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y))))

  derived clause number: 156
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y))) (not (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 x) (* -1 y) (* 1 x)))) (not (= (+ (* 1 y) (* -1 x) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y)))))

  derived clause number: 157
  rule: resolution
  expr args: [(not (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 x) (* -1 y) (* 1 x)))), (or (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y))) (not (= (+ (* 1 y) (* -1 x) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y))))), (or )]
  clause args: [derived 153, derived 156]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y))) (not (= (+ (* 1 y) (* -1 x) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y)))))

  derived clause number: 158
  rule: resolution
  expr args: [(not (= (+ (* 1 y) (* -1 x) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y)))), (or (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y)))), (or )]
  clause args: [derived 155, derived 157]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y))))

  derived clause number: 159
  rule: consolidate
  expr args: [(+ ), (+ (* 1 y) (* -1 y)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 y) (* -1 y)) (+ ))

  derived clause number: 160
  rule: or_single
  expr args: []
  clause args: [derived 159]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 y)) (+ )))

  derived clause number: 161
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ )) (not (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y)))) (not (= (+ (* 1 y) (* -1 y)) (+ ))))

  derived clause number: 162
  rule: resolution
  expr args: [(not (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ (* 1 y) (* -1 y)))), (or (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ )) (not (= (+ (* 1 y) (* -1 y)) (+ )))), (or )]
  clause args: [derived 158, derived 161]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ )) (not (= (+ (* 1 y) (* -1 y)) (+ ))))

  derived clause number: 163
  rule: resolution
  expr args: [(not (= (+ (* 1 y) (* -1 y)) (+ ))), (or (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ ))), (or )]
  clause args: [derived 160, derived 162]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ )))

  derived clause number: 164
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ )) (not (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)))) (not (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ ))))

  derived clause number: 165
  rule: resolution
  expr args: [(not (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)))), (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ )) (not (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ )))), (or )]
  clause args: [derived 151, derived 164]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ )) (not (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ ))))

  derived clause number: 166
  rule: resolution
  expr args: [(not (= (+ (* 1 y) (* -1 x) (* 0 ONE) (* -1 y) (* 1 x)) (+ ))), (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ ))), (or )]
  clause args: [derived 163, derived 165]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ )))

  derived clause number: 167
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 0 ONE))) (not (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ ))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 168
  rule: resolution
  expr args: [(not (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ ))), (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE))))), (or )]
  clause args: [derived 166, derived 167]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 169
  rule: resolution
  expr args: [(not (= (+ ) (+ (* 0 ONE)))), (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 0 ONE)))), (or )]
  clause args: [derived 102, derived 168]
  backptr: nil
  conclusion: (or (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 0 ONE))))

  derived clause number: 170
  rule: or_single_rev
  expr args: []
  clause args: [derived 169]
  backptr: nil
  conclusion: (= (+ (* 1 y) (* -1 x) (* 1 (* 0 ONE)) (* -1 (+ y (* -1 x)))) (+ (* 0 ONE)))

  derived clause number: 171
  rule: farkas
  expr args: []
  clause args: [derived 170]
  backptr: nil
  conclusion: (or (not (<= y x)) (not (< (* 0 ONE) (+ y (* -1 x)))))

  derived clause number: 172
  rule: resolution
  expr args: [(not (< (* 0 ONE) (+ y (* -1 x)))), (or (not (<= y x))), (or (<= (+ y (* -1 x)) (* 0 ONE)))]
  clause args: [derived 110, derived 171]
  backptr: nil
  conclusion: (or (<= (+ y (* -1 x)) (* 0 ONE)) (not (<= y x)))

  derived clause number: 173
  rule: resolution
  expr args: [(not (<= (+ y (* -1 x)) (* 0 ONE))), (or (not (not (<= (+ y (* -1 x)) (* 0 ONE))))), (or (not (<= y x)))]
  clause args: [derived 172, derived 3]
  backptr: nil
  conclusion: (or (not (<= y x)) (not (not (<= (+ y (* -1 x)) (* 0 ONE)))))

  derived clause number: 174
  rule: resolution
  expr args: [(not (<= y x)), (or (not (not (<= (+ y (* -1 x)) (* 0 ONE))))), (or (< x y))]
  clause args: [derived 109, derived 173]
  backptr: nil
  conclusion: (or (< x y) (not (not (<= (+ y (* -1 x)) (* 0 ONE)))))

  derived clause number: 175
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (not (< x y)) (not (not (<= (+ y (* -1 x)) (* 0 ONE)))))

  derived clause number: 176
  rule: resolution
  expr args: [(not (< x y)), (or (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (not (not (<= (+ y (* -1 x)) (* 0 ONE))))), (or (not (not (<= (+ y (* -1 x)) (* 0 ONE)))))]
  clause args: [derived 174, derived 175]
  backptr: nil
  conclusion: (or (not (not (<= (+ y (* -1 x)) (* 0 ONE)))) (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (not (not (<= (+ y (* -1 x)) (* 0 ONE)))))

  derived clause number: 177
  rule: factoring
  expr args: []
  clause args: [derived 108]
  backptr: nil
  conclusion: (or (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (not (<= (+ y (* -1 x)) (* 0 ONE))))

  derived clause number: 178
  rule: factoring
  expr args: []
  clause args: [derived 176]
  backptr: nil
  conclusion: (or (not (not (<= (+ y (* -1 x)) (* 0 ONE)))) (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))))

  derived clause number: 179
  rule: resolution
  expr args: [(not (not (<= (+ y (* -1 x)) (* 0 ONE)))), (or (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))), (or (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))))]
  clause args: [derived 177, derived 178]
  backptr: nil
  conclusion: (or (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))))

  derived clause number: 180
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))

  derived clause number: 181
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= x x))

  derived clause number: 182
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= x x) true) (not (= x x)) (not true))

  derived clause number: 183
  rule: resolution
  expr args: [(not (= x x)), (or (= (= x x) true) (not true)), (or )]
  clause args: [derived 181, derived 182]
  backptr: nil
  conclusion: (or (= (= x x) true) (not true))

  derived clause number: 184
  rule: resolution
  expr args: [(not true), (or (= (= x x) true)), (or )]
  clause args: [derived 1, derived 183]
  backptr: nil
  conclusion: (or (= (= x x) true))

  derived clause number: 185
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 ONE)) (* 1 ONE))

  derived clause number: 186
  rule: or_single
  expr args: []
  clause args: [derived 185]
  backptr: nil
  conclusion: (or (= (+ (* 1 ONE)) (* 1 ONE)))

  derived clause number: 187
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 ONE) (+ (* 1 ONE))) (not (= (+ (* 1 ONE)) (* 1 ONE))))

  derived clause number: 188
  rule: resolution
  expr args: [(not (= (+ (* 1 ONE)) (* 1 ONE))), (or (= (* 1 ONE) (+ (* 1 ONE)))), (or )]
  clause args: [derived 186, derived 187]
  backptr: nil
  conclusion: (or (= (* 1 ONE) (+ (* 1 ONE))))

  derived clause number: 189
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE)))) (not (= (* 1 ONE) (+ (* 1 ONE)))))

  derived clause number: 190
  rule: resolution
  expr args: [(not (= (* 1 ONE) (+ (* 1 ONE)))), (or (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE))))), (or )]
  clause args: [derived 188, derived 189]
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE)))))

  derived clause number: 191
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE)))

  derived clause number: 192
  rule: or_single
  expr args: []
  clause args: [derived 191]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE))))

  derived clause number: 193
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE))) (not (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE))))) (not (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE)))))

  derived clause number: 194
  rule: resolution
  expr args: [(not (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE))))), (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE))) (not (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE))))), (or )]
  clause args: [derived 190, derived 193]
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE))) (not (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE)))))

  derived clause number: 195
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE)))), (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))), (or )]
  clause args: [derived 192, derived 194]
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE))))

  derived clause number: 196
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* -1 ONE)) (* -1 (* 1 ONE))) (not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 197
  rule: resolution
  expr args: [(not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))), (or (= (+ (* -1 ONE)) (* -1 (* 1 ONE)))), (or )]
  clause args: [derived 195, derived 196]
  backptr: nil
  conclusion: (or (= (+ (* -1 ONE)) (* -1 (* 1 ONE))))

  derived clause number: 198
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))) (not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 199
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE)))) (not (= (* -1 (* 1 ONE)) (+ (* -1 ONE))))), (or )]
  clause args: [derived 51, derived 198]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE)))) (not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 200
  rule: resolution
  expr args: [(not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE))))), (or )]
  clause args: [derived 195, derived 199]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE)))))

  derived clause number: 201
  rule: flatten
  expr args: [(+ (+ (* -1 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (+ (* -1 ONE))))

  derived clause number: 202
  rule: or_single
  expr args: []
  clause args: [derived 201]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (+ (* -1 ONE)))))

  derived clause number: 203
  rule: flatten
  expr args: [(+ (* 0 ONE)), (+ (+ (* -1 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))

  derived clause number: 204
  rule: or_single
  expr args: []
  clause args: [derived 203]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))))

  derived clause number: 205
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (+ (* -1 ONE))))) (not (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))))

  derived clause number: 206
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (+ (* -1 ONE))))), (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))))), (or )]
  clause args: [derived 202, derived 205]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))))

  derived clause number: 207
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or )]
  clause args: [derived 204, derived 206]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))))

  derived clause number: 208
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE))))) (not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))))

  derived clause number: 209
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE))))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))))), (or )]
  clause args: [derived 200, derived 208]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))))

  derived clause number: 210
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or )]
  clause args: [derived 207, derived 209]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE))))

  derived clause number: 211
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE) (* -1 ONE)), (+ (* -1 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE)))

  derived clause number: 212
  rule: or_single
  expr args: []
  clause args: [derived 211]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE))))

  derived clause number: 213
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE)))) (not (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 214
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE))) (not (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE))))), (or )]
  clause args: [derived 210, derived 213]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE))) (not (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 215
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE)))), (or )]
  clause args: [derived 212, derived 214]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE))))

  derived clause number: 216
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE)))) (not (= (+ (* -1 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 217
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))) (not (= (+ (* -1 ONE)) (* -1 (* 1 ONE))))), (or )]
  clause args: [derived 215, derived 216]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))) (not (= (+ (* -1 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 218
  rule: resolution
  expr args: [(not (= (+ (* -1 ONE)) (* -1 (* 1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE)))), (or )]
  clause args: [derived 197, derived 217]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))))

  derived clause number: 219
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE)))))

  derived clause number: 220
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))))), (or )]
  clause args: [derived 180, derived 219]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE)))))

  derived clause number: 221
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))), (or )]
  clause args: [derived 218, derived 220]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 222
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)) (not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))) (not (= (= x x) true)))

  derived clause number: 223
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)) (not (= (= x x) true))), (or )]
  clause args: [derived 221, derived 222]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)) (not (= (= x x) true)))

  derived clause number: 224
  rule: resolution
  expr args: [(not (= (= x x) true)), (or (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))), (or )]
  clause args: [derived 184, derived 223]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))

  derived clause number: 225
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))) (not (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))

  derived clause number: 226
  rule: factoring
  expr args: []
  clause args: [derived 179]
  backptr: nil
  conclusion: (or (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))))

  derived clause number: 227
  rule: resolution
  expr args: [(not (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))), (or (= (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))), (or )]
  clause args: [derived 226, derived 225]
  backptr: nil
  conclusion: (or (= (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))

  derived clause number: 228
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))), (or (= (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))), (or )]
  clause args: [derived 224, derived 227]
  backptr: nil
  conclusion: (or (= (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))

  derived clause number: 229
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 3 ONE)) (* 3 ONE))

  derived clause number: 230
  rule: or_single
  expr args: []
  clause args: [derived 229]
  backptr: nil
  conclusion: (or (= (+ (* 3 ONE)) (* 3 ONE)))

  derived clause number: 231
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 3 ONE) (+ (* 3 ONE))) (not (= (+ (* 3 ONE)) (* 3 ONE))))

  derived clause number: 232
  rule: resolution
  expr args: [(not (= (+ (* 3 ONE)) (* 3 ONE))), (or (= (* 3 ONE) (+ (* 3 ONE)))), (or )]
  clause args: [derived 230, derived 231]
  backptr: nil
  conclusion: (or (= (* 3 ONE) (+ (* 3 ONE))))

  derived clause number: 233
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE)))) (not (= (* 3 ONE) (+ (* 3 ONE)))))

  derived clause number: 234
  rule: resolution
  expr args: [(not (= (* 3 ONE) (+ (* 3 ONE)))), (or (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE))))), (or )]
  clause args: [derived 232, derived 233]
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE)))))

  derived clause number: 235
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE)))

  derived clause number: 236
  rule: or_single
  expr args: []
  clause args: [derived 235]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE))))

  derived clause number: 237
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE))) (not (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE))))) (not (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE)))))

  derived clause number: 238
  rule: resolution
  expr args: [(not (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE))))), (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE))) (not (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE))))), (or )]
  clause args: [derived 234, derived 237]
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE))) (not (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE)))))

  derived clause number: 239
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE)))), (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))), (or )]
  clause args: [derived 236, derived 238]
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE))))

  derived clause number: 240
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* -3 ONE)) (* -1 (* 3 ONE))) (not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))))

  derived clause number: 241
  rule: resolution
  expr args: [(not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))), (or (= (+ (* -3 ONE)) (* -1 (* 3 ONE)))), (or )]
  clause args: [derived 239, derived 240]
  backptr: nil
  conclusion: (or (= (+ (* -3 ONE)) (* -1 (* 3 ONE))))

  derived clause number: 242
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))) (not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))))

  derived clause number: 243
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE)))) (not (= (* -1 (* 3 ONE)) (+ (* -3 ONE))))), (or )]
  clause args: [derived 51, derived 242]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE)))) (not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))))

  derived clause number: 244
  rule: resolution
  expr args: [(not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE))))), (or )]
  clause args: [derived 239, derived 243]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE)))))

  derived clause number: 245
  rule: flatten
  expr args: [(+ (+ (* -3 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (+ (* -3 ONE))))

  derived clause number: 246
  rule: or_single
  expr args: []
  clause args: [derived 245]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (+ (* -3 ONE)))))

  derived clause number: 247
  rule: flatten
  expr args: [(+ (* 0 ONE)), (+ (+ (* -3 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))

  derived clause number: 248
  rule: or_single
  expr args: []
  clause args: [derived 247]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))))

  derived clause number: 249
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (+ (* -3 ONE))))) (not (= (+ (* 0 ONE) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))))

  derived clause number: 250
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (+ (* -3 ONE))))), (or (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))) (not (= (+ (* 0 ONE) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))))), (or )]
  clause args: [derived 246, derived 249]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))) (not (= (+ (* 0 ONE) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))))

  derived clause number: 251
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))), (or (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))), (or )]
  clause args: [derived 248, derived 250]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))))

  derived clause number: 252
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE))))) (not (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))))

  derived clause number: 253
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE))))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))))), (or )]
  clause args: [derived 244, derived 252]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))))

  derived clause number: 254
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE)))), (or )]
  clause args: [derived 251, derived 253]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE))))

  derived clause number: 255
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE) (* -3 ONE)), (+ (* -3 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (* -3 ONE)) (+ (* -3 ONE)))

  derived clause number: 256
  rule: or_single
  expr args: []
  clause args: [derived 255]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -3 ONE)) (+ (* -3 ONE))))

  derived clause number: 257
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE)))) (not (= (+ (* 0 ONE) (* -3 ONE)) (+ (* -3 ONE)))))

  derived clause number: 258
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE))) (not (= (+ (* 0 ONE) (* -3 ONE)) (+ (* -3 ONE))))), (or )]
  clause args: [derived 254, derived 257]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE))) (not (= (+ (* 0 ONE) (* -3 ONE)) (+ (* -3 ONE)))))

  derived clause number: 259
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -3 ONE)) (+ (* -3 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE)))), (or )]
  clause args: [derived 256, derived 258]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE))))

  derived clause number: 260
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE)))) (not (= (+ (* -3 ONE)) (* -1 (* 3 ONE)))))

  derived clause number: 261
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE))) (not (= (+ (* -3 ONE)) (* -1 (* 3 ONE))))), (or )]
  clause args: [derived 259, derived 260]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE))) (not (= (+ (* -3 ONE)) (* -1 (* 3 ONE)))))

  derived clause number: 262
  rule: resolution
  expr args: [(not (= (+ (* -3 ONE)) (* -1 (* 3 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE)))), (or )]
  clause args: [derived 241, derived 261]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE))))

  derived clause number: 263
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE)))))

  derived clause number: 264
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE))))), (or )]
  clause args: [derived 180, derived 263]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE)))))

  derived clause number: 265
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))))), (or )]
  clause args: [derived 262, derived 264]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE)))))

  derived clause number: 266
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))) (not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))))) (not (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))))

  derived clause number: 267
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))) (not (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE)))))), (or )]
  clause args: [derived 265, derived 266]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))) (not (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))))

  derived clause number: 268
  rule: resolution
  expr args: [(not (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))))), (or )]
  clause args: [derived 226, derived 267]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))))

  derived clause number: 269
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))))) (not (= (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))

  derived clause number: 270
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))) (not (= (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))), (or )]
  clause args: [derived 268, derived 269]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))) (not (= (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))

  derived clause number: 271
  rule: resolution
  expr args: [(not (= (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))), (or )]
  clause args: [derived 228, derived 270]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))

  derived clause number: 272
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))))

  derived clause number: 273
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))) (not (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))) (not (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))))

  derived clause number: 274
  rule: resolution
  expr args: [(not (= (< x y) (not (<= (+ y (* -1 x)) (* 0 ONE))))), (or (= (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))) (not (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))))), (or )]
  clause args: [derived 226, derived 273]
  backptr: nil
  conclusion: (or (= (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))) (not (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))))

  derived clause number: 275
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))), (or (= (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))))), (or )]
  clause args: [derived 272, derived 274]
  backptr: nil
  conclusion: (or (= (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))))

  derived clause number: 276
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))) (not (= (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))

  derived clause number: 277
  rule: resolution
  expr args: [(not (= (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))))), (or (= (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))), (or )]
  clause args: [derived 275, derived 276]
  backptr: nil
  conclusion: (or (= (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))

  derived clause number: 278
  rule: resolution
  expr args: [(not (= (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))), (or (= (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))), (or )]
  clause args: [derived 271, derived 277]
  backptr: nil
  conclusion: (or (= (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))

  derived clause number: 279
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE))))

  derived clause number: 280
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))) (not (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)))) (not (= (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))))

  derived clause number: 281
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))) (not (= (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))), (or )]
  clause args: [derived 279, derived 280]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))) (not (= (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))))

  derived clause number: 282
  rule: resolution
  expr args: [(not (= (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))), (or )]
  clause args: [derived 278, derived 281]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))))

  derived clause number: 283
  rule: not_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))))

  derived clause number: 284
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))), (or (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))))), (or )]
  clause args: [derived 282, derived 283]
  backptr: nil
  conclusion: (or (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))))

  derived clause number: 285
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))))) (not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))))

  derived clause number: 286
  rule: resolution
  expr args: [(not (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))))), (or (not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))), (or )]
  clause args: [derived 284, derived 285]
  backptr: nil
  conclusion: (or (not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))))

  derived clause number: 287
  rule: resolution
  expr args: [(not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))), (or (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))))]
  clause args: [derived 5, derived 286]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x)))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))))

  derived clause number: 288
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (< x y) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (< x y)) (=> (< x y) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= x x))))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))))]
  clause args: [derived 287, derived 0]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))))

  derived clause number: 289
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 4 ONE)) (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))), (or ), (or (not (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))]
  clause args: [derived 4, derived 288]
  backptr: nil
  conclusion: (or (not (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))))

  derived clause number: 290
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (not (not (<= (+ y (* -1 x)) (* 0 ONE)))))

  derived clause number: 291
  rule: resolution
  expr args: [(not (not (<= (+ y (* -1 x)) (* 0 ONE)))), (or (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))), (or (<= (+ y (* -1 x)) (* 0 ONE)))]
  clause args: [derived 2, derived 290]
  backptr: nil
  conclusion: (or (<= (+ y (* -1 x)) (* 0 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))))

  derived clause number: 292
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true) (not true))

  derived clause number: 293
  rule: resolution
  expr args: [(not true), (or (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)), (or )]
  clause args: [derived 1, derived 292]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))

  derived clause number: 294
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)) (not (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))

  derived clause number: 295
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)), (or (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))), (or )]
  clause args: [derived 293, derived 294]
  backptr: nil
  conclusion: (or (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))

  derived clause number: 296
  rule: and+
  expr args: [(and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))), (and (not (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))) (not (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))]
  clause args: []
  backptr: nil
  conclusion: (or (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))) (not (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))) (not (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))

  derived clause number: 297
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))) (not (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))

  derived clause number: 298
  rule: resolution
  expr args: [(not (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))), (or ), (or (not (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))]
  clause args: [derived 297, derived 289]
  backptr: nil
  conclusion: (or (not (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))))

  derived clause number: 299
  rule: resolution
  expr args: [(not (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))) (not (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))]
  clause args: [derived 296, derived 298]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))) (not (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))

  derived clause number: 300
  rule: resolution
  expr args: [(not (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))))), (or )]
  clause args: [derived 295, derived 299]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))))

  derived clause number: 301
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE))))), (or ), (or (<= (+ y (* -1 x)) (* 0 ONE)))]
  clause args: [derived 291, derived 300]
  backptr: nil
  conclusion: (or (<= (+ y (* -1 x)) (* 0 ONE)))

  derived clause number: 302
  rule: =>+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true)))) (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))))

  derived clause number: 303
  rule: resolution
  expr args: [(not (=> (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 3 ONE))) (not (<= (+ y (* -1 x)) (* 0 ONE)))) (=> (not (<= (+ y (* -1 x)) (* 0 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))) true))))), (or ), (or (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))))]
  clause args: [derived 302, derived 289]
  backptr: nil
  conclusion: (or (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE))))

  derived clause number: 304
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))) (not (<= (+ y (* -1 x)) (* 0 ONE))))

  derived clause number: 305
  rule: resolution
  expr args: [(not (and (not (<= (+ y (* -1 x)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* 2 ONE)))), (or (not (<= (+ y (* -1 x)) (* 0 ONE)))), (or )]
  clause args: [derived 303, derived 304]
  backptr: nil
  conclusion: (or (not (<= (+ y (* -1 x)) (* 0 ONE))))

  derived clause number: 306
  rule: resolution
  expr args: [(not (<= (+ y (* -1 x)) (* 0 ONE))), (or ), (or )]
  clause args: [derived 301, derived 305]
  backptr: nil
  conclusion: (or )

  derived clause number: 307
  rule: or_nil
  expr args: []
  clause args: [derived 306]
  backptr: nil
  conclusion: false

