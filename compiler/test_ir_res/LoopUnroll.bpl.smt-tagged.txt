vars: ControlFlow ONE x@0 x@1 x@2
premises:
  a0: (not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))))
  a1: (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))))
  a2: (not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))
steps:
  derived clause number: 0
  rule: or_single
  expr args: []
  clause args: [premise a0]
  backptr: nil
  conclusion: (or (not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))))

  derived clause number: 1
  rule: or_single
  expr args: []
  clause args: [premise a1]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))))))

  derived clause number: 2
  rule: or_single
  expr args: []
  clause args: [premise a2]
  backptr: nil
  conclusion: (or (not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))))

  derived clause number: 3
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))

  derived clause number: 4
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))) (not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))))

  derived clause number: 5
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))), (or (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))]
  clause args: [derived 3, derived 4]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))

  derived clause number: 6
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (not (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))))

  derived clause number: 7
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))))

  derived clause number: 8
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))) (not (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))), (or (not (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))))]
  clause args: [derived 6, derived 7]
  backptr: nil
  conclusion: (or (not (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))) (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))) (not (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))))

  derived clause number: 9
  rule: factoring
  expr args: []
  clause args: [derived 5]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))

  derived clause number: 10
  rule: factoring
  expr args: []
  clause args: [derived 8]
  backptr: nil
  conclusion: (or (not (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))) (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))))

  derived clause number: 11
  rule: resolution
  expr args: [(not (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))), (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))))]
  clause args: [derived 9, derived 10]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))) (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))))

  derived clause number: 12
  rule: =>+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))) (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))))

  derived clause number: 13
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))) (not (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))

  derived clause number: 14
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))))

  derived clause number: 15
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))) (not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))))

  derived clause number: 16
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))), (or (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))))]
  clause args: [derived 14, derived 15]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))))

  derived clause number: 17
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))))

  derived clause number: 18
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))) (not (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))))

  derived clause number: 19
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))) (not (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))))), (or (not (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))))]
  clause args: [derived 17, derived 18]
  backptr: nil
  conclusion: (or (not (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))) (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))) (not (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))))

  derived clause number: 20
  rule: factoring
  expr args: []
  clause args: [derived 16]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))))

  derived clause number: 21
  rule: factoring
  expr args: []
  clause args: [derived 19]
  backptr: nil
  conclusion: (or (not (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))) (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))))

  derived clause number: 22
  rule: resolution
  expr args: [(not (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))))), (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))))]
  clause args: [derived 20, derived 21]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))) (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))))

  derived clause number: 23
  rule: =>+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))))

  derived clause number: 24
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))))) (not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))))

  derived clause number: 25
  rule: factoring
  expr args: []
  clause args: [derived 22]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))))

  derived clause number: 26
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))))), (or (not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))), (or )]
  clause args: [derived 25, derived 24]
  backptr: nil
  conclusion: (or (not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))))

  derived clause number: 27
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))), (or (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))), (or (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))]
  clause args: [derived 23, derived 26]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))))

  derived clause number: 28
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))), (or ), (or (not (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))))]
  clause args: [derived 17, derived 0]
  backptr: nil
  conclusion: (or (not (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))))

  derived clause number: 29
  rule: resolution
  expr args: [(not (= (* -1 (* 2 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))), (or ), (or (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))]
  clause args: [derived 27, derived 28]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 30
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (not (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))))

  derived clause number: 31
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))), (or (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))), (or )]
  clause args: [derived 29, derived 30]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))))

  derived clause number: 32
  rule: and+
  expr args: [(and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))), (and (not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))) (not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))]
  clause args: []
  backptr: nil
  conclusion: (or (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))) (not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))) (not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))

  derived clause number: 33
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))) (not (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))

  derived clause number: 34
  rule: resolution
  expr args: [(not (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))), (or (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))) (not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))]
  clause args: [derived 32, derived 33]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))) (not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))

  derived clause number: 35
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))), (or )]
  clause args: [derived 31, derived 34]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))

  derived clause number: 36
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))) (not (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))

  derived clause number: 37
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))) (not (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))

  derived clause number: 38
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))

  derived clause number: 39
  rule: true+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or true)

  derived clause number: 40
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (not true))

  derived clause number: 41
  rule: resolution
  expr args: [(not true), (or (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true)), (or )]
  clause args: [derived 39, derived 40]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true))

  derived clause number: 42
  rule: and+
  expr args: [(and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))), (and (not (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true)) (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))]
  clause args: []
  backptr: nil
  conclusion: (or (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true)) (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))

  derived clause number: 43
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))) (not (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))

  derived clause number: 44
  rule: resolution
  expr args: [(not (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))), (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true)) (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))]
  clause args: [derived 42, derived 43]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true)) (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))

  derived clause number: 45
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (not true))

  derived clause number: 46
  rule: resolution
  expr args: [(not true), (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true)), (or )]
  clause args: [derived 39, derived 45]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true))

  derived clause number: 47
  rule: and+
  expr args: [(and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))), (and (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true)) (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))]
  clause args: []
  backptr: nil
  conclusion: (or (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true)) (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))

  derived clause number: 48
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))) (not (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))

  derived clause number: 49
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))))

  derived clause number: 50
  rule: false-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not false))

  derived clause number: 51
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not false) true) (not (not false)) (not true))

  derived clause number: 52
  rule: resolution
  expr args: [(not (not false)), (or (= (not false) true) (not true)), (or )]
  clause args: [derived 50, derived 51]
  backptr: nil
  conclusion: (or (= (not false) true) (not true))

  derived clause number: 53
  rule: resolution
  expr args: [(not true), (or (= (not false) true)), (or )]
  clause args: [derived 39, derived 52]
  backptr: nil
  conclusion: (or (= (not false) true))

  derived clause number: 54
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (<= (* 97 ONE) (* 0 ONE)) false) (<= (* 97 ONE) (* 0 ONE)) false)

  derived clause number: 55
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 97 ONE)) (* 97 ONE))

  derived clause number: 56
  rule: or_single
  expr args: []
  clause args: [derived 55]
  backptr: nil
  conclusion: (or (= (+ (* 97 ONE)) (* 97 ONE)))

  derived clause number: 57
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 97 ONE) (+ (* 97 ONE))) (not (= (+ (* 97 ONE)) (* 97 ONE))))

  derived clause number: 58
  rule: resolution
  expr args: [(not (= (+ (* 97 ONE)) (* 97 ONE))), (or (= (* 97 ONE) (+ (* 97 ONE)))), (or )]
  clause args: [derived 56, derived 57]
  backptr: nil
  conclusion: (or (= (* 97 ONE) (+ (* 97 ONE))))

  derived clause number: 59
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (* 97 ONE)) (* 1 (+ (* 97 ONE)))) (not (= (* 97 ONE) (+ (* 97 ONE)))))

  derived clause number: 60
  rule: resolution
  expr args: [(not (= (* 97 ONE) (+ (* 97 ONE)))), (or (= (* 1 (* 97 ONE)) (* 1 (+ (* 97 ONE))))), (or )]
  clause args: [derived 58, derived 59]
  backptr: nil
  conclusion: (or (= (* 1 (* 97 ONE)) (* 1 (+ (* 97 ONE)))))

  derived clause number: 61
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* 1 (+ (* 97 ONE))) (+ (* 97 ONE)))

  derived clause number: 62
  rule: or_single
  expr args: []
  clause args: [derived 61]
  backptr: nil
  conclusion: (or (= (* 1 (+ (* 97 ONE))) (+ (* 97 ONE))))

  derived clause number: 63
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (* 97 ONE)) (+ (* 97 ONE))) (not (= (* 1 (* 97 ONE)) (* 1 (+ (* 97 ONE))))) (not (= (* 1 (+ (* 97 ONE))) (+ (* 97 ONE)))))

  derived clause number: 64
  rule: resolution
  expr args: [(not (= (* 1 (* 97 ONE)) (* 1 (+ (* 97 ONE))))), (or (= (* 1 (* 97 ONE)) (+ (* 97 ONE))) (not (= (* 1 (+ (* 97 ONE))) (+ (* 97 ONE))))), (or )]
  clause args: [derived 60, derived 63]
  backptr: nil
  conclusion: (or (= (* 1 (* 97 ONE)) (+ (* 97 ONE))) (not (= (* 1 (+ (* 97 ONE))) (+ (* 97 ONE)))))

  derived clause number: 65
  rule: resolution
  expr args: [(not (= (* 1 (+ (* 97 ONE))) (+ (* 97 ONE)))), (or (= (* 1 (* 97 ONE)) (+ (* 97 ONE)))), (or )]
  clause args: [derived 62, derived 64]
  backptr: nil
  conclusion: (or (= (* 1 (* 97 ONE)) (+ (* 97 ONE))))

  derived clause number: 66
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE)) (* 0 ONE))

  derived clause number: 67
  rule: or_single
  expr args: []
  clause args: [derived 66]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE)) (* 0 ONE)))

  derived clause number: 68
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 0 ONE) (+ (* 0 ONE))) (not (= (+ (* 0 ONE)) (* 0 ONE))))

  derived clause number: 69
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE)) (* 0 ONE))), (or (= (* 0 ONE) (+ (* 0 ONE)))), (or )]
  clause args: [derived 67, derived 68]
  backptr: nil
  conclusion: (or (= (* 0 ONE) (+ (* 0 ONE))))

  derived clause number: 70
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 0 ONE)) (* -1 (+ (* 0 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))))

  derived clause number: 71
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (* -1 (* 0 ONE)) (* -1 (+ (* 0 ONE))))), (or )]
  clause args: [derived 69, derived 70]
  backptr: nil
  conclusion: (or (= (* -1 (* 0 ONE)) (* -1 (+ (* 0 ONE)))))

  derived clause number: 72
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 0 ONE))) (+ (* 0 ONE)))

  derived clause number: 73
  rule: or_single
  expr args: []
  clause args: [derived 72]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 0 ONE))) (+ (* 0 ONE))))

  derived clause number: 74
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 0 ONE)) (+ (* 0 ONE))) (not (= (* -1 (* 0 ONE)) (* -1 (+ (* 0 ONE))))) (not (= (* -1 (+ (* 0 ONE))) (+ (* 0 ONE)))))

  derived clause number: 75
  rule: resolution
  expr args: [(not (= (* -1 (* 0 ONE)) (* -1 (+ (* 0 ONE))))), (or (= (* -1 (* 0 ONE)) (+ (* 0 ONE))) (not (= (* -1 (+ (* 0 ONE))) (+ (* 0 ONE))))), (or )]
  clause args: [derived 71, derived 74]
  backptr: nil
  conclusion: (or (= (* -1 (* 0 ONE)) (+ (* 0 ONE))) (not (= (* -1 (+ (* 0 ONE))) (+ (* 0 ONE)))))

  derived clause number: 76
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 0 ONE))) (+ (* 0 ONE)))), (or (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))), (or )]
  clause args: [derived 73, derived 75]
  backptr: nil
  conclusion: (or (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))

  derived clause number: 77
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (* 1 (* 97 ONE)) (+ (* 97 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 78
  rule: resolution
  expr args: [(not (= (* 1 (* 97 ONE)) (+ (* 97 ONE)))), (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 65, derived 77]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 79
  rule: resolution
  expr args: [(not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))), (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 97 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 76, derived 78]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 97 ONE)) (+ (* 0 ONE)))))

  derived clause number: 80
  rule: flatten
  expr args: [(+ (+ (* 0 ONE))), (+ (+ (* 97 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (+ (* 0 ONE))))

  derived clause number: 81
  rule: or_single
  expr args: []
  clause args: [derived 80]
  backptr: nil
  conclusion: (or (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (+ (* 0 ONE)))))

  derived clause number: 82
  rule: flatten
  expr args: [(+ (* 97 ONE)), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 97 ONE) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE)))

  derived clause number: 83
  rule: or_single
  expr args: []
  clause args: [derived 82]
  backptr: nil
  conclusion: (or (= (+ (* 97 ONE) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE))))

  derived clause number: 84
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE))) (not (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (+ (* 0 ONE))))) (not (= (+ (* 97 ONE) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE)))))

  derived clause number: 85
  rule: resolution
  expr args: [(not (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (+ (* 0 ONE))))), (or (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE))) (not (= (+ (* 97 ONE) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE))))), (or )]
  clause args: [derived 81, derived 84]
  backptr: nil
  conclusion: (or (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE))) (not (= (+ (* 97 ONE) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE)))))

  derived clause number: 86
  rule: resolution
  expr args: [(not (= (+ (* 97 ONE) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE)))), (or (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE)))), (or )]
  clause args: [derived 83, derived 85]
  backptr: nil
  conclusion: (or (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE))))

  derived clause number: 87
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE))) (not (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 97 ONE)) (+ (* 0 ONE))))) (not (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE)))))

  derived clause number: 88
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 97 ONE)) (+ (* 0 ONE))))), (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE))) (not (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE))))), (or )]
  clause args: [derived 79, derived 87]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE))) (not (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE)))))

  derived clause number: 89
  rule: resolution
  expr args: [(not (= (+ (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE)))), (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE)))), (or )]
  clause args: [derived 86, derived 88]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE))))

  derived clause number: 90
  rule: consolidate
  expr args: [(+ ), (+ (* 97 ONE) (* 0 ONE)), (+ (* 97 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 97 ONE) (* 0 ONE)) (+ (* 97 ONE)))

  derived clause number: 91
  rule: or_single
  expr args: []
  clause args: [derived 90]
  backptr: nil
  conclusion: (or (= (+ (* 97 ONE) (* 0 ONE)) (+ (* 97 ONE))))

  derived clause number: 92
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE))) (not (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE)))) (not (= (+ (* 97 ONE) (* 0 ONE)) (+ (* 97 ONE)))))

  derived clause number: 93
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE) (* 0 ONE)))), (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE))) (not (= (+ (* 97 ONE) (* 0 ONE)) (+ (* 97 ONE))))), (or )]
  clause args: [derived 89, derived 92]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE))) (not (= (+ (* 97 ONE) (* 0 ONE)) (+ (* 97 ONE)))))

  derived clause number: 94
  rule: resolution
  expr args: [(not (= (+ (* 97 ONE) (* 0 ONE)) (+ (* 97 ONE)))), (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE)))), (or )]
  clause args: [derived 91, derived 93]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE))))

  derived clause number: 95
  rule: or_single_rev
  expr args: []
  clause args: [derived 94]
  backptr: nil
  conclusion: (= (+ (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 97 ONE)))

  derived clause number: 96
  rule: farkas
  expr args: []
  clause args: [derived 95]
  backptr: nil
  conclusion: (or (not (<= (* 97 ONE) (* 0 ONE))))

  derived clause number: 97
  rule: resolution
  expr args: [(not (<= (* 97 ONE) (* 0 ONE))), (or ), (or (= (<= (* 97 ONE) (* 0 ONE)) false) false)]
  clause args: [derived 54, derived 96]
  backptr: nil
  conclusion: (or (= (<= (* 97 ONE) (* 0 ONE)) false) false)

  derived clause number: 98
  rule: resolution
  expr args: [(not false), (or ), (or (= (<= (* 97 ONE) (* 0 ONE)) false))]
  clause args: [derived 97, derived 50]
  backptr: nil
  conclusion: (or (= (<= (* 97 ONE) (* 0 ONE)) false))

  derived clause number: 99
  rule: not_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not (<= (* 97 ONE) (* 0 ONE))) (not false)) (not (= (<= (* 97 ONE) (* 0 ONE)) false)))

  derived clause number: 100
  rule: resolution
  expr args: [(not (= (<= (* 97 ONE) (* 0 ONE)) false)), (or (= (not (<= (* 97 ONE) (* 0 ONE))) (not false))), (or )]
  clause args: [derived 98, derived 99]
  backptr: nil
  conclusion: (or (= (not (<= (* 97 ONE) (* 0 ONE))) (not false)))

  derived clause number: 101
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE)))) (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE))))

  derived clause number: 102
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 3 ONE)) (* 3 ONE))

  derived clause number: 103
  rule: or_single
  expr args: []
  clause args: [derived 102]
  backptr: nil
  conclusion: (or (= (+ (* 3 ONE)) (* 3 ONE)))

  derived clause number: 104
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 3 ONE) (+ (* 3 ONE))) (not (= (+ (* 3 ONE)) (* 3 ONE))))

  derived clause number: 105
  rule: resolution
  expr args: [(not (= (+ (* 3 ONE)) (* 3 ONE))), (or (= (* 3 ONE) (+ (* 3 ONE)))), (or )]
  clause args: [derived 103, derived 104]
  backptr: nil
  conclusion: (or (= (* 3 ONE) (+ (* 3 ONE))))

  derived clause number: 106
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (* 3 ONE)) (* 1 (+ (* 3 ONE)))) (not (= (* 3 ONE) (+ (* 3 ONE)))))

  derived clause number: 107
  rule: resolution
  expr args: [(not (= (* 3 ONE) (+ (* 3 ONE)))), (or (= (* 1 (* 3 ONE)) (* 1 (+ (* 3 ONE))))), (or )]
  clause args: [derived 105, derived 106]
  backptr: nil
  conclusion: (or (= (* 1 (* 3 ONE)) (* 1 (+ (* 3 ONE)))))

  derived clause number: 108
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* 1 (+ (* 3 ONE))) (+ (* 3 ONE)))

  derived clause number: 109
  rule: or_single
  expr args: []
  clause args: [derived 108]
  backptr: nil
  conclusion: (or (= (* 1 (+ (* 3 ONE))) (+ (* 3 ONE))))

  derived clause number: 110
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (* 3 ONE)) (+ (* 3 ONE))) (not (= (* 1 (* 3 ONE)) (* 1 (+ (* 3 ONE))))) (not (= (* 1 (+ (* 3 ONE))) (+ (* 3 ONE)))))

  derived clause number: 111
  rule: resolution
  expr args: [(not (= (* 1 (* 3 ONE)) (* 1 (+ (* 3 ONE))))), (or (= (* 1 (* 3 ONE)) (+ (* 3 ONE))) (not (= (* 1 (+ (* 3 ONE))) (+ (* 3 ONE))))), (or )]
  clause args: [derived 107, derived 110]
  backptr: nil
  conclusion: (or (= (* 1 (* 3 ONE)) (+ (* 3 ONE))) (not (= (* 1 (+ (* 3 ONE))) (+ (* 3 ONE)))))

  derived clause number: 112
  rule: resolution
  expr args: [(not (= (* 1 (+ (* 3 ONE))) (+ (* 3 ONE)))), (or (= (* 1 (* 3 ONE)) (+ (* 3 ONE)))), (or )]
  clause args: [derived 109, derived 111]
  backptr: nil
  conclusion: (or (= (* 1 (* 3 ONE)) (+ (* 3 ONE))))

  derived clause number: 113
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE)) (* 100 ONE))

  derived clause number: 114
  rule: or_single
  expr args: []
  clause args: [derived 113]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE)) (* 100 ONE)))

  derived clause number: 115
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 100 ONE) (+ (* 100 ONE))) (not (= (+ (* 100 ONE)) (* 100 ONE))))

  derived clause number: 116
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE)) (* 100 ONE))), (or (= (* 100 ONE) (+ (* 100 ONE)))), (or )]
  clause args: [derived 114, derived 115]
  backptr: nil
  conclusion: (or (= (* 100 ONE) (+ (* 100 ONE))))

  derived clause number: 117
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 100 ONE)) (* -1 (+ (* 100 ONE)))) (not (= (* 100 ONE) (+ (* 100 ONE)))))

  derived clause number: 118
  rule: resolution
  expr args: [(not (= (* 100 ONE) (+ (* 100 ONE)))), (or (= (* -1 (* 100 ONE)) (* -1 (+ (* 100 ONE))))), (or )]
  clause args: [derived 116, derived 117]
  backptr: nil
  conclusion: (or (= (* -1 (* 100 ONE)) (* -1 (+ (* 100 ONE)))))

  derived clause number: 119
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 100 ONE))) (+ (* -100 ONE)))

  derived clause number: 120
  rule: or_single
  expr args: []
  clause args: [derived 119]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 100 ONE))) (+ (* -100 ONE))))

  derived clause number: 121
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 100 ONE)) (+ (* -100 ONE))) (not (= (* -1 (* 100 ONE)) (* -1 (+ (* 100 ONE))))) (not (= (* -1 (+ (* 100 ONE))) (+ (* -100 ONE)))))

  derived clause number: 122
  rule: resolution
  expr args: [(not (= (* -1 (* 100 ONE)) (* -1 (+ (* 100 ONE))))), (or (= (* -1 (* 100 ONE)) (+ (* -100 ONE))) (not (= (* -1 (+ (* 100 ONE))) (+ (* -100 ONE))))), (or )]
  clause args: [derived 118, derived 121]
  backptr: nil
  conclusion: (or (= (* -1 (* 100 ONE)) (+ (* -100 ONE))) (not (= (* -1 (+ (* 100 ONE))) (+ (* -100 ONE)))))

  derived clause number: 123
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 100 ONE))) (+ (* -100 ONE)))), (or (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))), (or )]
  clause args: [derived 120, derived 122]
  backptr: nil
  conclusion: (or (= (* -1 (* 100 ONE)) (+ (* -100 ONE))))

  derived clause number: 124
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (* 1 (* 3 ONE)) (+ (* 3 ONE)))) (not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))) (not (= (* 1 (* 97 ONE)) (+ (* 97 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 125
  rule: resolution
  expr args: [(not (= (* 1 (* 3 ONE)) (+ (* 3 ONE)))), (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))) (not (= (* 1 (* 97 ONE)) (+ (* 97 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 112, derived 124]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))) (not (= (* 1 (* 97 ONE)) (+ (* 97 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 126
  rule: resolution
  expr args: [(not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))), (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (* 1 (* 97 ONE)) (+ (* 97 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 123, derived 125]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (* 1 (* 97 ONE)) (+ (* 97 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 127
  rule: resolution
  expr args: [(not (= (* 1 (* 97 ONE)) (+ (* 97 ONE)))), (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 65, derived 126]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 128
  rule: resolution
  expr args: [(not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))), (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 76, derived 127]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE)))))

  derived clause number: 129
  rule: flatten
  expr args: [(+ (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))), (+ (+ (* 3 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))))

  derived clause number: 130
  rule: or_single
  expr args: []
  clause args: [derived 129]
  backptr: nil
  conclusion: (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE)))))

  derived clause number: 131
  rule: flatten
  expr args: [(+ (* 3 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))), (+ (+ (* -100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 3 ONE) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))))

  derived clause number: 132
  rule: or_single
  expr args: []
  clause args: [derived 131]
  backptr: nil
  conclusion: (or (= (+ (* 3 ONE) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE)))))

  derived clause number: 133
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))))) (not (= (+ (* 3 ONE) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))))))

  derived clause number: 134
  rule: resolution
  expr args: [(not (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))))), (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (+ (* 3 ONE) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE)))))), (or )]
  clause args: [derived 130, derived 133]
  backptr: nil
  conclusion: (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE)))) (not (= (+ (* 3 ONE) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))))))

  derived clause number: 135
  rule: resolution
  expr args: [(not (= (+ (* 3 ONE) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))))), (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 132, derived 134]
  backptr: nil
  conclusion: (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE)))))

  derived clause number: 136
  rule: flatten
  expr args: [(+ (* 3 ONE) (* -100 ONE) (+ (* 0 ONE))), (+ (+ (* 97 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))))

  derived clause number: 137
  rule: or_single
  expr args: []
  clause args: [derived 136]
  backptr: nil
  conclusion: (or (= (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE)))))

  derived clause number: 138
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE)))) (not (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))))) (not (= (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))))))

  derived clause number: 139
  rule: resolution
  expr args: [(not (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))))), (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE)))) (not (= (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE)))))), (or )]
  clause args: [derived 135, derived 138]
  backptr: nil
  conclusion: (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE)))) (not (= (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))))))

  derived clause number: 140
  rule: resolution
  expr args: [(not (= (+ (* 3 ONE) (* -100 ONE) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))))), (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))))), (or )]
  clause args: [derived 137, derived 139]
  backptr: nil
  conclusion: (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE)))))

  derived clause number: 141
  rule: flatten
  expr args: [(+ (* 3 ONE) (* -100 ONE) (* 97 ONE)), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)))

  derived clause number: 142
  rule: or_single
  expr args: []
  clause args: [derived 141]
  backptr: nil
  conclusion: (or (= (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE))))

  derived clause number: 143
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE))) (not (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))))) (not (= (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)))))

  derived clause number: 144
  rule: resolution
  expr args: [(not (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))))), (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE))) (not (= (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE))))), (or )]
  clause args: [derived 140, derived 143]
  backptr: nil
  conclusion: (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE))) (not (= (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)))))

  derived clause number: 145
  rule: resolution
  expr args: [(not (= (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)))), (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)))), (or )]
  clause args: [derived 142, derived 144]
  backptr: nil
  conclusion: (or (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE))))

  derived clause number: 146
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE))) (not (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))))) (not (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)))))

  derived clause number: 147
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))))), (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE))) (not (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE))))), (or )]
  clause args: [derived 128, derived 146]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE))) (not (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)))))

  derived clause number: 148
  rule: resolution
  expr args: [(not (= (+ (+ (* 3 ONE)) (+ (* -100 ONE)) (+ (* 97 ONE)) (+ (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)))), (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)))), (or )]
  clause args: [derived 145, derived 147]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE))))

  derived clause number: 149
  rule: consolidate
  expr args: [(+ ), (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)) (+ ))

  derived clause number: 150
  rule: or_single
  expr args: []
  clause args: [derived 149]
  backptr: nil
  conclusion: (or (= (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)) (+ )))

  derived clause number: 151
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)))) (not (= (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)) (+ ))))

  derived clause number: 152
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)))), (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)) (+ )))), (or )]
  clause args: [derived 148, derived 151]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)) (+ ))))

  derived clause number: 153
  rule: resolution
  expr args: [(not (= (+ (* 3 ONE) (* -100 ONE) (* 97 ONE) (* 0 ONE)) (+ ))), (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ ))), (or )]
  clause args: [derived 150, derived 152]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ )))

  derived clause number: 154
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE)) (+ ))

  derived clause number: 155
  rule: or_single
  expr args: []
  clause args: [derived 154]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE)) (+ )))

  derived clause number: 156
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ ) (+ (* 0 ONE))) (not (= (+ (* 0 ONE)) (+ ))))

  derived clause number: 157
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE)) (+ ))), (or (= (+ ) (+ (* 0 ONE)))), (or )]
  clause args: [derived 155, derived 156]
  backptr: nil
  conclusion: (or (= (+ ) (+ (* 0 ONE))))

  derived clause number: 158
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ ))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 159
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ ))), (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE))))), (or )]
  clause args: [derived 153, derived 158]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 160
  rule: resolution
  expr args: [(not (= (+ ) (+ (* 0 ONE)))), (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 0 ONE)))), (or )]
  clause args: [derived 157, derived 159]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 0 ONE))))

  derived clause number: 161
  rule: or_single_rev
  expr args: []
  clause args: [derived 160]
  backptr: nil
  conclusion: (= (+ (* 1 (* 3 ONE)) (* -1 (* 100 ONE)) (* 1 (* 97 ONE)) (* -1 (* 0 ONE))) (+ (* 0 ONE)))

  derived clause number: 162
  rule: farkas
  expr args: []
  clause args: [derived 161]
  backptr: nil
  conclusion: (or (not (< (* 3 ONE) (* 100 ONE))) (not (<= (* 97 ONE) (* 0 ONE))))

  derived clause number: 163
  rule: resolution
  expr args: [(not (< (* 3 ONE) (* 100 ONE))), (or (not (<= (* 97 ONE) (* 0 ONE)))), (or (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE)))) (not (<= (* 97 ONE) (* 0 ONE))))]
  clause args: [derived 101, derived 162]
  backptr: nil
  conclusion: (or (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE)))) (not (<= (* 97 ONE) (* 0 ONE))) (not (<= (* 97 ONE) (* 0 ONE))))

  derived clause number: 164
  rule: total
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (<= (* 100 ONE) (* 3 ONE)) (< (* 3 ONE) (* 100 ONE)))

  derived clause number: 165
  rule: total
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (<= (* 97 ONE) (* 0 ONE)) (< (* 0 ONE) (* 97 ONE)))

  derived clause number: 166
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (* 100 ONE)) (* 1 (+ (* 100 ONE)))) (not (= (* 100 ONE) (+ (* 100 ONE)))))

  derived clause number: 167
  rule: resolution
  expr args: [(not (= (* 100 ONE) (+ (* 100 ONE)))), (or (= (* 1 (* 100 ONE)) (* 1 (+ (* 100 ONE))))), (or )]
  clause args: [derived 116, derived 166]
  backptr: nil
  conclusion: (or (= (* 1 (* 100 ONE)) (* 1 (+ (* 100 ONE)))))

  derived clause number: 168
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* 1 (+ (* 100 ONE))) (+ (* 100 ONE)))

  derived clause number: 169
  rule: or_single
  expr args: []
  clause args: [derived 168]
  backptr: nil
  conclusion: (or (= (* 1 (+ (* 100 ONE))) (+ (* 100 ONE))))

  derived clause number: 170
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (* 100 ONE)) (+ (* 100 ONE))) (not (= (* 1 (* 100 ONE)) (* 1 (+ (* 100 ONE))))) (not (= (* 1 (+ (* 100 ONE))) (+ (* 100 ONE)))))

  derived clause number: 171
  rule: resolution
  expr args: [(not (= (* 1 (* 100 ONE)) (* 1 (+ (* 100 ONE))))), (or (= (* 1 (* 100 ONE)) (+ (* 100 ONE))) (not (= (* 1 (+ (* 100 ONE))) (+ (* 100 ONE))))), (or )]
  clause args: [derived 167, derived 170]
  backptr: nil
  conclusion: (or (= (* 1 (* 100 ONE)) (+ (* 100 ONE))) (not (= (* 1 (+ (* 100 ONE))) (+ (* 100 ONE)))))

  derived clause number: 172
  rule: resolution
  expr args: [(not (= (* 1 (+ (* 100 ONE))) (+ (* 100 ONE)))), (or (= (* 1 (* 100 ONE)) (+ (* 100 ONE)))), (or )]
  clause args: [derived 169, derived 171]
  backptr: nil
  conclusion: (or (= (* 1 (* 100 ONE)) (+ (* 100 ONE))))

  derived clause number: 173
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE)))) (not (= (* 3 ONE) (+ (* 3 ONE)))))

  derived clause number: 174
  rule: resolution
  expr args: [(not (= (* 3 ONE) (+ (* 3 ONE)))), (or (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE))))), (or )]
  clause args: [derived 105, derived 173]
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE)))))

  derived clause number: 175
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE)))

  derived clause number: 176
  rule: or_single
  expr args: []
  clause args: [derived 175]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE))))

  derived clause number: 177
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE))) (not (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE))))) (not (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE)))))

  derived clause number: 178
  rule: resolution
  expr args: [(not (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE))))), (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE))) (not (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE))))), (or )]
  clause args: [derived 174, derived 177]
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE))) (not (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE)))))

  derived clause number: 179
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE)))), (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))), (or )]
  clause args: [derived 176, derived 178]
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE))))

  derived clause number: 180
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (* 0 ONE)) (* 1 (+ (* 0 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))))

  derived clause number: 181
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (* 1 (* 0 ONE)) (* 1 (+ (* 0 ONE))))), (or )]
  clause args: [derived 69, derived 180]
  backptr: nil
  conclusion: (or (= (* 1 (* 0 ONE)) (* 1 (+ (* 0 ONE)))))

  derived clause number: 182
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* 1 (+ (* 0 ONE))) (+ (* 0 ONE)))

  derived clause number: 183
  rule: or_single
  expr args: []
  clause args: [derived 182]
  backptr: nil
  conclusion: (or (= (* 1 (+ (* 0 ONE))) (+ (* 0 ONE))))

  derived clause number: 184
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (* 0 ONE)) (+ (* 0 ONE))) (not (= (* 1 (* 0 ONE)) (* 1 (+ (* 0 ONE))))) (not (= (* 1 (+ (* 0 ONE))) (+ (* 0 ONE)))))

  derived clause number: 185
  rule: resolution
  expr args: [(not (= (* 1 (* 0 ONE)) (* 1 (+ (* 0 ONE))))), (or (= (* 1 (* 0 ONE)) (+ (* 0 ONE))) (not (= (* 1 (+ (* 0 ONE))) (+ (* 0 ONE))))), (or )]
  clause args: [derived 181, derived 184]
  backptr: nil
  conclusion: (or (= (* 1 (* 0 ONE)) (+ (* 0 ONE))) (not (= (* 1 (+ (* 0 ONE))) (+ (* 0 ONE)))))

  derived clause number: 186
  rule: resolution
  expr args: [(not (= (* 1 (+ (* 0 ONE))) (+ (* 0 ONE)))), (or (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))), (or )]
  clause args: [derived 183, derived 185]
  backptr: nil
  conclusion: (or (= (* 1 (* 0 ONE)) (+ (* 0 ONE))))

  derived clause number: 187
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 97 ONE)) (* -1 (+ (* 97 ONE)))) (not (= (* 97 ONE) (+ (* 97 ONE)))))

  derived clause number: 188
  rule: resolution
  expr args: [(not (= (* 97 ONE) (+ (* 97 ONE)))), (or (= (* -1 (* 97 ONE)) (* -1 (+ (* 97 ONE))))), (or )]
  clause args: [derived 58, derived 187]
  backptr: nil
  conclusion: (or (= (* -1 (* 97 ONE)) (* -1 (+ (* 97 ONE)))))

  derived clause number: 189
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 97 ONE))) (+ (* -97 ONE)))

  derived clause number: 190
  rule: or_single
  expr args: []
  clause args: [derived 189]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 97 ONE))) (+ (* -97 ONE))))

  derived clause number: 191
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 97 ONE)) (+ (* -97 ONE))) (not (= (* -1 (* 97 ONE)) (* -1 (+ (* 97 ONE))))) (not (= (* -1 (+ (* 97 ONE))) (+ (* -97 ONE)))))

  derived clause number: 192
  rule: resolution
  expr args: [(not (= (* -1 (* 97 ONE)) (* -1 (+ (* 97 ONE))))), (or (= (* -1 (* 97 ONE)) (+ (* -97 ONE))) (not (= (* -1 (+ (* 97 ONE))) (+ (* -97 ONE))))), (or )]
  clause args: [derived 188, derived 191]
  backptr: nil
  conclusion: (or (= (* -1 (* 97 ONE)) (+ (* -97 ONE))) (not (= (* -1 (+ (* 97 ONE))) (+ (* -97 ONE)))))

  derived clause number: 193
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 97 ONE))) (+ (* -97 ONE)))), (or (= (* -1 (* 97 ONE)) (+ (* -97 ONE)))), (or )]
  clause args: [derived 190, derived 192]
  backptr: nil
  conclusion: (or (= (* -1 (* 97 ONE)) (+ (* -97 ONE))))

  derived clause number: 194
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE)))) (not (= (* 1 (* 100 ONE)) (+ (* 100 ONE)))) (not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 97 ONE)) (+ (* -97 ONE)))))

  derived clause number: 195
  rule: resolution
  expr args: [(not (= (* 1 (* 100 ONE)) (+ (* 100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE)))) (not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 97 ONE)) (+ (* -97 ONE))))), (or )]
  clause args: [derived 172, derived 194]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE)))) (not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 97 ONE)) (+ (* -97 ONE)))))

  derived clause number: 196
  rule: resolution
  expr args: [(not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 97 ONE)) (+ (* -97 ONE))))), (or )]
  clause args: [derived 179, derived 195]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 97 ONE)) (+ (* -97 ONE)))))

  derived clause number: 197
  rule: resolution
  expr args: [(not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE)))) (not (= (* -1 (* 97 ONE)) (+ (* -97 ONE))))), (or )]
  clause args: [derived 186, derived 196]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE)))) (not (= (* -1 (* 97 ONE)) (+ (* -97 ONE)))))

  derived clause number: 198
  rule: resolution
  expr args: [(not (= (* -1 (* 97 ONE)) (+ (* -97 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))))), (or )]
  clause args: [derived 193, derived 197]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE)))))

  derived clause number: 199
  rule: flatten
  expr args: [(+ (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))), (+ (+ (* 100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))))

  derived clause number: 200
  rule: or_single
  expr args: []
  clause args: [derived 199]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE)))))

  derived clause number: 201
  rule: flatten
  expr args: [(+ (* 100 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))), (+ (+ (* -3 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))))

  derived clause number: 202
  rule: or_single
  expr args: []
  clause args: [derived 201]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE)))))

  derived clause number: 203
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE)))) (not (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))))) (not (= (+ (* 100 ONE) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))))))

  derived clause number: 204
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE)))) (not (= (+ (* 100 ONE) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE)))))), (or )]
  clause args: [derived 200, derived 203]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE)))) (not (= (+ (* 100 ONE) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))))))

  derived clause number: 205
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))))), (or )]
  clause args: [derived 202, derived 204]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE)))))

  derived clause number: 206
  rule: flatten
  expr args: [(+ (* 100 ONE) (* -3 ONE) (+ (* -97 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))))

  derived clause number: 207
  rule: or_single
  expr args: []
  clause args: [derived 206]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE)))))

  derived clause number: 208
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE)))) (not (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))))) (not (= (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))))))

  derived clause number: 209
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE)))) (not (= (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE)))))), (or )]
  clause args: [derived 205, derived 208]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE)))) (not (= (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))))))

  derived clause number: 210
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -3 ONE) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))))), (or )]
  clause args: [derived 207, derived 209]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE)))))

  derived clause number: 211
  rule: flatten
  expr args: [(+ (* 100 ONE) (* -3 ONE) (* 0 ONE)), (+ (+ (* -97 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)))

  derived clause number: 212
  rule: or_single
  expr args: []
  clause args: [derived 211]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE))))

  derived clause number: 213
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE))) (not (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))))) (not (= (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)))))

  derived clause number: 214
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE))) (not (= (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE))))), (or )]
  clause args: [derived 210, derived 213]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE))) (not (= (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)))))

  derived clause number: 215
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)))), (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)))), (or )]
  clause args: [derived 212, derived 214]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE))))

  derived clause number: 216
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE))) (not (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))))) (not (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)))))

  derived clause number: 217
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))))), (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE))) (not (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE))))), (or )]
  clause args: [derived 198, derived 216]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE))) (not (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)))))

  derived clause number: 218
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -3 ONE)) (+ (* 0 ONE)) (+ (* -97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)))), (or )]
  clause args: [derived 215, derived 217]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE))))

  derived clause number: 219
  rule: consolidate
  expr args: [(+ ), (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)) (+ ))

  derived clause number: 220
  rule: or_single
  expr args: []
  clause args: [derived 219]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)) (+ )))

  derived clause number: 221
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ )) (not (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)))) (not (= (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)) (+ ))))

  derived clause number: 222
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ )) (not (= (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)) (+ )))), (or )]
  clause args: [derived 218, derived 221]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ )) (not (= (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)) (+ ))))

  derived clause number: 223
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -3 ONE) (* 0 ONE) (* -97 ONE)) (+ ))), (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ ))), (or )]
  clause args: [derived 220, derived 222]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ )))

  derived clause number: 224
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 0 ONE))) (not (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ ))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 225
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ ))), (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE))))), (or )]
  clause args: [derived 223, derived 224]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 226
  rule: resolution
  expr args: [(not (= (+ ) (+ (* 0 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 0 ONE)))), (or )]
  clause args: [derived 157, derived 225]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 0 ONE))))

  derived clause number: 227
  rule: or_single_rev
  expr args: []
  clause args: [derived 226]
  backptr: nil
  conclusion: (= (+ (* 1 (* 100 ONE)) (* -1 (* 3 ONE)) (* 1 (* 0 ONE)) (* -1 (* 97 ONE))) (+ (* 0 ONE)))

  derived clause number: 228
  rule: farkas
  expr args: []
  clause args: [derived 227]
  backptr: nil
  conclusion: (or (not (<= (* 100 ONE) (* 3 ONE))) (not (< (* 0 ONE) (* 97 ONE))))

  derived clause number: 229
  rule: resolution
  expr args: [(not (< (* 0 ONE) (* 97 ONE))), (or (not (<= (* 100 ONE) (* 3 ONE)))), (or (<= (* 97 ONE) (* 0 ONE)))]
  clause args: [derived 165, derived 228]
  backptr: nil
  conclusion: (or (<= (* 97 ONE) (* 0 ONE)) (not (<= (* 100 ONE) (* 3 ONE))))

  derived clause number: 230
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (not (<= (* 97 ONE) (* 0 ONE)))) (not (<= (* 97 ONE) (* 0 ONE))))

  derived clause number: 231
  rule: resolution
  expr args: [(not (<= (* 97 ONE) (* 0 ONE))), (or (not (not (<= (* 97 ONE) (* 0 ONE))))), (or (not (<= (* 100 ONE) (* 3 ONE))))]
  clause args: [derived 229, derived 230]
  backptr: nil
  conclusion: (or (not (<= (* 100 ONE) (* 3 ONE))) (not (not (<= (* 97 ONE) (* 0 ONE)))))

  derived clause number: 232
  rule: resolution
  expr args: [(not (<= (* 100 ONE) (* 3 ONE))), (or (not (not (<= (* 97 ONE) (* 0 ONE))))), (or (< (* 3 ONE) (* 100 ONE)))]
  clause args: [derived 164, derived 231]
  backptr: nil
  conclusion: (or (< (* 3 ONE) (* 100 ONE)) (not (not (<= (* 97 ONE) (* 0 ONE)))))

  derived clause number: 233
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE)))) (not (< (* 3 ONE) (* 100 ONE))) (not (not (<= (* 97 ONE) (* 0 ONE)))))

  derived clause number: 234
  rule: resolution
  expr args: [(not (< (* 3 ONE) (* 100 ONE))), (or (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE)))) (not (not (<= (* 97 ONE) (* 0 ONE))))), (or (not (not (<= (* 97 ONE) (* 0 ONE)))))]
  clause args: [derived 232, derived 233]
  backptr: nil
  conclusion: (or (not (not (<= (* 97 ONE) (* 0 ONE)))) (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE)))) (not (not (<= (* 97 ONE) (* 0 ONE)))))

  derived clause number: 235
  rule: factoring
  expr args: []
  clause args: [derived 163]
  backptr: nil
  conclusion: (or (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE)))) (not (<= (* 97 ONE) (* 0 ONE))))

  derived clause number: 236
  rule: factoring
  expr args: []
  clause args: [derived 234]
  backptr: nil
  conclusion: (or (not (not (<= (* 97 ONE) (* 0 ONE)))) (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE)))))

  derived clause number: 237
  rule: resolution
  expr args: [(not (not (<= (* 97 ONE) (* 0 ONE)))), (or (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE))))), (or (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE)))))]
  clause args: [derived 235, derived 236]
  backptr: nil
  conclusion: (or (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE)))) (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE)))))

  derived clause number: 238
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (< (* 3 ONE) (* 100 ONE)) (not false)) (not (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE))))) (not (= (not (<= (* 97 ONE) (* 0 ONE))) (not false))))

  derived clause number: 239
  rule: factoring
  expr args: []
  clause args: [derived 237]
  backptr: nil
  conclusion: (or (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE)))))

  derived clause number: 240
  rule: resolution
  expr args: [(not (= (< (* 3 ONE) (* 100 ONE)) (not (<= (* 97 ONE) (* 0 ONE))))), (or (= (< (* 3 ONE) (* 100 ONE)) (not false)) (not (= (not (<= (* 97 ONE) (* 0 ONE))) (not false)))), (or )]
  clause args: [derived 239, derived 238]
  backptr: nil
  conclusion: (or (= (< (* 3 ONE) (* 100 ONE)) (not false)) (not (= (not (<= (* 97 ONE) (* 0 ONE))) (not false))))

  derived clause number: 241
  rule: resolution
  expr args: [(not (= (not (<= (* 97 ONE) (* 0 ONE))) (not false))), (or (= (< (* 3 ONE) (* 100 ONE)) (not false))), (or )]
  clause args: [derived 100, derived 240]
  backptr: nil
  conclusion: (or (= (< (* 3 ONE) (* 100 ONE)) (not false)))

  derived clause number: 242
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (< (* 3 ONE) (* 100 ONE)) true) (not (= (< (* 3 ONE) (* 100 ONE)) (not false))) (not (= (not false) true)))

  derived clause number: 243
  rule: resolution
  expr args: [(not (= (< (* 3 ONE) (* 100 ONE)) (not false))), (or (= (< (* 3 ONE) (* 100 ONE)) true) (not (= (not false) true))), (or )]
  clause args: [derived 241, derived 242]
  backptr: nil
  conclusion: (or (= (< (* 3 ONE) (* 100 ONE)) true) (not (= (not false) true)))

  derived clause number: 244
  rule: resolution
  expr args: [(not (= (not false) true)), (or (= (< (* 3 ONE) (* 100 ONE)) true)), (or )]
  clause args: [derived 53, derived 243]
  backptr: nil
  conclusion: (or (= (< (* 3 ONE) (* 100 ONE)) true))

  derived clause number: 245
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))) (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 246
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@2)) (* 1 x@2))

  derived clause number: 247
  rule: or_single
  expr args: []
  clause args: [derived 246]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2)) (* 1 x@2)))

  derived clause number: 248
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 x@2) (+ (* 1 x@2))) (not (= (+ (* 1 x@2)) (* 1 x@2))))

  derived clause number: 249
  rule: resolution
  expr args: [(not (= (+ (* 1 x@2)) (* 1 x@2))), (or (= (* 1 x@2) (+ (* 1 x@2)))), (or )]
  clause args: [derived 247, derived 248]
  backptr: nil
  conclusion: (or (= (* 1 x@2) (+ (* 1 x@2))))

  derived clause number: 250
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* -1 x@2)) (* -1 x@2))

  derived clause number: 251
  rule: or_single
  expr args: []
  clause args: [derived 250]
  backptr: nil
  conclusion: (or (= (+ (* -1 x@2)) (* -1 x@2)))

  derived clause number: 252
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 x@2) (+ (* -1 x@2))) (not (= (+ (* -1 x@2)) (* -1 x@2))))

  derived clause number: 253
  rule: resolution
  expr args: [(not (= (+ (* -1 x@2)) (* -1 x@2))), (or (= (* -1 x@2) (+ (* -1 x@2)))), (or )]
  clause args: [derived 251, derived 252]
  backptr: nil
  conclusion: (or (= (* -1 x@2) (+ (* -1 x@2))))

  derived clause number: 254
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* 1 (+ (* -1 x@2) (* 100 ONE))) (+ (* -1 x@2) (* 100 ONE)))

  derived clause number: 255
  rule: or_single
  expr args: []
  clause args: [derived 254]
  backptr: nil
  conclusion: (or (= (* 1 (+ (* -1 x@2) (* 100 ONE))) (+ (* -1 x@2) (* 100 ONE))))

  derived clause number: 256
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* 1 x@2) (+ (* 1 x@2)))) (not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))) (not (= (* 1 (+ (* -1 x@2) (* 100 ONE))) (+ (* -1 x@2) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 257
  rule: resolution
  expr args: [(not (= (* 1 x@2) (+ (* 1 x@2)))), (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))) (not (= (* 1 (+ (* -1 x@2) (* 100 ONE))) (+ (* -1 x@2) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 249, derived 256]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))) (not (= (* 1 (+ (* -1 x@2) (* 100 ONE))) (+ (* -1 x@2) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 258
  rule: resolution
  expr args: [(not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))), (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* 1 (+ (* -1 x@2) (* 100 ONE))) (+ (* -1 x@2) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 123, derived 257]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* 1 (+ (* -1 x@2) (* 100 ONE))) (+ (* -1 x@2) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 259
  rule: resolution
  expr args: [(not (= (* 1 (+ (* -1 x@2) (* 100 ONE))) (+ (* -1 x@2) (* 100 ONE)))), (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 255, derived 258]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 260
  rule: resolution
  expr args: [(not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))), (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 76, derived 259]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))))

  derived clause number: 261
  rule: flatten
  expr args: [(+ (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))), (+ (+ (* 1 x@2)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))

  derived clause number: 262
  rule: or_single
  expr args: []
  clause args: [derived 261]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))))

  derived clause number: 263
  rule: flatten
  expr args: [(+ (* 1 x@2) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))), (+ (+ (* -100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@2) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))

  derived clause number: 264
  rule: or_single
  expr args: []
  clause args: [derived 263]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))))

  derived clause number: 265
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))) (not (= (+ (* 1 x@2) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))))

  derived clause number: 266
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (+ (* 1 x@2) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))))), (or )]
  clause args: [derived 262, derived 265]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (+ (* 1 x@2) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))))

  derived clause number: 267
  rule: resolution
  expr args: [(not (= (+ (* 1 x@2) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 264, derived 266]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE)))))

  derived clause number: 268
  rule: flatten
  expr args: [(+ (* 1 x@2) (* -100 ONE) (+ (* 0 ONE))), (+ (+ (* -1 x@2) (* 100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))))

  derived clause number: 269
  rule: or_single
  expr args: []
  clause args: [derived 268]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE)))))

  derived clause number: 270
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE)))) (not (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))) (not (= (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))))))

  derived clause number: 271
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE)))) (not (= (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE)))))), (or )]
  clause args: [derived 267, derived 270]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE)))) (not (= (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))))))

  derived clause number: 272
  rule: resolution
  expr args: [(not (= (+ (* 1 x@2) (* -100 ONE) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))))), (or )]
  clause args: [derived 269, derived 271]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE)))))

  derived clause number: 273
  rule: flatten
  expr args: [(+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE)), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)))

  derived clause number: 274
  rule: or_single
  expr args: []
  clause args: [derived 273]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE))))

  derived clause number: 275
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE))) (not (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))))) (not (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)))))

  derived clause number: 276
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE))) (not (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE))))), (or )]
  clause args: [derived 272, derived 275]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE))) (not (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)))))

  derived clause number: 277
  rule: resolution
  expr args: [(not (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)))), (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)))), (or )]
  clause args: [derived 274, derived 276]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE))))

  derived clause number: 278
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE))) (not (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))) (not (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)))))

  derived clause number: 279
  rule: resolution
  expr args: [(not (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))))), (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE))) (not (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE))))), (or )]
  clause args: [derived 260, derived 278]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE))) (not (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)))))

  derived clause number: 280
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@2)) (+ (* -100 ONE)) (+ (* -1 x@2) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)))), (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)))), (or )]
  clause args: [derived 277, derived 279]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE))))

  derived clause number: 281
  rule: consolidate
  expr args: [(+ (* 1 x@2) (* -1 x@2)), (+ (* -100 ONE) (* 100 ONE) (* 0 ONE)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ (* 1 x@2) (* -1 x@2)))

  derived clause number: 282
  rule: or_single
  expr args: []
  clause args: [derived 281]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ (* 1 x@2) (* -1 x@2))))

  derived clause number: 283
  rule: consolidate
  expr args: [(+ ), (+ (* 1 x@2) (* -1 x@2)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@2) (* -1 x@2)) (+ ))

  derived clause number: 284
  rule: or_single
  expr args: []
  clause args: [derived 283]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 x@2)) (+ )))

  derived clause number: 285
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ )) (not (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ (* 1 x@2) (* -1 x@2)))) (not (= (+ (* 1 x@2) (* -1 x@2)) (+ ))))

  derived clause number: 286
  rule: resolution
  expr args: [(not (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ (* 1 x@2) (* -1 x@2)))), (or (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ )) (not (= (+ (* 1 x@2) (* -1 x@2)) (+ )))), (or )]
  clause args: [derived 282, derived 285]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ )) (not (= (+ (* 1 x@2) (* -1 x@2)) (+ ))))

  derived clause number: 287
  rule: resolution
  expr args: [(not (= (+ (* 1 x@2) (* -1 x@2)) (+ ))), (or (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ ))), (or )]
  clause args: [derived 284, derived 286]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ )))

  derived clause number: 288
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)))) (not (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ ))))

  derived clause number: 289
  rule: resolution
  expr args: [(not (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)))), (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ )))), (or )]
  clause args: [derived 280, derived 288]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ ))))

  derived clause number: 290
  rule: resolution
  expr args: [(not (= (+ (* 1 x@2) (* -100 ONE) (* -1 x@2) (* 100 ONE) (* 0 ONE)) (+ ))), (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ ))), (or )]
  clause args: [derived 287, derived 289]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ )))

  derived clause number: 291
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ ))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 292
  rule: resolution
  expr args: [(not (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ ))), (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE))))), (or )]
  clause args: [derived 290, derived 291]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 293
  rule: resolution
  expr args: [(not (= (+ ) (+ (* 0 ONE)))), (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE)))), (or )]
  clause args: [derived 157, derived 292]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE))))

  derived clause number: 294
  rule: or_single_rev
  expr args: []
  clause args: [derived 293]
  backptr: nil
  conclusion: (= (+ (* 1 x@2) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@2) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE)))

  derived clause number: 295
  rule: farkas
  expr args: []
  clause args: [derived 294]
  backptr: nil
  conclusion: (or (not (< x@2 (* 100 ONE))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 296
  rule: resolution
  expr args: [(not (< x@2 (* 100 ONE))), (or (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))), (or (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))]
  clause args: [derived 245, derived 295]
  backptr: nil
  conclusion: (or (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 297
  rule: total
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (<= (* 100 ONE) x@2) (< x@2 (* 100 ONE)))

  derived clause number: 298
  rule: total
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)) (< (* 0 ONE) (+ (* -1 x@2) (* 100 ONE))))

  derived clause number: 299
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* -1 x@2) (* 100 ONE))) (+ (* 1 x@2) (* -100 ONE)))

  derived clause number: 300
  rule: or_single
  expr args: []
  clause args: [derived 299]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* -1 x@2) (* 100 ONE))) (+ (* 1 x@2) (* -100 ONE))))

  derived clause number: 301
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))) (not (= (* 1 (* 100 ONE)) (+ (* 100 ONE)))) (not (= (* -1 x@2) (+ (* -1 x@2)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@2) (* 100 ONE))) (+ (* 1 x@2) (* -100 ONE)))))

  derived clause number: 302
  rule: resolution
  expr args: [(not (= (* 1 (* 100 ONE)) (+ (* 100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))) (not (= (* -1 x@2) (+ (* -1 x@2)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@2) (* 100 ONE))) (+ (* 1 x@2) (* -100 ONE))))), (or )]
  clause args: [derived 172, derived 301]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))) (not (= (* -1 x@2) (+ (* -1 x@2)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@2) (* 100 ONE))) (+ (* 1 x@2) (* -100 ONE)))))

  derived clause number: 303
  rule: resolution
  expr args: [(not (= (* -1 x@2) (+ (* -1 x@2)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@2) (* 100 ONE))) (+ (* 1 x@2) (* -100 ONE))))), (or )]
  clause args: [derived 253, derived 302]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@2) (* 100 ONE))) (+ (* 1 x@2) (* -100 ONE)))))

  derived clause number: 304
  rule: resolution
  expr args: [(not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))) (not (= (* -1 (+ (* -1 x@2) (* 100 ONE))) (+ (* 1 x@2) (* -100 ONE))))), (or )]
  clause args: [derived 186, derived 303]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))) (not (= (* -1 (+ (* -1 x@2) (* 100 ONE))) (+ (* 1 x@2) (* -100 ONE)))))

  derived clause number: 305
  rule: resolution
  expr args: [(not (= (* -1 (+ (* -1 x@2) (* 100 ONE))) (+ (* 1 x@2) (* -100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))), (or )]
  clause args: [derived 300, derived 304]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))))

  derived clause number: 306
  rule: flatten
  expr args: [(+ (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))), (+ (+ (* 100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))

  derived clause number: 307
  rule: or_single
  expr args: []
  clause args: [derived 306]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))))

  derived clause number: 308
  rule: flatten
  expr args: [(+ (* 100 ONE) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))), (+ (+ (* -1 x@2)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))

  derived clause number: 309
  rule: or_single
  expr args: []
  clause args: [derived 308]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))))

  derived clause number: 310
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))) (not (= (+ (* 100 ONE) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))))

  derived clause number: 311
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))) (not (= (+ (* 100 ONE) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))))), (or )]
  clause args: [derived 307, derived 310]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))) (not (= (+ (* 100 ONE) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))))

  derived clause number: 312
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))), (or )]
  clause args: [derived 309, derived 311]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE)))))

  derived clause number: 313
  rule: flatten
  expr args: [(+ (* 100 ONE) (* -1 x@2) (+ (* 1 x@2) (* -100 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))))

  derived clause number: 314
  rule: or_single
  expr args: []
  clause args: [derived 313]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE)))))

  derived clause number: 315
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE)))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))) (not (= (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))))))

  derived clause number: 316
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE)))) (not (= (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE)))))), (or )]
  clause args: [derived 312, derived 315]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE)))) (not (= (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))))))

  derived clause number: 317
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -1 x@2) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))))), (or )]
  clause args: [derived 314, derived 316]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE)))))

  derived clause number: 318
  rule: flatten
  expr args: [(+ (* 100 ONE) (* -1 x@2) (* 0 ONE)), (+ (+ (* 1 x@2) (* -100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)))

  derived clause number: 319
  rule: or_single
  expr args: []
  clause args: [derived 318]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE))))

  derived clause number: 320
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))))) (not (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)))))

  derived clause number: 321
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE))) (not (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE))))), (or )]
  clause args: [derived 317, derived 320]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE))) (not (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)))))

  derived clause number: 322
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)))), (or )]
  clause args: [derived 319, derived 321]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE))))

  derived clause number: 323
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE))) (not (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)))))

  derived clause number: 324
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE))))), (or )]
  clause args: [derived 305, derived 323]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)))))

  derived clause number: 325
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -1 x@2)) (+ (* 0 ONE)) (+ (* 1 x@2) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)))), (or )]
  clause args: [derived 322, derived 324]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE))))

  derived clause number: 326
  rule: consolidate
  expr args: [(+ (* -1 x@2) (* 1 x@2)), (+ (* 100 ONE) (* 0 ONE) (* -100 ONE)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ (* -1 x@2) (* 1 x@2)))

  derived clause number: 327
  rule: or_single
  expr args: []
  clause args: [derived 326]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ (* -1 x@2) (* 1 x@2))))

  derived clause number: 328
  rule: consolidate
  expr args: [(+ ), (+ (* -1 x@2) (* 1 x@2)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* -1 x@2) (* 1 x@2)) (+ ))

  derived clause number: 329
  rule: or_single
  expr args: []
  clause args: [derived 328]
  backptr: nil
  conclusion: (or (= (+ (* -1 x@2) (* 1 x@2)) (+ )))

  derived clause number: 330
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ )) (not (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ (* -1 x@2) (* 1 x@2)))) (not (= (+ (* -1 x@2) (* 1 x@2)) (+ ))))

  derived clause number: 331
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ (* -1 x@2) (* 1 x@2)))), (or (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ )) (not (= (+ (* -1 x@2) (* 1 x@2)) (+ )))), (or )]
  clause args: [derived 327, derived 330]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ )) (not (= (+ (* -1 x@2) (* 1 x@2)) (+ ))))

  derived clause number: 332
  rule: resolution
  expr args: [(not (= (+ (* -1 x@2) (* 1 x@2)) (+ ))), (or (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ ))), (or )]
  clause args: [derived 329, derived 331]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ )))

  derived clause number: 333
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ )) (not (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)))) (not (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ ))))

  derived clause number: 334
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ )) (not (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ )))), (or )]
  clause args: [derived 325, derived 333]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ )) (not (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ ))))

  derived clause number: 335
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -1 x@2) (* 0 ONE) (* 1 x@2) (* -100 ONE)) (+ ))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ ))), (or )]
  clause args: [derived 332, derived 334]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ )))

  derived clause number: 336
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 0 ONE))) (not (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ ))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 337
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ ))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE))))), (or )]
  clause args: [derived 335, derived 336]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 338
  rule: resolution
  expr args: [(not (= (+ ) (+ (* 0 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 0 ONE)))), (or )]
  clause args: [derived 157, derived 337]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 0 ONE))))

  derived clause number: 339
  rule: or_single_rev
  expr args: []
  clause args: [derived 338]
  backptr: nil
  conclusion: (= (+ (* 1 (* 100 ONE)) (* -1 x@2) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@2) (* 100 ONE)))) (+ (* 0 ONE)))

  derived clause number: 340
  rule: farkas
  expr args: []
  clause args: [derived 339]
  backptr: nil
  conclusion: (or (not (<= (* 100 ONE) x@2)) (not (< (* 0 ONE) (+ (* -1 x@2) (* 100 ONE)))))

  derived clause number: 341
  rule: resolution
  expr args: [(not (< (* 0 ONE) (+ (* -1 x@2) (* 100 ONE)))), (or (not (<= (* 100 ONE) x@2))), (or (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))]
  clause args: [derived 298, derived 340]
  backptr: nil
  conclusion: (or (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)) (not (<= (* 100 ONE) x@2)))

  derived clause number: 342
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 343
  rule: resolution
  expr args: [(not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))), (or (not (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))), (or (not (<= (* 100 ONE) x@2)))]
  clause args: [derived 341, derived 342]
  backptr: nil
  conclusion: (or (not (<= (* 100 ONE) x@2)) (not (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 344
  rule: resolution
  expr args: [(not (<= (* 100 ONE) x@2)), (or (not (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))), (or (< x@2 (* 100 ONE)))]
  clause args: [derived 297, derived 343]
  backptr: nil
  conclusion: (or (< x@2 (* 100 ONE)) (not (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 345
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))) (not (< x@2 (* 100 ONE))) (not (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 346
  rule: resolution
  expr args: [(not (< x@2 (* 100 ONE))), (or (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))) (not (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))), (or (not (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))]
  clause args: [derived 344, derived 345]
  backptr: nil
  conclusion: (or (not (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))) (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))) (not (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 347
  rule: factoring
  expr args: []
  clause args: [derived 296]
  backptr: nil
  conclusion: (or (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 348
  rule: factoring
  expr args: []
  clause args: [derived 346]
  backptr: nil
  conclusion: (or (not (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))) (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 349
  rule: resolution
  expr args: [(not (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))), (or (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))), (or (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))]
  clause args: [derived 347, derived 348]
  backptr: nil
  conclusion: (or (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))) (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 350
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 4 ONE)) (* 4 ONE))

  derived clause number: 351
  rule: or_single
  expr args: []
  clause args: [derived 350]
  backptr: nil
  conclusion: (or (= (+ (* 4 ONE)) (* 4 ONE)))

  derived clause number: 352
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 4 ONE) (+ (* 4 ONE))) (not (= (+ (* 4 ONE)) (* 4 ONE))))

  derived clause number: 353
  rule: resolution
  expr args: [(not (= (+ (* 4 ONE)) (* 4 ONE))), (or (= (* 4 ONE) (+ (* 4 ONE)))), (or )]
  clause args: [derived 351, derived 352]
  backptr: nil
  conclusion: (or (= (* 4 ONE) (+ (* 4 ONE))))

  derived clause number: 354
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 4 ONE)) (* -1 (+ (* 4 ONE)))) (not (= (* 4 ONE) (+ (* 4 ONE)))))

  derived clause number: 355
  rule: resolution
  expr args: [(not (= (* 4 ONE) (+ (* 4 ONE)))), (or (= (* -1 (* 4 ONE)) (* -1 (+ (* 4 ONE))))), (or )]
  clause args: [derived 353, derived 354]
  backptr: nil
  conclusion: (or (= (* -1 (* 4 ONE)) (* -1 (+ (* 4 ONE)))))

  derived clause number: 356
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 4 ONE))) (+ (* -4 ONE)))

  derived clause number: 357
  rule: or_single
  expr args: []
  clause args: [derived 356]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 4 ONE))) (+ (* -4 ONE))))

  derived clause number: 358
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 4 ONE)) (+ (* -4 ONE))) (not (= (* -1 (* 4 ONE)) (* -1 (+ (* 4 ONE))))) (not (= (* -1 (+ (* 4 ONE))) (+ (* -4 ONE)))))

  derived clause number: 359
  rule: resolution
  expr args: [(not (= (* -1 (* 4 ONE)) (* -1 (+ (* 4 ONE))))), (or (= (* -1 (* 4 ONE)) (+ (* -4 ONE))) (not (= (* -1 (+ (* 4 ONE))) (+ (* -4 ONE))))), (or )]
  clause args: [derived 355, derived 358]
  backptr: nil
  conclusion: (or (= (* -1 (* 4 ONE)) (+ (* -4 ONE))) (not (= (* -1 (+ (* 4 ONE))) (+ (* -4 ONE)))))

  derived clause number: 360
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 4 ONE))) (+ (* -4 ONE)))), (or (= (* -1 (* 4 ONE)) (+ (* -4 ONE)))), (or )]
  clause args: [derived 357, derived 359]
  backptr: nil
  conclusion: (or (= (* -1 (* 4 ONE)) (+ (* -4 ONE))))

  derived clause number: 361
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* -4 ONE)) (* -1 (* 4 ONE))) (not (= (* -1 (* 4 ONE)) (+ (* -4 ONE)))))

  derived clause number: 362
  rule: resolution
  expr args: [(not (= (* -1 (* 4 ONE)) (+ (* -4 ONE)))), (or (= (+ (* -4 ONE)) (* -1 (* 4 ONE)))), (or )]
  clause args: [derived 360, derived 361]
  backptr: nil
  conclusion: (or (= (+ (* -4 ONE)) (* -1 (* 4 ONE))))

  derived clause number: 363
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (+ (* 0 ONE)) (+ (* -4 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))) (not (= (* -1 (* 4 ONE)) (+ (* -4 ONE)))))

  derived clause number: 364
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (+ (* 0 ONE)) (+ (* -4 ONE)))) (not (= (* -1 (* 4 ONE)) (+ (* -4 ONE))))), (or )]
  clause args: [derived 69, derived 363]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (+ (* 0 ONE)) (+ (* -4 ONE)))) (not (= (* -1 (* 4 ONE)) (+ (* -4 ONE)))))

  derived clause number: 365
  rule: resolution
  expr args: [(not (= (* -1 (* 4 ONE)) (+ (* -4 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (+ (* 0 ONE)) (+ (* -4 ONE))))), (or )]
  clause args: [derived 360, derived 364]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (+ (* 0 ONE)) (+ (* -4 ONE)))))

  derived clause number: 366
  rule: flatten
  expr args: [(+ (+ (* -4 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (+ (* -4 ONE))))

  derived clause number: 367
  rule: or_single
  expr args: []
  clause args: [derived 366]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (+ (* -4 ONE)))))

  derived clause number: 368
  rule: flatten
  expr args: [(+ (* 0 ONE)), (+ (+ (* -4 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE)))

  derived clause number: 369
  rule: or_single
  expr args: []
  clause args: [derived 368]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE))))

  derived clause number: 370
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (+ (* -4 ONE))))) (not (= (+ (* 0 ONE) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE)))))

  derived clause number: 371
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (+ (* -4 ONE))))), (or (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE))) (not (= (+ (* 0 ONE) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE))))), (or )]
  clause args: [derived 367, derived 370]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE))) (not (= (+ (* 0 ONE) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE)))))

  derived clause number: 372
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE)))), (or (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE)))), (or )]
  clause args: [derived 369, derived 371]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE))))

  derived clause number: 373
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* 0 ONE) (* -4 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (+ (* 0 ONE)) (+ (* -4 ONE))))) (not (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE)))))

  derived clause number: 374
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (+ (* 0 ONE)) (+ (* -4 ONE))))), (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* 0 ONE) (* -4 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE))))), (or )]
  clause args: [derived 365, derived 373]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* 0 ONE) (* -4 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE)))))

  derived clause number: 375
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -4 ONE))) (+ (* 0 ONE) (* -4 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* 0 ONE) (* -4 ONE)))), (or )]
  clause args: [derived 372, derived 374]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* 0 ONE) (* -4 ONE))))

  derived clause number: 376
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE) (* -4 ONE)), (+ (* -4 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (* -4 ONE)) (+ (* -4 ONE)))

  derived clause number: 377
  rule: or_single
  expr args: []
  clause args: [derived 376]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -4 ONE)) (+ (* -4 ONE))))

  derived clause number: 378
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* -4 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* 0 ONE) (* -4 ONE)))) (not (= (+ (* 0 ONE) (* -4 ONE)) (+ (* -4 ONE)))))

  derived clause number: 379
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* 0 ONE) (* -4 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* -4 ONE))) (not (= (+ (* 0 ONE) (* -4 ONE)) (+ (* -4 ONE))))), (or )]
  clause args: [derived 375, derived 378]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* -4 ONE))) (not (= (+ (* 0 ONE) (* -4 ONE)) (+ (* -4 ONE)))))

  derived clause number: 380
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -4 ONE)) (+ (* -4 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* -4 ONE)))), (or )]
  clause args: [derived 377, derived 379]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* -4 ONE))))

  derived clause number: 381
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (* -1 (* 4 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* -4 ONE)))) (not (= (+ (* -4 ONE)) (* -1 (* 4 ONE)))))

  derived clause number: 382
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (+ (* -4 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (* -1 (* 4 ONE))) (not (= (+ (* -4 ONE)) (* -1 (* 4 ONE))))), (or )]
  clause args: [derived 380, derived 381]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (* -1 (* 4 ONE))) (not (= (+ (* -4 ONE)) (* -1 (* 4 ONE)))))

  derived clause number: 383
  rule: resolution
  expr args: [(not (= (+ (* -4 ONE)) (* -1 (* 4 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (* -1 (* 4 ONE)))), (or )]
  clause args: [derived 362, derived 382]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (* -1 (* 4 ONE))))

  derived clause number: 384
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 5 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))

  derived clause number: 385
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE)))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (* -1 (* 4 ONE)))))

  derived clause number: 386
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE)))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (* -1 (* 4 ONE))))), (or )]
  clause args: [derived 384, derived 385]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE)))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (* -1 (* 4 ONE)))))

  derived clause number: 387
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 4 ONE))) (* -1 (* 4 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE)))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))), (or )]
  clause args: [derived 383, derived 386]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE)))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))))

  derived clause number: 388
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= x@2 (+ x@1 (* 2 ONE))) (= x@2 (+ x@1 (* 2 ONE)))))

  derived clause number: 389
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))) (not (= (= x@2 (+ x@1 (* 2 ONE))) (= x@2 (+ x@1 (* 2 ONE))))) (not (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE)))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))))

  derived clause number: 390
  rule: resolution
  expr args: [(not (= (= x@2 (+ x@1 (* 2 ONE))) (= x@2 (+ x@1 (* 2 ONE))))), (or (= (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))) (not (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE)))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))))), (or )]
  clause args: [derived 388, derived 389]
  backptr: nil
  conclusion: (or (= (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))) (not (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE)))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))))

  derived clause number: 391
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE)))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))), (or (= (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))))), (or )]
  clause args: [derived 387, derived 390]
  backptr: nil
  conclusion: (or (= (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))))

  derived clause number: 392
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))) (not (= (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))))) (not (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))

  derived clause number: 393
  rule: resolution
  expr args: [(not (= (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))))), (or (= (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))) (not (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))), (or )]
  clause args: [derived 391, derived 392]
  backptr: nil
  conclusion: (or (= (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))) (not (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))

  derived clause number: 394
  rule: factoring
  expr args: []
  clause args: [derived 349]
  backptr: nil
  conclusion: (or (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 395
  rule: resolution
  expr args: [(not (= (< x@2 (* 100 ONE)) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))), (or (= (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))), (or )]
  clause args: [derived 394, derived 393]
  backptr: nil
  conclusion: (or (= (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))

  derived clause number: 396
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE))))

  derived clause number: 397
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))) (not (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)))) (not (= (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))

  derived clause number: 398
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))) (not (= (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))), (or )]
  clause args: [derived 396, derived 397]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))) (not (= (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))

  derived clause number: 399
  rule: resolution
  expr args: [(not (= (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))), (or )]
  clause args: [derived 395, derived 398]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))

  derived clause number: 400
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 401
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@1)) (* 1 x@1))

  derived clause number: 402
  rule: or_single
  expr args: []
  clause args: [derived 401]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1)) (* 1 x@1)))

  derived clause number: 403
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 x@1) (+ (* 1 x@1))) (not (= (+ (* 1 x@1)) (* 1 x@1))))

  derived clause number: 404
  rule: resolution
  expr args: [(not (= (+ (* 1 x@1)) (* 1 x@1))), (or (= (* 1 x@1) (+ (* 1 x@1)))), (or )]
  clause args: [derived 402, derived 403]
  backptr: nil
  conclusion: (or (= (* 1 x@1) (+ (* 1 x@1))))

  derived clause number: 405
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* -1 x@1)) (* -1 x@1))

  derived clause number: 406
  rule: or_single
  expr args: []
  clause args: [derived 405]
  backptr: nil
  conclusion: (or (= (+ (* -1 x@1)) (* -1 x@1)))

  derived clause number: 407
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 x@1) (+ (* -1 x@1))) (not (= (+ (* -1 x@1)) (* -1 x@1))))

  derived clause number: 408
  rule: resolution
  expr args: [(not (= (+ (* -1 x@1)) (* -1 x@1))), (or (= (* -1 x@1) (+ (* -1 x@1)))), (or )]
  clause args: [derived 406, derived 407]
  backptr: nil
  conclusion: (or (= (* -1 x@1) (+ (* -1 x@1))))

  derived clause number: 409
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* 1 (+ (* -1 x@1) (* 100 ONE))) (+ (* -1 x@1) (* 100 ONE)))

  derived clause number: 410
  rule: or_single
  expr args: []
  clause args: [derived 409]
  backptr: nil
  conclusion: (or (= (* 1 (+ (* -1 x@1) (* 100 ONE))) (+ (* -1 x@1) (* 100 ONE))))

  derived clause number: 411
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* 1 x@1) (+ (* 1 x@1)))) (not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))) (not (= (* 1 (+ (* -1 x@1) (* 100 ONE))) (+ (* -1 x@1) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 412
  rule: resolution
  expr args: [(not (= (* 1 x@1) (+ (* 1 x@1)))), (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))) (not (= (* 1 (+ (* -1 x@1) (* 100 ONE))) (+ (* -1 x@1) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 404, derived 411]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))) (not (= (* 1 (+ (* -1 x@1) (* 100 ONE))) (+ (* -1 x@1) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 413
  rule: resolution
  expr args: [(not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))), (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* 1 (+ (* -1 x@1) (* 100 ONE))) (+ (* -1 x@1) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 123, derived 412]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* 1 (+ (* -1 x@1) (* 100 ONE))) (+ (* -1 x@1) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 414
  rule: resolution
  expr args: [(not (= (* 1 (+ (* -1 x@1) (* 100 ONE))) (+ (* -1 x@1) (* 100 ONE)))), (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 410, derived 413]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 415
  rule: resolution
  expr args: [(not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))), (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 76, derived 414]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))))

  derived clause number: 416
  rule: flatten
  expr args: [(+ (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))), (+ (+ (* 1 x@1)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))

  derived clause number: 417
  rule: or_single
  expr args: []
  clause args: [derived 416]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))))

  derived clause number: 418
  rule: flatten
  expr args: [(+ (* 1 x@1) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))), (+ (+ (* -100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@1) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))

  derived clause number: 419
  rule: or_single
  expr args: []
  clause args: [derived 418]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))))

  derived clause number: 420
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))) (not (= (+ (* 1 x@1) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))))

  derived clause number: 421
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (+ (* 1 x@1) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))))), (or )]
  clause args: [derived 417, derived 420]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (+ (* 1 x@1) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))))

  derived clause number: 422
  rule: resolution
  expr args: [(not (= (+ (* 1 x@1) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 419, derived 421]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE)))))

  derived clause number: 423
  rule: flatten
  expr args: [(+ (* 1 x@1) (* -100 ONE) (+ (* 0 ONE))), (+ (+ (* -1 x@1) (* 100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))))

  derived clause number: 424
  rule: or_single
  expr args: []
  clause args: [derived 423]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE)))))

  derived clause number: 425
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE)))) (not (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))) (not (= (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))))))

  derived clause number: 426
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE)))) (not (= (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE)))))), (or )]
  clause args: [derived 422, derived 425]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE)))) (not (= (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))))))

  derived clause number: 427
  rule: resolution
  expr args: [(not (= (+ (* 1 x@1) (* -100 ONE) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))))), (or )]
  clause args: [derived 424, derived 426]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE)))))

  derived clause number: 428
  rule: flatten
  expr args: [(+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE)), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)))

  derived clause number: 429
  rule: or_single
  expr args: []
  clause args: [derived 428]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE))))

  derived clause number: 430
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE))) (not (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))))) (not (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)))))

  derived clause number: 431
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE))) (not (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE))))), (or )]
  clause args: [derived 427, derived 430]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE))) (not (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)))))

  derived clause number: 432
  rule: resolution
  expr args: [(not (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)))), (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)))), (or )]
  clause args: [derived 429, derived 431]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE))))

  derived clause number: 433
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE))) (not (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))) (not (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)))))

  derived clause number: 434
  rule: resolution
  expr args: [(not (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))))), (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE))) (not (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE))))), (or )]
  clause args: [derived 415, derived 433]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE))) (not (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)))))

  derived clause number: 435
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@1)) (+ (* -100 ONE)) (+ (* -1 x@1) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)))), (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)))), (or )]
  clause args: [derived 432, derived 434]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE))))

  derived clause number: 436
  rule: consolidate
  expr args: [(+ (* 1 x@1) (* -1 x@1)), (+ (* -100 ONE) (* 100 ONE) (* 0 ONE)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ (* 1 x@1) (* -1 x@1)))

  derived clause number: 437
  rule: or_single
  expr args: []
  clause args: [derived 436]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ (* 1 x@1) (* -1 x@1))))

  derived clause number: 438
  rule: consolidate
  expr args: [(+ ), (+ (* 1 x@1) (* -1 x@1)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@1) (* -1 x@1)) (+ ))

  derived clause number: 439
  rule: or_single
  expr args: []
  clause args: [derived 438]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 x@1)) (+ )))

  derived clause number: 440
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ )) (not (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ (* 1 x@1) (* -1 x@1)))) (not (= (+ (* 1 x@1) (* -1 x@1)) (+ ))))

  derived clause number: 441
  rule: resolution
  expr args: [(not (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ (* 1 x@1) (* -1 x@1)))), (or (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ )) (not (= (+ (* 1 x@1) (* -1 x@1)) (+ )))), (or )]
  clause args: [derived 437, derived 440]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ )) (not (= (+ (* 1 x@1) (* -1 x@1)) (+ ))))

  derived clause number: 442
  rule: resolution
  expr args: [(not (= (+ (* 1 x@1) (* -1 x@1)) (+ ))), (or (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ ))), (or )]
  clause args: [derived 439, derived 441]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ )))

  derived clause number: 443
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)))) (not (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ ))))

  derived clause number: 444
  rule: resolution
  expr args: [(not (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)))), (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ )))), (or )]
  clause args: [derived 435, derived 443]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ ))))

  derived clause number: 445
  rule: resolution
  expr args: [(not (= (+ (* 1 x@1) (* -100 ONE) (* -1 x@1) (* 100 ONE) (* 0 ONE)) (+ ))), (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ ))), (or )]
  clause args: [derived 442, derived 444]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ )))

  derived clause number: 446
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ ))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 447
  rule: resolution
  expr args: [(not (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ ))), (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE))))), (or )]
  clause args: [derived 445, derived 446]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 448
  rule: resolution
  expr args: [(not (= (+ ) (+ (* 0 ONE)))), (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE)))), (or )]
  clause args: [derived 157, derived 447]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE))))

  derived clause number: 449
  rule: or_single_rev
  expr args: []
  clause args: [derived 448]
  backptr: nil
  conclusion: (= (+ (* 1 x@1) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@1) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE)))

  derived clause number: 450
  rule: farkas
  expr args: []
  clause args: [derived 449]
  backptr: nil
  conclusion: (or (not (< x@1 (* 100 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 451
  rule: resolution
  expr args: [(not (< x@1 (* 100 ONE))), (or (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))), (or (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))]
  clause args: [derived 400, derived 450]
  backptr: nil
  conclusion: (or (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 452
  rule: total
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (<= (* 100 ONE) x@1) (< x@1 (* 100 ONE)))

  derived clause number: 453
  rule: total
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)) (< (* 0 ONE) (+ (* -1 x@1) (* 100 ONE))))

  derived clause number: 454
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* -1 x@1) (* 100 ONE))) (+ (* 1 x@1) (* -100 ONE)))

  derived clause number: 455
  rule: or_single
  expr args: []
  clause args: [derived 454]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* -1 x@1) (* 100 ONE))) (+ (* 1 x@1) (* -100 ONE))))

  derived clause number: 456
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))) (not (= (* 1 (* 100 ONE)) (+ (* 100 ONE)))) (not (= (* -1 x@1) (+ (* -1 x@1)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@1) (* 100 ONE))) (+ (* 1 x@1) (* -100 ONE)))))

  derived clause number: 457
  rule: resolution
  expr args: [(not (= (* 1 (* 100 ONE)) (+ (* 100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))) (not (= (* -1 x@1) (+ (* -1 x@1)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@1) (* 100 ONE))) (+ (* 1 x@1) (* -100 ONE))))), (or )]
  clause args: [derived 172, derived 456]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))) (not (= (* -1 x@1) (+ (* -1 x@1)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@1) (* 100 ONE))) (+ (* 1 x@1) (* -100 ONE)))))

  derived clause number: 458
  rule: resolution
  expr args: [(not (= (* -1 x@1) (+ (* -1 x@1)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@1) (* 100 ONE))) (+ (* 1 x@1) (* -100 ONE))))), (or )]
  clause args: [derived 408, derived 457]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@1) (* 100 ONE))) (+ (* 1 x@1) (* -100 ONE)))))

  derived clause number: 459
  rule: resolution
  expr args: [(not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))) (not (= (* -1 (+ (* -1 x@1) (* 100 ONE))) (+ (* 1 x@1) (* -100 ONE))))), (or )]
  clause args: [derived 186, derived 458]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))) (not (= (* -1 (+ (* -1 x@1) (* 100 ONE))) (+ (* 1 x@1) (* -100 ONE)))))

  derived clause number: 460
  rule: resolution
  expr args: [(not (= (* -1 (+ (* -1 x@1) (* 100 ONE))) (+ (* 1 x@1) (* -100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))), (or )]
  clause args: [derived 455, derived 459]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))))

  derived clause number: 461
  rule: flatten
  expr args: [(+ (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))), (+ (+ (* 100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))

  derived clause number: 462
  rule: or_single
  expr args: []
  clause args: [derived 461]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))))

  derived clause number: 463
  rule: flatten
  expr args: [(+ (* 100 ONE) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))), (+ (+ (* -1 x@1)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))

  derived clause number: 464
  rule: or_single
  expr args: []
  clause args: [derived 463]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))))

  derived clause number: 465
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))) (not (= (+ (* 100 ONE) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))))

  derived clause number: 466
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))) (not (= (+ (* 100 ONE) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))))), (or )]
  clause args: [derived 462, derived 465]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))) (not (= (+ (* 100 ONE) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))))

  derived clause number: 467
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))), (or )]
  clause args: [derived 464, derived 466]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE)))))

  derived clause number: 468
  rule: flatten
  expr args: [(+ (* 100 ONE) (* -1 x@1) (+ (* 1 x@1) (* -100 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))))

  derived clause number: 469
  rule: or_single
  expr args: []
  clause args: [derived 468]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE)))))

  derived clause number: 470
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE)))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))) (not (= (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))))))

  derived clause number: 471
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE)))) (not (= (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE)))))), (or )]
  clause args: [derived 467, derived 470]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE)))) (not (= (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))))))

  derived clause number: 472
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -1 x@1) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))))), (or )]
  clause args: [derived 469, derived 471]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE)))))

  derived clause number: 473
  rule: flatten
  expr args: [(+ (* 100 ONE) (* -1 x@1) (* 0 ONE)), (+ (+ (* 1 x@1) (* -100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)))

  derived clause number: 474
  rule: or_single
  expr args: []
  clause args: [derived 473]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE))))

  derived clause number: 475
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))))) (not (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)))))

  derived clause number: 476
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE))) (not (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE))))), (or )]
  clause args: [derived 472, derived 475]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE))) (not (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)))))

  derived clause number: 477
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)))), (or )]
  clause args: [derived 474, derived 476]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE))))

  derived clause number: 478
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE))) (not (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)))))

  derived clause number: 479
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE))))), (or )]
  clause args: [derived 460, derived 478]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)))))

  derived clause number: 480
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -1 x@1)) (+ (* 0 ONE)) (+ (* 1 x@1) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)))), (or )]
  clause args: [derived 477, derived 479]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE))))

  derived clause number: 481
  rule: consolidate
  expr args: [(+ (* -1 x@1) (* 1 x@1)), (+ (* 100 ONE) (* 0 ONE) (* -100 ONE)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ (* -1 x@1) (* 1 x@1)))

  derived clause number: 482
  rule: or_single
  expr args: []
  clause args: [derived 481]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ (* -1 x@1) (* 1 x@1))))

  derived clause number: 483
  rule: consolidate
  expr args: [(+ ), (+ (* -1 x@1) (* 1 x@1)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* -1 x@1) (* 1 x@1)) (+ ))

  derived clause number: 484
  rule: or_single
  expr args: []
  clause args: [derived 483]
  backptr: nil
  conclusion: (or (= (+ (* -1 x@1) (* 1 x@1)) (+ )))

  derived clause number: 485
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ )) (not (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ (* -1 x@1) (* 1 x@1)))) (not (= (+ (* -1 x@1) (* 1 x@1)) (+ ))))

  derived clause number: 486
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ (* -1 x@1) (* 1 x@1)))), (or (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ )) (not (= (+ (* -1 x@1) (* 1 x@1)) (+ )))), (or )]
  clause args: [derived 482, derived 485]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ )) (not (= (+ (* -1 x@1) (* 1 x@1)) (+ ))))

  derived clause number: 487
  rule: resolution
  expr args: [(not (= (+ (* -1 x@1) (* 1 x@1)) (+ ))), (or (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ ))), (or )]
  clause args: [derived 484, derived 486]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ )))

  derived clause number: 488
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ )) (not (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)))) (not (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ ))))

  derived clause number: 489
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ )) (not (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ )))), (or )]
  clause args: [derived 480, derived 488]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ )) (not (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ ))))

  derived clause number: 490
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -1 x@1) (* 0 ONE) (* 1 x@1) (* -100 ONE)) (+ ))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ ))), (or )]
  clause args: [derived 487, derived 489]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ )))

  derived clause number: 491
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 0 ONE))) (not (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ ))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 492
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ ))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE))))), (or )]
  clause args: [derived 490, derived 491]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 493
  rule: resolution
  expr args: [(not (= (+ ) (+ (* 0 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 0 ONE)))), (or )]
  clause args: [derived 157, derived 492]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 0 ONE))))

  derived clause number: 494
  rule: or_single_rev
  expr args: []
  clause args: [derived 493]
  backptr: nil
  conclusion: (= (+ (* 1 (* 100 ONE)) (* -1 x@1) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@1) (* 100 ONE)))) (+ (* 0 ONE)))

  derived clause number: 495
  rule: farkas
  expr args: []
  clause args: [derived 494]
  backptr: nil
  conclusion: (or (not (<= (* 100 ONE) x@1)) (not (< (* 0 ONE) (+ (* -1 x@1) (* 100 ONE)))))

  derived clause number: 496
  rule: resolution
  expr args: [(not (< (* 0 ONE) (+ (* -1 x@1) (* 100 ONE)))), (or (not (<= (* 100 ONE) x@1))), (or (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))]
  clause args: [derived 453, derived 495]
  backptr: nil
  conclusion: (or (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)) (not (<= (* 100 ONE) x@1)))

  derived clause number: 497
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 498
  rule: resolution
  expr args: [(not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))), (or (not (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))), (or (not (<= (* 100 ONE) x@1)))]
  clause args: [derived 496, derived 497]
  backptr: nil
  conclusion: (or (not (<= (* 100 ONE) x@1)) (not (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 499
  rule: resolution
  expr args: [(not (<= (* 100 ONE) x@1)), (or (not (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))), (or (< x@1 (* 100 ONE)))]
  clause args: [derived 452, derived 498]
  backptr: nil
  conclusion: (or (< x@1 (* 100 ONE)) (not (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 500
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (not (< x@1 (* 100 ONE))) (not (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 501
  rule: resolution
  expr args: [(not (< x@1 (* 100 ONE))), (or (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (not (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))), (or (not (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))]
  clause args: [derived 499, derived 500]
  backptr: nil
  conclusion: (or (not (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (not (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 502
  rule: factoring
  expr args: []
  clause args: [derived 451]
  backptr: nil
  conclusion: (or (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 503
  rule: factoring
  expr args: []
  clause args: [derived 501]
  backptr: nil
  conclusion: (or (not (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 504
  rule: resolution
  expr args: [(not (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))), (or (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))), (or (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))]
  clause args: [derived 502, derived 503]
  backptr: nil
  conclusion: (or (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))) (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 505
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 2 ONE)) (* 2 ONE))

  derived clause number: 506
  rule: or_single
  expr args: []
  clause args: [derived 505]
  backptr: nil
  conclusion: (or (= (+ (* 2 ONE)) (* 2 ONE)))

  derived clause number: 507
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 2 ONE) (+ (* 2 ONE))) (not (= (+ (* 2 ONE)) (* 2 ONE))))

  derived clause number: 508
  rule: resolution
  expr args: [(not (= (+ (* 2 ONE)) (* 2 ONE))), (or (= (* 2 ONE) (+ (* 2 ONE)))), (or )]
  clause args: [derived 506, derived 507]
  backptr: nil
  conclusion: (or (= (* 2 ONE) (+ (* 2 ONE))))

  derived clause number: 509
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 2 ONE)) (* -1 (+ (* 2 ONE)))) (not (= (* 2 ONE) (+ (* 2 ONE)))))

  derived clause number: 510
  rule: resolution
  expr args: [(not (= (* 2 ONE) (+ (* 2 ONE)))), (or (= (* -1 (* 2 ONE)) (* -1 (+ (* 2 ONE))))), (or )]
  clause args: [derived 508, derived 509]
  backptr: nil
  conclusion: (or (= (* -1 (* 2 ONE)) (* -1 (+ (* 2 ONE)))))

  derived clause number: 511
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 2 ONE))) (+ (* -2 ONE)))

  derived clause number: 512
  rule: or_single
  expr args: []
  clause args: [derived 511]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 2 ONE))) (+ (* -2 ONE))))

  derived clause number: 513
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 2 ONE)) (+ (* -2 ONE))) (not (= (* -1 (* 2 ONE)) (* -1 (+ (* 2 ONE))))) (not (= (* -1 (+ (* 2 ONE))) (+ (* -2 ONE)))))

  derived clause number: 514
  rule: resolution
  expr args: [(not (= (* -1 (* 2 ONE)) (* -1 (+ (* 2 ONE))))), (or (= (* -1 (* 2 ONE)) (+ (* -2 ONE))) (not (= (* -1 (+ (* 2 ONE))) (+ (* -2 ONE))))), (or )]
  clause args: [derived 510, derived 513]
  backptr: nil
  conclusion: (or (= (* -1 (* 2 ONE)) (+ (* -2 ONE))) (not (= (* -1 (+ (* 2 ONE))) (+ (* -2 ONE)))))

  derived clause number: 515
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 2 ONE))) (+ (* -2 ONE)))), (or (= (* -1 (* 2 ONE)) (+ (* -2 ONE)))), (or )]
  clause args: [derived 512, derived 514]
  backptr: nil
  conclusion: (or (= (* -1 (* 2 ONE)) (+ (* -2 ONE))))

  derived clause number: 516
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* -2 ONE)) (* -1 (* 2 ONE))) (not (= (* -1 (* 2 ONE)) (+ (* -2 ONE)))))

  derived clause number: 517
  rule: resolution
  expr args: [(not (= (* -1 (* 2 ONE)) (+ (* -2 ONE)))), (or (= (+ (* -2 ONE)) (* -1 (* 2 ONE)))), (or )]
  clause args: [derived 515, derived 516]
  backptr: nil
  conclusion: (or (= (+ (* -2 ONE)) (* -1 (* 2 ONE))))

  derived clause number: 518
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (+ (* 0 ONE)) (+ (* -2 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))) (not (= (* -1 (* 2 ONE)) (+ (* -2 ONE)))))

  derived clause number: 519
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (+ (* 0 ONE)) (+ (* -2 ONE)))) (not (= (* -1 (* 2 ONE)) (+ (* -2 ONE))))), (or )]
  clause args: [derived 69, derived 518]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (+ (* 0 ONE)) (+ (* -2 ONE)))) (not (= (* -1 (* 2 ONE)) (+ (* -2 ONE)))))

  derived clause number: 520
  rule: resolution
  expr args: [(not (= (* -1 (* 2 ONE)) (+ (* -2 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (+ (* 0 ONE)) (+ (* -2 ONE))))), (or )]
  clause args: [derived 515, derived 519]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (+ (* 0 ONE)) (+ (* -2 ONE)))))

  derived clause number: 521
  rule: flatten
  expr args: [(+ (+ (* -2 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (+ (* -2 ONE))))

  derived clause number: 522
  rule: or_single
  expr args: []
  clause args: [derived 521]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (+ (* -2 ONE)))))

  derived clause number: 523
  rule: flatten
  expr args: [(+ (* 0 ONE)), (+ (+ (* -2 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE)))

  derived clause number: 524
  rule: or_single
  expr args: []
  clause args: [derived 523]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE))))

  derived clause number: 525
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (+ (* -2 ONE))))) (not (= (+ (* 0 ONE) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE)))))

  derived clause number: 526
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (+ (* -2 ONE))))), (or (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE))) (not (= (+ (* 0 ONE) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE))))), (or )]
  clause args: [derived 522, derived 525]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE))) (not (= (+ (* 0 ONE) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE)))))

  derived clause number: 527
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE)))), (or (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE)))), (or )]
  clause args: [derived 524, derived 526]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE))))

  derived clause number: 528
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* 0 ONE) (* -2 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (+ (* 0 ONE)) (+ (* -2 ONE))))) (not (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE)))))

  derived clause number: 529
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (+ (* 0 ONE)) (+ (* -2 ONE))))), (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* 0 ONE) (* -2 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE))))), (or )]
  clause args: [derived 520, derived 528]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* 0 ONE) (* -2 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE)))))

  derived clause number: 530
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -2 ONE))) (+ (* 0 ONE) (* -2 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* 0 ONE) (* -2 ONE)))), (or )]
  clause args: [derived 527, derived 529]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* 0 ONE) (* -2 ONE))))

  derived clause number: 531
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE) (* -2 ONE)), (+ (* -2 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (* -2 ONE)) (+ (* -2 ONE)))

  derived clause number: 532
  rule: or_single
  expr args: []
  clause args: [derived 531]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -2 ONE)) (+ (* -2 ONE))))

  derived clause number: 533
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* -2 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* 0 ONE) (* -2 ONE)))) (not (= (+ (* 0 ONE) (* -2 ONE)) (+ (* -2 ONE)))))

  derived clause number: 534
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* 0 ONE) (* -2 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* -2 ONE))) (not (= (+ (* 0 ONE) (* -2 ONE)) (+ (* -2 ONE))))), (or )]
  clause args: [derived 530, derived 533]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* -2 ONE))) (not (= (+ (* 0 ONE) (* -2 ONE)) (+ (* -2 ONE)))))

  derived clause number: 535
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -2 ONE)) (+ (* -2 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* -2 ONE)))), (or )]
  clause args: [derived 532, derived 534]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* -2 ONE))))

  derived clause number: 536
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (* -1 (* 2 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* -2 ONE)))) (not (= (+ (* -2 ONE)) (* -1 (* 2 ONE)))))

  derived clause number: 537
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (+ (* -2 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (* -1 (* 2 ONE))) (not (= (+ (* -2 ONE)) (* -1 (* 2 ONE))))), (or )]
  clause args: [derived 535, derived 536]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (* -1 (* 2 ONE))) (not (= (+ (* -2 ONE)) (* -1 (* 2 ONE)))))

  derived clause number: 538
  rule: resolution
  expr args: [(not (= (+ (* -2 ONE)) (* -1 (* 2 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (* -1 (* 2 ONE)))), (or )]
  clause args: [derived 517, derived 537]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (* -1 (* 2 ONE))))

  derived clause number: 539
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 3 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE))))

  derived clause number: 540
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (* -1 (* 2 ONE)))))

  derived clause number: 541
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 3 ONE)) (ControlFlow (* 0 ONE) (* 3 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (* -1 (* 2 ONE))))), (or )]
  clause args: [derived 539, derived 540]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (* -1 (* 2 ONE)))))

  derived clause number: 542
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 2 ONE))) (* -1 (* 2 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))))), (or )]
  clause args: [derived 538, derived 541]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE)))))

  derived clause number: 543
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (not (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))))) (not (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))))

  derived clause number: 544
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (not (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))), (or )]
  clause args: [derived 542, derived 543]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (not (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))))

  derived clause number: 545
  rule: factoring
  expr args: []
  clause args: [derived 504]
  backptr: nil
  conclusion: (or (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 546
  rule: resolution
  expr args: [(not (= (< x@1 (* 100 ONE)) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))), (or )]
  clause args: [derived 545, derived 544]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))))

  derived clause number: 547
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE))))

  derived clause number: 548
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))) (not (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))))

  derived clause number: 549
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))))), (or )]
  clause args: [derived 547, derived 548]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))))

  derived clause number: 550
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))))), (or )]
  clause args: [derived 546, derived 549]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE)))))))

  derived clause number: 551
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))

  derived clause number: 552
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))), (or )]
  clause args: [derived 550, derived 551]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))

  derived clause number: 553
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))), (or )]
  clause args: [derived 399, derived 552]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))

  derived clause number: 554
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= x@1 (+ x@0 (* 1 ONE))) (= x@1 (+ x@0 (* 1 ONE)))))

  derived clause number: 555
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))) (not (= (= x@1 (+ x@0 (* 1 ONE))) (= x@1 (+ x@0 (* 1 ONE))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))

  derived clause number: 556
  rule: resolution
  expr args: [(not (= (= x@1 (+ x@0 (* 1 ONE))) (= x@1 (+ x@0 (* 1 ONE))))), (or (= (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))), (or )]
  clause args: [derived 554, derived 555]
  backptr: nil
  conclusion: (or (= (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))

  derived clause number: 557
  rule: resolution
  expr args: [(not (= (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))), (or (= (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))), (or )]
  clause args: [derived 553, derived 556]
  backptr: nil
  conclusion: (or (= (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))

  derived clause number: 558
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))))

  derived clause number: 559
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))) (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 560
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@0)) (* 1 x@0))

  derived clause number: 561
  rule: or_single
  expr args: []
  clause args: [derived 560]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0)) (* 1 x@0)))

  derived clause number: 562
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 x@0) (+ (* 1 x@0))) (not (= (+ (* 1 x@0)) (* 1 x@0))))

  derived clause number: 563
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0)) (* 1 x@0))), (or (= (* 1 x@0) (+ (* 1 x@0)))), (or )]
  clause args: [derived 561, derived 562]
  backptr: nil
  conclusion: (or (= (* 1 x@0) (+ (* 1 x@0))))

  derived clause number: 564
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* -1 x@0)) (* -1 x@0))

  derived clause number: 565
  rule: or_single
  expr args: []
  clause args: [derived 564]
  backptr: nil
  conclusion: (or (= (+ (* -1 x@0)) (* -1 x@0)))

  derived clause number: 566
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 x@0) (+ (* -1 x@0))) (not (= (+ (* -1 x@0)) (* -1 x@0))))

  derived clause number: 567
  rule: resolution
  expr args: [(not (= (+ (* -1 x@0)) (* -1 x@0))), (or (= (* -1 x@0) (+ (* -1 x@0)))), (or )]
  clause args: [derived 565, derived 566]
  backptr: nil
  conclusion: (or (= (* -1 x@0) (+ (* -1 x@0))))

  derived clause number: 568
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* 1 (+ (* -1 x@0) (* 100 ONE))) (+ (* -1 x@0) (* 100 ONE)))

  derived clause number: 569
  rule: or_single
  expr args: []
  clause args: [derived 568]
  backptr: nil
  conclusion: (or (= (* 1 (+ (* -1 x@0) (* 100 ONE))) (+ (* -1 x@0) (* 100 ONE))))

  derived clause number: 570
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* 1 x@0) (+ (* 1 x@0)))) (not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))) (not (= (* 1 (+ (* -1 x@0) (* 100 ONE))) (+ (* -1 x@0) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 571
  rule: resolution
  expr args: [(not (= (* 1 x@0) (+ (* 1 x@0)))), (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))) (not (= (* 1 (+ (* -1 x@0) (* 100 ONE))) (+ (* -1 x@0) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 563, derived 570]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))) (not (= (* 1 (+ (* -1 x@0) (* 100 ONE))) (+ (* -1 x@0) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 572
  rule: resolution
  expr args: [(not (= (* -1 (* 100 ONE)) (+ (* -100 ONE)))), (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* 1 (+ (* -1 x@0) (* 100 ONE))) (+ (* -1 x@0) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 123, derived 571]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* 1 (+ (* -1 x@0) (* 100 ONE))) (+ (* -1 x@0) (* 100 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 573
  rule: resolution
  expr args: [(not (= (* 1 (+ (* -1 x@0) (* 100 ONE))) (+ (* -1 x@0) (* 100 ONE)))), (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 569, derived 572]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))))

  derived clause number: 574
  rule: resolution
  expr args: [(not (= (* -1 (* 0 ONE)) (+ (* 0 ONE)))), (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 76, derived 573]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))))

  derived clause number: 575
  rule: flatten
  expr args: [(+ (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))), (+ (+ (* 1 x@0)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))

  derived clause number: 576
  rule: or_single
  expr args: []
  clause args: [derived 575]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))))

  derived clause number: 577
  rule: flatten
  expr args: [(+ (* 1 x@0) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))), (+ (+ (* -100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@0) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))

  derived clause number: 578
  rule: or_single
  expr args: []
  clause args: [derived 577]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))))

  derived clause number: 579
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))) (not (= (+ (* 1 x@0) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))))

  derived clause number: 580
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (+ (* 1 x@0) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))))), (or )]
  clause args: [derived 576, derived 579]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))) (not (= (+ (* 1 x@0) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))))

  derived clause number: 581
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))), (or )]
  clause args: [derived 578, derived 580]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE)))))

  derived clause number: 582
  rule: flatten
  expr args: [(+ (* 1 x@0) (* -100 ONE) (+ (* 0 ONE))), (+ (+ (* -1 x@0) (* 100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))))

  derived clause number: 583
  rule: or_single
  expr args: []
  clause args: [derived 582]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE)))))

  derived clause number: 584
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE)))) (not (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))) (not (= (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))))))

  derived clause number: 585
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE)))) (not (= (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE)))))), (or )]
  clause args: [derived 581, derived 584]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE)))) (not (= (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))))))

  derived clause number: 586
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (* -100 ONE) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))))), (or )]
  clause args: [derived 583, derived 585]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE)))))

  derived clause number: 587
  rule: flatten
  expr args: [(+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE)), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)))

  derived clause number: 588
  rule: or_single
  expr args: []
  clause args: [derived 587]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE))))

  derived clause number: 589
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE))) (not (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))))) (not (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)))))

  derived clause number: 590
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))))), (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE))) (not (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE))))), (or )]
  clause args: [derived 586, derived 589]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE))) (not (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)))))

  derived clause number: 591
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)))), (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)))), (or )]
  clause args: [derived 588, derived 590]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE))))

  derived clause number: 592
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE))) (not (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))) (not (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)))))

  derived clause number: 593
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))))), (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE))) (not (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE))))), (or )]
  clause args: [derived 574, derived 592]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE))) (not (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)))))

  derived clause number: 594
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@0)) (+ (* -100 ONE)) (+ (* -1 x@0) (* 100 ONE)) (+ (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)))), (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)))), (or )]
  clause args: [derived 591, derived 593]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE))))

  derived clause number: 595
  rule: consolidate
  expr args: [(+ (* 1 x@0) (* -1 x@0)), (+ (* -100 ONE) (* 100 ONE) (* 0 ONE)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ (* 1 x@0) (* -1 x@0)))

  derived clause number: 596
  rule: or_single
  expr args: []
  clause args: [derived 595]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ (* 1 x@0) (* -1 x@0))))

  derived clause number: 597
  rule: consolidate
  expr args: [(+ ), (+ (* 1 x@0) (* -1 x@0)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@0) (* -1 x@0)) (+ ))

  derived clause number: 598
  rule: or_single
  expr args: []
  clause args: [derived 597]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 x@0)) (+ )))

  derived clause number: 599
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ )) (not (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ (* 1 x@0) (* -1 x@0)))) (not (= (+ (* 1 x@0) (* -1 x@0)) (+ ))))

  derived clause number: 600
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ (* 1 x@0) (* -1 x@0)))), (or (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ )) (not (= (+ (* 1 x@0) (* -1 x@0)) (+ )))), (or )]
  clause args: [derived 596, derived 599]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ )) (not (= (+ (* 1 x@0) (* -1 x@0)) (+ ))))

  derived clause number: 601
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (* -1 x@0)) (+ ))), (or (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ ))), (or )]
  clause args: [derived 598, derived 600]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ )))

  derived clause number: 602
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)))) (not (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ ))))

  derived clause number: 603
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)))), (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ )))), (or )]
  clause args: [derived 594, derived 602]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ )) (not (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ ))))

  derived clause number: 604
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (* -100 ONE) (* -1 x@0) (* 100 ONE) (* 0 ONE)) (+ ))), (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ ))), (or )]
  clause args: [derived 601, derived 603]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ )))

  derived clause number: 605
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ ))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 606
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ ))), (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE))))), (or )]
  clause args: [derived 604, derived 605]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 607
  rule: resolution
  expr args: [(not (= (+ ) (+ (* 0 ONE)))), (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE)))), (or )]
  clause args: [derived 157, derived 606]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE))))

  derived clause number: 608
  rule: or_single_rev
  expr args: []
  clause args: [derived 607]
  backptr: nil
  conclusion: (= (+ (* 1 x@0) (* -1 (* 100 ONE)) (* 1 (+ (* -1 x@0) (* 100 ONE))) (* -1 (* 0 ONE))) (+ (* 0 ONE)))

  derived clause number: 609
  rule: farkas
  expr args: []
  clause args: [derived 608]
  backptr: nil
  conclusion: (or (not (< x@0 (* 100 ONE))) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 610
  rule: resolution
  expr args: [(not (< x@0 (* 100 ONE))), (or (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))), (or (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))))]
  clause args: [derived 559, derived 609]
  backptr: nil
  conclusion: (or (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 611
  rule: total
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (<= (* 100 ONE) x@0) (< x@0 (* 100 ONE)))

  derived clause number: 612
  rule: total
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)) (< (* 0 ONE) (+ (* -1 x@0) (* 100 ONE))))

  derived clause number: 613
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* -1 x@0) (* 100 ONE))) (+ (* 1 x@0) (* -100 ONE)))

  derived clause number: 614
  rule: or_single
  expr args: []
  clause args: [derived 613]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* -1 x@0) (* 100 ONE))) (+ (* 1 x@0) (* -100 ONE))))

  derived clause number: 615
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))) (not (= (* 1 (* 100 ONE)) (+ (* 100 ONE)))) (not (= (* -1 x@0) (+ (* -1 x@0)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@0) (* 100 ONE))) (+ (* 1 x@0) (* -100 ONE)))))

  derived clause number: 616
  rule: resolution
  expr args: [(not (= (* 1 (* 100 ONE)) (+ (* 100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))) (not (= (* -1 x@0) (+ (* -1 x@0)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@0) (* 100 ONE))) (+ (* 1 x@0) (* -100 ONE))))), (or )]
  clause args: [derived 172, derived 615]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))) (not (= (* -1 x@0) (+ (* -1 x@0)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@0) (* 100 ONE))) (+ (* 1 x@0) (* -100 ONE)))))

  derived clause number: 617
  rule: resolution
  expr args: [(not (= (* -1 x@0) (+ (* -1 x@0)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@0) (* 100 ONE))) (+ (* 1 x@0) (* -100 ONE))))), (or )]
  clause args: [derived 567, derived 616]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))) (not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))) (not (= (* -1 (+ (* -1 x@0) (* 100 ONE))) (+ (* 1 x@0) (* -100 ONE)))))

  derived clause number: 618
  rule: resolution
  expr args: [(not (= (* 1 (* 0 ONE)) (+ (* 0 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))) (not (= (* -1 (+ (* -1 x@0) (* 100 ONE))) (+ (* 1 x@0) (* -100 ONE))))), (or )]
  clause args: [derived 186, derived 617]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))) (not (= (* -1 (+ (* -1 x@0) (* 100 ONE))) (+ (* 1 x@0) (* -100 ONE)))))

  derived clause number: 619
  rule: resolution
  expr args: [(not (= (* -1 (+ (* -1 x@0) (* 100 ONE))) (+ (* 1 x@0) (* -100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))), (or )]
  clause args: [derived 614, derived 618]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))))

  derived clause number: 620
  rule: flatten
  expr args: [(+ (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))), (+ (+ (* 100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))

  derived clause number: 621
  rule: or_single
  expr args: []
  clause args: [derived 620]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))))

  derived clause number: 622
  rule: flatten
  expr args: [(+ (* 100 ONE) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))), (+ (+ (* -1 x@0)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))

  derived clause number: 623
  rule: or_single
  expr args: []
  clause args: [derived 622]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))))

  derived clause number: 624
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))) (not (= (+ (* 100 ONE) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))))

  derived clause number: 625
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))) (not (= (+ (* 100 ONE) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))))), (or )]
  clause args: [derived 621, derived 624]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))) (not (= (+ (* 100 ONE) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))))

  derived clause number: 626
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))), (or )]
  clause args: [derived 623, derived 625]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE)))))

  derived clause number: 627
  rule: flatten
  expr args: [(+ (* 100 ONE) (* -1 x@0) (+ (* 1 x@0) (* -100 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))))

  derived clause number: 628
  rule: or_single
  expr args: []
  clause args: [derived 627]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE)))))

  derived clause number: 629
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE)))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))) (not (= (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))))))

  derived clause number: 630
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE)))) (not (= (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE)))))), (or )]
  clause args: [derived 626, derived 629]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE)))) (not (= (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))))))

  derived clause number: 631
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -1 x@0) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))))), (or )]
  clause args: [derived 628, derived 630]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE)))))

  derived clause number: 632
  rule: flatten
  expr args: [(+ (* 100 ONE) (* -1 x@0) (* 0 ONE)), (+ (+ (* 1 x@0) (* -100 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)))

  derived clause number: 633
  rule: or_single
  expr args: []
  clause args: [derived 632]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE))))

  derived clause number: 634
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))))) (not (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)))))

  derived clause number: 635
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE))) (not (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE))))), (or )]
  clause args: [derived 631, derived 634]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE))) (not (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)))))

  derived clause number: 636
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)))), (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)))), (or )]
  clause args: [derived 633, derived 635]
  backptr: nil
  conclusion: (or (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE))))

  derived clause number: 637
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE))) (not (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)))))

  derived clause number: 638
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE))))), (or )]
  clause args: [derived 619, derived 637]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE))) (not (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)))))

  derived clause number: 639
  rule: resolution
  expr args: [(not (= (+ (+ (* 100 ONE)) (+ (* -1 x@0)) (+ (* 0 ONE)) (+ (* 1 x@0) (* -100 ONE))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)))), (or )]
  clause args: [derived 636, derived 638]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE))))

  derived clause number: 640
  rule: consolidate
  expr args: [(+ (* -1 x@0) (* 1 x@0)), (+ (* 100 ONE) (* 0 ONE) (* -100 ONE)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ (* -1 x@0) (* 1 x@0)))

  derived clause number: 641
  rule: or_single
  expr args: []
  clause args: [derived 640]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ (* -1 x@0) (* 1 x@0))))

  derived clause number: 642
  rule: consolidate
  expr args: [(+ ), (+ (* -1 x@0) (* 1 x@0)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* -1 x@0) (* 1 x@0)) (+ ))

  derived clause number: 643
  rule: or_single
  expr args: []
  clause args: [derived 642]
  backptr: nil
  conclusion: (or (= (+ (* -1 x@0) (* 1 x@0)) (+ )))

  derived clause number: 644
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ )) (not (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ (* -1 x@0) (* 1 x@0)))) (not (= (+ (* -1 x@0) (* 1 x@0)) (+ ))))

  derived clause number: 645
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ (* -1 x@0) (* 1 x@0)))), (or (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ )) (not (= (+ (* -1 x@0) (* 1 x@0)) (+ )))), (or )]
  clause args: [derived 641, derived 644]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ )) (not (= (+ (* -1 x@0) (* 1 x@0)) (+ ))))

  derived clause number: 646
  rule: resolution
  expr args: [(not (= (+ (* -1 x@0) (* 1 x@0)) (+ ))), (or (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ ))), (or )]
  clause args: [derived 643, derived 645]
  backptr: nil
  conclusion: (or (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ )))

  derived clause number: 647
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ )) (not (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)))) (not (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ ))))

  derived clause number: 648
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ )) (not (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ )))), (or )]
  clause args: [derived 639, derived 647]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ )) (not (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ ))))

  derived clause number: 649
  rule: resolution
  expr args: [(not (= (+ (* 100 ONE) (* -1 x@0) (* 0 ONE) (* 1 x@0) (* -100 ONE)) (+ ))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ ))), (or )]
  clause args: [derived 646, derived 648]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ )))

  derived clause number: 650
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 0 ONE))) (not (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ ))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 651
  rule: resolution
  expr args: [(not (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ ))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE))))), (or )]
  clause args: [derived 649, derived 650]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 0 ONE))) (not (= (+ ) (+ (* 0 ONE)))))

  derived clause number: 652
  rule: resolution
  expr args: [(not (= (+ ) (+ (* 0 ONE)))), (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 0 ONE)))), (or )]
  clause args: [derived 157, derived 651]
  backptr: nil
  conclusion: (or (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 0 ONE))))

  derived clause number: 653
  rule: or_single_rev
  expr args: []
  clause args: [derived 652]
  backptr: nil
  conclusion: (= (+ (* 1 (* 100 ONE)) (* -1 x@0) (* 1 (* 0 ONE)) (* -1 (+ (* -1 x@0) (* 100 ONE)))) (+ (* 0 ONE)))

  derived clause number: 654
  rule: farkas
  expr args: []
  clause args: [derived 653]
  backptr: nil
  conclusion: (or (not (<= (* 100 ONE) x@0)) (not (< (* 0 ONE) (+ (* -1 x@0) (* 100 ONE)))))

  derived clause number: 655
  rule: resolution
  expr args: [(not (< (* 0 ONE) (+ (* -1 x@0) (* 100 ONE)))), (or (not (<= (* 100 ONE) x@0))), (or (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))]
  clause args: [derived 612, derived 654]
  backptr: nil
  conclusion: (or (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)) (not (<= (* 100 ONE) x@0)))

  derived clause number: 656
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 657
  rule: resolution
  expr args: [(not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))), (or (not (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))))), (or (not (<= (* 100 ONE) x@0)))]
  clause args: [derived 655, derived 656]
  backptr: nil
  conclusion: (or (not (<= (* 100 ONE) x@0)) (not (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 658
  rule: resolution
  expr args: [(not (<= (* 100 ONE) x@0)), (or (not (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))))), (or (< x@0 (* 100 ONE)))]
  clause args: [derived 611, derived 657]
  backptr: nil
  conclusion: (or (< x@0 (* 100 ONE)) (not (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 659
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))) (not (< x@0 (* 100 ONE))) (not (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 660
  rule: resolution
  expr args: [(not (< x@0 (* 100 ONE))), (or (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))) (not (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))))), (or (not (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))))]
  clause args: [derived 658, derived 659]
  backptr: nil
  conclusion: (or (not (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))) (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))) (not (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 661
  rule: factoring
  expr args: []
  clause args: [derived 610]
  backptr: nil
  conclusion: (or (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))))

  derived clause number: 662
  rule: factoring
  expr args: []
  clause args: [derived 660]
  backptr: nil
  conclusion: (or (not (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))) (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 663
  rule: resolution
  expr args: [(not (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))), (or (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))))), (or (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))))]
  clause args: [derived 661, derived 662]
  backptr: nil
  conclusion: (or (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))) (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 664
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)))) (not (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))))) (not (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)))))

  derived clause number: 665
  rule: factoring
  expr args: []
  clause args: [derived 663]
  backptr: nil
  conclusion: (or (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE)))))

  derived clause number: 666
  rule: resolution
  expr args: [(not (= (< x@0 (* 100 ONE)) (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))))), (or (= (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)))) (not (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))))), (or )]
  clause args: [derived 665, derived 664]
  backptr: nil
  conclusion: (or (= (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)))) (not (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)))))

  derived clause number: 667
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)))), (or (= (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))))), (or )]
  clause args: [derived 558, derived 666]
  backptr: nil
  conclusion: (or (= (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)))))

  derived clause number: 668
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))) (not (= (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))))) (not (= (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))

  derived clause number: 669
  rule: resolution
  expr args: [(not (= (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))))), (or (= (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))) (not (= (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))), (or )]
  clause args: [derived 667, derived 668]
  backptr: nil
  conclusion: (or (= (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))) (not (= (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))

  derived clause number: 670
  rule: resolution
  expr args: [(not (= (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))), (or (= (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))), (or )]
  clause args: [derived 557, derived 669]
  backptr: nil
  conclusion: (or (= (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))

  derived clause number: 671
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE))))

  derived clause number: 672
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))) (not (= (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)))) (not (= (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))

  derived clause number: 673
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))) (not (= (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))), (or )]
  clause args: [derived 671, derived 672]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))) (not (= (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))

  derived clause number: 674
  rule: resolution
  expr args: [(not (= (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))), (or )]
  clause args: [derived 670, derived 673]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))

  derived clause number: 675
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))) (not (= (< (* 3 ONE) (* 100 ONE)) true)) (not (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))

  derived clause number: 676
  rule: resolution
  expr args: [(not (= (< (* 3 ONE) (* 100 ONE)) true)), (or (= (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))), (or )]
  clause args: [derived 244, derived 675]
  backptr: nil
  conclusion: (or (= (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))

  derived clause number: 677
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))), (or (= (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))), (or )]
  clause args: [derived 674, derived 676]
  backptr: nil
  conclusion: (or (= (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))

  derived clause number: 678
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 9 ONE)) (* 9 ONE))

  derived clause number: 679
  rule: or_single
  expr args: []
  clause args: [derived 678]
  backptr: nil
  conclusion: (or (= (+ (* 9 ONE)) (* 9 ONE)))

  derived clause number: 680
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 9 ONE) (+ (* 9 ONE))) (not (= (+ (* 9 ONE)) (* 9 ONE))))

  derived clause number: 681
  rule: resolution
  expr args: [(not (= (+ (* 9 ONE)) (* 9 ONE))), (or (= (* 9 ONE) (+ (* 9 ONE)))), (or )]
  clause args: [derived 679, derived 680]
  backptr: nil
  conclusion: (or (= (* 9 ONE) (+ (* 9 ONE))))

  derived clause number: 682
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 9 ONE)) (* -1 (+ (* 9 ONE)))) (not (= (* 9 ONE) (+ (* 9 ONE)))))

  derived clause number: 683
  rule: resolution
  expr args: [(not (= (* 9 ONE) (+ (* 9 ONE)))), (or (= (* -1 (* 9 ONE)) (* -1 (+ (* 9 ONE))))), (or )]
  clause args: [derived 681, derived 682]
  backptr: nil
  conclusion: (or (= (* -1 (* 9 ONE)) (* -1 (+ (* 9 ONE)))))

  derived clause number: 684
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 9 ONE))) (+ (* -9 ONE)))

  derived clause number: 685
  rule: or_single
  expr args: []
  clause args: [derived 684]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 9 ONE))) (+ (* -9 ONE))))

  derived clause number: 686
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 9 ONE)) (+ (* -9 ONE))) (not (= (* -1 (* 9 ONE)) (* -1 (+ (* 9 ONE))))) (not (= (* -1 (+ (* 9 ONE))) (+ (* -9 ONE)))))

  derived clause number: 687
  rule: resolution
  expr args: [(not (= (* -1 (* 9 ONE)) (* -1 (+ (* 9 ONE))))), (or (= (* -1 (* 9 ONE)) (+ (* -9 ONE))) (not (= (* -1 (+ (* 9 ONE))) (+ (* -9 ONE))))), (or )]
  clause args: [derived 683, derived 686]
  backptr: nil
  conclusion: (or (= (* -1 (* 9 ONE)) (+ (* -9 ONE))) (not (= (* -1 (+ (* 9 ONE))) (+ (* -9 ONE)))))

  derived clause number: 688
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 9 ONE))) (+ (* -9 ONE)))), (or (= (* -1 (* 9 ONE)) (+ (* -9 ONE)))), (or )]
  clause args: [derived 685, derived 687]
  backptr: nil
  conclusion: (or (= (* -1 (* 9 ONE)) (+ (* -9 ONE))))

  derived clause number: 689
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* -9 ONE)) (* -1 (* 9 ONE))) (not (= (* -1 (* 9 ONE)) (+ (* -9 ONE)))))

  derived clause number: 690
  rule: resolution
  expr args: [(not (= (* -1 (* 9 ONE)) (+ (* -9 ONE)))), (or (= (+ (* -9 ONE)) (* -1 (* 9 ONE)))), (or )]
  clause args: [derived 688, derived 689]
  backptr: nil
  conclusion: (or (= (+ (* -9 ONE)) (* -1 (* 9 ONE))))

  derived clause number: 691
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (+ (* 0 ONE)) (+ (* -9 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))) (not (= (* -1 (* 9 ONE)) (+ (* -9 ONE)))))

  derived clause number: 692
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (+ (* 0 ONE)) (+ (* -9 ONE)))) (not (= (* -1 (* 9 ONE)) (+ (* -9 ONE))))), (or )]
  clause args: [derived 69, derived 691]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (+ (* 0 ONE)) (+ (* -9 ONE)))) (not (= (* -1 (* 9 ONE)) (+ (* -9 ONE)))))

  derived clause number: 693
  rule: resolution
  expr args: [(not (= (* -1 (* 9 ONE)) (+ (* -9 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (+ (* 0 ONE)) (+ (* -9 ONE))))), (or )]
  clause args: [derived 688, derived 692]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (+ (* 0 ONE)) (+ (* -9 ONE)))))

  derived clause number: 694
  rule: flatten
  expr args: [(+ (+ (* -9 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (+ (* -9 ONE))))

  derived clause number: 695
  rule: or_single
  expr args: []
  clause args: [derived 694]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (+ (* -9 ONE)))))

  derived clause number: 696
  rule: flatten
  expr args: [(+ (* 0 ONE)), (+ (+ (* -9 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE)))

  derived clause number: 697
  rule: or_single
  expr args: []
  clause args: [derived 696]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE))))

  derived clause number: 698
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (+ (* -9 ONE))))) (not (= (+ (* 0 ONE) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE)))))

  derived clause number: 699
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (+ (* -9 ONE))))), (or (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE))) (not (= (+ (* 0 ONE) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE))))), (or )]
  clause args: [derived 695, derived 698]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE))) (not (= (+ (* 0 ONE) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE)))))

  derived clause number: 700
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE)))), (or (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE)))), (or )]
  clause args: [derived 697, derived 699]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE))))

  derived clause number: 701
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* 0 ONE) (* -9 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (+ (* 0 ONE)) (+ (* -9 ONE))))) (not (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE)))))

  derived clause number: 702
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (+ (* 0 ONE)) (+ (* -9 ONE))))), (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* 0 ONE) (* -9 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE))))), (or )]
  clause args: [derived 693, derived 701]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* 0 ONE) (* -9 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE)))))

  derived clause number: 703
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -9 ONE))) (+ (* 0 ONE) (* -9 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* 0 ONE) (* -9 ONE)))), (or )]
  clause args: [derived 700, derived 702]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* 0 ONE) (* -9 ONE))))

  derived clause number: 704
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE) (* -9 ONE)), (+ (* -9 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (* -9 ONE)) (+ (* -9 ONE)))

  derived clause number: 705
  rule: or_single
  expr args: []
  clause args: [derived 704]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -9 ONE)) (+ (* -9 ONE))))

  derived clause number: 706
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* -9 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* 0 ONE) (* -9 ONE)))) (not (= (+ (* 0 ONE) (* -9 ONE)) (+ (* -9 ONE)))))

  derived clause number: 707
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* 0 ONE) (* -9 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* -9 ONE))) (not (= (+ (* 0 ONE) (* -9 ONE)) (+ (* -9 ONE))))), (or )]
  clause args: [derived 703, derived 706]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* -9 ONE))) (not (= (+ (* 0 ONE) (* -9 ONE)) (+ (* -9 ONE)))))

  derived clause number: 708
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -9 ONE)) (+ (* -9 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* -9 ONE)))), (or )]
  clause args: [derived 705, derived 707]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* -9 ONE))))

  derived clause number: 709
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (* -1 (* 9 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* -9 ONE)))) (not (= (+ (* -9 ONE)) (* -1 (* 9 ONE)))))

  derived clause number: 710
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (+ (* -9 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (* -1 (* 9 ONE))) (not (= (+ (* -9 ONE)) (* -1 (* 9 ONE))))), (or )]
  clause args: [derived 708, derived 709]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (* -1 (* 9 ONE))) (not (= (+ (* -9 ONE)) (* -1 (* 9 ONE)))))

  derived clause number: 711
  rule: resolution
  expr args: [(not (= (+ (* -9 ONE)) (* -1 (* 9 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (* -1 (* 9 ONE)))), (or )]
  clause args: [derived 690, derived 710]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (* -1 (* 9 ONE))))

  derived clause number: 712
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 8 ONE)) (ControlFlow (* 0 ONE) (* 8 ONE))))

  derived clause number: 713
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 8 ONE)) (ControlFlow (* 0 ONE) (* 8 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (* -1 (* 9 ONE)))))

  derived clause number: 714
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 8 ONE)) (ControlFlow (* 0 ONE) (* 8 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (* -1 (* 9 ONE))))), (or )]
  clause args: [derived 712, derived 713]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (* -1 (* 9 ONE)))))

  derived clause number: 715
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 9 ONE))) (* -1 (* 9 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))))), (or )]
  clause args: [derived 711, derived 714]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE)))))

  derived clause number: 716
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true)) (not (= (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))))) (not (= (< (* 3 ONE) (* 100 ONE)) true)))

  derived clause number: 717
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true)) (not (= (< (* 3 ONE) (* 100 ONE)) true))), (or )]
  clause args: [derived 715, derived 716]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true)) (not (= (< (* 3 ONE) (* 100 ONE)) true)))

  derived clause number: 718
  rule: resolution
  expr args: [(not (= (< (* 3 ONE) (* 100 ONE)) true)), (or (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true))), (or )]
  clause args: [derived 244, derived 717]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true)))

  derived clause number: 719
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true))) (not (= (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))

  derived clause number: 720
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))) (not (= (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))), (or )]
  clause args: [derived 718, derived 719]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))) (not (= (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))

  derived clause number: 721
  rule: resolution
  expr args: [(not (= (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))), (or )]
  clause args: [derived 677, derived 720]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))

  derived clause number: 722
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE))))

  derived clause number: 723
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))) (not (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))

  derived clause number: 724
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))), (or )]
  clause args: [derived 722, derived 723]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))

  derived clause number: 725
  rule: resolution
  expr args: [(not (= (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))), (or )]
  clause args: [derived 721, derived 724]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))

  derived clause number: 726
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true)))

  derived clause number: 727
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))

  derived clause number: 728
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))), (or )]
  clause args: [derived 726, derived 727]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))

  derived clause number: 729
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))), (or )]
  clause args: [derived 725, derived 728]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))

  derived clause number: 730
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE))))

  derived clause number: 731
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))) (not (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))))

  derived clause number: 732
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))), (or )]
  clause args: [derived 730, derived 731]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))))

  derived clause number: 733
  rule: resolution
  expr args: [(not (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))), (or )]
  clause args: [derived 729, derived 732]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))))

  derived clause number: 734
  rule: not_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))))

  derived clause number: 735
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))), (or (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))))), (or )]
  clause args: [derived 733, derived 734]
  backptr: nil
  conclusion: (or (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))))

  derived clause number: 736
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))))) (not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))))

  derived clause number: 737
  rule: resolution
  expr args: [(not (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))))), (or (not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))), (or )]
  clause args: [derived 735, derived 736]
  backptr: nil
  conclusion: (or (not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))))

  derived clause number: 738
  rule: resolution
  expr args: [(not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))), (or (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))))]
  clause args: [derived 49, derived 737]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))))

  derived clause number: 739
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (+ (* 0 ONE) (* -1 (* 9 ONE)))) (< (* 3 ONE) (* 100 ONE))) (=> (< (* 3 ONE) (* 100 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (< x@0 (* 100 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (+ (* 0 ONE) (* -1 (* 2 ONE)))) (< x@1 (* 100 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (+ (* 0 ONE) (* -1 (* 4 ONE))))) (< x@2 (* 100 ONE)))))))))))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))))]
  clause args: [derived 738, derived 1]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))))

  derived clause number: 740
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))), (or ), (or (not (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))]
  clause args: [derived 48, derived 739]
  backptr: nil
  conclusion: (or (not (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))))

  derived clause number: 741
  rule: resolution
  expr args: [(not (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true)) (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))]
  clause args: [derived 47, derived 740]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true)) (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))

  derived clause number: 742
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 1 ONE)) true)), (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))))), (or )]
  clause args: [derived 46, derived 741]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))))

  derived clause number: 743
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 8 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true)) (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))]
  clause args: [derived 44, derived 742]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true)) (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))

  derived clause number: 744
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* -1 (* 9 ONE))) true)), (or (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))), (or )]
  clause args: [derived 41, derived 743]
  backptr: nil
  conclusion: (or (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))))

  derived clause number: 745
  rule: resolution
  expr args: [(not (=> true (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))]
  clause args: [derived 38, derived 744]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))))

  derived clause number: 746
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 8 ONE)) (* 7 ONE)) (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))), (or ), (or (not (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))]
  clause args: [derived 37, derived 745]
  backptr: nil
  conclusion: (or (not (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))))

  derived clause number: 747
  rule: resolution
  expr args: [(not (=> (and (not (<= (+ (* -1 x@0) (* 100 ONE)) (* 0 ONE))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))) (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))))), (or ), (or (not (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))]
  clause args: [derived 36, derived 746]
  backptr: nil
  conclusion: (or (not (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))))

  derived clause number: 748
  rule: resolution
  expr args: [(not (=> (= x@1 (+ x@0 (* 1 ONE))) (and (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 3 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 3 ONE)) (* -1 (* 2 ONE))) (not (<= (+ (* -1 x@1) (* 100 ONE)) (* 0 ONE))))) (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))]
  clause args: [derived 35, derived 747]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))))

  derived clause number: 749
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 5 ONE)) (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE)))))), (or ), (or (not (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))]
  clause args: [derived 13, derived 748]
  backptr: nil
  conclusion: (or (not (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))))

  derived clause number: 750
  rule: resolution
  expr args: [(not (=> (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (not (<= (+ (* -1 x@2) (* 100 ONE)) (* 0 ONE))))), (or ), (or (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))))]
  clause args: [derived 12, derived 749]
  backptr: nil
  conclusion: (or (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))))

  derived clause number: 751
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))

  derived clause number: 752
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))) (not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))

  derived clause number: 753
  rule: factoring
  expr args: []
  clause args: [derived 11]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))))

  derived clause number: 754
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))), (or (not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))), (or )]
  clause args: [derived 753, derived 752]
  backptr: nil
  conclusion: (or (not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))

  derived clause number: 755
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))), (or (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))), (or (not (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))))]
  clause args: [derived 751, derived 754]
  backptr: nil
  conclusion: (or (not (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))) (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))

  derived clause number: 756
  rule: resolution
  expr args: [(not (and (= x@2 (+ x@1 (* 2 ONE))) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE))))), (or (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))), (or )]
  clause args: [derived 750, derived 755]
  backptr: nil
  conclusion: (or (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE))))

  derived clause number: 757
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* -1 (* 4 ONE)))), (or ), (or (not (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))))]
  clause args: [derived 6, derived 2]
  backptr: nil
  conclusion: (or (not (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))))

  derived clause number: 758
  rule: resolution
  expr args: [(not (= (* -1 (* 4 ONE)) (ControlFlow (* 0 ONE) (* 5 ONE)))), (or ), (or )]
  clause args: [derived 756, derived 757]
  backptr: nil
  conclusion: (or )

  derived clause number: 759
  rule: or_nil
  expr args: []
  clause args: [derived 758]
  backptr: nil
  conclusion: false

