vars: a b c p
premises:
  a0: (and (or (and (p a) (p b)) (and (p b) (p c))) (not (p b)))
steps:
  derived clause number: 0
  rule: or_single
  expr args: []
  clause args: [premise a0]
  backptr: nil
  conclusion: (or (and (or (and (p a) (p b)) (and (p b) (p c))) (not (p b))))

  derived clause number: 1
  rule: true+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or true)

  derived clause number: 2
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)) (p b) (= (p b) true))

  derived clause number: 3
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (p b) true) (not (p b)) (not true))

  derived clause number: 4
  rule: resolution
  expr args: [(not (p b)), (or (= (p b) true) (not true)), (or (= (p b) (= (p b) true)) (= (p b) true))]
  clause args: [derived 2, derived 3]
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)) (= (p b) true) (= (p b) true) (not true))

  derived clause number: 5
  rule: =-1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (p b) true)) (p b) (not true))

  derived clause number: 6
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)) (not (p b)) (not (= (p b) true)))

  derived clause number: 7
  rule: resolution
  expr args: [(not (p b)), (or (= (p b) (= (p b) true)) (not (= (p b) true))), (or (not true) (not (= (p b) true)))]
  clause args: [derived 5, derived 6]
  backptr: nil
  conclusion: (or (not (= (p b) true)) (not true) (= (p b) (= (p b) true)) (not (= (p b) true)))

  derived clause number: 8
  rule: factoring
  expr args: []
  clause args: [derived 4]
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)) (= (p b) true) (not true))

  derived clause number: 9
  rule: factoring
  expr args: []
  clause args: [derived 7]
  backptr: nil
  conclusion: (or (not (= (p b) true)) (not true) (= (p b) (= (p b) true)))

  derived clause number: 10
  rule: resolution
  expr args: [(not (= (p b) true)), (or (not true) (= (p b) (= (p b) true))), (or (not true) (= (p b) (= (p b) true)))]
  clause args: [derived 8, derived 9]
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)) (not true) (not true) (= (p b) (= (p b) true)))

  derived clause number: 11
  rule: factoring
  expr args: []
  clause args: [derived 10]
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)) (not true))

  derived clause number: 12
  rule: resolution
  expr args: [(not true), (or (= (p b) (= (p b) true))), (or )]
  clause args: [derived 1, derived 11]
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)))

  derived clause number: 13
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (p b) (= (p b) true))) (not (p b)) (= (p b) true))

  derived clause number: 14
  rule: resolution
  expr args: [(not (= (p b) (= (p b) true))), (or (not (p b)) (= (p b) true)), (or )]
  clause args: [derived 12, derived 13]
  backptr: nil
  conclusion: (or (not (p b)) (= (p b) true))

  derived clause number: 15
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (p b)) (p b))

  derived clause number: 16
  rule: not_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not (p b)) (not (= (p b) true))) (not (= (p b) (= (p b) true))))

  derived clause number: 17
  rule: resolution
  expr args: [(not (= (p b) (= (p b) true))), (or (= (not (p b)) (not (= (p b) true)))), (or )]
  clause args: [derived 12, derived 16]
  backptr: nil
  conclusion: (or (= (not (p b)) (not (= (p b) true))))

  derived clause number: 18
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (not (p b)) (not (= (p b) true)))) (not (not (p b))) (not (= (p b) true)))

  derived clause number: 19
  rule: resolution
  expr args: [(not (= (not (p b)) (not (= (p b) true)))), (or (not (not (p b))) (not (= (p b) true))), (or )]
  clause args: [derived 17, derived 18]
  backptr: nil
  conclusion: (or (not (not (p b))) (not (= (p b) true)))

  derived clause number: 20
  rule: resolution
  expr args: [(not (not (p b))), (or (not (= (p b) true))), (or (p b))]
  clause args: [derived 15, derived 19]
  backptr: nil
  conclusion: (or (p b) (not (= (p b) true)))

  derived clause number: 21
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (or (and (p a) (p b)) (and (p b) (p c))) (not (p b)))) (not (p b)))

  derived clause number: 22
  rule: resolution
  expr args: [(not (and (or (and (p a) (p b)) (and (p b) (p c))) (not (p b)))), (or (not (p b))), (or )]
  clause args: [derived 0, derived 21]
  backptr: nil
  conclusion: (or (not (p b)))

  derived clause number: 23
  rule: resolution
  expr args: [(not (p b)), (or ), (or (not (= (p b) true)))]
  clause args: [derived 20, derived 22]
  backptr: nil
  conclusion: (or (not (= (p b) true)))

  derived clause number: 24
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (or (and (p a) (p b)) (and (p b) (p c))) (not (p b)))) (or (and (p a) (p b)) (and (p b) (p c))))

  derived clause number: 25
  rule: resolution
  expr args: [(not (and (or (and (p a) (p b)) (and (p b) (p c))) (not (p b)))), (or (or (and (p a) (p b)) (and (p b) (p c)))), (or )]
  clause args: [derived 0, derived 24]
  backptr: nil
  conclusion: (or (or (and (p a) (p b)) (and (p b) (p c))))

  derived clause number: 26
  rule: or-
  expr args: [(not (or (and (p a) (p b)) (and (p b) (p c))))]
  clause args: []
  backptr: nil
  conclusion: (or (not (or (and (p a) (p b)) (and (p b) (p c)))) (and (p a) (p b)) (and (p b) (p c)))

  derived clause number: 27
  rule: resolution
  expr args: [(not (or (and (p a) (p b)) (and (p b) (p c)))), (or (and (p a) (p b)) (and (p b) (p c))), (or )]
  clause args: [derived 25, derived 26]
  backptr: nil
  conclusion: (or (and (p a) (p b)) (and (p b) (p c)))

  derived clause number: 28
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (p b) (p c))) (p b))

  derived clause number: 29
  rule: resolution
  expr args: [(not (p b)), (or (= (p b) true)), (or (not (and (p b) (p c))))]
  clause args: [derived 28, derived 14]
  backptr: nil
  conclusion: (or (not (and (p b) (p c))) (= (p b) true))

  derived clause number: 30
  rule: resolution
  expr args: [(not (= (p b) true)), (or ), (or (not (and (p b) (p c))))]
  clause args: [derived 29, derived 23]
  backptr: nil
  conclusion: (or (not (and (p b) (p c))))

  derived clause number: 31
  rule: resolution
  expr args: [(not (and (p b) (p c))), (or ), (or (and (p a) (p b)))]
  clause args: [derived 27, derived 30]
  backptr: nil
  conclusion: (or (and (p a) (p b)))

  derived clause number: 32
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (p a) (p b))) (p b))

  derived clause number: 33
  rule: resolution
  expr args: [(not (p b)), (or (= (p b) true)), (or (not (and (p a) (p b))))]
  clause args: [derived 32, derived 14]
  backptr: nil
  conclusion: (or (not (and (p a) (p b))) (= (p b) true))

  derived clause number: 34
  rule: resolution
  expr args: [(not (= (p b) true)), (or ), (or (not (and (p a) (p b))))]
  clause args: [derived 33, derived 23]
  backptr: nil
  conclusion: (or (not (and (p a) (p b))))

  derived clause number: 35
  rule: resolution
  expr args: [(not (and (p a) (p b))), (or ), (or )]
  clause args: [derived 31, derived 34]
  backptr: nil
  conclusion: (or )

  derived clause number: 36
  rule: or_nil
  expr args: []
  clause args: [derived 35]
  backptr: nil
  conclusion: false

