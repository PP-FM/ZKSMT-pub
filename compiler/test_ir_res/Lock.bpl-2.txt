vars: ControlFlow ONE held@0 held@1 held@2 x@0 x@1 x@2
premises:
  a0: (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))))
steps:
  derived clause number: 0
  rule: or_single
  expr args: []
  clause args: [premise a0]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))))))

  derived clause number: 1
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not held@1) held@1)

  derived clause number: 2
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (not held@1)) (not held@1))

  derived clause number: 3
  rule: xor+
  expr args: [(and held@2 held@1 held@2), (and held@1 held@2)]
  clause args: []
  backptr: nil
  conclusion: (or (xor held@2 held@1) (xor held@2) (not (xor held@1)))

  derived clause number: 4
  rule: xor1-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (xor held@2)) held@2)

  derived clause number: 5
  rule: resolution
  expr args: [(not (xor held@2)), (or held@2), (or (xor held@2 held@1) (not (xor held@1)))]
  clause args: [derived 3, derived 4]
  backptr: nil
  conclusion: (or (xor held@2 held@1) held@2 (not (xor held@1)))

  derived clause number: 6
  rule: xor1+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (xor held@1) (not held@1))

  derived clause number: 7
  rule: resolution
  expr args: [(not (xor held@1)), (or (xor held@2 held@1) held@2), (or (not held@1))]
  clause args: [derived 6, derived 5]
  backptr: nil
  conclusion: (or (xor held@2 held@1) held@2 (not held@1))

  derived clause number: 8
  rule: true+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or true)

  derived clause number: 9
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (not true))

  derived clause number: 10
  rule: resolution
  expr args: [(not true), (or (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)), (or )]
  clause args: [derived 8, derived 9]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true))

  derived clause number: 11
  rule: =>+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (and held@1 (= x@2 x@0)))

  derived clause number: 12
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (not (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))

  derived clause number: 13
  rule: =>+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (and (not held@1) (= x@2 x@1)))

  derived clause number: 14
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (not (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))

  derived clause number: 15
  rule: and+
  expr args: [(and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (and (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (not (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))]
  clause args: []
  backptr: nil
  conclusion: (or (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (not (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))

  derived clause number: 16
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (not (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 17
  rule: resolution
  expr args: [(not (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))), (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (not (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))]
  clause args: [derived 15, derived 16]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (not (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 18
  rule: and+
  expr args: [(and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (and (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))]
  clause args: []
  backptr: nil
  conclusion: (or (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))

  derived clause number: 19
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (not (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 20
  rule: resolution
  expr args: [(not (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))), (or (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))]
  clause args: [derived 18, derived 19]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 21
  rule: false-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not false))

  derived clause number: 22
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))) (not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))

  derived clause number: 23
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))

  derived clause number: 24
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (not true))

  derived clause number: 25
  rule: resolution
  expr args: [(not true), (or (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true)), (or )]
  clause args: [derived 8, derived 24]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true))

  derived clause number: 26
  rule: and+
  expr args: [(and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))), (and (not (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true)) (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))]
  clause args: []
  backptr: nil
  conclusion: (or (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true)) (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))

  derived clause number: 27
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))) (not (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))

  derived clause number: 28
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))

  derived clause number: 29
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))))

  derived clause number: 30
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not false) true) (not (not false)) (not true))

  derived clause number: 31
  rule: resolution
  expr args: [(not (not false)), (or (= (not false) true) (not true)), (or )]
  clause args: [derived 21, derived 30]
  backptr: nil
  conclusion: (or (= (not false) true) (not true))

  derived clause number: 32
  rule: resolution
  expr args: [(not true), (or (= (not false) true)), (or )]
  clause args: [derived 8, derived 31]
  backptr: nil
  conclusion: (or (= (not false) true))

  derived clause number: 33
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not held@0) (not held@0)))

  derived clause number: 34
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= held@2 held@2))

  derived clause number: 35
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 3 ONE)) (* 3 ONE))

  derived clause number: 36
  rule: or_single
  expr args: []
  clause args: [derived 35]
  backptr: nil
  conclusion: (or (= (+ (* 3 ONE)) (* 3 ONE)))

  derived clause number: 37
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 3 ONE) (+ (* 3 ONE))) (not (= (+ (* 3 ONE)) (* 3 ONE))))

  derived clause number: 38
  rule: resolution
  expr args: [(not (= (+ (* 3 ONE)) (* 3 ONE))), (or (= (* 3 ONE) (+ (* 3 ONE)))), (or )]
  clause args: [derived 36, derived 37]
  backptr: nil
  conclusion: (or (= (* 3 ONE) (+ (* 3 ONE))))

  derived clause number: 39
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE)))) (not (= (* 3 ONE) (+ (* 3 ONE)))))

  derived clause number: 40
  rule: resolution
  expr args: [(not (= (* 3 ONE) (+ (* 3 ONE)))), (or (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE))))), (or )]
  clause args: [derived 38, derived 39]
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE)))))

  derived clause number: 41
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE)))

  derived clause number: 42
  rule: or_single
  expr args: []
  clause args: [derived 41]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE))))

  derived clause number: 43
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE))) (not (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE))))) (not (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE)))))

  derived clause number: 44
  rule: resolution
  expr args: [(not (= (* -1 (* 3 ONE)) (* -1 (+ (* 3 ONE))))), (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE))) (not (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE))))), (or )]
  clause args: [derived 40, derived 43]
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE))) (not (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE)))))

  derived clause number: 45
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 3 ONE))) (+ (* -3 ONE)))), (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))), (or )]
  clause args: [derived 42, derived 44]
  backptr: nil
  conclusion: (or (= (* -1 (* 3 ONE)) (+ (* -3 ONE))))

  derived clause number: 46
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* -3 ONE)) (* -1 (* 3 ONE))) (not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))))

  derived clause number: 47
  rule: resolution
  expr args: [(not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))), (or (= (+ (* -3 ONE)) (* -1 (* 3 ONE)))), (or )]
  clause args: [derived 45, derived 46]
  backptr: nil
  conclusion: (or (= (+ (* -3 ONE)) (* -1 (* 3 ONE))))

  derived clause number: 48
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE)) (* 0 ONE))

  derived clause number: 49
  rule: or_single
  expr args: []
  clause args: [derived 48]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE)) (* 0 ONE)))

  derived clause number: 50
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 0 ONE) (+ (* 0 ONE))) (not (= (+ (* 0 ONE)) (* 0 ONE))))

  derived clause number: 51
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE)) (* 0 ONE))), (or (= (* 0 ONE) (+ (* 0 ONE)))), (or )]
  clause args: [derived 49, derived 50]
  backptr: nil
  conclusion: (or (= (* 0 ONE) (+ (* 0 ONE))))

  derived clause number: 52
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))) (not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))))

  derived clause number: 53
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE)))) (not (= (* -1 (* 3 ONE)) (+ (* -3 ONE))))), (or )]
  clause args: [derived 51, derived 52]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE)))) (not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))))

  derived clause number: 54
  rule: resolution
  expr args: [(not (= (* -1 (* 3 ONE)) (+ (* -3 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE))))), (or )]
  clause args: [derived 45, derived 53]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE)))))

  derived clause number: 55
  rule: flatten
  expr args: [(+ (+ (* -3 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (+ (* -3 ONE))))

  derived clause number: 56
  rule: or_single
  expr args: []
  clause args: [derived 55]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (+ (* -3 ONE)))))

  derived clause number: 57
  rule: flatten
  expr args: [(+ (* 0 ONE)), (+ (+ (* -3 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))

  derived clause number: 58
  rule: or_single
  expr args: []
  clause args: [derived 57]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))))

  derived clause number: 59
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (+ (* -3 ONE))))) (not (= (+ (* 0 ONE) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))))

  derived clause number: 60
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (+ (* -3 ONE))))), (or (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))) (not (= (+ (* 0 ONE) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))))), (or )]
  clause args: [derived 56, derived 59]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))) (not (= (+ (* 0 ONE) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))))

  derived clause number: 61
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))), (or (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))), (or )]
  clause args: [derived 58, derived 60]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))))

  derived clause number: 62
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE))))) (not (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))))

  derived clause number: 63
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (+ (* 0 ONE)) (+ (* -3 ONE))))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE))))), (or )]
  clause args: [derived 54, derived 62]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))))

  derived clause number: 64
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -3 ONE))) (+ (* 0 ONE) (* -3 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE)))), (or )]
  clause args: [derived 61, derived 63]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE))))

  derived clause number: 65
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE) (* -3 ONE)), (+ (* -3 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (* -3 ONE)) (+ (* -3 ONE)))

  derived clause number: 66
  rule: or_single
  expr args: []
  clause args: [derived 65]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -3 ONE)) (+ (* -3 ONE))))

  derived clause number: 67
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE)))) (not (= (+ (* 0 ONE) (* -3 ONE)) (+ (* -3 ONE)))))

  derived clause number: 68
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* 0 ONE) (* -3 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE))) (not (= (+ (* 0 ONE) (* -3 ONE)) (+ (* -3 ONE))))), (or )]
  clause args: [derived 64, derived 67]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE))) (not (= (+ (* 0 ONE) (* -3 ONE)) (+ (* -3 ONE)))))

  derived clause number: 69
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -3 ONE)) (+ (* -3 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE)))), (or )]
  clause args: [derived 66, derived 68]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE))))

  derived clause number: 70
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE)))) (not (= (+ (* -3 ONE)) (* -1 (* 3 ONE)))))

  derived clause number: 71
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (+ (* -3 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE))) (not (= (+ (* -3 ONE)) (* -1 (* 3 ONE))))), (or )]
  clause args: [derived 69, derived 70]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE))) (not (= (+ (* -3 ONE)) (* -1 (* 3 ONE)))))

  derived clause number: 72
  rule: resolution
  expr args: [(not (= (+ (* -3 ONE)) (* -1 (* 3 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE)))), (or )]
  clause args: [derived 47, derived 71]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE))))

  derived clause number: 73
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 4 ONE)) (ControlFlow (* 0 ONE) (* 4 ONE))))

  derived clause number: 74
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 4 ONE)) (ControlFlow (* 0 ONE) (* 4 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE)))))

  derived clause number: 75
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 4 ONE)) (ControlFlow (* 0 ONE) (* 4 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE))))), (or )]
  clause args: [derived 73, derived 74]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE)))))

  derived clause number: 76
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 3 ONE))) (* -1 (* 3 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))))), (or )]
  clause args: [derived 72, derived 75]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE)))))

  derived clause number: 77
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)) (not (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))))) (not (= held@2 held@2)))

  derived clause number: 78
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)) (not (= held@2 held@2))), (or )]
  clause args: [derived 76, derived 77]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)) (not (= held@2 held@2)))

  derived clause number: 79
  rule: resolution
  expr args: [(not (= held@2 held@2)), (or (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))), (or )]
  clause args: [derived 34, derived 78]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))

  derived clause number: 80
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= x@2 x@0) (= x@2 x@0)))

  derived clause number: 81
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not held@1) (not held@1)))

  derived clause number: 82
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 ONE)) (* 1 ONE))

  derived clause number: 83
  rule: or_single
  expr args: []
  clause args: [derived 82]
  backptr: nil
  conclusion: (or (= (+ (* 1 ONE)) (* 1 ONE)))

  derived clause number: 84
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 ONE) (+ (* 1 ONE))) (not (= (+ (* 1 ONE)) (* 1 ONE))))

  derived clause number: 85
  rule: resolution
  expr args: [(not (= (+ (* 1 ONE)) (* 1 ONE))), (or (= (* 1 ONE) (+ (* 1 ONE)))), (or )]
  clause args: [derived 83, derived 84]
  backptr: nil
  conclusion: (or (= (* 1 ONE) (+ (* 1 ONE))))

  derived clause number: 86
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE)))) (not (= (* 1 ONE) (+ (* 1 ONE)))))

  derived clause number: 87
  rule: resolution
  expr args: [(not (= (* 1 ONE) (+ (* 1 ONE)))), (or (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE))))), (or )]
  clause args: [derived 85, derived 86]
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE)))))

  derived clause number: 88
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE)))

  derived clause number: 89
  rule: or_single
  expr args: []
  clause args: [derived 88]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE))))

  derived clause number: 90
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE))) (not (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE))))) (not (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE)))))

  derived clause number: 91
  rule: resolution
  expr args: [(not (= (* -1 (* 1 ONE)) (* -1 (+ (* 1 ONE))))), (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE))) (not (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE))))), (or )]
  clause args: [derived 87, derived 90]
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE))) (not (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE)))))

  derived clause number: 92
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 1 ONE))) (+ (* -1 ONE)))), (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))), (or )]
  clause args: [derived 89, derived 91]
  backptr: nil
  conclusion: (or (= (* -1 (* 1 ONE)) (+ (* -1 ONE))))

  derived clause number: 93
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* -1 ONE)) (* -1 (* 1 ONE))) (not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 94
  rule: resolution
  expr args: [(not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))), (or (= (+ (* -1 ONE)) (* -1 (* 1 ONE)))), (or )]
  clause args: [derived 92, derived 93]
  backptr: nil
  conclusion: (or (= (+ (* -1 ONE)) (* -1 (* 1 ONE))))

  derived clause number: 95
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))) (not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 96
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE)))) (not (= (* -1 (* 1 ONE)) (+ (* -1 ONE))))), (or )]
  clause args: [derived 51, derived 95]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE)))) (not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 97
  rule: resolution
  expr args: [(not (= (* -1 (* 1 ONE)) (+ (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE))))), (or )]
  clause args: [derived 92, derived 96]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE)))))

  derived clause number: 98
  rule: flatten
  expr args: [(+ (+ (* -1 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (+ (* -1 ONE))))

  derived clause number: 99
  rule: or_single
  expr args: []
  clause args: [derived 98]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (+ (* -1 ONE)))))

  derived clause number: 100
  rule: flatten
  expr args: [(+ (* 0 ONE)), (+ (+ (* -1 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))

  derived clause number: 101
  rule: or_single
  expr args: []
  clause args: [derived 100]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))))

  derived clause number: 102
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (+ (* -1 ONE))))) (not (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))))

  derived clause number: 103
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (+ (* -1 ONE))))), (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))))), (or )]
  clause args: [derived 99, derived 102]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))))

  derived clause number: 104
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or )]
  clause args: [derived 101, derived 103]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))))

  derived clause number: 105
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE))))) (not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))))

  derived clause number: 106
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (+ (* 0 ONE)) (+ (* -1 ONE))))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE))))), (or )]
  clause args: [derived 97, derived 105]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))))

  derived clause number: 107
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or )]
  clause args: [derived 104, derived 106]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE))))

  derived clause number: 108
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE) (* -1 ONE)), (+ (* -1 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE)))

  derived clause number: 109
  rule: or_single
  expr args: []
  clause args: [derived 108]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE))))

  derived clause number: 110
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE)))) (not (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 111
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* 0 ONE) (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE))) (not (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE))))), (or )]
  clause args: [derived 107, derived 110]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE))) (not (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE)))))

  derived clause number: 112
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 ONE)) (+ (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE)))), (or )]
  clause args: [derived 109, derived 111]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE))))

  derived clause number: 113
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE)))) (not (= (+ (* -1 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 114
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (+ (* -1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))) (not (= (+ (* -1 ONE)) (* -1 (* 1 ONE))))), (or )]
  clause args: [derived 112, derived 113]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))) (not (= (+ (* -1 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 115
  rule: resolution
  expr args: [(not (= (+ (* -1 ONE)) (* -1 (* 1 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE)))), (or )]
  clause args: [derived 94, derived 114]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))))

  derived clause number: 116
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE))))

  derived clause number: 117
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE)))))

  derived clause number: 118
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 2 ONE)) (ControlFlow (* 0 ONE) (* 2 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE))))), (or )]
  clause args: [derived 116, derived 117]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE)))))

  derived clause number: 119
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 1 ONE))) (* -1 (* 1 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))), (or )]
  clause args: [derived 115, derived 118]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 120
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not (= x@2 x@0)) (not (= x@2 x@0))))

  derived clause number: 121
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))) (not (= (not (= x@2 x@0)) (not (= x@2 x@0)))) (not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))))

  derived clause number: 122
  rule: resolution
  expr args: [(not (= (not (= x@2 x@0)) (not (= x@2 x@0)))), (or (= (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))) (not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))), (or )]
  clause args: [derived 120, derived 121]
  backptr: nil
  conclusion: (or (= (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))) (not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))))

  derived clause number: 123
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE)))) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))), (or (= (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))), (or )]
  clause args: [derived 119, derived 122]
  backptr: nil
  conclusion: (or (= (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))))

  derived clause number: 124
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))) (not (= (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))) (not (= (not held@1) (not held@1))))

  derived clause number: 125
  rule: resolution
  expr args: [(not (= (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))), (or (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))) (not (= (not held@1) (not held@1)))), (or )]
  clause args: [derived 123, derived 124]
  backptr: nil
  conclusion: (or (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))) (not (= (not held@1) (not held@1))))

  derived clause number: 126
  rule: resolution
  expr args: [(not (= (not held@1) (not held@1))), (or (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))), (or )]
  clause args: [derived 81, derived 125]
  backptr: nil
  conclusion: (or (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))

  derived clause number: 127
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))))

  derived clause number: 128
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= held@2 held@1) held@2 held@1)

  derived clause number: 129
  rule: resolution
  expr args: [(not held@1), (or (xor held@2 held@1) held@2), (or (= held@2 held@1) held@2)]
  clause args: [derived 128, derived 7]
  backptr: nil
  conclusion: (or (= held@2 held@1) held@2 (xor held@2 held@1) held@2)

  derived clause number: 130
  rule: xor+
  expr args: [(and held@2 held@1 held@1), (and held@1 held@2)]
  clause args: []
  backptr: nil
  conclusion: (or (xor held@2 held@1) (xor held@1) (not (xor held@2)))

  derived clause number: 131
  rule: xor1-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (xor held@1)) held@1)

  derived clause number: 132
  rule: resolution
  expr args: [(not (xor held@1)), (or held@1), (or (xor held@2 held@1) (not (xor held@2)))]
  clause args: [derived 130, derived 131]
  backptr: nil
  conclusion: (or (xor held@2 held@1) held@1 (not (xor held@2)))

  derived clause number: 133
  rule: xor1+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (xor held@2) (not held@2))

  derived clause number: 134
  rule: resolution
  expr args: [(not (xor held@2)), (or (xor held@2 held@1) held@1), (or (not held@2))]
  clause args: [derived 133, derived 132]
  backptr: nil
  conclusion: (or (xor held@2 held@1) held@1 (not held@2))

  derived clause number: 135
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= held@2 held@1) (not held@2) (not held@1))

  derived clause number: 136
  rule: resolution
  expr args: [(not held@1), (or (= held@2 held@1) (not held@2)), (or (xor held@2 held@1) (not held@2))]
  clause args: [derived 134, derived 135]
  backptr: nil
  conclusion: (or (xor held@2 held@1) (not held@2) (= held@2 held@1) (not held@2))

  derived clause number: 137
  rule: factoring
  expr args: []
  clause args: [derived 129]
  backptr: nil
  conclusion: (or (= held@2 held@1) held@2 (xor held@2 held@1))

  derived clause number: 138
  rule: factoring
  expr args: []
  clause args: [derived 136]
  backptr: nil
  conclusion: (or (xor held@2 held@1) (not held@2) (= held@2 held@1))

  derived clause number: 139
  rule: resolution
  expr args: [(not held@2), (or (xor held@2 held@1) (= held@2 held@1)), (or (xor held@2 held@1) (= held@2 held@1))]
  clause args: [derived 137, derived 138]
  backptr: nil
  conclusion: (or (= held@2 held@1) (xor held@2 held@1) (xor held@2 held@1) (= held@2 held@1))

  derived clause number: 140
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= held@2 held@1) (not (xor held@2 held@1))) (= held@2 held@1) (not (xor held@2 held@1)))

  derived clause number: 141
  rule: factoring
  expr args: []
  clause args: [derived 139]
  backptr: nil
  conclusion: (or (= held@2 held@1) (xor held@2 held@1))

  derived clause number: 142
  rule: resolution
  expr args: [(not (xor held@2 held@1)), (or (= (= held@2 held@1) (not (xor held@2 held@1))) (= held@2 held@1)), (or (= held@2 held@1))]
  clause args: [derived 141, derived 140]
  backptr: nil
  conclusion: (or (= held@2 held@1) (= (= held@2 held@1) (not (xor held@2 held@1))) (= held@2 held@1))

  derived clause number: 143
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (xor held@2 held@1)) (xor held@2 held@1))

  derived clause number: 144
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= held@2 held@1) (not (xor held@2 held@1))) (not (= held@2 held@1)) (not (not (xor held@2 held@1))))

  derived clause number: 145
  rule: resolution
  expr args: [(not (not (xor held@2 held@1))), (or (= (= held@2 held@1) (not (xor held@2 held@1))) (not (= held@2 held@1))), (or (xor held@2 held@1))]
  clause args: [derived 143, derived 144]
  backptr: nil
  conclusion: (or (xor held@2 held@1) (= (= held@2 held@1) (not (xor held@2 held@1))) (not (= held@2 held@1)))

  derived clause number: 146
  rule: xor+
  expr args: [(and held@2 held@1), (and held@1 held@2)]
  clause args: []
  backptr: nil
  conclusion: (or (xor held@2) (xor held@1) (not (xor held@2 held@1)))

  derived clause number: 147
  rule: resolution
  expr args: [(not (xor held@2)), (or held@2), (or (xor held@1) (not (xor held@2 held@1)))]
  clause args: [derived 146, derived 4]
  backptr: nil
  conclusion: (or held@2 (xor held@1) (not (xor held@2 held@1)))

  derived clause number: 148
  rule: resolution
  expr args: [(not (xor held@1)), (or held@1), (or held@2 (not (xor held@2 held@1)))]
  clause args: [derived 147, derived 131]
  backptr: nil
  conclusion: (or held@2 held@1 (not (xor held@2 held@1)))

  derived clause number: 149
  rule: =-1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= held@2 held@1)) held@2 (not held@1))

  derived clause number: 150
  rule: resolution
  expr args: [(not held@1), (or (not (= held@2 held@1)) held@2), (or (not (xor held@2 held@1)) held@2)]
  clause args: [derived 148, derived 149]
  backptr: nil
  conclusion: (or held@2 (not (xor held@2 held@1)) (not (= held@2 held@1)) held@2)

  derived clause number: 151
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= held@2 held@1)) (not held@2) held@1)

  derived clause number: 152
  rule: xor-
  expr args: [(and held@2 held@1), (and held@1 held@2)]
  clause args: []
  backptr: nil
  conclusion: (or (not (xor held@2)) (not (xor held@1)) (not (xor held@2 held@1)))

  derived clause number: 153
  rule: resolution
  expr args: [(not (xor held@2)), (or (not (xor held@1)) (not (xor held@2 held@1))), (or (not held@2))]
  clause args: [derived 133, derived 152]
  backptr: nil
  conclusion: (or (not held@2) (not (xor held@1)) (not (xor held@2 held@1)))

  derived clause number: 154
  rule: resolution
  expr args: [(not (xor held@1)), (or (not held@2) (not (xor held@2 held@1))), (or (not held@1))]
  clause args: [derived 6, derived 153]
  backptr: nil
  conclusion: (or (not held@2) (not held@1) (not (xor held@2 held@1)))

  derived clause number: 155
  rule: resolution
  expr args: [(not held@1), (or (not held@2) (not (xor held@2 held@1))), (or (not (= held@2 held@1)) (not held@2))]
  clause args: [derived 151, derived 154]
  backptr: nil
  conclusion: (or (not (= held@2 held@1)) (not held@2) (not held@2) (not (xor held@2 held@1)))

  derived clause number: 156
  rule: factoring
  expr args: []
  clause args: [derived 150]
  backptr: nil
  conclusion: (or held@2 (not (xor held@2 held@1)) (not (= held@2 held@1)))

  derived clause number: 157
  rule: factoring
  expr args: []
  clause args: [derived 155]
  backptr: nil
  conclusion: (or (not (= held@2 held@1)) (not held@2) (not (xor held@2 held@1)))

  derived clause number: 158
  rule: resolution
  expr args: [(not held@2), (or (not (= held@2 held@1)) (not (xor held@2 held@1))), (or (not (= held@2 held@1)) (not (xor held@2 held@1)))]
  clause args: [derived 156, derived 157]
  backptr: nil
  conclusion: (or (not (xor held@2 held@1)) (not (= held@2 held@1)) (not (= held@2 held@1)) (not (xor held@2 held@1)))

  derived clause number: 159
  rule: factoring
  expr args: []
  clause args: [derived 158]
  backptr: nil
  conclusion: (or (not (xor held@2 held@1)) (not (= held@2 held@1)))

  derived clause number: 160
  rule: resolution
  expr args: [(not (xor held@2 held@1)), (or (not (= held@2 held@1))), (or (= (= held@2 held@1) (not (xor held@2 held@1))) (not (= held@2 held@1)))]
  clause args: [derived 145, derived 159]
  backptr: nil
  conclusion: (or (= (= held@2 held@1) (not (xor held@2 held@1))) (not (= held@2 held@1)) (not (= held@2 held@1)))

  derived clause number: 161
  rule: factoring
  expr args: []
  clause args: [derived 142]
  backptr: nil
  conclusion: (or (= held@2 held@1) (= (= held@2 held@1) (not (xor held@2 held@1))))

  derived clause number: 162
  rule: factoring
  expr args: []
  clause args: [derived 160]
  backptr: nil
  conclusion: (or (= (= held@2 held@1) (not (xor held@2 held@1))) (not (= held@2 held@1)))

  derived clause number: 163
  rule: resolution
  expr args: [(not (= held@2 held@1)), (or (= (= held@2 held@1) (not (xor held@2 held@1)))), (or (= (= held@2 held@1) (not (xor held@2 held@1))))]
  clause args: [derived 161, derived 162]
  backptr: nil
  conclusion: (or (= (= held@2 held@1) (not (xor held@2 held@1))) (= (= held@2 held@1) (not (xor held@2 held@1))))

  derived clause number: 164
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))) (not (= (= held@2 held@1) (not (xor held@2 held@1)))) (not (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))))

  derived clause number: 165
  rule: factoring
  expr args: []
  clause args: [derived 163]
  backptr: nil
  conclusion: (or (= (= held@2 held@1) (not (xor held@2 held@1))))

  derived clause number: 166
  rule: resolution
  expr args: [(not (= (= held@2 held@1) (not (xor held@2 held@1)))), (or (= (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))) (not (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))))), (or )]
  clause args: [derived 165, derived 164]
  backptr: nil
  conclusion: (or (= (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))) (not (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))))

  derived clause number: 167
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))), (or (= (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))))), (or )]
  clause args: [derived 127, derived 166]
  backptr: nil
  conclusion: (or (= (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))))

  derived clause number: 168
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (not (= (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))

  derived clause number: 169
  rule: resolution
  expr args: [(not (= (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))))), (or (= (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))), (or )]
  clause args: [derived 167, derived 168]
  backptr: nil
  conclusion: (or (= (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))

  derived clause number: 170
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))), (or (= (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))), (or )]
  clause args: [derived 79, derived 169]
  backptr: nil
  conclusion: (or (= (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))

  derived clause number: 171
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (not (= (= x@2 x@0) (= x@2 x@0))) (not (= (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))

  derived clause number: 172
  rule: resolution
  expr args: [(not (= (= x@2 x@0) (= x@2 x@0))), (or (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (not (= (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or )]
  clause args: [derived 80, derived 171]
  backptr: nil
  conclusion: (or (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (not (= (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))

  derived clause number: 173
  rule: resolution
  expr args: [(not (= (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))), (or (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or )]
  clause args: [derived 170, derived 172]
  backptr: nil
  conclusion: (or (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))

  derived clause number: 174
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE))))

  derived clause number: 175
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))) (not (= (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)))) (not (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))

  derived clause number: 176
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))) (not (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))), (or )]
  clause args: [derived 174, derived 175]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))) (not (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))

  derived clause number: 177
  rule: resolution
  expr args: [(not (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))), (or )]
  clause args: [derived 126, derived 176]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))

  derived clause number: 178
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE))))

  derived clause number: 179
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (= (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)))) (not (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))))

  derived clause number: 180
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))), (or )]
  clause args: [derived 178, derived 179]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))))

  derived clause number: 181
  rule: resolution
  expr args: [(not (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))), (or )]
  clause args: [derived 173, derived 180]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))))

  derived clause number: 182
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 183
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or )]
  clause args: [derived 181, derived 182]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 184
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or )]
  clause args: [derived 177, derived 183]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 185
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= held@1 true) held@1) (= held@1 true) held@1)

  derived clause number: 186
  rule: =-1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= held@1 true)) held@1 (not true))

  derived clause number: 187
  rule: resolution
  expr args: [(not (= held@1 true)), (or held@1 (not true)), (or (= (= held@1 true) held@1) held@1)]
  clause args: [derived 185, derived 186]
  backptr: nil
  conclusion: (or (= (= held@1 true) held@1) held@1 held@1 (not true))

  derived clause number: 188
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= held@1 true) (not held@1) (not true))

  derived clause number: 189
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= held@1 true) held@1) (not (= held@1 true)) (not held@1))

  derived clause number: 190
  rule: resolution
  expr args: [(not (= held@1 true)), (or (= (= held@1 true) held@1) (not held@1)), (or (not true) (not held@1))]
  clause args: [derived 188, derived 189]
  backptr: nil
  conclusion: (or (not held@1) (not true) (= (= held@1 true) held@1) (not held@1))

  derived clause number: 191
  rule: factoring
  expr args: []
  clause args: [derived 187]
  backptr: nil
  conclusion: (or (= (= held@1 true) held@1) held@1 (not true))

  derived clause number: 192
  rule: factoring
  expr args: []
  clause args: [derived 190]
  backptr: nil
  conclusion: (or (not held@1) (not true) (= (= held@1 true) held@1))

  derived clause number: 193
  rule: resolution
  expr args: [(not held@1), (or (not true) (= (= held@1 true) held@1)), (or (not true) (= (= held@1 true) held@1))]
  clause args: [derived 191, derived 192]
  backptr: nil
  conclusion: (or (= (= held@1 true) held@1) (not true) (not true) (= (= held@1 true) held@1))

  derived clause number: 194
  rule: factoring
  expr args: []
  clause args: [derived 193]
  backptr: nil
  conclusion: (or (= (= held@1 true) held@1) (not true))

  derived clause number: 195
  rule: resolution
  expr args: [(not true), (or (= (= held@1 true) held@1)), (or )]
  clause args: [derived 8, derived 194]
  backptr: nil
  conclusion: (or (= (= held@1 true) held@1))

  derived clause number: 196
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (= held@1 true) (= x@2 x@0)) (and held@1 (= x@2 x@0))) (not (= (= held@1 true) held@1)) (not (= (= x@2 x@0) (= x@2 x@0))))

  derived clause number: 197
  rule: resolution
  expr args: [(not (= (= held@1 true) held@1)), (or (= (and (= held@1 true) (= x@2 x@0)) (and held@1 (= x@2 x@0))) (not (= (= x@2 x@0) (= x@2 x@0)))), (or )]
  clause args: [derived 195, derived 196]
  backptr: nil
  conclusion: (or (= (and (= held@1 true) (= x@2 x@0)) (and held@1 (= x@2 x@0))) (not (= (= x@2 x@0) (= x@2 x@0))))

  derived clause number: 198
  rule: resolution
  expr args: [(not (= (= x@2 x@0) (= x@2 x@0))), (or (= (and (= held@1 true) (= x@2 x@0)) (and held@1 (= x@2 x@0)))), (or )]
  clause args: [derived 80, derived 197]
  backptr: nil
  conclusion: (or (= (and (= held@1 true) (= x@2 x@0)) (and held@1 (= x@2 x@0))))

  derived clause number: 199
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (not (= (and (= held@1 true) (= x@2 x@0)) (and held@1 (= x@2 x@0)))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))

  derived clause number: 200
  rule: resolution
  expr args: [(not (= (and (= held@1 true) (= x@2 x@0)) (and held@1 (= x@2 x@0)))), (or (= (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (or )]
  clause args: [derived 198, derived 199]
  backptr: nil
  conclusion: (or (= (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))

  derived clause number: 201
  rule: resolution
  expr args: [(not (= (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or (= (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (or )]
  clause args: [derived 184, derived 200]
  backptr: nil
  conclusion: (or (= (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))

  derived clause number: 202
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE))))

  derived clause number: 203
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (not (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)))) (not (= (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))

  derived clause number: 204
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (not (= (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))), (or )]
  clause args: [derived 202, derived 203]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (not (= (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))

  derived clause number: 205
  rule: resolution
  expr args: [(not (= (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))), (or )]
  clause args: [derived 201, derived 204]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))

  derived clause number: 206
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE))))

  derived clause number: 207
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))) (not (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)))) (not (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))

  derived clause number: 208
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))) (not (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))), (or )]
  clause args: [derived 206, derived 207]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))) (not (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))

  derived clause number: 209
  rule: resolution
  expr args: [(not (= (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))), (or )]
  clause args: [derived 126, derived 208]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))

  derived clause number: 210
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE))))

  derived clause number: 211
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)))) (not (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))))

  derived clause number: 212
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))), (or )]
  clause args: [derived 210, derived 211]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))))

  derived clause number: 213
  rule: resolution
  expr args: [(not (= (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))), (or )]
  clause args: [derived 173, derived 212]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))))

  derived clause number: 214
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 215
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or )]
  clause args: [derived 213, derived 214]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 216
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or )]
  clause args: [derived 209, derived 215]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 217
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= x@2 x@1) (= x@2 x@1)))

  derived clause number: 218
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= held@1 false) (not held@1)) (= held@1 false) (not held@1))

  derived clause number: 219
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= held@1 false)) (not held@1) false)

  derived clause number: 220
  rule: resolution
  expr args: [(not (= held@1 false)), (or (not held@1) false), (or (= (= held@1 false) (not held@1)) (not held@1))]
  clause args: [derived 218, derived 219]
  backptr: nil
  conclusion: (or (= (= held@1 false) (not held@1)) (not held@1) (not held@1) false)

  derived clause number: 221
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= held@1 false) held@1 false)

  derived clause number: 222
  rule: resolution
  expr args: [(not held@1), (or (not (not held@1))), (or (= held@1 false) false)]
  clause args: [derived 221, derived 2]
  backptr: nil
  conclusion: (or (= held@1 false) false (not (not held@1)))

  derived clause number: 223
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= held@1 false) (not held@1)) (not (= held@1 false)) (not (not held@1)))

  derived clause number: 224
  rule: resolution
  expr args: [(not (= held@1 false)), (or (= (= held@1 false) (not held@1)) (not (not held@1))), (or false (not (not held@1)))]
  clause args: [derived 222, derived 223]
  backptr: nil
  conclusion: (or false (not (not held@1)) (= (= held@1 false) (not held@1)) (not (not held@1)))

  derived clause number: 225
  rule: factoring
  expr args: []
  clause args: [derived 220]
  backptr: nil
  conclusion: (or (= (= held@1 false) (not held@1)) (not held@1) false)

  derived clause number: 226
  rule: factoring
  expr args: []
  clause args: [derived 224]
  backptr: nil
  conclusion: (or false (not (not held@1)) (= (= held@1 false) (not held@1)))

  derived clause number: 227
  rule: resolution
  expr args: [(not (not held@1)), (or false (= (= held@1 false) (not held@1))), (or false (= (= held@1 false) (not held@1)))]
  clause args: [derived 225, derived 226]
  backptr: nil
  conclusion: (or (= (= held@1 false) (not held@1)) false false (= (= held@1 false) (not held@1)))

  derived clause number: 228
  rule: factoring
  expr args: []
  clause args: [derived 227]
  backptr: nil
  conclusion: (or (= (= held@1 false) (not held@1)) false)

  derived clause number: 229
  rule: resolution
  expr args: [(not false), (or ), (or (= (= held@1 false) (not held@1)))]
  clause args: [derived 228, derived 21]
  backptr: nil
  conclusion: (or (= (= held@1 false) (not held@1)))

  derived clause number: 230
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (= held@1 false) (= x@2 x@1)) (and (not held@1) (= x@2 x@1))) (not (= (= held@1 false) (not held@1))) (not (= (= x@2 x@1) (= x@2 x@1))))

  derived clause number: 231
  rule: resolution
  expr args: [(not (= (= held@1 false) (not held@1))), (or (= (and (= held@1 false) (= x@2 x@1)) (and (not held@1) (= x@2 x@1))) (not (= (= x@2 x@1) (= x@2 x@1)))), (or )]
  clause args: [derived 229, derived 230]
  backptr: nil
  conclusion: (or (= (and (= held@1 false) (= x@2 x@1)) (and (not held@1) (= x@2 x@1))) (not (= (= x@2 x@1) (= x@2 x@1))))

  derived clause number: 232
  rule: resolution
  expr args: [(not (= (= x@2 x@1) (= x@2 x@1))), (or (= (and (= held@1 false) (= x@2 x@1)) (and (not held@1) (= x@2 x@1)))), (or )]
  clause args: [derived 217, derived 231]
  backptr: nil
  conclusion: (or (= (and (= held@1 false) (= x@2 x@1)) (and (not held@1) (= x@2 x@1))))

  derived clause number: 233
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (not (= (and (= held@1 false) (= x@2 x@1)) (and (not held@1) (= x@2 x@1)))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))

  derived clause number: 234
  rule: resolution
  expr args: [(not (= (and (= held@1 false) (= x@2 x@1)) (and (not held@1) (= x@2 x@1)))), (or (= (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (or )]
  clause args: [derived 232, derived 233]
  backptr: nil
  conclusion: (or (= (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))

  derived clause number: 235
  rule: resolution
  expr args: [(not (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or (= (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (or )]
  clause args: [derived 216, derived 234]
  backptr: nil
  conclusion: (or (= (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))

  derived clause number: 236
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= x@1 (+ x@0 (* 1 ONE))) (= x@1 (+ x@0 (* 1 ONE)))))

  derived clause number: 237
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (not (= (= x@1 (+ x@0 (* 1 ONE))) (= x@1 (+ x@0 (* 1 ONE))))) (not (= (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))

  derived clause number: 238
  rule: resolution
  expr args: [(not (= (= x@1 (+ x@0 (* 1 ONE))) (= x@1 (+ x@0 (* 1 ONE))))), (or (= (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (not (= (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))), (or )]
  clause args: [derived 236, derived 237]
  backptr: nil
  conclusion: (or (= (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (not (= (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))

  derived clause number: 239
  rule: resolution
  expr args: [(not (= (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (or (= (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))), (or )]
  clause args: [derived 235, derived 238]
  backptr: nil
  conclusion: (or (= (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))

  derived clause number: 240
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= true true))

  derived clause number: 241
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 8 ONE)) (* 8 ONE))

  derived clause number: 242
  rule: or_single
  expr args: []
  clause args: [derived 241]
  backptr: nil
  conclusion: (or (= (+ (* 8 ONE)) (* 8 ONE)))

  derived clause number: 243
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 8 ONE) (+ (* 8 ONE))) (not (= (+ (* 8 ONE)) (* 8 ONE))))

  derived clause number: 244
  rule: resolution
  expr args: [(not (= (+ (* 8 ONE)) (* 8 ONE))), (or (= (* 8 ONE) (+ (* 8 ONE)))), (or )]
  clause args: [derived 242, derived 243]
  backptr: nil
  conclusion: (or (= (* 8 ONE) (+ (* 8 ONE))))

  derived clause number: 245
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 8 ONE)) (* -1 (+ (* 8 ONE)))) (not (= (* 8 ONE) (+ (* 8 ONE)))))

  derived clause number: 246
  rule: resolution
  expr args: [(not (= (* 8 ONE) (+ (* 8 ONE)))), (or (= (* -1 (* 8 ONE)) (* -1 (+ (* 8 ONE))))), (or )]
  clause args: [derived 244, derived 245]
  backptr: nil
  conclusion: (or (= (* -1 (* 8 ONE)) (* -1 (+ (* 8 ONE)))))

  derived clause number: 247
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 8 ONE))) (+ (* -8 ONE)))

  derived clause number: 248
  rule: or_single
  expr args: []
  clause args: [derived 247]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 8 ONE))) (+ (* -8 ONE))))

  derived clause number: 249
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 8 ONE)) (+ (* -8 ONE))) (not (= (* -1 (* 8 ONE)) (* -1 (+ (* 8 ONE))))) (not (= (* -1 (+ (* 8 ONE))) (+ (* -8 ONE)))))

  derived clause number: 250
  rule: resolution
  expr args: [(not (= (* -1 (* 8 ONE)) (* -1 (+ (* 8 ONE))))), (or (= (* -1 (* 8 ONE)) (+ (* -8 ONE))) (not (= (* -1 (+ (* 8 ONE))) (+ (* -8 ONE))))), (or )]
  clause args: [derived 246, derived 249]
  backptr: nil
  conclusion: (or (= (* -1 (* 8 ONE)) (+ (* -8 ONE))) (not (= (* -1 (+ (* 8 ONE))) (+ (* -8 ONE)))))

  derived clause number: 251
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 8 ONE))) (+ (* -8 ONE)))), (or (= (* -1 (* 8 ONE)) (+ (* -8 ONE)))), (or )]
  clause args: [derived 248, derived 250]
  backptr: nil
  conclusion: (or (= (* -1 (* 8 ONE)) (+ (* -8 ONE))))

  derived clause number: 252
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* -8 ONE)) (* -1 (* 8 ONE))) (not (= (* -1 (* 8 ONE)) (+ (* -8 ONE)))))

  derived clause number: 253
  rule: resolution
  expr args: [(not (= (* -1 (* 8 ONE)) (+ (* -8 ONE)))), (or (= (+ (* -8 ONE)) (* -1 (* 8 ONE)))), (or )]
  clause args: [derived 251, derived 252]
  backptr: nil
  conclusion: (or (= (+ (* -8 ONE)) (* -1 (* 8 ONE))))

  derived clause number: 254
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (+ (* 0 ONE)) (+ (* -8 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))) (not (= (* -1 (* 8 ONE)) (+ (* -8 ONE)))))

  derived clause number: 255
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (+ (* 0 ONE)) (+ (* -8 ONE)))) (not (= (* -1 (* 8 ONE)) (+ (* -8 ONE))))), (or )]
  clause args: [derived 51, derived 254]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (+ (* 0 ONE)) (+ (* -8 ONE)))) (not (= (* -1 (* 8 ONE)) (+ (* -8 ONE)))))

  derived clause number: 256
  rule: resolution
  expr args: [(not (= (* -1 (* 8 ONE)) (+ (* -8 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (+ (* 0 ONE)) (+ (* -8 ONE))))), (or )]
  clause args: [derived 251, derived 255]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (+ (* 0 ONE)) (+ (* -8 ONE)))))

  derived clause number: 257
  rule: flatten
  expr args: [(+ (+ (* -8 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (+ (* -8 ONE))))

  derived clause number: 258
  rule: or_single
  expr args: []
  clause args: [derived 257]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (+ (* -8 ONE)))))

  derived clause number: 259
  rule: flatten
  expr args: [(+ (* 0 ONE)), (+ (+ (* -8 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE)))

  derived clause number: 260
  rule: or_single
  expr args: []
  clause args: [derived 259]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE))))

  derived clause number: 261
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (+ (* -8 ONE))))) (not (= (+ (* 0 ONE) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE)))))

  derived clause number: 262
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (+ (* -8 ONE))))), (or (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE))) (not (= (+ (* 0 ONE) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE))))), (or )]
  clause args: [derived 258, derived 261]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE))) (not (= (+ (* 0 ONE) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE)))))

  derived clause number: 263
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE)))), (or (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE)))), (or )]
  clause args: [derived 260, derived 262]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE))))

  derived clause number: 264
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* 0 ONE) (* -8 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (+ (* 0 ONE)) (+ (* -8 ONE))))) (not (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE)))))

  derived clause number: 265
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (+ (* 0 ONE)) (+ (* -8 ONE))))), (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* 0 ONE) (* -8 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE))))), (or )]
  clause args: [derived 256, derived 264]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* 0 ONE) (* -8 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE)))))

  derived clause number: 266
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -8 ONE))) (+ (* 0 ONE) (* -8 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* 0 ONE) (* -8 ONE)))), (or )]
  clause args: [derived 263, derived 265]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* 0 ONE) (* -8 ONE))))

  derived clause number: 267
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE) (* -8 ONE)), (+ (* -8 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (* -8 ONE)) (+ (* -8 ONE)))

  derived clause number: 268
  rule: or_single
  expr args: []
  clause args: [derived 267]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -8 ONE)) (+ (* -8 ONE))))

  derived clause number: 269
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* -8 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* 0 ONE) (* -8 ONE)))) (not (= (+ (* 0 ONE) (* -8 ONE)) (+ (* -8 ONE)))))

  derived clause number: 270
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* 0 ONE) (* -8 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* -8 ONE))) (not (= (+ (* 0 ONE) (* -8 ONE)) (+ (* -8 ONE))))), (or )]
  clause args: [derived 266, derived 269]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* -8 ONE))) (not (= (+ (* 0 ONE) (* -8 ONE)) (+ (* -8 ONE)))))

  derived clause number: 271
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -8 ONE)) (+ (* -8 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* -8 ONE)))), (or )]
  clause args: [derived 268, derived 270]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* -8 ONE))))

  derived clause number: 272
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (* -1 (* 8 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* -8 ONE)))) (not (= (+ (* -8 ONE)) (* -1 (* 8 ONE)))))

  derived clause number: 273
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (+ (* -8 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (* -1 (* 8 ONE))) (not (= (+ (* -8 ONE)) (* -1 (* 8 ONE))))), (or )]
  clause args: [derived 271, derived 272]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (* -1 (* 8 ONE))) (not (= (+ (* -8 ONE)) (* -1 (* 8 ONE)))))

  derived clause number: 274
  rule: resolution
  expr args: [(not (= (+ (* -8 ONE)) (* -1 (* 8 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (* -1 (* 8 ONE)))), (or )]
  clause args: [derived 253, derived 273]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (* -1 (* 8 ONE))))

  derived clause number: 275
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 7 ONE)) (ControlFlow (* 0 ONE) (* 7 ONE))))

  derived clause number: 276
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 7 ONE)) (ControlFlow (* 0 ONE) (* 7 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (* -1 (* 8 ONE)))))

  derived clause number: 277
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 7 ONE)) (ControlFlow (* 0 ONE) (* 7 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (* -1 (* 8 ONE))))), (or )]
  clause args: [derived 275, derived 276]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (* -1 (* 8 ONE)))))

  derived clause number: 278
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 8 ONE))) (* -1 (* 8 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))))), (or )]
  clause args: [derived 274, derived 277]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE)))))

  derived clause number: 279
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (not (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))))) (not (= true true)))

  derived clause number: 280
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (not (= true true))), (or )]
  clause args: [derived 278, derived 279]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (not (= true true)))

  derived clause number: 281
  rule: resolution
  expr args: [(not (= true true)), (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true))), (or )]
  clause args: [derived 240, derived 280]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)))

  derived clause number: 282
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true))) (not (= (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 283
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (not (= (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or )]
  clause args: [derived 281, derived 282]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (not (= (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 284
  rule: resolution
  expr args: [(not (= (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or )]
  clause args: [derived 239, derived 283]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 285
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE))))

  derived clause number: 286
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (not (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))

  derived clause number: 287
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))), (or )]
  clause args: [derived 285, derived 286]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))

  derived clause number: 288
  rule: resolution
  expr args: [(not (= (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))), (or )]
  clause args: [derived 284, derived 287]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))

  derived clause number: 289
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 290
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or )]
  clause args: [derived 288, derived 289]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 291
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or )]
  clause args: [derived 205, derived 290]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 292
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (not (= (not held@0) (not held@0))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))

  derived clause number: 293
  rule: resolution
  expr args: [(not (= (not held@0) (not held@0))), (or (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))), (or )]
  clause args: [derived 33, derived 292]
  backptr: nil
  conclusion: (or (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))

  derived clause number: 294
  rule: resolution
  expr args: [(not (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))), (or )]
  clause args: [derived 291, derived 293]
  backptr: nil
  conclusion: (or (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))

  derived clause number: 295
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 11 ONE)) (* 11 ONE))

  derived clause number: 296
  rule: or_single
  expr args: []
  clause args: [derived 295]
  backptr: nil
  conclusion: (or (= (+ (* 11 ONE)) (* 11 ONE)))

  derived clause number: 297
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 11 ONE) (+ (* 11 ONE))) (not (= (+ (* 11 ONE)) (* 11 ONE))))

  derived clause number: 298
  rule: resolution
  expr args: [(not (= (+ (* 11 ONE)) (* 11 ONE))), (or (= (* 11 ONE) (+ (* 11 ONE)))), (or )]
  clause args: [derived 296, derived 297]
  backptr: nil
  conclusion: (or (= (* 11 ONE) (+ (* 11 ONE))))

  derived clause number: 299
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 11 ONE)) (* -1 (+ (* 11 ONE)))) (not (= (* 11 ONE) (+ (* 11 ONE)))))

  derived clause number: 300
  rule: resolution
  expr args: [(not (= (* 11 ONE) (+ (* 11 ONE)))), (or (= (* -1 (* 11 ONE)) (* -1 (+ (* 11 ONE))))), (or )]
  clause args: [derived 298, derived 299]
  backptr: nil
  conclusion: (or (= (* -1 (* 11 ONE)) (* -1 (+ (* 11 ONE)))))

  derived clause number: 301
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 11 ONE))) (+ (* -11 ONE)))

  derived clause number: 302
  rule: or_single
  expr args: []
  clause args: [derived 301]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 11 ONE))) (+ (* -11 ONE))))

  derived clause number: 303
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 11 ONE)) (+ (* -11 ONE))) (not (= (* -1 (* 11 ONE)) (* -1 (+ (* 11 ONE))))) (not (= (* -1 (+ (* 11 ONE))) (+ (* -11 ONE)))))

  derived clause number: 304
  rule: resolution
  expr args: [(not (= (* -1 (* 11 ONE)) (* -1 (+ (* 11 ONE))))), (or (= (* -1 (* 11 ONE)) (+ (* -11 ONE))) (not (= (* -1 (+ (* 11 ONE))) (+ (* -11 ONE))))), (or )]
  clause args: [derived 300, derived 303]
  backptr: nil
  conclusion: (or (= (* -1 (* 11 ONE)) (+ (* -11 ONE))) (not (= (* -1 (+ (* 11 ONE))) (+ (* -11 ONE)))))

  derived clause number: 305
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 11 ONE))) (+ (* -11 ONE)))), (or (= (* -1 (* 11 ONE)) (+ (* -11 ONE)))), (or )]
  clause args: [derived 302, derived 304]
  backptr: nil
  conclusion: (or (= (* -1 (* 11 ONE)) (+ (* -11 ONE))))

  derived clause number: 306
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* -11 ONE)) (* -1 (* 11 ONE))) (not (= (* -1 (* 11 ONE)) (+ (* -11 ONE)))))

  derived clause number: 307
  rule: resolution
  expr args: [(not (= (* -1 (* 11 ONE)) (+ (* -11 ONE)))), (or (= (+ (* -11 ONE)) (* -1 (* 11 ONE)))), (or )]
  clause args: [derived 305, derived 306]
  backptr: nil
  conclusion: (or (= (+ (* -11 ONE)) (* -1 (* 11 ONE))))

  derived clause number: 308
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (+ (* 0 ONE)) (+ (* -11 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))) (not (= (* -1 (* 11 ONE)) (+ (* -11 ONE)))))

  derived clause number: 309
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (+ (* 0 ONE)) (+ (* -11 ONE)))) (not (= (* -1 (* 11 ONE)) (+ (* -11 ONE))))), (or )]
  clause args: [derived 51, derived 308]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (+ (* 0 ONE)) (+ (* -11 ONE)))) (not (= (* -1 (* 11 ONE)) (+ (* -11 ONE)))))

  derived clause number: 310
  rule: resolution
  expr args: [(not (= (* -1 (* 11 ONE)) (+ (* -11 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (+ (* 0 ONE)) (+ (* -11 ONE))))), (or )]
  clause args: [derived 305, derived 309]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (+ (* 0 ONE)) (+ (* -11 ONE)))))

  derived clause number: 311
  rule: flatten
  expr args: [(+ (+ (* -11 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (+ (* -11 ONE))))

  derived clause number: 312
  rule: or_single
  expr args: []
  clause args: [derived 311]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (+ (* -11 ONE)))))

  derived clause number: 313
  rule: flatten
  expr args: [(+ (* 0 ONE)), (+ (+ (* -11 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE)))

  derived clause number: 314
  rule: or_single
  expr args: []
  clause args: [derived 313]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE))))

  derived clause number: 315
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (+ (* -11 ONE))))) (not (= (+ (* 0 ONE) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE)))))

  derived clause number: 316
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (+ (* -11 ONE))))), (or (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE))) (not (= (+ (* 0 ONE) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE))))), (or )]
  clause args: [derived 312, derived 315]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE))) (not (= (+ (* 0 ONE) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE)))))

  derived clause number: 317
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE)))), (or (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE)))), (or )]
  clause args: [derived 314, derived 316]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE))))

  derived clause number: 318
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* 0 ONE) (* -11 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (+ (* 0 ONE)) (+ (* -11 ONE))))) (not (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE)))))

  derived clause number: 319
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (+ (* 0 ONE)) (+ (* -11 ONE))))), (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* 0 ONE) (* -11 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE))))), (or )]
  clause args: [derived 310, derived 318]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* 0 ONE) (* -11 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE)))))

  derived clause number: 320
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -11 ONE))) (+ (* 0 ONE) (* -11 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* 0 ONE) (* -11 ONE)))), (or )]
  clause args: [derived 317, derived 319]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* 0 ONE) (* -11 ONE))))

  derived clause number: 321
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE) (* -11 ONE)), (+ (* -11 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (* -11 ONE)) (+ (* -11 ONE)))

  derived clause number: 322
  rule: or_single
  expr args: []
  clause args: [derived 321]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -11 ONE)) (+ (* -11 ONE))))

  derived clause number: 323
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* -11 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* 0 ONE) (* -11 ONE)))) (not (= (+ (* 0 ONE) (* -11 ONE)) (+ (* -11 ONE)))))

  derived clause number: 324
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* 0 ONE) (* -11 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* -11 ONE))) (not (= (+ (* 0 ONE) (* -11 ONE)) (+ (* -11 ONE))))), (or )]
  clause args: [derived 320, derived 323]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* -11 ONE))) (not (= (+ (* 0 ONE) (* -11 ONE)) (+ (* -11 ONE)))))

  derived clause number: 325
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -11 ONE)) (+ (* -11 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* -11 ONE)))), (or )]
  clause args: [derived 322, derived 324]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* -11 ONE))))

  derived clause number: 326
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (* -1 (* 11 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* -11 ONE)))) (not (= (+ (* -11 ONE)) (* -1 (* 11 ONE)))))

  derived clause number: 327
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (+ (* -11 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (* -1 (* 11 ONE))) (not (= (+ (* -11 ONE)) (* -1 (* 11 ONE))))), (or )]
  clause args: [derived 325, derived 326]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (* -1 (* 11 ONE))) (not (= (+ (* -11 ONE)) (* -1 (* 11 ONE)))))

  derived clause number: 328
  rule: resolution
  expr args: [(not (= (+ (* -11 ONE)) (* -1 (* 11 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (* -1 (* 11 ONE)))), (or )]
  clause args: [derived 307, derived 327]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (* -1 (* 11 ONE))))

  derived clause number: 329
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 10 ONE)) (ControlFlow (* 0 ONE) (* 10 ONE))))

  derived clause number: 330
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 10 ONE)) (ControlFlow (* 0 ONE) (* 10 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (* -1 (* 11 ONE)))))

  derived clause number: 331
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 10 ONE)) (ControlFlow (* 0 ONE) (* 10 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (* -1 (* 11 ONE))))), (or )]
  clause args: [derived 329, derived 330]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (* -1 (* 11 ONE)))))

  derived clause number: 332
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 11 ONE))) (* -1 (* 11 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))))), (or )]
  clause args: [derived 328, derived 331]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE)))))

  derived clause number: 333
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0))) (not (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))))) (not (= (not held@0) (not held@0))))

  derived clause number: 334
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0))) (not (= (not held@0) (not held@0)))), (or )]
  clause args: [derived 332, derived 333]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0))) (not (= (not held@0) (not held@0))))

  derived clause number: 335
  rule: resolution
  expr args: [(not (= (not held@0) (not held@0))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)))), (or )]
  clause args: [derived 33, derived 334]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0))))

  derived clause number: 336
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)))) (not (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))

  derived clause number: 337
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))) (not (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))), (or )]
  clause args: [derived 335, derived 336]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))) (not (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))

  derived clause number: 338
  rule: resolution
  expr args: [(not (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))), (or )]
  clause args: [derived 294, derived 337]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))

  derived clause number: 339
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE))))

  derived clause number: 340
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))) (not (= (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))

  derived clause number: 341
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))), (or )]
  clause args: [derived 339, derived 340]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))

  derived clause number: 342
  rule: resolution
  expr args: [(not (= (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))), (or )]
  clause args: [derived 338, derived 341]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))

  derived clause number: 343
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))))

  derived clause number: 344
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= held@2 held@0) held@2 held@0)

  derived clause number: 345
  rule: xor+
  expr args: [(and held@2 held@0 held@2), (and held@0 held@2)]
  clause args: []
  backptr: nil
  conclusion: (or (xor held@2 held@0) (xor held@2) (not (xor held@0)))

  derived clause number: 346
  rule: resolution
  expr args: [(not (xor held@2)), (or held@2), (or (xor held@2 held@0) (not (xor held@0)))]
  clause args: [derived 345, derived 4]
  backptr: nil
  conclusion: (or (xor held@2 held@0) held@2 (not (xor held@0)))

  derived clause number: 347
  rule: xor1+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (xor held@0) (not held@0))

  derived clause number: 348
  rule: resolution
  expr args: [(not (xor held@0)), (or (xor held@2 held@0) held@2), (or (not held@0))]
  clause args: [derived 347, derived 346]
  backptr: nil
  conclusion: (or (xor held@2 held@0) held@2 (not held@0))

  derived clause number: 349
  rule: resolution
  expr args: [(not held@0), (or (xor held@2 held@0) held@2), (or (= held@2 held@0) held@2)]
  clause args: [derived 344, derived 348]
  backptr: nil
  conclusion: (or (= held@2 held@0) held@2 (xor held@2 held@0) held@2)

  derived clause number: 350
  rule: xor+
  expr args: [(and held@2 held@0 held@0), (and held@0 held@2)]
  clause args: []
  backptr: nil
  conclusion: (or (xor held@2 held@0) (xor held@0) (not (xor held@2)))

  derived clause number: 351
  rule: xor1-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (xor held@0)) held@0)

  derived clause number: 352
  rule: resolution
  expr args: [(not (xor held@0)), (or held@0), (or (xor held@2 held@0) (not (xor held@2)))]
  clause args: [derived 350, derived 351]
  backptr: nil
  conclusion: (or (xor held@2 held@0) held@0 (not (xor held@2)))

  derived clause number: 353
  rule: resolution
  expr args: [(not (xor held@2)), (or (xor held@2 held@0) held@0), (or (not held@2))]
  clause args: [derived 133, derived 352]
  backptr: nil
  conclusion: (or (xor held@2 held@0) held@0 (not held@2))

  derived clause number: 354
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= held@2 held@0) (not held@2) (not held@0))

  derived clause number: 355
  rule: resolution
  expr args: [(not held@0), (or (= held@2 held@0) (not held@2)), (or (xor held@2 held@0) (not held@2))]
  clause args: [derived 353, derived 354]
  backptr: nil
  conclusion: (or (xor held@2 held@0) (not held@2) (= held@2 held@0) (not held@2))

  derived clause number: 356
  rule: factoring
  expr args: []
  clause args: [derived 349]
  backptr: nil
  conclusion: (or (= held@2 held@0) held@2 (xor held@2 held@0))

  derived clause number: 357
  rule: factoring
  expr args: []
  clause args: [derived 355]
  backptr: nil
  conclusion: (or (xor held@2 held@0) (not held@2) (= held@2 held@0))

  derived clause number: 358
  rule: resolution
  expr args: [(not held@2), (or (xor held@2 held@0) (= held@2 held@0)), (or (xor held@2 held@0) (= held@2 held@0))]
  clause args: [derived 356, derived 357]
  backptr: nil
  conclusion: (or (= held@2 held@0) (xor held@2 held@0) (xor held@2 held@0) (= held@2 held@0))

  derived clause number: 359
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= held@2 held@0) (not (xor held@2 held@0))) (= held@2 held@0) (not (xor held@2 held@0)))

  derived clause number: 360
  rule: factoring
  expr args: []
  clause args: [derived 358]
  backptr: nil
  conclusion: (or (= held@2 held@0) (xor held@2 held@0))

  derived clause number: 361
  rule: resolution
  expr args: [(not (xor held@2 held@0)), (or (= (= held@2 held@0) (not (xor held@2 held@0))) (= held@2 held@0)), (or (= held@2 held@0))]
  clause args: [derived 360, derived 359]
  backptr: nil
  conclusion: (or (= held@2 held@0) (= (= held@2 held@0) (not (xor held@2 held@0))) (= held@2 held@0))

  derived clause number: 362
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (xor held@2 held@0)) (xor held@2 held@0))

  derived clause number: 363
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= held@2 held@0) (not (xor held@2 held@0))) (not (= held@2 held@0)) (not (not (xor held@2 held@0))))

  derived clause number: 364
  rule: resolution
  expr args: [(not (not (xor held@2 held@0))), (or (= (= held@2 held@0) (not (xor held@2 held@0))) (not (= held@2 held@0))), (or (xor held@2 held@0))]
  clause args: [derived 362, derived 363]
  backptr: nil
  conclusion: (or (xor held@2 held@0) (= (= held@2 held@0) (not (xor held@2 held@0))) (not (= held@2 held@0)))

  derived clause number: 365
  rule: xor+
  expr args: [(and held@2 held@0), (and held@0 held@2)]
  clause args: []
  backptr: nil
  conclusion: (or (xor held@2) (xor held@0) (not (xor held@2 held@0)))

  derived clause number: 366
  rule: resolution
  expr args: [(not (xor held@2)), (or held@2), (or (xor held@0) (not (xor held@2 held@0)))]
  clause args: [derived 365, derived 4]
  backptr: nil
  conclusion: (or held@2 (xor held@0) (not (xor held@2 held@0)))

  derived clause number: 367
  rule: resolution
  expr args: [(not (xor held@0)), (or held@0), (or held@2 (not (xor held@2 held@0)))]
  clause args: [derived 366, derived 351]
  backptr: nil
  conclusion: (or held@2 held@0 (not (xor held@2 held@0)))

  derived clause number: 368
  rule: =-1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= held@2 held@0)) held@2 (not held@0))

  derived clause number: 369
  rule: resolution
  expr args: [(not held@0), (or (not (= held@2 held@0)) held@2), (or (not (xor held@2 held@0)) held@2)]
  clause args: [derived 367, derived 368]
  backptr: nil
  conclusion: (or held@2 (not (xor held@2 held@0)) (not (= held@2 held@0)) held@2)

  derived clause number: 370
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= held@2 held@0)) (not held@2) held@0)

  derived clause number: 371
  rule: xor-
  expr args: [(and held@2 held@0), (and held@0 held@2)]
  clause args: []
  backptr: nil
  conclusion: (or (not (xor held@2)) (not (xor held@0)) (not (xor held@2 held@0)))

  derived clause number: 372
  rule: resolution
  expr args: [(not (xor held@2)), (or (not (xor held@0)) (not (xor held@2 held@0))), (or (not held@2))]
  clause args: [derived 133, derived 371]
  backptr: nil
  conclusion: (or (not held@2) (not (xor held@0)) (not (xor held@2 held@0)))

  derived clause number: 373
  rule: resolution
  expr args: [(not (xor held@0)), (or (not held@2) (not (xor held@2 held@0))), (or (not held@0))]
  clause args: [derived 347, derived 372]
  backptr: nil
  conclusion: (or (not held@2) (not held@0) (not (xor held@2 held@0)))

  derived clause number: 374
  rule: resolution
  expr args: [(not held@0), (or (not held@2) (not (xor held@2 held@0))), (or (not (= held@2 held@0)) (not held@2))]
  clause args: [derived 370, derived 373]
  backptr: nil
  conclusion: (or (not (= held@2 held@0)) (not held@2) (not held@2) (not (xor held@2 held@0)))

  derived clause number: 375
  rule: factoring
  expr args: []
  clause args: [derived 369]
  backptr: nil
  conclusion: (or held@2 (not (xor held@2 held@0)) (not (= held@2 held@0)))

  derived clause number: 376
  rule: factoring
  expr args: []
  clause args: [derived 374]
  backptr: nil
  conclusion: (or (not (= held@2 held@0)) (not held@2) (not (xor held@2 held@0)))

  derived clause number: 377
  rule: resolution
  expr args: [(not held@2), (or (not (= held@2 held@0)) (not (xor held@2 held@0))), (or (not (= held@2 held@0)) (not (xor held@2 held@0)))]
  clause args: [derived 375, derived 376]
  backptr: nil
  conclusion: (or (not (xor held@2 held@0)) (not (= held@2 held@0)) (not (= held@2 held@0)) (not (xor held@2 held@0)))

  derived clause number: 378
  rule: factoring
  expr args: []
  clause args: [derived 377]
  backptr: nil
  conclusion: (or (not (xor held@2 held@0)) (not (= held@2 held@0)))

  derived clause number: 379
  rule: resolution
  expr args: [(not (xor held@2 held@0)), (or (not (= held@2 held@0))), (or (= (= held@2 held@0) (not (xor held@2 held@0))) (not (= held@2 held@0)))]
  clause args: [derived 364, derived 378]
  backptr: nil
  conclusion: (or (= (= held@2 held@0) (not (xor held@2 held@0))) (not (= held@2 held@0)) (not (= held@2 held@0)))

  derived clause number: 380
  rule: factoring
  expr args: []
  clause args: [derived 361]
  backptr: nil
  conclusion: (or (= held@2 held@0) (= (= held@2 held@0) (not (xor held@2 held@0))))

  derived clause number: 381
  rule: factoring
  expr args: []
  clause args: [derived 379]
  backptr: nil
  conclusion: (or (= (= held@2 held@0) (not (xor held@2 held@0))) (not (= held@2 held@0)))

  derived clause number: 382
  rule: resolution
  expr args: [(not (= held@2 held@0)), (or (= (= held@2 held@0) (not (xor held@2 held@0)))), (or (= (= held@2 held@0) (not (xor held@2 held@0))))]
  clause args: [derived 380, derived 381]
  backptr: nil
  conclusion: (or (= (= held@2 held@0) (not (xor held@2 held@0))) (= (= held@2 held@0) (not (xor held@2 held@0))))

  derived clause number: 383
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)))) (not (= (= held@2 held@0) (not (xor held@2 held@0)))) (not (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)))))

  derived clause number: 384
  rule: factoring
  expr args: []
  clause args: [derived 382]
  backptr: nil
  conclusion: (or (= (= held@2 held@0) (not (xor held@2 held@0))))

  derived clause number: 385
  rule: resolution
  expr args: [(not (= (= held@2 held@0) (not (xor held@2 held@0)))), (or (= (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)))) (not (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))))), (or )]
  clause args: [derived 384, derived 383]
  backptr: nil
  conclusion: (or (= (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)))) (not (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)))))

  derived clause number: 386
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)))), (or (= (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))))), (or )]
  clause args: [derived 343, derived 385]
  backptr: nil
  conclusion: (or (= (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE)))))

  derived clause number: 387
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (not (= (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))

  derived clause number: 388
  rule: resolution
  expr args: [(not (= (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))))), (or (= (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))), (or )]
  clause args: [derived 386, derived 387]
  backptr: nil
  conclusion: (or (= (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))

  derived clause number: 389
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))), (or (= (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))), (or )]
  clause args: [derived 79, derived 388]
  backptr: nil
  conclusion: (or (= (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))

  derived clause number: 390
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not true) false) (not true) false)

  derived clause number: 391
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (not true)) (not true))

  derived clause number: 392
  rule: resolution
  expr args: [(not true), (or (not (not true))), (or )]
  clause args: [derived 8, derived 391]
  backptr: nil
  conclusion: (or (not (not true)))

  derived clause number: 393
  rule: resolution
  expr args: [(not (not true)), (or ), (or (= (not true) false) false)]
  clause args: [derived 390, derived 392]
  backptr: nil
  conclusion: (or (= (not true) false) false)

  derived clause number: 394
  rule: resolution
  expr args: [(not false), (or ), (or (= (not true) false))]
  clause args: [derived 393, derived 21]
  backptr: nil
  conclusion: (or (= (not true) false))

  derived clause number: 395
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (not (= (not true) false)) (not (= (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))

  derived clause number: 396
  rule: resolution
  expr args: [(not (= (not true) false)), (or (= (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (not (= (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or )]
  clause args: [derived 394, derived 395]
  backptr: nil
  conclusion: (or (= (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (not (= (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))

  derived clause number: 397
  rule: resolution
  expr args: [(not (= (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)) (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))), (or (= (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or )]
  clause args: [derived 389, derived 396]
  backptr: nil
  conclusion: (or (= (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))

  derived clause number: 398
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE))))

  derived clause number: 399
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (= (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)))) (not (= (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))))

  derived clause number: 400
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (= (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))), (or )]
  clause args: [derived 398, derived 399]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (= (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))))

  derived clause number: 401
  rule: resolution
  expr args: [(not (= (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2))) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))), (or )]
  clause args: [derived 397, derived 400]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))))

  derived clause number: 402
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))

  derived clause number: 403
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))), (or )]
  clause args: [derived 401, derived 402]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))

  derived clause number: 404
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))), (or )]
  clause args: [derived 342, derived 403]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))

  derived clause number: 405
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))) (not (= (not held@0) (not held@0))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))

  derived clause number: 406
  rule: resolution
  expr args: [(not (= (not held@0) (not held@0))), (or (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))), (or )]
  clause args: [derived 33, derived 405]
  backptr: nil
  conclusion: (or (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))

  derived clause number: 407
  rule: resolution
  expr args: [(not (= (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))), (or (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))), (or )]
  clause args: [derived 404, derived 406]
  backptr: nil
  conclusion: (or (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))

  derived clause number: 408
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE))))

  derived clause number: 409
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))) (not (= (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)))) (not (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))

  derived clause number: 410
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))) (not (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))), (or )]
  clause args: [derived 408, derived 409]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))) (not (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))

  derived clause number: 411
  rule: resolution
  expr args: [(not (= (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))), (or )]
  clause args: [derived 407, derived 410]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))

  derived clause number: 412
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))) (not (= (not false) true)) (not (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))

  derived clause number: 413
  rule: resolution
  expr args: [(not (= (not false) true)), (or (= (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))), (or )]
  clause args: [derived 32, derived 412]
  backptr: nil
  conclusion: (or (= (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))

  derived clause number: 414
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))), (or (= (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))), (or )]
  clause args: [derived 411, derived 413]
  backptr: nil
  conclusion: (or (= (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))

  derived clause number: 415
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 14 ONE)) (* 14 ONE))

  derived clause number: 416
  rule: or_single
  expr args: []
  clause args: [derived 415]
  backptr: nil
  conclusion: (or (= (+ (* 14 ONE)) (* 14 ONE)))

  derived clause number: 417
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 14 ONE) (+ (* 14 ONE))) (not (= (+ (* 14 ONE)) (* 14 ONE))))

  derived clause number: 418
  rule: resolution
  expr args: [(not (= (+ (* 14 ONE)) (* 14 ONE))), (or (= (* 14 ONE) (+ (* 14 ONE)))), (or )]
  clause args: [derived 416, derived 417]
  backptr: nil
  conclusion: (or (= (* 14 ONE) (+ (* 14 ONE))))

  derived clause number: 419
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 14 ONE)) (* -1 (+ (* 14 ONE)))) (not (= (* 14 ONE) (+ (* 14 ONE)))))

  derived clause number: 420
  rule: resolution
  expr args: [(not (= (* 14 ONE) (+ (* 14 ONE)))), (or (= (* -1 (* 14 ONE)) (* -1 (+ (* 14 ONE))))), (or )]
  clause args: [derived 418, derived 419]
  backptr: nil
  conclusion: (or (= (* -1 (* 14 ONE)) (* -1 (+ (* 14 ONE)))))

  derived clause number: 421
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* -1 (+ (* 14 ONE))) (+ (* -14 ONE)))

  derived clause number: 422
  rule: or_single
  expr args: []
  clause args: [derived 421]
  backptr: nil
  conclusion: (or (= (* -1 (+ (* 14 ONE))) (+ (* -14 ONE))))

  derived clause number: 423
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 (* 14 ONE)) (+ (* -14 ONE))) (not (= (* -1 (* 14 ONE)) (* -1 (+ (* 14 ONE))))) (not (= (* -1 (+ (* 14 ONE))) (+ (* -14 ONE)))))

  derived clause number: 424
  rule: resolution
  expr args: [(not (= (* -1 (* 14 ONE)) (* -1 (+ (* 14 ONE))))), (or (= (* -1 (* 14 ONE)) (+ (* -14 ONE))) (not (= (* -1 (+ (* 14 ONE))) (+ (* -14 ONE))))), (or )]
  clause args: [derived 420, derived 423]
  backptr: nil
  conclusion: (or (= (* -1 (* 14 ONE)) (+ (* -14 ONE))) (not (= (* -1 (+ (* 14 ONE))) (+ (* -14 ONE)))))

  derived clause number: 425
  rule: resolution
  expr args: [(not (= (* -1 (+ (* 14 ONE))) (+ (* -14 ONE)))), (or (= (* -1 (* 14 ONE)) (+ (* -14 ONE)))), (or )]
  clause args: [derived 422, derived 424]
  backptr: nil
  conclusion: (or (= (* -1 (* 14 ONE)) (+ (* -14 ONE))))

  derived clause number: 426
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* -14 ONE)) (* -1 (* 14 ONE))) (not (= (* -1 (* 14 ONE)) (+ (* -14 ONE)))))

  derived clause number: 427
  rule: resolution
  expr args: [(not (= (* -1 (* 14 ONE)) (+ (* -14 ONE)))), (or (= (+ (* -14 ONE)) (* -1 (* 14 ONE)))), (or )]
  clause args: [derived 425, derived 426]
  backptr: nil
  conclusion: (or (= (+ (* -14 ONE)) (* -1 (* 14 ONE))))

  derived clause number: 428
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (+ (* 0 ONE)) (+ (* -14 ONE)))) (not (= (* 0 ONE) (+ (* 0 ONE)))) (not (= (* -1 (* 14 ONE)) (+ (* -14 ONE)))))

  derived clause number: 429
  rule: resolution
  expr args: [(not (= (* 0 ONE) (+ (* 0 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (+ (* 0 ONE)) (+ (* -14 ONE)))) (not (= (* -1 (* 14 ONE)) (+ (* -14 ONE))))), (or )]
  clause args: [derived 51, derived 428]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (+ (* 0 ONE)) (+ (* -14 ONE)))) (not (= (* -1 (* 14 ONE)) (+ (* -14 ONE)))))

  derived clause number: 430
  rule: resolution
  expr args: [(not (= (* -1 (* 14 ONE)) (+ (* -14 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (+ (* 0 ONE)) (+ (* -14 ONE))))), (or )]
  clause args: [derived 425, derived 429]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (+ (* 0 ONE)) (+ (* -14 ONE)))))

  derived clause number: 431
  rule: flatten
  expr args: [(+ (+ (* -14 ONE))), (+ (+ (* 0 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (+ (* -14 ONE))))

  derived clause number: 432
  rule: or_single
  expr args: []
  clause args: [derived 431]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (+ (* -14 ONE)))))

  derived clause number: 433
  rule: flatten
  expr args: [(+ (* 0 ONE)), (+ (+ (* -14 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE)))

  derived clause number: 434
  rule: or_single
  expr args: []
  clause args: [derived 433]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE))))

  derived clause number: 435
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (+ (* -14 ONE))))) (not (= (+ (* 0 ONE) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE)))))

  derived clause number: 436
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (+ (* -14 ONE))))), (or (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE))) (not (= (+ (* 0 ONE) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE))))), (or )]
  clause args: [derived 432, derived 435]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE))) (not (= (+ (* 0 ONE) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE)))))

  derived clause number: 437
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE)))), (or (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE)))), (or )]
  clause args: [derived 434, derived 436]
  backptr: nil
  conclusion: (or (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE))))

  derived clause number: 438
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* 0 ONE) (* -14 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (+ (* 0 ONE)) (+ (* -14 ONE))))) (not (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE)))))

  derived clause number: 439
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (+ (* 0 ONE)) (+ (* -14 ONE))))), (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* 0 ONE) (* -14 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE))))), (or )]
  clause args: [derived 430, derived 438]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* 0 ONE) (* -14 ONE))) (not (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE)))))

  derived clause number: 440
  rule: resolution
  expr args: [(not (= (+ (+ (* 0 ONE)) (+ (* -14 ONE))) (+ (* 0 ONE) (* -14 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* 0 ONE) (* -14 ONE)))), (or )]
  clause args: [derived 437, derived 439]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* 0 ONE) (* -14 ONE))))

  derived clause number: 441
  rule: consolidate
  expr args: [(+ ), (+ (* 0 ONE) (* -14 ONE)), (+ (* -14 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 0 ONE) (* -14 ONE)) (+ (* -14 ONE)))

  derived clause number: 442
  rule: or_single
  expr args: []
  clause args: [derived 441]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -14 ONE)) (+ (* -14 ONE))))

  derived clause number: 443
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* -14 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* 0 ONE) (* -14 ONE)))) (not (= (+ (* 0 ONE) (* -14 ONE)) (+ (* -14 ONE)))))

  derived clause number: 444
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* 0 ONE) (* -14 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* -14 ONE))) (not (= (+ (* 0 ONE) (* -14 ONE)) (+ (* -14 ONE))))), (or )]
  clause args: [derived 440, derived 443]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* -14 ONE))) (not (= (+ (* 0 ONE) (* -14 ONE)) (+ (* -14 ONE)))))

  derived clause number: 445
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -14 ONE)) (+ (* -14 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* -14 ONE)))), (or )]
  clause args: [derived 442, derived 444]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* -14 ONE))))

  derived clause number: 446
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (* -1 (* 14 ONE))) (not (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* -14 ONE)))) (not (= (+ (* -14 ONE)) (* -1 (* 14 ONE)))))

  derived clause number: 447
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (+ (* -14 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (* -1 (* 14 ONE))) (not (= (+ (* -14 ONE)) (* -1 (* 14 ONE))))), (or )]
  clause args: [derived 445, derived 446]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (* -1 (* 14 ONE))) (not (= (+ (* -14 ONE)) (* -1 (* 14 ONE)))))

  derived clause number: 448
  rule: resolution
  expr args: [(not (= (+ (* -14 ONE)) (* -1 (* 14 ONE)))), (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (* -1 (* 14 ONE)))), (or )]
  clause args: [derived 427, derived 447]
  backptr: nil
  conclusion: (or (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (* -1 (* 14 ONE))))

  derived clause number: 449
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (ControlFlow (* 0 ONE) (* 13 ONE)) (ControlFlow (* 0 ONE) (* 13 ONE))))

  derived clause number: 450
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE)))) (not (= (ControlFlow (* 0 ONE) (* 13 ONE)) (ControlFlow (* 0 ONE) (* 13 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (* -1 (* 14 ONE)))))

  derived clause number: 451
  rule: resolution
  expr args: [(not (= (ControlFlow (* 0 ONE) (* 13 ONE)) (ControlFlow (* 0 ONE) (* 13 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (* -1 (* 14 ONE))))), (or )]
  clause args: [derived 449, derived 450]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE)))) (not (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (* -1 (* 14 ONE)))))

  derived clause number: 452
  rule: resolution
  expr args: [(not (= (+ (* 0 ONE) (* -1 (* 14 ONE))) (* -1 (* 14 ONE)))), (or (= (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))))), (or )]
  clause args: [derived 448, derived 451]
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE)))))

  derived clause number: 453
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true)) (not (= (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))))) (not (= (not false) true)))

  derived clause number: 454
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true)) (not (= (not false) true))), (or )]
  clause args: [derived 452, derived 453]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true)) (not (= (not false) true)))

  derived clause number: 455
  rule: resolution
  expr args: [(not (= (not false) true)), (or (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true))), (or )]
  clause args: [derived 32, derived 454]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true)))

  derived clause number: 456
  rule: nary_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true))) (not (= (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))

  derived clause number: 457
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))) (not (= (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))), (or )]
  clause args: [derived 455, derived 456]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))) (not (= (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))

  derived clause number: 458
  rule: resolution
  expr args: [(not (= (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))), (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))), (or )]
  clause args: [derived 414, derived 457]
  backptr: nil
  conclusion: (or (= (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))

  derived clause number: 459
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE))))

  derived clause number: 460
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))) (not (= (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))

  derived clause number: 461
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))), (or )]
  clause args: [derived 459, derived 460]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))) (not (= (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))

  derived clause number: 462
  rule: resolution
  expr args: [(not (= (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))), (or )]
  clause args: [derived 458, derived 461]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))

  derived clause number: 463
  rule: refl
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE))))

  derived clause number: 464
  rule: binop_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))) (not (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))))

  derived clause number: 465
  rule: resolution
  expr args: [(not (= (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))), (or )]
  clause args: [derived 463, derived 464]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))))

  derived clause number: 466
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))), (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))), (or )]
  clause args: [derived 462, derived 465]
  backptr: nil
  conclusion: (or (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))))

  derived clause number: 467
  rule: not_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))) (not (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))))

  derived clause number: 468
  rule: resolution
  expr args: [(not (= (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))) (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))), (or (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))))), (or )]
  clause args: [derived 466, derived 467]
  backptr: nil
  conclusion: (or (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))))

  derived clause number: 469
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))))) (not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))))

  derived clause number: 470
  rule: resolution
  expr args: [(not (= (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))))), (or (not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))), (or )]
  clause args: [derived 468, derived 469]
  backptr: nil
  conclusion: (or (not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))))

  derived clause number: 471
  rule: resolution
  expr args: [(not (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))), (or (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))))]
  clause args: [derived 29, derived 470]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1))))))))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))))

  derived clause number: 472
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (+ (* 0 ONE) (* -1 (* 14 ONE)))) (not false)) (=> (not false) (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> (not true) (=> (and (= held@2 held@0) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (+ (* 0 ONE) (* -1 (* 11 ONE)))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (+ (* 0 ONE) (* -1 (* 8 ONE)))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (= held@1 false) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and (= held@1 true) (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (= held@2 held@1) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (+ (* 0 ONE) (* -1 (* 3 ONE)))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (+ (* 0 ONE) (* -1 (* 1 ONE))))) (not held@1)))))))))))))))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))))]
  clause args: [derived 471, derived 0]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))))

  derived clause number: 473
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 0 ONE)) (* 15 ONE)) (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))]
  clause args: [derived 28, derived 472]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))))

  derived clause number: 474
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 15 ONE)) (* 13 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))), (or ), (or (not (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))]
  clause args: [derived 27, derived 473]
  backptr: nil
  conclusion: (or (not (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))))

  derived clause number: 475
  rule: resolution
  expr args: [(not (and (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true) (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true)) (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))]
  clause args: [derived 26, derived 474]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true)) (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))

  derived clause number: 476
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* -1 (* 14 ONE))) true)), (or (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))), (or )]
  clause args: [derived 25, derived 475]
  backptr: nil
  conclusion: (or (not (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))))

  derived clause number: 477
  rule: resolution
  expr args: [(not (=> true (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))]
  clause args: [derived 23, derived 476]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))))

  derived clause number: 478
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 13 ONE)) (* 12 ONE)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))), (or ), (or (not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))]
  clause args: [derived 22, derived 477]
  backptr: nil
  conclusion: (or (not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))))

  derived clause number: 479
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not held@0) held@0)

  derived clause number: 480
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (not (not held@0)))

  derived clause number: 481
  rule: resolution
  expr args: [(not (not held@0)), (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0))), (or held@0)]
  clause args: [derived 479, derived 480]
  backptr: nil
  conclusion: (or held@0 (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)))

  derived clause number: 482
  rule: =>+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))) (not held@0))

  derived clause number: 483
  rule: resolution
  expr args: [(not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))), (or ), (or (not held@0))]
  clause args: [derived 482, derived 478]
  backptr: nil
  conclusion: (or (not held@0))

  derived clause number: 484
  rule: resolution
  expr args: [(not held@0), (or ), (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)))]
  clause args: [derived 481, derived 483]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)))

  derived clause number: 485
  rule: and+
  expr args: [(and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (and (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0))) (not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))]
  clause args: []
  backptr: nil
  conclusion: (or (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0))) (not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))

  derived clause number: 486
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))) (not (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))

  derived clause number: 487
  rule: resolution
  expr args: [(not (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))), (or (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0))) (not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))]
  clause args: [derived 485, derived 486]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0))) (not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))

  derived clause number: 488
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0))), (or (not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))), (or )]
  clause args: [derived 484, derived 487]
  backptr: nil
  conclusion: (or (not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))

  derived clause number: 489
  rule: =>+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) false)

  derived clause number: 490
  rule: resolution
  expr args: [(not false), (or ), (or (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))]
  clause args: [derived 489, derived 21]
  backptr: nil
  conclusion: (or (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))

  derived clause number: 491
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (not (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))

  derived clause number: 492
  rule: resolution
  expr args: [(not (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))), (or (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or )]
  clause args: [derived 490, derived 491]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))

  derived clause number: 493
  rule: and+
  expr args: [(and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))), (and (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))]
  clause args: []
  backptr: nil
  conclusion: (or (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))) (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))

  derived clause number: 494
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))) (not (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))

  derived clause number: 495
  rule: resolution
  expr args: [(not (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))), (or (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))]
  clause args: [derived 493, derived 494]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))))

  derived clause number: 496
  rule: resolution
  expr args: [(not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))]
  clause args: [derived 495, derived 478]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))

  derived clause number: 497
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 5 ONE)) (=> false (=> (and (not (xor held@2 held@0)) (= (ControlFlow (* 0 ONE) (* 5 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))))), (or )]
  clause args: [derived 492, derived 496]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))))

  derived clause number: 498
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 12 ONE)) (* 10 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* -1 (* 11 ONE))) (not held@0)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))), (or ), (or (not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))]
  clause args: [derived 488, derived 497]
  backptr: nil
  conclusion: (or (not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))))

  derived clause number: 499
  rule: =>+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (= x@2 x@0))

  derived clause number: 500
  rule: =>+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)) (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))))

  derived clause number: 501
  rule: =>+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (= x@1 (+ x@0 (* 1 ONE))))

  derived clause number: 502
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (not held@1) (= x@2 x@1))) (= x@2 x@1))

  derived clause number: 503
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ x@0 (* 1 ONE)) x@1) (not (= x@1 (+ x@0 (* 1 ONE)))))

  derived clause number: 504
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= x@1 x@2) (not (= x@2 x@1)))

  derived clause number: 505
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ x@0 (* 1 ONE)) x@2) (not (= (+ x@0 (* 1 ONE)) x@1)) (not (= x@1 x@2)))

  derived clause number: 506
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ x@0 (* 1 ONE)) x@0) (not (= (+ x@0 (* 1 ONE)) x@2)) (not (= x@2 x@0)))

  derived clause number: 507
  rule: resolution
  expr args: [(not (= (+ x@0 (* 1 ONE)) x@2)), (or (= (+ x@0 (* 1 ONE)) x@0) (not (= x@2 x@0))), (or (not (= (+ x@0 (* 1 ONE)) x@1)) (not (= x@1 x@2)))]
  clause args: [derived 505, derived 506]
  backptr: nil
  conclusion: (or (not (= (+ x@0 (* 1 ONE)) x@1)) (not (= x@1 x@2)) (= (+ x@0 (* 1 ONE)) x@0) (not (= x@2 x@0)))

  derived clause number: 508
  rule: resolution
  expr args: [(not (= x@1 x@2)), (or (not (= (+ x@0 (* 1 ONE)) x@1)) (= (+ x@0 (* 1 ONE)) x@0) (not (= x@2 x@0))), (or (not (= x@2 x@1)))]
  clause args: [derived 504, derived 507]
  backptr: nil
  conclusion: (or (not (= x@2 x@1)) (not (= (+ x@0 (* 1 ONE)) x@1)) (= (+ x@0 (* 1 ONE)) x@0) (not (= x@2 x@0)))

  derived clause number: 509
  rule: resolution
  expr args: [(not (= (+ x@0 (* 1 ONE)) x@1)), (or (not (= x@2 x@1)) (= (+ x@0 (* 1 ONE)) x@0) (not (= x@2 x@0))), (or (not (= x@1 (+ x@0 (* 1 ONE)))))]
  clause args: [derived 503, derived 508]
  backptr: nil
  conclusion: (or (not (= x@1 (+ x@0 (* 1 ONE)))) (not (= x@2 x@1)) (= (+ x@0 (* 1 ONE)) x@0) (not (= x@2 x@0)))

  derived clause number: 510
  rule: mul_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* 1 x@0) x@0)

  derived clause number: 511
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@0)) (* 1 x@0))

  derived clause number: 512
  rule: or_single
  expr args: []
  clause args: [derived 511]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0)) (* 1 x@0)))

  derived clause number: 513
  rule: or_single
  expr args: []
  clause args: [derived 510]
  backptr: nil
  conclusion: (or (= (* 1 x@0) x@0))

  derived clause number: 514
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0)) x@0) (not (= (+ (* 1 x@0)) (* 1 x@0))) (not (= (* 1 x@0) x@0)))

  derived clause number: 515
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0)) (* 1 x@0))), (or (= (+ (* 1 x@0)) x@0) (not (= (* 1 x@0) x@0))), (or )]
  clause args: [derived 512, derived 514]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0)) x@0) (not (= (* 1 x@0) x@0)))

  derived clause number: 516
  rule: resolution
  expr args: [(not (= (* 1 x@0) x@0)), (or (= (+ (* 1 x@0)) x@0)), (or )]
  clause args: [derived 513, derived 515]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0)) x@0))

  derived clause number: 517
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= x@0 (+ (* 1 x@0))) (not (= (+ (* 1 x@0)) x@0)))

  derived clause number: 518
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0)) x@0)), (or (= x@0 (+ (* 1 x@0)))), (or )]
  clause args: [derived 516, derived 517]
  backptr: nil
  conclusion: (or (= x@0 (+ (* 1 x@0))))

  derived clause number: 519
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ x@0 (* 1 ONE)) (+ (+ (* 1 x@0)) (+ (* 1 ONE)))) (not (= x@0 (+ (* 1 x@0)))) (not (= (* 1 ONE) (+ (* 1 ONE)))))

  derived clause number: 520
  rule: resolution
  expr args: [(not (= x@0 (+ (* 1 x@0)))), (or (= (+ x@0 (* 1 ONE)) (+ (+ (* 1 x@0)) (+ (* 1 ONE)))) (not (= (* 1 ONE) (+ (* 1 ONE))))), (or )]
  clause args: [derived 518, derived 519]
  backptr: nil
  conclusion: (or (= (+ x@0 (* 1 ONE)) (+ (+ (* 1 x@0)) (+ (* 1 ONE)))) (not (= (* 1 ONE) (+ (* 1 ONE)))))

  derived clause number: 521
  rule: resolution
  expr args: [(not (= (* 1 ONE) (+ (* 1 ONE)))), (or (= (+ x@0 (* 1 ONE)) (+ (+ (* 1 x@0)) (+ (* 1 ONE))))), (or )]
  clause args: [derived 85, derived 520]
  backptr: nil
  conclusion: (or (= (+ x@0 (* 1 ONE)) (+ (+ (* 1 x@0)) (+ (* 1 ONE)))))

  derived clause number: 522
  rule: flatten
  expr args: [(+ (+ (* 1 ONE))), (+ (+ (* 1 x@0)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (+ (* 1 ONE))))

  derived clause number: 523
  rule: or_single
  expr args: []
  clause args: [derived 522]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (+ (* 1 ONE)))))

  derived clause number: 524
  rule: flatten
  expr args: [(+ (* 1 x@0)), (+ (+ (* 1 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@0) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))

  derived clause number: 525
  rule: or_single
  expr args: []
  clause args: [derived 524]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))))

  derived clause number: 526
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))) (not (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (+ (* 1 ONE))))) (not (= (+ (* 1 x@0) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))))

  derived clause number: 527
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (+ (* 1 ONE))))), (or (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))) (not (= (+ (* 1 x@0) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))))), (or )]
  clause args: [derived 523, derived 526]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))) (not (= (+ (* 1 x@0) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))))

  derived clause number: 528
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))), (or (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))), (or )]
  clause args: [derived 525, derived 527]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))))

  derived clause number: 529
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ x@0 (* 1 ONE)) (+ (* 1 x@0) (* 1 ONE))) (not (= (+ x@0 (* 1 ONE)) (+ (+ (* 1 x@0)) (+ (* 1 ONE))))) (not (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))))

  derived clause number: 530
  rule: resolution
  expr args: [(not (= (+ x@0 (* 1 ONE)) (+ (+ (* 1 x@0)) (+ (* 1 ONE))))), (or (= (+ x@0 (* 1 ONE)) (+ (* 1 x@0) (* 1 ONE))) (not (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))))), (or )]
  clause args: [derived 521, derived 529]
  backptr: nil
  conclusion: (or (= (+ x@0 (* 1 ONE)) (+ (* 1 x@0) (* 1 ONE))) (not (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))))

  derived clause number: 531
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@0)) (+ (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))), (or (= (+ x@0 (* 1 ONE)) (+ (* 1 x@0) (* 1 ONE)))), (or )]
  clause args: [derived 528, derived 530]
  backptr: nil
  conclusion: (or (= (+ x@0 (* 1 ONE)) (+ (* 1 x@0) (* 1 ONE))))

  derived clause number: 532
  rule: mul_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (+ x@0 (* 1 ONE))) (* 1 (+ (* 1 x@0) (* 1 ONE)))) (not (= (+ x@0 (* 1 ONE)) (+ (* 1 x@0) (* 1 ONE)))))

  derived clause number: 533
  rule: resolution
  expr args: [(not (= (+ x@0 (* 1 ONE)) (+ (* 1 x@0) (* 1 ONE)))), (or (= (* 1 (+ x@0 (* 1 ONE))) (* 1 (+ (* 1 x@0) (* 1 ONE))))), (or )]
  clause args: [derived 531, derived 532]
  backptr: nil
  conclusion: (or (= (* 1 (+ x@0 (* 1 ONE))) (* 1 (+ (* 1 x@0) (* 1 ONE)))))

  derived clause number: 534
  rule: multiply
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (* 1 (+ (* 1 x@0) (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))

  derived clause number: 535
  rule: or_single
  expr args: []
  clause args: [derived 534]
  backptr: nil
  conclusion: (or (= (* 1 (+ (* 1 x@0) (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))))

  derived clause number: 536
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* 1 (+ x@0 (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))) (not (= (* 1 (+ x@0 (* 1 ONE))) (* 1 (+ (* 1 x@0) (* 1 ONE))))) (not (= (* 1 (+ (* 1 x@0) (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))))

  derived clause number: 537
  rule: resolution
  expr args: [(not (= (* 1 (+ x@0 (* 1 ONE))) (* 1 (+ (* 1 x@0) (* 1 ONE))))), (or (= (* 1 (+ x@0 (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))) (not (= (* 1 (+ (* 1 x@0) (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))))), (or )]
  clause args: [derived 533, derived 536]
  backptr: nil
  conclusion: (or (= (* 1 (+ x@0 (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))) (not (= (* 1 (+ (* 1 x@0) (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))))

  derived clause number: 538
  rule: resolution
  expr args: [(not (= (* 1 (+ (* 1 x@0) (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))), (or (= (* 1 (+ x@0 (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))), (or )]
  clause args: [derived 535, derived 537]
  backptr: nil
  conclusion: (or (= (* 1 (+ x@0 (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE))))

  derived clause number: 539
  rule: add_single
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (+ (* -1 x@0)) (* -1 x@0))

  derived clause number: 540
  rule: or_single
  expr args: []
  clause args: [derived 539]
  backptr: nil
  conclusion: (or (= (+ (* -1 x@0)) (* -1 x@0)))

  derived clause number: 541
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (* -1 x@0) (+ (* -1 x@0))) (not (= (+ (* -1 x@0)) (* -1 x@0))))

  derived clause number: 542
  rule: resolution
  expr args: [(not (= (+ (* -1 x@0)) (* -1 x@0))), (or (= (* -1 x@0) (+ (* -1 x@0)))), (or )]
  clause args: [derived 540, derived 541]
  backptr: nil
  conclusion: (or (= (* -1 x@0) (+ (* -1 x@0))))

  derived clause number: 543
  rule: sum_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0)))) (not (= (* 1 (+ x@0 (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))) (not (= (* -1 x@0) (+ (* -1 x@0)))))

  derived clause number: 544
  rule: resolution
  expr args: [(not (= (* 1 (+ x@0 (* 1 ONE))) (+ (* 1 x@0) (* 1 ONE)))), (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0)))) (not (= (* -1 x@0) (+ (* -1 x@0))))), (or )]
  clause args: [derived 538, derived 543]
  backptr: nil
  conclusion: (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0)))) (not (= (* -1 x@0) (+ (* -1 x@0)))))

  derived clause number: 545
  rule: resolution
  expr args: [(not (= (* -1 x@0) (+ (* -1 x@0)))), (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))))), (or )]
  clause args: [derived 542, derived 544]
  backptr: nil
  conclusion: (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0)))))

  derived clause number: 546
  rule: flatten
  expr args: [(+ (+ (* -1 x@0))), (+ (+ (* 1 x@0) (* 1 ONE)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (+ (* -1 x@0))))

  derived clause number: 547
  rule: or_single
  expr args: []
  clause args: [derived 546]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (+ (* -1 x@0)))))

  derived clause number: 548
  rule: flatten
  expr args: [(+ (* 1 x@0) (* 1 ONE)), (+ (+ (* -1 x@0)))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@0) (* 1 ONE) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)))

  derived clause number: 549
  rule: or_single
  expr args: []
  clause args: [derived 548]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* 1 ONE) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0))))

  derived clause number: 550
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0))) (not (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (+ (* -1 x@0))))) (not (= (+ (* 1 x@0) (* 1 ONE) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)))))

  derived clause number: 551
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (+ (* -1 x@0))))), (or (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0))) (not (= (+ (* 1 x@0) (* 1 ONE) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0))))), (or )]
  clause args: [derived 547, derived 550]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0))) (not (= (+ (* 1 x@0) (* 1 ONE) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)))))

  derived clause number: 552
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (* 1 ONE) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)))), (or (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)))), (or )]
  clause args: [derived 549, derived 551]
  backptr: nil
  conclusion: (or (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0))))

  derived clause number: 553
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0))) (not (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))))) (not (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)))))

  derived clause number: 554
  rule: resolution
  expr args: [(not (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))))), (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0))) (not (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0))))), (or )]
  clause args: [derived 545, derived 553]
  backptr: nil
  conclusion: (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0))) (not (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)))))

  derived clause number: 555
  rule: resolution
  expr args: [(not (= (+ (+ (* 1 x@0) (* 1 ONE)) (+ (* -1 x@0))) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)))), (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)))), (or )]
  clause args: [derived 552, derived 554]
  backptr: nil
  conclusion: (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0))))

  derived clause number: 556
  rule: consolidate
  expr args: [(+ (* 1 x@0) (* -1 x@0)), (+ (* 1 ONE)), (+ (* 1 ONE))]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE) (* 1 x@0) (* -1 x@0)))

  derived clause number: 557
  rule: or_single
  expr args: []
  clause args: [derived 556]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE) (* 1 x@0) (* -1 x@0))))

  derived clause number: 558
  rule: consolidate
  expr args: [(+ (* 1 ONE)), (+ (* 1 x@0) (* -1 x@0)), (+ )]
  clause args: []
  backptr: nil
  conclusion: (= (+ (* 1 ONE) (* 1 x@0) (* -1 x@0)) (+ (* 1 ONE)))

  derived clause number: 559
  rule: or_single
  expr args: []
  clause args: [derived 558]
  backptr: nil
  conclusion: (or (= (+ (* 1 ONE) (* 1 x@0) (* -1 x@0)) (+ (* 1 ONE))))

  derived clause number: 560
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE))) (not (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE) (* 1 x@0) (* -1 x@0)))) (not (= (+ (* 1 ONE) (* 1 x@0) (* -1 x@0)) (+ (* 1 ONE)))))

  derived clause number: 561
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE) (* 1 x@0) (* -1 x@0)))), (or (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE))) (not (= (+ (* 1 ONE) (* 1 x@0) (* -1 x@0)) (+ (* 1 ONE))))), (or )]
  clause args: [derived 557, derived 560]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE))) (not (= (+ (* 1 ONE) (* 1 x@0) (* -1 x@0)) (+ (* 1 ONE)))))

  derived clause number: 562
  rule: resolution
  expr args: [(not (= (+ (* 1 ONE) (* 1 x@0) (* -1 x@0)) (+ (* 1 ONE)))), (or (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE)))), (or )]
  clause args: [derived 559, derived 561]
  backptr: nil
  conclusion: (or (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE))))

  derived clause number: 563
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 ONE))) (not (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)))) (not (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE)))))

  derived clause number: 564
  rule: resolution
  expr args: [(not (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)))), (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 ONE))) (not (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE))))), (or )]
  clause args: [derived 555, derived 563]
  backptr: nil
  conclusion: (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 ONE))) (not (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE)))))

  derived clause number: 565
  rule: resolution
  expr args: [(not (= (+ (* 1 x@0) (* 1 ONE) (* -1 x@0)) (+ (* 1 ONE)))), (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 ONE)))), (or )]
  clause args: [derived 562, derived 564]
  backptr: nil
  conclusion: (or (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 ONE))))

  derived clause number: 566
  rule: or_single_rev
  expr args: []
  clause args: [derived 565]
  backptr: nil
  conclusion: (= (+ (* 1 (+ x@0 (* 1 ONE))) (* -1 x@0)) (+ (* 1 ONE)))

  derived clause number: 567
  rule: farkas
  expr args: []
  clause args: [derived 566]
  backptr: nil
  conclusion: (or (not (= (+ x@0 (* 1 ONE)) x@0)))

  derived clause number: 568
  rule: resolution
  expr args: [(not (= (+ x@0 (* 1 ONE)) x@0)), (or ), (or (not (= x@1 (+ x@0 (* 1 ONE)))) (not (= x@2 x@1)) (not (= x@2 x@0)))]
  clause args: [derived 509, derived 567]
  backptr: nil
  conclusion: (or (not (= x@1 (+ x@0 (* 1 ONE)))) (not (= x@2 x@1)) (not (= x@2 x@0)))

  derived clause number: 569
  rule: resolution
  expr args: [(not (= x@2 x@1)), (or (not (= x@1 (+ x@0 (* 1 ONE)))) (not (= x@2 x@0))), (or (not (and (not held@1) (= x@2 x@1))))]
  clause args: [derived 502, derived 568]
  backptr: nil
  conclusion: (or (not (and (not held@1) (= x@2 x@1))) (not (= x@1 (+ x@0 (* 1 ONE)))) (not (= x@2 x@0)))

  derived clause number: 570
  rule: resolution
  expr args: [(not (and (not held@1) (= x@2 x@1))), (or (not (= x@1 (+ x@0 (* 1 ONE)))) (not (= x@2 x@0))), (or (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))]
  clause args: [derived 13, derived 569]
  backptr: nil
  conclusion: (or (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (not (= x@1 (+ x@0 (* 1 ONE)))) (not (= x@2 x@0)))

  derived clause number: 571
  rule: resolution
  expr args: [(not (= x@1 (+ x@0 (* 1 ONE)))), (or (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (not (= x@2 x@0))), (or (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))]
  clause args: [derived 501, derived 570]
  backptr: nil
  conclusion: (or (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (not (= x@2 x@0)))

  derived clause number: 572
  rule: resolution
  expr args: [(not (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (or (not (= x@2 x@0)) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))]
  clause args: [derived 571, derived 14]
  backptr: nil
  conclusion: (or (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (not (= x@2 x@0)) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))

  derived clause number: 573
  rule: factoring
  expr args: []
  clause args: [derived 572]
  backptr: nil
  conclusion: (or (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (not (= x@2 x@0)))

  derived clause number: 574
  rule: resolution
  expr args: [(not (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or (not (= x@2 x@0)))]
  clause args: [derived 573, derived 17]
  backptr: nil
  conclusion: (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 575
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)))]
  clause args: [derived 574, derived 20]
  backptr: nil
  conclusion: (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 576
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or (not (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))]
  clause args: [derived 12, derived 575]
  backptr: nil
  conclusion: (or (not (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))) (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 577
  rule: resolution
  expr args: [(not (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or (and held@1 (= x@2 x@0)))]
  clause args: [derived 11, derived 576]
  backptr: nil
  conclusion: (or (and held@1 (= x@2 x@0)) (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 578
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and held@1 (= x@2 x@0))) held@1)

  derived clause number: 579
  rule: resolution
  expr args: [(not (and held@1 (= x@2 x@0))), (or held@1), (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))]
  clause args: [derived 577, derived 578]
  backptr: nil
  conclusion: (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) held@1)

  derived clause number: 580
  rule: resolution
  expr args: [(not held@1), (or (xor held@2 held@1) held@2), (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))]
  clause args: [derived 579, derived 7]
  backptr: nil
  conclusion: (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (xor held@2 held@1) held@2)

  derived clause number: 581
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))) (not (xor held@2 held@1)))

  derived clause number: 582
  rule: resolution
  expr args: [(not (xor held@2 held@1)), (or (not (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))))), (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) held@2)]
  clause args: [derived 580, derived 581]
  backptr: nil
  conclusion: (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) held@2 (not (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))))

  derived clause number: 583
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2) (not held@2))

  derived clause number: 584
  rule: resolution
  expr args: [(not held@2), (or (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)), (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (not (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))))]
  clause args: [derived 582, derived 583]
  backptr: nil
  conclusion: (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (not (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))

  derived clause number: 585
  rule: resolution
  expr args: [(not (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE)))), (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)), (or (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))]
  clause args: [derived 500, derived 584]
  backptr: nil
  conclusion: (or (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)) (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))

  derived clause number: 586
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)) (not (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))

  derived clause number: 587
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)), (or (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))), (or (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))]
  clause args: [derived 585, derived 586]
  backptr: nil
  conclusion: (or (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)) (not (= x@2 x@0)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))

  derived clause number: 588
  rule: resolution
  expr args: [(not (= x@2 x@0)), (or (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))), (or (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))]
  clause args: [derived 499, derived 587]
  backptr: nil
  conclusion: (or (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))

  derived clause number: 589
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (not (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))

  derived clause number: 590
  rule: factoring
  expr args: []
  clause args: [derived 588]
  backptr: nil
  conclusion: (or (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 591
  rule: resolution
  expr args: [(not (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))), (or (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))]
  clause args: [derived 590, derived 589]
  backptr: nil
  conclusion: (or (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))

  derived clause number: 592
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)), (or (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))), (or )]
  clause args: [derived 10, derived 591]
  backptr: nil
  conclusion: (or (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))

  derived clause number: 593
  rule: resolution
  expr args: [(not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or ), (or (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))]
  clause args: [derived 592, derived 498]
  backptr: nil
  conclusion: (or (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))

  derived clause number: 594
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (not (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))

  derived clause number: 595
  rule: factoring
  expr args: []
  clause args: [derived 593]
  backptr: nil
  conclusion: (or (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))

  derived clause number: 596
  rule: resolution
  expr args: [(not (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))), (or (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or )]
  clause args: [derived 595, derived 594]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))

  derived clause number: 597
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)) (not (not held@1)))

  derived clause number: 598
  rule: resolution
  expr args: [(not (not held@1)), (or (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))), (or held@1)]
  clause args: [derived 1, derived 597]
  backptr: nil
  conclusion: (or held@1 (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))

  derived clause number: 599
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))) (not (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))

  derived clause number: 600
  rule: resolution
  expr args: [(not (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))), (or (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))), (or held@1)]
  clause args: [derived 598, derived 599]
  backptr: nil
  conclusion: (or held@1 (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))

  derived clause number: 601
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (not held@1) (= x@2 x@1))) (not held@1))

  derived clause number: 602
  rule: resolution
  expr args: [(not held@1), (or (not (and (not held@1) (= x@2 x@1)))), (or (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))]
  clause args: [derived 600, derived 601]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))) (not (and (not held@1) (= x@2 x@1))))

  derived clause number: 603
  rule: and+
  expr args: [(and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))), (and (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))]
  clause args: []
  backptr: nil
  conclusion: (or (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))

  derived clause number: 604
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (not (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 605
  rule: resolution
  expr args: [(not (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))), (or (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))]
  clause args: [derived 603, derived 604]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 606
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or (not (and (not held@1) (= x@2 x@1))))]
  clause args: [derived 602, derived 605]
  backptr: nil
  conclusion: (or (not (and (not held@1) (= x@2 x@1))) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 607
  rule: resolution
  expr args: [(not (and (not held@1) (= x@2 x@1))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))]
  clause args: [derived 13, derived 606]
  backptr: nil
  conclusion: (or (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 608
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or )]
  clause args: [derived 596, derived 607]
  backptr: nil
  conclusion: (or (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 609
  rule: factoring
  expr args: []
  clause args: [derived 608]
  backptr: nil
  conclusion: (or (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 610
  rule: resolution
  expr args: [(not (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (or )]
  clause args: [derived 609, derived 14]
  backptr: nil
  conclusion: (or (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))

  derived clause number: 611
  rule: resolution
  expr args: [(not (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or )]
  clause args: [derived 610, derived 17]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 612
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true)), (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or )]
  clause args: [derived 10, derived 611]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 613
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or )]
  clause args: [derived 612, derived 20]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))) (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))))

  derived clause number: 614
  rule: resolution
  expr args: [(not (=> (not held@0) (and (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 7 ONE)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* -1 (* 8 ONE))) true) (=> (= x@1 (+ x@0 (* 1 ONE))) (=> (and (not held@1) (= x@2 x@1)) (and (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 7 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))) (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))]
  clause args: [derived 613, derived 498]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))))

  derived clause number: 615
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 10 ONE)) (* 9 ONE)) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))), (or ), (or (not (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))]
  clause args: [derived 12, derived 614]
  backptr: nil
  conclusion: (or (not (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))))

  derived clause number: 616
  rule: =>+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)) (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 617
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))) (not (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))

  derived clause number: 618
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (not (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))

  derived clause number: 619
  rule: resolution
  expr args: [(not (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))), (or (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or )]
  clause args: [derived 595, derived 618]
  backptr: nil
  conclusion: (or (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))))

  derived clause number: 620
  rule: and+
  expr args: [(and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))), (and (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))]
  clause args: []
  backptr: nil
  conclusion: (or (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))) (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))

  derived clause number: 621
  rule: =>+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))) (not (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 622
  rule: resolution
  expr args: [(not (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))), (or (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))]
  clause args: [derived 620, derived 621]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))) (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))))

  derived clause number: 623
  rule: resolution
  expr args: [(not (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or ), (or (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))]
  clause args: [derived 622, derived 615]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))) (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))

  derived clause number: 624
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2))))), (or (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))), (or )]
  clause args: [derived 619, derived 623]
  backptr: nil
  conclusion: (or (not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))

  derived clause number: 625
  rule: resolution
  expr args: [(not (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))), (or ), (or (not (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))]
  clause args: [derived 617, derived 624]
  backptr: nil
  conclusion: (or (not (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))))

  derived clause number: 626
  rule: resolution
  expr args: [(not (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1))), (or ), (or (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))]
  clause args: [derived 616, derived 625]
  backptr: nil
  conclusion: (or (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))

  derived clause number: 627
  rule: resolution
  expr args: [(not (=> (and held@1 (= x@2 x@0)) (and (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 6 ONE)) (=> (= x@2 x@0) (=> (and (not (xor held@2 held@1)) (= (ControlFlow (* 0 ONE) (* 6 ONE)) (* 4 ONE))) (=> (= (ControlFlow (* 0 ONE) (* 4 ONE)) (* -1 (* 3 ONE))) held@2)))) (=> (= (ControlFlow (* 0 ONE) (* 9 ONE)) (* 2 ONE)) (=> (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))) (not held@1)))))), (or ), (or (and held@1 (= x@2 x@0)))]
  clause args: [derived 11, derived 615]
  backptr: nil
  conclusion: (or (and held@1 (= x@2 x@0)))

  derived clause number: 628
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and held@1 (= x@2 x@0))) (= x@2 x@0))

  derived clause number: 629
  rule: resolution
  expr args: [(not (and held@1 (= x@2 x@0))), (or (= x@2 x@0)), (or )]
  clause args: [derived 627, derived 628]
  backptr: nil
  conclusion: (or (= x@2 x@0))

  derived clause number: 630
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))) (not (= x@2 x@0)))

  derived clause number: 631
  rule: resolution
  expr args: [(not (= x@2 x@0)), (or (not (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE)))))), (or )]
  clause args: [derived 629, derived 630]
  backptr: nil
  conclusion: (or (not (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))))

  derived clause number: 632
  rule: resolution
  expr args: [(not (and (not (= x@2 x@0)) (= (ControlFlow (* 0 ONE) (* 2 ONE)) (* -1 (* 1 ONE))))), (or ), (or )]
  clause args: [derived 626, derived 631]
  backptr: nil
  conclusion: (or )

  derived clause number: 633
  rule: or_nil
  expr args: []
  clause args: [derived 632]
  backptr: nil
  conclusion: false

