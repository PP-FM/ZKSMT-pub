vars: a b c f p
premises:
  a0: (and (= a c) (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b))))))
steps:
  derived clause number: 0
  rule: or_single
  expr args: []
  clause args: [premise a0]
  backptr: nil
  conclusion: (or (and (= a c) (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b)))))))

  derived clause number: 1
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (= a c) (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b))))))) (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b))))))

  derived clause number: 2
  rule: resolution
  expr args: [(not (and (= a c) (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b))))))), (or (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b)))))), (or )]
  clause args: [derived 0, derived 1]
  backptr: nil
  conclusion: (or (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b))))))

  derived clause number: 3
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b)))))) (= b c))

  derived clause number: 4
  rule: resolution
  expr args: [(not (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b)))))), (or (= b c)), (or )]
  clause args: [derived 2, derived 3]
  backptr: nil
  conclusion: (or (= b c))

  derived clause number: 5
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (= a c) (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b))))))) (= a c))

  derived clause number: 6
  rule: resolution
  expr args: [(not (and (= a c) (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b))))))), (or (= a c)), (or )]
  clause args: [derived 0, derived 5]
  backptr: nil
  conclusion: (or (= a c))

  derived clause number: 7
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= c b) (not (= b c)))

  derived clause number: 8
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= a b) (not (= a c)) (not (= c b)))

  derived clause number: 9
  rule: resolution
  expr args: [(not (= c b)), (or (= a b) (not (= a c))), (or (not (= b c)))]
  clause args: [derived 7, derived 8]
  backptr: nil
  conclusion: (or (not (= b c)) (= a b) (not (= a c)))

  derived clause number: 10
  rule: cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (f a) (f b)) (not (= a b)))

  derived clause number: 11
  rule: resolution
  expr args: [(not (= a b)), (or (= (f a) (f b))), (or (not (= b c)) (not (= a c)))]
  clause args: [derived 9, derived 10]
  backptr: nil
  conclusion: (or (not (= b c)) (not (= a c)) (= (f a) (f b)))

  derived clause number: 12
  rule: resolution
  expr args: [(not (= a c)), (or (not (= b c)) (= (f a) (f b))), (or )]
  clause args: [derived 6, derived 11]
  backptr: nil
  conclusion: (or (not (= b c)) (= (f a) (f b)))

  derived clause number: 13
  rule: resolution
  expr args: [(not (= b c)), (or (= (f a) (f b))), (or )]
  clause args: [derived 4, derived 12]
  backptr: nil
  conclusion: (or (= (f a) (f b)))

  derived clause number: 14
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b)))))) (or (not (= (f a) (f b))) (and (p a) (not (p b)))))

  derived clause number: 15
  rule: resolution
  expr args: [(not (and (= b c) (or (not (= (f a) (f b))) (and (p a) (not (p b)))))), (or (or (not (= (f a) (f b))) (and (p a) (not (p b))))), (or )]
  clause args: [derived 2, derived 14]
  backptr: nil
  conclusion: (or (or (not (= (f a) (f b))) (and (p a) (not (p b)))))

  derived clause number: 16
  rule: or-
  expr args: [(not (or (not (= (f a) (f b))) (and (p a) (not (p b)))))]
  clause args: []
  backptr: nil
  conclusion: (or (not (or (not (= (f a) (f b))) (and (p a) (not (p b))))) (not (= (f a) (f b))) (and (p a) (not (p b))))

  derived clause number: 17
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (not (= (f a) (f b)))) (not (= (f a) (f b))))

  derived clause number: 18
  rule: resolution
  expr args: [(not (not (= (f a) (f b)))), (or (not (= (f a) (f b)))), (or (not (or (not (= (f a) (f b))) (and (p a) (not (p b))))) (and (p a) (not (p b))))]
  clause args: [derived 16, derived 17]
  backptr: nil
  conclusion: (or (not (or (not (= (f a) (f b))) (and (p a) (not (p b))))) (and (p a) (not (p b))) (not (= (f a) (f b))))

  derived clause number: 19
  rule: resolution
  expr args: [(not (or (not (= (f a) (f b))) (and (p a) (not (p b))))), (or (and (p a) (not (p b))) (not (= (f a) (f b)))), (or )]
  clause args: [derived 15, derived 18]
  backptr: nil
  conclusion: (or (and (p a) (not (p b))) (not (= (f a) (f b))))

  derived clause number: 20
  rule: resolution
  expr args: [(not (= (f a) (f b))), (or (and (p a) (not (p b)))), (or )]
  clause args: [derived 13, derived 19]
  backptr: nil
  conclusion: (or (and (p a) (not (p b))))

  derived clause number: 21
  rule: true+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or true)

  derived clause number: 22
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (p a) (not (p b)))) (p a))

  derived clause number: 23
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (p a) (= (p a) true)) (p a) (= (p a) true))

  derived clause number: 24
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (p a) true) (not (p a)) (not true))

  derived clause number: 25
  rule: resolution
  expr args: [(not (p a)), (or (= (p a) true) (not true)), (or (= (p a) (= (p a) true)) (= (p a) true))]
  clause args: [derived 23, derived 24]
  backptr: nil
  conclusion: (or (= (p a) (= (p a) true)) (= (p a) true) (= (p a) true) (not true))

  derived clause number: 26
  rule: =-1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (p a) true)) (p a) (not true))

  derived clause number: 27
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (p a) (= (p a) true)) (not (p a)) (not (= (p a) true)))

  derived clause number: 28
  rule: resolution
  expr args: [(not (p a)), (or (= (p a) (= (p a) true)) (not (= (p a) true))), (or (not true) (not (= (p a) true)))]
  clause args: [derived 26, derived 27]
  backptr: nil
  conclusion: (or (not (= (p a) true)) (not true) (= (p a) (= (p a) true)) (not (= (p a) true)))

  derived clause number: 29
  rule: factoring
  expr args: []
  clause args: [derived 25]
  backptr: nil
  conclusion: (or (= (p a) (= (p a) true)) (= (p a) true) (not true))

  derived clause number: 30
  rule: factoring
  expr args: []
  clause args: [derived 28]
  backptr: nil
  conclusion: (or (not (= (p a) true)) (not true) (= (p a) (= (p a) true)))

  derived clause number: 31
  rule: resolution
  expr args: [(not (= (p a) true)), (or (not true) (= (p a) (= (p a) true))), (or (not true) (= (p a) (= (p a) true)))]
  clause args: [derived 29, derived 30]
  backptr: nil
  conclusion: (or (= (p a) (= (p a) true)) (not true) (not true) (= (p a) (= (p a) true)))

  derived clause number: 32
  rule: factoring
  expr args: []
  clause args: [derived 31]
  backptr: nil
  conclusion: (or (= (p a) (= (p a) true)) (not true))

  derived clause number: 33
  rule: resolution
  expr args: [(not true), (or (= (p a) (= (p a) true))), (or )]
  clause args: [derived 21, derived 32]
  backptr: nil
  conclusion: (or (= (p a) (= (p a) true)))

  derived clause number: 34
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (p a) (= (p a) true))) (not (p a)) (= (p a) true))

  derived clause number: 35
  rule: resolution
  expr args: [(not (= (p a) (= (p a) true))), (or (not (p a)) (= (p a) true)), (or )]
  clause args: [derived 33, derived 34]
  backptr: nil
  conclusion: (or (not (p a)) (= (p a) true))

  derived clause number: 36
  rule: resolution
  expr args: [(not (p a)), (or (= (p a) true)), (or (not (and (p a) (not (p b)))))]
  clause args: [derived 22, derived 35]
  backptr: nil
  conclusion: (or (not (and (p a) (not (p b)))) (= (p a) true))

  derived clause number: 37
  rule: resolution
  expr args: [(not (and (p a) (not (p b)))), (or (= (p a) true)), (or )]
  clause args: [derived 20, derived 36]
  backptr: nil
  conclusion: (or (= (p a) true))

  derived clause number: 38
  rule: symm
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= c a) (not (= a c)))

  derived clause number: 39
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= b a) (not (= b c)) (not (= c a)))

  derived clause number: 40
  rule: resolution
  expr args: [(not (= c a)), (or (= b a) (not (= b c))), (or (not (= a c)))]
  clause args: [derived 38, derived 39]
  backptr: nil
  conclusion: (or (not (= a c)) (= b a) (not (= b c)))

  derived clause number: 41
  rule: cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (p b) (p a)) (not (= b a)))

  derived clause number: 42
  rule: trans
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (p b) true) (not (= (p b) (p a))) (not (= (p a) true)))

  derived clause number: 43
  rule: resolution
  expr args: [(not (= (p b) (p a))), (or (= (p b) true) (not (= (p a) true))), (or (not (= b a)))]
  clause args: [derived 41, derived 42]
  backptr: nil
  conclusion: (or (not (= b a)) (= (p b) true) (not (= (p a) true)))

  derived clause number: 44
  rule: resolution
  expr args: [(not (= b a)), (or (= (p b) true) (not (= (p a) true))), (or (not (= a c)) (not (= b c)))]
  clause args: [derived 40, derived 43]
  backptr: nil
  conclusion: (or (not (= a c)) (not (= b c)) (= (p b) true) (not (= (p a) true)))

  derived clause number: 45
  rule: not+
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (p b)) (p b))

  derived clause number: 46
  rule: =+1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)) (p b) (= (p b) true))

  derived clause number: 47
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (p b) true) (not (p b)) (not true))

  derived clause number: 48
  rule: resolution
  expr args: [(not (p b)), (or (= (p b) true) (not true)), (or (= (p b) (= (p b) true)) (= (p b) true))]
  clause args: [derived 46, derived 47]
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)) (= (p b) true) (= (p b) true) (not true))

  derived clause number: 49
  rule: =-1
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (p b) true)) (p b) (not true))

  derived clause number: 50
  rule: =+2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)) (not (p b)) (not (= (p b) true)))

  derived clause number: 51
  rule: resolution
  expr args: [(not (p b)), (or (= (p b) (= (p b) true)) (not (= (p b) true))), (or (not true) (not (= (p b) true)))]
  clause args: [derived 49, derived 50]
  backptr: nil
  conclusion: (or (not (= (p b) true)) (not true) (= (p b) (= (p b) true)) (not (= (p b) true)))

  derived clause number: 52
  rule: factoring
  expr args: []
  clause args: [derived 48]
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)) (= (p b) true) (not true))

  derived clause number: 53
  rule: factoring
  expr args: []
  clause args: [derived 51]
  backptr: nil
  conclusion: (or (not (= (p b) true)) (not true) (= (p b) (= (p b) true)))

  derived clause number: 54
  rule: resolution
  expr args: [(not (= (p b) true)), (or (not true) (= (p b) (= (p b) true))), (or (not true) (= (p b) (= (p b) true)))]
  clause args: [derived 52, derived 53]
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)) (not true) (not true) (= (p b) (= (p b) true)))

  derived clause number: 55
  rule: factoring
  expr args: []
  clause args: [derived 54]
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)) (not true))

  derived clause number: 56
  rule: resolution
  expr args: [(not true), (or (= (p b) (= (p b) true))), (or )]
  clause args: [derived 21, derived 55]
  backptr: nil
  conclusion: (or (= (p b) (= (p b) true)))

  derived clause number: 57
  rule: not_cong
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (= (not (p b)) (not (= (p b) true))) (not (= (p b) (= (p b) true))))

  derived clause number: 58
  rule: resolution
  expr args: [(not (= (p b) (= (p b) true))), (or (= (not (p b)) (not (= (p b) true)))), (or )]
  clause args: [derived 56, derived 57]
  backptr: nil
  conclusion: (or (= (not (p b)) (not (= (p b) true))))

  derived clause number: 59
  rule: =-2
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (= (not (p b)) (not (= (p b) true)))) (not (not (p b))) (not (= (p b) true)))

  derived clause number: 60
  rule: resolution
  expr args: [(not (= (not (p b)) (not (= (p b) true)))), (or (not (not (p b))) (not (= (p b) true))), (or )]
  clause args: [derived 58, derived 59]
  backptr: nil
  conclusion: (or (not (not (p b))) (not (= (p b) true)))

  derived clause number: 61
  rule: resolution
  expr args: [(not (not (p b))), (or (not (= (p b) true))), (or (p b))]
  clause args: [derived 45, derived 60]
  backptr: nil
  conclusion: (or (p b) (not (= (p b) true)))

  derived clause number: 62
  rule: and-
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (or (not (and (p a) (not (p b)))) (not (p b)))

  derived clause number: 63
  rule: resolution
  expr args: [(not (p b)), (or (not (and (p a) (not (p b))))), (or (not (= (p b) true)))]
  clause args: [derived 61, derived 62]
  backptr: nil
  conclusion: (or (not (= (p b) true)) (not (and (p a) (not (p b)))))

  derived clause number: 64
  rule: resolution
  expr args: [(not (and (p a) (not (p b)))), (or (not (= (p b) true))), (or )]
  clause args: [derived 20, derived 63]
  backptr: nil
  conclusion: (or (not (= (p b) true)))

  derived clause number: 65
  rule: resolution
  expr args: [(not (= (p b) true)), (or ), (or (not (= a c)) (not (= b c)) (not (= (p a) true)))]
  clause args: [derived 44, derived 64]
  backptr: nil
  conclusion: (or (not (= a c)) (not (= b c)) (not (= (p a) true)))

  derived clause number: 66
  rule: resolution
  expr args: [(not (= a c)), (or (not (= b c)) (not (= (p a) true))), (or )]
  clause args: [derived 6, derived 65]
  backptr: nil
  conclusion: (or (not (= b c)) (not (= (p a) true)))

  derived clause number: 67
  rule: resolution
  expr args: [(not (= b c)), (or (not (= (p a) true))), (or )]
  clause args: [derived 4, derived 66]
  backptr: nil
  conclusion: (or (not (= (p a) true)))

  derived clause number: 68
  rule: resolution
  expr args: [(not (= (p a) true)), (or ), (or )]
  clause args: [derived 37, derived 67]
  backptr: nil
  conclusion: (or )

  derived clause number: 69
  rule: or_nil
  expr args: []
  clause args: [derived 68]
  backptr: nil
  conclusion: false

