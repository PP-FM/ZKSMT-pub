vars: cvc.a cvc.b
premises:
  a0: (=> cvc.a cvc.b)
  a1: (not (or (not cvc.a) cvc.b))
steps:
  derived clause number: 0
  rule: cnf_implies_pos
  expr args: [cvc.a, cvc.b]
  clause args: []
  backptr: nil
  conclusion: (or (not (=> cvc.a cvc.b)) (not cvc.a) cvc.b)

  derived clause number: 1
  rule: not_or_elim
  expr args: [0]
  clause args: [premise a1]
  backptr: nil
  conclusion: (not (not cvc.a))

  derived clause number: 2
  rule: not_not_elim
  expr args: []
  clause args: [derived 1]
  backptr: nil
  conclusion: cvc.a

  derived clause number: 3
  rule: resolution
  expr args: [ff, cvc.a]
  clause args: [derived 0, derived 2]
  backptr: nil
  conclusion: (or (not (=> cvc.a cvc.b)) cvc.b)

  derived clause number: 4
  rule: not_or_elim
  expr args: [1]
  clause args: [premise a1]
  backptr: nil
  conclusion: (not cvc.b)

  derived clause number: 5
  rule: resolution
  expr args: [tt, cvc.b]
  clause args: [derived 3, derived 4]
  backptr: nil
  conclusion: (not (=> cvc.a cvc.b))

  derived clause number: 6
  rule: contra
  expr args: []
  clause args: [premise a0, derived 5]
  backptr: nil
  conclusion: false

