vars: cvc.b cvc.d cvc.c cvc.e cvc.a cvc.f
premises:
  a0: (and (= cvc.a cvc.b) (and (= cvc.b cvc.c) (and (= cvc.c cvc.d) (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f)))))))
steps:
  derived clause number: 0
  rule: refl
  expr args: [(and (= cvc.e cvc.f) (not (= cvc.a cvc.f)))]
  clause args: []
  backptr: nil
  conclusion: (= (and (= cvc.e cvc.f) (not (= cvc.a cvc.f))) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f))))

  derived clause number: 1
  rule: and_flatten
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (and (and (= cvc.e cvc.f) (not (= cvc.a cvc.f)))) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f))))

  derived clause number: 2
  rule: trans
  expr args: []
  clause args: [derived 1, derived 0]
  backptr: nil
  conclusion: (= (and (and (= cvc.e cvc.f) (not (= cvc.a cvc.f)))) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f))))

  derived clause number: 3
  rule: and_cons_equiv
  expr args: [(= cvc.c cvc.e)]
  clause args: [derived 2]
  backptr: nil
  conclusion: (= (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f)))) (and (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f))))

  derived clause number: 4
  rule: and_flatten
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (and (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f))))) (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f)))))

  derived clause number: 5
  rule: trans
  expr args: []
  clause args: [derived 4, derived 3]
  backptr: nil
  conclusion: (= (and (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f))))) (and (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f))))

  derived clause number: 6
  rule: and_cons_equiv
  expr args: [(= cvc.c cvc.d)]
  clause args: [derived 5]
  backptr: nil
  conclusion: (= (and (= cvc.c cvc.d) (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f))))) (and (= cvc.c cvc.d) (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f))))

  derived clause number: 7
  rule: and_flatten
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (and (and (= cvc.c cvc.d) (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f)))))) (and (= cvc.c cvc.d) (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f))))))

  derived clause number: 8
  rule: trans
  expr args: []
  clause args: [derived 7, derived 6]
  backptr: nil
  conclusion: (= (and (and (= cvc.c cvc.d) (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f)))))) (and (= cvc.c cvc.d) (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f))))

  derived clause number: 9
  rule: and_cons_equiv
  expr args: [(= cvc.b cvc.c)]
  clause args: [derived 8]
  backptr: nil
  conclusion: (= (and (= cvc.b cvc.c) (and (= cvc.c cvc.d) (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f)))))) (and (= cvc.b cvc.c) (= cvc.c cvc.d) (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f))))

  derived clause number: 10
  rule: and_flatten
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (and (and (= cvc.b cvc.c) (and (= cvc.c cvc.d) (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f))))))) (and (= cvc.b cvc.c) (and (= cvc.c cvc.d) (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f)))))))

  derived clause number: 11
  rule: trans
  expr args: []
  clause args: [derived 10, derived 9]
  backptr: nil
  conclusion: (= (and (and (= cvc.b cvc.c) (and (= cvc.c cvc.d) (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f))))))) (and (= cvc.b cvc.c) (= cvc.c cvc.d) (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f))))

  derived clause number: 12
  rule: and_cons_equiv
  expr args: [(= cvc.a cvc.b)]
  clause args: [derived 11]
  backptr: nil
  conclusion: (= (and (= cvc.a cvc.b) (and (= cvc.b cvc.c) (and (= cvc.c cvc.d) (and (= cvc.c cvc.e) (and (= cvc.e cvc.f) (not (= cvc.a cvc.f))))))) (and (= cvc.a cvc.b) (= cvc.b cvc.c) (= cvc.c cvc.d) (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f))))

  derived clause number: 13
  rule: eq_resolve
  expr args: []
  clause args: [premise a0, derived 12]
  backptr: nil
  conclusion: (and (= cvc.a cvc.b) (= cvc.b cvc.c) (= cvc.c cvc.d) (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f)))

  derived clause number: 14
  rule: and_elim
  expr args: [0]
  clause args: [derived 13]
  backptr: nil
  conclusion: (= cvc.a cvc.b)

  derived clause number: 15
  rule: eq_resolve
  expr args: []
  clause args: [premise a0, derived 12]
  backptr: nil
  conclusion: (and (= cvc.a cvc.b) (= cvc.b cvc.c) (= cvc.c cvc.d) (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f)))

  derived clause number: 16
  rule: and_elim
  expr args: [1]
  clause args: [derived 15]
  backptr: nil
  conclusion: (= cvc.b cvc.c)

  derived clause number: 17
  rule: eq_resolve
  expr args: []
  clause args: [premise a0, derived 12]
  backptr: nil
  conclusion: (and (= cvc.a cvc.b) (= cvc.b cvc.c) (= cvc.c cvc.d) (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f)))

  derived clause number: 18
  rule: and_elim
  expr args: [2]
  clause args: [derived 17]
  backptr: nil
  conclusion: (= cvc.c cvc.d)

  derived clause number: 19
  rule: eq_resolve
  expr args: []
  clause args: [premise a0, derived 12]
  backptr: nil
  conclusion: (and (= cvc.a cvc.b) (= cvc.b cvc.c) (= cvc.c cvc.d) (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f)))

  derived clause number: 20
  rule: and_elim
  expr args: [4]
  clause args: [derived 19]
  backptr: nil
  conclusion: (= cvc.e cvc.f)

  derived clause number: 21
  rule: eq_resolve
  expr args: []
  clause args: [premise a0, derived 12]
  backptr: nil
  conclusion: (and (= cvc.a cvc.b) (= cvc.b cvc.c) (= cvc.c cvc.d) (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f)))

  derived clause number: 22
  rule: and_elim
  expr args: [3]
  clause args: [derived 21]
  backptr: nil
  conclusion: (= cvc.c cvc.e)

  derived clause number: 23
  rule: and_intro1
  expr args: []
  clause args: [derived 14]
  backptr: nil
  conclusion: (and (= cvc.a cvc.b))

  derived clause number: 24
  rule: and_intro2
  expr args: []
  clause args: [derived 16, derived 23]
  backptr: nil
  conclusion: (and (= cvc.b cvc.c) (= cvc.a cvc.b))

  derived clause number: 25
  rule: and_intro2
  expr args: []
  clause args: [derived 18, derived 24]
  backptr: nil
  conclusion: (and (= cvc.c cvc.d) (= cvc.b cvc.c) (= cvc.a cvc.b))

  derived clause number: 26
  rule: and_elim
  expr args: [0]
  clause args: [derived 25]
  backptr: nil
  conclusion: (= cvc.c cvc.d)

  derived clause number: 27
  rule: refl
  expr args: [cvc.e]
  clause args: []
  backptr: nil
  conclusion: (= cvc.e cvc.e)

  derived clause number: 28
  rule: =_est
  expr args: []
  clause args: [derived 26, derived 27]
  backptr: nil
  conclusion: (= (= cvc.c cvc.e) (= cvc.d cvc.e))

  derived clause number: 29
  rule: eq_resolve
  expr args: []
  clause args: [derived 22, derived 28]
  backptr: nil
  conclusion: (= cvc.d cvc.e)

  derived clause number: 30
  rule: and_intro1
  expr args: []
  clause args: [derived 14]
  backptr: nil
  conclusion: (and (= cvc.a cvc.b))

  derived clause number: 31
  rule: and_intro2
  expr args: []
  clause args: [derived 16, derived 30]
  backptr: nil
  conclusion: (and (= cvc.b cvc.c) (= cvc.a cvc.b))

  derived clause number: 32
  rule: and_intro2
  expr args: []
  clause args: [derived 18, derived 31]
  backptr: nil
  conclusion: (and (= cvc.c cvc.d) (= cvc.b cvc.c) (= cvc.a cvc.b))

  derived clause number: 33
  rule: and_intro2
  expr args: []
  clause args: [derived 29, derived 32]
  backptr: nil
  conclusion: (and (= cvc.d cvc.e) (= cvc.c cvc.d) (= cvc.b cvc.c) (= cvc.a cvc.b))

  derived clause number: 34
  rule: and_intro2
  expr args: []
  clause args: [derived 20, derived 33]
  backptr: nil
  conclusion: (and (= cvc.e cvc.f) (= cvc.d cvc.e) (= cvc.c cvc.d) (= cvc.b cvc.c) (= cvc.a cvc.b))

  derived clause number: 35
  rule: eq_resolve
  expr args: []
  clause args: [premise a0, derived 12]
  backptr: nil
  conclusion: (and (= cvc.a cvc.b) (= cvc.b cvc.c) (= cvc.c cvc.d) (= cvc.c cvc.e) (= cvc.e cvc.f) (not (= cvc.a cvc.f)))

  derived clause number: 36
  rule: and_elim
  expr args: [5]
  clause args: [derived 35]
  backptr: nil
  conclusion: (not (= cvc.a cvc.f))

  derived clause number: 37
  rule: and_elim
  expr args: [4]
  clause args: [derived 34]
  backptr: nil
  conclusion: (= cvc.a cvc.b)

  derived clause number: 38
  rule: and_elim
  expr args: [3]
  clause args: [derived 34]
  backptr: nil
  conclusion: (= cvc.b cvc.c)

  derived clause number: 39
  rule: and_elim
  expr args: [2]
  clause args: [derived 34]
  backptr: nil
  conclusion: (= cvc.c cvc.d)

  derived clause number: 40
  rule: and_elim
  expr args: [1]
  clause args: [derived 34]
  backptr: nil
  conclusion: (= cvc.d cvc.e)

  derived clause number: 41
  rule: and_elim
  expr args: [0]
  clause args: [derived 34]
  backptr: nil
  conclusion: (= cvc.e cvc.f)

  derived clause number: 42
  rule: trans
  expr args: []
  clause args: [derived 40, derived 41]
  backptr: nil
  conclusion: (= cvc.d cvc.f)

  derived clause number: 43
  rule: trans
  expr args: []
  clause args: [derived 39, derived 42]
  backptr: nil
  conclusion: (= cvc.c cvc.f)

  derived clause number: 44
  rule: trans
  expr args: []
  clause args: [derived 38, derived 43]
  backptr: nil
  conclusion: (= cvc.b cvc.f)

  derived clause number: 45
  rule: trans
  expr args: []
  clause args: [derived 37, derived 44]
  backptr: nil
  conclusion: (= cvc.a cvc.f)

  derived clause number: 46
  rule: refl
  expr args: [cvc.f]
  clause args: []
  backptr: nil
  conclusion: (= cvc.f cvc.f)

  derived clause number: 47
  rule: =_est
  expr args: []
  clause args: [derived 45, derived 46]
  backptr: nil
  conclusion: (= (= cvc.a cvc.f) (= cvc.f cvc.f))

  derived clause number: 48
  rule: not_est
  expr args: []
  clause args: [derived 47]
  backptr: nil
  conclusion: (= (not (= cvc.a cvc.f)) (not (= cvc.f cvc.f)))

  derived clause number: 49
  rule: refl_equiv
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (= cvc.f cvc.f) true)

  derived clause number: 50
  rule: not_est
  expr args: []
  clause args: [derived 49]
  backptr: nil
  conclusion: (= (not (= cvc.f cvc.f)) (not true))

  derived clause number: 51
  rule: eval_true
  expr args: []
  clause args: []
  backptr: nil
  conclusion: (= (not true) false)

  derived clause number: 52
  rule: trans
  expr args: []
  clause args: [derived 50, derived 51]
  backptr: nil
  conclusion: (= (not (= cvc.f cvc.f)) false)

  derived clause number: 53
  rule: trans
  expr args: []
  clause args: [derived 48, derived 52]
  backptr: nil
  conclusion: (= (not (= cvc.a cvc.f)) false)

  derived clause number: 54
  rule: eq_resolve
  expr args: []
  clause args: [derived 36, derived 53]
  backptr: nil
  conclusion: false

