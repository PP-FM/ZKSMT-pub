unsat
(! (let ((.cse77 (* (- 1) distance))) (let ((.cse50 (+ fmt0 .cse77)) (.cse275 (* (- 1) arg1))) (let ((.cse95 (* (- 1) fmt0)) (.cse273 (+ fmt0 .cse275)) (.cse233 (= fmt0 0)) (.cse44 (= arg0 .cse50)) (.cse217 (+ fmt0 fmt_length (* (- 1) fmt1) (- 1)))) (let ((.cse59 (= distance 15)) (.cse32 (= fmt_length 5)) (.cse213 (<= .cse217 0)) (.cse45 (and .cse233 .cse44)) (.cse85 (<= .cse273 0)) (.cse207 (+ fmt1 .cse95 (- 1)))) (let ((.cse204 (<= .cse207 0)) (.cse46 (and .cse45 .cse85)) (.cse210 (not .cse213)) (.cse152 (+ fmt1 .cse95 (- 2))) (.cse33 (and .cse59 .cse32))) (let ((.cse78 (and .cse33 (= adr_lo 3))) (.cse75 (x_count .cse152)) (.cse74 (s_count .cse152)) (.cse195 (+ arg0 distance .cse275)) (.cse92 (and .cse46 .cse210)) (.cse201 (not .cse204)) (.cse274 (+ arg0 distance fmt_length .cse275 (- 4)))) (let ((.cse2 (<= .cse274 0)) (.cse93 (and .cse92 .cse201)) (.cse191 (<= .cse195 0)) (.cse158 (* 4 .cse74)) (.cse147 (* 4 .cse75)) (.cse79 (and .cse78 (= adr_medlo 4)))) (let ((.cse80 (and .cse79 (= adr_medhi 5))) (.cse23 (+ arg0 .cse158 .cse147)) (.cse94 (and .cse93 .cse191)) (.cse6 (not .cse2))) (let ((.cse14 (and .cse94 .cse6)) (.cse18 (= arg1 .cse23)) (.cse81 (and .cse80 (= adr_hi 6)))) (let ((.cse82 (and .cse81 (and (and (= percent 37) (= s 115)) (= x 120)))) (.cse19 (and .cse14 .cse18))) (let ((.cse10 (< 0 .cse274)) (.cse88 (< 0 .cse273)) (.cse83 (and .cse82 .cse19))) (let-proof ((.cse7 (not+ .cse6)) (.cse11 (total .cse274 0)) (.cse16 (not- .cse6)) (.cse89 (total .cse273 0))) (let-proof ((.cse84 (let ((.cse200 (+ fmt0 1))) (let ((.cse138 (= fmt1 fmt0)) (.cse136 (= fmt1 .cse200))) (let ((.cse135 (or .cse138 .cse136)) (.cse133 (= fmt1 (+ fmt0 2)))) (let ((.cse132 (or .cse135 .cse133)) (.cse130 (= fmt1 (+ fmt0 3)))) (let ((.cse119 (= arg1 fmt0)) (.cse117 (= arg1 .cse200)) (.cse129 (or .cse132 .cse130)) (.cse127 (= fmt1 (+ fmt0 4)))) (let ((.cse126 (or .cse129 .cse127)) (.cse116 (or .cse119 .cse117))) (let ((.cse114 (and .cse126 .cse116))) (let ((.cse96 (and .cse83 .cse114))) (res .cse96 (let ((.cse272 (format 4)) (.cse271 (format 3)) (.cse270 (format 2)) (.cse269 (format 1)) (.cse268 (format 0))) (let ((.cse236 (= .cse268 percent)) (.cse240 (= .cse269 percent)) (.cse256 (= .cse269 s)) (.cse237 (= .cse269 x)) (.cse244 (= .cse270 percent)) (.cse259 (= .cse270 s)) (.cse241 (= .cse270 x)) (.cse248 (= .cse271 percent)) (.cse262 (= .cse271 s)) (.cse245 (= .cse271 x)) (.cse252 (= .cse272 percent)) (.cse265 (= .cse272 s)) (.cse249 (= .cse272 x))) (let ((.cse111 (and (and (and (and (or (or (or (or (or (or (or .cse236 (= .cse268 s)) (= .cse268 x)) (= .cse268 3)) (= .cse268 4)) (= .cse268 5)) (= .cse268 6)) (= .cse268 255)) (or (or (or (or (or (or (or .cse240 .cse256) .cse237) (= .cse269 3)) (= .cse269 4)) (= .cse269 5)) (= .cse269 6)) (= .cse269 255))) (or (or (or (or (or (or (or .cse244 .cse259) .cse241) (= .cse270 3)) (= .cse270 4)) (= .cse270 5)) (= .cse270 6)) (= .cse270 255))) (or (or (or (or (or (or (or .cse248 .cse262) .cse245) (= .cse271 3)) (= .cse271 4)) (= .cse271 5)) (= .cse271 6)) (= .cse271 255))) (or (or (or (or (or (or (or .cse252 .cse265) .cse249) (= .cse272 3)) (= .cse272 4)) (= .cse272 5)) (= .cse272 6)) (= .cse272 255))))) (let ((.cse97 (and .cse96 .cse111))) (res .cse97 (let ((.cse253 (format 5))) (let ((.cse109 (let ((.cse264 (s_count 3))) (and (let ((.cse261 (s_count 2))) (and (let ((.cse258 (s_count 1))) (and (let ((.cse255 (s_count 0))) (and (let ((.cse254 (and .cse236 .cse256))) (and (=> .cse254 (= .cse255 1)) (=> (not .cse254) (= .cse255 0)))) (let ((.cse257 (and .cse240 .cse259))) (and (=> .cse257 (= .cse258 (+ .cse255 1))) (=> (not .cse257) (= .cse258 .cse255)))))) (let ((.cse260 (and .cse244 .cse262))) (and (=> .cse260 (= .cse261 (+ .cse258 1))) (=> (not .cse260) (= .cse261 .cse258)))))) (let ((.cse263 (and .cse248 .cse265))) (and (=> .cse263 (= .cse264 (+ .cse261 1))) (=> (not .cse263) (= .cse264 .cse261)))))) (let ((.cse266 (and .cse252 (= .cse253 s))) (.cse267 (s_count 4))) (and (=> .cse266 (= .cse267 (+ .cse264 1))) (=> (not .cse266) (= .cse267 .cse264)))))))) (let ((.cse98 (and .cse97 .cse109))) (res .cse98 (let ((.cse107 (let ((.cse247 (x_count 3))) (and (let ((.cse243 (x_count 2))) (and (let ((.cse239 (x_count 1))) (and (let ((.cse235 (x_count 0))) (and (let ((.cse234 (and .cse236 .cse237))) (and (=> .cse234 (= .cse235 1)) (=> (not .cse234) (= .cse235 0)))) (let ((.cse238 (and .cse240 .cse241))) (and (=> .cse238 (= .cse239 (+ .cse235 1))) (=> (not .cse238) (= .cse239 .cse235)))))) (let ((.cse242 (and .cse244 .cse245))) (and (=> .cse242 (= .cse243 (+ .cse239 1))) (=> (not .cse242) (= .cse243 .cse239)))))) (let ((.cse246 (and .cse248 .cse249))) (and (=> .cse246 (= .cse247 (+ .cse243 1))) (=> (not .cse246) (= .cse247 .cse243)))))) (let ((.cse250 (and .cse252 (= .cse253 x))) (.cse251 (x_count 4))) (and (=> .cse250 (= .cse251 (+ .cse247 1))) (=> (not .cse250) (= .cse251 .cse247)))))))) (let ((.cse99 (and .cse98 .cse107))) (res .cse99 (let ((.cse105 (and (and (and (and (and (not (= (format fmt1) percent)) (= (format (+ fmt1 1)) s)) (= (format arg1) adr_lo)) (= (format (+ arg1 1)) adr_medlo)) (= (format (+ arg1 2)) adr_medhi)) (= (format (+ arg1 3)) adr_hi)))) (let ((.cse100 (=> .cse99 .cse105))) (res .cse100 (=>+ 0 .cse100) (let ((.cse232 (- fmt0 distance))) (let ((.cse231 (= arg0 .cse232)) (.cse220 (- fmt_length 1)) (.cse167 (- fmt1 2))) (let ((.cse151 (- .cse167 fmt0)) (.cse218 (+ fmt0 .cse220)) (.cse230 (and .cse233 .cse231)) (.cse227 (>= arg1 fmt0))) (let ((.cse181 (- fmt_length 4)) (.cse224 (and .cse230 .cse227)) (.cse209 (< fmt1 .cse218)) (.cse159 (s_count .cse151)) (.cse124 (+ fmt0 0))) (let ((.cse137 (= fmt1 .cse124)) (.cse148 (x_count .cse151)) (.cse157 (* 4 .cse159)) (.cse190 (+ arg0 distance)) (.cse208 (and .cse224 .cse209)) (.cse202 (> fmt1 .cse200)) (.cse178 (+ distance .cse181))) (let ((.cse176 (+ arg0 .cse178)) (.cse197 (and .cse208 .cse202)) (.cse192 (>= arg1 .cse190)) (.cse155 (+ arg0 .cse157)) (.cse146 (* 4 .cse148)) (.cse134 (or .cse137 .cse136))) (let ((.cse131 (or .cse134 .cse133)) (.cse144 (+ .cse155 .cse146)) (.cse187 (and .cse197 .cse192)) (.cse171 (< arg1 .cse176))) (let ((.cse170 (and .cse187 .cse171)) (.cse143 (= arg1 .cse144)) (.cse118 (= arg1 .cse124)) (.cse128 (or .cse131 .cse130))) (let ((.cse125 (or .cse128 .cse127)) (.cse115 (or .cse118 .cse117)) (.cse142 (and .cse170 .cse143))) (let ((.cse141 (and .cse82 .cse142)) (.cse113 (and .cse125 .cse115))) (let ((.cse112 (and .cse141 .cse113))) (let ((.cse110 (and .cse112 .cse111))) (let ((.cse108 (and .cse110 .cse109))) (let ((.cse106 (and .cse108 .cse107))) (let ((.cse101 (=> .cse106 .cse105))) (let ((.cse103 (not .cse101))) (res .cse101 (let ((.cse102 (not .cse100))) (res .cse102 (res .cse103 (not+ .cse103) (let ((.cse104 (= .cse103 .cse102))) (res .cse104 (res (= .cse101 .cse100) (res (= .cse105 .cse105) (refl .cse105) (res (= .cse106 .cse99) (res (= .cse107 .cse107) (refl .cse107) (res (= .cse108 .cse98) (res (= .cse109 .cse109) (refl .cse109) (res (= .cse110 .cse97) (res (= .cse111 .cse111) (refl .cse111) (res (= .cse112 .cse96) (let ((.cse122 (= arg1 arg1)) (.cse139 (= fmt1 fmt1))) (let-proof ((.cse123 (refl arg1)) (.cse140 (refl fmt1))) (res (= .cse113 .cse114) (let ((.cse120 (= .cse124 fmt0))) (let-proof ((.cse121 (poly+ .cse124 fmt0))) (res (= .cse115 .cse116) (res (= .cse117 .cse117) (refl .cse117) (res (= .cse118 .cse119) (res .cse120 .cse121 (res .cse122 .cse123 (cong (= arg1 .cse124) (= arg1 fmt0)))) (cong (or .cse118 .cse117) (or .cse119 .cse117)))) (res (= .cse125 .cse126) (res (= .cse127 .cse127) (refl .cse127) (res (= .cse128 .cse129) (res (= .cse130 .cse130) (refl .cse130) (res (= .cse131 .cse132) (res (= .cse133 .cse133) (refl .cse133) (res (= .cse134 .cse135) (res (= .cse136 .cse136) (refl .cse136) (res (= .cse137 .cse138) (res .cse120 .cse121 (res .cse139 .cse140 (cong (= fmt1 .cse124) (= fmt1 fmt0)))) (cong (or .cse137 .cse136) (or .cse138 .cse136)))) (cong (or .cse134 .cse133) (or .cse135 .cse133)))) (cong (or .cse131 .cse130) (or .cse132 .cse130)))) (cong (or .cse128 .cse127) (or .cse129 .cse127)))) (cong (and .cse125 .cse115) (and .cse126 .cse116)))))) (res (= .cse141 .cse83) (res (= .cse142 .cse19) (let ((.cse165 (= fmt0 fmt0)) (.cse160 (= arg0 arg0))) (let-proof ((.cse166 (refl fmt0)) (.cse161 (refl arg0))) (res (= .cse143 .cse18) (res (= .cse144 .cse23) (let ((.cse156 (+ arg0 .cse158))) (let ((.cse145 (+ .cse156 .cse147))) (res (= .cse145 .cse23) (poly+ .cse145 .cse23) (res (= .cse144 .cse145) (let ((.cse149 (= .cse151 .cse152)) (.cse153 (= 4 4))) (let-proof ((.cse150 (let ((.cse163 (+ fmt1 (- 2)))) (let ((.cse162 (- .cse163 fmt0))) (res (= .cse162 .cse152) (res (= .cse95 .cse95) (refl .cse95) (res (= .cse163 .cse163) (refl .cse163) (let ((.cse164 (+ .cse163 .cse95))) (res (= .cse164 .cse164) (cong (+ .cse163 .cse95) (+ .cse163 .cse95)) (res (= .cse162 .cse164) (-def .cse163 fmt0) (res (= .cse164 .cse152) (poly+ .cse164 .cse152) (trans .cse162 .cse164 .cse164 .cse152))))))) (res (= .cse151 .cse162) (res .cse165 .cse166 (res (= .cse167 .cse163) (let ((.cse168 (* (- 1) 2))) (res (= .cse168 (- 2)) (poly* .cse168 (- 2)) (res .cse139 .cse140 (let ((.cse169 (+ fmt1 .cse168))) (res (= .cse169 .cse163) (cong (+ fmt1 .cse168) (+ fmt1 (- 2))) (res (= .cse167 .cse169) (-def fmt1 2) (trans .cse167 .cse169 .cse163))))))) (cong (- .cse167 fmt0) (- .cse163 fmt0)))) (trans .cse151 .cse162 .cse152)))))) (.cse154 (refl 4))) (res (= .cse146 .cse147) (res (= .cse148 .cse75) (res .cse149 .cse150 (cong (x_count .cse151) (x_count .cse152))) (res .cse153 .cse154 (cong (* 4 .cse148) (* 4 .cse75)))) (res (= .cse155 .cse156) (res (= .cse157 .cse158) (res (= .cse159 .cse74) (res .cse149 .cse150 (cong (s_count .cse151) (s_count .cse152))) (res .cse153 .cse154 (cong (* 4 .cse159) (* 4 .cse74)))) (res .cse160 .cse161 (cong (+ arg0 .cse157) (+ arg0 .cse158)))) (cong (+ .cse155 .cse146) (+ .cse156 .cse147)))))) (trans .cse144 .cse145 .cse23))))) (res .cse122 .cse123 (cong (= arg1 .cse144) (= arg1 .cse23)))) (res (= .cse170 .cse14) (let ((.cse184 (= fmt_length fmt_length))) (let-proof ((.cse185 (refl fmt_length))) (res (= .cse171 .cse6) (let ((.cse175 (+ arg0 distance fmt_length (- 4)))) (let ((.cse173 (< arg1 .cse175))) (let ((.cse172 (= .cse173 .cse6))) (res .cse172 (res .cse6 (res .cse173 (=+1 .cse172) (res .cse2 .cse7 (farkas 1 .cse173 1 .cse2))) (res .cse173 (let ((.cse174 (<= .cse175 arg1))) (res .cse174 (total .cse175 arg1) (res .cse2 (res .cse10 .cse11 (farkas 1 .cse174 1 .cse10)) .cse16))) (=+2 .cse172))) (res (= .cse171 .cse173) (res (= .cse176 .cse175) (let ((.cse179 (+ distance fmt_length (- 4)))) (let ((.cse177 (+ arg0 .cse179))) (res (= .cse177 .cse175) (poly+ .cse177 .cse175) (res (= .cse176 .cse177) (res (= .cse178 .cse179) (let ((.cse182 (+ fmt_length (- 4)))) (let ((.cse180 (+ distance .cse182))) (res (= .cse180 .cse179) (poly+ .cse180 .cse179) (res (= .cse178 .cse180) (res (= .cse181 .cse182) (let ((.cse183 (* (- 1) 4))) (res (= .cse183 (- 4)) (poly* .cse183 (- 4)) (res .cse184 .cse185 (let ((.cse186 (+ fmt_length .cse183))) (res (= .cse186 .cse182) (cong (+ fmt_length .cse183) (+ fmt_length (- 4))) (res (= .cse181 .cse186) (-def fmt_length 4) (trans .cse181 .cse186 .cse182))))))) (res (= distance distance) (refl distance) (cong (+ distance .cse181) (+ distance .cse182)))) (trans .cse178 .cse180 .cse179))))) (res .cse160 .cse161 (cong (+ arg0 .cse178) (+ arg0 .cse179)))) (trans .cse176 .cse177 .cse175))))) (res .cse122 .cse123 (cong (< arg1 .cse176) (< arg1 .cse175)))) (trans .cse171 .cse173 .cse6)))))) (res (= .cse187 .cse94) (let ((.cse188 (= .cse192 .cse191))) (res .cse188 (let ((.cse193 (<= .cse190 arg1))) (let ((.cse189 (= .cse192 .cse193))) (res .cse189 (>=def arg1 .cse190) (res .cse191 (res .cse192 (=+1 .cse188) (res .cse193 (=-2 .cse189) (let ((.cse194 (< 0 .cse195))) (res .cse194 (total .cse195 0) (farkas 1 .cse193 1 .cse194))))) (res .cse192 (res .cse193 (let ((.cse196 (< arg1 .cse190))) (res .cse196 (total .cse190 arg1) (farkas 1 .cse196 1 .cse191))) (=-1 .cse189)) (=+2 .cse188)))))) (res (= .cse197 .cse93) (let ((.cse198 (= .cse202 .cse201))) (res .cse198 (let ((.cse203 (< .cse200 fmt1))) (let ((.cse199 (= .cse202 .cse203))) (res .cse199 (>def fmt1 .cse200) (res .cse201 (res .cse202 (=+1 .cse198) (res .cse203 (=-2 .cse199) (res .cse204 (not+ .cse201) (farkas 1 .cse203 1 .cse204)))) (res .cse202 (res .cse203 (let ((.cse205 (<= fmt1 .cse200))) (res .cse205 (total fmt1 .cse200) (res .cse204 (let ((.cse206 (< 0 .cse207))) (res .cse206 (total .cse207 0) (farkas 1 .cse205 1 .cse206))) (not- .cse201)))) (=-1 .cse199)) (=+2 .cse198)))))) (res (= .cse208 .cse92) (res (= .cse209 .cse210) (let ((.cse215 (+ fmt0 fmt_length (- 1)))) (let ((.cse212 (< fmt1 .cse215))) (let ((.cse211 (= .cse212 .cse210))) (res .cse211 (res .cse210 (res .cse212 (=+1 .cse211) (res .cse213 (not+ .cse210) (farkas 1 .cse212 1 .cse213))) (res .cse212 (let ((.cse214 (<= .cse215 fmt1))) (res .cse214 (total .cse215 fmt1) (res .cse213 (let ((.cse216 (< 0 .cse217))) (res .cse216 (total .cse217 0) (farkas 1 .cse214 1 .cse216))) (not- .cse210)))) (=+2 .cse211))) (res (= .cse209 .cse212) (res (= .cse218 .cse215) (let ((.cse221 (+ fmt_length (- 1)))) (let ((.cse219 (+ fmt0 .cse221))) (res (= .cse219 .cse215) (poly+ .cse219 .cse215) (res (= .cse218 .cse219) (res (= .cse220 .cse221) (let ((.cse222 (* (- 1) 1))) (res (= .cse222 (- 1)) (poly* .cse222 (- 1)) (res .cse184 .cse185 (let ((.cse223 (+ fmt_length .cse222))) (res (= .cse223 .cse221) (cong (+ fmt_length .cse222) (+ fmt_length (- 1))) (res (= .cse220 .cse223) (-def fmt_length 1) (trans .cse220 .cse223 .cse221))))))) (res .cse165 .cse166 (cong (+ fmt0 .cse220) (+ fmt0 .cse221)))) (trans .cse218 .cse219 .cse215))))) (res .cse139 .cse140 (cong (< fmt1 .cse218) (< fmt1 .cse215)))) (trans .cse209 .cse212 .cse210)))))) (res (= .cse224 .cse46) (let ((.cse225 (= .cse227 .cse85))) (res .cse225 (let ((.cse228 (<= fmt0 arg1))) (let ((.cse226 (= .cse227 .cse228))) (res .cse226 (>=def arg1 fmt0) (res .cse85 (res .cse227 (=+1 .cse225) (res .cse228 (=-2 .cse226) (res .cse88 .cse89 (farkas 1 .cse228 1 .cse88)))) (res .cse227 (res .cse228 (let ((.cse229 (< arg1 fmt0))) (res .cse229 (total fmt0 arg1) (farkas 1 .cse229 1 .cse85))) (=-1 .cse226)) (=+2 .cse225)))))) (res (= .cse230 .cse45) (res (= .cse231 .cse44) (res (= .cse232 .cse50) (-def fmt0 distance) (res .cse160 .cse161 (cong (= arg0 .cse232) (= arg0 .cse50)))) (res (= .cse233 .cse233) (refl .cse233) (cong (and .cse233 .cse231) (and .cse233 .cse44)))) (cong (and .cse230 .cse227) (and .cse45 .cse85))))) (cong (and .cse224 .cse209) (and .cse46 .cse210)))) (cong (and .cse208 .cse202) (and .cse92 .cse201))))) (cong (and .cse197 .cse192) (and .cse93 .cse191))))) (cong (and .cse187 .cse171) (and .cse94 .cse6)))))) (cong (and .cse170 .cse143) (and .cse14 .cse18)))))) (res (= .cse82 .cse82) (refl .cse82) (cong (and .cse82 .cse142) (and .cse82 .cse19)))) (cong (and .cse141 .cse113) (and .cse83 .cse114)))))) (cong (and .cse112 .cse111) (and .cse96 .cse111)))) (cong (and .cse110 .cse109) (and .cse97 .cse109)))) (cong (and .cse108 .cse107) (and .cse98 .cse107)))) (cong (=> .cse106 .cse105) (=> .cse99 .cse105)))) (cong (not .cse101) (not .cse100))) (=-2 .cse104)))) (not- .cse102))) (res .cse103 (assume .cse103) (not- .cse103)))))))))))))))))))))) (and- 0 .cse99)))) (and- 0 .cse98))))) (and- 0 .cse97)))))) (and- 0 .cse96)))))))))))) (let-proof ((.cse20 (res .cse83 .cse84 (and- 1 .cse83)))) (let ((.cse91 (+ arg1 .cse95 1))) (let-proof ((.cse15 (res .cse19 .cse20 (and- 0 .cse19)))) (let ((.cse72 (<= 1 .cse91)) (.cse0 (<= .cse91 0))) (let-proof ((.cse47 (res .cse92 (res .cse93 (res .cse94 (res .cse14 .cse15 (and- 0 .cse14)) (and- 0 .cse94)) (and- 0 .cse93)) (and- 0 .cse92))) (.cse73 (total-int .cse91 0))) (res .cse0 (let ((.cse76 (* (- 1) arg0))) (let ((.cse13 (+ arg1 .cse76 .cse77 (* (- 1) fmt_length) 5))) (let ((.cse1 (<= .cse13 0))) (res .cse1 (! (res .cse2 (let ((.cse3 (not .cse1))) (let-proof ((.cse4 (not+ .cse3))) (res .cse3 .cse4 (let ((.cse5 (not .cse3))) (res .cse5 (res .cse6 .cse7 (let ((.cse8 (= .cse6 .cse5))) (res .cse8 (let ((.cse9 (= .cse2 .cse3))) (res .cse9 (res .cse3 (res .cse2 (=+1 .cse9) (res .cse1 .cse4 (farkas 1 .cse2 1 .cse1))) (res .cse2 (res .cse10 .cse11 (res .cse1 (let ((.cse12 (<= 1 .cse13))) (res .cse12 (total-int .cse13 0) (farkas 1 .cse10 1 .cse12))) (not- .cse3))) (=+2 .cse9))) (cong (not .cse2) (not .cse3)))) (=-2 .cse8)))) (not- .cse5)))))) (res .cse14 .cse15 (res .cse6 (and- 1 .cse14) .cse16))) :proves (+ .cse1) :input) (let ((.cse26 (+ arg1 .cse76 (* (- 4) .cse74) (* (- 4) .cse75)))) (let ((.cse27 (= 0 .cse26)) (.cse17 (= .cse26 0))) (let-proof ((.cse28 (symm 0 .cse26))) (res .cse17 (! (res .cse18 (res .cse19 .cse20 (and- 1 .cse19)) (let ((.cse21 (= .cse18 .cse17))) (res .cse21 (res .cse17 (res .cse18 (=+1 .cse21) (let ((.cse22 (= .cse23 arg1))) (res .cse22 (symm .cse23 arg1) (let ((.cse24 (< .cse26 0))) (res .cse24 (let ((.cse25 (< 0 .cse26))) (res .cse25 (trichotomy .cse26 0) (farkas 1 .cse18 1 .cse25))) (farkas 1 .cse22 1 .cse24)))))) (res .cse18 (res .cse27 .cse28 (let ((.cse29 (< arg1 .cse23))) (res .cse29 (let ((.cse30 (< .cse23 arg1))) (res .cse30 (trichotomy arg1 .cse23) (farkas 1 .cse17 1 .cse30))) (farkas 1 .cse27 1 .cse29)))) (=+2 .cse21))) (=-2 .cse21)))) :proves (+ .cse17) :input) (let ((.cse39 (+ fmt_length (- 5)))) (let ((.cse31 (= .cse39 0))) (let-proof ((.cse34 (res .cse78 (res .cse79 (res .cse80 (res .cse81 (res .cse82 (res .cse83 .cse84 (and- 0 .cse83)) (and- 0 .cse82)) (and- 0 .cse81)) (and- 0 .cse80)) (and- 0 .cse79)) (and- 0 .cse78)))) (res .cse31 (! (res .cse32 (res .cse33 .cse34 (and- 1 .cse33)) (let ((.cse35 (= .cse32 .cse31))) (res .cse35 (res .cse31 (res .cse32 (=+1 .cse35) (let ((.cse36 (= 5 fmt_length))) (res .cse36 (symm 5 fmt_length) (let ((.cse37 (< .cse39 0))) (res .cse37 (let ((.cse38 (< 0 .cse39))) (res .cse38 (trichotomy .cse39 0) (farkas 1 .cse32 1 .cse38))) (farkas 1 .cse36 1 .cse37)))))) (res .cse32 (let ((.cse40 (= 0 .cse39))) (res .cse40 (symm 0 .cse39) (let ((.cse41 (< fmt_length 5))) (res .cse41 (let ((.cse42 (< 5 fmt_length))) (res .cse42 (trichotomy fmt_length 5) (farkas 1 .cse31 1 .cse42))) (farkas 1 .cse40 1 .cse41))))) (=+2 .cse35))) (=-2 .cse35)))) :proves (+ .cse31) :input) (let ((.cse53 (+ fmt0 .cse76 .cse77))) (let ((.cse43 (= .cse53 0)) (.cse54 (= 0 .cse53))) (let-proof ((.cse55 (symm 0 .cse53))) (res .cse43 (! (res .cse44 (res .cse45 (res .cse46 .cse47 (and- 0 .cse46)) (and- 1 .cse45)) (let ((.cse48 (= .cse44 .cse43))) (res .cse48 (res .cse43 (res .cse44 (=+1 .cse48) (let ((.cse49 (= .cse50 arg0))) (res .cse49 (symm .cse50 arg0) (let ((.cse51 (< .cse53 0))) (res .cse51 (let ((.cse52 (< 0 .cse53))) (res .cse52 (trichotomy .cse53 0) (farkas 1 .cse49 1 .cse52))) (farkas 1 .cse44 1 .cse51)))))) (res .cse44 (res .cse54 .cse55 (let ((.cse56 (< arg0 .cse50))) (res .cse56 (let ((.cse57 (< .cse50 arg0))) (res .cse57 (trichotomy arg0 .cse50) (farkas 1 .cse54 1 .cse57))) (farkas 1 .cse43 1 .cse56)))) (=+2 .cse48))) (=-2 .cse48)))) :proves (+ .cse43) :input) (let ((.cse64 (+ distance (- 15)))) (let ((.cse58 (= .cse64 0)) (.cse65 (= 0 .cse64))) (let-proof ((.cse66 (symm 0 .cse64))) (res .cse58 (! (res .cse59 (res .cse33 .cse34 (and- 0 .cse33)) (let ((.cse60 (= .cse59 .cse58))) (res .cse60 (res .cse58 (res .cse59 (=+1 .cse60) (let ((.cse61 (= 15 distance))) (res .cse61 (symm 15 distance) (let ((.cse62 (< .cse64 0))) (res .cse62 (let ((.cse63 (< 0 .cse64))) (res .cse63 (trichotomy .cse64 0) (farkas 1 .cse59 1 .cse63))) (farkas 1 .cse61 1 .cse62)))))) (res .cse59 (res .cse65 .cse66 (let ((.cse67 (< distance 15))) (res .cse67 (let ((.cse68 (< 15 distance))) (res .cse68 (trichotomy distance 15) (farkas 1 .cse58 1 .cse68))) (farkas 1 .cse65 1 .cse67)))) (=+2 .cse60))) (=-2 .cse60)))) :proves (+ .cse58) :input) (let ((.cse71 (+ .cse74 .cse75 (- 3)))) (let ((.cse69 (<= .cse71 0))) (res .cse69 (! (let ((.cse70 (<= 1 .cse71))) (res .cse70 (total-int .cse71 0) (res .cse27 .cse28 (farkas 1 .cse58 1 .cse31 1 .cse27 1 .cse1 4 .cse70)))) :proves (- .cse58 - .cse31 - .cse17 - .cse1 + .cse69) :LA (1 1 (- 1) 1 (- 4))) (! (res .cse72 .cse73 (res .cse54 .cse55 (res .cse65 .cse66 (farkas 4 .cse69 1 .cse65 1 .cse54 1 .cse17 1 .cse72)))) :proves (- .cse69 - .cse58 - .cse43 - .cse17 + .cse0) :LA (4 (- 1) (- 1) 1 (- 1)))))))))))))))))))))))))) (! (res .cse85 (res .cse46 .cse47 (and- 1 .cse46)) (let ((.cse86 (not .cse0))) (let-proof ((.cse90 (not- .cse86))) (res .cse86 (let ((.cse87 (= .cse85 .cse86))) (res .cse87 (res .cse86 (res .cse85 (=+1 .cse87) (res .cse0 (not+ .cse86) (farkas 1 .cse85 1 .cse0))) (res .cse85 (res .cse88 .cse89 (res .cse0 (res .cse72 .cse73 (farkas 1 .cse88 1 .cse72)) .cse90)) (=+2 .cse87))) (=-2 .cse87))) .cse90)))) :proves (- .cse0) :input)))))))))))))))))))) :proves () :rup)
