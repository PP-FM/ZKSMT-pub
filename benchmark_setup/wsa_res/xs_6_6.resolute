unsat
(! (let ((.cse38 (* (- 1) distance))) (let ((.cse47 (+ fmt0 .cse38)) (.cse292 (* (- 1) arg1))) (let ((.cse69 (* (- 1) fmt0)) (.cse290 (+ fmt0 .cse292)) (.cse241 (= fmt0 0)) (.cse41 (= arg0 .cse47)) (.cse225 (+ fmt0 fmt_length (* (- 1) fmt1) (- 1)))) (let ((.cse72 (= distance 6)) (.cse22 (= fmt_length 6)) (.cse221 (<= .cse225 0)) (.cse42 (and .cse241 .cse41)) (.cse59 (<= .cse290 0)) (.cse215 (+ fmt1 .cse69 (- 1)))) (let ((.cse212 (<= .cse215 0)) (.cse43 (and .cse42 .cse59)) (.cse218 (not .cse221)) (.cse160 (+ fmt1 .cse69 (- 2))) (.cse23 (and .cse72 .cse22))) (let ((.cse91 (and .cse23 (= adr_lo 3))) (.cse97 (x_count .cse160)) (.cse96 (s_count .cse160)) (.cse203 (+ arg0 distance .cse292)) (.cse66 (and .cse43 .cse218)) (.cse209 (not .cse212)) (.cse291 (+ arg0 distance fmt_length .cse292 (- 4)))) (let ((.cse2 (<= .cse291 0)) (.cse67 (and .cse66 .cse209)) (.cse199 (<= .cse203 0)) (.cse166 (* 4 .cse96)) (.cse155 (* 4 .cse97)) (.cse92 (and .cse91 (= adr_medlo 4)))) (let ((.cse93 (and .cse92 (= adr_medhi 5))) (.cse83 (+ arg0 .cse166 .cse155)) (.cse68 (and .cse67 .cse199)) (.cse6 (not .cse2))) (let ((.cse14 (and .cse68 .cse6)) (.cse80 (= arg1 .cse83)) (.cse94 (and .cse93 (= adr_hi 6)))) (let ((.cse95 (and .cse94 (and (and (= percent 37) (= s 115)) (= x 120)))) (.cse70 (and .cse14 .cse80))) (let ((.cse10 (< 0 .cse291)) (.cse62 (< 0 .cse290)) (.cse89 (and .cse95 .cse70)) (.cse37 (* (- 1) arg0))) (let-proof ((.cse7 (not+ .cse6)) (.cse11 (total .cse291 0)) (.cse16 (not- .cse6)) (.cse63 (total .cse290 0))) (let ((.cse86 (+ arg1 .cse37 (* (- 4) .cse96) (* (- 4) .cse97))) (.cse77 (+ distance (- 6)))) (let-proof ((.cse90 (let ((.cse208 (+ fmt0 1))) (let ((.cse289 (+ fmt0 2)) (.cse146 (= fmt1 fmt0)) (.cse144 (= fmt1 .cse208))) (let ((.cse143 (or .cse146 .cse144)) (.cse141 (= fmt1 .cse289))) (let ((.cse140 (or .cse143 .cse141)) (.cse138 (= fmt1 (+ fmt0 3)))) (let ((.cse137 (or .cse140 .cse138)) (.cse135 (= fmt1 (+ fmt0 4))) (.cse124 (= arg1 fmt0)) (.cse122 (= arg1 .cse208))) (let ((.cse121 (or .cse124 .cse122)) (.cse119 (= arg1 .cse289)) (.cse134 (or .cse137 .cse135)) (.cse132 (= fmt1 (+ fmt0 5)))) (let ((.cse131 (or .cse134 .cse132)) (.cse118 (or .cse121 .cse119))) (let ((.cse116 (and .cse131 .cse118))) (let ((.cse98 (and .cse89 .cse116))) (res .cse98 (let ((.cse288 (format 5)) (.cse287 (format 4)) (.cse286 (format 3)) (.cse285 (format 2)) (.cse284 (format 1)) (.cse283 (format 0))) (let ((.cse244 (= .cse283 percent)) (.cse248 (= .cse284 percent)) (.cse268 (= .cse284 s)) (.cse245 (= .cse284 x)) (.cse252 (= .cse285 percent)) (.cse271 (= .cse285 s)) (.cse249 (= .cse285 x)) (.cse256 (= .cse286 percent)) (.cse274 (= .cse286 s)) (.cse253 (= .cse286 x)) (.cse260 (= .cse287 percent)) (.cse277 (= .cse287 s)) (.cse257 (= .cse287 x)) (.cse264 (= .cse288 percent)) (.cse280 (= .cse288 s)) (.cse261 (= .cse288 x))) (let ((.cse113 (and (and (and (and (and (or (or (or (or (or (or (or .cse244 (= .cse283 s)) (= .cse283 x)) (= .cse283 3)) (= .cse283 4)) (= .cse283 5)) (= .cse283 6)) (= .cse283 255)) (or (or (or (or (or (or (or .cse248 .cse268) .cse245) (= .cse284 3)) (= .cse284 4)) (= .cse284 5)) (= .cse284 6)) (= .cse284 255))) (or (or (or (or (or (or (or .cse252 .cse271) .cse249) (= .cse285 3)) (= .cse285 4)) (= .cse285 5)) (= .cse285 6)) (= .cse285 255))) (or (or (or (or (or (or (or .cse256 .cse274) .cse253) (= .cse286 3)) (= .cse286 4)) (= .cse286 5)) (= .cse286 6)) (= .cse286 255))) (or (or (or (or (or (or (or .cse260 .cse277) .cse257) (= .cse287 3)) (= .cse287 4)) (= .cse287 5)) (= .cse287 6)) (= .cse287 255))) (or (or (or (or (or (or (or .cse264 .cse280) .cse261) (= .cse288 3)) (= .cse288 4)) (= .cse288 5)) (= .cse288 6)) (= .cse288 255))))) (let ((.cse99 (and .cse98 .cse113))) (res .cse99 (let ((.cse265 (format 6))) (let ((.cse111 (let ((.cse279 (s_count 4))) (and (let ((.cse276 (s_count 3))) (and (let ((.cse273 (s_count 2))) (and (let ((.cse270 (s_count 1))) (and (let ((.cse267 (s_count 0))) (and (let ((.cse266 (and .cse244 .cse268))) (and (=> .cse266 (= .cse267 1)) (=> (not .cse266) (= .cse267 0)))) (let ((.cse269 (and .cse248 .cse271))) (and (=> .cse269 (= .cse270 (+ .cse267 1))) (=> (not .cse269) (= .cse270 .cse267)))))) (let ((.cse272 (and .cse252 .cse274))) (and (=> .cse272 (= .cse273 (+ .cse270 1))) (=> (not .cse272) (= .cse273 .cse270)))))) (let ((.cse275 (and .cse256 .cse277))) (and (=> .cse275 (= .cse276 (+ .cse273 1))) (=> (not .cse275) (= .cse276 .cse273)))))) (let ((.cse278 (and .cse260 .cse280))) (and (=> .cse278 (= .cse279 (+ .cse276 1))) (=> (not .cse278) (= .cse279 .cse276)))))) (let ((.cse281 (and .cse264 (= .cse265 s))) (.cse282 (s_count 5))) (and (=> .cse281 (= .cse282 (+ .cse279 1))) (=> (not .cse281) (= .cse282 .cse279)))))))) (let ((.cse100 (and .cse99 .cse111))) (res .cse100 (let ((.cse109 (let ((.cse259 (x_count 4))) (and (let ((.cse255 (x_count 3))) (and (let ((.cse251 (x_count 2))) (and (let ((.cse247 (x_count 1))) (and (let ((.cse243 (x_count 0))) (and (let ((.cse242 (and .cse244 .cse245))) (and (=> .cse242 (= .cse243 1)) (=> (not .cse242) (= .cse243 0)))) (let ((.cse246 (and .cse248 .cse249))) (and (=> .cse246 (= .cse247 (+ .cse243 1))) (=> (not .cse246) (= .cse247 .cse243)))))) (let ((.cse250 (and .cse252 .cse253))) (and (=> .cse250 (= .cse251 (+ .cse247 1))) (=> (not .cse250) (= .cse251 .cse247)))))) (let ((.cse254 (and .cse256 .cse257))) (and (=> .cse254 (= .cse255 (+ .cse251 1))) (=> (not .cse254) (= .cse255 .cse251)))))) (let ((.cse258 (and .cse260 .cse261))) (and (=> .cse258 (= .cse259 (+ .cse255 1))) (=> (not .cse258) (= .cse259 .cse255)))))) (let ((.cse262 (and .cse264 (= .cse265 x))) (.cse263 (x_count 5))) (and (=> .cse262 (= .cse263 (+ .cse259 1))) (=> (not .cse262) (= .cse263 .cse259)))))))) (let ((.cse101 (and .cse100 .cse109))) (res .cse101 (let ((.cse107 (and (and (and (and (and (not (= (format fmt1) percent)) (= (format (+ fmt1 1)) s)) (= (format arg1) adr_lo)) (= (format (+ arg1 1)) adr_medlo)) (= (format (+ arg1 2)) adr_medhi)) (= (format (+ arg1 3)) adr_hi)))) (let ((.cse102 (=> .cse101 .cse107))) (res .cse102 (=>+ 0 .cse102) (let ((.cse240 (- fmt0 distance))) (let ((.cse239 (= arg0 .cse240)) (.cse228 (- fmt_length 1)) (.cse175 (- fmt1 2))) (let ((.cse129 (+ fmt0 0)) (.cse159 (- .cse175 fmt0)) (.cse226 (+ fmt0 .cse228)) (.cse238 (and .cse241 .cse239)) (.cse235 (>= arg1 fmt0))) (let ((.cse189 (- fmt_length 4)) (.cse232 (and .cse238 .cse235)) (.cse217 (< fmt1 .cse226)) (.cse167 (s_count .cse159)) (.cse145 (= fmt1 .cse129))) (let ((.cse142 (or .cse145 .cse144)) (.cse156 (x_count .cse159)) (.cse165 (* 4 .cse167)) (.cse198 (+ arg0 distance)) (.cse216 (and .cse232 .cse217)) (.cse210 (> fmt1 .cse208)) (.cse186 (+ distance .cse189))) (let ((.cse184 (+ arg0 .cse186)) (.cse205 (and .cse216 .cse210)) (.cse200 (>= arg1 .cse198)) (.cse163 (+ arg0 .cse165)) (.cse154 (* 4 .cse156)) (.cse139 (or .cse142 .cse141))) (let ((.cse136 (or .cse139 .cse138)) (.cse123 (= arg1 .cse129)) (.cse152 (+ .cse163 .cse154)) (.cse195 (and .cse205 .cse200)) (.cse179 (< arg1 .cse184))) (let ((.cse178 (and .cse195 .cse179)) (.cse151 (= arg1 .cse152)) (.cse120 (or .cse123 .cse122)) (.cse133 (or .cse136 .cse135))) (let ((.cse130 (or .cse133 .cse132)) (.cse117 (or .cse120 .cse119)) (.cse150 (and .cse178 .cse151))) (let ((.cse149 (and .cse95 .cse150)) (.cse115 (and .cse130 .cse117))) (let ((.cse114 (and .cse149 .cse115))) (let ((.cse112 (and .cse114 .cse113))) (let ((.cse110 (and .cse112 .cse111))) (let ((.cse108 (and .cse110 .cse109))) (let ((.cse103 (=> .cse108 .cse107))) (let ((.cse105 (not .cse103))) (res .cse103 (let ((.cse104 (not .cse102))) (res .cse104 (res .cse105 (not+ .cse105) (let ((.cse106 (= .cse105 .cse104))) (res .cse106 (res (= .cse103 .cse102) (res (= .cse107 .cse107) (refl .cse107) (res (= .cse108 .cse101) (res (= .cse109 .cse109) (refl .cse109) (res (= .cse110 .cse100) (res (= .cse111 .cse111) (refl .cse111) (res (= .cse112 .cse99) (res (= .cse113 .cse113) (refl .cse113) (res (= .cse114 .cse98) (let ((.cse127 (= arg1 arg1)) (.cse147 (= fmt1 fmt1))) (let-proof ((.cse128 (refl arg1)) (.cse148 (refl fmt1))) (res (= .cse115 .cse116) (let ((.cse125 (= .cse129 fmt0))) (let-proof ((.cse126 (poly+ .cse129 fmt0))) (res (= .cse117 .cse118) (res (= .cse119 .cse119) (refl .cse119) (res (= .cse120 .cse121) (res (= .cse122 .cse122) (refl .cse122) (res (= .cse123 .cse124) (res .cse125 .cse126 (res .cse127 .cse128 (cong (= arg1 .cse129) (= arg1 fmt0)))) (cong (or .cse123 .cse122) (or .cse124 .cse122)))) (cong (or .cse120 .cse119) (or .cse121 .cse119)))) (res (= .cse130 .cse131) (res (= .cse132 .cse132) (refl .cse132) (res (= .cse133 .cse134) (res (= .cse135 .cse135) (refl .cse135) (res (= .cse136 .cse137) (res (= .cse138 .cse138) (refl .cse138) (res (= .cse139 .cse140) (res (= .cse141 .cse141) (refl .cse141) (res (= .cse142 .cse143) (res (= .cse144 .cse144) (refl .cse144) (res (= .cse145 .cse146) (res .cse125 .cse126 (res .cse147 .cse148 (cong (= fmt1 .cse129) (= fmt1 fmt0)))) (cong (or .cse145 .cse144) (or .cse146 .cse144)))) (cong (or .cse142 .cse141) (or .cse143 .cse141)))) (cong (or .cse139 .cse138) (or .cse140 .cse138)))) (cong (or .cse136 .cse135) (or .cse137 .cse135)))) (cong (or .cse133 .cse132) (or .cse134 .cse132)))) (cong (and .cse130 .cse117) (and .cse131 .cse118)))))) (res (= .cse149 .cse89) (res (= .cse150 .cse70) (let ((.cse173 (= fmt0 fmt0)) (.cse168 (= arg0 arg0))) (let-proof ((.cse174 (refl fmt0)) (.cse169 (refl arg0))) (res (= .cse151 .cse80) (res (= .cse152 .cse83) (let ((.cse164 (+ arg0 .cse166))) (let ((.cse153 (+ .cse164 .cse155))) (res (= .cse153 .cse83) (poly+ .cse153 .cse83) (res (= .cse152 .cse153) (let ((.cse157 (= .cse159 .cse160)) (.cse161 (= 4 4))) (let-proof ((.cse158 (let ((.cse171 (+ fmt1 (- 2)))) (let ((.cse170 (- .cse171 fmt0))) (res (= .cse170 .cse160) (res (= .cse69 .cse69) (refl .cse69) (res (= .cse171 .cse171) (refl .cse171) (let ((.cse172 (+ .cse171 .cse69))) (res (= .cse172 .cse172) (cong (+ .cse171 .cse69) (+ .cse171 .cse69)) (res (= .cse170 .cse172) (-def .cse171 fmt0) (res (= .cse172 .cse160) (poly+ .cse172 .cse160) (trans .cse170 .cse172 .cse172 .cse160))))))) (res (= .cse159 .cse170) (res .cse173 .cse174 (res (= .cse175 .cse171) (let ((.cse176 (* (- 1) 2))) (res (= .cse176 (- 2)) (poly* .cse176 (- 2)) (res .cse147 .cse148 (let ((.cse177 (+ fmt1 .cse176))) (res (= .cse177 .cse171) (cong (+ fmt1 .cse176) (+ fmt1 (- 2))) (res (= .cse175 .cse177) (-def fmt1 2) (trans .cse175 .cse177 .cse171))))))) (cong (- .cse175 fmt0) (- .cse171 fmt0)))) (trans .cse159 .cse170 .cse160)))))) (.cse162 (refl 4))) (res (= .cse154 .cse155) (res (= .cse156 .cse97) (res .cse157 .cse158 (cong (x_count .cse159) (x_count .cse160))) (res .cse161 .cse162 (cong (* 4 .cse156) (* 4 .cse97)))) (res (= .cse163 .cse164) (res (= .cse165 .cse166) (res (= .cse167 .cse96) (res .cse157 .cse158 (cong (s_count .cse159) (s_count .cse160))) (res .cse161 .cse162 (cong (* 4 .cse167) (* 4 .cse96)))) (res .cse168 .cse169 (cong (+ arg0 .cse165) (+ arg0 .cse166)))) (cong (+ .cse163 .cse154) (+ .cse164 .cse155)))))) (trans .cse152 .cse153 .cse83))))) (res .cse127 .cse128 (cong (= arg1 .cse152) (= arg1 .cse83)))) (res (= .cse178 .cse14) (let ((.cse192 (= fmt_length fmt_length))) (let-proof ((.cse193 (refl fmt_length))) (res (= .cse179 .cse6) (let ((.cse183 (+ arg0 distance fmt_length (- 4)))) (let ((.cse181 (< arg1 .cse183))) (let ((.cse180 (= .cse181 .cse6))) (res .cse180 (res .cse6 (res .cse181 (=+1 .cse180) (res .cse2 .cse7 (farkas 1 .cse181 1 .cse2))) (res .cse181 (let ((.cse182 (<= .cse183 arg1))) (res .cse182 (total .cse183 arg1) (res .cse2 (res .cse10 .cse11 (farkas 1 .cse182 1 .cse10)) .cse16))) (=+2 .cse180))) (res (= .cse179 .cse181) (res (= .cse184 .cse183) (let ((.cse187 (+ distance fmt_length (- 4)))) (let ((.cse185 (+ arg0 .cse187))) (res (= .cse185 .cse183) (poly+ .cse185 .cse183) (res (= .cse184 .cse185) (res (= .cse186 .cse187) (let ((.cse190 (+ fmt_length (- 4)))) (let ((.cse188 (+ distance .cse190))) (res (= .cse188 .cse187) (poly+ .cse188 .cse187) (res (= .cse186 .cse188) (res (= .cse189 .cse190) (let ((.cse191 (* (- 1) 4))) (res (= .cse191 (- 4)) (poly* .cse191 (- 4)) (res .cse192 .cse193 (let ((.cse194 (+ fmt_length .cse191))) (res (= .cse194 .cse190) (cong (+ fmt_length .cse191) (+ fmt_length (- 4))) (res (= .cse189 .cse194) (-def fmt_length 4) (trans .cse189 .cse194 .cse190))))))) (res (= distance distance) (refl distance) (cong (+ distance .cse189) (+ distance .cse190)))) (trans .cse186 .cse188 .cse187))))) (res .cse168 .cse169 (cong (+ arg0 .cse186) (+ arg0 .cse187)))) (trans .cse184 .cse185 .cse183))))) (res .cse127 .cse128 (cong (< arg1 .cse184) (< arg1 .cse183)))) (trans .cse179 .cse181 .cse6)))))) (res (= .cse195 .cse68) (let ((.cse196 (= .cse200 .cse199))) (res .cse196 (let ((.cse201 (<= .cse198 arg1))) (let ((.cse197 (= .cse200 .cse201))) (res .cse197 (>=def arg1 .cse198) (res .cse199 (res .cse200 (=+1 .cse196) (res .cse201 (=-2 .cse197) (let ((.cse202 (< 0 .cse203))) (res .cse202 (total .cse203 0) (farkas 1 .cse201 1 .cse202))))) (res .cse200 (res .cse201 (let ((.cse204 (< arg1 .cse198))) (res .cse204 (total .cse198 arg1) (farkas 1 .cse204 1 .cse199))) (=-1 .cse197)) (=+2 .cse196)))))) (res (= .cse205 .cse67) (let ((.cse206 (= .cse210 .cse209))) (res .cse206 (let ((.cse211 (< .cse208 fmt1))) (let ((.cse207 (= .cse210 .cse211))) (res .cse207 (>def fmt1 .cse208) (res .cse209 (res .cse210 (=+1 .cse206) (res .cse211 (=-2 .cse207) (res .cse212 (not+ .cse209) (farkas 1 .cse211 1 .cse212)))) (res .cse210 (res .cse211 (let ((.cse213 (<= fmt1 .cse208))) (res .cse213 (total fmt1 .cse208) (res .cse212 (let ((.cse214 (< 0 .cse215))) (res .cse214 (total .cse215 0) (farkas 1 .cse213 1 .cse214))) (not- .cse209)))) (=-1 .cse207)) (=+2 .cse206)))))) (res (= .cse216 .cse66) (res (= .cse217 .cse218) (let ((.cse223 (+ fmt0 fmt_length (- 1)))) (let ((.cse220 (< fmt1 .cse223))) (let ((.cse219 (= .cse220 .cse218))) (res .cse219 (res .cse218 (res .cse220 (=+1 .cse219) (res .cse221 (not+ .cse218) (farkas 1 .cse220 1 .cse221))) (res .cse220 (let ((.cse222 (<= .cse223 fmt1))) (res .cse222 (total .cse223 fmt1) (res .cse221 (let ((.cse224 (< 0 .cse225))) (res .cse224 (total .cse225 0) (farkas 1 .cse222 1 .cse224))) (not- .cse218)))) (=+2 .cse219))) (res (= .cse217 .cse220) (res (= .cse226 .cse223) (let ((.cse229 (+ fmt_length (- 1)))) (let ((.cse227 (+ fmt0 .cse229))) (res (= .cse227 .cse223) (poly+ .cse227 .cse223) (res (= .cse226 .cse227) (res (= .cse228 .cse229) (let ((.cse230 (* (- 1) 1))) (res (= .cse230 (- 1)) (poly* .cse230 (- 1)) (res .cse192 .cse193 (let ((.cse231 (+ fmt_length .cse230))) (res (= .cse231 .cse229) (cong (+ fmt_length .cse230) (+ fmt_length (- 1))) (res (= .cse228 .cse231) (-def fmt_length 1) (trans .cse228 .cse231 .cse229))))))) (res .cse173 .cse174 (cong (+ fmt0 .cse228) (+ fmt0 .cse229)))) (trans .cse226 .cse227 .cse223))))) (res .cse147 .cse148 (cong (< fmt1 .cse226) (< fmt1 .cse223)))) (trans .cse217 .cse220 .cse218)))))) (res (= .cse232 .cse43) (let ((.cse233 (= .cse235 .cse59))) (res .cse233 (let ((.cse236 (<= fmt0 arg1))) (let ((.cse234 (= .cse235 .cse236))) (res .cse234 (>=def arg1 fmt0) (res .cse59 (res .cse235 (=+1 .cse233) (res .cse236 (=-2 .cse234) (res .cse62 .cse63 (farkas 1 .cse236 1 .cse62)))) (res .cse235 (res .cse236 (let ((.cse237 (< arg1 fmt0))) (res .cse237 (total fmt0 arg1) (farkas 1 .cse237 1 .cse59))) (=-1 .cse234)) (=+2 .cse233)))))) (res (= .cse238 .cse42) (res (= .cse239 .cse41) (res (= .cse240 .cse47) (-def fmt0 distance) (res .cse168 .cse169 (cong (= arg0 .cse240) (= arg0 .cse47)))) (res (= .cse241 .cse241) (refl .cse241) (cong (and .cse241 .cse239) (and .cse241 .cse41)))) (cong (and .cse238 .cse235) (and .cse42 .cse59))))) (cong (and .cse232 .cse217) (and .cse43 .cse218)))) (cong (and .cse216 .cse210) (and .cse66 .cse209))))) (cong (and .cse205 .cse200) (and .cse67 .cse199))))) (cong (and .cse195 .cse179) (and .cse68 .cse6)))))) (cong (and .cse178 .cse151) (and .cse14 .cse80)))))) (res (= .cse95 .cse95) (refl .cse95) (cong (and .cse95 .cse150) (and .cse95 .cse70)))) (cong (and .cse149 .cse115) (and .cse89 .cse116)))))) (cong (and .cse114 .cse113) (and .cse98 .cse113)))) (cong (and .cse112 .cse111) (and .cse99 .cse111)))) (cong (and .cse110 .cse109) (and .cse100 .cse109)))) (cong (=> .cse108 .cse107) (=> .cse101 .cse107)))) (cong (not .cse103) (not .cse102))) (=-2 .cse106)))) (not- .cse104))) (res .cse105 (assume .cse105) (not- .cse105)))))))))))))))))))))) (and- 0 .cse101)))) (and- 0 .cse100))))) (and- 0 .cse99)))))) (and- 0 .cse98))))))))))))) (let ((.cse34 (+ .cse96 .cse97 (- 1))) (.cse57 (= 0 .cse77)) (.cse19 (= .cse77 0)) (.cse35 (= 0 .cse86)) (.cse17 (= .cse86 0))) (let-proof ((.cse24 (res .cse91 (res .cse92 (res .cse93 (res .cse94 (res .cse95 (res .cse89 .cse90 (and- 0 .cse89)) (and- 0 .cse95)) (and- 0 .cse94)) (and- 0 .cse93)) (and- 0 .cse92)) (and- 0 .cse91))) (.cse58 (symm 0 .cse77)) (.cse71 (res .cse89 .cse90 (and- 1 .cse89))) (.cse36 (symm 0 .cse86))) (let ((.cse0 (<= .cse34 0))) (let-proof ((.cse18 (! (res .cse80 (res .cse70 .cse71 (and- 1 .cse70)) (let ((.cse81 (= .cse80 .cse17))) (res .cse81 (res .cse17 (res .cse80 (=+1 .cse81) (let ((.cse82 (= .cse83 arg1))) (res .cse82 (symm .cse83 arg1) (let ((.cse84 (< .cse86 0))) (res .cse84 (let ((.cse85 (< 0 .cse86))) (res .cse85 (trichotomy .cse86 0) (farkas 1 .cse80 1 .cse85))) (farkas 1 .cse82 1 .cse84)))))) (res .cse80 (res .cse35 .cse36 (let ((.cse87 (< arg1 .cse83))) (res .cse87 (let ((.cse88 (< .cse83 arg1))) (res .cse88 (trichotomy arg1 .cse83) (farkas 1 .cse17 1 .cse88))) (farkas 1 .cse35 1 .cse87)))) (=+2 .cse81))) (=-2 .cse81)))) :proves (+ .cse17) :input)) (.cse20 (! (res .cse72 (res .cse23 .cse24 (and- 0 .cse23)) (let ((.cse73 (= .cse72 .cse19))) (res .cse73 (res .cse19 (res .cse72 (=+1 .cse73) (let ((.cse74 (= 6 distance))) (res .cse74 (symm 6 distance) (let ((.cse75 (< .cse77 0))) (res .cse75 (let ((.cse76 (< 0 .cse77))) (res .cse76 (trichotomy .cse77 0) (farkas 1 .cse72 1 .cse76))) (farkas 1 .cse74 1 .cse75)))))) (res .cse72 (res .cse57 .cse58 (let ((.cse78 (< distance 6))) (res .cse78 (let ((.cse79 (< 6 distance))) (res .cse79 (trichotomy distance 6) (farkas 1 .cse19 1 .cse79))) (farkas 1 .cse57 1 .cse78)))) (=+2 .cse73))) (=-2 .cse73)))) :proves (+ .cse19) :input)) (.cse15 (res .cse70 .cse71 (and- 0 .cse70)))) (res .cse0 (let ((.cse13 (+ arg1 .cse37 .cse38 (* (- 1) fmt_length) 5))) (let ((.cse1 (<= .cse13 0))) (res .cse1 (! (res .cse2 (let ((.cse3 (not .cse1))) (let-proof ((.cse4 (not+ .cse3))) (res .cse3 .cse4 (let ((.cse5 (not .cse3))) (res .cse5 (res .cse6 .cse7 (let ((.cse8 (= .cse6 .cse5))) (res .cse8 (let ((.cse9 (= .cse2 .cse3))) (res .cse9 (res .cse3 (res .cse2 (=+1 .cse9) (res .cse1 .cse4 (farkas 1 .cse2 1 .cse1))) (res .cse2 (res .cse10 .cse11 (res .cse1 (let ((.cse12 (<= 1 .cse13))) (res .cse12 (total-int .cse13 0) (farkas 1 .cse10 1 .cse12))) (not- .cse3))) (=+2 .cse9))) (cong (not .cse2) (not .cse3)))) (=-2 .cse8)))) (not- .cse5)))))) (res .cse14 .cse15 (res .cse6 (and- 1 .cse14) .cse16))) :proves (+ .cse1) :input) (res .cse17 .cse18 (res .cse19 .cse20 (let ((.cse29 (+ fmt_length (- 6)))) (let ((.cse21 (= .cse29 0))) (res .cse21 (! (res .cse22 (res .cse23 .cse24 (and- 1 .cse23)) (let ((.cse25 (= .cse22 .cse21))) (res .cse25 (res .cse21 (res .cse22 (=+1 .cse25) (let ((.cse26 (= 6 fmt_length))) (res .cse26 (symm 6 fmt_length) (let ((.cse27 (< .cse29 0))) (res .cse27 (let ((.cse28 (< 0 .cse29))) (res .cse28 (trichotomy .cse29 0) (farkas 1 .cse22 1 .cse28))) (farkas 1 .cse26 1 .cse27)))))) (res .cse22 (let ((.cse30 (= 0 .cse29))) (res .cse30 (symm 0 .cse29) (let ((.cse31 (< fmt_length 6))) (res .cse31 (let ((.cse32 (< 6 fmt_length))) (res .cse32 (trichotomy fmt_length 6) (farkas 1 .cse21 1 .cse32))) (farkas 1 .cse30 1 .cse31))))) (=+2 .cse25))) (=-2 .cse25)))) :proves (+ .cse21) :input) (! (let ((.cse33 (<= 1 .cse34))) (res .cse33 (total-int .cse34 0) (res .cse35 .cse36 (farkas 1 .cse21 1 .cse19 1 .cse35 1 .cse1 4 .cse33)))) :proves (- .cse21 - .cse19 - .cse17 - .cse1 + .cse0) :LA (1 1 (- 1) 1 (- 4))))))))))) (! (let ((.cse65 (+ arg1 .cse69 1))) (let ((.cse55 (<= 1 .cse65)) (.cse39 (<= .cse65 0))) (let-proof ((.cse44 (res .cse66 (res .cse67 (res .cse68 (res .cse14 .cse15 (and- 0 .cse14)) (and- 0 .cse68)) (and- 0 .cse67)) (and- 0 .cse66))) (.cse56 (total-int .cse65 0))) (res .cse39 (res .cse17 .cse18 (let ((.cse50 (+ fmt0 .cse37 .cse38))) (let ((.cse40 (= .cse50 0)) (.cse51 (= 0 .cse50))) (let-proof ((.cse52 (symm 0 .cse50))) (res .cse40 (! (res .cse41 (res .cse42 (res .cse43 .cse44 (and- 0 .cse43)) (and- 1 .cse42)) (let ((.cse45 (= .cse41 .cse40))) (res .cse45 (res .cse40 (res .cse41 (=+1 .cse45) (let ((.cse46 (= .cse47 arg0))) (res .cse46 (symm .cse47 arg0) (let ((.cse48 (< .cse50 0))) (res .cse48 (let ((.cse49 (< 0 .cse50))) (res .cse49 (trichotomy .cse50 0) (farkas 1 .cse46 1 .cse49))) (farkas 1 .cse41 1 .cse48)))))) (res .cse41 (res .cse51 .cse52 (let ((.cse53 (< arg0 .cse47))) (res .cse53 (let ((.cse54 (< .cse47 arg0))) (res .cse54 (trichotomy arg0 .cse47) (farkas 1 .cse51 1 .cse54))) (farkas 1 .cse40 1 .cse53)))) (=+2 .cse45))) (=-2 .cse45)))) :proves (+ .cse40) :input) (res .cse19 .cse20 (! (res .cse55 .cse56 (res .cse51 .cse52 (res .cse57 .cse58 (farkas 1 .cse57 1 .cse51 1 .cse17 4 .cse0 1 .cse55)))) :proves (- .cse19 - .cse40 - .cse17 - .cse0 + .cse39) :LA ((- 1) (- 1) 1 4 (- 1))))))))) (! (res .cse59 (res .cse43 .cse44 (and- 1 .cse43)) (let ((.cse60 (not .cse39))) (let-proof ((.cse64 (not- .cse60))) (res .cse60 (let ((.cse61 (= .cse59 .cse60))) (res .cse61 (res .cse60 (res .cse59 (=+1 .cse61) (res .cse39 (not+ .cse60) (farkas 1 .cse59 1 .cse39))) (res .cse59 (res .cse62 .cse63 (res .cse39 (res .cse55 .cse56 (farkas 1 .cse62 1 .cse55)) .cse64)) (=+2 .cse61))) (=-2 .cse61))) .cse64)))) :proves (- .cse39) :input))))) :proves (- .cse0) :rup)))))))))))))))))))) :proves () :rup)
