unsat
(! (let ((.cse314 (* (- 1) distance))) (let ((.cse443 (+ fmt0 .cse314)) (.cse746 (* (- 1) arg1))) (let ((.cse327 (* (- 1) fmt0)) (.cse719 (+ fmt0 .cse746)) (.cse28 (= fmt0 0)) (.cse440 (= arg0 .cse443)) (.cse720 (+ fmt0 fmt_length (* (- 1) fmt1) (- 1))) (.cse254 (format 2)) (.cse253 (format 1)) (.cse737 (format 0))) (let ((.cse370 (format 3)) (.cse5 (= .cse737 percent)) (.cse72 (= .cse253 s)) (.cse130 (= .cse253 percent)) (.cse139 (= .cse254 s)) (.cse172 (s_count 0)) (.cse693 (+ fmt0 1)) (.cse477 (= distance 16)) (.cse554 (= fmt_length 6)) (.cse461 (<= .cse720 0)) (.cse392 (and .cse28 .cse440)) (.cse404 (<= .cse719 0)) (.cse575 (+ fmt1 .cse327 (- 1)))) (let ((.cse9 (= .cse253 x)) (.cse185 (= .cse254 x)) (.cse169 (x_count 0)) (.cse116 (<= .cse575 0)) (.cse405 (and .cse392 .cse404)) (.cse465 (not .cse461)) (.cse149 (+ fmt1 .cse327 (- 2))) (.cse478 (and .cse477 .cse554)) (.cse745 (+ fmt0 2)) (.cse632 (= fmt1 fmt0)) (.cse630 (= fmt1 .cse693)) (.cse264 (+ .cse172 1)) (.cse128 (and .cse130 .cse139)) (.cse70 (and .cse5 .cse72)) (.cse102 (= .cse254 percent)) (.cse345 (= .cse370 s)) (.cse174 (s_count 1))) (let ((.cse361 (+ .cse174 1)) (.cse350 (s_count 2)) (.cse331 (and .cse102 .cse345)) (.cse435 (not .cse70)) (.cse30 (= .cse172 0)) (.cse510 (= .cse172 1)) (.cse524 (not .cse128)) (.cse36 (= .cse174 .cse172)) (.cse258 (= .cse174 .cse264)) (.cse629 (or .cse632 .cse630)) (.cse627 (= fmt1 .cse745)) (.cse568 (and .cse478 (= adr_lo 3))) (.cse69 (x_count .cse149)) (.cse171 (s_count .cse149)) (.cse688 (+ arg0 distance .cse746)) (.cse473 (and .cse405 .cse465)) (.cse398 (not .cse116)) (.cse721 (+ arg0 distance fmt_length .cse746 (- 4))) (.cse194 (+ .cse169 1)) (.cse183 (and .cse130 .cse185)) (.cse6 (and .cse5 .cse9)) (.cse98 (= .cse370 x)) (.cse150 (x_count 1))) (let ((.cse499 (+ .cse150 1)) (.cse81 (x_count 2)) (.cse99 (and .cse102 .cse98)) (.cse439 (not .cse6)) (.cse88 (= .cse169 0)) (.cse544 (= .cse169 1)) (.cse509 (not .cse183)) (.cse163 (= .cse150 .cse169)) (.cse188 (= .cse150 .cse194)) (.cse283 (<= .cse721 0)) (.cse396 (and .cse473 .cse398)) (.cse684 (<= .cse688 0)) (.cse651 (* 4 .cse171)) (.cse641 (* 4 .cse69)) (.cse569 (and .cse568 (= adr_medlo 4))) (.cse386 (= percent 37)) (.cse531 (= s 115)) (.cse626 (or .cse629 .cse627)) (.cse624 (= fmt1 (+ fmt0 3))) (.cse259 (=> .cse128 .cse258)) (.cse523 (=> .cse524 .cse36)) (.cse511 (=> .cse70 .cse510)) (.cse432 (=> .cse435 .cse30)) (.cse380 (not .cse331)) (.cse332 (= .cse350 .cse174)) (.cse355 (= .cse350 .cse361))) (let ((.cse356 (=> .cse331 .cse355)) (.cse379 (=> .cse380 .cse332)) (.cse433 (and .cse511 .cse432)) (.cse260 (and .cse259 .cse523)) (.cse623 (or .cse626 .cse624)) (.cse621 (= fmt1 (+ fmt0 4))) (.cse25 (= arg1 fmt0)) (.cse609 (= arg1 .cse693)) (.cse532 (and .cse386 .cse531)) (.cse488 (= x 120)) (.cse570 (and .cse569 (= adr_medhi 5))) (.cse454 (+ arg0 .cse651 .cse641)) (.cse583 (and .cse396 .cse684)) (.cse287 (not .cse283)) (.cse189 (=> .cse183 .cse188)) (.cse508 (=> .cse509 .cse163)) (.cse545 (=> .cse6 .cse544)) (.cse436 (=> .cse439 .cse88)) (.cse431 (not .cse99)) (.cse105 (= .cse81 .cse150)) (.cse495 (= .cse81 .cse499))) (let ((.cse496 (=> .cse99 .cse495)) (.cse428 (=> .cse431 .cse105)) (.cse437 (and .cse545 .cse436)) (.cse190 (and .cse189 .cse508)) (.cse295 (and .cse583 .cse287)) (.cse449 (= arg1 .cse454)) (.cse571 (and .cse570 (= adr_hi 6))) (.cse528 (and .cse532 .cse488)) (.cse608 (or .cse25 .cse609)) (.cse606 (= arg1 .cse745)) (.cse620 (or .cse623 .cse621)) (.cse618 (= fmt1 (+ fmt0 5))) (.cse739 (format 4)) (.cse535 (and .cse433 .cse260)) (.cse357 (and .cse356 .cse379))) (let ((.cse389 (and .cse535 .cse357)) (.cse743 (s_count 3)) (.cse735 (= .cse370 percent)) (.cse738 (= .cse739 s)) (.cse617 (or .cse620 .cse618)) (.cse605 (or .cse608 .cse606)) (.cse572 (and .cse571 .cse528)) (.cse450 (and .cse295 .cse449)) (.cse741 (format 5)) (.cse540 (and .cse437 .cse190)) (.cse429 (and .cse496 .cse428))) (let ((.cse542 (and .cse540 .cse429)) (.cse731 (x_count 3)) (.cse736 (= .cse739 x)) (.cse725 (= .cse741 percent)) (.cse733 (= .cse741 x)) (.cse581 (and .cse572 .cse450)) (.cse603 (and .cse617 .cse605)) (.cse576 (and .cse389 (let ((.cse744 (and .cse735 .cse738))) (and (=> .cse744 (= .cse743 (+ .cse350 1))) (=> (not .cse744) (= .cse743 .cse350)))))) (.cse729 (s_count 4)) (.cse732 (= .cse739 percent)) (.cse740 (= .cse741 s))) (let ((.cse577 (and .cse576 (let ((.cse742 (and .cse732 .cse740))) (and (=> .cse742 (= .cse729 (+ .cse743 1))) (=> (not .cse742) (= .cse729 .cse743)))))) (.cse726 (format 6)) (.cse589 (and .cse581 .cse603)) (.cse600 (and (and (and (and (and (or (or (or (or (or (or (or .cse5 (= .cse737 s)) (= .cse737 x)) (= .cse737 3)) (= .cse737 4)) (= .cse737 5)) (= .cse737 6)) (= .cse737 255)) (or (or (or (or (or (or (or .cse130 .cse72) .cse9) (= .cse253 3)) (= .cse253 4)) (= .cse253 5)) (= .cse253 6)) (= .cse253 255))) (or (or (or (or (or (or (or .cse102 .cse139) .cse185) (= .cse254 3)) (= .cse254 4)) (= .cse254 5)) (= .cse254 6)) (= .cse254 255))) (or (or (or (or (or (or (or .cse735 .cse345) .cse98) (= .cse370 3)) (= .cse370 4)) (= .cse370 5)) (= .cse370 6)) (= .cse370 255))) (or (or (or (or (or (or (or .cse732 .cse738) .cse736) (= .cse739 3)) (= .cse739 4)) (= .cse739 5)) (= .cse739 6)) (= .cse739 255))) (or (or (or (or (or (or (or .cse725 .cse740) .cse733) (= .cse741 3)) (= .cse741 4)) (= .cse741 5)) (= .cse741 6)) (= .cse741 255)))) (.cse584 (and .cse542 (let ((.cse734 (and .cse735 .cse736))) (and (=> .cse734 (= .cse731 (+ .cse81 1))) (=> (not .cse734) (= .cse731 .cse81)))))) (.cse724 (x_count 4))) (let ((.cse585 (and .cse584 (let ((.cse730 (and .cse732 .cse733))) (and (=> .cse730 (= .cse724 (+ .cse731 1))) (=> (not .cse730) (= .cse724 .cse731)))))) (.cse590 (and .cse589 .cse600)) (.cse578 (and .cse577 (let ((.cse727 (and .cse725 (= .cse726 s))) (.cse728 (s_count 5))) (and (=> .cse727 (= .cse728 (+ .cse729 1))) (=> (not .cse727) (= .cse728 .cse729))))))) (let ((.cse579 (and .cse590 .cse578)) (.cse586 (and .cse585 (let ((.cse722 (and .cse725 (= .cse726 x))) (.cse723 (x_count 5))) (and (=> .cse722 (= .cse723 (+ .cse724 1))) (=> (not .cse722) (= .cse723 .cse724))))))) (let ((.cse291 (< 0 .cse721)) (.cse469 (< 0 .cse720)) (.cse409 (< 0 .cse719)) (.cse587 (and .cse579 .cse586)) (.cse226 (+ arg1 1))) (let-proof ((.cse288 (not+ .cse287)) (.cse292 (total .cse721 0)) (.cse297 (not- .cse287)) (.cse399 (not- .cse398)) (.cse466 (not+ .cse465)) (.cse470 (total .cse720 0)) (.cse475 (not- .cse465)) (.cse410 (total .cse719 0))) (let-proof ((.cse588 (let ((.cse596 (and (and (and (and (and (not (= (format fmt1) percent)) (= (format (+ fmt1 1)) s)) (= (format arg1) adr_lo)) (= (format .cse226) adr_medlo)) (= (format (+ arg1 2)) adr_medhi)) (= (format (+ arg1 3)) adr_hi)))) (let ((.cse591 (=> .cse587 .cse596))) (res .cse591 (=>+ 0 .cse591) (let ((.cse718 (- fmt0 distance))) (let ((.cse717 (= arg0 .cse718)) (.cse706 (- fmt_length 1)) (.cse660 (- fmt1 2))) (let ((.cse615 (+ fmt0 0)) (.cse645 (- .cse660 fmt0)) (.cse704 (+ fmt0 .cse706)) (.cse716 (and .cse28 .cse717)) (.cse713 (>= arg1 fmt0))) (let ((.cse674 (- fmt_length 4)) (.cse710 (and .cse716 .cse713)) (.cse699 (< fmt1 .cse704)) (.cse652 (s_count .cse645)) (.cse631 (= fmt1 .cse615))) (let ((.cse628 (or .cse631 .cse630)) (.cse642 (x_count .cse645)) (.cse650 (* 4 .cse652)) (.cse683 (+ arg0 distance)) (.cse698 (and .cse710 .cse699)) (.cse694 (> fmt1 .cse693)) (.cse671 (+ distance .cse674))) (let ((.cse669 (+ arg0 .cse671)) (.cse690 (and .cse698 .cse694)) (.cse685 (>= arg1 .cse683)) (.cse648 (+ arg0 .cse650)) (.cse640 (* 4 .cse642)) (.cse625 (or .cse628 .cse627))) (let ((.cse622 (or .cse625 .cse624)) (.cse610 (= arg1 .cse615)) (.cse638 (+ .cse648 .cse640)) (.cse680 (and .cse690 .cse685)) (.cse664 (< arg1 .cse669))) (let ((.cse663 (and .cse680 .cse664)) (.cse637 (= arg1 .cse638)) (.cse607 (or .cse610 .cse609)) (.cse619 (or .cse622 .cse621))) (let ((.cse616 (or .cse619 .cse618)) (.cse604 (or .cse607 .cse606)) (.cse636 (and .cse663 .cse637))) (let ((.cse635 (and .cse572 .cse636)) (.cse602 (and .cse616 .cse604))) (let ((.cse601 (and .cse635 .cse602))) (let ((.cse599 (and .cse601 .cse600))) (let ((.cse598 (and .cse599 .cse578))) (let ((.cse597 (and .cse598 .cse586))) (let ((.cse592 (=> .cse597 .cse596))) (let ((.cse594 (not .cse592))) (res .cse592 (let ((.cse593 (not .cse591))) (res .cse593 (res .cse594 (not+ .cse594) (let ((.cse595 (= .cse594 .cse593))) (res .cse595 (res (= .cse592 .cse591) (res (= .cse596 .cse596) (refl .cse596) (res (= .cse597 .cse587) (res (= .cse586 .cse586) (refl .cse586) (res (= .cse598 .cse579) (res (= .cse578 .cse578) (refl .cse578) (res (= .cse599 .cse590) (res (= .cse600 .cse600) (refl .cse600) (res (= .cse601 .cse589) (let ((.cse613 (= arg1 arg1)) (.cse633 (= fmt1 fmt1))) (let-proof ((.cse614 (refl arg1)) (.cse634 (refl fmt1))) (res (= .cse602 .cse603) (let ((.cse611 (= .cse615 fmt0))) (let-proof ((.cse612 (poly+ .cse615 fmt0))) (res (= .cse604 .cse605) (res (= .cse606 .cse606) (refl .cse606) (res (= .cse607 .cse608) (res (= .cse609 .cse609) (refl .cse609) (res (= .cse610 .cse25) (res .cse611 .cse612 (res .cse613 .cse614 (cong (= arg1 .cse615) (= arg1 fmt0)))) (cong (or .cse610 .cse609) (or .cse25 .cse609)))) (cong (or .cse607 .cse606) (or .cse608 .cse606)))) (res (= .cse616 .cse617) (res (= .cse618 .cse618) (refl .cse618) (res (= .cse619 .cse620) (res (= .cse621 .cse621) (refl .cse621) (res (= .cse622 .cse623) (res (= .cse624 .cse624) (refl .cse624) (res (= .cse625 .cse626) (res (= .cse627 .cse627) (refl .cse627) (res (= .cse628 .cse629) (res (= .cse630 .cse630) (refl .cse630) (res (= .cse631 .cse632) (res .cse611 .cse612 (res .cse633 .cse634 (cong (= fmt1 .cse615) (= fmt1 fmt0)))) (cong (or .cse631 .cse630) (or .cse632 .cse630)))) (cong (or .cse628 .cse627) (or .cse629 .cse627)))) (cong (or .cse625 .cse624) (or .cse626 .cse624)))) (cong (or .cse622 .cse621) (or .cse623 .cse621)))) (cong (or .cse619 .cse618) (or .cse620 .cse618)))) (cong (and .cse616 .cse604) (and .cse617 .cse605)))))) (res (= .cse635 .cse581) (res (= .cse636 .cse450) (let ((.cse658 (= fmt0 fmt0)) (.cse653 (= arg0 arg0))) (let-proof ((.cse659 (refl fmt0)) (.cse654 (refl arg0))) (res (= .cse637 .cse449) (res (= .cse638 .cse454) (let ((.cse649 (+ arg0 .cse651))) (let ((.cse639 (+ .cse649 .cse641))) (res (= .cse639 .cse454) (poly+ .cse639 .cse454) (res (= .cse638 .cse639) (let ((.cse643 (= .cse645 .cse149)) (.cse646 (= 4 4))) (let-proof ((.cse644 (let ((.cse656 (+ fmt1 (- 2)))) (let ((.cse655 (- .cse656 fmt0))) (res (= .cse655 .cse149) (res (= .cse327 .cse327) (refl .cse327) (res (= .cse656 .cse656) (refl .cse656) (let ((.cse657 (+ .cse656 .cse327))) (res (= .cse657 .cse657) (cong (+ .cse656 .cse327) (+ .cse656 .cse327)) (res (= .cse655 .cse657) (-def .cse656 fmt0) (res (= .cse657 .cse149) (poly+ .cse657 .cse149) (trans .cse655 .cse657 .cse657 .cse149))))))) (res (= .cse645 .cse655) (res .cse658 .cse659 (res (= .cse660 .cse656) (let ((.cse661 (* (- 1) 2))) (res (= .cse661 (- 2)) (poly* .cse661 (- 2)) (res .cse633 .cse634 (let ((.cse662 (+ fmt1 .cse661))) (res (= .cse662 .cse656) (cong (+ fmt1 .cse661) (+ fmt1 (- 2))) (res (= .cse660 .cse662) (-def fmt1 2) (trans .cse660 .cse662 .cse656))))))) (cong (- .cse660 fmt0) (- .cse656 fmt0)))) (trans .cse645 .cse655 .cse149)))))) (.cse647 (refl 4))) (res (= .cse640 .cse641) (res (= .cse642 .cse69) (res .cse643 .cse644 (cong (x_count .cse645) (x_count .cse149))) (res .cse646 .cse647 (cong (* 4 .cse642) (* 4 .cse69)))) (res (= .cse648 .cse649) (res (= .cse650 .cse651) (res (= .cse652 .cse171) (res .cse643 .cse644 (cong (s_count .cse645) (s_count .cse149))) (res .cse646 .cse647 (cong (* 4 .cse652) (* 4 .cse171)))) (res .cse653 .cse654 (cong (+ arg0 .cse650) (+ arg0 .cse651)))) (cong (+ .cse648 .cse640) (+ .cse649 .cse641)))))) (trans .cse638 .cse639 .cse454))))) (res .cse613 .cse614 (cong (= arg1 .cse638) (= arg1 .cse454)))) (res (= .cse663 .cse295) (let ((.cse677 (= fmt_length fmt_length))) (let-proof ((.cse678 (refl fmt_length))) (res (= .cse664 .cse287) (let ((.cse668 (+ arg0 distance fmt_length (- 4)))) (let ((.cse666 (< arg1 .cse668))) (let ((.cse665 (= .cse666 .cse287))) (res .cse665 (res .cse287 (res .cse666 (=+1 .cse665) (res .cse283 .cse288 (farkas 1 .cse666 1 .cse283))) (res .cse666 (let ((.cse667 (<= .cse668 arg1))) (res .cse667 (total .cse668 arg1) (res .cse283 (res .cse291 .cse292 (farkas 1 .cse667 1 .cse291)) .cse297))) (=+2 .cse665))) (res (= .cse664 .cse666) (res (= .cse669 .cse668) (let ((.cse672 (+ distance fmt_length (- 4)))) (let ((.cse670 (+ arg0 .cse672))) (res (= .cse670 .cse668) (poly+ .cse670 .cse668) (res (= .cse669 .cse670) (res (= .cse671 .cse672) (let ((.cse675 (+ fmt_length (- 4)))) (let ((.cse673 (+ distance .cse675))) (res (= .cse673 .cse672) (poly+ .cse673 .cse672) (res (= .cse671 .cse673) (res (= .cse674 .cse675) (let ((.cse676 (* (- 1) 4))) (res (= .cse676 (- 4)) (poly* .cse676 (- 4)) (res .cse677 .cse678 (let ((.cse679 (+ fmt_length .cse676))) (res (= .cse679 .cse675) (cong (+ fmt_length .cse676) (+ fmt_length (- 4))) (res (= .cse674 .cse679) (-def fmt_length 4) (trans .cse674 .cse679 .cse675))))))) (res (= distance distance) (refl distance) (cong (+ distance .cse674) (+ distance .cse675)))) (trans .cse671 .cse673 .cse672))))) (res .cse653 .cse654 (cong (+ arg0 .cse671) (+ arg0 .cse672)))) (trans .cse669 .cse670 .cse668))))) (res .cse613 .cse614 (cong (< arg1 .cse669) (< arg1 .cse668)))) (trans .cse664 .cse666 .cse287)))))) (res (= .cse680 .cse583) (let ((.cse681 (= .cse685 .cse684))) (res .cse681 (let ((.cse686 (<= .cse683 arg1))) (let ((.cse682 (= .cse685 .cse686))) (res .cse682 (>=def arg1 .cse683) (res .cse684 (res .cse685 (=+1 .cse681) (res .cse686 (=-2 .cse682) (let ((.cse687 (< 0 .cse688))) (res .cse687 (total .cse688 0) (farkas 1 .cse686 1 .cse687))))) (res .cse685 (res .cse686 (let ((.cse689 (< arg1 .cse683))) (res .cse689 (total .cse683 arg1) (farkas 1 .cse689 1 .cse684))) (=-1 .cse682)) (=+2 .cse681)))))) (res (= .cse690 .cse396) (let ((.cse691 (= .cse694 .cse398))) (res .cse691 (let ((.cse695 (< .cse693 fmt1))) (let ((.cse692 (= .cse694 .cse695))) (res .cse692 (>def fmt1 .cse693) (res .cse398 (res .cse694 (=+1 .cse691) (res .cse695 (=-2 .cse692) (res .cse116 (not+ .cse398) (farkas 1 .cse695 1 .cse116)))) (res .cse694 (res .cse695 (let ((.cse696 (<= fmt1 .cse693))) (res .cse696 (total fmt1 .cse693) (res .cse116 (let ((.cse697 (< 0 .cse575))) (res .cse697 (total .cse575 0) (farkas 1 .cse696 1 .cse697))) .cse399))) (=-1 .cse692)) (=+2 .cse691)))))) (res (= .cse698 .cse473) (res (= .cse699 .cse465) (let ((.cse703 (+ fmt0 fmt_length (- 1)))) (let ((.cse701 (< fmt1 .cse703))) (let ((.cse700 (= .cse701 .cse465))) (res .cse700 (res .cse465 (res .cse701 (=+1 .cse700) (res .cse461 .cse466 (farkas 1 .cse701 1 .cse461))) (res .cse701 (let ((.cse702 (<= .cse703 fmt1))) (res .cse702 (total .cse703 fmt1) (res .cse461 (res .cse469 .cse470 (farkas 1 .cse702 1 .cse469)) .cse475))) (=+2 .cse700))) (res (= .cse699 .cse701) (res (= .cse704 .cse703) (let ((.cse707 (+ fmt_length (- 1)))) (let ((.cse705 (+ fmt0 .cse707))) (res (= .cse705 .cse703) (poly+ .cse705 .cse703) (res (= .cse704 .cse705) (res (= .cse706 .cse707) (let ((.cse708 (* (- 1) 1))) (res (= .cse708 (- 1)) (poly* .cse708 (- 1)) (res .cse677 .cse678 (let ((.cse709 (+ fmt_length .cse708))) (res (= .cse709 .cse707) (cong (+ fmt_length .cse708) (+ fmt_length (- 1))) (res (= .cse706 .cse709) (-def fmt_length 1) (trans .cse706 .cse709 .cse707))))))) (res .cse658 .cse659 (cong (+ fmt0 .cse706) (+ fmt0 .cse707)))) (trans .cse704 .cse705 .cse703))))) (res .cse633 .cse634 (cong (< fmt1 .cse704) (< fmt1 .cse703)))) (trans .cse699 .cse701 .cse465)))))) (res (= .cse710 .cse405) (let ((.cse711 (= .cse713 .cse404))) (res .cse711 (let ((.cse714 (<= fmt0 arg1))) (let ((.cse712 (= .cse713 .cse714))) (res .cse712 (>=def arg1 fmt0) (res .cse404 (res .cse713 (=+1 .cse711) (res .cse714 (=-2 .cse712) (res .cse409 .cse410 (farkas 1 .cse714 1 .cse409)))) (res .cse713 (res .cse714 (let ((.cse715 (< arg1 fmt0))) (res .cse715 (total fmt0 arg1) (farkas 1 .cse715 1 .cse404))) (=-1 .cse712)) (=+2 .cse711)))))) (res (= .cse716 .cse392) (res (= .cse717 .cse440) (res (= .cse718 .cse443) (-def fmt0 distance) (res .cse653 .cse654 (cong (= arg0 .cse718) (= arg0 .cse443)))) (res (= .cse28 .cse28) (refl .cse28) (cong (and .cse28 .cse717) (and .cse28 .cse440)))) (cong (and .cse716 .cse713) (and .cse392 .cse404))))) (cong (and .cse710 .cse699) (and .cse405 .cse465)))) (cong (and .cse698 .cse694) (and .cse473 .cse398))))) (cong (and .cse690 .cse685) (and .cse396 .cse684))))) (cong (and .cse680 .cse664) (and .cse583 .cse287)))))) (cong (and .cse663 .cse637) (and .cse295 .cse449)))))) (res (= .cse572 .cse572) (refl .cse572) (cong (and .cse572 .cse636) (and .cse572 .cse450)))) (cong (and .cse635 .cse602) (and .cse581 .cse603)))))) (cong (and .cse601 .cse600) (and .cse589 .cse600)))) (cong (and .cse599 .cse578) (and .cse590 .cse578)))) (cong (and .cse598 .cse586) (and .cse579 .cse586)))) (cong (=> .cse597 .cse596) (=> .cse587 .cse596)))) (cong (not .cse592) (not .cse591))) (=-2 .cse595)))) (not- .cse593))) (res .cse594 (assume .cse594) (not- .cse594)))))))))))))))))))))))) (let-proof ((.cse580 (res .cse587 .cse588 (and- 0 .cse587)))) (let-proof ((.cse582 (res .cse589 (res .cse590 (res .cse579 .cse580 (and- 0 .cse579)) (and- 0 .cse590)) (and- 0 .cse589)))) (let-proof ((.cse451 (res .cse581 .cse582 (and- 1 .cse581)))) (let-proof ((.cse296 (res .cse450 .cse451 (and- 0 .cse450)))) (let ((.cse401 (+ fmt1 .cse327 (- 3)))) (let-proof ((.cse543 (res .cse584 (res .cse585 (res .cse586 (res .cse587 .cse588 (and- 1 .cse587)) (and- 0 .cse586)) (and- 0 .cse585)) (and- 0 .cse584))) (.cse397 (res .cse583 (res .cse295 .cse296 (and- 0 .cse295)) (and- 0 .cse583))) (.cse573 (res .cse581 .cse582 (and- 0 .cse581)))) (let ((.cse132 (<= .cse401 0)) (.cse313 (* (- 1) arg0)) (.cse559 (+ fmt_length (- 6))) (.cse550 (+ .cse169 (- 1))) (.cse238 (* (- 1) .cse150)) (.cse257 (* (- 1) .cse169)) (.cse395 (* (- 1) .cse172)) (.cse419 (+ fmt1 .cse327 (- 4))) (.cse422 (< 0 .cse149)) (.cse134 (<= .cse149 0)) (.cse423 (< .cse149 0)) (.cse394 (* (- 1) .cse69))) (let-proof ((.cse529 (res .cse572 .cse573 (and- 1 .cse572))) (.cse474 (res .cse396 .cse397 (and- 0 .cse396))) (.cse541 (res .cse542 .cse543 (and- 0 .cse542))) (.cse390 (res .cse576 (res .cse577 (res .cse578 (res .cse579 .cse580 (and- 1 .cse579)) (and- 0 .cse578)) (and- 0 .cse577)) (and- 0 .cse576)))) (let ((.cse372 (* (- 1) .cse171)) (.cse487 (= 115 120)) (.cse383 (= 120 x)) (.cse412 (= 115 s)) (.cse417 (+ .cse81 .cse394)) (.cse115 (= .cse149 0)) (.cse111 (= .cse419 0)) (.cse112 (<= .cse419 0)) (.cse391 (+ .cse174 .cse395)) (.cse516 (+ .cse172 (- 1))) (.cse339 (+ .cse150 .cse257)) (.cse502 (+ .cse81 .cse238 (- 1))) (.cse4 (= .cse550 0)) (.cse484 (+ distance (- 16))) (.cse299 (= .cse559 0)) (.cse457 (+ arg1 .cse313 (* (- 4) .cse171) (* (- 4) .cse69))) (.cse446 (+ fmt0 .cse313 .cse314)) (.cse427 (+ .cse81 .cse238)) (.cse114 (= .cse401 0)) (.cse381 (= 37 percent)) (.cse385 (= 120 37)) (.cse564 (+ arg1 .cse327 1))) (let-proof ((.cse489 (symm x 120)) (.cse424 (res .cse423 (res .cse422 (trichotomy .cse149 0) (farkas 1 .cse422 1 .cse134)) (let ((.cse574 (<= 1 .cse575))) (res .cse574 (total-int .cse575 0) (farkas 1 .cse574 1 .cse423))))) (.cse536 (res .cse389 .cse390 (and- 0 .cse389))) (.cse438 (res .cse540 .cse541 (and- 0 .cse540))) (.cse479 (res .cse568 (res .cse569 (res .cse570 (res .cse571 (res .cse572 .cse573 (and- 0 .cse572)) (and- 0 .cse571)) (and- 0 .cse570)) (and- 0 .cse569)) (and- 0 .cse568))) (.cse406 (res .cse473 .cse474 (and- 0 .cse473))) (.cse522 (let ((.cse565 (< .cse401 0))) (res .cse565 (let ((.cse566 (< 0 .cse401))) (res .cse566 (trichotomy .cse401 0) (farkas 1 .cse566 1 .cse132))) (let ((.cse567 (<= 1 .cse149))) (res .cse567 (total-int .cse149 0) (farkas 1 .cse567 1 .cse565)))))) (.cse533 (res .cse528 .cse529 (and- 0 .cse528))) (.cse387 (symm percent 37))) (let ((.cse120 (= 1 .cse149)) (.cse175 (= .cse172 .cse171)) (.cse63 (<= 1 .cse564)) (.cse18 (<= .cse564 0)) (.cse255 (= percent .cse254)) (.cse159 (= 0 .cse149)) (.cse154 (= .cse427 0)) (.cse151 (= .cse150 .cse81)) (.cse67 (= 0 .cse446)) (.cse46 (= .cse446 0)) (.cse50 (= 0 .cse457)) (.cse22 (= .cse457 0)) (.cse315 (* (- 1) fmt_length)) (.cse61 (= 0 .cse484)) (.cse16 (= .cse484 0)) (.cse415 (= s .cse253)) (.cse137 (= .cse174 0)) (.cse138 (= 0 .cse174)) (.cse38 (= 0 .cse172)) (.cse0 (= .cse502 0)) (.cse2 (= .cse339 0)) (.cse343 (= .cse169 .cse150)) (.cse92 (= .cse516 0)) (.cse32 (= .cse391 0)) (.cse244 (= .cse172 .cse174)) (.cse90 (= .cse417 0)) (.cse148 (= .cse81 .cse69)) (.cse79 (= .cse69 .cse81)) (.cse110 (= 2 .cse149)) (.cse330 (+ .cse174 .cse372))) (let-proof ((.cse64 (total-int .cse564 0)) (.cse388 (! (farkas 1 .cse385) :proves (- .cse385) :EQ)) (.cse382 (! (res .cse386 (res .cse532 .cse533 (and- 0 .cse532)) (let ((.cse563 (= .cse386 .cse381))) (res .cse563 (res .cse381 (res .cse386 (=+1 .cse563) (symm 37 percent)) (res .cse386 .cse387 (=+2 .cse563))) (=-2 .cse563)))) :proves (+ .cse381) :input)) (.cse256 (symm percent .cse254)) (.cse135 (! .cse522 :proves (+ .cse134 + .cse114 - .cse132) :trichotomy)) (.cse152 (symm .cse150 .cse81)) (.cse393 (res .cse405 .cse406 (and- 0 .cse405))) (.cse68 (symm 0 .cse446)) (.cse51 (symm 0 .cse457)) (.cse300 (! (res .cse554 (res .cse478 .cse479 (and- 1 .cse478)) (let ((.cse555 (= .cse554 .cse299))) (res .cse555 (res .cse299 (res .cse554 (=+1 .cse555) (let ((.cse556 (= 6 fmt_length))) (res .cse556 (symm 6 fmt_length) (let ((.cse557 (< .cse559 0))) (res .cse557 (let ((.cse558 (< 0 .cse559))) (res .cse558 (trichotomy .cse559 0) (farkas 1 .cse554 1 .cse558))) (farkas 1 .cse556 1 .cse557)))))) (res .cse554 (let ((.cse560 (= 0 .cse559))) (res .cse560 (symm 0 .cse559) (let ((.cse561 (< fmt_length 6))) (res .cse561 (let ((.cse562 (< 6 fmt_length))) (res .cse562 (trichotomy fmt_length 6) (farkas 1 .cse299 1 .cse562))) (farkas 1 .cse560 1 .cse561))))) (=+2 .cse555))) (=-2 .cse555)))) :proves (+ .cse299) :input)) (.cse62 (symm 0 .cse484)) (.cse416 (symm s .cse253)) (.cse8 (! (and- 0 .cse6) :proves (- .cse6 + .cse5) :input)) (.cse11 (! (res .cse544 (res .cse6 (and+ .cse6) (res .cse545 (res .cse437 .cse438 (and- 0 .cse437)) (=>- .cse545))) (let ((.cse546 (= .cse544 .cse4))) (res .cse546 (res .cse4 (res .cse544 (=+1 .cse546) (let ((.cse547 (= 1 .cse169))) (res .cse547 (symm 1 .cse169) (let ((.cse548 (< .cse550 0))) (res .cse548 (let ((.cse549 (< 0 .cse550))) (res .cse549 (trichotomy .cse550 0) (farkas 1 .cse544 1 .cse549))) (farkas 1 .cse547 1 .cse548)))))) (res .cse544 (let ((.cse551 (= 0 .cse550))) (res .cse551 (symm 0 .cse550) (let ((.cse552 (< .cse169 1))) (res .cse552 (let ((.cse553 (< 1 .cse169))) (res .cse553 (trichotomy .cse169 1) (farkas 1 .cse4 1 .cse553))) (farkas 1 .cse551 1 .cse552))))) (=+2 .cse546))) (=-2 .cse546)))) :proves (- .cse9 + .cse4 - .cse5) :input)) (.cse52 (symm 0 .cse172)) (.cse430 (res .cse542 .cse543 (and- 1 .cse542))) (.cse344 (symm .cse169 .cse150)) (.cse191 (res .cse540 .cse541 (and- 1 .cse540))) (.cse434 (res .cse535 .cse536 (and- 0 .cse535))) (.cse245 (symm .cse172 .cse174)) (.cse133 (! (let ((.cse537 (< .cse419 0))) (res .cse537 (let ((.cse538 (< 0 .cse419))) (res .cse538 (trichotomy .cse419 0) (farkas 1 .cse538 1 .cse112))) (let ((.cse539 (<= 1 .cse401))) (res .cse539 (total-int .cse401 0) (farkas 1 .cse539 1 .cse537))))) :proves (+ .cse132 + .cse111 - .cse112) :trichotomy)) (.cse136 (! .cse424 :proves (- .cse134 + .cse115 + .cse116) :trichotomy)) (.cse261 (res .cse535 .cse536 (and- 1 .cse535))) (.cse275 (symm .cse81 .cse69)) (.cse413 (! (res .cse531 (res .cse532 .cse533 (and- 1 .cse532)) (let ((.cse534 (= .cse531 .cse412))) (res .cse534 (res .cse412 (res .cse531 (=+1 .cse534) (symm 115 s)) (res .cse531 (symm s 115) (=+2 .cse534))) (=-2 .cse534)))) :proves (+ .cse412) :input)) (.cse384 (! (res .cse488 (res .cse528 .cse529 (and- 1 .cse528)) (let ((.cse530 (= .cse488 .cse383))) (res .cse530 (res .cse383 (res .cse488 (=+1 .cse530) (symm 120 x)) (res .cse488 .cse489 (=+2 .cse530))) (=-2 .cse530)))) :proves (+ .cse383) :input)) (.cse490 (! (let ((.cse527 (= 120 115))) (res .cse527 (symm 120 115) (farkas 1 .cse527))) :proves (- .cse487) :EQ))) (let ((.cse20 (= .cse330 0)) (.cse177 (= .cse171 .cse174)) (.cse215 (* (- 1) .cse174)) (.cse170 (= .cse171 .cse172)) (.cse95 (= 0 .cse417)) (.cse161 (= .cse174 .cse171)) (.cse317 (+ .cse174 .cse327)) (.cse58 (+ .cse69 (- 4))) (.cse279 (+ arg1 .cse327)) (.cse267 (+ .cse174 .cse395 (- 1))) (.cse274 (+ .cse150 .cse394))) (let-proof ((.cse178 (symm .cse171 .cse174)) (.cse252 (! (res .cse412 .cse413 (res .cse383 .cse384 (res .cse487 (! (res .cse488 .cse489 (res (= s .cse254) (symm s .cse254) (trans 115 s .cse254 x 120))) :proves (+ .cse487 - .cse412 - .cse139 - .cse185 - .cse383) :trans (115 s .cse254 x 120)) .cse490))) :proves (- .cse185 - .cse139) :rup)) (.cse173 (symm .cse149 0)) (.cse124 (! (res (= .cse149 2) (symm .cse149 2) (cong (x_count .cse149) (x_count 2))) :proves (+ .cse79 - .cse110) :cong (.cse69 .cse81))) (.cse91 (! (res .cse148 .cse275 (let ((.cse525 (< .cse417 0))) (res .cse525 (let ((.cse526 (< 0 .cse417))) (res .cse526 (trichotomy .cse417 0) (farkas 1 .cse148 1 .cse526))) (farkas 1 .cse79 1 .cse525)))) :proves (- .cse79 + .cse90) :EQ)) (.cse129 (! (res .cse523 (res .cse260 .cse261 (and- 1 .cse260)) (res .cse524 (not+ .cse524) (=>- .cse523))) :proves (+ .cse128 + .cse36) :input)) (.cse117 (res .cse134 (res .cse132 .cse133 (! .cse522 :proves (- .cse132 + .cse114 + .cse134) :trichotomy)) .cse136)) (.cse97 (! (res .cse244 .cse245 (let ((.cse520 (< .cse391 0))) (res .cse520 (let ((.cse521 (< 0 .cse391))) (res .cse521 (trichotomy .cse391 0) (farkas 1 .cse36 1 .cse521))) (farkas 1 .cse244 1 .cse520)))) :proves (- .cse36 + .cse32) :EQ)) (.cse93 (! (and- 0 .cse70) :proves (- .cse70 + .cse5) :input)) (.cse94 (! (res .cse510 (res .cse70 (and+ .cse70) (res .cse511 (res .cse433 .cse434 (and- 0 .cse433)) (=>- .cse511))) (let ((.cse512 (= .cse510 .cse92))) (res .cse512 (res .cse92 (res .cse510 (=+1 .cse512) (let ((.cse513 (= 1 .cse172))) (res .cse513 (symm 1 .cse172) (let ((.cse514 (< .cse516 0))) (res .cse514 (let ((.cse515 (< 0 .cse516))) (res .cse515 (trichotomy .cse516 0) (farkas 1 .cse510 1 .cse515))) (farkas 1 .cse513 1 .cse514)))))) (res .cse510 (let ((.cse517 (= 0 .cse516))) (res .cse517 (symm 0 .cse516) (let ((.cse518 (< .cse172 1))) (res .cse518 (let ((.cse519 (< 1 .cse172))) (res .cse519 (trichotomy .cse172 1) (farkas 1 .cse92 1 .cse519))) (farkas 1 .cse517 1 .cse518))))) (=+2 .cse512))) (=-2 .cse512)))) :proves (+ .cse92 - .cse72 - .cse5) :input)) (.cse184 (! (res .cse508 (res .cse190 .cse191 (and- 1 .cse190)) (res .cse509 (not+ .cse509) (=>- .cse508))) :proves (+ .cse183 + .cse163) :input)) (.cse166 (! (res .cse343 .cse344 (let ((.cse506 (< .cse339 0))) (res .cse506 (let ((.cse507 (< 0 .cse339))) (res .cse507 (trichotomy .cse339 0) (farkas 1 .cse163 1 .cse507))) (farkas 1 .cse343 1 .cse506)))) :proves (- .cse163 + .cse2) :EQ)) (.cse104 (! (res .cse495 (res .cse99 (and+ .cse99) (res .cse496 (res .cse429 .cse430 (and- 0 .cse429)) (=>- .cse496))) (let ((.cse497 (= .cse495 .cse0))) (res .cse497 (res .cse0 (res .cse495 (=+1 .cse497) (let ((.cse498 (= .cse499 .cse81))) (res .cse498 (symm .cse499 .cse81) (let ((.cse500 (< .cse502 0))) (res .cse500 (let ((.cse501 (< 0 .cse502))) (res .cse501 (trichotomy .cse502 0) (farkas 1 .cse495 1 .cse501))) (farkas 1 .cse498 1 .cse500)))))) (res .cse495 (let ((.cse503 (= 0 .cse502))) (res .cse503 (symm 0 .cse502) (let ((.cse504 (< .cse81 .cse499))) (res .cse504 (let ((.cse505 (< .cse499 .cse81))) (res .cse505 (trichotomy .cse81 .cse499) (farkas 1 .cse0 1 .cse505))) (farkas 1 .cse503 1 .cse504))))) (=+2 .cse497))) (=-2 .cse497)))) :proves (- .cse102 + .cse0 - .cse98) :input)) (.cse39 (! (res .cse38 .cse52 (let ((.cse493 (< 0 .cse172))) (res .cse493 (let ((.cse494 (< .cse172 0))) (res .cse494 (trichotomy 0 .cse172) (farkas 1 .cse38 1 .cse494))) (farkas 1 .cse30 1 .cse493)))) :proves (+ .cse38 - .cse30) :EQ)) (.cse145 (! (res .cse244 .cse245 (trans 0 .cse172 .cse174)) :proves (+ .cse138 - .cse38 - .cse36) :trans (0 .cse172 .cse174))) (.cse146 (! (res .cse137 (symm .cse174 0) (let ((.cse491 (< .cse174 0))) (res .cse491 (let ((.cse492 (< 0 .cse174))) (res .cse492 (trichotomy .cse174 0) (farkas 1 .cse137 1 .cse492))) (farkas 1 .cse138 1 .cse491)))) :proves (- .cse138 + .cse137) :EQ)) (.cse179 (res .cse5 .cse8 .cse11)) (.cse101 (! (and- 1 .cse99) :proves (- .cse99 + .cse98) :input)) (.cse74 (! (res .cse412 .cse413 (res .cse383 .cse384 (res .cse487 (! (res .cse488 .cse489 (res .cse415 .cse416 (trans 115 s .cse253 x 120))) :proves (+ .cse487 - .cse412 - .cse72 - .cse9 - .cse383) :trans (115 s .cse253 x 120)) .cse490))) :proves (- .cse9 - .cse72) :rup)) (.cse186 (! (and- 1 .cse183) :proves (- .cse183 + .cse185) :input)) (.cse17 (! (res .cse477 (res .cse478 .cse479 (and- 0 .cse478)) (let ((.cse480 (= .cse477 .cse16))) (res .cse480 (res .cse16 (res .cse477 (=+1 .cse480) (let ((.cse481 (= 16 distance))) (res .cse481 (symm 16 distance) (let ((.cse482 (< .cse484 0))) (res .cse482 (let ((.cse483 (< 0 .cse484))) (res .cse483 (trichotomy .cse484 0) (farkas 1 .cse477 1 .cse483))) (farkas 1 .cse481 1 .cse482)))))) (res .cse477 (res .cse61 .cse62 (let ((.cse485 (< distance 16))) (res .cse485 (let ((.cse486 (< 16 distance))) (res .cse486 (trichotomy distance 16) (farkas 1 .cse16 1 .cse486))) (farkas 1 .cse61 1 .cse485)))) (=+2 .cse480))) (=-2 .cse480)))) :proves (+ .cse16) :input)) (.cse113 (! (let ((.cse472 (+ fmt1 .cse327 .cse315 2))) (let ((.cse460 (<= .cse472 0))) (res .cse460 (! (res .cse461 (let ((.cse462 (not .cse460))) (let-proof ((.cse463 (not+ .cse462))) (res .cse462 .cse463 (let ((.cse464 (not .cse462))) (res .cse464 (res .cse465 .cse466 (let ((.cse467 (= .cse465 .cse464))) (res .cse467 (let ((.cse468 (= .cse461 .cse462))) (res .cse468 (res .cse462 (res .cse461 (=+1 .cse468) (res .cse460 .cse463 (farkas 1 .cse461 1 .cse460))) (res .cse461 (res .cse469 .cse470 (res .cse460 (let ((.cse471 (<= 1 .cse472))) (res .cse471 (total-int .cse472 0) (farkas 1 .cse469 1 .cse471))) (not- .cse462))) (=+2 .cse468))) (cong (not .cse461) (not .cse462)))) (=-2 .cse467)))) (not- .cse464)))))) (res .cse473 .cse474 (res .cse465 (and- 1 .cse473) .cse475))) :proves (+ .cse460) :input) (res .cse299 .cse300 (! (let ((.cse476 (<= 1 .cse419))) (res .cse476 (total-int .cse419 0) (farkas 1 .cse299 1 .cse476 1 .cse460))) :proves (- .cse299 + .cse112 - .cse460) :LA (1 (- 1) 1)))))) :proves (+ .cse112) :rup)) (.cse23 (! (res .cse449 (res .cse450 .cse451 (and- 1 .cse450)) (let ((.cse452 (= .cse449 .cse22))) (res .cse452 (res .cse22 (res .cse449 (=+1 .cse452) (let ((.cse453 (= .cse454 arg1))) (res .cse453 (symm .cse454 arg1) (let ((.cse455 (< .cse457 0))) (res .cse455 (let ((.cse456 (< 0 .cse457))) (res .cse456 (trichotomy .cse457 0) (farkas 1 .cse449 1 .cse456))) (farkas 1 .cse453 1 .cse455)))))) (res .cse449 (res .cse50 .cse51 (let ((.cse458 (< arg1 .cse454))) (res .cse458 (let ((.cse459 (< .cse454 arg1))) (res .cse459 (trichotomy arg1 .cse454) (farkas 1 .cse22 1 .cse459))) (farkas 1 .cse50 1 .cse458)))) (=+2 .cse452))) (=-2 .cse452)))) :proves (+ .cse22) :input)) (.cse47 (! (res .cse440 (res .cse392 .cse393 (and- 1 .cse392)) (let ((.cse441 (= .cse440 .cse46))) (res .cse441 (res .cse46 (res .cse440 (=+1 .cse441) (let ((.cse442 (= .cse443 arg0))) (res .cse442 (symm .cse443 arg0) (let ((.cse444 (< .cse446 0))) (res .cse444 (let ((.cse445 (< 0 .cse446))) (res .cse445 (trichotomy .cse446 0) (farkas 1 .cse442 1 .cse445))) (farkas 1 .cse440 1 .cse444)))))) (res .cse440 (res .cse67 .cse68 (let ((.cse447 (< arg0 .cse443))) (res .cse447 (let ((.cse448 (< .cse443 arg0))) (res .cse448 (trichotomy arg0 .cse443) (farkas 1 .cse67 1 .cse448))) (farkas 1 .cse46 1 .cse447)))) (=+2 .cse441))) (=-2 .cse441)))) :proves (+ .cse46) :input)) (.cse140 (! (and- 1 .cse128) :proves (- .cse128 + .cse139) :input)) (.cse131 (! (and- 0 .cse128) :proves (- .cse128 + .cse130) :input)) (.cse89 (! (res .cse436 (res .cse437 .cse438 (and- 1 .cse437)) (res .cse439 (not+ .cse439) (=>- .cse436))) :proves (+ .cse6 + .cse88) :input)) (.cse71 (! (res .cse432 (res .cse433 .cse434 (and- 1 .cse433)) (res .cse435 (not+ .cse435) (=>- .cse432))) :proves (+ .cse70 + .cse30) :input)) (.cse106 (! (res .cse428 (res .cse429 .cse430 (and- 1 .cse429)) (res .cse431 (not+ .cse431) (=>- .cse428))) :proves (+ .cse99 + .cse105) :input)) (.cse155 (! (res .cse151 .cse152 (let ((.cse425 (< .cse427 0))) (res .cse425 (let ((.cse426 (< 0 .cse427))) (res .cse426 (trichotomy .cse427 0) (farkas 1 .cse105 1 .cse426))) (farkas 1 .cse151 1 .cse425)))) :proves (- .cse105 + .cse154) :EQ)) (.cse243 (res .cse132 .cse133 (res .cse134 .cse135 (! .cse424 :proves (+ .cse116 + .cse115 - .cse134) :trichotomy)))) (.cse160 (! (res .cse159 (symm 0 .cse149) (res .cse422 (res .cse423 (trichotomy 0 .cse149) (farkas 1 .cse159 1 .cse423)) (farkas 1 .cse115 1 .cse422))) :proves (+ .cse159 - .cse115) :EQ)) (.cse123 (! (let ((.cse418 (= 0 .cse419))) (res .cse418 (symm 0 .cse419) (let ((.cse420 (< 2 .cse149))) (res .cse420 (let ((.cse421 (< .cse149 2))) (res .cse421 (trichotomy 2 .cse149) (farkas 1 .cse418 1 .cse421))) (farkas 1 .cse111 1 .cse420))))) :proves (+ .cse110 - .cse111) :EQ)) (.cse96 (symm 0 .cse417)) (.cse103 (! (and- 0 .cse99) :proves (- .cse99 + .cse102) :input)) (.cse73 (! (and- 1 .cse70) :proves (- .cse70 + .cse72) :input)) (.cse87 (! (and- 1 .cse6) :proves (- .cse6 + .cse9) :input)) (.cse156 (! (res .cse255 .cse256 (trans .cse253 percent .cse254 s)) :proves (+ .cse72 - .cse130 - .cse102 - .cse139) :trans (.cse253 percent .cse254 s))) (.cse157 (! (res .cse381 .cse382 (res .cse412 .cse413 (let ((.cse414 (= 115 37))) (res .cse414 (! (res .cse386 .cse387 (res .cse415 .cse416 (trans 115 s .cse253 percent 37))) :proves (+ .cse414 - .cse412 - .cse72 - .cse130 - .cse381) :trans (115 s .cse253 percent 37)) (! (farkas 1 .cse414) :proves (- .cse414) :EQ))))) :proves (- .cse130 - .cse72) :rup)) (.cse158 (! (res .cse381 .cse382 (res .cse383 .cse384 (res .cse385 (! (res (= x .cse253) (symm x .cse253) (res .cse386 .cse387 (trans 120 x .cse253 percent 37))) :proves (+ .cse385 - .cse383 - .cse9 - .cse130 - .cse381) :trans (120 x .cse253 percent 37)) .cse388))) :proves (- .cse9 - .cse130) :rup)) (.cse75 (! (res .cse404 (res .cse405 .cse406 (and- 1 .cse405)) (let ((.cse407 (not .cse18))) (let-proof ((.cse411 (not- .cse407))) (res .cse407 (let ((.cse408 (= .cse404 .cse407))) (res .cse408 (res .cse407 (res .cse404 (=+1 .cse408) (res .cse18 (not+ .cse407) (farkas 1 .cse404 1 .cse18))) (res .cse404 (res .cse409 .cse410 (res .cse18 (res .cse63 .cse64 (farkas 1 .cse409 1 .cse63)) .cse411)) (=+2 .cse408))) (=-2 .cse408))) .cse411)))) :proves (- .cse18) :input)) (.cse176 (! (cong (s_count 0) (s_count .cse149)) :proves (+ .cse175 - .cse159) :cong (.cse172 .cse171))) (.cse121 (! (let ((.cse400 (= 0 .cse401))) (res .cse400 (symm 0 .cse401) (let ((.cse402 (< 1 .cse149))) (res .cse402 (let ((.cse403 (< .cse149 1))) (res .cse403 (trichotomy 1 .cse149) (farkas 1 .cse400 1 .cse403))) (farkas 1 .cse114 1 .cse402))))) :proves (+ .cse120 - .cse114) :EQ)) (.cse118 (! (res .cse396 .cse397 (res .cse398 (and- 1 .cse396) .cse399)) :proves (- .cse116) :input))) (let ((.cse143 (= 0 .cse274)) (.cse141 (= .cse267 0)) (.cse125 (= .cse274 0)) (.cse107 (= .cse150 .cse69)) (.cse167 (= .cse169 .cse69)) (.cse24 (= .cse279 0)) (.cse40 (= 0 arg1)) (.cse48 (<= 1 .cse58)) (.cse65 (= 0 .cse330)) (.cse19 (<= .cse58 0)) (.cse41 (= arg1 0)) (.cse280 (< 0 arg1)) (.cse281 (< arg1 0)) (.cse26 (= fmt0 .cse174)) (.cse236 (= 0 fmt0)) (.cse27 (= .cse317 0)) (.cse53 (= 0 .cse391))) (let-proof ((.cse144 (symm 0 .cse274)) (.cse153 (trans .cse150 .cse81 .cse69)) (.cse223 (symm 0 arg1)) (.cse49 (total-int .cse58 0)) (.cse66 (symm 0 .cse330)) (.cse29 (! (res .cse392 .cse393 (and- 0 .cse392)) :proves (+ .cse28) :input)) (.cse237 (symm 0 fmt0)) (.cse54 (symm 0 .cse391)) (.cse162 (! (res .cse112 .cse113 (res .cse116 (let-proof ((.cse378 (! (cong (s_count 1) (s_count .cse149)) :proves (+ .cse161 - .cse120) :cong (.cse174 .cse171)))) (res .cse120 (res .cse114 (let ((.cse347 (= .cse350 .cse171))) (let-proof ((.cse348 (! (cong (s_count 2) (s_count .cse149)) :proves (+ .cse347 - .cse110) :cong (.cse350 .cse171))) (.cse358 (res .cse389 .cse390 (and- 1 .cse389)))) (let-proof ((.cse337 (! (res .cse381 .cse382 (res .cse383 .cse384 (res .cse385 (! (res (= x .cse254) (symm x .cse254) (res .cse386 .cse387 (trans 120 x .cse254 percent 37))) :proves (+ .cse385 - .cse383 - .cse185 - .cse102 - .cse381) :trans (120 x .cse254 percent 37)) .cse388))) :proves (- .cse102 - .cse185) :rup)) (.cse335 (res .cse175 .cse176 (! (trans .cse174 .cse172 .cse171) :proves (+ .cse161 - .cse36 - .cse175) :trans (.cse174 .cse172 .cse171)))) (.cse333 (! (res .cse379 (res .cse357 .cse358 (and- 1 .cse357)) (res .cse380 (not+ .cse380) (=>- .cse379))) :proves (+ .cse331 + .cse332) :input)) (.cse334 (res .cse347 .cse348 (! (res (= .cse174 .cse350) (symm .cse174 .cse350) (trans .cse174 .cse350 .cse171)) :proves (+ .cse161 - .cse332 - .cse347) :trans (.cse174 .cse350 .cse171)))) (.cse336 (! (and- 0 .cse331) :proves (- .cse331 + .cse102) :input))) (res .cse2 (res .cse163 (res .cse183 .cse184 (res .cse185 .cse186 (res .cse139 (res .cse102 (res .cse128 (res .cse331 (res .cse36 .cse129 (res .cse332 .cse333 (res .cse159 (res .cse115 (res .cse111 .cse117 (res .cse110 .cse123 .cse334)) .cse160) .cse335))) .cse336) .cse140) .cse337) .cse252))) .cse166) (! (res .cse112 .cse113 (res .cse116 (res .cse120 (res .cse114 (res .cse163 (! (let ((.cse338 (= 0 .cse339))) (res .cse338 (symm 0 .cse339) (let ((.cse340 (< .cse150 .cse169))) (res .cse340 (let ((.cse341 (< .cse169 .cse150))) (res .cse341 (trichotomy .cse150 .cse169) (farkas 1 .cse2 1 .cse341))) (farkas 1 .cse338 1 .cse340))))) :proves (+ .cse163 - .cse2) :EQ) (res .cse90 (res .cse79 (res .cse110 (res .cse111 (res .cse115 .cse243 (res .cse159 .cse160 (res .cse36 (res .cse128 .cse129 (res .cse130 .cse131 (res .cse139 .cse140 (res .cse72 (res .cse102 (res .cse99 (res .cse105 .cse106 (let ((.cse342 (= .cse69 .cse169))) (res .cse342 (! (res .cse115 .cse173 (cong (x_count .cse149) (x_count 0))) :proves (+ .cse342 - .cse159) :cong (.cse69 .cse169)) (! (res .cse151 .cse152 (res .cse343 .cse344 (trans .cse69 .cse169 .cse150 .cse81))) :proves (+ .cse79 - .cse342 - .cse163 - .cse105) :trans (.cse69 .cse169 .cse150 .cse81))))) .cse103) .cse156) .cse157)))) .cse335))) .cse123) .cse124) .cse91) (! (res .cse112 .cse113 (res .cse116 (res .cse120 (res .cse114 (res .cse128 (res .cse36 .cse129 (res .cse159 (res .cse115 (res .cse111 .cse117 (res .cse110 .cse123 (res .cse332 (res .cse331 .cse333 (res .cse102 .cse336 (res .cse345 (! (and- 1 .cse331) :proves (- .cse331 + .cse345) :input) (let ((.cse353 (+ .cse350 .cse372))) (let ((.cse346 (= .cse353 0))) (res .cse346 (res .cse347 .cse348 (! (let ((.cse349 (= .cse171 .cse350))) (res .cse349 (symm .cse171 .cse350) (let ((.cse351 (< .cse353 0))) (res .cse351 (let ((.cse352 (< 0 .cse353))) (res .cse352 (trichotomy .cse353 0) (farkas 1 .cse347 1 .cse352))) (farkas 1 .cse349 1 .cse351))))) :proves (- .cse347 + .cse346) :EQ)) (! (res .cse16 .cse17 (res .cse18 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse185 (let ((.cse364 (+ .cse350 .cse215 (- 1)))) (let ((.cse354 (= .cse364 0))) (res .cse354 (! (res .cse355 (res .cse331 (and+ .cse331) (res .cse356 (res .cse357 .cse358 (and- 0 .cse357)) (=>- .cse356))) (let ((.cse359 (= .cse355 .cse354))) (res .cse359 (res .cse354 (res .cse355 (=+1 .cse359) (let ((.cse360 (= .cse361 .cse350))) (res .cse360 (symm .cse361 .cse350) (let ((.cse362 (< .cse364 0))) (res .cse362 (let ((.cse363 (< 0 .cse364))) (res .cse363 (trichotomy .cse364 0) (farkas 1 .cse355 1 .cse363))) (farkas 1 .cse360 1 .cse362)))))) (res .cse355 (let ((.cse365 (= 0 .cse364))) (res .cse365 (symm 0 .cse364) (let ((.cse366 (< .cse350 .cse361))) (res .cse366 (let ((.cse367 (< .cse361 .cse350))) (res .cse367 (trichotomy .cse350 .cse361) (farkas 1 .cse354 1 .cse367))) (farkas 1 .cse365 1 .cse366))))) (=+2 .cse359))) (=-2 .cse359)))) :proves (+ .cse354 - .cse345 - .cse102) :input) (res .cse183 (res .cse163 .cse184 (res .cse2 .cse166 (res .cse32 .cse97 (let ((.cse368 (= 0 .cse353))) (let-proof ((.cse369 (symm 0 .cse353))) (let-proof ((.cse371 (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse95 .cse96 (res .cse67 .cse68 (res .cse368 .cse369 (farkas 4 .cse354 4 .cse154 4 .cse137 4 .cse368 4 .cse2 1 .cse67 4 .cse88 1 .cse22 4 .cse95 1 .cse63 1 .cse61)))))) :proves (- .cse354 - .cse154 - .cse137 - .cse346 - .cse2 - .cse46 - .cse88 - .cse22 - .cse90 + .cse18 - .cse16) :LA (4 4 4 (- 4) 4 (- 1) 4 1 (- 4) (- 1) (- 1))))) (res .cse9 (res .cse6 (res .cse88 .cse89 (res .cse137 (res .cse138 (res .cse38 (res .cse30 (res .cse70 .cse71 (res .cse72 .cse73 (res .cse98 (res .cse5 .cse93 (res .cse99 (res .cse92 .cse94 (res .cse105 .cse106 (res .cse154 .cse155 (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse95 .cse96 (res .cse67 .cse68 (res .cse368 .cse369 (farkas 4 .cse354 4 .cse154 4 .cse32 4 .cse368 4 .cse2 1 .cse67 4 .cse88 1 .cse22 4 .cse95 4 .cse92 1 .cse63 1 .cse61)))))) :proves (- .cse354 - .cse154 - .cse32 - .cse346 - .cse2 - .cse46 - .cse88 - .cse22 - .cse90 - .cse92 + .cse18 - .cse16) :LA (4 4 4 (- 4) 4 (- 1) 4 1 (- 4) 4 (- 1) (- 1)))))) .cse101)) (! (res (= s .cse370) (symm s .cse370) (trans .cse253 s .cse370 x)) :proves (+ .cse9 - .cse72 - .cse345 - .cse98) :trans (.cse253 s .cse370 x))))) .cse39) .cse145) .cse146) (! (res .cse16 .cse17 (res .cse18 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse185 (res .cse183 (res .cse163 .cse184 (res .cse2 .cse166 (res .cse154 (res .cse0 (res .cse105 (res .cse98 (res .cse99 .cse106 .cse101) .cse104) .cse155) (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse95 .cse96 (res .cse67 .cse68 (res .cse368 .cse369 (farkas 4 .cse354 4 .cse137 4 .cse368 4 .cse2 4 .cse0 1 .cse67 4 .cse88 1 .cse22 4 .cse95 1 .cse63 1 .cse61)))))) :proves (- .cse354 - .cse137 - .cse346 - .cse2 - .cse0 - .cse46 - .cse88 - .cse22 - .cse90 + .cse18 - .cse16) :LA (4 4 (- 4) 4 4 (- 1) 4 1 (- 4) (- 1) (- 1)))) .cse371))) .cse186) .cse337))) .cse75)) :proves (- .cse88 - .cse354 - .cse137 - .cse102 - .cse90 - .cse346) :rup))) .cse87) (! (res .cse16 .cse17 (res .cse18 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse72 (res .cse98 (res .cse70 (res .cse99 (res .cse30 .cse71 (res .cse38 .cse39 (res .cse138 .cse145 (res .cse137 .cse146 (res .cse105 .cse106 (res .cse154 .cse155 (res .cse88 (res .cse4 (res .cse6 .cse89 .cse179) (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse95 .cse96 (res .cse67 .cse68 (res .cse368 .cse369 (farkas 4 .cse354 4 .cse154 4 .cse137 4 .cse368 4 .cse4 4 .cse2 1 .cse67 1 .cse22 4 .cse95 1 .cse63 1 .cse61)))))) :proves (- .cse354 - .cse154 - .cse137 - .cse346 - .cse4 - .cse2 - .cse46 - .cse22 - .cse90 + .cse18 - .cse16) :LA (4 4 4 (- 4) 4 4 (- 1) 1 (- 4) (- 1) (- 1)))) .cse371))))))) .cse101) .cse73) (! (res (= x .cse370) (symm x .cse370) (trans .cse253 x .cse370 s)) :proves (+ .cse72 - .cse9 - .cse98 - .cse345) :trans (.cse253 x .cse370 s))) .cse74))) .cse75)) :proves (- .cse345 - .cse346 - .cse9 - .cse36 - .cse354 - .cse90 - .cse2) :rup)))))))) .cse186)))) .cse337))) .cse75)) :proves (- .cse346 - .cse345 - .cse90 - .cse102 - .cse36) :rup))))))) .cse334))) .cse160) .cse335)) (! (res .cse16 .cse17 (res .cse18 (res .cse112 .cse113 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse116 (res .cse120 (res .cse114 (res .cse139 .cse140 (res .cse130 .cse131 (res .cse9 (res .cse72 (res .cse102 (res .cse6 (res .cse70 (res .cse99 (res .cse331 (res .cse88 .cse89 (res .cse30 .cse71 (res .cse105 .cse106 (res .cse154 .cse155 (let ((.cse376 (+ .cse172 .cse372))) (let ((.cse373 (= .cse376 0))) (res .cse373 (res .cse175 (res .cse332 .cse333 (res .cse110 (res .cse111 (res .cse115 .cse243 (res .cse159 .cse160 .cse176)) .cse123) .cse334)) (! (res .cse170 (symm .cse171 .cse172) (let ((.cse374 (< .cse376 0))) (res .cse374 (let ((.cse375 (< 0 .cse376))) (res .cse375 (trichotomy .cse376 0) (farkas 1 .cse175 1 .cse375))) (farkas 1 .cse170 1 .cse374)))) :proves (- .cse175 + .cse373) :EQ)) (! (res .cse61 .cse62 (let ((.cse377 (= 0 .cse376))) (res .cse377 (symm 0 .cse376) (res .cse63 .cse64 (res .cse95 .cse96 (res .cse67 .cse68 (farkas 4 .cse154 4 .cse30 4 .cse2 1 .cse67 4 .cse88 1 .cse22 4 .cse95 1 .cse63 4 .cse377 1 .cse61))))))) :proves (- .cse154 - .cse30 - .cse2 - .cse46 - .cse88 - .cse22 - .cse90 + .cse18 - .cse373 - .cse16) :LA (4 4 4 (- 1) 4 1 (- 4) (- 1) (- 4) (- 1)))))))))) .cse336) .cse103) .cse73) .cse87) .cse156) .cse157) .cse158))) .cse121) .cse378) .cse118)))) .cse75)) :proves (- .cse90 + .cse161 - .cse128 - .cse2) :rup)) .cse121) .cse378) .cse118)) :proves (+ .cse161 - .cse90 - .cse2) :rup))) .cse121) .cse378) .cse118)) :proves (+ .cse161 - .cse2) :rup))))) .cse121) .cse378)) .cse118)) :proves (+ .cse161) :rup)) (.cse165 (! (res .cse177 .cse178 (let ((.cse328 (< .cse330 0))) (res .cse328 (let ((.cse329 (< 0 .cse330))) (res .cse329 (trichotomy .cse330 0) (farkas 1 .cse161 1 .cse329))) (farkas 1 .cse177 1 .cse328)))) :proves (- .cse161 + .cse20) :EQ))) (let-proof ((.cse21 (! (res .cse161 .cse162 .cse165) :proves (+ .cse20) :rup)) (.cse34 (let ((.cse320 (<= .cse317 0))) (res .cse320 (! (res .cse236 .cse237 (let ((.cse321 (<= 1 .cse317))) (res .cse321 (total-int .cse317 0) (farkas 1 .cse321 1 .cse32 1 .cse30 1 .cse236)))) :proves (+ .cse320 - .cse32 - .cse30 - .cse28) :LA ((- 1) 1 1 (- 1))) (let ((.cse326 (+ .cse174 .cse327 1))) (let ((.cse322 (<= .cse326 0))) (res .cse322 (! (let ((.cse323 (< .cse317 0))) (res .cse323 (let ((.cse324 (< 0 .cse317))) (res .cse324 (trichotomy .cse317 0) (farkas 1 .cse324 1 .cse320))) (let ((.cse325 (<= 1 .cse326))) (res .cse325 (total-int .cse326 0) (farkas 1 .cse325 1 .cse323))))) :proves (+ .cse322 + .cse27 - .cse320) :trichotomy) (! (res .cse38 .cse52 (res .cse53 .cse54 (farkas 1 .cse53 1 .cse38 1 .cse28 1 .cse322))) :proves (- .cse32 - .cse30 - .cse28 - .cse322) :LA ((- 1) (- 1) 1 1)))))))) (.cse35 (! (let ((.cse316 (= 0 .cse317))) (res .cse316 (symm 0 .cse317) (let ((.cse318 (< fmt0 .cse174))) (res .cse318 (let ((.cse319 (< .cse174 fmt0))) (res .cse319 (trichotomy fmt0 .cse174) (farkas 1 .cse316 1 .cse319))) (farkas 1 .cse27 1 .cse318))))) :proves (+ .cse26 - .cse27) :EQ)) (.cse42 (! (res .cse28 .cse29 (let ((.cse294 (+ arg1 .cse313 .cse314 .cse315 5))) (let ((.cse282 (<= .cse294 0))) (res .cse282 (! (res .cse283 (let ((.cse284 (not .cse282))) (let-proof ((.cse285 (not+ .cse284))) (res .cse284 .cse285 (let ((.cse286 (not .cse284))) (res .cse286 (res .cse287 .cse288 (let ((.cse289 (= .cse287 .cse286))) (res .cse289 (let ((.cse290 (= .cse283 .cse284))) (res .cse290 (res .cse284 (res .cse283 (=+1 .cse290) (res .cse282 .cse285 (farkas 1 .cse283 1 .cse282))) (res .cse283 (res .cse291 .cse292 (res .cse282 (let ((.cse293 (<= 1 .cse294))) (res .cse293 (total-int .cse294 0) (farkas 1 .cse291 1 .cse293))) (not- .cse284))) (=+2 .cse290))) (cong (not .cse283) (not .cse284)))) (=-2 .cse289)))) (not- .cse286)))))) (res .cse295 .cse296 (res .cse287 (and- 1 .cse295) .cse297))) :proves (+ .cse282) :input) (res .cse46 .cse47 (let ((.cse298 (<= .cse226 0))) (let-proof ((.cse311 (! (res .cse18 (res .cse28 .cse29 (! (res .cse63 .cse64 (res .cse236 .cse237 (farkas 1 .cse298 1 .cse236 1 .cse63))) :proves (- .cse298 - .cse28 + .cse18) :LA (1 (- 1) (- 1)))) .cse75) :proves (- .cse298) :rup))) (res .cse298 (res .cse299 .cse300 (let ((.cse302 (<= arg1 0)) (.cse305 (+ arg1 (- 1)))) (let ((.cse301 (= .cse305 0)) (.cse308 (<= 1 arg1))) (let-proof ((.cse309 (total-int arg1 0)) (.cse310 (! (res .cse281 (res .cse280 (trichotomy arg1 0) (farkas 1 .cse280 1 .cse302)) (let ((.cse312 (<= 1 .cse226))) (res .cse312 (total-int .cse226 0) (farkas 1 .cse312 1 .cse281)))) :proves (- .cse302 + .cse41 + .cse298) :trichotomy))) (res .cse301 (res .cse302 (let ((.cse303 (<= .cse305 0))) (res .cse303 (! (let ((.cse304 (<= 1 .cse305))) (res .cse304 (total-int .cse305 0) (res .cse67 .cse68 (farkas 1 .cse299 1 .cse67 1 .cse282 1 .cse28 1 .cse304)))) :proves (- .cse299 - .cse46 - .cse282 - .cse28 + .cse303) :LA (1 (- 1) 1 1 (- 1))) (! (let ((.cse306 (< .cse305 0))) (res .cse306 (let ((.cse307 (< 0 .cse305))) (res .cse307 (trichotomy .cse305 0) (farkas 1 .cse307 1 .cse303))) (res .cse308 .cse309 (farkas 1 .cse308 1 .cse306)))) :proves (- .cse303 + .cse301 + .cse302) :trichotomy))) .cse310) (! (res .cse16 .cse17 (res .cse22 .cse23 (res .cse28 .cse29 (res .cse46 .cse47 (res .cse298 (res .cse19 (! (res .cse48 .cse49 (res .cse50 .cse51 (res .cse236 .cse237 (res .cse38 .cse52 (res .cse53 .cse54 (farkas 4 .cse53 4 .cse38 1 .cse46 1 .cse301 1 .cse236 1 .cse50 4 .cse20 4 .cse48 1 .cse16)))))) :proves (- .cse32 - .cse30 - .cse46 - .cse301 - .cse28 - .cse22 - .cse20 + .cse19 - .cse16) :LA ((- 4) (- 4) 1 1 (- 1) (- 1) 4 (- 4) 1)) (res .cse302 (! (res .cse308 .cse309 (res .cse61 .cse62 (res .cse65 .cse66 (res .cse67 .cse68 (farkas 4 .cse32 4 .cse30 1 .cse67 1 .cse28 1 .cse22 4 .cse65 4 .cse19 1 .cse61 1 .cse308))))) :proves (- .cse32 - .cse30 - .cse46 - .cse28 - .cse22 - .cse20 - .cse19 - .cse16 + .cse302) :LA (4 4 (- 1) 1 1 (- 4) 4 (- 1) (- 1))) .cse310)) .cse311))))) :proves (- .cse301 + .cse41 - .cse32 - .cse30 - .cse20) :rup)))))) .cse311)))))))) :proves (- .cse30 + .cse41 - .cse32 - .cse20) :rup)) (.cse43 (! (res .cse40 .cse223 (res .cse280 (res .cse281 (trichotomy 0 arg1) (farkas 1 .cse40 1 .cse281)) (farkas 1 .cse41 1 .cse280))) :proves (+ .cse40 - .cse41) :EQ)) (.cse44 (! (res .cse244 .cse245 (res .cse41 (symm arg1 0) (res (= .cse174 fmt0) (symm .cse174 fmt0) (trans arg1 0 .cse172 .cse174 fmt0)))) :proves (+ .cse25 - .cse40 - .cse38 - .cse36 - .cse26) :trans (arg1 0 .cse172 .cse174 fmt0))) (.cse45 (! (let ((.cse276 (= fmt0 arg1))) (res .cse276 (symm fmt0 arg1) (let ((.cse277 (< .cse279 0))) (res .cse277 (let ((.cse278 (< 0 .cse279))) (res .cse278 (trichotomy .cse279 0) (farkas 1 .cse25 1 .cse278))) (farkas 1 .cse276 1 .cse277))))) :proves (- .cse25 + .cse24) :EQ)) (.cse168 (! (cong (x_count 0) (x_count .cse149)) :proves (+ .cse167 - .cse159) :cong (.cse169 .cse69))) (.cse122 (! (cong (x_count 1) (x_count .cse149)) :proves (+ .cse107 - .cse120) :cong (.cse150 .cse69))) (.cse108 (! (res .cse151 .cse152 (res .cse148 .cse275 .cse153)) :proves (+ .cse107 - .cse105 - .cse79) :trans (.cse150 .cse81 .cse69))) (.cse126 (! (let ((.cse271 (= .cse69 .cse150))) (res .cse271 (symm .cse69 .cse150) (let ((.cse272 (< .cse274 0))) (res .cse272 (let ((.cse273 (< 0 .cse274))) (res .cse273 (trichotomy .cse274 0) (farkas 1 .cse107 1 .cse273))) (farkas 1 .cse271 1 .cse272))))) :proves (- .cse107 + .cse125) :EQ)) (.cse142 (! (res .cse258 (res .cse128 (and+ .cse128) (res .cse259 (res .cse260 .cse261 (and- 0 .cse260)) (=>- .cse259))) (let ((.cse262 (= .cse258 .cse141))) (res .cse262 (res .cse141 (res .cse258 (=+1 .cse262) (let ((.cse263 (= .cse264 .cse174))) (res .cse263 (symm .cse264 .cse174) (let ((.cse265 (< .cse267 0))) (res .cse265 (let ((.cse266 (< 0 .cse267))) (res .cse266 (trichotomy .cse267 0) (farkas 1 .cse258 1 .cse266))) (farkas 1 .cse263 1 .cse265)))))) (res .cse258 (let ((.cse268 (= 0 .cse267))) (res .cse268 (symm 0 .cse267) (let ((.cse269 (< .cse174 .cse264))) (res .cse269 (let ((.cse270 (< .cse264 .cse174))) (res .cse270 (trichotomy .cse174 .cse264) (farkas 1 .cse141 1 .cse270))) (farkas 1 .cse268 1 .cse269))))) (=+2 .cse262))) (=-2 .cse262)))) :proves (- .cse139 - .cse130 + .cse141) :input)) (.cse180 (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse67 .cse68 (res .cse143 .cse144 (farkas 4 .cse137 4 .cse4 4 .cse2 4 .cse143 1 .cse67 1 .cse22 4 .cse65 1 .cse63 1 .cse61)))))) :proves (- .cse137 - .cse4 - .cse2 - .cse125 - .cse46 - .cse22 - .cse20 + .cse18 - .cse16) :LA (4 4 4 (- 4) (- 1) 1 (- 4) (- 1) (- 1)))) (.cse181 (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse67 .cse68 (res .cse143 .cse144 (farkas 4 .cse137 4 .cse2 4 .cse143 1 .cse67 4 .cse88 1 .cse22 4 .cse65 1 .cse63 1 .cse61)))))) :proves (- .cse137 - .cse2 - .cse125 - .cse46 - .cse88 - .cse22 - .cse20 + .cse18 - .cse16) :LA (4 4 (- 4) (- 1) 4 1 (- 4) (- 1) (- 1))))) (let-proof ((.cse182 (! (res .cse16 .cse17 (res .cse18 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse72 .cse73 (res .cse5 .cse93 (res .cse92 .cse94 (res .cse9 (res .cse6 (res .cse88 .cse89 (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse67 .cse68 (res .cse143 .cse144 (farkas 4 .cse32 4 .cse2 4 .cse143 1 .cse67 4 .cse88 1 .cse22 4 .cse65 4 .cse92 1 .cse63 1 .cse61)))))) :proves (- .cse32 - .cse2 - .cse125 - .cse46 - .cse88 - .cse22 - .cse20 - .cse92 + .cse18 - .cse16) :LA (4 4 (- 4) (- 1) 4 1 (- 4) 4 (- 1) (- 1)))) .cse87) .cse74)))))) .cse75)) :proves (- .cse70 - .cse125 - .cse20 - .cse32 - .cse2) :rup)) (.cse147 (! (res .cse16 .cse17 (res .cse18 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse88 (res .cse4 (res .cse6 .cse89 (res .cse5 .cse8 (res .cse9 .cse87 .cse11))) .cse180) .cse181))) .cse75)) :proves (- .cse137 - .cse125 - .cse20 - .cse2) :rup)) (.cse164 (! (res .cse183 .cse184 (! (res .cse16 .cse17 (res .cse18 (res .cse20 .cse21 (res .cse112 .cse113 (res .cse22 .cse23 (res .cse28 .cse29 (res .cse46 .cse47 (res .cse116 (res .cse130 (! (and- 0 .cse183) :proves (- .cse183 + .cse130) :input) (res .cse185 .cse186 (let ((.cse197 (+ .cse150 .cse257 (- 1)))) (let ((.cse198 (= 0 .cse197)) (.cse187 (= .cse197 0))) (let-proof ((.cse199 (symm 0 .cse197))) (res .cse187 (! (res .cse188 (res .cse183 (and+ .cse183) (res .cse189 (res .cse190 .cse191 (and- 0 .cse190)) (=>- .cse189))) (let ((.cse192 (= .cse188 .cse187))) (res .cse192 (res .cse187 (res .cse188 (=+1 .cse192) (let ((.cse193 (= .cse194 .cse150))) (res .cse193 (symm .cse194 .cse150) (let ((.cse195 (< .cse197 0))) (res .cse195 (let ((.cse196 (< 0 .cse197))) (res .cse196 (trichotomy .cse197 0) (farkas 1 .cse188 1 .cse196))) (farkas 1 .cse193 1 .cse195)))))) (res .cse188 (res .cse198 .cse199 (let ((.cse200 (< .cse150 .cse194))) (res .cse200 (let ((.cse201 (< .cse194 .cse150))) (res .cse201 (trichotomy .cse150 .cse194) (farkas 1 .cse187 1 .cse201))) (farkas 1 .cse198 1 .cse200)))) (=+2 .cse192))) (=-2 .cse192)))) :proves (- .cse185 - .cse130 + .cse187) :input) (res .cse72 (res .cse9 (res .cse102 (res .cse139 (res .cse125 (res .cse107 (res .cse70 (res .cse6 (res .cse99 (res .cse128 (res .cse30 .cse71 (res .cse38 .cse39 (res .cse88 .cse89 (res .cse105 .cse106 (res .cse79 (res .cse36 .cse129 (res .cse32 .cse97 (let ((.cse202 (= .cse69 0))) (res .cse202 (let ((.cse249 (+ .cse69 (- 1)))) (let ((.cse203 (= .cse249 0))) (res .cse203 (res .cse27 .cse34 (let ((.cse207 (+ .cse169 .cse215))) (let ((.cse204 (= .cse207 0)) (.cse213 (= 0 .cse169))) (let-proof ((.cse214 (symm 0 .cse169))) (res .cse204 (let ((.cse205 (<= .cse207 0))) (res .cse205 (! (res .cse38 .cse52 (res .cse53 .cse54 (let ((.cse206 (<= 1 .cse207))) (res .cse206 (total-int .cse207 0) (farkas 1 .cse206 1 .cse53 1 .cse38 1 .cse88))))) :proves (+ .cse205 - .cse32 - .cse30 - .cse88) :LA ((- 1) (- 1) (- 1) 1)) (let ((.cse212 (+ .cse169 .cse215 1))) (let ((.cse208 (<= .cse212 0))) (res .cse208 (! (let ((.cse209 (< .cse207 0))) (res .cse209 (let ((.cse210 (< 0 .cse207))) (res .cse210 (trichotomy .cse207 0) (farkas 1 .cse210 1 .cse205))) (let ((.cse211 (<= 1 .cse212))) (res .cse211 (total-int .cse212 0) (farkas 1 .cse211 1 .cse209))))) :proves (+ .cse208 + .cse204 - .cse205) :trichotomy) (! (res .cse213 .cse214 (farkas 1 .cse32 1 .cse30 1 .cse213 1 .cse208)) :proves (- .cse32 - .cse30 - .cse88 - .cse208) :LA (1 1 (- 1) 1))))))) (let ((.cse216 (= 0 .cse69))) (res .cse216 (let ((.cse217 (= 1 .cse69))) (res .cse217 (res .cse26 .cse35 (let ((.cse218 (= .cse169 .cse174))) (res .cse218 (! (let ((.cse219 (= 0 .cse207))) (res .cse219 (symm 0 .cse207) (let ((.cse220 (< .cse169 .cse174))) (res .cse220 (let ((.cse221 (< .cse174 .cse169))) (res .cse221 (trichotomy .cse169 .cse174) (farkas 1 .cse204 1 .cse221))) (farkas 1 .cse219 1 .cse220))))) :proves (+ .cse218 - .cse204) :EQ) (res .cse41 .cse42 (let ((.cse222 (= 1 .cse226))) (res .cse222 (! (res .cse40 .cse223 (let ((.cse224 (< 1 .cse226))) (res .cse224 (let ((.cse225 (< .cse226 1))) (res .cse225 (trichotomy 1 .cse226) (farkas 1 .cse40 1 .cse225))) (farkas 1 .cse41 1 .cse224)))) :proves (+ .cse222 - .cse41) :EQ) (res .cse40 .cse43 (res .cse25 .cse44 (res .cse24 .cse45 (let ((.cse230 (+ arg1 .cse238 1))) (let ((.cse227 (= .cse230 0))) (res .cse227 (let ((.cse228 (<= .cse230 0))) (res .cse228 (! (res .cse213 .cse214 (res .cse198 .cse199 (let ((.cse229 (<= 1 .cse230))) (res .cse229 (total-int .cse230 0) (farkas 1 .cse229 1 .cse198 1 .cse213 1 .cse24 1 .cse28))))) :proves (+ .cse228 - .cse187 - .cse88 - .cse24 - .cse28) :LA ((- 1) (- 1) (- 1) 1 1)) (let ((.cse235 (+ arg1 .cse238 2))) (let ((.cse231 (<= .cse235 0))) (res .cse231 (! (let ((.cse232 (< .cse230 0))) (res .cse232 (let ((.cse233 (< 0 .cse230))) (res .cse233 (trichotomy .cse230 0) (farkas 1 .cse233 1 .cse228))) (let ((.cse234 (<= 1 .cse235))) (res .cse234 (total-int .cse235 0) (farkas 1 .cse234 1 .cse232))))) :proves (+ .cse231 + .cse227 - .cse228) :trichotomy) (! (res .cse63 .cse64 (res .cse236 .cse237 (farkas 1 .cse187 1 .cse88 1 .cse236 1 .cse63 1 .cse231))) :proves (- .cse187 - .cse88 - .cse28 + .cse18 - .cse231) :LA (1 1 (- 1) (- 1) 1))))))) (let ((.cse239 (= .cse226 .cse150))) (res .cse239 (! (let ((.cse240 (= 0 .cse230))) (res .cse240 (symm 0 .cse230) (let ((.cse241 (< .cse226 .cse150))) (res .cse241 (let ((.cse242 (< .cse150 .cse226))) (res .cse242 (trichotomy .cse226 .cse150) (farkas 1 .cse227 1 .cse242))) (farkas 1 .cse240 1 .cse241))))) :proves (+ .cse239 - .cse227) :EQ) (res .cse110 (res .cse111 (res .cse120 (res .cse114 (res .cse115 .cse243 (res .cse159 .cse160 (res .cse167 .cse168 (! (res .cse244 .cse245 (res (= .cse174 .cse169) (symm .cse174 .cse169) (trans 0 .cse172 .cse174 .cse169 .cse69))) :proves (+ .cse216 - .cse38 - .cse36 - .cse218 - .cse167) :trans (0 .cse172 .cse174 .cse169 .cse69))))) .cse121) (res .cse107 .cse122 (! (trans 1 .cse226 .cse150 .cse69) :proves (+ .cse217 - .cse222 - .cse239 - .cse107) :trans (1 .cse226 .cse150 .cse69)))) .cse123) .cse124))))))))))))))) (! (let ((.cse246 (= .cse69 1))) (res .cse246 (symm .cse69 1) (let ((.cse247 (< .cse249 0))) (res .cse247 (let ((.cse248 (< 0 .cse249))) (res .cse248 (trichotomy .cse249 0) (farkas 1 .cse246 1 .cse248))) (farkas 1 .cse217 1 .cse247))))) :proves (- .cse217 + .cse203) :EQ))) (! (res .cse202 (symm .cse69 0) (let ((.cse250 (< .cse69 0))) (res .cse250 (let ((.cse251 (< 0 .cse69))) (res .cse251 (trichotomy .cse69 0) (farkas 1 .cse202 1 .cse251))) (farkas 1 .cse216 1 .cse250)))) :proves (- .cse216 + .cse202) :EQ)))))))) (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse67 .cse68 (farkas 4 .cse203 4 .cse32 4 .cse30 1 .cse67 1 .cse22 4 .cse65 1 .cse63 1 .cse61))))) :proves (- .cse203 - .cse32 - .cse30 - .cse46 - .cse22 - .cse20 + .cse18 - .cse16) :LA (4 4 4 (- 1) 1 (- 4) (- 1) (- 1)))))) (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse67 .cse68 (farkas 4 .cse32 4 .cse30 1 .cse67 4 .cse202 1 .cse22 4 .cse65 1 .cse63 1 .cse61))))) :proves (- .cse32 - .cse30 - .cse46 - .cse202 - .cse22 - .cse20 + .cse18 - .cse16) :LA (4 4 (- 1) 4 1 (- 4) (- 1) (- 1))))))) .cse108))))) .cse140) .cse103) .cse87) .cse73) .cse126) (! (res .cse16 .cse17 (res .cse18 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse72 (res .cse9 (res .cse70 (res .cse6 (res .cse30 .cse71 (res .cse88 .cse89 (res .cse32 (res .cse141 (res .cse36 (res .cse139 (res .cse128 .cse129 .cse140) .cse142) .cse97) (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse67 .cse68 (res .cse143 .cse144 (farkas 4 .cse30 4 .cse143 4 .cse187 1 .cse67 4 .cse88 1 .cse22 4 .cse65 1 .cse63 4 .cse141 1 .cse61)))))) :proves (- .cse30 - .cse125 - .cse187 - .cse46 - .cse88 - .cse22 - .cse20 + .cse18 - .cse141 - .cse16) :LA (4 (- 4) 4 (- 1) 4 1 (- 4) (- 1) 4 (- 1)))) (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse67 .cse68 (res .cse143 .cse144 (farkas 4 .cse32 4 .cse30 4 .cse143 4 .cse187 1 .cse67 4 .cse88 1 .cse22 4 .cse65 1 .cse63 1 .cse61)))))) :proves (- .cse32 - .cse30 - .cse125 - .cse187 - .cse46 - .cse88 - .cse22 - .cse20 + .cse18 - .cse16) :LA (4 4 (- 4) 4 (- 1) 4 1 (- 4) (- 1) (- 1)))))) .cse87) .cse73) .cse158) .cse157))) .cse75)) :proves (- .cse125 - .cse187 - .cse20 - .cse130) :rup)) .cse252) (! (res .cse255 .cse256 (trans .cse253 percent .cse254 x)) :proves (+ .cse9 - .cse130 - .cse102 - .cse185) :trans (.cse253 percent .cse254 x))) .cse158) .cse157))))))) .cse118)))))) .cse75)) :proves (- .cse183) :rup)) :proves (+ .cse163) :rup))) (let-proof ((.cse3 (! (res .cse163 .cse164 .cse166) :proves (+ .cse2) :rup)) (.cse127 (! (res .cse137 (res .cse138 (res .cse38 (res .cse32 .cse97 (res .cse30 (res .cse70 .cse71 .cse182) .cse39)) .cse145) .cse146) .cse147) :proves (- .cse36 - .cse125 - .cse20 - .cse2) :rup)) (.cse119 (! (res .cse159 .cse160 (! (res .cse161 .cse162 (res .cse163 .cse164 (! (res .cse16 .cse17 (res .cse18 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse20 .cse165 (res .cse2 .cse166 (res .cse107 (res .cse167 .cse168 (! (trans .cse150 .cse169 .cse69) :proves (+ .cse107 - .cse163 - .cse167) :trans (.cse150 .cse169 .cse69))) (res .cse36 (res .cse170 (! (res .cse115 .cse173 (cong (s_count .cse149) (s_count 0))) :proves (+ .cse170 - .cse159) :cong (.cse171 .cse172)) (! (trans .cse174 .cse171 .cse172) :proves (+ .cse36 - .cse161 - .cse170) :trans (.cse174 .cse171 .cse172))) (res .cse125 .cse126 (res .cse32 .cse97 (res .cse70 (res .cse30 .cse71 (res .cse38 .cse39 (res .cse138 (res .cse175 .cse176 (! (res .cse177 .cse178 (trans 0 .cse172 .cse171 .cse174)) :proves (+ .cse138 - .cse38 - .cse175 - .cse161) :trans (0 .cse172 .cse171 .cse174))) (res .cse137 .cse146 (res .cse88 (res .cse4 (res .cse6 .cse89 (res .cse9 .cse87 .cse179)) .cse180) .cse181))))) .cse182))))))))) .cse75)) :proves (- .cse163 - .cse159 - .cse161) :rup))) :proves (- .cse159) :rup)) :proves (- .cse115) :rup))) (let-proof ((.cse37 (! (res .cse128 .cse129 (! (res .cse130 .cse131 (! (res .cse16 .cse17 (res .cse18 (res .cse112 .cse113 (res .cse20 .cse21 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse115 (res .cse2 .cse3 (res .cse116 (res .cse9 (res .cse72 (res .cse110 (res .cse111 (res .cse114 (res .cse132 .cse133 (res .cse134 .cse135 .cse136)) (res .cse120 .cse121 (res .cse6 (res .cse70 (res .cse88 .cse89 (res .cse30 .cse71 (res .cse38 .cse39 (res .cse107 .cse122 (res .cse125 .cse126 (res .cse137 (res .cse138 (res .cse36 (res .cse128 .cse129 (res .cse139 .cse140 (res .cse141 .cse142 (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse67 .cse68 (res .cse143 .cse144 (farkas 4 .cse30 4 .cse2 4 .cse143 1 .cse67 4 .cse88 1 .cse22 4 .cse65 1 .cse63 4 .cse141 1 .cse61)))))) :proves (- .cse30 - .cse2 - .cse125 - .cse46 - .cse88 - .cse22 - .cse20 + .cse18 - .cse141 - .cse16) :LA (4 4 (- 4) (- 1) 4 1 (- 4) (- 1) 4 (- 1)))))) .cse145) .cse146) .cse147)))))) .cse73) .cse87))) .cse123) (! (res .cse16 .cse17 (res .cse18 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse79 .cse124 (res .cse90 .cse91 (res .cse9 (res .cse72 (res .cse6 (res .cse70 (res .cse88 .cse89 (res .cse30 .cse71 (res .cse99 (res .cse105 .cse106 (res .cse107 (res .cse148 (! (cong (x_count 2) (x_count .cse149)) :proves (+ .cse148 - .cse110) :cong (.cse81 .cse69)) (! (res .cse151 .cse152 .cse153) :proves (+ .cse107 - .cse105 - .cse148) :trans (.cse150 .cse81 .cse69))) (res .cse154 .cse155 (res .cse125 .cse126 (res .cse36 (res .cse128 .cse129 (res .cse139 .cse140 (res .cse141 .cse142 (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse95 .cse96 (res .cse67 .cse68 (farkas 4 .cse154 4 .cse30 4 .cse2 1 .cse67 4 .cse88 1 .cse22 4 .cse95 4 .cse65 1 .cse63 4 .cse141 1 .cse61)))))) :proves (- .cse154 - .cse30 - .cse2 - .cse46 - .cse88 - .cse22 - .cse90 - .cse20 + .cse18 - .cse141 - .cse16) :LA (4 4 4 (- 1) 4 1 (- 4) (- 4) (- 1) 4 (- 1)))))) .cse127))))) (! (res .cse16 .cse17 (res .cse18 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse9 (res .cse72 (res .cse6 (res .cse70 (res .cse88 .cse89 (res .cse30 .cse71 (res .cse38 .cse39 (res .cse98 .cse101 (res .cse102 .cse103 (res .cse139 (res .cse0 .cse104 (res .cse128 (res .cse36 .cse129 (res .cse138 .cse145 (res .cse137 .cse146 (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse95 .cse96 (res .cse67 .cse68 (farkas 4 .cse137 4 .cse2 4 .cse0 1 .cse67 4 .cse88 1 .cse22 4 .cse95 4 .cse65 1 .cse63 1 .cse61)))))) :proves (- .cse137 - .cse2 - .cse0 - .cse46 - .cse88 - .cse22 - .cse90 - .cse20 + .cse18 - .cse16) :LA (4 4 4 (- 1) 4 1 (- 4) (- 4) (- 1) (- 1)))))) .cse140)) .cse156)))))) .cse73) .cse87) .cse157) .cse158))) .cse75)) :proves (- .cse99 - .cse130 - .cse90 - .cse2 - .cse20) :rup)))) .cse73) .cse87) .cse157) .cse158))))) .cse75)) :proves (- .cse130 - .cse110 - .cse2 - .cse20) :rup)) .cse157) .cse158) .cse118)) .cse119))))) .cse75)) :proves (- .cse130) :rup)) :proves (- .cse128) :rup)) :proves (+ .cse36) :rup))) (let-proof ((.cse109 (! (res .cse125 .cse126 (! (res .cse2 .cse3 (res .cse20 .cse21 (res .cse36 .cse37 .cse127))) :proves (- .cse125) :rup)) :proves (- .cse107) :rup))) (let-proof ((.cse80 (! (res .cse110 (! (res .cse111 (! (res .cse112 .cse113 (res .cse114 (res .cse115 (res .cse116 .cse117 .cse118) .cse119) (! (res .cse120 .cse121 (! (res .cse107 .cse122 .cse109) :proves (- .cse120) :rup)) :proves (- .cse114) :rup))) :proves (+ .cse111) :rup) .cse123) :proves (+ .cse110) :rup) .cse124) :proves (+ .cse79) :rup))) (let-proof ((.cse1 (! (let-proof ((.cse100 (! (res .cse105 .cse106 (! (res .cse79 .cse80 (res .cse107 .cse108 .cse109)) :proves (- .cse105) :rup)) :proves (+ .cse99) :rup))) (res .cse98 (! (res .cse99 .cse100 .cse101) :proves (+ .cse98) :rup) (res .cse102 (! (res .cse99 .cse100 .cse103) :proves (+ .cse102) :rup) .cse104))) :proves (+ .cse0) :rup))) (res .cse0 .cse1 (res .cse2 .cse3 (let-proof ((.cse33 (! (res .cse36 .cse37 .cse97) :proves (+ .cse32) :rup))) (let-proof ((.cse7 (! (res .cse88 .cse89 (! (res .cse2 .cse3 (res .cse90 (! (res .cse79 .cse80 .cse91) :proves (+ .cse90) :rup) (res .cse20 .cse21 (res .cse32 .cse33 (res .cse0 .cse1 (! (res .cse16 .cse17 (res .cse18 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse30 (res .cse92 (res .cse70 .cse71 (res .cse5 .cse93 (res .cse72 .cse73 .cse94))) (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse95 .cse96 (res .cse67 .cse68 (farkas 4 .cse32 4 .cse2 4 .cse0 1 .cse67 4 .cse88 1 .cse22 4 .cse95 4 .cse65 4 .cse92 1 .cse63 1 .cse61)))))) :proves (- .cse32 - .cse2 - .cse0 - .cse46 - .cse88 - .cse22 - .cse90 - .cse20 - .cse92 + .cse18 - .cse16) :LA (4 4 4 (- 1) 4 1 (- 4) (- 4) 4 (- 1) (- 1)))) (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse95 .cse96 (res .cse67 .cse68 (farkas 4 .cse32 4 .cse30 4 .cse2 4 .cse0 1 .cse67 4 .cse88 1 .cse22 4 .cse95 4 .cse65 1 .cse63 1 .cse61)))))) :proves (- .cse32 - .cse30 - .cse2 - .cse0 - .cse46 - .cse88 - .cse22 - .cse90 - .cse20 + .cse18 - .cse16) :LA (4 4 4 4 (- 1) 4 1 (- 4) (- 4) (- 1) (- 1)))))) .cse75)) :proves (- .cse88 - .cse0 - .cse32 - .cse20 - .cse90 - .cse2) :rup)))))) :proves (- .cse88) :rup)) :proves (+ .cse6) :rup))) (let-proof ((.cse10 (! (res .cse6 .cse7 .cse87) :proves (+ .cse9) :rup))) (res .cse4 (! (res .cse5 (! (res .cse6 .cse7 .cse8) :proves (+ .cse5) :rup) (res .cse9 .cse10 .cse11)) :proves (+ .cse4) :rup) (let ((.cse85 (+ .cse81 (- 4)))) (let ((.cse12 (= .cse85 0))) (res .cse12 (! (let ((.cse13 (= 4 .cse81))) (res .cse13 (! (let ((.cse14 (= 4 .cse69))) (res .cse14 (! (let ((.cse15 (= .cse58 0))) (res .cse15 (! (res .cse16 .cse17 (res .cse18 (let-proof ((.cse31 (! (res .cse70 .cse71 (! (res .cse72 .cse73 (! (res .cse9 .cse10 .cse74) :proves (- .cse72) :rup)) :proves (- .cse70) :rup)) :proves (+ .cse30) :rup))) (res .cse19 (! (res .cse16 .cse17 (res .cse20 .cse21 (res .cse22 .cse23 (res .cse24 (! (res .cse25 (! (res .cse26 (! (res .cse27 (! (res .cse28 .cse29 (res .cse30 .cse31 (res .cse32 .cse33 .cse34))) :proves (+ .cse27) :rup) .cse35) :proves (+ .cse26) :rup) (res .cse36 .cse37 (res .cse38 (! (res .cse30 .cse31 .cse39) :proves (+ .cse38) :rup) (res .cse40 (! (res .cse41 (! (res .cse20 .cse21 (res .cse32 .cse33 (res .cse30 .cse31 .cse42))) :proves (+ .cse41) :rup) .cse43) :proves (+ .cse40) :rup) .cse44)))) :proves (+ .cse25) :rup) .cse45) :proves (+ .cse24) :rup) (res .cse46 .cse47 (res .cse30 .cse31 (res .cse32 .cse33 (! (res .cse48 .cse49 (res .cse50 .cse51 (res .cse38 .cse52 (res .cse53 .cse54 (farkas 4 .cse53 4 .cse38 1 .cse46 1 .cse24 1 .cse50 4 .cse20 4 .cse48 1 .cse16))))) :proves (- .cse32 - .cse30 - .cse46 - .cse24 - .cse22 - .cse20 + .cse19 - .cse16) :LA ((- 4) (- 4) 1 1 (- 1) 4 (- 4) 1))))))))) :proves (+ .cse19) :rup) (res .cse20 .cse21 (res .cse22 .cse23 (res .cse46 .cse47 (res .cse30 .cse31 (res .cse32 .cse33 (let ((.cse60 (+ .cse69 (- 3)))) (let ((.cse55 (<= .cse60 0))) (res .cse55 (! (let ((.cse56 (< .cse58 0))) (res .cse56 (let ((.cse57 (< 0 .cse58))) (res .cse57 (trichotomy .cse58 0) (farkas 1 .cse57 1 .cse19))) (let ((.cse59 (<= 1 .cse60))) (res .cse59 (total-int .cse60 0) (farkas 1 .cse59 1 .cse56))))) :proves (+ .cse55 + .cse15 - .cse19) :trichotomy) (! (res .cse61 .cse62 (res .cse63 .cse64 (res .cse65 .cse66 (res .cse67 .cse68 (farkas 4 .cse32 4 .cse30 1 .cse67 1 .cse22 4 .cse65 1 .cse63 1 .cse61 4 .cse55))))) :proves (- .cse32 - .cse30 - .cse46 - .cse22 - .cse20 + .cse18 - .cse16 - .cse55) :LA (4 4 (- 1) 1 (- 4) (- 1) (- 1) 4)))))))))))) .cse75)) :proves (+ .cse15) :rup) (! (let ((.cse76 (= 0 .cse58))) (res .cse76 (symm 0 .cse58) (let ((.cse77 (< 4 .cse69))) (res .cse77 (let ((.cse78 (< .cse69 4))) (res .cse78 (trichotomy 4 .cse69) (farkas 1 .cse76 1 .cse78))) (farkas 1 .cse15 1 .cse77))))) :proves (+ .cse14 - .cse15) :EQ))) :proves (+ .cse14) :rup) (res .cse79 .cse80 (! (trans 4 .cse69 .cse81) :proves (+ .cse13 - .cse14 - .cse79) :trans (4 .cse69 .cse81))))) :proves (+ .cse13) :rup) (! (let ((.cse82 (= .cse81 4))) (res .cse82 (symm .cse81 4) (let ((.cse83 (< .cse85 0))) (res .cse83 (let ((.cse84 (< 0 .cse85))) (res .cse84 (trichotomy .cse85 0) (farkas 1 .cse82 1 .cse84))) (farkas 1 .cse13 1 .cse83))))) :proves (- .cse13 + .cse12) :EQ))) :proves (+ .cse12) :rup) (! (let ((.cse86 (= 0 .cse85))) (res .cse86 (symm 0 .cse85) (farkas 1 .cse86 1 .cse4 1 .cse2 1 .cse0))) :proves (- .cse12 - .cse4 - .cse2 - .cse0) :LA ((- 1) 1 1 1))))))))))))))))))))))))))))))))))))))))))))))))))) :proves () :rup)
