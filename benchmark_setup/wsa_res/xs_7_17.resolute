unsat
(! (let ((.cse38 (* (- 1) distance))) (let ((.cse46 (+ fmt0 .cse38)) (.cse307 (* (- 1) arg1))) (let ((.cse66 (* (- 1) fmt0)) (.cse305 (+ fmt0 .cse307)) (.cse247 (= fmt0 0)) (.cse40 (= arg0 .cse46)) (.cse231 (+ fmt0 fmt_length (* (- 1) fmt1) (- 1)))) (let ((.cse81 (= distance 17)) (.cse1 (= fmt_length 7)) (.cse227 (<= .cse231 0)) (.cse41 (and .cse247 .cse40)) (.cse59 (<= .cse305 0)) (.cse221 (+ fmt1 .cse66 (- 1)))) (let ((.cse218 (<= .cse221 0)) (.cse42 (and .cse41 .cse59)) (.cse224 (not .cse227)) (.cse166 (+ fmt1 .cse66 (- 2))) (.cse2 (and .cse81 .cse1))) (let ((.cse93 (and .cse2 (= adr_lo 3))) (.cse92 (x_count .cse166)) (.cse91 (s_count .cse166)) (.cse209 (+ arg0 distance .cse307)) (.cse67 (and .cse42 .cse224)) (.cse215 (not .cse218)) (.cse306 (+ arg0 distance fmt_length .cse307 (- 4)))) (let ((.cse18 (<= .cse306 0)) (.cse68 (and .cse67 .cse215)) (.cse205 (<= .cse209 0)) (.cse172 (* 4 .cse91)) (.cse161 (* 4 .cse92)) (.cse94 (and .cse93 (= adr_medlo 4)))) (let ((.cse95 (and .cse94 (= adr_medhi 5))) (.cse75 (+ arg0 .cse172 .cse161)) (.cse69 (and .cse68 .cse205)) (.cse22 (not .cse18))) (let ((.cse30 (and .cse69 .cse22)) (.cse72 (= arg1 .cse75)) (.cse96 (and .cse95 (= adr_hi 6)))) (let ((.cse97 (and .cse96 (and (and (= percent 37) (= s 115)) (= x 120)))) (.cse70 (and .cse30 .cse72))) (let ((.cse26 (< 0 .cse306)) (.cse62 (< 0 .cse305)) (.cse89 (and .cse97 .cse70))) (let-proof ((.cse23 (not+ .cse22)) (.cse27 (total .cse306 0)) (.cse32 (not- .cse22)) (.cse63 (total .cse305 0))) (let ((.cse8 (+ fmt_length (- 7)))) (let-proof ((.cse90 (let ((.cse214 (+ fmt0 1))) (let ((.cse304 (+ fmt0 2)) (.cse152 (= fmt1 fmt0)) (.cse150 (= fmt1 .cse214))) (let ((.cse303 (+ fmt0 3)) (.cse149 (or .cse152 .cse150)) (.cse147 (= fmt1 .cse304))) (let ((.cse146 (or .cse149 .cse147)) (.cse144 (= fmt1 .cse303))) (let ((.cse127 (= arg1 fmt0)) (.cse125 (= arg1 .cse214)) (.cse143 (or .cse146 .cse144)) (.cse141 (= fmt1 (+ fmt0 4)))) (let ((.cse140 (or .cse143 .cse141)) (.cse138 (= fmt1 (+ fmt0 5))) (.cse124 (or .cse127 .cse125)) (.cse122 (= arg1 .cse304))) (let ((.cse121 (or .cse124 .cse122)) (.cse119 (= arg1 .cse303)) (.cse137 (or .cse140 .cse138)) (.cse135 (= fmt1 (+ fmt0 6)))) (let ((.cse134 (or .cse137 .cse135)) (.cse118 (or .cse121 .cse119))) (let ((.cse116 (and .cse134 .cse118))) (let ((.cse98 (and .cse89 .cse116))) (res .cse98 (let ((.cse302 (format 6)) (.cse301 (format 5)) (.cse300 (format 4)) (.cse299 (format 3)) (.cse298 (format 2)) (.cse297 (format 1)) (.cse296 (format 0))) (let ((.cse250 (= .cse296 percent)) (.cse254 (= .cse297 percent)) (.cse278 (= .cse297 s)) (.cse251 (= .cse297 x)) (.cse258 (= .cse298 percent)) (.cse281 (= .cse298 s)) (.cse255 (= .cse298 x)) (.cse262 (= .cse299 percent)) (.cse284 (= .cse299 s)) (.cse259 (= .cse299 x)) (.cse266 (= .cse300 percent)) (.cse287 (= .cse300 s)) (.cse263 (= .cse300 x)) (.cse270 (= .cse301 percent)) (.cse290 (= .cse301 s)) (.cse267 (= .cse301 x)) (.cse274 (= .cse302 percent)) (.cse293 (= .cse302 s)) (.cse271 (= .cse302 x))) (let ((.cse113 (and (and (and (and (and (and (or (or (or (or (or (or (or .cse250 (= .cse296 s)) (= .cse296 x)) (= .cse296 3)) (= .cse296 4)) (= .cse296 5)) (= .cse296 6)) (= .cse296 255)) (or (or (or (or (or (or (or .cse254 .cse278) .cse251) (= .cse297 3)) (= .cse297 4)) (= .cse297 5)) (= .cse297 6)) (= .cse297 255))) (or (or (or (or (or (or (or .cse258 .cse281) .cse255) (= .cse298 3)) (= .cse298 4)) (= .cse298 5)) (= .cse298 6)) (= .cse298 255))) (or (or (or (or (or (or (or .cse262 .cse284) .cse259) (= .cse299 3)) (= .cse299 4)) (= .cse299 5)) (= .cse299 6)) (= .cse299 255))) (or (or (or (or (or (or (or .cse266 .cse287) .cse263) (= .cse300 3)) (= .cse300 4)) (= .cse300 5)) (= .cse300 6)) (= .cse300 255))) (or (or (or (or (or (or (or .cse270 .cse290) .cse267) (= .cse301 3)) (= .cse301 4)) (= .cse301 5)) (= .cse301 6)) (= .cse301 255))) (or (or (or (or (or (or (or .cse274 .cse293) .cse271) (= .cse302 3)) (= .cse302 4)) (= .cse302 5)) (= .cse302 6)) (= .cse302 255))))) (let ((.cse99 (and .cse98 .cse113))) (res .cse99 (let ((.cse275 (format 7))) (let ((.cse111 (let ((.cse292 (s_count 5))) (and (let ((.cse289 (s_count 4))) (and (let ((.cse286 (s_count 3))) (and (let ((.cse283 (s_count 2))) (and (let ((.cse280 (s_count 1))) (and (let ((.cse277 (s_count 0))) (and (let ((.cse276 (and .cse250 .cse278))) (and (=> .cse276 (= .cse277 1)) (=> (not .cse276) (= .cse277 0)))) (let ((.cse279 (and .cse254 .cse281))) (and (=> .cse279 (= .cse280 (+ .cse277 1))) (=> (not .cse279) (= .cse280 .cse277)))))) (let ((.cse282 (and .cse258 .cse284))) (and (=> .cse282 (= .cse283 (+ .cse280 1))) (=> (not .cse282) (= .cse283 .cse280)))))) (let ((.cse285 (and .cse262 .cse287))) (and (=> .cse285 (= .cse286 (+ .cse283 1))) (=> (not .cse285) (= .cse286 .cse283)))))) (let ((.cse288 (and .cse266 .cse290))) (and (=> .cse288 (= .cse289 (+ .cse286 1))) (=> (not .cse288) (= .cse289 .cse286)))))) (let ((.cse291 (and .cse270 .cse293))) (and (=> .cse291 (= .cse292 (+ .cse289 1))) (=> (not .cse291) (= .cse292 .cse289)))))) (let ((.cse294 (and .cse274 (= .cse275 s))) (.cse295 (s_count 6))) (and (=> .cse294 (= .cse295 (+ .cse292 1))) (=> (not .cse294) (= .cse295 .cse292)))))))) (let ((.cse100 (and .cse99 .cse111))) (res .cse100 (let ((.cse109 (let ((.cse269 (x_count 5))) (and (let ((.cse265 (x_count 4))) (and (let ((.cse261 (x_count 3))) (and (let ((.cse257 (x_count 2))) (and (let ((.cse253 (x_count 1))) (and (let ((.cse249 (x_count 0))) (and (let ((.cse248 (and .cse250 .cse251))) (and (=> .cse248 (= .cse249 1)) (=> (not .cse248) (= .cse249 0)))) (let ((.cse252 (and .cse254 .cse255))) (and (=> .cse252 (= .cse253 (+ .cse249 1))) (=> (not .cse252) (= .cse253 .cse249)))))) (let ((.cse256 (and .cse258 .cse259))) (and (=> .cse256 (= .cse257 (+ .cse253 1))) (=> (not .cse256) (= .cse257 .cse253)))))) (let ((.cse260 (and .cse262 .cse263))) (and (=> .cse260 (= .cse261 (+ .cse257 1))) (=> (not .cse260) (= .cse261 .cse257)))))) (let ((.cse264 (and .cse266 .cse267))) (and (=> .cse264 (= .cse265 (+ .cse261 1))) (=> (not .cse264) (= .cse265 .cse261)))))) (let ((.cse268 (and .cse270 .cse271))) (and (=> .cse268 (= .cse269 (+ .cse265 1))) (=> (not .cse268) (= .cse269 .cse265)))))) (let ((.cse272 (and .cse274 (= .cse275 x))) (.cse273 (x_count 6))) (and (=> .cse272 (= .cse273 (+ .cse269 1))) (=> (not .cse272) (= .cse273 .cse269)))))))) (let ((.cse101 (and .cse100 .cse109))) (res .cse101 (let ((.cse107 (and (and (and (and (and (not (= (format fmt1) percent)) (= (format (+ fmt1 1)) s)) (= (format arg1) adr_lo)) (= (format (+ arg1 1)) adr_medlo)) (= (format (+ arg1 2)) adr_medhi)) (= (format (+ arg1 3)) adr_hi)))) (let ((.cse102 (=> .cse101 .cse107))) (res .cse102 (=>+ 0 .cse102) (let ((.cse246 (- fmt0 distance))) (let ((.cse245 (= arg0 .cse246)) (.cse234 (- fmt_length 1)) (.cse181 (- fmt1 2)) (.cse132 (+ fmt0 0))) (let ((.cse151 (= fmt1 .cse132)) (.cse165 (- .cse181 fmt0)) (.cse232 (+ fmt0 .cse234)) (.cse244 (and .cse247 .cse245)) (.cse241 (>= arg1 fmt0))) (let ((.cse195 (- fmt_length 4)) (.cse238 (and .cse244 .cse241)) (.cse223 (< fmt1 .cse232)) (.cse173 (s_count .cse165)) (.cse148 (or .cse151 .cse150))) (let ((.cse145 (or .cse148 .cse147)) (.cse162 (x_count .cse165)) (.cse171 (* 4 .cse173)) (.cse204 (+ arg0 distance)) (.cse222 (and .cse238 .cse223)) (.cse216 (> fmt1 .cse214)) (.cse192 (+ distance .cse195))) (let ((.cse190 (+ arg0 .cse192)) (.cse211 (and .cse222 .cse216)) (.cse206 (>= arg1 .cse204)) (.cse169 (+ arg0 .cse171)) (.cse160 (* 4 .cse162)) (.cse126 (= arg1 .cse132)) (.cse142 (or .cse145 .cse144))) (let ((.cse139 (or .cse142 .cse141)) (.cse123 (or .cse126 .cse125)) (.cse158 (+ .cse169 .cse160)) (.cse201 (and .cse211 .cse206)) (.cse185 (< arg1 .cse190))) (let ((.cse184 (and .cse201 .cse185)) (.cse157 (= arg1 .cse158)) (.cse120 (or .cse123 .cse122)) (.cse136 (or .cse139 .cse138))) (let ((.cse133 (or .cse136 .cse135)) (.cse117 (or .cse120 .cse119)) (.cse156 (and .cse184 .cse157))) (let ((.cse155 (and .cse97 .cse156)) (.cse115 (and .cse133 .cse117))) (let ((.cse114 (and .cse155 .cse115))) (let ((.cse112 (and .cse114 .cse113))) (let ((.cse110 (and .cse112 .cse111))) (let ((.cse108 (and .cse110 .cse109))) (let ((.cse103 (=> .cse108 .cse107))) (let ((.cse105 (not .cse103))) (res .cse103 (let ((.cse104 (not .cse102))) (res .cse104 (res .cse105 (not+ .cse105) (let ((.cse106 (= .cse105 .cse104))) (res .cse106 (res (= .cse103 .cse102) (res (= .cse107 .cse107) (refl .cse107) (res (= .cse108 .cse101) (res (= .cse109 .cse109) (refl .cse109) (res (= .cse110 .cse100) (res (= .cse111 .cse111) (refl .cse111) (res (= .cse112 .cse99) (res (= .cse113 .cse113) (refl .cse113) (res (= .cse114 .cse98) (let ((.cse130 (= arg1 arg1)) (.cse153 (= fmt1 fmt1))) (let-proof ((.cse131 (refl arg1)) (.cse154 (refl fmt1))) (res (= .cse115 .cse116) (let ((.cse128 (= .cse132 fmt0))) (let-proof ((.cse129 (poly+ .cse132 fmt0))) (res (= .cse117 .cse118) (res (= .cse119 .cse119) (refl .cse119) (res (= .cse120 .cse121) (res (= .cse122 .cse122) (refl .cse122) (res (= .cse123 .cse124) (res (= .cse125 .cse125) (refl .cse125) (res (= .cse126 .cse127) (res .cse128 .cse129 (res .cse130 .cse131 (cong (= arg1 .cse132) (= arg1 fmt0)))) (cong (or .cse126 .cse125) (or .cse127 .cse125)))) (cong (or .cse123 .cse122) (or .cse124 .cse122)))) (cong (or .cse120 .cse119) (or .cse121 .cse119)))) (res (= .cse133 .cse134) (res (= .cse135 .cse135) (refl .cse135) (res (= .cse136 .cse137) (res (= .cse138 .cse138) (refl .cse138) (res (= .cse139 .cse140) (res (= .cse141 .cse141) (refl .cse141) (res (= .cse142 .cse143) (res (= .cse144 .cse144) (refl .cse144) (res (= .cse145 .cse146) (res (= .cse147 .cse147) (refl .cse147) (res (= .cse148 .cse149) (res (= .cse150 .cse150) (refl .cse150) (res (= .cse151 .cse152) (res .cse128 .cse129 (res .cse153 .cse154 (cong (= fmt1 .cse132) (= fmt1 fmt0)))) (cong (or .cse151 .cse150) (or .cse152 .cse150)))) (cong (or .cse148 .cse147) (or .cse149 .cse147)))) (cong (or .cse145 .cse144) (or .cse146 .cse144)))) (cong (or .cse142 .cse141) (or .cse143 .cse141)))) (cong (or .cse139 .cse138) (or .cse140 .cse138)))) (cong (or .cse136 .cse135) (or .cse137 .cse135)))) (cong (and .cse133 .cse117) (and .cse134 .cse118)))))) (res (= .cse155 .cse89) (res (= .cse156 .cse70) (let ((.cse179 (= fmt0 fmt0)) (.cse174 (= arg0 arg0))) (let-proof ((.cse180 (refl fmt0)) (.cse175 (refl arg0))) (res (= .cse157 .cse72) (res (= .cse158 .cse75) (let ((.cse170 (+ arg0 .cse172))) (let ((.cse159 (+ .cse170 .cse161))) (res (= .cse159 .cse75) (poly+ .cse159 .cse75) (res (= .cse158 .cse159) (let ((.cse163 (= .cse165 .cse166)) (.cse167 (= 4 4))) (let-proof ((.cse164 (let ((.cse177 (+ fmt1 (- 2)))) (let ((.cse176 (- .cse177 fmt0))) (res (= .cse176 .cse166) (res (= .cse66 .cse66) (refl .cse66) (res (= .cse177 .cse177) (refl .cse177) (let ((.cse178 (+ .cse177 .cse66))) (res (= .cse178 .cse178) (cong (+ .cse177 .cse66) (+ .cse177 .cse66)) (res (= .cse176 .cse178) (-def .cse177 fmt0) (res (= .cse178 .cse166) (poly+ .cse178 .cse166) (trans .cse176 .cse178 .cse178 .cse166))))))) (res (= .cse165 .cse176) (res .cse179 .cse180 (res (= .cse181 .cse177) (let ((.cse182 (* (- 1) 2))) (res (= .cse182 (- 2)) (poly* .cse182 (- 2)) (res .cse153 .cse154 (let ((.cse183 (+ fmt1 .cse182))) (res (= .cse183 .cse177) (cong (+ fmt1 .cse182) (+ fmt1 (- 2))) (res (= .cse181 .cse183) (-def fmt1 2) (trans .cse181 .cse183 .cse177))))))) (cong (- .cse181 fmt0) (- .cse177 fmt0)))) (trans .cse165 .cse176 .cse166)))))) (.cse168 (refl 4))) (res (= .cse160 .cse161) (res (= .cse162 .cse92) (res .cse163 .cse164 (cong (x_count .cse165) (x_count .cse166))) (res .cse167 .cse168 (cong (* 4 .cse162) (* 4 .cse92)))) (res (= .cse169 .cse170) (res (= .cse171 .cse172) (res (= .cse173 .cse91) (res .cse163 .cse164 (cong (s_count .cse165) (s_count .cse166))) (res .cse167 .cse168 (cong (* 4 .cse173) (* 4 .cse91)))) (res .cse174 .cse175 (cong (+ arg0 .cse171) (+ arg0 .cse172)))) (cong (+ .cse169 .cse160) (+ .cse170 .cse161)))))) (trans .cse158 .cse159 .cse75))))) (res .cse130 .cse131 (cong (= arg1 .cse158) (= arg1 .cse75)))) (res (= .cse184 .cse30) (let ((.cse198 (= fmt_length fmt_length))) (let-proof ((.cse199 (refl fmt_length))) (res (= .cse185 .cse22) (let ((.cse189 (+ arg0 distance fmt_length (- 4)))) (let ((.cse187 (< arg1 .cse189))) (let ((.cse186 (= .cse187 .cse22))) (res .cse186 (res .cse22 (res .cse187 (=+1 .cse186) (res .cse18 .cse23 (farkas 1 .cse187 1 .cse18))) (res .cse187 (let ((.cse188 (<= .cse189 arg1))) (res .cse188 (total .cse189 arg1) (res .cse18 (res .cse26 .cse27 (farkas 1 .cse188 1 .cse26)) .cse32))) (=+2 .cse186))) (res (= .cse185 .cse187) (res (= .cse190 .cse189) (let ((.cse193 (+ distance fmt_length (- 4)))) (let ((.cse191 (+ arg0 .cse193))) (res (= .cse191 .cse189) (poly+ .cse191 .cse189) (res (= .cse190 .cse191) (res (= .cse192 .cse193) (let ((.cse196 (+ fmt_length (- 4)))) (let ((.cse194 (+ distance .cse196))) (res (= .cse194 .cse193) (poly+ .cse194 .cse193) (res (= .cse192 .cse194) (res (= .cse195 .cse196) (let ((.cse197 (* (- 1) 4))) (res (= .cse197 (- 4)) (poly* .cse197 (- 4)) (res .cse198 .cse199 (let ((.cse200 (+ fmt_length .cse197))) (res (= .cse200 .cse196) (cong (+ fmt_length .cse197) (+ fmt_length (- 4))) (res (= .cse195 .cse200) (-def fmt_length 4) (trans .cse195 .cse200 .cse196))))))) (res (= distance distance) (refl distance) (cong (+ distance .cse195) (+ distance .cse196)))) (trans .cse192 .cse194 .cse193))))) (res .cse174 .cse175 (cong (+ arg0 .cse192) (+ arg0 .cse193)))) (trans .cse190 .cse191 .cse189))))) (res .cse130 .cse131 (cong (< arg1 .cse190) (< arg1 .cse189)))) (trans .cse185 .cse187 .cse22)))))) (res (= .cse201 .cse69) (let ((.cse202 (= .cse206 .cse205))) (res .cse202 (let ((.cse207 (<= .cse204 arg1))) (let ((.cse203 (= .cse206 .cse207))) (res .cse203 (>=def arg1 .cse204) (res .cse205 (res .cse206 (=+1 .cse202) (res .cse207 (=-2 .cse203) (let ((.cse208 (< 0 .cse209))) (res .cse208 (total .cse209 0) (farkas 1 .cse207 1 .cse208))))) (res .cse206 (res .cse207 (let ((.cse210 (< arg1 .cse204))) (res .cse210 (total .cse204 arg1) (farkas 1 .cse210 1 .cse205))) (=-1 .cse203)) (=+2 .cse202)))))) (res (= .cse211 .cse68) (let ((.cse212 (= .cse216 .cse215))) (res .cse212 (let ((.cse217 (< .cse214 fmt1))) (let ((.cse213 (= .cse216 .cse217))) (res .cse213 (>def fmt1 .cse214) (res .cse215 (res .cse216 (=+1 .cse212) (res .cse217 (=-2 .cse213) (res .cse218 (not+ .cse215) (farkas 1 .cse217 1 .cse218)))) (res .cse216 (res .cse217 (let ((.cse219 (<= fmt1 .cse214))) (res .cse219 (total fmt1 .cse214) (res .cse218 (let ((.cse220 (< 0 .cse221))) (res .cse220 (total .cse221 0) (farkas 1 .cse219 1 .cse220))) (not- .cse215)))) (=-1 .cse213)) (=+2 .cse212)))))) (res (= .cse222 .cse67) (res (= .cse223 .cse224) (let ((.cse229 (+ fmt0 fmt_length (- 1)))) (let ((.cse226 (< fmt1 .cse229))) (let ((.cse225 (= .cse226 .cse224))) (res .cse225 (res .cse224 (res .cse226 (=+1 .cse225) (res .cse227 (not+ .cse224) (farkas 1 .cse226 1 .cse227))) (res .cse226 (let ((.cse228 (<= .cse229 fmt1))) (res .cse228 (total .cse229 fmt1) (res .cse227 (let ((.cse230 (< 0 .cse231))) (res .cse230 (total .cse231 0) (farkas 1 .cse228 1 .cse230))) (not- .cse224)))) (=+2 .cse225))) (res (= .cse223 .cse226) (res (= .cse232 .cse229) (let ((.cse235 (+ fmt_length (- 1)))) (let ((.cse233 (+ fmt0 .cse235))) (res (= .cse233 .cse229) (poly+ .cse233 .cse229) (res (= .cse232 .cse233) (res (= .cse234 .cse235) (let ((.cse236 (* (- 1) 1))) (res (= .cse236 (- 1)) (poly* .cse236 (- 1)) (res .cse198 .cse199 (let ((.cse237 (+ fmt_length .cse236))) (res (= .cse237 .cse235) (cong (+ fmt_length .cse236) (+ fmt_length (- 1))) (res (= .cse234 .cse237) (-def fmt_length 1) (trans .cse234 .cse237 .cse235))))))) (res .cse179 .cse180 (cong (+ fmt0 .cse234) (+ fmt0 .cse235)))) (trans .cse232 .cse233 .cse229))))) (res .cse153 .cse154 (cong (< fmt1 .cse232) (< fmt1 .cse229)))) (trans .cse223 .cse226 .cse224)))))) (res (= .cse238 .cse42) (let ((.cse239 (= .cse241 .cse59))) (res .cse239 (let ((.cse242 (<= fmt0 arg1))) (let ((.cse240 (= .cse241 .cse242))) (res .cse240 (>=def arg1 fmt0) (res .cse59 (res .cse241 (=+1 .cse239) (res .cse242 (=-2 .cse240) (res .cse62 .cse63 (farkas 1 .cse242 1 .cse62)))) (res .cse241 (res .cse242 (let ((.cse243 (< arg1 fmt0))) (res .cse243 (total fmt0 arg1) (farkas 1 .cse243 1 .cse59))) (=-1 .cse240)) (=+2 .cse239)))))) (res (= .cse244 .cse41) (res (= .cse245 .cse40) (res (= .cse246 .cse46) (-def fmt0 distance) (res .cse174 .cse175 (cong (= arg0 .cse246) (= arg0 .cse46)))) (res (= .cse247 .cse247) (refl .cse247) (cong (and .cse247 .cse245) (and .cse247 .cse40)))) (cong (and .cse244 .cse241) (and .cse41 .cse59))))) (cong (and .cse238 .cse223) (and .cse42 .cse224)))) (cong (and .cse222 .cse216) (and .cse67 .cse215))))) (cong (and .cse211 .cse206) (and .cse68 .cse205))))) (cong (and .cse201 .cse185) (and .cse69 .cse22)))))) (cong (and .cse184 .cse157) (and .cse30 .cse72)))))) (res (= .cse97 .cse97) (refl .cse97) (cong (and .cse97 .cse156) (and .cse97 .cse70)))) (cong (and .cse155 .cse115) (and .cse89 .cse116)))))) (cong (and .cse114 .cse113) (and .cse98 .cse113)))) (cong (and .cse112 .cse111) (and .cse99 .cse111)))) (cong (and .cse110 .cse109) (and .cse100 .cse109)))) (cong (=> .cse108 .cse107) (=> .cse101 .cse107)))) (cong (not .cse103) (not .cse102))) (=-2 .cse106)))) (not- .cse104))) (res .cse105 (assume .cse105) (not- .cse105)))))))))))))))))))))) (and- 0 .cse101)))) (and- 0 .cse100))))) (and- 0 .cse99)))))) (and- 0 .cse98)))))))))))))) (let ((.cse0 (= .cse8 0))) (let-proof ((.cse3 (res .cse93 (res .cse94 (res .cse95 (res .cse96 (res .cse97 (res .cse89 .cse90 (and- 0 .cse89)) (and- 0 .cse97)) (and- 0 .cse96)) (and- 0 .cse95)) (and- 0 .cse94)) (and- 0 .cse93)))) (res .cse0 (! (res .cse1 (res .cse2 .cse3 (and- 1 .cse2)) (let ((.cse4 (= .cse1 .cse0))) (res .cse4 (res .cse0 (res .cse1 (=+1 .cse4) (let ((.cse5 (= 7 fmt_length))) (res .cse5 (symm 7 fmt_length) (let ((.cse6 (< .cse8 0))) (res .cse6 (let ((.cse7 (< 0 .cse8))) (res .cse7 (trichotomy .cse8 0) (farkas 1 .cse1 1 .cse7))) (farkas 1 .cse5 1 .cse6)))))) (res .cse1 (let ((.cse9 (= 0 .cse8))) (res .cse9 (symm 0 .cse8) (let ((.cse10 (< fmt_length 7))) (res .cse10 (let ((.cse11 (< 7 fmt_length))) (res .cse11 (trichotomy fmt_length 7) (farkas 1 .cse0 1 .cse11))) (farkas 1 .cse9 1 .cse10))))) (=+2 .cse4))) (=-2 .cse4)))) :proves (+ .cse0) :input) (let ((.cse37 (* (- 1) arg0))) (let ((.cse86 (+ distance (- 17))) (.cse78 (+ arg1 .cse37 (* (- 4) .cse91) (* (- 4) .cse92)))) (let ((.cse34 (+ .cse91 .cse92 (- 4))) (.cse35 (= 0 .cse78)) (.cse15 (= .cse78 0)) (.cse55 (= 0 .cse86)) (.cse13 (= .cse86 0))) (let-proof ((.cse71 (res .cse89 .cse90 (and- 1 .cse89))) (.cse36 (symm 0 .cse78)) (.cse56 (symm 0 .cse86))) (let ((.cse12 (<= .cse34 0))) (let-proof ((.cse14 (! (res .cse81 (res .cse2 .cse3 (and- 0 .cse2)) (let ((.cse82 (= .cse81 .cse13))) (res .cse82 (res .cse13 (res .cse81 (=+1 .cse82) (let ((.cse83 (= 17 distance))) (res .cse83 (symm 17 distance) (let ((.cse84 (< .cse86 0))) (res .cse84 (let ((.cse85 (< 0 .cse86))) (res .cse85 (trichotomy .cse86 0) (farkas 1 .cse81 1 .cse85))) (farkas 1 .cse83 1 .cse84)))))) (res .cse81 (res .cse55 .cse56 (let ((.cse87 (< distance 17))) (res .cse87 (let ((.cse88 (< 17 distance))) (res .cse88 (trichotomy distance 17) (farkas 1 .cse13 1 .cse88))) (farkas 1 .cse55 1 .cse87)))) (=+2 .cse82))) (=-2 .cse82)))) :proves (+ .cse13) :input)) (.cse16 (! (res .cse72 (res .cse70 .cse71 (and- 1 .cse70)) (let ((.cse73 (= .cse72 .cse15))) (res .cse73 (res .cse15 (res .cse72 (=+1 .cse73) (let ((.cse74 (= .cse75 arg1))) (res .cse74 (symm .cse75 arg1) (let ((.cse76 (< .cse78 0))) (res .cse76 (let ((.cse77 (< 0 .cse78))) (res .cse77 (trichotomy .cse78 0) (farkas 1 .cse72 1 .cse77))) (farkas 1 .cse74 1 .cse76)))))) (res .cse72 (res .cse35 .cse36 (let ((.cse79 (< arg1 .cse75))) (res .cse79 (let ((.cse80 (< .cse75 arg1))) (res .cse80 (trichotomy arg1 .cse75) (farkas 1 .cse15 1 .cse80))) (farkas 1 .cse35 1 .cse79)))) (=+2 .cse73))) (=-2 .cse73)))) :proves (+ .cse15) :input)) (.cse31 (res .cse70 .cse71 (and- 0 .cse70)))) (res .cse12 (res .cse13 .cse14 (res .cse15 .cse16 (let ((.cse29 (+ arg1 .cse37 .cse38 (* (- 1) fmt_length) 5))) (let ((.cse17 (<= .cse29 0))) (res .cse17 (! (res .cse18 (let ((.cse19 (not .cse17))) (let-proof ((.cse20 (not+ .cse19))) (res .cse19 .cse20 (let ((.cse21 (not .cse19))) (res .cse21 (res .cse22 .cse23 (let ((.cse24 (= .cse22 .cse21))) (res .cse24 (let ((.cse25 (= .cse18 .cse19))) (res .cse25 (res .cse19 (res .cse18 (=+1 .cse25) (res .cse17 .cse20 (farkas 1 .cse18 1 .cse17))) (res .cse18 (res .cse26 .cse27 (res .cse17 (let ((.cse28 (<= 1 .cse29))) (res .cse28 (total-int .cse29 0) (farkas 1 .cse26 1 .cse28))) (not- .cse19))) (=+2 .cse25))) (cong (not .cse18) (not .cse19)))) (=-2 .cse24)))) (not- .cse21)))))) (res .cse30 .cse31 (res .cse22 (and- 1 .cse30) .cse32))) :proves (+ .cse17) :input) (! (let ((.cse33 (<= 1 .cse34))) (res .cse33 (total-int .cse34 0) (res .cse35 .cse36 (farkas 1 .cse17 1 .cse35 1 .cse13 4 .cse33 1 .cse0)))) :proves (- .cse17 - .cse15 - .cse13 + .cse12 - .cse0) :LA (1 (- 1) 1 (- 4) 1))))))) (! (res .cse13 .cse14 (let ((.cse49 (+ fmt0 .cse37 .cse38))) (let ((.cse39 (= .cse49 0)) (.cse50 (= 0 .cse49))) (let-proof ((.cse51 (symm 0 .cse49)) (.cse43 (res .cse67 (res .cse68 (res .cse69 (res .cse30 .cse31 (and- 0 .cse30)) (and- 0 .cse69)) (and- 0 .cse68)) (and- 0 .cse67)))) (res .cse39 (! (res .cse40 (res .cse41 (res .cse42 .cse43 (and- 0 .cse42)) (and- 1 .cse41)) (let ((.cse44 (= .cse40 .cse39))) (res .cse44 (res .cse39 (res .cse40 (=+1 .cse44) (let ((.cse45 (= .cse46 arg0))) (res .cse45 (symm .cse46 arg0) (let ((.cse47 (< .cse49 0))) (res .cse47 (let ((.cse48 (< 0 .cse49))) (res .cse48 (trichotomy .cse49 0) (farkas 1 .cse45 1 .cse48))) (farkas 1 .cse40 1 .cse47)))))) (res .cse40 (res .cse50 .cse51 (let ((.cse52 (< arg0 .cse46))) (res .cse52 (let ((.cse53 (< .cse46 arg0))) (res .cse53 (trichotomy arg0 .cse46) (farkas 1 .cse50 1 .cse53))) (farkas 1 .cse39 1 .cse52)))) (=+2 .cse44))) (=-2 .cse44)))) :proves (+ .cse39) :input) (res .cse15 .cse16 (let ((.cse65 (+ arg1 .cse66 1))) (let ((.cse57 (<= 1 .cse65)) (.cse54 (<= .cse65 0))) (let-proof ((.cse58 (total-int .cse65 0))) (res .cse54 (! (res .cse55 .cse56 (res .cse50 .cse51 (res .cse57 .cse58 (farkas 1 .cse57 1 .cse15 1 .cse50 1 .cse55 4 .cse12)))) :proves (+ .cse54 - .cse15 - .cse39 - .cse13 - .cse12) :LA ((- 1) 1 (- 1) (- 1) 4)) (! (res .cse59 (res .cse42 .cse43 (and- 1 .cse42)) (let ((.cse60 (not .cse54))) (let-proof ((.cse64 (not- .cse60))) (res .cse60 (let ((.cse61 (= .cse59 .cse60))) (res .cse61 (res .cse60 (res .cse59 (=+1 .cse61) (res .cse54 (not+ .cse60) (farkas 1 .cse59 1 .cse54))) (res .cse59 (res .cse62 .cse63 (res .cse54 (res .cse57 .cse58 (farkas 1 .cse62 1 .cse57)) .cse64)) (=+2 .cse61))) (=-2 .cse61))) .cse64)))) :proves (- .cse54) :input))))))))))) :proves (- .cse12) :rup))))))))))))))))))))))))) :proves () :rup)
