success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_testUnsatCore.bpl.mod.smt2:33:10: Logical context not inconsistent!")
unsat
(! (let ((.cse17 (ControlFlow 0 2))) (let ((.cse1 (= .cse17 (- 1))) (.cse0 (= (- 1) .cse17))) (let ((.cse21 (= .cse1 .cse0))) (let-proof ((.cse22 (res .cse0 (res .cse1 (=+1 .cse21) (symm (- 1) .cse17)) (res .cse1 (symm .cse17 (- 1)) (=+2 .cse21))))) (res .cse0 (! (res .cse1 (let ((.cse20 (= x 1))) (let ((.cse11 (=> be0 .cse20))) (let ((.cse2 (=> .cse1 .cse11))) (res .cse2 (=>+ 0 .cse2) (let ((.cse18 (and (and (=> br0 .cse20) (=> br1 (= y 1))) (and (=> br2 (= z 1)) (= (ControlFlow 0 3) 2))))) (let ((.cse3 (=> .cse18 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse19 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse19 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse13 (- 0 1))) (let ((.cse12 (= .cse17 .cse13))) (let ((.cse10 (=> .cse12 .cse11))) (let ((.cse9 (=> .cse18 .cse10))) (let ((.cse5 (=> .cse19 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (res (= .cse11 .cse11) (refl .cse11) (res (= .cse12 .cse1) (res (= .cse13 (- 1)) (let ((.cse14 (* (- 1) 1))) (res (= .cse14 (- 1)) (poly* .cse14 (- 1)) (res (= 0 0) (refl 0) (let ((.cse15 (+ 0 .cse14)) (.cse16 (+ 0 (- 1)))) (res (= .cse15 .cse16) (cong (+ 0 .cse14) (+ 0 (- 1))) (res (= .cse13 .cse15) (-def 0 1) (res (= .cse16 (- 1)) (poly+ .cse16 (- 1)) (trans .cse13 .cse15 .cse16 (- 1))))))))) (res (= .cse17 .cse17) (refl .cse17) (cong (= .cse17 .cse13) (= .cse17 (- 1))))) (cong (=> .cse12 .cse11) (=> .cse1 .cse11)))) (res (= .cse18 .cse18) (refl .cse18) (cong (=> .cse18 .cse10) (=> .cse18 .cse2)))) (res (= .cse19 .cse19) (refl .cse19) (cong (=> .cse19 .cse9) (=> .cse19 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7))))))))))))))))))) (res .cse21 .cse22 (=-2 .cse21))) :proves (+ .cse0) :input) (! (let ((.cse24 (not .cse1))) (res .cse1 (let ((.cse23 (not .cse0))) (res .cse23 (res .cse24 (not+ .cse24) (let ((.cse25 (= .cse24 .cse23))) (res .cse25 (res .cse21 .cse22 (cong (not .cse1) (not .cse0))) (=-2 .cse25)))) (not- .cse23))) (res .cse24 (assume .cse24) (not- .cse24)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_testUnsatCore.bpl.mod.smt2:71:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_testUnsatCore.bpl.mod.smt2:74:10: Logical context not inconsistent!")
unsat
(! (let ((.cse15 (ControlFlow 0 2))) (let ((.cse2 (= .cse15 (- 1))) (.cse0 (= (- 1) .cse15))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse15)) (res .cse2 (symm .cse15 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse34 (=> br2 false))) (let ((.cse1 (=> .cse2 .cse34))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse50 (=> br1 false))) (let ((.cse5 (=> .cse50 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse9 (= .cse15 (- 3)))) (let ((.cse7 (=> .cse9 .cse50))) (let ((.cse18 (=> br0 true)) (.cse16 (and .cse7 .cse5))) (let ((.cse6 (=> .cse18 .cse16))) (res .cse6 (res .cse7 (! (let ((.cse8 (= (- 3) .cse15))) (let ((.cse10 (= .cse9 .cse8))) (let-proof ((.cse11 (res .cse8 (res .cse9 (=+1 .cse10) (symm (- 3) .cse15)) (res .cse9 (symm .cse15 (- 3)) (=+2 .cse10))))) (res .cse8 (! (res .cse9 (=>+ 0 .cse7) (res .cse10 .cse11 (=-2 .cse10))) :proves (+ .cse7 + .cse8) :input) (! (let ((.cse13 (not .cse9))) (res .cse9 (let ((.cse12 (not .cse8))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res .cse10 .cse11 (cong (not .cse9) (not .cse8))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13)))) :proves (- .cse8) :input))))) :proves (+ .cse7) :rup) (! (res .cse16 (and+ .cse16) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) (! (let ((.cse64 (= .cse15 (- 4)))) (let ((.cse17 (=> .cse64 .cse18))) (let-proof ((.cse19 true+)) (res .cse17 (! (res .cse18 (! (res true .cse19 (=>+ 1 .cse18)) :proves (+ .cse18) :input) (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse18) :input)) :proves (+ .cse17) :rup) (! (let ((.cse20 (and .cse17 .cse6))) (res .cse20 (and+ .cse20) (let ((.cse71 (= (ControlFlow 0 5) 2))) (let ((.cse21 (=> .cse71 .cse20))) (res .cse21 (=>+ 1 .cse21) (let ((.cse72 (= (ControlFlow 0 0) 5))) (let ((.cse22 (=> .cse72 .cse21))) (res .cse22 (=>+ 1 .cse22) (let ((.cse36 (= 3 1)) (.cse39 (- 0 1))) (let ((.cse58 (= 2 1)) (.cse53 (- 0 3)) (.cse38 (= .cse15 .cse39)) (.cse33 (=> br2 .cse36))) (let ((.cse32 (=> .cse38 .cse33)) (.cse52 (= .cse15 .cse53)) (.cse49 (=> br1 .cse58))) (let ((.cse70 (= 1 1)) (.cse65 (- 0 4)) (.cse51 (=> .cse52 .cse49)) (.cse31 (=> .cse49 .cse32))) (let ((.cse30 (and .cse51 .cse31)) (.cse63 (= .cse15 .cse65)) (.cse61 (=> br0 .cse70))) (let ((.cse62 (=> .cse63 .cse61)) (.cse29 (=> .cse61 .cse30))) (let ((.cse28 (and .cse62 .cse29))) (let ((.cse27 (=> .cse71 .cse28))) (let ((.cse23 (=> .cse72 .cse27))) (let ((.cse25 (not .cse23))) (res .cse23 (let ((.cse24 (not .cse22))) (res .cse24 (res .cse25 (not+ .cse25) (let ((.cse26 (= .cse25 .cse24))) (res .cse26 (res (= .cse23 .cse22) (res (= .cse27 .cse21) (res (= .cse28 .cse20) (let ((.cse59 (= .cse61 .cse18)) (.cse41 (= 0 0)) (.cse45 (= .cse15 .cse15))) (let-proof ((.cse60 (let ((.cse69 (= .cse70 true))) (res .cse69 (res true .cse19 (res .cse70 (refl 1) (=+2 .cse69))) (res (= br0 br0) (refl br0) (cong (=> br0 .cse70) (=> br0 true)))))) (.cse42 (refl 0)) (.cse46 (refl .cse15))) (res (= .cse29 .cse6) (res (= .cse30 .cse16) (let-proof ((.cse37 false-)) (let ((.cse47 (= .cse49 .cse50))) (let-proof ((.cse48 (let ((.cse57 (= .cse58 false))) (res .cse57 (res false (res .cse58 (=+1 .cse57) (farkas 1 .cse58)) .cse37) (res (= br1 br1) (refl br1) (cong (=> br1 .cse58) (=> br1 false))))))) (res (= .cse31 .cse5) (res (= .cse32 .cse1) (res (= .cse33 .cse34) (let ((.cse35 (= .cse36 false))) (res .cse35 (res false (res .cse36 (=+1 .cse35) (farkas 1 .cse36)) .cse37) (res (= br2 br2) (refl br2) (cong (=> br2 .cse36) (=> br2 false))))) (res (= .cse38 .cse2) (res (= .cse39 (- 1)) (let ((.cse40 (* (- 1) 1))) (res (= .cse40 (- 1)) (poly* .cse40 (- 1)) (res .cse41 .cse42 (let ((.cse43 (+ 0 .cse40)) (.cse44 (+ 0 (- 1)))) (res (= .cse43 .cse44) (cong (+ 0 .cse40) (+ 0 (- 1))) (res (= .cse39 .cse43) (-def 0 1) (res (= .cse44 (- 1)) (poly+ .cse44 (- 1)) (trans .cse39 .cse43 .cse44 (- 1))))))))) (res .cse45 .cse46 (cong (= .cse15 .cse39) (= .cse15 (- 1))))) (cong (=> .cse38 .cse33) (=> .cse2 .cse34)))) (res .cse47 .cse48 (cong (=> .cse49 .cse32) (=> .cse50 .cse1)))) (res (= .cse51 .cse7) (res .cse47 .cse48 (res (= .cse52 .cse9) (res (= .cse53 (- 3)) (let ((.cse54 (* (- 1) 3))) (res (= .cse54 (- 3)) (poly* .cse54 (- 3)) (res .cse41 .cse42 (let ((.cse55 (+ 0 .cse54)) (.cse56 (+ 0 (- 3)))) (res (= .cse55 .cse56) (cong (+ 0 .cse54) (+ 0 (- 3))) (res (= .cse53 .cse55) (-def 0 3) (res (= .cse56 (- 3)) (poly+ .cse56 (- 3)) (trans .cse53 .cse55 .cse56 (- 3))))))))) (res .cse45 .cse46 (cong (= .cse15 .cse53) (= .cse15 (- 3))))) (cong (=> .cse52 .cse49) (=> .cse9 .cse50)))) (cong (and .cse51 .cse31) (and .cse7 .cse5))))))) (res .cse59 .cse60 (cong (=> .cse61 .cse30) (=> .cse18 .cse16)))) (res (= .cse62 .cse17) (res .cse59 .cse60 (res (= .cse63 .cse64) (res (= .cse65 (- 4)) (let ((.cse66 (* (- 1) 4))) (res (= .cse66 (- 4)) (poly* .cse66 (- 4)) (res .cse41 .cse42 (let ((.cse67 (+ 0 .cse66)) (.cse68 (+ 0 (- 4)))) (res (= .cse67 .cse68) (cong (+ 0 .cse66) (+ 0 (- 4))) (res (= .cse65 .cse67) (-def 0 4) (res (= .cse68 (- 4)) (poly+ .cse68 (- 4)) (trans .cse65 .cse67 .cse68 (- 4))))))))) (res .cse45 .cse46 (cong (= .cse15 .cse65) (= .cse15 (- 4))))) (cong (=> .cse63 .cse61) (=> .cse64 .cse18)))) (cong (and .cse62 .cse29) (and .cse17 .cse6)))))) (res (= .cse71 .cse71) (refl .cse71) (cong (=> .cse71 .cse28) (=> .cse71 .cse20)))) (res (= .cse72 .cse72) (refl .cse72) (cong (=> .cse72 .cse27) (=> .cse72 .cse21)))) (cong (not .cse23) (not .cse22))) (=-2 .cse26)))) (not- .cse24))) (res .cse25 (assume .cse25) (not- .cse25))))))))))))))))))))) :proves (- .cse17 - .cse6) :input))))) :proves (- .cse6) :rup)))))) :proves (- .cse5) :rup)))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse74 (not .cse2))) (res .cse2 (let ((.cse73 (not .cse0))) (res .cse73 (res .cse74 (not+ .cse74) (let ((.cse75 (= .cse74 .cse73))) (res .cse75 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse75)))) (not- .cse73))) (res .cse74 (assume .cse74) (not- .cse74)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
