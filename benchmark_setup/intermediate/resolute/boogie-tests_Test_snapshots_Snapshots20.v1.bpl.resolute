success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots20.v1.bpl.mod.smt2:28:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots20.v1.bpl.mod.smt2:31:10: Logical context not inconsistent!")
unsat
(! (let ((.cse50 (ControlFlow 0 5))) (let ((.cse2 (= .cse50 (- 6))) (.cse0 (= (- 6) .cse50))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 6) .cse50)) (res .cse2 (symm .cse50 (- 6)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse87 (ControlFlow 0 2))) (let ((.cse82 (= .cse87 (- 1)))) (let ((.cse36 (= .cse50 2)) (.cse38 (=> .cse82 false))) (let ((.cse33 (=> .cse36 .cse38))) (let ((.cse5 (=> false .cse33))) (let-proof ((.cse6 false-)) (res .cse5 (! (res false (=>+ 0 .cse5) .cse6) :proves (+ .cse5) :input) (let ((.cse89 (ControlFlow 0 7))) (let ((.cse57 (= .cse89 5)) (.cse8 (and .cse1 .cse5))) (let ((.cse7 (=> .cse57 .cse8))) (res .cse7 (! (res .cse8 (and+ .cse8) (=>+ 1 .cse7)) :proves (+ .cse7 - .cse1 - .cse5) :input) (! (let ((.cse20 (ControlFlow 0 3))) (let ((.cse64 (= .cse20 2))) (let ((.cse63 (=> .cse64 .cse38)) (.cse14 (= .cse20 (- 4)))) (let ((.cse12 (=> .cse14 false)) (.cse11 (=> false .cse63))) (let ((.cse21 (and .cse12 .cse11))) (let ((.cse77 (= .cse89 3)) (.cse10 (=> true .cse21))) (let ((.cse9 (=> .cse77 .cse10))) (res .cse9 (! (res .cse10 (! (res .cse11 (! (res false (=>+ 0 .cse11) .cse6) :proves (+ .cse11) :input) (res .cse12 (! (let ((.cse13 (= (- 4) .cse20))) (let ((.cse15 (= .cse14 .cse13))) (let-proof ((.cse16 (res .cse13 (res .cse14 (=+1 .cse15) (symm (- 4) .cse20)) (res .cse14 (symm .cse20 (- 4)) (=+2 .cse15))))) (res .cse13 (! (res .cse14 (=>+ 0 .cse12) (res .cse15 .cse16 (=-2 .cse15))) :proves (+ .cse12 + .cse13) :input) (! (let ((.cse18 (not .cse14))) (res .cse14 (let ((.cse17 (not .cse13))) (res .cse17 (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (res .cse15 .cse16 (cong (not .cse14) (not .cse13))) (=-2 .cse19)))) (not- .cse17))) (res .cse18 (assume .cse18) (not- .cse18)))) :proves (- .cse13) :input))))) :proves (+ .cse12) :rup) (! (res .cse21 (and+ .cse21) (=>+ 1 .cse10)) :proves (+ .cse10 - .cse12 - .cse11) :input))) :proves (+ .cse10) :rup) (! (=>+ 1 .cse9) :proves (+ .cse9 - .cse10) :input)) :proves (+ .cse9) :rup) (! (let ((.cse22 (and .cse9 .cse7))) (res .cse22 (and+ .cse22) (let ((.cse88 (= (ControlFlow 0 0) 7))) (let ((.cse23 (=> .cse88 .cse22))) (res .cse23 (=>+ 1 .cse23) (let ((.cse80 (= 3 3)) (.cse83 (- 0 1))) (let ((.cse81 (= .cse87 .cse83)) (.cse78 (not .cse80))) (let ((.cse75 (= 1 1)) (.cse70 (- 0 4)) (.cse37 (=> .cse81 .cse78))) (let ((.cse62 (=> .cse64 .cse37)) (.cse69 (= .cse20 .cse70)) (.cse67 (not .cse75)) (.cse56 (= 2 2)) (.cse44 (- 0 6))) (let ((.cse32 (=> .cse36 .cse37)) (.cse43 (= .cse50 .cse44)) (.cse41 (not .cse56)) (.cse68 (=> .cse69 .cse67)) (.cse61 (=> .cse67 .cse62))) (let ((.cse46 (= 0 0)) (.cse60 (and .cse68 .cse61)) (.cse42 (=> .cse43 .cse41)) (.cse31 (=> .cse41 .cse32))) (let ((.cse30 (and .cse42 .cse31)) (.cse59 (=> .cse46 .cse60))) (let ((.cse58 (=> .cse77 .cse59)) (.cse29 (=> .cse57 .cse30))) (let ((.cse28 (and .cse58 .cse29))) (let ((.cse24 (=> .cse88 .cse28))) (let ((.cse26 (not .cse24))) (res .cse24 (let ((.cse25 (not .cse23))) (res .cse25 (res .cse26 (not+ .cse26) (let ((.cse27 (= .cse26 .cse25))) (res .cse27 (res (= .cse24 .cse23) (res (= .cse28 .cse22) (let ((.cse53 (not true))) (let ((.cse51 (= .cse53 false))) (let-proof ((.cse55 true+)) (let-proof ((.cse52 (res false (res .cse53 (=+1 .cse51) (res true .cse55 (not- .cse53))) .cse6)) (.cse47 (refl 0))) (let ((.cse34 (= .cse37 .cse38))) (let-proof ((.cse35 (res (= .cse78 false) (res .cse51 .cse52 (res (= .cse78 .cse53) (let ((.cse79 (= .cse80 true))) (res .cse79 (res true .cse55 (res .cse80 (refl 3) (=+2 .cse79))) (cong (not .cse80) (not true)))) (trans .cse78 .cse53 false))) (res (= .cse81 .cse82) (res (= .cse83 (- 1)) (let ((.cse84 (* (- 1) 1))) (res (= .cse84 (- 1)) (poly* .cse84 (- 1)) (res .cse46 .cse47 (let ((.cse85 (+ 0 .cse84)) (.cse86 (+ 0 (- 1)))) (res (= .cse85 .cse86) (cong (+ 0 .cse84) (+ 0 (- 1))) (res (= .cse83 .cse85) (-def 0 1) (res (= .cse86 (- 1)) (poly+ .cse86 (- 1)) (trans .cse83 .cse85 .cse86 (- 1))))))))) (res (= .cse87 .cse87) (refl .cse87) (cong (= .cse87 .cse83) (= .cse87 (- 1))))) (cong (=> .cse81 .cse78) (=> .cse82 false)))))) (res (= .cse29 .cse7) (res (= .cse30 .cse8) (let ((.cse39 (= .cse41 false))) (let-proof ((.cse40 (res .cse51 .cse52 (res (= .cse41 .cse53) (let ((.cse54 (= .cse56 true))) (res .cse54 (res true .cse55 (res .cse56 (refl 2) (=+2 .cse54))) (cong (not .cse56) (not true)))) (trans .cse41 .cse53 false))))) (res (= .cse31 .cse5) (res (= .cse32 .cse33) (res .cse34 .cse35 (res (= .cse36 .cse36) (refl .cse36) (cong (=> .cse36 .cse37) (=> .cse36 .cse38)))) (res .cse39 .cse40 (cong (=> .cse41 .cse32) (=> false .cse33)))) (res (= .cse42 .cse1) (res .cse39 .cse40 (res (= .cse43 .cse2) (res (= .cse44 (- 6)) (let ((.cse45 (* (- 1) 6))) (res (= .cse45 (- 6)) (poly* .cse45 (- 6)) (res .cse46 .cse47 (let ((.cse48 (+ 0 .cse45)) (.cse49 (+ 0 (- 6)))) (res (= .cse48 .cse49) (cong (+ 0 .cse45) (+ 0 (- 6))) (res (= .cse44 .cse48) (-def 0 6) (res (= .cse49 (- 6)) (poly+ .cse49 (- 6)) (trans .cse44 .cse48 .cse49 (- 6))))))))) (res (= .cse50 .cse50) (refl .cse50) (cong (= .cse50 .cse44) (= .cse50 (- 6))))) (cong (=> .cse43 .cse41) (=> .cse2 false)))) (cong (and .cse42 .cse31) (and .cse1 .cse5)))))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse30) (=> .cse57 .cse8)))) (res (= .cse58 .cse9) (res (= .cse59 .cse10) (res (= .cse60 .cse21) (let ((.cse65 (= .cse67 false))) (let-proof ((.cse66 (res .cse51 .cse52 (res (= .cse67 .cse53) (let ((.cse74 (= .cse75 true))) (res .cse74 (res true .cse55 (res .cse75 (refl 1) (=+2 .cse74))) (cong (not .cse75) (not true)))) (trans .cse67 .cse53 false))))) (res (= .cse61 .cse11) (res (= .cse62 .cse63) (res .cse34 .cse35 (res (= .cse64 .cse64) (refl .cse64) (cong (=> .cse64 .cse37) (=> .cse64 .cse38)))) (res .cse65 .cse66 (cong (=> .cse67 .cse62) (=> false .cse63)))) (res (= .cse68 .cse12) (res .cse65 .cse66 (res (= .cse69 .cse14) (res (= .cse70 (- 4)) (let ((.cse71 (* (- 1) 4))) (res (= .cse71 (- 4)) (poly* .cse71 (- 4)) (res .cse46 .cse47 (let ((.cse72 (+ 0 .cse71)) (.cse73 (+ 0 (- 4)))) (res (= .cse72 .cse73) (cong (+ 0 .cse71) (+ 0 (- 4))) (res (= .cse70 .cse72) (-def 0 4) (res (= .cse73 (- 4)) (poly+ .cse73 (- 4)) (trans .cse70 .cse72 .cse73 (- 4))))))))) (res (= .cse20 .cse20) (refl .cse20) (cong (= .cse20 .cse70) (= .cse20 (- 4))))) (cong (=> .cse69 .cse67) (=> .cse14 false)))) (cong (and .cse68 .cse61) (and .cse12 .cse11)))))) (let ((.cse76 (= .cse46 true))) (res .cse76 (res true .cse55 (res .cse46 .cse47 (=+2 .cse76))) (cong (=> .cse46 .cse60) (=> true .cse21))))) (res (= .cse77 .cse77) (refl .cse77) (cong (=> .cse77 .cse59) (=> .cse77 .cse10)))) (cong (and .cse58 .cse29) (and .cse9 .cse7)))))))))) (res (= .cse88 .cse88) (refl .cse88) (cong (=> .cse88 .cse28) (=> .cse88 .cse22)))) (cong (not .cse24) (not .cse23))) (=-2 .cse27)))) (not- .cse25))) (res .cse26 (assume .cse26) (not- .cse26))))))))))))))))))) :proves (- .cse9 - .cse7) :input))))))))) :proves (- .cse7) :rup)))))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse91 (not .cse2))) (res .cse2 (let ((.cse90 (not .cse0))) (res .cse90 (res .cse91 (not+ .cse91) (let ((.cse92 (= .cse91 .cse90))) (res .cse92 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse92)))) (not- .cse90))) (res .cse91 (assume .cse91) (not- .cse91)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
