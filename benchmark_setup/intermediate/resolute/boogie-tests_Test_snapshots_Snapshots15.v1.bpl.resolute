success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots15.v1.bpl.mod.smt2:26:10: Logical context not inconsistent!")
unsat
(! (let ((.cse29 (ControlFlow 0 2))) (let ((.cse2 (= .cse29 (- 1))) (.cse0 (= (- 1) .cse29))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse29)) (res .cse2 (symm .cse29 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse41 (= .cse29 (- 4)))) (let ((.cse5 (=> .cse41 true))) (let-proof ((.cse6 true+)) (res .cse5 (! (res true .cse6 (=>+ 1 .cse5)) :proves (+ .cse5) :input) (let ((.cse34 (= .cse29 (- 3)))) (let ((.cse7 (=> .cse34 true))) (res .cse7 (! (res true .cse6 (=>+ 1 .cse7)) :proves (+ .cse7) :input) (! (let ((.cse8 (and .cse7 .cse1))) (res .cse8 (and+ .cse8) (let ((.cse9 (and .cse5 .cse8))) (res .cse9 (and+ .cse9) (let ((.cse46 (= (ControlFlow 0 5) 2))) (let ((.cse10 (=> .cse46 .cse9))) (res .cse10 (=>+ 1 .cse10) (let ((.cse47 (= (ControlFlow 0 0) 5))) (let ((.cse11 (=> .cse47 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse35 (- 0 3)) (.cse21 (- 0 1))) (let ((.cse42 (- 0 4)) (.cse20 (= .cse29 .cse21)) (.cse33 (= .cse29 .cse35))) (let ((.cse30 (=> .cse33 true)) (.cse19 (=> .cse20 false)) (.cse40 (= .cse29 .cse42))) (let ((.cse39 (=> .cse40 true)) (.cse18 (and .cse30 .cse19))) (let ((.cse17 (and .cse39 .cse18))) (let ((.cse16 (=> .cse46 .cse17))) (let ((.cse12 (=> .cse47 .cse16))) (let ((.cse14 (not .cse12))) (res .cse12 (let ((.cse13 (not .cse11))) (res .cse13 (res .cse14 (not+ .cse14) (let ((.cse15 (= .cse14 .cse13))) (res .cse15 (res (= .cse12 .cse11) (res (= .cse16 .cse10) (res (= .cse17 .cse9) (let ((.cse31 (= true true)) (.cse23 (= 0 0)) (.cse27 (= .cse29 .cse29))) (let-proof ((.cse32 (refl true)) (.cse24 (refl 0)) (.cse28 (refl .cse29))) (res (= .cse18 .cse8) (res (= .cse19 .cse1) (res (= false false) (refl false) (res (= .cse20 .cse2) (res (= .cse21 (- 1)) (let ((.cse22 (* (- 1) 1))) (res (= .cse22 (- 1)) (poly* .cse22 (- 1)) (res .cse23 .cse24 (let ((.cse25 (+ 0 .cse22)) (.cse26 (+ 0 (- 1)))) (res (= .cse25 .cse26) (cong (+ 0 .cse22) (+ 0 (- 1))) (res (= .cse21 .cse25) (-def 0 1) (res (= .cse26 (- 1)) (poly+ .cse26 (- 1)) (trans .cse21 .cse25 .cse26 (- 1))))))))) (res .cse27 .cse28 (cong (= .cse29 .cse21) (= .cse29 (- 1))))) (cong (=> .cse20 false) (=> .cse2 false)))) (res (= .cse30 .cse7) (res .cse31 .cse32 (res (= .cse33 .cse34) (res (= .cse35 (- 3)) (let ((.cse36 (* (- 1) 3))) (res (= .cse36 (- 3)) (poly* .cse36 (- 3)) (res .cse23 .cse24 (let ((.cse37 (+ 0 .cse36)) (.cse38 (+ 0 (- 3)))) (res (= .cse37 .cse38) (cong (+ 0 .cse36) (+ 0 (- 3))) (res (= .cse35 .cse37) (-def 0 3) (res (= .cse38 (- 3)) (poly+ .cse38 (- 3)) (trans .cse35 .cse37 .cse38 (- 3))))))))) (res .cse27 .cse28 (cong (= .cse29 .cse35) (= .cse29 (- 3))))) (cong (=> .cse33 true) (=> .cse34 true)))) (cong (and .cse30 .cse19) (and .cse7 .cse1)))) (res (= .cse39 .cse5) (res .cse31 .cse32 (res (= .cse40 .cse41) (res (= .cse42 (- 4)) (let ((.cse43 (* (- 1) 4))) (res (= .cse43 (- 4)) (poly* .cse43 (- 4)) (res .cse23 .cse24 (let ((.cse44 (+ 0 .cse43)) (.cse45 (+ 0 (- 4)))) (res (= .cse44 .cse45) (cong (+ 0 .cse43) (+ 0 (- 4))) (res (= .cse42 .cse44) (-def 0 4) (res (= .cse45 (- 4)) (poly+ .cse45 (- 4)) (trans .cse42 .cse44 .cse45 (- 4))))))))) (res .cse27 .cse28 (cong (= .cse29 .cse42) (= .cse29 (- 4))))) (cong (=> .cse40 true) (=> .cse41 true)))) (cong (and .cse39 .cse18) (and .cse5 .cse8)))))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse17) (=> .cse46 .cse9)))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse16) (=> .cse47 .cse10)))) (cong (not .cse12) (not .cse11))) (=-2 .cse15)))) (not- .cse13))) (res .cse14 (assume .cse14) (not- .cse14))))))))))))))))))))) :proves (- .cse1 - .cse7 - .cse5) :input)))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse49 (not .cse2))) (res .cse2 (let ((.cse48 (not .cse0))) (res .cse48 (res .cse49 (not+ .cse49) (let ((.cse50 (= .cse49 .cse48))) (res .cse50 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse50)))) (not- .cse48))) (res .cse49 (assume .cse49) (not- .cse49)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
