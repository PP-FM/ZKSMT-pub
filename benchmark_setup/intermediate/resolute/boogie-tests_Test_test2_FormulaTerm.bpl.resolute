success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_FormulaTerm.bpl.mod.smt2:29:10: Logical context not inconsistent!")
unsat
(! (let ((.cse19 (ControlFlow 0 2))) (let ((.cse1 (= .cse19 (- 1))) (.cse0 (= (- 1) .cse19))) (let ((.cse23 (= .cse1 .cse0))) (let-proof ((.cse24 (res .cse0 (res .cse1 (=+1 .cse23) (symm (- 1) .cse19)) (res .cse1 (symm .cse19 (- 1)) (=+2 .cse23))))) (res .cse0 (! (res .cse1 (let ((.cse20 (= z 3))) (let ((.cse2 (and .cse20 .cse1))) (res .cse2 (let ((.cse12 (= z (+ x y)))) (let ((.cse3 (=> .cse2 .cse12))) (res .cse3 (=>+ 0 .cse3) (let ((.cse21 (= (ControlFlow 0 3) 2))) (let ((.cse4 (=> .cse21 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse22 (= (ControlFlow 0 0) 3))) (let ((.cse5 (=> .cse22 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse15 (- 0 1))) (let ((.cse14 (= .cse19 .cse15))) (let ((.cse13 (and .cse20 .cse14))) (let ((.cse11 (=> .cse13 .cse12))) (let ((.cse10 (=> .cse21 .cse11))) (let ((.cse6 (=> .cse22 .cse10))) (let ((.cse8 (not .cse6))) (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res (= .cse6 .cse5) (res (= .cse10 .cse4) (res (= .cse11 .cse3) (res (= .cse12 .cse12) (refl .cse12) (res (= .cse13 .cse2) (res (= .cse14 .cse1) (res (= .cse15 (- 1)) (let ((.cse16 (* (- 1) 1))) (res (= .cse16 (- 1)) (poly* .cse16 (- 1)) (res (= 0 0) (refl 0) (let ((.cse17 (+ 0 .cse16)) (.cse18 (+ 0 (- 1)))) (res (= .cse17 .cse18) (cong (+ 0 .cse16) (+ 0 (- 1))) (res (= .cse15 .cse17) (-def 0 1) (res (= .cse18 (- 1)) (poly+ .cse18 (- 1)) (trans .cse15 .cse17 .cse18 (- 1))))))))) (res (= .cse19 .cse19) (refl .cse19) (cong (= .cse19 .cse15) (= .cse19 (- 1))))) (res (= .cse20 .cse20) (refl .cse20) (cong (and .cse20 .cse14) (and .cse20 .cse1)))) (cong (=> .cse13 .cse12) (=> .cse2 .cse12)))) (res (= .cse21 .cse21) (refl .cse21) (cong (=> .cse21 .cse11) (=> .cse21 .cse3)))) (res (= .cse22 .cse22) (refl .cse22) (cong (=> .cse22 .cse10) (=> .cse22 .cse4)))) (cong (not .cse6) (not .cse5))) (=-2 .cse9)))) (not- .cse7))) (res .cse8 (assume .cse8) (not- .cse8))))))))))))))))))) (and- 1 .cse2)))) (res .cse23 .cse24 (=-2 .cse23))) :proves (+ .cse0) :input) (! (let ((.cse26 (not .cse1))) (res .cse1 (let ((.cse25 (not .cse0))) (res .cse25 (res .cse26 (not+ .cse26) (let ((.cse27 (= .cse26 .cse25))) (res .cse27 (res .cse23 .cse24 (cong (not .cse1) (not .cse0))) (=-2 .cse27)))) (not- .cse25))) (res .cse26 (assume .cse26) (not- .cse26)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse27 (ControlFlow 0 2)) (.cse31 (+ x y))) (let ((.cse1 (= z@0 .cse31)) (.cse22 (= .cse27 (- 1))) (.cse34 (+ x y (* (- 1) z@0)))) (let ((.cse0 (= .cse34 0)) (.cse2 (and .cse1 .cse22))) (let ((.cse3 (=> .cse2 .cse1)) (.cse5 (= .cse1 .cse0))) (let-proof ((.cse6 (res .cse0 (res .cse1 (=+1 .cse5) (let ((.cse30 (= .cse31 z@0))) (res .cse30 (symm .cse31 z@0) (let ((.cse32 (< .cse34 0))) (res .cse32 (let ((.cse33 (< 0 .cse34))) (res .cse33 (trichotomy .cse34 0) (farkas 1 .cse30 1 .cse33))) (farkas 1 .cse1 1 .cse32)))))) (res .cse1 (let ((.cse35 (= 0 .cse34))) (res .cse35 (symm 0 .cse34) (let ((.cse36 (< z@0 .cse31))) (res .cse36 (let ((.cse37 (< .cse31 z@0))) (res .cse37 (trichotomy z@0 .cse31) (farkas 1 .cse35 1 .cse37))) (farkas 1 .cse0 1 .cse36))))) (=+2 .cse5)))) (.cse4 (let ((.cse28 (= (ControlFlow 0 3) 2))) (let ((.cse10 (=> .cse28 .cse3))) (res .cse10 (=>+ 1 .cse10) (let ((.cse29 (= (ControlFlow 0 0) 3))) (let ((.cse11 (=> .cse29 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse23 (- 0 1))) (let ((.cse21 (= .cse27 .cse23))) (let ((.cse20 (and .cse1 .cse21))) (let ((.cse17 (=> .cse20 .cse1))) (let ((.cse16 (=> .cse28 .cse17))) (let ((.cse12 (=> .cse29 .cse16))) (let ((.cse14 (not .cse12))) (res .cse12 (let ((.cse13 (not .cse11))) (res .cse13 (res .cse14 (not+ .cse14) (let ((.cse15 (= .cse14 .cse13))) (res .cse15 (res (= .cse12 .cse11) (res (= .cse16 .cse10) (res (= .cse17 .cse3) (let ((.cse18 (= .cse1 .cse1))) (let-proof ((.cse19 (refl .cse1))) (res .cse18 .cse19 (res (= .cse20 .cse2) (res (= .cse21 .cse22) (res (= .cse23 (- 1)) (let ((.cse24 (* (- 1) 1))) (res (= .cse24 (- 1)) (poly* .cse24 (- 1)) (res (= 0 0) (refl 0) (let ((.cse25 (+ 0 .cse24)) (.cse26 (+ 0 (- 1)))) (res (= .cse25 .cse26) (cong (+ 0 .cse24) (+ 0 (- 1))) (res (= .cse23 .cse25) (-def 0 1) (res (= .cse26 (- 1)) (poly+ .cse26 (- 1)) (trans .cse23 .cse25 .cse26 (- 1))))))))) (res (= .cse27 .cse27) (refl .cse27) (cong (= .cse27 .cse23) (= .cse27 (- 1))))) (res .cse18 .cse19 (cong (and .cse1 .cse21) (and .cse1 .cse22)))) (cong (=> .cse20 .cse1) (=> .cse2 .cse1)))))) (res (= .cse28 .cse28) (refl .cse28) (cong (=> .cse28 .cse17) (=> .cse28 .cse3)))) (res (= .cse29 .cse29) (refl .cse29) (cong (=> .cse29 .cse16) (=> .cse29 .cse10)))) (cong (not .cse12) (not .cse11))) (=-2 .cse15)))) (not- .cse13))) (res .cse14 (assume .cse14) (not- .cse14)))))))))))))))))) (res .cse0 (! (res .cse1 (res .cse2 (res .cse3 (=>+ 0 .cse3) .cse4) (and- 0 .cse2)) (res .cse5 .cse6 (=-2 .cse5))) :proves (+ .cse0) :input) (! (res .cse1 (let ((.cse7 (not .cse0))) (res .cse7 (let ((.cse8 (not .cse1))) (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res .cse5 .cse6 (cong (not .cse1) (not .cse0))) (=-2 .cse9))))) (not- .cse7))) (res .cse3 (=>+ 1 .cse3) .cse4)) :proves (- .cse0) :input))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse65 (ControlFlow 0 2))) (let ((.cse7 (+ x y)) (.cse16 (= z@1 z@0)) (.cse60 (= .cse65 (- 1)))) (let ((.cse17 (and .cse16 .cse60)) (.cse40 (= z@1 .cse7))) (let ((.cse2 (= z@0 .cse7)) (.cse18 (=> .cse17 .cse40))) (let ((.cse38 (* (- 1) z@1)) (.cse3 (=> .cse2 .cse18))) (let ((.cse32 (+ x y .cse38))) (let-proof ((.cse4 (let ((.cse68 (= (ControlFlow 0 3) 2))) (let ((.cse49 (=> .cse68 .cse3))) (res .cse49 (=>+ 1 .cse49) (let ((.cse69 (= (ControlFlow 0 0) 3))) (let ((.cse50 (=> .cse69 .cse49))) (res .cse50 (=>+ 1 .cse50) (let ((.cse61 (- 0 1)) (.cse67 (+ 0 z@0))) (let ((.cse66 (= z@1 .cse67)) (.cse59 (= .cse65 .cse61))) (let ((.cse58 (and .cse66 .cse59))) (let ((.cse57 (=> .cse58 .cse40))) (let ((.cse56 (=> .cse2 .cse57))) (let ((.cse55 (=> .cse68 .cse56))) (let ((.cse51 (=> .cse69 .cse55))) (let ((.cse53 (not .cse51))) (res .cse51 (let ((.cse52 (not .cse50))) (res .cse52 (res .cse53 (not+ .cse53) (let ((.cse54 (= .cse53 .cse52))) (res .cse54 (res (= .cse51 .cse50) (res (= .cse55 .cse49) (res (= .cse56 .cse3) (res (= .cse57 .cse18) (res (= .cse40 .cse40) (refl .cse40) (res (= .cse58 .cse17) (res (= .cse59 .cse60) (res (= .cse61 (- 1)) (let ((.cse62 (* (- 1) 1))) (res (= .cse62 (- 1)) (poly* .cse62 (- 1)) (res (= 0 0) (refl 0) (let ((.cse63 (+ 0 .cse62)) (.cse64 (+ 0 (- 1)))) (res (= .cse63 .cse64) (cong (+ 0 .cse62) (+ 0 (- 1))) (res (= .cse61 .cse63) (-def 0 1) (res (= .cse64 (- 1)) (poly+ .cse64 (- 1)) (trans .cse61 .cse63 .cse64 (- 1))))))))) (res (= .cse65 .cse65) (refl .cse65) (cong (= .cse65 .cse61) (= .cse65 (- 1))))) (res (= .cse66 .cse16) (res (= .cse67 z@0) (poly+ .cse67 z@0) (res (= z@1 z@1) (refl z@1) (cong (= z@1 .cse67) (= z@1 z@0)))) (cong (and .cse66 .cse59) (and .cse16 .cse60)))) (cong (=> .cse58 .cse40) (=> .cse17 .cse40)))) (res (= .cse2 .cse2) (refl .cse2) (cong (=> .cse2 .cse57) (=> .cse2 .cse18)))) (res (= .cse68 .cse68) (refl .cse68) (cong (=> .cse68 .cse56) (=> .cse68 .cse3)))) (res (= .cse69 .cse69) (refl .cse69) (cong (=> .cse69 .cse55) (=> .cse69 .cse49)))) (cong (not .cse51) (not .cse50))) (=-2 .cse54)))) (not- .cse52))) (res .cse53 (assume .cse53) (not- .cse53))))))))))))))))))) (let ((.cse34 (< 0 .cse32)) (.cse33 (< .cse32 0)) (.cse0 (= .cse32 0))) (let-proof ((.cse35 (trichotomy .cse32 0)) (.cse19 (res .cse3 (=>+ 1 .cse3) .cse4))) (res .cse0 (let ((.cse39 (* (- 1) z@0))) (let ((.cse10 (+ x y .cse39))) (let ((.cse1 (= .cse10 0)) (.cse11 (= 0 .cse10))) (let-proof ((.cse12 (symm 0 .cse10))) (res .cse1 (! (res .cse2 (res .cse3 (=>+ 0 .cse3) .cse4) (let ((.cse5 (= .cse2 .cse1))) (res .cse5 (res .cse1 (res .cse2 (=+1 .cse5) (let ((.cse6 (= .cse7 z@0))) (res .cse6 (symm .cse7 z@0) (let ((.cse8 (< .cse10 0))) (res .cse8 (let ((.cse9 (< 0 .cse10))) (res .cse9 (trichotomy .cse10 0) (farkas 1 .cse6 1 .cse9))) (farkas 1 .cse2 1 .cse8)))))) (res .cse2 (res .cse11 .cse12 (let ((.cse13 (< z@0 .cse7))) (res .cse13 (let ((.cse14 (< .cse7 z@0))) (res .cse14 (trichotomy z@0 .cse7) (farkas 1 .cse11 1 .cse14))) (farkas 1 .cse1 1 .cse13)))) (=+2 .cse5))) (=-2 .cse5)))) :proves (+ .cse1) :input) (let ((.cse24 (+ z@1 .cse39))) (let ((.cse25 (= 0 .cse24)) (.cse15 (= .cse24 0))) (let-proof ((.cse26 (symm 0 .cse24))) (res .cse15 (! (res .cse16 (res .cse17 (res .cse18 (=>+ 0 .cse18) .cse19) (and- 0 .cse17)) (let ((.cse20 (= .cse16 .cse15))) (res .cse20 (res .cse15 (res .cse16 (=+1 .cse20) (let ((.cse21 (= z@0 z@1))) (res .cse21 (symm z@0 z@1) (let ((.cse22 (< .cse24 0))) (res .cse22 (let ((.cse23 (< 0 .cse24))) (res .cse23 (trichotomy .cse24 0) (farkas 1 .cse16 1 .cse23))) (farkas 1 .cse21 1 .cse22)))))) (res .cse16 (res .cse25 .cse26 (let ((.cse27 (< z@1 z@0))) (res .cse27 (let ((.cse28 (< z@0 z@1))) (res .cse28 (trichotomy z@1 z@0) (farkas 1 .cse15 1 .cse28))) (farkas 1 .cse25 1 .cse27)))) (=+2 .cse20))) (=-2 .cse20)))) :proves (+ .cse15) :input) (let ((.cse37 (+ x y .cse38 1))) (let ((.cse29 (<= .cse37 0))) (res .cse29 (let ((.cse30 (<= .cse32 0))) (res .cse30 (! (let ((.cse31 (<= 1 .cse32))) (res .cse31 (total-int .cse32 0) (res .cse25 .cse26 (farkas 1 .cse25 1 .cse1 1 .cse31)))) :proves (- .cse15 - .cse1 + .cse30) :LA ((- 1) 1 (- 1))) (! (res .cse33 (res .cse34 .cse35 (farkas 1 .cse34 1 .cse30)) (let ((.cse36 (<= 1 .cse37))) (res .cse36 (total-int .cse37 0) (farkas 1 .cse36 1 .cse33)))) :proves (- .cse30 + .cse0 + .cse29) :trichotomy))) (! (res .cse11 .cse12 (farkas 1 .cse29 1 .cse15 1 .cse11)) :proves (- .cse29 - .cse15 - .cse1) :LA (1 1 (- 1))))))))))))))) (! (res .cse40 (let ((.cse41 (not .cse0))) (res .cse41 (let ((.cse42 (not .cse40))) (res .cse42 (not+ .cse42) (let ((.cse43 (= .cse42 .cse41))) (res .cse43 (let ((.cse44 (= .cse40 .cse0))) (res .cse44 (res .cse0 (res .cse40 (=+1 .cse44) (let ((.cse45 (= .cse7 z@1))) (res .cse45 (symm .cse7 z@1) (res .cse33 (res .cse34 .cse35 (farkas 1 .cse45 1 .cse34)) (farkas 1 .cse40 1 .cse33))))) (res .cse40 (let ((.cse46 (= 0 .cse32))) (res .cse46 (symm 0 .cse32) (let ((.cse47 (< z@1 .cse7))) (res .cse47 (let ((.cse48 (< .cse7 z@1))) (res .cse48 (trichotomy z@1 .cse7) (farkas 1 .cse46 1 .cse48))) (farkas 1 .cse0 1 .cse47))))) (=+2 .cse44))) (cong (not .cse40) (not .cse0)))) (=-2 .cse43))))) (not- .cse41))) (res .cse18 (=>+ 1 .cse18) .cse19)) :proves (- .cse0) :input))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse27 (ControlFlow 0 2)) (.cse31 (+ x y))) (let ((.cse1 (= z@0 .cse31)) (.cse22 (= .cse27 (- 1))) (.cse34 (+ x y (* (- 1) z@0)))) (let ((.cse0 (= .cse34 0)) (.cse2 (and .cse1 .cse22))) (let ((.cse3 (=> .cse2 .cse1)) (.cse5 (= .cse1 .cse0))) (let-proof ((.cse6 (res .cse0 (res .cse1 (=+1 .cse5) (let ((.cse30 (= .cse31 z@0))) (res .cse30 (symm .cse31 z@0) (let ((.cse32 (< .cse34 0))) (res .cse32 (let ((.cse33 (< 0 .cse34))) (res .cse33 (trichotomy .cse34 0) (farkas 1 .cse30 1 .cse33))) (farkas 1 .cse1 1 .cse32)))))) (res .cse1 (let ((.cse35 (= 0 .cse34))) (res .cse35 (symm 0 .cse34) (let ((.cse36 (< z@0 .cse31))) (res .cse36 (let ((.cse37 (< .cse31 z@0))) (res .cse37 (trichotomy z@0 .cse31) (farkas 1 .cse35 1 .cse37))) (farkas 1 .cse0 1 .cse36))))) (=+2 .cse5)))) (.cse4 (let ((.cse28 (= (ControlFlow 0 3) 2))) (let ((.cse10 (=> .cse28 .cse3))) (res .cse10 (=>+ 1 .cse10) (let ((.cse29 (= (ControlFlow 0 0) 3))) (let ((.cse11 (=> .cse29 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse23 (- 0 1))) (let ((.cse21 (= .cse27 .cse23))) (let ((.cse20 (and .cse1 .cse21))) (let ((.cse17 (=> .cse20 .cse1))) (let ((.cse16 (=> .cse28 .cse17))) (let ((.cse12 (=> .cse29 .cse16))) (let ((.cse14 (not .cse12))) (res .cse12 (let ((.cse13 (not .cse11))) (res .cse13 (res .cse14 (not+ .cse14) (let ((.cse15 (= .cse14 .cse13))) (res .cse15 (res (= .cse12 .cse11) (res (= .cse16 .cse10) (res (= .cse17 .cse3) (let ((.cse18 (= .cse1 .cse1))) (let-proof ((.cse19 (refl .cse1))) (res .cse18 .cse19 (res (= .cse20 .cse2) (res (= .cse21 .cse22) (res (= .cse23 (- 1)) (let ((.cse24 (* (- 1) 1))) (res (= .cse24 (- 1)) (poly* .cse24 (- 1)) (res (= 0 0) (refl 0) (let ((.cse25 (+ 0 .cse24)) (.cse26 (+ 0 (- 1)))) (res (= .cse25 .cse26) (cong (+ 0 .cse24) (+ 0 (- 1))) (res (= .cse23 .cse25) (-def 0 1) (res (= .cse26 (- 1)) (poly+ .cse26 (- 1)) (trans .cse23 .cse25 .cse26 (- 1))))))))) (res (= .cse27 .cse27) (refl .cse27) (cong (= .cse27 .cse23) (= .cse27 (- 1))))) (res .cse18 .cse19 (cong (and .cse1 .cse21) (and .cse1 .cse22)))) (cong (=> .cse20 .cse1) (=> .cse2 .cse1)))))) (res (= .cse28 .cse28) (refl .cse28) (cong (=> .cse28 .cse17) (=> .cse28 .cse3)))) (res (= .cse29 .cse29) (refl .cse29) (cong (=> .cse29 .cse16) (=> .cse29 .cse10)))) (cong (not .cse12) (not .cse11))) (=-2 .cse15)))) (not- .cse13))) (res .cse14 (assume .cse14) (not- .cse14)))))))))))))))))) (res .cse0 (! (res .cse1 (res .cse2 (res .cse3 (=>+ 0 .cse3) .cse4) (and- 0 .cse2)) (res .cse5 .cse6 (=-2 .cse5))) :proves (+ .cse0) :input) (! (res .cse1 (let ((.cse7 (not .cse0))) (res .cse7 (let ((.cse8 (not .cse1))) (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res .cse5 .cse6 (cong (not .cse1) (not .cse0))) (=-2 .cse9))))) (not- .cse7))) (res .cse3 (=>+ 1 .cse3) .cse4)) :proves (- .cse0) :input))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse112 (+ y (* (- 1) x))) (.cse105 (+ x (* (- 1) y)))) (let ((.cse102 (<= .cse105 0)) (.cse109 (<= .cse112 0))) (let ((.cse107 (not .cse109)) (.cse99 (not .cse102))) (let ((.cse96 (or .cse107 .cse99)) (.cse0 (= x y))) (let ((.cse4 (or .cse96 .cse0)) (.cse2 (not .cse0))) (let ((.cse1 (or .cse4 .cse2))) (let-proof ((.cse3 (! (let ((.cse41 (* (- 1) a))) (let ((.cse9 (+ b .cse41))) (let ((.cse72 (ControlFlow 0 2)) (.cse114 (+ a (* (- 1) b))) (.cse5 (<= .cse9 0))) (let ((.cse14 (and .cse1 .cse5)) (.cse12 (<= .cse114 0)) (.cse63 (= .cse72 (- 1)))) (let ((.cse25 (=> .cse63 t@0)) (.cse78 (= .cse72 (- 3))) (.cse16 (and .cse14 .cse12))) (let ((.cse11 (=> .cse78 .cse16)) (.cse24 (=> .cse16 .cse25)) (.cse18 (xor t@0 .cse16))) (let ((.cse21 (not .cse18)) (.cse26 (and .cse11 .cse24)) (.cse42 (= a b))) (let ((.cse43 (and .cse42 (= (ControlFlow 0 4) 2))) (.cse20 (=> .cse21 .cse26))) (let ((.cse35 (< 0 .cse114)) (.cse49 (< b a)) (.cse47 (< 0 .cse9)) (.cse48 (< a b)) (.cse27 (=> .cse43 .cse20))) (let-proof ((.cse19 (xor+ (t@0 .cse16) (t@0) (.cse16))) (.cse22 (not- .cse21)) (.cse36 (total .cse114 0))) (let ((.cse39 (= 0 .cse9)) (.cse6 (= .cse9 0))) (let-proof ((.cse28 (let ((.cse113 (= (ControlFlow 0 0) 4))) (let ((.cse50 (=> .cse113 .cse27))) (res .cse50 (=>+ 1 .cse50) (let ((.cse108 (< x y)) (.cse100 (> x y))) (let ((.cse95 (or .cse108 .cse100))) (let ((.cse94 (or .cse95 .cse0))) (let ((.cse64 (- 0 1)) (.cse93 (or .cse94 .cse2)) (.cse91 (>= a b))) (let ((.cse88 (and .cse93 .cse91)) (.cse87 (<= a b)) (.cse79 (- 0 3)) (.cse62 (= .cse72 .cse64))) (let ((.cse59 (=> .cse62 t@0)) (.cse77 (= .cse72 .cse79)) (.cse75 (and .cse88 .cse87))) (let ((.cse76 (=> .cse77 .cse75)) (.cse58 (=> .cse75 .cse59))) (let ((.cse83 (= t@0 .cse75)) (.cse57 (and .cse76 .cse58))) (let ((.cse56 (=> .cse83 .cse57))) (let ((.cse55 (=> .cse43 .cse56))) (let ((.cse51 (=> .cse113 .cse55))) (let ((.cse53 (not .cse51))) (res .cse51 (let ((.cse52 (not .cse50))) (res .cse52 (res .cse53 (not+ .cse53) (let ((.cse54 (= .cse53 .cse52))) (res .cse54 (res (= .cse51 .cse50) (res (= .cse55 .cse27) (res (= .cse56 .cse20) (let ((.cse73 (= .cse75 .cse16)) (.cse60 (= t@0 t@0))) (let-proof ((.cse74 (let ((.cse86 (= .cse87 .cse12))) (res .cse86 (res .cse12 (res .cse87 (=+1 .cse86) (res .cse35 .cse36 (farkas 1 .cse87 1 .cse35))) (res .cse87 (res .cse49 (total a b) (farkas 1 .cse49 1 .cse12)) (=+2 .cse86))) (res (= .cse88 .cse14) (let ((.cse89 (= .cse91 .cse5))) (res .cse89 (let ((.cse92 (<= b a))) (let ((.cse90 (= .cse91 .cse92))) (res .cse90 (>=def a b) (res .cse5 (res .cse91 (=+1 .cse89) (res .cse92 (=-2 .cse90) (res .cse47 (total .cse9 0) (farkas 1 .cse92 1 .cse47)))) (res .cse91 (res .cse92 (res .cse48 (total b a) (farkas 1 .cse48 1 .cse5)) (=-1 .cse90)) (=+2 .cse89)))))) (res (= .cse93 .cse1) (res (= .cse2 .cse2) (refl .cse2) (res (= .cse94 .cse4) (res (= .cse0 .cse0) (refl .cse0) (res (= .cse95 .cse96) (let ((.cse97 (= .cse100 .cse99))) (res .cse97 (let ((.cse101 (< y x))) (let ((.cse98 (= .cse100 .cse101))) (res .cse98 (>def x y) (res .cse99 (res .cse100 (=+1 .cse97) (res .cse101 (=-2 .cse98) (res .cse102 (not+ .cse99) (farkas 1 .cse101 1 .cse102)))) (res .cse100 (res .cse101 (let ((.cse103 (<= x y))) (res .cse103 (total x y) (res .cse102 (let ((.cse104 (< 0 .cse105))) (res .cse104 (total .cse105 0) (farkas 1 .cse103 1 .cse104))) (not- .cse99)))) (=-1 .cse98)) (=+2 .cse97)))))) (let ((.cse106 (= .cse108 .cse107))) (res .cse106 (res .cse107 (res .cse108 (=+1 .cse106) (res .cse109 (not+ .cse107) (farkas 1 .cse108 1 .cse109))) (res .cse108 (let ((.cse110 (<= y x))) (res .cse110 (total y x) (res .cse109 (let ((.cse111 (< 0 .cse112))) (res .cse111 (total .cse112 0) (farkas 1 .cse110 1 .cse111))) (not- .cse107)))) (=+2 .cse106))) (cong (or .cse108 .cse100) (or .cse107 .cse99)))))) (cong (or .cse95 .cse0) (or .cse96 .cse0)))) (cong (or .cse94 .cse2) (or .cse4 .cse2)))) (cong (and .cse93 .cse91) (and .cse1 .cse5))))) (cong (and .cse88 .cse87) (and .cse14 .cse12)))))) (.cse61 (refl t@0))) (res (= .cse57 .cse26) (let ((.cse66 (= 0 0)) (.cse70 (= .cse72 .cse72))) (let-proof ((.cse67 (refl 0)) (.cse71 (refl .cse72))) (res (= .cse58 .cse24) (res (= .cse59 .cse25) (res .cse60 .cse61 (res (= .cse62 .cse63) (res (= .cse64 (- 1)) (let ((.cse65 (* (- 1) 1))) (res (= .cse65 (- 1)) (poly* .cse65 (- 1)) (res .cse66 .cse67 (let ((.cse68 (+ 0 .cse65)) (.cse69 (+ 0 (- 1)))) (res (= .cse68 .cse69) (cong (+ 0 .cse65) (+ 0 (- 1))) (res (= .cse64 .cse68) (-def 0 1) (res (= .cse69 (- 1)) (poly+ .cse69 (- 1)) (trans .cse64 .cse68 .cse69 (- 1))))))))) (res .cse70 .cse71 (cong (= .cse72 .cse64) (= .cse72 (- 1))))) (cong (=> .cse62 t@0) (=> .cse63 t@0)))) (res .cse73 .cse74 (cong (=> .cse75 .cse59) (=> .cse16 .cse25)))) (res (= .cse76 .cse11) (res .cse73 .cse74 (res (= .cse77 .cse78) (res (= .cse79 (- 3)) (let ((.cse80 (* (- 1) 3))) (res (= .cse80 (- 3)) (poly* .cse80 (- 3)) (res .cse66 .cse67 (let ((.cse81 (+ 0 .cse80)) (.cse82 (+ 0 (- 3)))) (res (= .cse81 .cse82) (cong (+ 0 .cse80) (+ 0 (- 3))) (res (= .cse79 .cse81) (-def 0 3) (res (= .cse82 (- 3)) (poly+ .cse82 (- 3)) (trans .cse79 .cse81 .cse82 (- 3))))))))) (res .cse70 .cse71 (cong (= .cse72 .cse79) (= .cse72 (- 3))))) (cong (=> .cse77 .cse75) (=> .cse78 .cse16)))) (cong (and .cse76 .cse58) (and .cse11 .cse24)))))) (res (= .cse83 .cse21) (let ((.cse85 (= t@0 .cse16))) (let ((.cse84 (= .cse85 .cse21))) (res .cse84 (res .cse85 (res .cse18 (res t@0 (res .cse16 (=+1 .cse85) .cse19) (res .cse16 (xor+ (t@0 .cse16) (.cse16) (t@0)) (=+2 .cse85))) (res .cse21 (=+1 .cse84) .cse22)) (res .cse18 (res .cse21 (not+ .cse21) (=+2 .cse84)) (res t@0 (res .cse16 (xor+ (t@0) (.cse16) (t@0 .cse16)) (=-1 .cse85)) (res .cse16 (=-2 .cse85) (xor- (t@0) (.cse16) (t@0 .cse16)))))) (res (= .cse83 .cse85) (res .cse73 .cse74 (res .cse60 .cse61 (cong (= t@0 .cse75) (= t@0 .cse16)))) (trans .cse83 .cse85 .cse21))))) (cong (=> .cse83 .cse57) (=> .cse21 .cse26)))))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse56) (=> .cse43 .cse20)))) (res (= .cse113 .cse113) (refl .cse113) (cong (=> .cse113 .cse55) (=> .cse113 .cse27)))) (cong (not .cse51) (not .cse50))) (=-2 .cse54)))) (not- .cse52))) (res .cse53 (assume .cse53) (not- .cse53))))))))))))))))))) (.cse40 (symm 0 .cse9))) (let-proof ((.cse7 (! (res .cse42 (res .cse43 (res .cse27 (=>+ 0 .cse27) .cse28) (and- 0 .cse43)) (let ((.cse44 (= .cse42 .cse6))) (res .cse44 (res .cse6 (res .cse42 (=+1 .cse44) (let ((.cse45 (= b a))) (res .cse45 (symm b a) (let ((.cse46 (< .cse9 0))) (res .cse46 (res .cse47 (trichotomy .cse9 0) (farkas 1 .cse45 1 .cse47)) (farkas 1 .cse42 1 .cse46)))))) (res .cse42 (res .cse39 .cse40 (res .cse48 (res .cse49 (trichotomy a b) (farkas 1 .cse39 1 .cse49)) (farkas 1 .cse6 1 .cse48))) (=+2 .cse44))) (=-2 .cse44)))) :proves (+ .cse6) :input))) (res .cse5 (! (res .cse6 .cse7 (! (let ((.cse8 (<= 1 .cse9))) (res .cse8 (total-int .cse9 0) (farkas 1 .cse6 1 .cse8))) :proves (- .cse6 + .cse5) :LA (1 (- 1)))) :proves (+ .cse5) :rup) (let ((.cse38 (+ b .cse41 1))) (let ((.cse10 (<= .cse38 0))) (res .cse10 (let-proof ((.cse13 (let ((.cse29 (not .cse10))) (let-proof ((.cse30 (not+ .cse29))) (res .cse29 .cse30 (let ((.cse31 (not .cse29))) (res .cse31 (let ((.cse32 (not .cse12))) (res .cse32 (not+ .cse32) (let ((.cse33 (= .cse32 .cse31))) (res .cse33 (let ((.cse34 (= .cse12 .cse29))) (res .cse34 (res .cse29 (res .cse12 (=+1 .cse34) (res .cse10 .cse30 (farkas 1 .cse12 1 .cse10))) (res .cse12 (res .cse35 .cse36 (res .cse10 (let ((.cse37 (<= 1 .cse38))) (res .cse37 (total-int .cse38 0) (farkas 1 .cse35 1 .cse37))) (not- .cse29))) (=+2 .cse34))) (cong (not .cse12) (not .cse29)))) (=-2 .cse33))))) (not- .cse31))))))) (.cse15 (and+ .cse14)) (.cse17 (and+ .cse16))) (res .cse11 (! (res .cse12 .cse13 (res .cse14 .cse15 (res .cse16 .cse17 (=>+ 1 .cse11)))) :proves (+ .cse11 - .cse1 - .cse5 + .cse10) :input) (let-proof ((.cse23 (res .cse27 (=>+ 1 .cse27) .cse28))) (res t@0 (! (res .cse12 .cse13 (res .cse14 .cse15 (res .cse16 .cse17 (res .cse18 .cse19 (res .cse20 (res .cse21 (=>+ 0 .cse20) .cse22) .cse23))))) :proves (- .cse1 + t@0 - .cse5 + .cse10) :input) (res .cse24 (res .cse25 (! (=>+ 1 .cse25) :proves (+ .cse25 - t@0) :input) (! (=>+ 1 .cse24) :proves (+ .cse24 - .cse25) :input)) (! (res .cse26 (and+ .cse26) (res .cse20 (=>+ 1 .cse20) .cse23)) :proves (- .cse11 - .cse24) :input)))))) (! (res .cse6 .cse7 (! (res .cse39 .cse40 (farkas 1 .cse10 1 .cse39)) :proves (- .cse10 - .cse6) :LA (1 (- 1)))) :proves (- .cse10) :rup)))))))))))))))))) :proves (- .cse1) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 (not+ .cse2) (or+ 1 .cse1)) :proves (+ .cse1 + .cse0) :input) .cse3) :proves (+ .cse0) :rup) (res .cse4 (! (or+ 1 .cse4) :proves (+ .cse4 - .cse0) :input) (! (res .cse1 (! (or+ 0 .cse1) :proves (+ .cse1 - .cse4) :input) .cse3) :proves (- .cse4) :rup)))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse46 (+ y (* (- 1) x)))) (let ((.cse0 (<= .cse46 0))) (let ((.cse1 (xor z@0 .cse0))) (let ((.cse31 (ControlFlow 0 2)) (.cse5 (not .cse1))) (let ((.cse7 (not .cse5)) (.cse26 (= .cse31 (- 1)))) (let ((.cse2 (and .cse7 .cse26)) (.cse13 (not .cse0)) (.cse43 (= (ControlFlow 0 3) 2))) (let ((.cse10 (and .cse13 .cse43)) (.cse3 (=> .cse2 .cse7))) (let ((.cse11 (=> .cse10 .cse3))) (let-proof ((.cse9 (not- .cse5)) (.cse6 (not+ .cse5)) (.cse14 (not- .cse13))) (let-proof ((.cse12 (let ((.cse47 (= (ControlFlow 0 0) 3))) (let ((.cse15 (=> .cse47 .cse11))) (res .cse15 (=>+ 1 .cse15) (let ((.cse27 (- 0 1)) (.cse41 (< x y))) (let ((.cse32 (= z@0 .cse41)) (.cse25 (= .cse31 .cse27))) (let ((.cse24 (and .cse32 .cse25))) (let ((.cse42 (and .cse41 .cse43)) (.cse21 (=> .cse24 .cse32))) (let ((.cse20 (=> .cse42 .cse21))) (let ((.cse16 (=> .cse47 .cse20))) (let ((.cse18 (not .cse16))) (res .cse16 (let ((.cse17 (not .cse15))) (res .cse17 (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (res (= .cse16 .cse15) (res (= .cse20 .cse11) (let ((.cse39 (= .cse41 .cse13))) (let-proof ((.cse36 (not+ .cse13))) (let-proof ((.cse40 (res .cse13 (res .cse41 (=+1 .cse39) (res .cse0 .cse36 (farkas 1 .cse41 1 .cse0))) (res .cse41 (let ((.cse44 (<= y x))) (res .cse44 (total y x) (res .cse0 (let ((.cse45 (< 0 .cse46))) (res .cse45 (total .cse46 0) (farkas 1 .cse44 1 .cse45))) .cse14))) (=+2 .cse39))))) (res (= .cse21 .cse3) (let ((.cse22 (= .cse32 .cse7))) (let-proof ((.cse23 (let ((.cse33 (= z@0 .cse13))) (res (= .cse33 .cse7) (let ((.cse37 (xor z@0 .cse13))) (let ((.cse34 (not .cse37))) (res (= .cse34 .cse7) (let ((.cse35 (= .cse37 .cse5))) (res .cse35 (res (xor .cse13 .cse0) (res .cse0 (res .cse13 .cse36 (xor+ (.cse13 .cse0) (.cse0) (.cse13))) (res .cse13 (xor+ (.cse13 .cse0) (.cse13) (.cse0)) .cse14)) (res .cse37 (res .cse5 (=+1 .cse35) (res .cse1 (xor+ (z@0 .cse13) (z@0 .cse0) (.cse13 .cse0)) .cse9)) (res .cse5 (res .cse1 .cse6 (xor- (z@0 .cse0) (.cse13 .cse0) (z@0 .cse13))) (=+2 .cse35)))) (cong (not .cse37) (not .cse5)))) (let ((.cse38 (= .cse33 .cse34))) (res .cse38 (res .cse33 (res .cse37 (res z@0 (res .cse13 (=+1 .cse33) (xor+ (z@0 .cse13) (z@0) (.cse13))) (res .cse13 (xor+ (z@0 .cse13) (.cse13) (z@0)) (=+2 .cse33))) (res .cse34 (=+1 .cse38) (not- .cse34))) (res .cse37 (res .cse34 (not+ .cse34) (=+2 .cse38)) (res z@0 (res .cse13 (xor+ (z@0) (.cse13) (z@0 .cse13)) (=-1 .cse33)) (res .cse13 (=-2 .cse33) (xor- (z@0) (.cse13) (z@0 .cse13)))))) (trans .cse33 .cse34 .cse7)))))) (res (= .cse32 .cse33) (res .cse39 .cse40 (res (= z@0 z@0) (refl z@0) (cong (= z@0 .cse41) (= z@0 .cse13)))) (trans .cse32 .cse33 .cse7)))))) (res .cse22 .cse23 (res (= .cse24 .cse2) (res (= .cse25 .cse26) (res (= .cse27 (- 1)) (let ((.cse28 (* (- 1) 1))) (res (= .cse28 (- 1)) (poly* .cse28 (- 1)) (res (= 0 0) (refl 0) (let ((.cse29 (+ 0 .cse28)) (.cse30 (+ 0 (- 1)))) (res (= .cse29 .cse30) (cong (+ 0 .cse28) (+ 0 (- 1))) (res (= .cse27 .cse29) (-def 0 1) (res (= .cse30 (- 1)) (poly+ .cse30 (- 1)) (trans .cse27 .cse29 .cse30 (- 1))))))))) (res (= .cse31 .cse31) (refl .cse31) (cong (= .cse31 .cse27) (= .cse31 (- 1))))) (res .cse22 .cse23 (cong (and .cse32 .cse25) (and .cse7 .cse26)))) (cong (=> .cse24 .cse32) (=> .cse2 .cse7)))))) (res (= .cse42 .cse10) (res (= .cse43 .cse43) (refl .cse43) (res .cse39 .cse40 (cong (and .cse41 .cse43) (and .cse13 .cse43)))) (cong (=> .cse42 .cse21) (=> .cse10 .cse3))))))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse20) (=> .cse47 .cse11)))) (cong (not .cse16) (not .cse15))) (=-2 .cse19)))) (not- .cse17))) (res .cse18 (assume .cse18) (not- .cse18))))))))))))))) (let-proof ((.cse4 (res .cse11 (=>+ 1 .cse11) .cse12)) (.cse8 (! (res .cse10 (res .cse11 (=>+ 0 .cse11) .cse12) (res .cse13 (and- 0 .cse10) .cse14)) :proves (- .cse0) :input))) (res z@0 (res .cse0 (! (res .cse1 (res .cse2 (res .cse3 (=>+ 0 .cse3) .cse4) (res .cse5 .cse6 (res .cse7 (and- 0 .cse2) (not- .cse7)))) (xor+ (z@0) (.cse0) (z@0 .cse0))) :proves (+ .cse0 + z@0) :input) .cse8) (! (res .cse0 (! (res .cse1 (xor+ (z@0 .cse0) (.cse0) (z@0)) (res .cse3 (res .cse5 (res .cse7 (not+ .cse7) (=>+ 1 .cse3)) .cse9) .cse4)) :proves (+ .cse0 - z@0) :input) .cse8) :proves (- z@0) :rup))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse69 (+ y (* (- 1) x)))) (let ((.cse4 (<= .cse69 0))) (let ((.cse3 (xor z@0 .cse4))) (let ((.cse7 (not .cse3)) (.cse66 (ControlFlow 0 2))) (let ((.cse61 (= .cse66 (- 1))) (.cse8 (not .cse7)) (.cse50 (= (ControlFlow 0 3) 2)) (.cse38 (not z@0)) (.cse36 (= (ControlFlow 0 4) 2))) (let ((.cse35 (and .cse38 .cse36)) (.cse14 (not .cse4)) (.cse0 (and z@0 .cse50)) (.cse6 (=> .cse61 .cse8))) (let ((.cse1 (=> .cse0 .cse6)) (.cse16 (not .cse14)) (.cse31 (=> .cse35 .cse6)) (.cse71 (ControlFlow 0 5))) (let ((.cse45 (= .cse71 4)) (.cse13 (=> .cse16 .cse31)) (.cse53 (= .cse71 3)) (.cse10 (=> .cse14 .cse1))) (let ((.cse11 (=> .cse53 .cse10)) (.cse12 (=> .cse45 .cse13))) (let ((.cse17 (and .cse11 .cse12))) (let ((.cse18 (=> .cse14 .cse17))) (let-proof ((.cse9 (not- .cse7)) (.cse15 (not+ .cse14)) (.cse20 (not- .cse14))) (let-proof ((.cse19 (let ((.cse70 (= (ControlFlow 0 0) 5))) (let ((.cse21 (=> .cse70 .cse18))) (res .cse21 (=>+ 1 .cse21) (let ((.cse44 (< x y)) (.cse62 (- 0 1))) (let ((.cse60 (= .cse66 .cse62)) (.cse54 (= z@0 .cse44)) (.cse52 (= z@0 true)) (.cse39 (= z@0 false))) (let ((.cse34 (and .cse39 .cse36)) (.cse49 (and .cse52 .cse50)) (.cse40 (=> .cse60 .cse54))) (let ((.cse48 (=> .cse49 .cse40)) (.cse41 (not .cse44)) (.cse30 (=> .cse34 .cse40))) (let ((.cse29 (=> .cse41 .cse30)) (.cse47 (=> .cse44 .cse48))) (let ((.cse46 (=> .cse53 .cse47)) (.cse28 (=> .cse45 .cse29))) (let ((.cse27 (and .cse46 .cse28))) (let ((.cse26 (=> .cse44 .cse27))) (let ((.cse22 (=> .cse70 .cse26))) (let ((.cse24 (not .cse22))) (res .cse22 (let ((.cse23 (not .cse21))) (res .cse23 (res .cse24 (not+ .cse24) (let ((.cse25 (= .cse24 .cse23))) (res .cse25 (res (= .cse22 .cse21) (res (= .cse26 .cse18) (let ((.cse42 (= .cse44 .cse14))) (let-proof ((.cse43 (res .cse14 (res .cse44 (=+1 .cse42) (res .cse4 .cse15 (farkas 1 .cse44 1 .cse4))) (res .cse44 (let ((.cse67 (<= y x))) (res .cse67 (total y x) (res .cse4 (let ((.cse68 (< 0 .cse69))) (res .cse68 (total .cse69 0) (farkas 1 .cse67 1 .cse68))) .cse20))) (=+2 .cse42))))) (res (= .cse27 .cse17) (let ((.cse32 (= .cse40 .cse6))) (let-proof ((.cse33 (res (= .cse54 .cse8) (let ((.cse55 (= z@0 .cse14))) (res (= .cse55 .cse8) (let ((.cse58 (xor z@0 .cse14))) (let ((.cse56 (not .cse58))) (res (= .cse56 .cse8) (let ((.cse57 (= .cse58 .cse7))) (res .cse57 (res (xor .cse14 .cse4) (res .cse4 (res .cse14 .cse15 (xor+ (.cse14 .cse4) (.cse4) (.cse14))) (res .cse14 (xor+ (.cse14 .cse4) (.cse14) (.cse4)) .cse20)) (res .cse58 (res .cse7 (=+1 .cse57) (res .cse3 (xor+ (z@0 .cse14) (z@0 .cse4) (.cse14 .cse4)) .cse9)) (res .cse7 (res .cse3 (not+ .cse7) (xor- (z@0 .cse4) (.cse14 .cse4) (z@0 .cse14))) (=+2 .cse57)))) (cong (not .cse58) (not .cse7)))) (let ((.cse59 (= .cse55 .cse56))) (res .cse59 (res .cse55 (res .cse58 (res z@0 (res .cse14 (=+1 .cse55) (xor+ (z@0 .cse14) (z@0) (.cse14))) (res .cse14 (xor+ (z@0 .cse14) (.cse14) (z@0)) (=+2 .cse55))) (res .cse56 (=+1 .cse59) (not- .cse56))) (res .cse58 (res .cse56 (not+ .cse56) (=+2 .cse59)) (res z@0 (res .cse14 (xor+ (z@0) (.cse14) (z@0 .cse14)) (=-1 .cse55)) (res .cse14 (=-2 .cse55) (xor- (z@0) (.cse14) (z@0 .cse14)))))) (trans .cse55 .cse56 .cse8)))))) (res (= .cse54 .cse55) (res .cse42 .cse43 (res (= z@0 z@0) (refl z@0) (cong (= z@0 .cse44) (= z@0 .cse14)))) (trans .cse54 .cse55 .cse8)))) (res (= .cse60 .cse61) (res (= .cse62 (- 1)) (let ((.cse63 (* (- 1) 1))) (res (= .cse63 (- 1)) (poly* .cse63 (- 1)) (res (= 0 0) (refl 0) (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 1)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 1))) (res (= .cse62 .cse64) (-def 0 1) (res (= .cse65 (- 1)) (poly+ .cse65 (- 1)) (trans .cse62 .cse64 .cse65 (- 1))))))))) (res (= .cse66 .cse66) (refl .cse66) (cong (= .cse66 .cse62) (= .cse66 (- 1))))) (cong (=> .cse60 .cse54) (=> .cse61 .cse8)))))) (res (= .cse28 .cse12) (res (= .cse29 .cse13) (res (= .cse30 .cse31) (res .cse32 .cse33 (res (= .cse34 .cse35) (res (= .cse36 .cse36) (refl .cse36) (let ((.cse37 (= .cse39 .cse38))) (res .cse37 (res false (res .cse38 (res .cse39 (=+1 .cse37) (res z@0 (not+ .cse38) (=-2 .cse39))) (res .cse39 (res z@0 (=+1 .cse39) (not- .cse38)) (=+2 .cse37))) false-) (cong (and .cse39 .cse36) (and .cse38 .cse36))))) (cong (=> .cse34 .cse40) (=> .cse35 .cse6)))) (res (= .cse41 .cse16) (res .cse42 .cse43 (cong (not .cse44) (not .cse14))) (cong (=> .cse41 .cse30) (=> .cse16 .cse31)))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse29) (=> .cse45 .cse13)))) (res (= .cse46 .cse11) (res (= .cse47 .cse10) (res (= .cse48 .cse1) (res .cse32 .cse33 (res (= .cse49 .cse0) (res (= .cse50 .cse50) (refl .cse50) (let ((.cse51 (= .cse52 z@0))) (res .cse51 (res true true+ (res z@0 (res .cse52 (=+1 .cse51) (=-1 .cse52)) (res .cse52 (=+2 .cse52) (=+2 .cse51)))) (cong (and .cse52 .cse50) (and z@0 .cse50))))) (cong (=> .cse49 .cse40) (=> .cse0 .cse6)))) (res .cse42 .cse43 (cong (=> .cse44 .cse48) (=> .cse14 .cse1)))) (res (= .cse53 .cse53) (refl .cse53) (cong (=> .cse53 .cse47) (=> .cse53 .cse10)))) (cong (and .cse46 .cse28) (and .cse11 .cse12)))))) (res .cse42 .cse43 (cong (=> .cse44 .cse27) (=> .cse14 .cse17)))))) (res (= .cse70 .cse70) (refl .cse70) (cong (=> .cse70 .cse26) (=> .cse70 .cse18)))) (cong (not .cse22) (not .cse21))) (=-2 .cse25)))) (not- .cse23))) (res .cse24 (assume .cse24) (not- .cse24)))))))))))))))))) (let-proof ((.cse5 (! (res .cse18 (res .cse14 (=>+ 0 .cse18) .cse20) .cse19) :proves (- .cse4) :input))) (let-proof ((.cse2 (! (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse1) :input) (! (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse10) :input) (! (res .cse12 (! (res .cse13 (! (res .cse4 (! (res .cse14 .cse15 (res .cse16 (=>+ 0 .cse13) (not- .cse16))) :proves (+ .cse13 + .cse4) :input) .cse5) :proves (+ .cse13) :rup) (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse13) :input)) :proves (+ .cse12) :rup) (! (res .cse17 (and+ .cse17) (res .cse18 (=>+ 1 .cse18) .cse19)) :proves (- .cse11 - .cse12) :input)) :proves (- .cse11) :rup)) :proves (- .cse10) :rup)) :proves (- .cse1) :rup))) (res z@0 (! (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (! (and- 0 .cse0) :proves (- .cse0 + z@0) :input)) :proves (+ z@0) :rup) (res .cse3 (res .cse4 (! (xor+ (z@0 .cse4) (.cse4) (z@0)) :proves (+ .cse3 - z@0 + .cse4) :input) .cse5) (! (res .cse6 (! (res .cse7 (res .cse8 (not+ .cse8) (=>+ 1 .cse6)) .cse9) :proves (+ .cse6 - .cse3) :input) (! (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse6) :input) .cse2) :proves (- .cse6) :rup)) :proves (- .cse3) :rup)))))))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse73 (+ y (* (- 1) x)))) (let ((.cse4 (<= .cse73 0))) (let ((.cse3 (xor z@0 .cse4))) (let ((.cse7 (not .cse3)) (.cse71 (ControlFlow 0 2))) (let ((.cse66 (= .cse71 (- 1))) (.cse8 (not .cse7)) (.cse52 (= (ControlFlow 0 3) 2)) (.cse36 (not z@0)) (.cse34 (= (ControlFlow 0 4) 2))) (let ((.cse33 (and .cse36 .cse34)) (.cse0 (and z@0 .cse52)) (.cse6 (=> .cse66 .cse8))) (let ((.cse17 (not .cse4)) (.cse1 (=> .cse0 .cse6)) (.cse29 (=> .cse33 .cse6)) (.cse75 (ControlFlow 0 5))) (let ((.cse47 (= .cse75 4)) (.cse13 (=> .cse4 .cse29)) (.cse57 (= .cse75 3)) (.cse10 (=> .cse17 .cse1))) (let ((.cse11 (=> .cse57 .cse10)) (.cse12 (=> .cse47 .cse13))) (let ((.cse14 (and .cse11 .cse12))) (let ((.cse15 (=> .cse17 .cse14))) (let-proof ((.cse9 (not- .cse7)) (.cse18 (not- .cse17))) (let-proof ((.cse16 (let ((.cse74 (= (ControlFlow 0 0) 5))) (let ((.cse19 (=> .cse74 .cse15))) (res .cse19 (=>+ 1 .cse19) (let ((.cse44 (< x y)) (.cse67 (- 0 1))) (let ((.cse65 (= .cse71 .cse67)) (.cse58 (= z@0 .cse44)) (.cse54 (= z@0 true)) (.cse37 (= z@0 false))) (let ((.cse32 (and .cse37 .cse34)) (.cse51 (and .cse54 .cse52)) (.cse38 (=> .cse65 .cse58))) (let ((.cse50 (=> .cse51 .cse38)) (.cse41 (>= x y)) (.cse28 (=> .cse32 .cse38))) (let ((.cse27 (=> .cse41 .cse28)) (.cse49 (=> .cse44 .cse50))) (let ((.cse48 (=> .cse57 .cse49)) (.cse26 (=> .cse47 .cse27))) (let ((.cse25 (and .cse48 .cse26))) (let ((.cse24 (=> .cse44 .cse25))) (let ((.cse20 (=> .cse74 .cse24))) (let ((.cse22 (not .cse20))) (res .cse20 (let ((.cse21 (not .cse19))) (res .cse21 (res .cse22 (not+ .cse22) (let ((.cse23 (= .cse22 .cse21))) (res .cse23 (res (= .cse20 .cse19) (res (= .cse24 .cse15) (let ((.cse42 (<= y x))) (let ((.cse55 (= .cse44 .cse17))) (let-proof ((.cse62 (not+ .cse17)) (.cse46 (farkas 1 .cse44 1 .cse4)) (.cse45 (total y x)) (.cse43 (let ((.cse72 (< 0 .cse73))) (res .cse72 (total .cse73 0) (farkas 1 .cse42 1 .cse72))))) (let-proof ((.cse56 (res .cse17 (res .cse44 (=+1 .cse55) (res .cse4 .cse62 .cse46)) (res .cse44 (res .cse42 .cse45 (res .cse4 .cse43 .cse18)) (=+2 .cse55))))) (res (= .cse25 .cse14) (let ((.cse30 (= .cse38 .cse6))) (let-proof ((.cse31 (res (= .cse58 .cse8) (let ((.cse59 (= z@0 .cse17))) (res (= .cse59 .cse8) (let ((.cse63 (xor z@0 .cse17))) (let ((.cse60 (not .cse63))) (res (= .cse60 .cse8) (let ((.cse61 (= .cse63 .cse7))) (res .cse61 (res (xor .cse17 .cse4) (res .cse4 (res .cse17 .cse62 (xor+ (.cse17 .cse4) (.cse4) (.cse17))) (res .cse17 (xor+ (.cse17 .cse4) (.cse17) (.cse4)) .cse18)) (res .cse63 (res .cse7 (=+1 .cse61) (res .cse3 (xor+ (z@0 .cse17) (z@0 .cse4) (.cse17 .cse4)) .cse9)) (res .cse7 (res .cse3 (not+ .cse7) (xor- (z@0 .cse4) (.cse17 .cse4) (z@0 .cse17))) (=+2 .cse61)))) (cong (not .cse63) (not .cse7)))) (let ((.cse64 (= .cse59 .cse60))) (res .cse64 (res .cse59 (res .cse63 (res z@0 (res .cse17 (=+1 .cse59) (xor+ (z@0 .cse17) (z@0) (.cse17))) (res .cse17 (xor+ (z@0 .cse17) (.cse17) (z@0)) (=+2 .cse59))) (res .cse60 (=+1 .cse64) (not- .cse60))) (res .cse63 (res .cse60 (not+ .cse60) (=+2 .cse64)) (res z@0 (res .cse17 (xor+ (z@0) (.cse17) (z@0 .cse17)) (=-1 .cse59)) (res .cse17 (=-2 .cse59) (xor- (z@0) (.cse17) (z@0 .cse17)))))) (trans .cse59 .cse60 .cse8)))))) (res (= .cse58 .cse59) (res .cse55 .cse56 (res (= z@0 z@0) (refl z@0) (cong (= z@0 .cse44) (= z@0 .cse17)))) (trans .cse58 .cse59 .cse8)))) (res (= .cse65 .cse66) (res (= .cse67 (- 1)) (let ((.cse68 (* (- 1) 1))) (res (= .cse68 (- 1)) (poly* .cse68 (- 1)) (res (= 0 0) (refl 0) (let ((.cse69 (+ 0 .cse68)) (.cse70 (+ 0 (- 1)))) (res (= .cse69 .cse70) (cong (+ 0 .cse68) (+ 0 (- 1))) (res (= .cse67 .cse69) (-def 0 1) (res (= .cse70 (- 1)) (poly+ .cse70 (- 1)) (trans .cse67 .cse69 .cse70 (- 1))))))))) (res (= .cse71 .cse71) (refl .cse71) (cong (= .cse71 .cse67) (= .cse71 (- 1))))) (cong (=> .cse65 .cse58) (=> .cse66 .cse8)))))) (res (= .cse26 .cse12) (res (= .cse27 .cse13) (res (= .cse28 .cse29) (res .cse30 .cse31 (res (= .cse32 .cse33) (res (= .cse34 .cse34) (refl .cse34) (let ((.cse35 (= .cse37 .cse36))) (res .cse35 (res false (res .cse36 (res .cse37 (=+1 .cse35) (res z@0 (not+ .cse36) (=-2 .cse37))) (res .cse37 (res z@0 (=+1 .cse37) (not- .cse36)) (=+2 .cse35))) false-) (cong (and .cse37 .cse34) (and .cse36 .cse34))))) (cong (=> .cse32 .cse38) (=> .cse33 .cse6)))) (let ((.cse39 (= .cse41 .cse4))) (res .cse39 (let ((.cse40 (= .cse41 .cse42))) (res .cse40 (>=def x y) (res .cse4 (res .cse41 (=+1 .cse39) (res .cse42 (=-2 .cse40) .cse43)) (res .cse41 (res .cse42 (res .cse44 .cse45 .cse46) (=-1 .cse40)) (=+2 .cse39))))) (cong (=> .cse41 .cse28) (=> .cse4 .cse29))))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse27) (=> .cse47 .cse13)))) (res (= .cse48 .cse11) (res (= .cse49 .cse10) (res (= .cse50 .cse1) (res .cse30 .cse31 (res (= .cse51 .cse0) (res (= .cse52 .cse52) (refl .cse52) (let ((.cse53 (= .cse54 z@0))) (res .cse53 (res true true+ (res z@0 (res .cse54 (=+1 .cse53) (=-1 .cse54)) (res .cse54 (=+2 .cse54) (=+2 .cse53)))) (cong (and .cse54 .cse52) (and z@0 .cse52))))) (cong (=> .cse51 .cse38) (=> .cse0 .cse6)))) (res .cse55 .cse56 (cong (=> .cse44 .cse50) (=> .cse17 .cse1)))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse49) (=> .cse57 .cse10)))) (cong (and .cse48 .cse26) (and .cse11 .cse12)))))) (res .cse55 .cse56 (cong (=> .cse44 .cse25) (=> .cse17 .cse14)))))))) (res (= .cse74 .cse74) (refl .cse74) (cong (=> .cse74 .cse24) (=> .cse74 .cse15)))) (cong (not .cse20) (not .cse19))) (=-2 .cse23)))) (not- .cse21))) (res .cse22 (assume .cse22) (not- .cse22)))))))))))))))))) (let-proof ((.cse5 (! (res .cse15 (res .cse17 (=>+ 0 .cse15) .cse18) .cse16) :proves (- .cse4) :input))) (let-proof ((.cse2 (! (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse1) :input) (! (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse10) :input) (! (res .cse12 (! (res .cse13 (! (res .cse4 (! (=>+ 0 .cse13) :proves (+ .cse13 + .cse4) :input) .cse5) :proves (+ .cse13) :rup) (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse13) :input)) :proves (+ .cse12) :rup) (! (res .cse14 (and+ .cse14) (res .cse15 (=>+ 1 .cse15) .cse16)) :proves (- .cse11 - .cse12) :input)) :proves (- .cse11) :rup)) :proves (- .cse10) :rup)) :proves (- .cse1) :rup))) (res z@0 (! (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (! (and- 0 .cse0) :proves (- .cse0 + z@0) :input)) :proves (+ z@0) :rup) (res .cse3 (res .cse4 (! (xor+ (z@0 .cse4) (.cse4) (z@0)) :proves (+ .cse3 - z@0 + .cse4) :input) .cse5) (! (res .cse6 (! (res .cse7 (res .cse8 (not+ .cse8) (=>+ 1 .cse6)) .cse9) :proves (+ .cse6 - .cse3) :input) (! (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse6) :input) .cse2) :proves (- .cse6) :rup)) :proves (- .cse3) :rup)))))))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse46 (+ y (* (- 1) x)))) (let ((.cse0 (<= .cse46 0))) (let ((.cse1 (xor z@0 .cse0))) (let ((.cse31 (ControlFlow 0 2)) (.cse5 (not .cse1))) (let ((.cse7 (not .cse5)) (.cse26 (= .cse31 (- 1)))) (let ((.cse2 (and .cse7 .cse26)) (.cse13 (not .cse0)) (.cse43 (= (ControlFlow 0 3) 2))) (let ((.cse10 (and .cse13 .cse43)) (.cse3 (=> .cse2 .cse7))) (let ((.cse11 (=> .cse10 .cse3))) (let-proof ((.cse9 (not- .cse5)) (.cse6 (not+ .cse5)) (.cse14 (not- .cse13))) (let-proof ((.cse12 (let ((.cse47 (= (ControlFlow 0 0) 3))) (let ((.cse15 (=> .cse47 .cse11))) (res .cse15 (=>+ 1 .cse15) (let ((.cse27 (- 0 1)) (.cse41 (< x y))) (let ((.cse32 (= z@0 .cse41)) (.cse25 (= .cse31 .cse27))) (let ((.cse24 (and .cse32 .cse25))) (let ((.cse42 (and .cse41 .cse43)) (.cse21 (=> .cse24 .cse32))) (let ((.cse20 (=> .cse42 .cse21))) (let ((.cse16 (=> .cse47 .cse20))) (let ((.cse18 (not .cse16))) (res .cse16 (let ((.cse17 (not .cse15))) (res .cse17 (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (res (= .cse16 .cse15) (res (= .cse20 .cse11) (let ((.cse39 (= .cse41 .cse13))) (let-proof ((.cse36 (not+ .cse13))) (let-proof ((.cse40 (res .cse13 (res .cse41 (=+1 .cse39) (res .cse0 .cse36 (farkas 1 .cse41 1 .cse0))) (res .cse41 (let ((.cse44 (<= y x))) (res .cse44 (total y x) (res .cse0 (let ((.cse45 (< 0 .cse46))) (res .cse45 (total .cse46 0) (farkas 1 .cse44 1 .cse45))) .cse14))) (=+2 .cse39))))) (res (= .cse21 .cse3) (let ((.cse22 (= .cse32 .cse7))) (let-proof ((.cse23 (let ((.cse33 (= z@0 .cse13))) (res (= .cse33 .cse7) (let ((.cse37 (xor z@0 .cse13))) (let ((.cse34 (not .cse37))) (res (= .cse34 .cse7) (let ((.cse35 (= .cse37 .cse5))) (res .cse35 (res (xor .cse13 .cse0) (res .cse0 (res .cse13 .cse36 (xor+ (.cse13 .cse0) (.cse0) (.cse13))) (res .cse13 (xor+ (.cse13 .cse0) (.cse13) (.cse0)) .cse14)) (res .cse37 (res .cse5 (=+1 .cse35) (res .cse1 (xor+ (z@0 .cse13) (z@0 .cse0) (.cse13 .cse0)) .cse9)) (res .cse5 (res .cse1 .cse6 (xor- (z@0 .cse0) (.cse13 .cse0) (z@0 .cse13))) (=+2 .cse35)))) (cong (not .cse37) (not .cse5)))) (let ((.cse38 (= .cse33 .cse34))) (res .cse38 (res .cse33 (res .cse37 (res z@0 (res .cse13 (=+1 .cse33) (xor+ (z@0 .cse13) (z@0) (.cse13))) (res .cse13 (xor+ (z@0 .cse13) (.cse13) (z@0)) (=+2 .cse33))) (res .cse34 (=+1 .cse38) (not- .cse34))) (res .cse37 (res .cse34 (not+ .cse34) (=+2 .cse38)) (res z@0 (res .cse13 (xor+ (z@0) (.cse13) (z@0 .cse13)) (=-1 .cse33)) (res .cse13 (=-2 .cse33) (xor- (z@0) (.cse13) (z@0 .cse13)))))) (trans .cse33 .cse34 .cse7)))))) (res (= .cse32 .cse33) (res .cse39 .cse40 (res (= z@0 z@0) (refl z@0) (cong (= z@0 .cse41) (= z@0 .cse13)))) (trans .cse32 .cse33 .cse7)))))) (res .cse22 .cse23 (res (= .cse24 .cse2) (res (= .cse25 .cse26) (res (= .cse27 (- 1)) (let ((.cse28 (* (- 1) 1))) (res (= .cse28 (- 1)) (poly* .cse28 (- 1)) (res (= 0 0) (refl 0) (let ((.cse29 (+ 0 .cse28)) (.cse30 (+ 0 (- 1)))) (res (= .cse29 .cse30) (cong (+ 0 .cse28) (+ 0 (- 1))) (res (= .cse27 .cse29) (-def 0 1) (res (= .cse30 (- 1)) (poly+ .cse30 (- 1)) (trans .cse27 .cse29 .cse30 (- 1))))))))) (res (= .cse31 .cse31) (refl .cse31) (cong (= .cse31 .cse27) (= .cse31 (- 1))))) (res .cse22 .cse23 (cong (and .cse32 .cse25) (and .cse7 .cse26)))) (cong (=> .cse24 .cse32) (=> .cse2 .cse7)))))) (res (= .cse42 .cse10) (res (= .cse43 .cse43) (refl .cse43) (res .cse39 .cse40 (cong (and .cse41 .cse43) (and .cse13 .cse43)))) (cong (=> .cse42 .cse21) (=> .cse10 .cse3))))))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse20) (=> .cse47 .cse11)))) (cong (not .cse16) (not .cse15))) (=-2 .cse19)))) (not- .cse17))) (res .cse18 (assume .cse18) (not- .cse18))))))))))))))) (let-proof ((.cse4 (res .cse11 (=>+ 1 .cse11) .cse12)) (.cse8 (! (res .cse10 (res .cse11 (=>+ 0 .cse11) .cse12) (res .cse13 (and- 0 .cse10) .cse14)) :proves (- .cse0) :input))) (res z@0 (res .cse0 (! (res .cse1 (res .cse2 (res .cse3 (=>+ 0 .cse3) .cse4) (res .cse5 .cse6 (res .cse7 (and- 0 .cse2) (not- .cse7)))) (xor+ (z@0) (.cse0) (z@0 .cse0))) :proves (+ .cse0 + z@0) :input) .cse8) (! (res .cse0 (! (res .cse1 (xor+ (z@0 .cse0) (.cse0) (z@0)) (res .cse3 (res .cse5 (res .cse7 (not+ .cse7) (=>+ 1 .cse3)) .cse9) .cse4)) :proves (+ .cse0 - z@0) :input) .cse8) :proves (- z@0) :rup))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse69 (+ y (* (- 1) x)))) (let ((.cse4 (<= .cse69 0))) (let ((.cse3 (xor z@0 .cse4))) (let ((.cse7 (not .cse3)) (.cse66 (ControlFlow 0 2))) (let ((.cse61 (= .cse66 (- 1))) (.cse8 (not .cse7)) (.cse50 (= (ControlFlow 0 3) 2)) (.cse38 (not z@0)) (.cse36 (= (ControlFlow 0 4) 2))) (let ((.cse35 (and .cse38 .cse36)) (.cse14 (not .cse4)) (.cse0 (and z@0 .cse50)) (.cse6 (=> .cse61 .cse8))) (let ((.cse1 (=> .cse0 .cse6)) (.cse16 (not .cse14)) (.cse31 (=> .cse35 .cse6)) (.cse71 (ControlFlow 0 5))) (let ((.cse45 (= .cse71 4)) (.cse13 (=> .cse16 .cse31)) (.cse53 (= .cse71 3)) (.cse10 (=> .cse14 .cse1))) (let ((.cse11 (=> .cse53 .cse10)) (.cse12 (=> .cse45 .cse13))) (let ((.cse17 (and .cse11 .cse12))) (let ((.cse18 (=> .cse14 .cse17))) (let-proof ((.cse9 (not- .cse7)) (.cse15 (not+ .cse14)) (.cse20 (not- .cse14))) (let-proof ((.cse19 (let ((.cse70 (= (ControlFlow 0 0) 5))) (let ((.cse21 (=> .cse70 .cse18))) (res .cse21 (=>+ 1 .cse21) (let ((.cse44 (< x y)) (.cse62 (- 0 1))) (let ((.cse60 (= .cse66 .cse62)) (.cse54 (= z@0 .cse44)) (.cse52 (= z@0 true)) (.cse39 (= z@0 false))) (let ((.cse34 (and .cse39 .cse36)) (.cse49 (and .cse52 .cse50)) (.cse40 (=> .cse60 .cse54))) (let ((.cse48 (=> .cse49 .cse40)) (.cse41 (not .cse44)) (.cse30 (=> .cse34 .cse40))) (let ((.cse29 (=> .cse41 .cse30)) (.cse47 (=> .cse44 .cse48))) (let ((.cse46 (=> .cse53 .cse47)) (.cse28 (=> .cse45 .cse29))) (let ((.cse27 (and .cse46 .cse28))) (let ((.cse26 (=> .cse44 .cse27))) (let ((.cse22 (=> .cse70 .cse26))) (let ((.cse24 (not .cse22))) (res .cse22 (let ((.cse23 (not .cse21))) (res .cse23 (res .cse24 (not+ .cse24) (let ((.cse25 (= .cse24 .cse23))) (res .cse25 (res (= .cse22 .cse21) (res (= .cse26 .cse18) (let ((.cse42 (= .cse44 .cse14))) (let-proof ((.cse43 (res .cse14 (res .cse44 (=+1 .cse42) (res .cse4 .cse15 (farkas 1 .cse44 1 .cse4))) (res .cse44 (let ((.cse67 (<= y x))) (res .cse67 (total y x) (res .cse4 (let ((.cse68 (< 0 .cse69))) (res .cse68 (total .cse69 0) (farkas 1 .cse67 1 .cse68))) .cse20))) (=+2 .cse42))))) (res (= .cse27 .cse17) (let ((.cse32 (= .cse40 .cse6))) (let-proof ((.cse33 (res (= .cse54 .cse8) (let ((.cse55 (= z@0 .cse14))) (res (= .cse55 .cse8) (let ((.cse58 (xor z@0 .cse14))) (let ((.cse56 (not .cse58))) (res (= .cse56 .cse8) (let ((.cse57 (= .cse58 .cse7))) (res .cse57 (res (xor .cse14 .cse4) (res .cse4 (res .cse14 .cse15 (xor+ (.cse14 .cse4) (.cse4) (.cse14))) (res .cse14 (xor+ (.cse14 .cse4) (.cse14) (.cse4)) .cse20)) (res .cse58 (res .cse7 (=+1 .cse57) (res .cse3 (xor+ (z@0 .cse14) (z@0 .cse4) (.cse14 .cse4)) .cse9)) (res .cse7 (res .cse3 (not+ .cse7) (xor- (z@0 .cse4) (.cse14 .cse4) (z@0 .cse14))) (=+2 .cse57)))) (cong (not .cse58) (not .cse7)))) (let ((.cse59 (= .cse55 .cse56))) (res .cse59 (res .cse55 (res .cse58 (res z@0 (res .cse14 (=+1 .cse55) (xor+ (z@0 .cse14) (z@0) (.cse14))) (res .cse14 (xor+ (z@0 .cse14) (.cse14) (z@0)) (=+2 .cse55))) (res .cse56 (=+1 .cse59) (not- .cse56))) (res .cse58 (res .cse56 (not+ .cse56) (=+2 .cse59)) (res z@0 (res .cse14 (xor+ (z@0) (.cse14) (z@0 .cse14)) (=-1 .cse55)) (res .cse14 (=-2 .cse55) (xor- (z@0) (.cse14) (z@0 .cse14)))))) (trans .cse55 .cse56 .cse8)))))) (res (= .cse54 .cse55) (res .cse42 .cse43 (res (= z@0 z@0) (refl z@0) (cong (= z@0 .cse44) (= z@0 .cse14)))) (trans .cse54 .cse55 .cse8)))) (res (= .cse60 .cse61) (res (= .cse62 (- 1)) (let ((.cse63 (* (- 1) 1))) (res (= .cse63 (- 1)) (poly* .cse63 (- 1)) (res (= 0 0) (refl 0) (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 1)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 1))) (res (= .cse62 .cse64) (-def 0 1) (res (= .cse65 (- 1)) (poly+ .cse65 (- 1)) (trans .cse62 .cse64 .cse65 (- 1))))))))) (res (= .cse66 .cse66) (refl .cse66) (cong (= .cse66 .cse62) (= .cse66 (- 1))))) (cong (=> .cse60 .cse54) (=> .cse61 .cse8)))))) (res (= .cse28 .cse12) (res (= .cse29 .cse13) (res (= .cse30 .cse31) (res .cse32 .cse33 (res (= .cse34 .cse35) (res (= .cse36 .cse36) (refl .cse36) (let ((.cse37 (= .cse39 .cse38))) (res .cse37 (res false (res .cse38 (res .cse39 (=+1 .cse37) (res z@0 (not+ .cse38) (=-2 .cse39))) (res .cse39 (res z@0 (=+1 .cse39) (not- .cse38)) (=+2 .cse37))) false-) (cong (and .cse39 .cse36) (and .cse38 .cse36))))) (cong (=> .cse34 .cse40) (=> .cse35 .cse6)))) (res (= .cse41 .cse16) (res .cse42 .cse43 (cong (not .cse44) (not .cse14))) (cong (=> .cse41 .cse30) (=> .cse16 .cse31)))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse29) (=> .cse45 .cse13)))) (res (= .cse46 .cse11) (res (= .cse47 .cse10) (res (= .cse48 .cse1) (res .cse32 .cse33 (res (= .cse49 .cse0) (res (= .cse50 .cse50) (refl .cse50) (let ((.cse51 (= .cse52 z@0))) (res .cse51 (res true true+ (res z@0 (res .cse52 (=+1 .cse51) (=-1 .cse52)) (res .cse52 (=+2 .cse52) (=+2 .cse51)))) (cong (and .cse52 .cse50) (and z@0 .cse50))))) (cong (=> .cse49 .cse40) (=> .cse0 .cse6)))) (res .cse42 .cse43 (cong (=> .cse44 .cse48) (=> .cse14 .cse1)))) (res (= .cse53 .cse53) (refl .cse53) (cong (=> .cse53 .cse47) (=> .cse53 .cse10)))) (cong (and .cse46 .cse28) (and .cse11 .cse12)))))) (res .cse42 .cse43 (cong (=> .cse44 .cse27) (=> .cse14 .cse17)))))) (res (= .cse70 .cse70) (refl .cse70) (cong (=> .cse70 .cse26) (=> .cse70 .cse18)))) (cong (not .cse22) (not .cse21))) (=-2 .cse25)))) (not- .cse23))) (res .cse24 (assume .cse24) (not- .cse24)))))))))))))))))) (let-proof ((.cse5 (! (res .cse18 (res .cse14 (=>+ 0 .cse18) .cse20) .cse19) :proves (- .cse4) :input))) (let-proof ((.cse2 (! (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse1) :input) (! (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse10) :input) (! (res .cse12 (! (res .cse13 (! (res .cse4 (! (res .cse14 .cse15 (res .cse16 (=>+ 0 .cse13) (not- .cse16))) :proves (+ .cse13 + .cse4) :input) .cse5) :proves (+ .cse13) :rup) (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse13) :input)) :proves (+ .cse12) :rup) (! (res .cse17 (and+ .cse17) (res .cse18 (=>+ 1 .cse18) .cse19)) :proves (- .cse11 - .cse12) :input)) :proves (- .cse11) :rup)) :proves (- .cse10) :rup)) :proves (- .cse1) :rup))) (res z@0 (! (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (! (and- 0 .cse0) :proves (- .cse0 + z@0) :input)) :proves (+ z@0) :rup) (res .cse3 (res .cse4 (! (xor+ (z@0 .cse4) (.cse4) (z@0)) :proves (+ .cse3 - z@0 + .cse4) :input) .cse5) (! (res .cse6 (! (res .cse7 (res .cse8 (not+ .cse8) (=>+ 1 .cse6)) .cse9) :proves (+ .cse6 - .cse3) :input) (! (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse6) :input) .cse2) :proves (- .cse6) :rup)) :proves (- .cse3) :rup)))))))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse73 (+ y (* (- 1) x)))) (let ((.cse4 (<= .cse73 0))) (let ((.cse3 (xor z@0 .cse4))) (let ((.cse7 (not .cse3)) (.cse71 (ControlFlow 0 2))) (let ((.cse66 (= .cse71 (- 1))) (.cse8 (not .cse7)) (.cse52 (= (ControlFlow 0 3) 2)) (.cse36 (not z@0)) (.cse34 (= (ControlFlow 0 4) 2))) (let ((.cse33 (and .cse36 .cse34)) (.cse0 (and z@0 .cse52)) (.cse6 (=> .cse66 .cse8))) (let ((.cse17 (not .cse4)) (.cse1 (=> .cse0 .cse6)) (.cse29 (=> .cse33 .cse6)) (.cse75 (ControlFlow 0 5))) (let ((.cse47 (= .cse75 4)) (.cse13 (=> .cse4 .cse29)) (.cse57 (= .cse75 3)) (.cse10 (=> .cse17 .cse1))) (let ((.cse11 (=> .cse57 .cse10)) (.cse12 (=> .cse47 .cse13))) (let ((.cse14 (and .cse11 .cse12))) (let ((.cse15 (=> .cse17 .cse14))) (let-proof ((.cse9 (not- .cse7)) (.cse18 (not- .cse17))) (let-proof ((.cse16 (let ((.cse74 (= (ControlFlow 0 0) 5))) (let ((.cse19 (=> .cse74 .cse15))) (res .cse19 (=>+ 1 .cse19) (let ((.cse44 (< x y)) (.cse67 (- 0 1))) (let ((.cse65 (= .cse71 .cse67)) (.cse58 (= z@0 .cse44)) (.cse54 (= z@0 true)) (.cse37 (= z@0 false))) (let ((.cse32 (and .cse37 .cse34)) (.cse51 (and .cse54 .cse52)) (.cse38 (=> .cse65 .cse58))) (let ((.cse50 (=> .cse51 .cse38)) (.cse41 (>= x y)) (.cse28 (=> .cse32 .cse38))) (let ((.cse27 (=> .cse41 .cse28)) (.cse49 (=> .cse44 .cse50))) (let ((.cse48 (=> .cse57 .cse49)) (.cse26 (=> .cse47 .cse27))) (let ((.cse25 (and .cse48 .cse26))) (let ((.cse24 (=> .cse44 .cse25))) (let ((.cse20 (=> .cse74 .cse24))) (let ((.cse22 (not .cse20))) (res .cse20 (let ((.cse21 (not .cse19))) (res .cse21 (res .cse22 (not+ .cse22) (let ((.cse23 (= .cse22 .cse21))) (res .cse23 (res (= .cse20 .cse19) (res (= .cse24 .cse15) (let ((.cse42 (<= y x))) (let ((.cse55 (= .cse44 .cse17))) (let-proof ((.cse62 (not+ .cse17)) (.cse46 (farkas 1 .cse44 1 .cse4)) (.cse45 (total y x)) (.cse43 (let ((.cse72 (< 0 .cse73))) (res .cse72 (total .cse73 0) (farkas 1 .cse42 1 .cse72))))) (let-proof ((.cse56 (res .cse17 (res .cse44 (=+1 .cse55) (res .cse4 .cse62 .cse46)) (res .cse44 (res .cse42 .cse45 (res .cse4 .cse43 .cse18)) (=+2 .cse55))))) (res (= .cse25 .cse14) (let ((.cse30 (= .cse38 .cse6))) (let-proof ((.cse31 (res (= .cse58 .cse8) (let ((.cse59 (= z@0 .cse17))) (res (= .cse59 .cse8) (let ((.cse63 (xor z@0 .cse17))) (let ((.cse60 (not .cse63))) (res (= .cse60 .cse8) (let ((.cse61 (= .cse63 .cse7))) (res .cse61 (res (xor .cse17 .cse4) (res .cse4 (res .cse17 .cse62 (xor+ (.cse17 .cse4) (.cse4) (.cse17))) (res .cse17 (xor+ (.cse17 .cse4) (.cse17) (.cse4)) .cse18)) (res .cse63 (res .cse7 (=+1 .cse61) (res .cse3 (xor+ (z@0 .cse17) (z@0 .cse4) (.cse17 .cse4)) .cse9)) (res .cse7 (res .cse3 (not+ .cse7) (xor- (z@0 .cse4) (.cse17 .cse4) (z@0 .cse17))) (=+2 .cse61)))) (cong (not .cse63) (not .cse7)))) (let ((.cse64 (= .cse59 .cse60))) (res .cse64 (res .cse59 (res .cse63 (res z@0 (res .cse17 (=+1 .cse59) (xor+ (z@0 .cse17) (z@0) (.cse17))) (res .cse17 (xor+ (z@0 .cse17) (.cse17) (z@0)) (=+2 .cse59))) (res .cse60 (=+1 .cse64) (not- .cse60))) (res .cse63 (res .cse60 (not+ .cse60) (=+2 .cse64)) (res z@0 (res .cse17 (xor+ (z@0) (.cse17) (z@0 .cse17)) (=-1 .cse59)) (res .cse17 (=-2 .cse59) (xor- (z@0) (.cse17) (z@0 .cse17)))))) (trans .cse59 .cse60 .cse8)))))) (res (= .cse58 .cse59) (res .cse55 .cse56 (res (= z@0 z@0) (refl z@0) (cong (= z@0 .cse44) (= z@0 .cse17)))) (trans .cse58 .cse59 .cse8)))) (res (= .cse65 .cse66) (res (= .cse67 (- 1)) (let ((.cse68 (* (- 1) 1))) (res (= .cse68 (- 1)) (poly* .cse68 (- 1)) (res (= 0 0) (refl 0) (let ((.cse69 (+ 0 .cse68)) (.cse70 (+ 0 (- 1)))) (res (= .cse69 .cse70) (cong (+ 0 .cse68) (+ 0 (- 1))) (res (= .cse67 .cse69) (-def 0 1) (res (= .cse70 (- 1)) (poly+ .cse70 (- 1)) (trans .cse67 .cse69 .cse70 (- 1))))))))) (res (= .cse71 .cse71) (refl .cse71) (cong (= .cse71 .cse67) (= .cse71 (- 1))))) (cong (=> .cse65 .cse58) (=> .cse66 .cse8)))))) (res (= .cse26 .cse12) (res (= .cse27 .cse13) (res (= .cse28 .cse29) (res .cse30 .cse31 (res (= .cse32 .cse33) (res (= .cse34 .cse34) (refl .cse34) (let ((.cse35 (= .cse37 .cse36))) (res .cse35 (res false (res .cse36 (res .cse37 (=+1 .cse35) (res z@0 (not+ .cse36) (=-2 .cse37))) (res .cse37 (res z@0 (=+1 .cse37) (not- .cse36)) (=+2 .cse35))) false-) (cong (and .cse37 .cse34) (and .cse36 .cse34))))) (cong (=> .cse32 .cse38) (=> .cse33 .cse6)))) (let ((.cse39 (= .cse41 .cse4))) (res .cse39 (let ((.cse40 (= .cse41 .cse42))) (res .cse40 (>=def x y) (res .cse4 (res .cse41 (=+1 .cse39) (res .cse42 (=-2 .cse40) .cse43)) (res .cse41 (res .cse42 (res .cse44 .cse45 .cse46) (=-1 .cse40)) (=+2 .cse39))))) (cong (=> .cse41 .cse28) (=> .cse4 .cse29))))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse27) (=> .cse47 .cse13)))) (res (= .cse48 .cse11) (res (= .cse49 .cse10) (res (= .cse50 .cse1) (res .cse30 .cse31 (res (= .cse51 .cse0) (res (= .cse52 .cse52) (refl .cse52) (let ((.cse53 (= .cse54 z@0))) (res .cse53 (res true true+ (res z@0 (res .cse54 (=+1 .cse53) (=-1 .cse54)) (res .cse54 (=+2 .cse54) (=+2 .cse53)))) (cong (and .cse54 .cse52) (and z@0 .cse52))))) (cong (=> .cse51 .cse38) (=> .cse0 .cse6)))) (res .cse55 .cse56 (cong (=> .cse44 .cse50) (=> .cse17 .cse1)))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse49) (=> .cse57 .cse10)))) (cong (and .cse48 .cse26) (and .cse11 .cse12)))))) (res .cse55 .cse56 (cong (=> .cse44 .cse25) (=> .cse17 .cse14)))))))) (res (= .cse74 .cse74) (refl .cse74) (cong (=> .cse74 .cse24) (=> .cse74 .cse15)))) (cong (not .cse20) (not .cse19))) (=-2 .cse23)))) (not- .cse21))) (res .cse22 (assume .cse22) (not- .cse22)))))))))))))))))) (let-proof ((.cse5 (! (res .cse15 (res .cse17 (=>+ 0 .cse15) .cse18) .cse16) :proves (- .cse4) :input))) (let-proof ((.cse2 (! (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse1) :input) (! (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse10) :input) (! (res .cse12 (! (res .cse13 (! (res .cse4 (! (=>+ 0 .cse13) :proves (+ .cse13 + .cse4) :input) .cse5) :proves (+ .cse13) :rup) (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse13) :input)) :proves (+ .cse12) :rup) (! (res .cse14 (and+ .cse14) (res .cse15 (=>+ 1 .cse15) .cse16)) :proves (- .cse11 - .cse12) :input)) :proves (- .cse11) :rup)) :proves (- .cse10) :rup)) :proves (- .cse1) :rup))) (res z@0 (! (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (! (and- 0 .cse0) :proves (- .cse0 + z@0) :input)) :proves (+ z@0) :rup) (res .cse3 (res .cse4 (! (xor+ (z@0 .cse4) (.cse4) (z@0)) :proves (+ .cse3 - z@0 + .cse4) :input) .cse5) (! (res .cse6 (! (res .cse7 (res .cse8 (not+ .cse8) (=>+ 1 .cse6)) .cse9) :proves (+ .cse6 - .cse3) :input) (! (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse6) :input) .cse2) :proves (- .cse6) :rup)) :proves (- .cse3) :rup)))))))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse0 (=> c d))) (let ((.cse2 (xor c d)) (.cse41 (ControlFlow 0 2)) (.cse13 (xor y@0 .cse0))) (let ((.cse16 (not .cse13)) (.cse36 (= .cse41 (- 1))) (.cse59 (and c d)) (.cse6 (xor x@0 .cse2))) (let ((.cse10 (not .cse6)) (.cse58 (xor b@1 .cse59)) (.cse15 (and .cse16 .cse36))) (let ((.cse4 (and .cse15 x@0)) (.cse60 (not .cse58)) (.cse12 (not .cse10))) (let ((.cse7 (and .cse60 .cse12)) (.cse18 (=> .cse4 y@0))) (let ((.cse8 (=> .cse7 .cse18))) (let-proof ((.cse14 (xor+ (y@0 .cse0) (y@0) (.cse0))) (.cse17 (not- .cse16)) (.cse11 (not+ .cse10)) (.cse3 (xor+ (c d) (d) (c)))) (let-proof ((.cse9 (let ((.cse64 (or c d))) (let ((.cse63 (xor b@0 .cse64))) (let ((.cse65 (not .cse63))) (let ((.cse20 (=> .cse65 .cse8))) (res .cse20 (=>+ 1 .cse20) (let ((.cse66 (= (ControlFlow 0 3) 2))) (let ((.cse21 (=> .cse66 .cse20))) (res .cse21 (=>+ 1 .cse21) (let ((.cse67 (= (ControlFlow 0 0) 3))) (let ((.cse22 (=> .cse67 .cse21))) (res .cse22 (=>+ 1 .cse22) (let ((.cse37 (- 0 1))) (let ((.cse43 (= y@0 .cse0)) (.cse35 (= .cse41 .cse37))) (let ((.cse55 (= c d)) (.cse34 (and .cse43 .cse35))) (let ((.cse31 (and .cse34 x@0)) (.cse57 (= b@1 .cse59)) (.cse45 (= x@0 .cse55))) (let ((.cse44 (and .cse57 .cse45)) (.cse30 (=> .cse31 y@0))) (let ((.cse62 (= b@0 .cse64)) (.cse29 (=> .cse44 .cse30))) (let ((.cse28 (=> .cse62 .cse29))) (let ((.cse27 (=> .cse66 .cse28))) (let ((.cse23 (=> .cse67 .cse27))) (let ((.cse25 (not .cse23))) (res .cse23 (let ((.cse24 (not .cse22))) (res .cse24 (res .cse25 (not+ .cse25) (let ((.cse26 (= .cse25 .cse24))) (res .cse26 (res (= .cse23 .cse22) (res (= .cse27 .cse21) (res (= .cse28 .cse20) (res (= .cse29 .cse8) (let ((.cse32 (= x@0 x@0))) (let-proof ((.cse33 (refl x@0))) (res (= .cse30 .cse18) (res (= y@0 y@0) (refl y@0) (res (= .cse31 .cse4) (res .cse32 .cse33 (res (= .cse34 .cse15) (res (= .cse35 .cse36) (res (= .cse37 (- 1)) (let ((.cse38 (* (- 1) 1))) (res (= .cse38 (- 1)) (poly* .cse38 (- 1)) (res (= 0 0) (refl 0) (let ((.cse39 (+ 0 .cse38)) (.cse40 (+ 0 (- 1)))) (res (= .cse39 .cse40) (cong (+ 0 .cse38) (+ 0 (- 1))) (res (= .cse37 .cse39) (-def 0 1) (res (= .cse40 (- 1)) (poly+ .cse40 (- 1)) (trans .cse37 .cse39 .cse40 (- 1))))))))) (res (= .cse41 .cse41) (refl .cse41) (cong (= .cse41 .cse37) (= .cse41 (- 1))))) (let ((.cse42 (= .cse43 .cse16))) (res .cse42 (res .cse43 (res .cse13 (res y@0 (res .cse0 (=+1 .cse43) .cse14) (res .cse0 (xor+ (y@0 .cse0) (.cse0) (y@0)) (=+2 .cse43))) (res .cse16 (=+1 .cse42) .cse17)) (res .cse13 (res .cse16 (not+ .cse16) (=+2 .cse42)) (res y@0 (res .cse0 (xor+ (y@0) (.cse0) (y@0 .cse0)) (=-1 .cse43)) (res .cse0 (=-2 .cse43) (xor- (y@0) (.cse0) (y@0 .cse0)))))) (cong (and .cse43 .cse35) (and .cse16 .cse36))))) (cong (and .cse34 x@0) (and .cse15 x@0)))) (cong (=> .cse31 y@0) (=> .cse4 y@0)))) (res (= .cse44 .cse7) (res (= .cse45 .cse12) (let ((.cse49 (not .cse2))) (let ((.cse46 (= x@0 .cse49))) (let-proof ((.cse51 (not- .cse49)) (.cse50 (not+ .cse49))) (res (= .cse46 .cse12) (let ((.cse52 (xor x@0 .cse49))) (let ((.cse47 (not .cse52))) (res (= .cse47 .cse12) (let ((.cse48 (= .cse52 .cse10))) (res .cse48 (res (xor .cse49 .cse2) (res .cse2 (res .cse49 .cse50 (xor+ (.cse49 .cse2) (.cse2) (.cse49))) (res .cse49 (xor+ (.cse49 .cse2) (.cse49) (.cse2)) .cse51)) (res .cse52 (res .cse10 (=+1 .cse48) (res .cse6 (xor+ (x@0 .cse49) (x@0 .cse2) (.cse49 .cse2)) (not- .cse10))) (res .cse10 (res .cse6 .cse11 (xor- (x@0 .cse2) (.cse49 .cse2) (x@0 .cse49))) (=+2 .cse48)))) (cong (not .cse52) (not .cse10)))) (let ((.cse53 (= .cse46 .cse47))) (res .cse53 (res .cse46 (res .cse52 (res x@0 (res .cse49 (=+1 .cse46) (xor+ (x@0 .cse49) (x@0) (.cse49))) (res .cse49 (xor+ (x@0 .cse49) (.cse49) (x@0)) (=+2 .cse46))) (res .cse47 (=+1 .cse53) (not- .cse47))) (res .cse52 (res .cse47 (not+ .cse47) (=+2 .cse53)) (res x@0 (res .cse49 (xor+ (x@0) (.cse49) (x@0 .cse49)) (=-1 .cse46)) (res .cse49 (=-2 .cse46) (xor- (x@0) (.cse49) (x@0 .cse49)))))) (trans .cse46 .cse47 .cse12)))))) (res (= .cse45 .cse46) (let ((.cse54 (= .cse55 .cse49))) (res .cse54 (res .cse55 (res .cse2 (res c (res d (=+1 .cse55) (xor+ (c d) (c) (d))) (res d .cse3 (=+2 .cse55))) (res .cse49 (=+1 .cse54) .cse51)) (res .cse2 (res .cse49 .cse50 (=+2 .cse54)) (res c (res d (xor+ (c) (d) (c d)) (=-1 .cse55)) (res d (=-2 .cse55) (xor- (c) (d) (c d)))))) (res .cse32 .cse33 (cong (= x@0 .cse55) (= x@0 .cse49))))) (trans .cse45 .cse46 .cse12)))))) (let ((.cse56 (= .cse57 .cse60))) (res .cse56 (res .cse57 (res .cse58 (res b@1 (res .cse59 (=+1 .cse57) (xor+ (b@1 .cse59) (b@1) (.cse59))) (res .cse59 (xor+ (b@1 .cse59) (.cse59) (b@1)) (=+2 .cse57))) (res .cse60 (=+1 .cse56) (not- .cse60))) (res .cse58 (res .cse60 (not+ .cse60) (=+2 .cse56)) (res b@1 (res .cse59 (xor+ (b@1) (.cse59) (b@1 .cse59)) (=-1 .cse57)) (res .cse59 (=-2 .cse57) (xor- (b@1) (.cse59) (b@1 .cse59)))))) (cong (and .cse57 .cse45) (and .cse60 .cse12))))) (cong (=> .cse44 .cse30) (=> .cse7 .cse18)))))) (let ((.cse61 (= .cse62 .cse65))) (res .cse61 (res .cse62 (res .cse63 (res b@0 (res .cse64 (=+1 .cse62) (xor+ (b@0 .cse64) (b@0) (.cse64))) (res .cse64 (xor+ (b@0 .cse64) (.cse64) (b@0)) (=+2 .cse62))) (res .cse65 (=+1 .cse61) (not- .cse65))) (res .cse63 (res .cse65 (not+ .cse65) (=+2 .cse61)) (res b@0 (res .cse64 (xor+ (b@0) (.cse64) (b@0 .cse64)) (=-1 .cse62)) (res .cse64 (=-2 .cse62) (xor- (b@0) (.cse64) (b@0 .cse64)))))) (cong (=> .cse62 .cse29) (=> .cse65 .cse8))))) (res (= .cse66 .cse66) (refl .cse66) (cong (=> .cse66 .cse28) (=> .cse66 .cse20)))) (res (= .cse67 .cse67) (refl .cse67) (cong (=> .cse67 .cse27) (=> .cse67 .cse21)))) (cong (not .cse23) (not .cse22))) (=-2 .cse26)))) (not- .cse24))) (res .cse25 (assume .cse25) (not- .cse25)))))))))))))))))))))))))) (let-proof ((.cse19 (res .cse8 (=>+ 1 .cse8) .cse9))) (let-proof ((.cse5 (res .cse18 (=>+ 0 .cse18) .cse19))) (let-proof ((.cse1 (! (res y@0 (! (res .cse13 .cse14 (res .cse15 (res .cse4 .cse5 (and- 0 .cse4)) (res .cse16 (and- 0 .cse15) .cse17))) :proves (- .cse0 + y@0) :input) (! (res .cse18 (=>+ 1 .cse18) .cse19) :proves (- y@0) :input)) :proves (- .cse0) :rup))) (res c (! (res .cse0 (! (=>+ 0 .cse0) :proves (+ .cse0 + c) :input) .cse1) :proves (+ c) :rup) (res d (res .cse2 (! .cse3 :proves (+ .cse2 - c + d) :input) (! (res x@0 (! (res .cse4 .cse5 (and- 1 .cse4)) :proves (+ x@0) :input) (! (res .cse6 (res .cse7 (res .cse8 (=>+ 0 .cse8) .cse9) (res .cse10 .cse11 (res .cse12 (and- 1 .cse7) (not- .cse12)))) (xor- (x@0 .cse2) (x@0) (.cse2))) :proves (- .cse2 - x@0) :input)) :proves (- .cse2) :rup)) (! (res .cse0 (! (=>+ 1 .cse0) :proves (+ .cse0 - d) :input) .cse1) :proves (- d) :rup))))))))))))))) :proves () :rup)
unsupported
