success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots40.v1.bpl.mod.smt2:28:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots40.v1.bpl.mod.smt2:31:10: Logical context not inconsistent!")
unsat
(! (let ((.cse17 (ControlFlow 0 2))) (let ((.cse1 (= call1formal@r@0 0)) (.cse11 (= .cse17 (- 1))) (.cse60 (= call1formal@r@0 903))) (let ((.cse9 (=> .cse11 .cse60)) (.cse90 (= .cse17 (- 3))) (.cse4 (not .cse1))) (let ((.cse3 (=> .cse90 .cse4)) (.cse8 (=> .cse4 .cse9)) (.cse125 (+ (* (- 1) call1formal@r@0) 42))) (let ((.cse24 (<= .cse125 0)) (.cse18 (and .cse3 .cse8))) (let ((.cse27 (< 0 .cse125)) (.cse7 (=> .cse24 .cse18)) (.cse124 (+ call1formal@r@0 (- 41)))) (let-proof ((.cse28 (total .cse125 0))) (let ((.cse22 (<= 1 .cse124)) (.cse0 (<= .cse124 0))) (let-proof ((.cse23 (total-int .cse124 0)) (.cse19 (! (let ((.cse30 (=> true .cse7))) (res .cse30 (! (=>+ 1 .cse30) :proves (+ .cse30 - .cse7) :input) (! (let ((.cse103 (= .cse17 (- 4)))) (let ((.cse31 (=> .cse103 true))) (let-proof ((.cse32 true+)) (res .cse31 (! (res true .cse32 (=>+ 1 .cse31)) :proves (+ .cse31) :input) (let ((.cse34 (and .cse31 .cse30))) (let ((.cse33 (=> b .cse34))) (res .cse33 (! (res .cse34 (and+ .cse34) (=>+ 1 .cse33)) :proves (+ .cse33 - .cse30 - .cse31) :input) (! (let ((.cse37 (= .cse17 (- 5)))) (let ((.cse35 (=> .cse37 b))) (res .cse35 (! (let ((.cse36 (= (- 5) .cse17))) (let ((.cse38 (= .cse37 .cse36))) (let-proof ((.cse39 (res .cse36 (res .cse37 (=+1 .cse38) (symm (- 5) .cse17)) (res .cse37 (symm .cse17 (- 5)) (=+2 .cse38))))) (res .cse36 (! (res .cse37 (=>+ 0 .cse35) (res .cse38 .cse39 (=-2 .cse38))) :proves (+ .cse35 + .cse36) :input) (! (let ((.cse41 (not .cse37))) (res .cse37 (let ((.cse40 (not .cse36))) (res .cse40 (res .cse41 (not+ .cse41) (let ((.cse42 (= .cse41 .cse40))) (res .cse42 (res .cse38 .cse39 (cong (not .cse37) (not .cse36))) (=-2 .cse42)))) (not- .cse40))) (res .cse41 (assume .cse41) (not- .cse41)))) :proves (- .cse36) :input))))) :proves (+ .cse35) :rup) (! (let ((.cse43 (and .cse35 .cse33))) (res .cse43 (and+ .cse43) (let ((.cse122 (= (ControlFlow 0 6) 2))) (let ((.cse44 (=> .cse122 .cse43))) (res .cse44 (=>+ 1 .cse44) (let ((.cse123 (= (ControlFlow 0 0) 6))) (let ((.cse45 (=> .cse123 .cse44))) (res .cse45 (=>+ 1 .cse45) (let ((.cse76 (* 42 43))) (let ((.cse61 (div .cse76 2)) (.cse78 (- 0 1))) (let ((.cse91 (- 0 3)) (.cse77 (= .cse17 .cse78)) (.cse59 (= call1formal@r@0 .cse61))) (let ((.cse58 (=> .cse77 .cse59)) (.cse89 (= .cse17 .cse91))) (let ((.cse88 (=> .cse89 .cse4)) (.cse57 (=> .cse4 .cse58))) (let ((.cse104 (- 0 4)) (.cse96 (<= 42 call1formal@r@0)) (.cse56 (and .cse88 .cse57))) (let ((.cse55 (=> .cse96 .cse56)) (.cse102 (= .cse17 .cse104)) (.cse100 (<= 0 42))) (let ((.cse118 (- 0 5)) (.cse101 (=> .cse102 .cse100)) (.cse54 (=> .cse100 .cse55))) (let ((.cse53 (and .cse101 .cse54)) (.cse117 (= .cse17 .cse118))) (let ((.cse116 (=> .cse117 b)) (.cse52 (=> b .cse53))) (let ((.cse51 (and .cse116 .cse52))) (let ((.cse50 (=> .cse122 .cse51))) (let ((.cse46 (=> .cse123 .cse50))) (let ((.cse48 (not .cse46))) (res .cse46 (let ((.cse47 (not .cse45))) (res .cse47 (res .cse48 (not+ .cse48) (let ((.cse49 (= .cse48 .cse47))) (res .cse49 (res (= .cse46 .cse45) (res (= .cse50 .cse44) (res (= .cse51 .cse43) (let ((.cse114 (= b b)) (.cse80 (= 0 0)) (.cse84 (= .cse17 .cse17))) (let-proof ((.cse115 (refl b)) (.cse81 (refl 0)) (.cse85 (refl .cse17))) (res (= .cse52 .cse33) (res (= .cse53 .cse34) (let ((.cse98 (= .cse100 true))) (let-proof ((.cse99 (let ((.cse109 (<= (- 42) 0))) (let ((.cse108 (= .cse109 true)) (.cse110 (< 0 (- 42)))) (let-proof ((.cse111 (total (- 42) 0))) (res .cse108 (res true .cse32 (res .cse109 (res .cse110 .cse111 (farkas 1 .cse110)) (=+2 .cse108))) (let ((.cse112 (= .cse100 .cse109))) (res .cse112 (res .cse109 (res .cse100 (=+1 .cse112) (res .cse110 .cse111 (farkas 1 .cse100 1 .cse110))) (res .cse100 (let ((.cse113 (< 42 0))) (res .cse113 (total 0 42) (farkas 1 .cse113 1 .cse109))) (=+2 .cse112))) (trans .cse100 .cse109 true))))))))) (res (= .cse54 .cse30) (res (= .cse55 .cse7) (res (= .cse56 .cse18) (let ((.cse86 (= .cse4 .cse4))) (let-proof ((.cse87 (refl .cse4))) (res (= .cse57 .cse8) (res (= .cse58 .cse9) (res (= .cse59 .cse60) (res (= .cse61 903) (let ((.cse62 (div 1806 2))) (res (= .cse62 903) (let ((.cse63 (= 2 0))) (res .cse63 (let ((.cse75 (* 2 .cse62))) (let ((.cse64 (<= .cse75 1806))) (res .cse64 (div-low 1806 2) (let ((.cse67 (abs 2))) (let ((.cse65 (< 1806 (+ .cse75 .cse67)))) (res .cse65 (div-high 1806 2) (let ((.cse66 (= .cse67 2))) (res .cse66 (let ((.cse69 (< 2 0))) (let ((.cse68 (ite .cse69 (- 2) 2))) (res (= .cse67 .cse68) (expand (abs 2)) (res .cse69 (res (= .cse68 2) (ite2 .cse68) (trans .cse67 .cse68 2)) (farkas 1 .cse69))))) (let ((.cse73 (+ .cse62 (- 903)))) (let ((.cse70 (<= .cse73 (- 1)))) (res .cse70 (let ((.cse71 (< 903 .cse62))) (res .cse71 (let ((.cse72 (<= 0 .cse73))) (res .cse72 (total-int .cse73 (- 1)) (let ((.cse74 (< .cse62 903))) (res .cse74 (trichotomy .cse62 903) (farkas 1 .cse74 1 .cse72))))) (farkas 1 .cse64 2 .cse71))) (farkas 1 .cse65 2 .cse70 1 .cse66)))))))))))) (farkas 1 .cse63))) (res (= .cse61 .cse62) (res (= 2 2) (refl 2) (res (= .cse76 1806) (poly* .cse76 1806) (cong (div .cse76 2) (div 1806 2)))) (trans .cse61 .cse62 903)))) (res (= call1formal@r@0 call1formal@r@0) (refl call1formal@r@0) (cong (= call1formal@r@0 .cse61) (= call1formal@r@0 903)))) (res (= .cse77 .cse11) (res (= .cse78 (- 1)) (let ((.cse79 (* (- 1) 1))) (res (= .cse79 (- 1)) (poly* .cse79 (- 1)) (res .cse80 .cse81 (let ((.cse82 (+ 0 .cse79)) (.cse83 (+ 0 (- 1)))) (res (= .cse82 .cse83) (cong (+ 0 .cse79) (+ 0 (- 1))) (res (= .cse78 .cse82) (-def 0 1) (res (= .cse83 (- 1)) (poly+ .cse83 (- 1)) (trans .cse78 .cse82 .cse83 (- 1))))))))) (res .cse84 .cse85 (cong (= .cse17 .cse78) (= .cse17 (- 1))))) (cong (=> .cse77 .cse59) (=> .cse11 .cse60)))) (res .cse86 .cse87 (cong (=> .cse4 .cse58) (=> .cse4 .cse9)))) (res (= .cse88 .cse3) (res .cse86 .cse87 (res (= .cse89 .cse90) (res (= .cse91 (- 3)) (let ((.cse92 (* (- 1) 3))) (res (= .cse92 (- 3)) (poly* .cse92 (- 3)) (res .cse80 .cse81 (let ((.cse93 (+ 0 .cse92)) (.cse94 (+ 0 (- 3)))) (res (= .cse93 .cse94) (cong (+ 0 .cse92) (+ 0 (- 3))) (res (= .cse91 .cse93) (-def 0 3) (res (= .cse94 (- 3)) (poly+ .cse94 (- 3)) (trans .cse91 .cse93 .cse94 (- 3))))))))) (res .cse84 .cse85 (cong (= .cse17 .cse91) (= .cse17 (- 3))))) (cong (=> .cse89 .cse4) (=> .cse90 .cse4)))) (cong (and .cse88 .cse57) (and .cse3 .cse8)))))) (let ((.cse95 (= .cse96 .cse24))) (res .cse95 (res .cse24 (res .cse96 (=+1 .cse95) (res .cse27 .cse28 (farkas 1 .cse96 1 .cse27))) (res .cse96 (let ((.cse97 (< call1formal@r@0 42))) (res .cse97 (total 42 call1formal@r@0) (farkas 1 .cse97 1 .cse24))) (=+2 .cse95))) (cong (=> .cse96 .cse56) (=> .cse24 .cse18))))) (res .cse98 .cse99 (cong (=> .cse100 .cse55) (=> true .cse7)))) (res (= .cse101 .cse31) (res .cse98 .cse99 (res (= .cse102 .cse103) (res (= .cse104 (- 4)) (let ((.cse105 (* (- 1) 4))) (res (= .cse105 (- 4)) (poly* .cse105 (- 4)) (res .cse80 .cse81 (let ((.cse106 (+ 0 .cse105)) (.cse107 (+ 0 (- 4)))) (res (= .cse106 .cse107) (cong (+ 0 .cse105) (+ 0 (- 4))) (res (= .cse104 .cse106) (-def 0 4) (res (= .cse107 (- 4)) (poly+ .cse107 (- 4)) (trans .cse104 .cse106 .cse107 (- 4))))))))) (res .cse84 .cse85 (cong (= .cse17 .cse104) (= .cse17 (- 4))))) (cong (=> .cse102 .cse100) (=> .cse103 true)))) (cong (and .cse101 .cse54) (and .cse31 .cse30)))))) (res .cse114 .cse115 (cong (=> b .cse53) (=> b .cse34)))) (res (= .cse116 .cse35) (res .cse114 .cse115 (res (= .cse117 .cse37) (res (= .cse118 (- 5)) (let ((.cse119 (* (- 1) 5))) (res (= .cse119 (- 5)) (poly* .cse119 (- 5)) (res .cse80 .cse81 (let ((.cse120 (+ 0 .cse119)) (.cse121 (+ 0 (- 5)))) (res (= .cse120 .cse121) (cong (+ 0 .cse119) (+ 0 (- 5))) (res (= .cse118 .cse120) (-def 0 5) (res (= .cse121 (- 5)) (poly+ .cse121 (- 5)) (trans .cse118 .cse120 .cse121 (- 5))))))))) (res .cse84 .cse85 (cong (= .cse17 .cse118) (= .cse17 (- 5))))) (cong (=> .cse117 b) (=> .cse37 b)))) (cong (and .cse116 .cse52) (and .cse35 .cse33)))))) (res (= .cse122 .cse122) (refl .cse122) (cong (=> .cse122 .cse51) (=> .cse122 .cse43)))) (res (= .cse123 .cse123) (refl .cse123) (cong (=> .cse123 .cse50) (=> .cse123 .cse44)))) (cong (not .cse46) (not .cse45))) (=-2 .cse49)))) (not- .cse47))) (res .cse48 (assume .cse48) (not- .cse48))))))))))))))))))))))))) :proves (- .cse35 - .cse33) :input)))) :proves (- .cse33) :rup)))))))) :proves (- .cse30) :rup))) :proves (- .cse7) :rup))) (res .cse0 (res .cse1 (! (let ((.cse2 (= 0 call1formal@r@0))) (let-proof ((.cse6 (symm call1formal@r@0 0))) (res .cse2 (! (res .cse3 (! (res .cse1 (res .cse4 (not+ .cse4) (=>+ 1 .cse3)) (let ((.cse5 (= .cse1 .cse2))) (res .cse5 (res .cse2 (res .cse1 (=+1 .cse5) (symm 0 call1formal@r@0)) (res .cse1 .cse6 (=+2 .cse5))) (=-2 .cse5)))) :proves (+ .cse3 + .cse2) :input) (! (res .cse7 (res .cse8 (! (res .cse9 (! (let ((.cse10 (= (- 1) .cse17))) (let ((.cse12 (= .cse11 .cse10))) (let-proof ((.cse13 (res .cse10 (res .cse11 (=+1 .cse12) (symm (- 1) .cse17)) (res .cse11 (symm .cse17 (- 1)) (=+2 .cse12))))) (res .cse10 (! (res .cse11 (=>+ 0 .cse9) (res .cse12 .cse13 (=-2 .cse12))) :proves (+ .cse9 + .cse10) :input) (! (let ((.cse15 (not .cse11))) (res .cse11 (let ((.cse14 (not .cse10))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res .cse12 .cse13 (cong (not .cse11) (not .cse10))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (assume .cse15) (not- .cse15)))) :proves (- .cse10) :input))))) :proves (+ .cse9) :rup) (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse9) :input)) :proves (+ .cse8) :rup) (! (res .cse18 (and+ .cse18) (=>+ 1 .cse7)) :proves (- .cse3 - .cse8 + .cse7) :input)) .cse19) :proves (- .cse3) :rup)) :proves (+ .cse2) :rup) (! (res .cse1 .cse6 (let ((.cse20 (< call1formal@r@0 0))) (res .cse20 (let ((.cse21 (< 0 call1formal@r@0))) (res .cse21 (trichotomy call1formal@r@0 0) (farkas 1 .cse1 1 .cse21))) (farkas 1 .cse2 1 .cse20)))) :proves (- .cse2 + .cse1) :EQ)))) :proves (+ .cse1) :rup) (! (res .cse22 .cse23 (farkas 1 .cse1 1 .cse22)) :proves (- .cse1 + .cse0) :LA (1 (- 1)))) (! (res .cse7 (! (res .cse24 (=>+ 0 .cse7) (let ((.cse25 (not .cse0))) (let-proof ((.cse29 (not- .cse25))) (res .cse25 (let ((.cse26 (= .cse24 .cse25))) (res .cse26 (res .cse25 (res .cse24 (=+1 .cse26) (res .cse0 (not+ .cse25) (farkas 1 .cse24 1 .cse0))) (res .cse24 (res .cse27 .cse28 (res .cse0 (res .cse22 .cse23 (farkas 1 .cse27 1 .cse22)) .cse29)) (=+2 .cse26))) (=-2 .cse26))) .cse29)))) :proves (+ .cse7 - .cse0) :input) .cse19) :proves (- .cse0) :rup))))))))))) :proves () :rup)
unsupported
