success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse55 (ControlFlow 0 2)) (.cse3 (<= call1formal@r@0 0))) (let ((.cse80 (* (- 1) call1formal@r@0)) (.cse17 (not .cse3)) (.cse46 (= .cse55 (- 1)))) (let ((.cse0 (and .cse17 .cse46)) (.cse5 (<= .cse80 0))) (let ((.cse12 (< 0 .cse80)) (.cse1 (=> .cse0 .cse5))) (let-proof ((.cse13 (total .cse80 0)) (.cse18 (not- .cse17))) (let-proof ((.cse2 (! (let ((.cse61 (= .cse55 (- 3)))) (let ((.cse19 (=> .cse61 true))) (res .cse19 (! (res true true+ (=>+ 1 .cse19)) :proves (+ .cse19) :input) (let ((.cse23 (<= n 0))) (let ((.cse24 (not .cse23)) (.cse21 (and .cse19 .cse1))) (let ((.cse20 (=> .cse24 .cse21))) (res .cse20 (! (res .cse21 (and+ .cse21) (=>+ 1 .cse20)) :proves (+ .cse20 - .cse1 - .cse19) :input) (! (let ((.cse71 (= .cse55 (- 4)))) (let ((.cse22 (=> .cse71 .cse24)) (.cse77 (= (ControlFlow 0 5) 2))) (let ((.cse26 (and .cse24 .cse77)) (.cse30 (and .cse22 .cse20))) (let ((.cse27 (=> .cse26 .cse30))) (let-proof ((.cse25 (not+ .cse24)) (.cse29 (not- .cse24))) (let-proof ((.cse28 (let ((.cse79 (= (ControlFlow 0 0) 5))) (let ((.cse31 (=> .cse79 .cse27))) (res .cse31 (=>+ 1 .cse31) (let ((.cse47 (- 0 1))) (let ((.cse62 (- 0 3)) (.cse57 (< 0 call1formal@r@0)) (.cse45 (= .cse55 .cse47))) (let ((.cse44 (and .cse57 .cse45)) (.cse42 (<= 0 call1formal@r@0)) (.cse60 (= .cse55 .cse62))) (let ((.cse72 (- 0 4)) (.cse59 (=> .cse60 true)) (.cse40 (=> .cse44 .cse42))) (let ((.cse39 (and .cse59 .cse40)) (.cse70 (= .cse55 .cse72)) (.cse68 (< 0 n))) (let ((.cse69 (=> .cse70 .cse68)) (.cse38 (=> .cse68 .cse39))) (let ((.cse76 (and .cse68 .cse77)) (.cse37 (and .cse69 .cse38))) (let ((.cse36 (=> .cse76 .cse37))) (let ((.cse32 (=> .cse79 .cse36))) (let ((.cse34 (not .cse32))) (res .cse32 (let ((.cse33 (not .cse31))) (res .cse33 (res .cse34 (not+ .cse34) (let ((.cse35 (= .cse34 .cse33))) (res .cse35 (res (= .cse32 .cse31) (res (= .cse36 .cse27) (let ((.cse66 (= .cse68 .cse24))) (let-proof ((.cse67 (res .cse24 (res .cse68 (=+1 .cse66) (res .cse23 .cse25 (farkas 1 .cse68 1 .cse23))) (res .cse68 (let-proof ((.cse78 (total n 0))) (res .cse23 .cse78 (res .cse23 (res .cse68 .cse78 (farkas 1 .cse23 1 .cse68)) .cse29))) (=+2 .cse66))))) (res (= .cse37 .cse30) (let ((.cse49 (= 0 0)) (.cse53 (= .cse55 .cse55))) (let-proof ((.cse50 (refl 0)) (.cse54 (refl .cse55))) (res (= .cse38 .cse20) (res (= .cse39 .cse21) (res (= .cse40 .cse1) (let ((.cse41 (= .cse42 .cse5))) (res .cse41 (res .cse5 (res .cse42 (=+1 .cse41) (res .cse12 .cse13 (farkas 1 .cse42 1 .cse12))) (res .cse42 (let ((.cse43 (< call1formal@r@0 0))) (res .cse43 (total 0 call1formal@r@0) (farkas 1 .cse43 1 .cse5))) (=+2 .cse41))) (res (= .cse44 .cse0) (res (= .cse45 .cse46) (res (= .cse47 (- 1)) (let ((.cse48 (* (- 1) 1))) (res (= .cse48 (- 1)) (poly* .cse48 (- 1)) (res .cse49 .cse50 (let ((.cse51 (+ 0 .cse48)) (.cse52 (+ 0 (- 1)))) (res (= .cse51 .cse52) (cong (+ 0 .cse48) (+ 0 (- 1))) (res (= .cse47 .cse51) (-def 0 1) (res (= .cse52 (- 1)) (poly+ .cse52 (- 1)) (trans .cse47 .cse51 .cse52 (- 1))))))))) (res .cse53 .cse54 (cong (= .cse55 .cse47) (= .cse55 (- 1))))) (let ((.cse56 (= .cse57 .cse17))) (res .cse56 (res .cse17 (res .cse57 (=+1 .cse56) (res .cse3 (not+ .cse17) (farkas 1 .cse57 1 .cse3))) (res .cse57 (let-proof ((.cse58 (total call1formal@r@0 0))) (res .cse3 .cse58 (res .cse3 (res .cse57 .cse58 (farkas 1 .cse3 1 .cse57)) .cse18))) (=+2 .cse56))) (cong (and .cse57 .cse45) (and .cse17 .cse46))))) (cong (=> .cse44 .cse42) (=> .cse0 .cse5))))) (res (= .cse59 .cse19) (res (= true true) (refl true) (res (= .cse60 .cse61) (res (= .cse62 (- 3)) (let ((.cse63 (* (- 1) 3))) (res (= .cse63 (- 3)) (poly* .cse63 (- 3)) (res .cse49 .cse50 (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 3)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 3))) (res (= .cse62 .cse64) (-def 0 3) (res (= .cse65 (- 3)) (poly+ .cse65 (- 3)) (trans .cse62 .cse64 .cse65 (- 3))))))))) (res .cse53 .cse54 (cong (= .cse55 .cse62) (= .cse55 (- 3))))) (cong (=> .cse60 true) (=> .cse61 true)))) (cong (and .cse59 .cse40) (and .cse19 .cse1)))) (res .cse66 .cse67 (cong (=> .cse68 .cse39) (=> .cse24 .cse21)))) (res (= .cse69 .cse22) (res .cse66 .cse67 (res (= .cse70 .cse71) (res (= .cse72 (- 4)) (let ((.cse73 (* (- 1) 4))) (res (= .cse73 (- 4)) (poly* .cse73 (- 4)) (res .cse49 .cse50 (let ((.cse74 (+ 0 .cse73)) (.cse75 (+ 0 (- 4)))) (res (= .cse74 .cse75) (cong (+ 0 .cse73) (+ 0 (- 4))) (res (= .cse72 .cse74) (-def 0 4) (res (= .cse75 (- 4)) (poly+ .cse75 (- 4)) (trans .cse72 .cse74 .cse75 (- 4))))))))) (res .cse53 .cse54 (cong (= .cse55 .cse72) (= .cse55 (- 4))))) (cong (=> .cse70 .cse68) (=> .cse71 .cse24)))) (cong (and .cse69 .cse38) (and .cse22 .cse20)))))) (res (= .cse76 .cse26) (res (= .cse77 .cse77) (refl .cse77) (res .cse66 .cse67 (cong (and .cse68 .cse77) (and .cse24 .cse77)))) (cong (=> .cse76 .cse37) (=> .cse26 .cse30)))))) (res (= .cse79 .cse79) (refl .cse79) (cong (=> .cse79 .cse36) (=> .cse79 .cse27)))) (cong (not .cse32) (not .cse31))) (=-2 .cse35)))) (not- .cse33))) (res .cse34 (assume .cse34) (not- .cse34)))))))))))))))))) (res .cse22 (! (res .cse23 (! (res .cse24 .cse25 (=>+ 1 .cse22)) :proves (+ .cse22 + .cse23) :input) (! (res .cse26 (res .cse27 (=>+ 0 .cse27) .cse28) (res .cse24 (and- 0 .cse26) .cse29)) :proves (- .cse23) :input)) :proves (+ .cse22) :rup) (! (res .cse30 (and+ .cse30) (res .cse27 (=>+ 1 .cse27) .cse28)) :proves (- .cse22 - .cse20) :input)))))))) :proves (- .cse20) :rup)))))))) :proves (- .cse1) :rup))) (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (res .cse3 (! (let ((.cse15 (+ call1formal@r@0 1))) (let ((.cse4 (<= .cse15 0))) (res .cse4 (! (res .cse1 (! (res .cse5 (let ((.cse6 (not .cse4))) (let-proof ((.cse7 (not+ .cse6))) (res .cse6 .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (let ((.cse9 (not .cse5))) (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (let ((.cse11 (= .cse5 .cse6))) (res .cse11 (res .cse6 (res .cse5 (=+1 .cse11) (res .cse4 .cse7 (farkas 1 .cse5 1 .cse4))) (res .cse5 (res .cse12 .cse13 (res .cse4 (let ((.cse14 (<= 1 .cse15))) (res .cse14 (total-int .cse15 0) (farkas 1 .cse12 1 .cse14))) (not- .cse6))) (=+2 .cse11))) (cong (not .cse5) (not .cse6)))) (=-2 .cse10))))) (not- .cse8)))))) (=>+ 1 .cse1)) :proves (+ .cse1 + .cse4) :input) .cse2) :proves (+ .cse4) :rup) (! (let ((.cse16 (<= 1 call1formal@r@0))) (res .cse16 (total-int call1formal@r@0 0) (farkas 1 .cse4 1 .cse16))) :proves (- .cse4 + .cse3) :LA (1 (- 1)))))) :proves (+ .cse3) :rup) (! (res .cse17 (and- 0 .cse0) .cse18) :proves (- .cse0 - .cse3) :input))))))))) :proves () :rup)
unsupported
