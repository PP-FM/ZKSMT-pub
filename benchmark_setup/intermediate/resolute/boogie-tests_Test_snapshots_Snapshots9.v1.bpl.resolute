success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse49 (ControlFlow 0 2)) (.cse66 (* (- 1) call1formal@r@0))) (let ((.cse4 (<= .cse66 0)) (.cse40 (= .cse49 (- 1)))) (let ((.cse0 (and .cse4 .cse40))) (let ((.cse13 (< 0 .cse66)) (.cse1 (=> .cse0 .cse4))) (let-proof ((.cse14 (total .cse66 0))) (let-proof ((.cse2 (! (let ((.cse19 (<= n 0))) (let ((.cse20 (not .cse19))) (let ((.cse17 (=> .cse20 .cse1))) (res .cse17 (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse1) :input) (! (let ((.cse57 (= .cse49 (- 3)))) (let ((.cse18 (=> .cse57 .cse20)) (.cse63 (= (ControlFlow 0 4) 2))) (let ((.cse22 (and .cse20 .cse63)) (.cse26 (and .cse18 .cse17))) (let ((.cse23 (=> .cse22 .cse26))) (let-proof ((.cse21 (not+ .cse20)) (.cse25 (not- .cse20))) (let-proof ((.cse24 (let ((.cse65 (= (ControlFlow 0 0) 4))) (let ((.cse27 (=> .cse65 .cse23))) (res .cse27 (=>+ 1 .cse27) (let ((.cse41 (- 0 1))) (let ((.cse50 (<= 0 call1formal@r@0)) (.cse39 (= .cse49 .cse41))) (let ((.cse58 (- 0 3)) (.cse38 (and .cse50 .cse39))) (let ((.cse35 (=> .cse38 .cse50)) (.cse56 (= .cse49 .cse58)) (.cse54 (< 0 n))) (let ((.cse55 (=> .cse56 .cse54)) (.cse34 (=> .cse54 .cse35))) (let ((.cse62 (and .cse54 .cse63)) (.cse33 (and .cse55 .cse34))) (let ((.cse32 (=> .cse62 .cse33))) (let ((.cse28 (=> .cse65 .cse32))) (let ((.cse30 (not .cse28))) (res .cse28 (let ((.cse29 (not .cse27))) (res .cse29 (res .cse30 (not+ .cse30) (let ((.cse31 (= .cse30 .cse29))) (res .cse31 (res (= .cse28 .cse27) (res (= .cse32 .cse23) (let ((.cse52 (= .cse54 .cse20))) (let-proof ((.cse53 (res .cse20 (res .cse54 (=+1 .cse52) (res .cse19 .cse21 (farkas 1 .cse54 1 .cse19))) (res .cse54 (let-proof ((.cse64 (total n 0))) (res .cse19 .cse64 (res .cse19 (res .cse54 .cse64 (farkas 1 .cse19 1 .cse54)) .cse25))) (=+2 .cse52))))) (res (= .cse33 .cse26) (let ((.cse43 (= 0 0)) (.cse47 (= .cse49 .cse49))) (let-proof ((.cse44 (refl 0)) (.cse48 (refl .cse49))) (res (= .cse34 .cse17) (res (= .cse35 .cse1) (let ((.cse36 (= .cse50 .cse4))) (let-proof ((.cse37 (res .cse4 (res .cse50 (=+1 .cse36) (res .cse13 .cse14 (farkas 1 .cse50 1 .cse13))) (res .cse50 (let ((.cse51 (< call1formal@r@0 0))) (res .cse51 (total 0 call1formal@r@0) (farkas 1 .cse51 1 .cse4))) (=+2 .cse36))))) (res .cse36 .cse37 (res (= .cse38 .cse0) (res (= .cse39 .cse40) (res (= .cse41 (- 1)) (let ((.cse42 (* (- 1) 1))) (res (= .cse42 (- 1)) (poly* .cse42 (- 1)) (res .cse43 .cse44 (let ((.cse45 (+ 0 .cse42)) (.cse46 (+ 0 (- 1)))) (res (= .cse45 .cse46) (cong (+ 0 .cse42) (+ 0 (- 1))) (res (= .cse41 .cse45) (-def 0 1) (res (= .cse46 (- 1)) (poly+ .cse46 (- 1)) (trans .cse41 .cse45 .cse46 (- 1))))))))) (res .cse47 .cse48 (cong (= .cse49 .cse41) (= .cse49 (- 1))))) (res .cse36 .cse37 (cong (and .cse50 .cse39) (and .cse4 .cse40)))) (cong (=> .cse38 .cse50) (=> .cse0 .cse4)))))) (res .cse52 .cse53 (cong (=> .cse54 .cse35) (=> .cse20 .cse1)))) (res (= .cse55 .cse18) (res .cse52 .cse53 (res (= .cse56 .cse57) (res (= .cse58 (- 3)) (let ((.cse59 (* (- 1) 3))) (res (= .cse59 (- 3)) (poly* .cse59 (- 3)) (res .cse43 .cse44 (let ((.cse60 (+ 0 .cse59)) (.cse61 (+ 0 (- 3)))) (res (= .cse60 .cse61) (cong (+ 0 .cse59) (+ 0 (- 3))) (res (= .cse58 .cse60) (-def 0 3) (res (= .cse61 (- 3)) (poly+ .cse61 (- 3)) (trans .cse58 .cse60 .cse61 (- 3))))))))) (res .cse47 .cse48 (cong (= .cse49 .cse58) (= .cse49 (- 3))))) (cong (=> .cse56 .cse54) (=> .cse57 .cse20)))) (cong (and .cse55 .cse34) (and .cse18 .cse17)))))) (res (= .cse62 .cse22) (res (= .cse63 .cse63) (refl .cse63) (res .cse52 .cse53 (cong (and .cse54 .cse63) (and .cse20 .cse63)))) (cong (=> .cse62 .cse33) (=> .cse22 .cse26)))))) (res (= .cse65 .cse65) (refl .cse65) (cong (=> .cse65 .cse32) (=> .cse65 .cse23)))) (cong (not .cse28) (not .cse27))) (=-2 .cse31)))) (not- .cse29))) (res .cse30 (assume .cse30) (not- .cse30))))))))))))))))) (res .cse18 (! (res .cse19 (! (res .cse20 .cse21 (=>+ 1 .cse18)) :proves (+ .cse18 + .cse19) :input) (! (res .cse22 (res .cse23 (=>+ 0 .cse23) .cse24) (res .cse20 (and- 0 .cse22) .cse25)) :proves (- .cse19) :input)) :proves (+ .cse18) :rup) (! (res .cse26 (and+ .cse26) (res .cse23 (=>+ 1 .cse23) .cse24)) :proves (- .cse18 - .cse17) :input)))))))) :proves (- .cse17) :rup))))) :proves (- .cse1) :rup))) (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (let ((.cse16 (+ call1formal@r@0 1))) (let ((.cse3 (<= .cse16 0))) (let ((.cse5 (not .cse3))) (let ((.cse10 (= .cse4 .cse5))) (let-proof ((.cse6 (not+ .cse5)) (.cse12 (not- .cse5))) (let-proof ((.cse11 (res .cse5 (res .cse4 (=+1 .cse10) (res .cse3 .cse6 (farkas 1 .cse4 1 .cse3))) (res .cse4 (res .cse13 .cse14 (res .cse3 (let ((.cse15 (<= 1 .cse16))) (res .cse15 (total-int .cse16 0) (farkas 1 .cse13 1 .cse15))) .cse12)) (=+2 .cse10))))) (res .cse3 (! (res .cse1 (! (res .cse4 (res .cse5 .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (let ((.cse8 (not .cse4))) (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res .cse10 .cse11 (cong (not .cse4) (not .cse5))) (=-2 .cse9))))) (not- .cse7)))) (=>+ 1 .cse1)) :proves (+ .cse1 + .cse3) :input) .cse2) :proves (+ .cse3) :rup) (! (res .cse4 (and- 0 .cse0) (res .cse5 (res .cse10 .cse11 (=-2 .cse10)) .cse12)) :proves (- .cse0 - .cse3) :input))))))))))))))) :proves () :rup)
unsupported
