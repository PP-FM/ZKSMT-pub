success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_InvariantVerifiedUnder0.bpl.mod.smt2:26:10: Logical context not inconsistent!")
unsat
(! (let ((.cse16 (ControlFlow 0 2))) (let ((.cse1 (= .cse16 (- 1))) (.cse0 (= (- 1) .cse16))) (let ((.cse19 (= .cse1 .cse0))) (let-proof ((.cse20 (res .cse0 (res .cse1 (=+1 .cse19) (symm (- 1) .cse16)) (res .cse1 (symm .cse16 (- 1)) (=+2 .cse19))))) (res .cse0 (! (res .cse1 (let ((.cse2 (=> .cse1 false))) (res .cse2 (=>+ 0 .cse2) (let ((.cse17 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse17 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse18 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse18 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse12 (- 0 1))) (let ((.cse11 (= .cse16 .cse12))) (let ((.cse10 (=> .cse11 false))) (let ((.cse9 (=> .cse17 .cse10))) (let ((.cse5 (=> .cse18 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (res (= false false) (refl false) (res (= .cse11 .cse1) (res (= .cse12 (- 1)) (let ((.cse13 (* (- 1) 1))) (res (= .cse13 (- 1)) (poly* .cse13 (- 1)) (res (= 0 0) (refl 0) (let ((.cse14 (+ 0 .cse13)) (.cse15 (+ 0 (- 1)))) (res (= .cse14 .cse15) (cong (+ 0 .cse13) (+ 0 (- 1))) (res (= .cse12 .cse14) (-def 0 1) (res (= .cse15 (- 1)) (poly+ .cse15 (- 1)) (trans .cse12 .cse14 .cse15 (- 1))))))))) (res (= .cse16 .cse16) (refl .cse16) (cong (= .cse16 .cse12) (= .cse16 (- 1))))) (cong (=> .cse11 false) (=> .cse1 false)))) (res (= .cse17 .cse17) (refl .cse17) (cong (=> .cse17 .cse10) (=> .cse17 .cse2)))) (res (= .cse18 .cse18) (refl .cse18) (cong (=> .cse18 .cse9) (=> .cse18 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7))))))))))))))))) (res .cse19 .cse20 (=-2 .cse19))) :proves (+ .cse0) :input) (! (let ((.cse22 (not .cse1))) (res .cse1 (let ((.cse21 (not .cse0))) (res .cse21 (res .cse22 (not+ .cse22) (let ((.cse23 (= .cse22 .cse21))) (res .cse23 (res .cse19 .cse20 (cong (not .cse1) (not .cse0))) (=-2 .cse23)))) (not- .cse21))) (res .cse22 (assume .cse22) (not- .cse22)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (res true true+ (let ((.cse0 (=> (= (ControlFlow 0 0) 2) true))) (res .cse0 (=>+ 1 .cse0) (let ((.cse1 (not .cse0))) (res .cse1 (assume .cse1) (not- .cse1)))))) :proves () :input)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_InvariantVerifiedUnder0.bpl.mod.smt2:96:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_InvariantVerifiedUnder0.bpl.mod.smt2:99:10: Logical context not inconsistent!")
unsat
(! (let ((.cse61 (ControlFlow 0 2))) (let ((.cse52 (= .cse61 (- 1))) (.cse1 (or A Q))) (let ((.cse0 (=> .cse52 .cse1)) (.cse68 (= .cse61 (- 3))) (.cse6 (or A P))) (let ((.cse5 (=> .cse68 .cse6)) (.cse4 (=> P .cse0))) (let ((.cse73 (and Q (= (ControlFlow 0 4) 2))) (.cse10 (and .cse5 .cse4))) (let ((.cse9 (=> .cse73 .cse10)) (.cse21 (ControlFlow 0 5))) (let ((.cse74 (= .cse21 4)) (.cse11 (=> P .cse9))) (let ((.cse12 (=> .cse74 .cse11)) (.cse15 (= .cse21 (- 6)))) (let ((.cse13 (=> .cse15 .cse1)) (.cse2 (=> Q .cse12))) (let ((.cse22 (and .cse13 .cse2))) (let ((.cse7 (=> P .cse22))) (let-proof ((.cse8 (! (let ((.cse25 (= .cse21 (- 7)))) (let ((.cse23 (=> .cse25 .cse6))) (res .cse23 (! (let ((.cse24 (= (- 7) .cse21))) (let ((.cse26 (= .cse25 .cse24))) (let-proof ((.cse27 (res .cse24 (res .cse25 (=+1 .cse26) (symm (- 7) .cse21)) (res .cse25 (symm .cse21 (- 7)) (=+2 .cse26))))) (res .cse24 (! (res .cse25 (=>+ 0 .cse23) (res .cse26 .cse27 (=-2 .cse26))) :proves (+ .cse23 + .cse24) :input) (! (let ((.cse29 (not .cse25))) (res .cse25 (let ((.cse28 (not .cse24))) (res .cse28 (res .cse29 (not+ .cse29) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (res .cse26 .cse27 (cong (not .cse25) (not .cse24))) (=-2 .cse30)))) (not- .cse28))) (res .cse29 (assume .cse29) (not- .cse29)))) :proves (- .cse24) :input))))) :proves (+ .cse23) :rup) (! (let ((.cse31 (and .cse23 .cse7))) (res .cse31 (and+ .cse31) (let ((.cse89 (= (ControlFlow 0 8) 5))) (let ((.cse32 (=> .cse89 .cse31))) (res .cse32 (=>+ 1 .cse32) (let ((.cse90 (= (ControlFlow 0 0) 8))) (let ((.cse33 (=> .cse90 .cse32))) (res .cse33 (=>+ 1 .cse33) (let ((.cse53 (- 0 1))) (let ((.cse69 (- 0 3)) (.cse51 (= .cse61 .cse53))) (let ((.cse48 (=> .cse51 .cse1)) (.cse67 (= .cse61 .cse69))) (let ((.cse64 (=> .cse67 .cse6)) (.cse47 (=> P .cse48))) (let ((.cse46 (and .cse64 .cse47))) (let ((.cse45 (=> .cse73 .cse46))) (let ((.cse77 (- 0 6)) (.cse44 (=> P .cse45))) (let ((.cse43 (=> .cse74 .cse44)) (.cse76 (= .cse21 .cse77))) (let ((.cse85 (- 0 7)) (.cse75 (=> .cse76 .cse1)) (.cse42 (=> Q .cse43))) (let ((.cse41 (and .cse75 .cse42)) (.cse84 (= .cse21 .cse85))) (let ((.cse83 (=> .cse84 .cse6)) (.cse40 (=> P .cse41))) (let ((.cse39 (and .cse83 .cse40))) (let ((.cse38 (=> .cse89 .cse39))) (let ((.cse34 (=> .cse90 .cse38))) (let ((.cse36 (not .cse34))) (res .cse34 (let ((.cse35 (not .cse33))) (res .cse35 (res .cse36 (not+ .cse36) (let ((.cse37 (= .cse36 .cse35))) (res .cse37 (res (= .cse34 .cse33) (res (= .cse38 .cse32) (res (= .cse39 .cse31) (let ((.cse65 (= .cse6 .cse6)) (.cse55 (= 0 0)) (.cse81 (= .cse21 .cse21))) (let-proof ((.cse66 (refl .cse6)) (.cse56 (refl 0)) (.cse82 (refl .cse21))) (res (= .cse40 .cse7) (let ((.cse62 (= P P))) (let-proof ((.cse63 (refl P))) (res (= .cse41 .cse22) (let ((.cse49 (= .cse1 .cse1))) (let-proof ((.cse50 (refl .cse1))) (res (= .cse42 .cse2) (res (= .cse43 .cse12) (res (= .cse44 .cse11) (res (= .cse45 .cse9) (res (= .cse46 .cse10) (let ((.cse59 (= .cse61 .cse61))) (let-proof ((.cse60 (refl .cse61))) (res (= .cse47 .cse4) (res (= .cse48 .cse0) (res .cse49 .cse50 (res (= .cse51 .cse52) (res (= .cse53 (- 1)) (let ((.cse54 (* (- 1) 1))) (res (= .cse54 (- 1)) (poly* .cse54 (- 1)) (res .cse55 .cse56 (let ((.cse57 (+ 0 .cse54)) (.cse58 (+ 0 (- 1)))) (res (= .cse57 .cse58) (cong (+ 0 .cse54) (+ 0 (- 1))) (res (= .cse53 .cse57) (-def 0 1) (res (= .cse58 (- 1)) (poly+ .cse58 (- 1)) (trans .cse53 .cse57 .cse58 (- 1))))))))) (res .cse59 .cse60 (cong (= .cse61 .cse53) (= .cse61 (- 1))))) (cong (=> .cse51 .cse1) (=> .cse52 .cse1)))) (res .cse62 .cse63 (cong (=> P .cse48) (=> P .cse0)))) (res (= .cse64 .cse5) (res .cse65 .cse66 (res (= .cse67 .cse68) (res (= .cse69 (- 3)) (let ((.cse70 (* (- 1) 3))) (res (= .cse70 (- 3)) (poly* .cse70 (- 3)) (res .cse55 .cse56 (let ((.cse71 (+ 0 .cse70)) (.cse72 (+ 0 (- 3)))) (res (= .cse71 .cse72) (cong (+ 0 .cse70) (+ 0 (- 3))) (res (= .cse69 .cse71) (-def 0 3) (res (= .cse72 (- 3)) (poly+ .cse72 (- 3)) (trans .cse69 .cse71 .cse72 (- 3))))))))) (res .cse59 .cse60 (cong (= .cse61 .cse69) (= .cse61 (- 3))))) (cong (=> .cse67 .cse6) (=> .cse68 .cse6)))) (cong (and .cse64 .cse47) (and .cse5 .cse4)))))) (res (= .cse73 .cse73) (refl .cse73) (cong (=> .cse73 .cse46) (=> .cse73 .cse10)))) (res .cse62 .cse63 (cong (=> P .cse45) (=> P .cse9)))) (res (= .cse74 .cse74) (refl .cse74) (cong (=> .cse74 .cse44) (=> .cse74 .cse11)))) (res (= Q Q) (refl Q) (cong (=> Q .cse43) (=> Q .cse12)))) (res (= .cse75 .cse13) (res .cse49 .cse50 (res (= .cse76 .cse15) (res (= .cse77 (- 6)) (let ((.cse78 (* (- 1) 6))) (res (= .cse78 (- 6)) (poly* .cse78 (- 6)) (res .cse55 .cse56 (let ((.cse79 (+ 0 .cse78)) (.cse80 (+ 0 (- 6)))) (res (= .cse79 .cse80) (cong (+ 0 .cse78) (+ 0 (- 6))) (res (= .cse77 .cse79) (-def 0 6) (res (= .cse80 (- 6)) (poly+ .cse80 (- 6)) (trans .cse77 .cse79 .cse80 (- 6))))))))) (res .cse81 .cse82 (cong (= .cse21 .cse77) (= .cse21 (- 6))))) (cong (=> .cse76 .cse1) (=> .cse15 .cse1)))) (cong (and .cse75 .cse42) (and .cse13 .cse2)))))) (res .cse62 .cse63 (cong (=> P .cse41) (=> P .cse22)))))) (res (= .cse83 .cse23) (res .cse65 .cse66 (res (= .cse84 .cse25) (res (= .cse85 (- 7)) (let ((.cse86 (* (- 1) 7))) (res (= .cse86 (- 7)) (poly* .cse86 (- 7)) (res .cse55 .cse56 (let ((.cse87 (+ 0 .cse86)) (.cse88 (+ 0 (- 7)))) (res (= .cse87 .cse88) (cong (+ 0 .cse86) (+ 0 (- 7))) (res (= .cse85 .cse87) (-def 0 7) (res (= .cse88 (- 7)) (poly+ .cse88 (- 7)) (trans .cse85 .cse87 .cse88 (- 7))))))))) (res .cse81 .cse82 (cong (= .cse21 .cse85) (= .cse21 (- 7))))) (cong (=> .cse84 .cse6) (=> .cse25 .cse6)))) (cong (and .cse83 .cse40) (and .cse23 .cse7)))))) (res (= .cse89 .cse89) (refl .cse89) (cong (=> .cse89 .cse39) (=> .cse89 .cse31)))) (res (= .cse90 .cse90) (refl .cse90) (cong (=> .cse90 .cse38) (=> .cse90 .cse32)))) (cong (not .cse34) (not .cse33))) (=-2 .cse37)))) (not- .cse35))) (res .cse36 (assume .cse36) (not- .cse36)))))))))))))))))))))))))) :proves (- .cse23 - .cse7) :input)))) :proves (- .cse7) :rup))) (let-proof ((.cse3 (! (res .cse7 (res .cse13 (! (let ((.cse14 (= (- 6) .cse21))) (let ((.cse16 (= .cse15 .cse14))) (let-proof ((.cse17 (res .cse14 (res .cse15 (=+1 .cse16) (symm (- 6) .cse21)) (res .cse15 (symm .cse21 (- 6)) (=+2 .cse16))))) (res .cse14 (! (res .cse15 (=>+ 0 .cse13) (res .cse16 .cse17 (=-2 .cse16))) :proves (+ .cse13 + .cse14) :input) (! (let ((.cse19 (not .cse15))) (res .cse15 (let ((.cse18 (not .cse14))) (res .cse18 (res .cse19 (not+ .cse19) (let ((.cse20 (= .cse19 .cse18))) (res .cse20 (res .cse16 .cse17 (cong (not .cse15) (not .cse14))) (=-2 .cse20)))) (not- .cse18))) (res .cse19 (assume .cse19) (not- .cse19)))) :proves (- .cse14) :input))))) :proves (+ .cse13) :rup) (! (res .cse22 (and+ .cse22) (=>+ 1 .cse7)) :proves (- .cse2 - .cse13 + .cse7) :input)) .cse8) :proves (- .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res Q (! (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + Q) :input) .cse3) :proves (+ Q) :rup) (! (or+ 1 .cse1) :proves (+ .cse1 - Q) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (res .cse4 (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse0) :input) (! (res .cse5 (! (res .cse6 (! (res P (! (res .cse7 (! (=>+ 0 .cse7) :proves (+ .cse7 + P) :input) .cse8) :proves (+ P) :rup) (! (or+ 1 .cse6) :proves (+ .cse6 - P) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (res .cse9 (! (res .cse10 (and+ .cse10) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse4 - .cse5) :input) (! (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse9) :input) (! (res .cse12 (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse11) :input) (! (res .cse2 (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse12) :input) .cse3) :proves (- .cse12) :rup)) :proves (- .cse11) :rup)) :proves (- .cse9) :rup))) :proves (- .cse4) :rup)))))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_InvariantVerifiedUnder0.bpl.mod.smt2:139:10: Logical context not inconsistent!")
unsat
(! (let ((.cse58 (ControlFlow 0 2))) (let ((.cse49 (= .cse58 (- 1))) (.cse1 (or A Q))) (let ((.cse0 (=> .cse49 .cse1)) (.cse65 (= .cse58 (- 3))) (.cse6 (or A P))) (let ((.cse5 (=> .cse65 .cse6)) (.cse4 (=> P .cse0))) (let ((.cse70 (and Q (= (ControlFlow 0 4) 2))) (.cse9 (and .cse5 .cse4))) (let ((.cse8 (=> .cse70 .cse9)) (.cse20 (ControlFlow 0 5))) (let ((.cse71 (= .cse20 4)) (.cse10 (=> P .cse8))) (let ((.cse11 (=> .cse71 .cse10)) (.cse14 (= .cse20 (- 6)))) (let ((.cse12 (=> .cse14 .cse1)) (.cse2 (=> Q .cse11))) (let ((.cse29 (not A)) (.cse22 (and .cse12 .cse2)) (.cse82 (= .cse20 (- 7)))) (let ((.cse23 (=> .cse82 .cse6)) (.cse21 (=> P .cse22)) (.cse27 (=> .cse29 P))) (let ((.cse28 (and .cse27 (= (ControlFlow 0 8) 5))) (.cse24 (and .cse23 .cse21))) (let ((.cse25 (=> .cse28 .cse24))) (let-proof ((.cse26 (let ((.cse87 (= (ControlFlow 0 0) 8))) (let ((.cse30 (=> .cse87 .cse25))) (res .cse30 (=>+ 1 .cse30) (let ((.cse50 (- 0 1))) (let ((.cse66 (- 0 3)) (.cse48 (= .cse58 .cse50))) (let ((.cse45 (=> .cse48 .cse1)) (.cse64 (= .cse58 .cse66))) (let ((.cse61 (=> .cse64 .cse6)) (.cse44 (=> P .cse45))) (let ((.cse43 (and .cse61 .cse44))) (let ((.cse42 (=> .cse70 .cse43))) (let ((.cse74 (- 0 6)) (.cse41 (=> P .cse42))) (let ((.cse40 (=> .cse71 .cse41)) (.cse73 (= .cse20 .cse74))) (let ((.cse83 (- 0 7)) (.cse72 (=> .cse73 .cse1)) (.cse39 (=> Q .cse40))) (let ((.cse38 (and .cse72 .cse39)) (.cse81 (= .cse20 .cse83))) (let ((.cse80 (=> .cse81 .cse6)) (.cse37 (=> P .cse38))) (let ((.cse36 (and .cse80 .cse37))) (let ((.cse35 (=> .cse28 .cse36))) (let ((.cse31 (=> .cse87 .cse35))) (let ((.cse33 (not .cse31))) (res .cse31 (let ((.cse32 (not .cse30))) (res .cse32 (res .cse33 (not+ .cse33) (let ((.cse34 (= .cse33 .cse32))) (res .cse34 (res (= .cse31 .cse30) (res (= .cse35 .cse25) (res (= .cse36 .cse24) (let ((.cse62 (= .cse6 .cse6)) (.cse52 (= 0 0)) (.cse78 (= .cse20 .cse20))) (let-proof ((.cse63 (refl .cse6)) (.cse53 (refl 0)) (.cse79 (refl .cse20))) (res (= .cse37 .cse21) (let ((.cse59 (= P P))) (let-proof ((.cse60 (refl P))) (res (= .cse38 .cse22) (let ((.cse46 (= .cse1 .cse1))) (let-proof ((.cse47 (refl .cse1))) (res (= .cse39 .cse2) (res (= .cse40 .cse11) (res (= .cse41 .cse10) (res (= .cse42 .cse8) (res (= .cse43 .cse9) (let ((.cse56 (= .cse58 .cse58))) (let-proof ((.cse57 (refl .cse58))) (res (= .cse44 .cse4) (res (= .cse45 .cse0) (res .cse46 .cse47 (res (= .cse48 .cse49) (res (= .cse50 (- 1)) (let ((.cse51 (* (- 1) 1))) (res (= .cse51 (- 1)) (poly* .cse51 (- 1)) (res .cse52 .cse53 (let ((.cse54 (+ 0 .cse51)) (.cse55 (+ 0 (- 1)))) (res (= .cse54 .cse55) (cong (+ 0 .cse51) (+ 0 (- 1))) (res (= .cse50 .cse54) (-def 0 1) (res (= .cse55 (- 1)) (poly+ .cse55 (- 1)) (trans .cse50 .cse54 .cse55 (- 1))))))))) (res .cse56 .cse57 (cong (= .cse58 .cse50) (= .cse58 (- 1))))) (cong (=> .cse48 .cse1) (=> .cse49 .cse1)))) (res .cse59 .cse60 (cong (=> P .cse45) (=> P .cse0)))) (res (= .cse61 .cse5) (res .cse62 .cse63 (res (= .cse64 .cse65) (res (= .cse66 (- 3)) (let ((.cse67 (* (- 1) 3))) (res (= .cse67 (- 3)) (poly* .cse67 (- 3)) (res .cse52 .cse53 (let ((.cse68 (+ 0 .cse67)) (.cse69 (+ 0 (- 3)))) (res (= .cse68 .cse69) (cong (+ 0 .cse67) (+ 0 (- 3))) (res (= .cse66 .cse68) (-def 0 3) (res (= .cse69 (- 3)) (poly+ .cse69 (- 3)) (trans .cse66 .cse68 .cse69 (- 3))))))))) (res .cse56 .cse57 (cong (= .cse58 .cse66) (= .cse58 (- 3))))) (cong (=> .cse64 .cse6) (=> .cse65 .cse6)))) (cong (and .cse61 .cse44) (and .cse5 .cse4)))))) (res (= .cse70 .cse70) (refl .cse70) (cong (=> .cse70 .cse43) (=> .cse70 .cse9)))) (res .cse59 .cse60 (cong (=> P .cse42) (=> P .cse8)))) (res (= .cse71 .cse71) (refl .cse71) (cong (=> .cse71 .cse41) (=> .cse71 .cse10)))) (res (= Q Q) (refl Q) (cong (=> Q .cse40) (=> Q .cse11)))) (res (= .cse72 .cse12) (res .cse46 .cse47 (res (= .cse73 .cse14) (res (= .cse74 (- 6)) (let ((.cse75 (* (- 1) 6))) (res (= .cse75 (- 6)) (poly* .cse75 (- 6)) (res .cse52 .cse53 (let ((.cse76 (+ 0 .cse75)) (.cse77 (+ 0 (- 6)))) (res (= .cse76 .cse77) (cong (+ 0 .cse75) (+ 0 (- 6))) (res (= .cse74 .cse76) (-def 0 6) (res (= .cse77 (- 6)) (poly+ .cse77 (- 6)) (trans .cse74 .cse76 .cse77 (- 6))))))))) (res .cse78 .cse79 (cong (= .cse20 .cse74) (= .cse20 (- 6))))) (cong (=> .cse73 .cse1) (=> .cse14 .cse1)))) (cong (and .cse72 .cse39) (and .cse12 .cse2)))))) (res .cse59 .cse60 (cong (=> P .cse38) (=> P .cse22)))))) (res (= .cse80 .cse23) (res .cse62 .cse63 (res (= .cse81 .cse82) (res (= .cse83 (- 7)) (let ((.cse84 (* (- 1) 7))) (res (= .cse84 (- 7)) (poly* .cse84 (- 7)) (res .cse52 .cse53 (let ((.cse85 (+ 0 .cse84)) (.cse86 (+ 0 (- 7)))) (res (= .cse85 .cse86) (cong (+ 0 .cse84) (+ 0 (- 7))) (res (= .cse83 .cse85) (-def 0 7) (res (= .cse86 (- 7)) (poly+ .cse86 (- 7)) (trans .cse83 .cse85 .cse86 (- 7))))))))) (res .cse78 .cse79 (cong (= .cse20 .cse83) (= .cse20 (- 7))))) (cong (=> .cse81 .cse6) (=> .cse82 .cse6)))) (cong (and .cse80 .cse37) (and .cse23 .cse21)))))) (res (= .cse28 .cse28) (refl .cse28) (cong (=> .cse28 .cse36) (=> .cse28 .cse24)))) (res (= .cse87 .cse87) (refl .cse87) (cong (=> .cse87 .cse35) (=> .cse87 .cse25)))) (cong (not .cse31) (not .cse30))) (=-2 .cse34)))) (not- .cse32))) (res .cse33 (assume .cse33) (not- .cse33))))))))))))))))))))))) (let-proof ((.cse7 (! (res P (res A (! (res .cse27 (res .cse28 (res .cse25 (=>+ 0 .cse25) .cse26) (and- 0 .cse28)) (res .cse29 (not+ .cse29) (=>- .cse27))) :proves (+ A + P) :input) (! (or+ 0 .cse6) :proves (+ .cse6 - A) :input)) (! (or+ 1 .cse6) :proves (+ .cse6 - P) :input)) :proves (+ .cse6) :rup))) (let-proof ((.cse3 (! (res .cse12 (! (let ((.cse13 (= (- 6) .cse20))) (let ((.cse15 (= .cse14 .cse13))) (let-proof ((.cse16 (res .cse13 (res .cse14 (=+1 .cse15) (symm (- 6) .cse20)) (res .cse14 (symm .cse20 (- 6)) (=+2 .cse15))))) (res .cse13 (! (res .cse14 (=>+ 0 .cse12) (res .cse15 .cse16 (=-2 .cse15))) :proves (+ .cse12 + .cse13) :input) (! (let ((.cse18 (not .cse14))) (res .cse14 (let ((.cse17 (not .cse13))) (res .cse17 (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (res .cse15 .cse16 (cong (not .cse14) (not .cse13))) (=-2 .cse19)))) (not- .cse17))) (res .cse18 (assume .cse18) (not- .cse18)))) :proves (- .cse13) :input))))) :proves (+ .cse12) :rup) (res .cse21 (! (res .cse22 (and+ .cse22) (=>+ 1 .cse21)) :proves (- .cse2 + .cse21 - .cse12) :input) (! (res .cse23 (! (res .cse6 .cse7 (! (=>+ 1 .cse23) :proves (+ .cse23 - .cse6) :input)) :proves (+ .cse23) :rup) (! (res .cse24 (and+ .cse24) (res .cse25 (=>+ 1 .cse25) .cse26)) :proves (- .cse23 - .cse21) :input)) :proves (- .cse21) :rup))) :proves (- .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res Q (! (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + Q) :input) .cse3) :proves (+ Q) :rup) (! (or+ 1 .cse1) :proves (+ .cse1 - Q) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (res .cse4 (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse0) :input) (! (res .cse5 (! (res .cse6 .cse7 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (res .cse8 (! (res .cse9 (and+ .cse9) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse4 - .cse5) :input) (! (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse8) :input) (! (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse10) :input) (! (res .cse2 (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse11) :input) .cse3) :proves (- .cse11) :rup)) :proves (- .cse10) :rup)) :proves (- .cse8) :rup))) :proves (- .cse4) :rup))))))))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_InvariantVerifiedUnder0.bpl.mod.smt2:179:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_InvariantVerifiedUnder0.bpl.mod.smt2:182:10: Logical context not inconsistent!")
unsat
(! (let ((.cse61 (ControlFlow 0 2))) (let ((.cse52 (= .cse61 (- 1))) (.cse1 (or A Q))) (let ((.cse0 (=> .cse52 .cse1)) (.cse68 (= .cse61 (- 3))) (.cse6 (or A P))) (let ((.cse5 (=> .cse68 .cse6)) (.cse4 (=> P .cse0))) (let ((.cse73 (and Q (= (ControlFlow 0 4) 2))) (.cse10 (and .cse5 .cse4))) (let ((.cse9 (=> .cse73 .cse10)) (.cse21 (ControlFlow 0 5))) (let ((.cse74 (= .cse21 4)) (.cse11 (=> P .cse9))) (let ((.cse12 (=> .cse74 .cse11)) (.cse15 (= .cse21 (- 6)))) (let ((.cse13 (=> .cse15 .cse1)) (.cse2 (=> Q .cse12))) (let ((.cse22 (and .cse13 .cse2))) (let ((.cse7 (=> P .cse22))) (let-proof ((.cse8 (! (let ((.cse25 (= .cse21 (- 7)))) (let ((.cse23 (=> .cse25 .cse6))) (res .cse23 (! (let ((.cse24 (= (- 7) .cse21))) (let ((.cse26 (= .cse25 .cse24))) (let-proof ((.cse27 (res .cse24 (res .cse25 (=+1 .cse26) (symm (- 7) .cse21)) (res .cse25 (symm .cse21 (- 7)) (=+2 .cse26))))) (res .cse24 (! (res .cse25 (=>+ 0 .cse23) (res .cse26 .cse27 (=-2 .cse26))) :proves (+ .cse23 + .cse24) :input) (! (let ((.cse29 (not .cse25))) (res .cse25 (let ((.cse28 (not .cse24))) (res .cse28 (res .cse29 (not+ .cse29) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (res .cse26 .cse27 (cong (not .cse25) (not .cse24))) (=-2 .cse30)))) (not- .cse28))) (res .cse29 (assume .cse29) (not- .cse29)))) :proves (- .cse24) :input))))) :proves (+ .cse23) :rup) (! (let ((.cse31 (and .cse23 .cse7))) (res .cse31 (and+ .cse31) (let ((.cse89 (= (ControlFlow 0 8) 5))) (let ((.cse32 (=> .cse89 .cse31))) (res .cse32 (=>+ 1 .cse32) (let ((.cse90 (= (ControlFlow 0 0) 8))) (let ((.cse33 (=> .cse90 .cse32))) (res .cse33 (=>+ 1 .cse33) (let ((.cse53 (- 0 1))) (let ((.cse69 (- 0 3)) (.cse51 (= .cse61 .cse53))) (let ((.cse48 (=> .cse51 .cse1)) (.cse67 (= .cse61 .cse69))) (let ((.cse64 (=> .cse67 .cse6)) (.cse47 (=> P .cse48))) (let ((.cse46 (and .cse64 .cse47))) (let ((.cse45 (=> .cse73 .cse46))) (let ((.cse77 (- 0 6)) (.cse44 (=> P .cse45))) (let ((.cse43 (=> .cse74 .cse44)) (.cse76 (= .cse21 .cse77))) (let ((.cse85 (- 0 7)) (.cse75 (=> .cse76 .cse1)) (.cse42 (=> Q .cse43))) (let ((.cse41 (and .cse75 .cse42)) (.cse84 (= .cse21 .cse85))) (let ((.cse83 (=> .cse84 .cse6)) (.cse40 (=> P .cse41))) (let ((.cse39 (and .cse83 .cse40))) (let ((.cse38 (=> .cse89 .cse39))) (let ((.cse34 (=> .cse90 .cse38))) (let ((.cse36 (not .cse34))) (res .cse34 (let ((.cse35 (not .cse33))) (res .cse35 (res .cse36 (not+ .cse36) (let ((.cse37 (= .cse36 .cse35))) (res .cse37 (res (= .cse34 .cse33) (res (= .cse38 .cse32) (res (= .cse39 .cse31) (let ((.cse65 (= .cse6 .cse6)) (.cse55 (= 0 0)) (.cse81 (= .cse21 .cse21))) (let-proof ((.cse66 (refl .cse6)) (.cse56 (refl 0)) (.cse82 (refl .cse21))) (res (= .cse40 .cse7) (let ((.cse62 (= P P))) (let-proof ((.cse63 (refl P))) (res (= .cse41 .cse22) (let ((.cse49 (= .cse1 .cse1))) (let-proof ((.cse50 (refl .cse1))) (res (= .cse42 .cse2) (res (= .cse43 .cse12) (res (= .cse44 .cse11) (res (= .cse45 .cse9) (res (= .cse46 .cse10) (let ((.cse59 (= .cse61 .cse61))) (let-proof ((.cse60 (refl .cse61))) (res (= .cse47 .cse4) (res (= .cse48 .cse0) (res .cse49 .cse50 (res (= .cse51 .cse52) (res (= .cse53 (- 1)) (let ((.cse54 (* (- 1) 1))) (res (= .cse54 (- 1)) (poly* .cse54 (- 1)) (res .cse55 .cse56 (let ((.cse57 (+ 0 .cse54)) (.cse58 (+ 0 (- 1)))) (res (= .cse57 .cse58) (cong (+ 0 .cse54) (+ 0 (- 1))) (res (= .cse53 .cse57) (-def 0 1) (res (= .cse58 (- 1)) (poly+ .cse58 (- 1)) (trans .cse53 .cse57 .cse58 (- 1))))))))) (res .cse59 .cse60 (cong (= .cse61 .cse53) (= .cse61 (- 1))))) (cong (=> .cse51 .cse1) (=> .cse52 .cse1)))) (res .cse62 .cse63 (cong (=> P .cse48) (=> P .cse0)))) (res (= .cse64 .cse5) (res .cse65 .cse66 (res (= .cse67 .cse68) (res (= .cse69 (- 3)) (let ((.cse70 (* (- 1) 3))) (res (= .cse70 (- 3)) (poly* .cse70 (- 3)) (res .cse55 .cse56 (let ((.cse71 (+ 0 .cse70)) (.cse72 (+ 0 (- 3)))) (res (= .cse71 .cse72) (cong (+ 0 .cse70) (+ 0 (- 3))) (res (= .cse69 .cse71) (-def 0 3) (res (= .cse72 (- 3)) (poly+ .cse72 (- 3)) (trans .cse69 .cse71 .cse72 (- 3))))))))) (res .cse59 .cse60 (cong (= .cse61 .cse69) (= .cse61 (- 3))))) (cong (=> .cse67 .cse6) (=> .cse68 .cse6)))) (cong (and .cse64 .cse47) (and .cse5 .cse4)))))) (res (= .cse73 .cse73) (refl .cse73) (cong (=> .cse73 .cse46) (=> .cse73 .cse10)))) (res .cse62 .cse63 (cong (=> P .cse45) (=> P .cse9)))) (res (= .cse74 .cse74) (refl .cse74) (cong (=> .cse74 .cse44) (=> .cse74 .cse11)))) (res (= Q Q) (refl Q) (cong (=> Q .cse43) (=> Q .cse12)))) (res (= .cse75 .cse13) (res .cse49 .cse50 (res (= .cse76 .cse15) (res (= .cse77 (- 6)) (let ((.cse78 (* (- 1) 6))) (res (= .cse78 (- 6)) (poly* .cse78 (- 6)) (res .cse55 .cse56 (let ((.cse79 (+ 0 .cse78)) (.cse80 (+ 0 (- 6)))) (res (= .cse79 .cse80) (cong (+ 0 .cse78) (+ 0 (- 6))) (res (= .cse77 .cse79) (-def 0 6) (res (= .cse80 (- 6)) (poly+ .cse80 (- 6)) (trans .cse77 .cse79 .cse80 (- 6))))))))) (res .cse81 .cse82 (cong (= .cse21 .cse77) (= .cse21 (- 6))))) (cong (=> .cse76 .cse1) (=> .cse15 .cse1)))) (cong (and .cse75 .cse42) (and .cse13 .cse2)))))) (res .cse62 .cse63 (cong (=> P .cse41) (=> P .cse22)))))) (res (= .cse83 .cse23) (res .cse65 .cse66 (res (= .cse84 .cse25) (res (= .cse85 (- 7)) (let ((.cse86 (* (- 1) 7))) (res (= .cse86 (- 7)) (poly* .cse86 (- 7)) (res .cse55 .cse56 (let ((.cse87 (+ 0 .cse86)) (.cse88 (+ 0 (- 7)))) (res (= .cse87 .cse88) (cong (+ 0 .cse86) (+ 0 (- 7))) (res (= .cse85 .cse87) (-def 0 7) (res (= .cse88 (- 7)) (poly+ .cse88 (- 7)) (trans .cse85 .cse87 .cse88 (- 7))))))))) (res .cse81 .cse82 (cong (= .cse21 .cse85) (= .cse21 (- 7))))) (cong (=> .cse84 .cse6) (=> .cse25 .cse6)))) (cong (and .cse83 .cse40) (and .cse23 .cse7)))))) (res (= .cse89 .cse89) (refl .cse89) (cong (=> .cse89 .cse39) (=> .cse89 .cse31)))) (res (= .cse90 .cse90) (refl .cse90) (cong (=> .cse90 .cse38) (=> .cse90 .cse32)))) (cong (not .cse34) (not .cse33))) (=-2 .cse37)))) (not- .cse35))) (res .cse36 (assume .cse36) (not- .cse36)))))))))))))))))))))))))) :proves (- .cse23 - .cse7) :input)))) :proves (- .cse7) :rup))) (let-proof ((.cse3 (! (res .cse7 (res .cse13 (! (let ((.cse14 (= (- 6) .cse21))) (let ((.cse16 (= .cse15 .cse14))) (let-proof ((.cse17 (res .cse14 (res .cse15 (=+1 .cse16) (symm (- 6) .cse21)) (res .cse15 (symm .cse21 (- 6)) (=+2 .cse16))))) (res .cse14 (! (res .cse15 (=>+ 0 .cse13) (res .cse16 .cse17 (=-2 .cse16))) :proves (+ .cse13 + .cse14) :input) (! (let ((.cse19 (not .cse15))) (res .cse15 (let ((.cse18 (not .cse14))) (res .cse18 (res .cse19 (not+ .cse19) (let ((.cse20 (= .cse19 .cse18))) (res .cse20 (res .cse16 .cse17 (cong (not .cse15) (not .cse14))) (=-2 .cse20)))) (not- .cse18))) (res .cse19 (assume .cse19) (not- .cse19)))) :proves (- .cse14) :input))))) :proves (+ .cse13) :rup) (! (res .cse22 (and+ .cse22) (=>+ 1 .cse7)) :proves (- .cse2 - .cse13 + .cse7) :input)) .cse8) :proves (- .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res Q (! (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + Q) :input) .cse3) :proves (+ Q) :rup) (! (or+ 1 .cse1) :proves (+ .cse1 - Q) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (res .cse4 (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse0) :input) (! (res .cse5 (! (res .cse6 (! (res P (! (res .cse7 (! (=>+ 0 .cse7) :proves (+ .cse7 + P) :input) .cse8) :proves (+ P) :rup) (! (or+ 1 .cse6) :proves (+ .cse6 - P) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (res .cse9 (! (res .cse10 (and+ .cse10) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse4 - .cse5) :input) (! (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse9) :input) (! (res .cse12 (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse11) :input) (! (res .cse2 (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse12) :input) .cse3) :proves (- .cse12) :rup)) :proves (- .cse11) :rup)) :proves (- .cse9) :rup))) :proves (- .cse4) :rup)))))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_InvariantVerifiedUnder0.bpl.mod.smt2:222:10: Logical context not inconsistent!")
unsat
(! (let ((.cse77 (ControlFlow 0 5))) (let ((.cse2 (= .cse77 (- 7))) (.cse0 (= (- 7) .cse77))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 7) .cse77)) (res .cse2 (symm .cse77 (- 7)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse6 (or A P))) (let ((.cse1 (=> .cse2 .cse6))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse54 (ControlFlow 0 2))) (let ((.cse45 (= .cse54 (- 1))) (.cse8 (or A Q))) (let ((.cse11 (=> .cse45 .cse8)) (.cse61 (= .cse54 (- 3)))) (let ((.cse12 (=> .cse61 .cse6)) (.cse10 (=> P .cse11))) (let ((.cse66 (and Q (= (ControlFlow 0 4) 2))) (.cse14 (and .cse12 .cse10))) (let ((.cse13 (=> .cse66 .cse14))) (let ((.cse67 (= .cse77 4)) (.cse15 (=> P .cse13))) (let ((.cse17 (=> .cse67 .cse15)) (.cse70 (= .cse77 (- 6)))) (let ((.cse7 (=> .cse70 .cse8)) (.cse16 (=> Q .cse17))) (let ((.cse24 (not A)) (.cse18 (and .cse7 .cse16))) (let ((.cse5 (=> P .cse18)) (.cse20 (=> .cse24 Q))) (let ((.cse21 (and .cse20 (= (ControlFlow 0 8) 5))) (.cse25 (and .cse1 .cse5))) (let ((.cse22 (=> .cse21 .cse25))) (let-proof ((.cse23 (let ((.cse84 (= (ControlFlow 0 0) 8))) (let ((.cse26 (=> .cse84 .cse22))) (res .cse26 (=>+ 1 .cse26) (let ((.cse46 (- 0 1))) (let ((.cse62 (- 0 3)) (.cse44 (= .cse54 .cse46))) (let ((.cse41 (=> .cse44 .cse8)) (.cse60 (= .cse54 .cse62))) (let ((.cse57 (=> .cse60 .cse6)) (.cse40 (=> P .cse41))) (let ((.cse39 (and .cse57 .cse40))) (let ((.cse38 (=> .cse66 .cse39))) (let ((.cse71 (- 0 6)) (.cse37 (=> P .cse38))) (let ((.cse36 (=> .cse67 .cse37)) (.cse69 (= .cse77 .cse71))) (let ((.cse80 (- 0 7)) (.cse68 (=> .cse69 .cse8)) (.cse35 (=> Q .cse36))) (let ((.cse34 (and .cse68 .cse35)) (.cse79 (= .cse77 .cse80))) (let ((.cse78 (=> .cse79 .cse6)) (.cse33 (=> P .cse34))) (let ((.cse32 (and .cse78 .cse33))) (let ((.cse31 (=> .cse21 .cse32))) (let ((.cse27 (=> .cse84 .cse31))) (let ((.cse29 (not .cse27))) (res .cse27 (let ((.cse28 (not .cse26))) (res .cse28 (res .cse29 (not+ .cse29) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (res (= .cse27 .cse26) (res (= .cse31 .cse22) (res (= .cse32 .cse25) (let ((.cse58 (= .cse6 .cse6)) (.cse48 (= 0 0)) (.cse75 (= .cse77 .cse77))) (let-proof ((.cse59 (refl .cse6)) (.cse49 (refl 0)) (.cse76 (refl .cse77))) (res (= .cse33 .cse5) (let ((.cse55 (= P P))) (let-proof ((.cse56 (refl P))) (res (= .cse34 .cse18) (let ((.cse42 (= .cse8 .cse8))) (let-proof ((.cse43 (refl .cse8))) (res (= .cse35 .cse16) (res (= .cse36 .cse17) (res (= .cse37 .cse15) (res (= .cse38 .cse13) (res (= .cse39 .cse14) (let ((.cse52 (= .cse54 .cse54))) (let-proof ((.cse53 (refl .cse54))) (res (= .cse40 .cse10) (res (= .cse41 .cse11) (res .cse42 .cse43 (res (= .cse44 .cse45) (res (= .cse46 (- 1)) (let ((.cse47 (* (- 1) 1))) (res (= .cse47 (- 1)) (poly* .cse47 (- 1)) (res .cse48 .cse49 (let ((.cse50 (+ 0 .cse47)) (.cse51 (+ 0 (- 1)))) (res (= .cse50 .cse51) (cong (+ 0 .cse47) (+ 0 (- 1))) (res (= .cse46 .cse50) (-def 0 1) (res (= .cse51 (- 1)) (poly+ .cse51 (- 1)) (trans .cse46 .cse50 .cse51 (- 1))))))))) (res .cse52 .cse53 (cong (= .cse54 .cse46) (= .cse54 (- 1))))) (cong (=> .cse44 .cse8) (=> .cse45 .cse8)))) (res .cse55 .cse56 (cong (=> P .cse41) (=> P .cse11)))) (res (= .cse57 .cse12) (res .cse58 .cse59 (res (= .cse60 .cse61) (res (= .cse62 (- 3)) (let ((.cse63 (* (- 1) 3))) (res (= .cse63 (- 3)) (poly* .cse63 (- 3)) (res .cse48 .cse49 (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 3)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 3))) (res (= .cse62 .cse64) (-def 0 3) (res (= .cse65 (- 3)) (poly+ .cse65 (- 3)) (trans .cse62 .cse64 .cse65 (- 3))))))))) (res .cse52 .cse53 (cong (= .cse54 .cse62) (= .cse54 (- 3))))) (cong (=> .cse60 .cse6) (=> .cse61 .cse6)))) (cong (and .cse57 .cse40) (and .cse12 .cse10)))))) (res (= .cse66 .cse66) (refl .cse66) (cong (=> .cse66 .cse39) (=> .cse66 .cse14)))) (res .cse55 .cse56 (cong (=> P .cse38) (=> P .cse13)))) (res (= .cse67 .cse67) (refl .cse67) (cong (=> .cse67 .cse37) (=> .cse67 .cse15)))) (res (= Q Q) (refl Q) (cong (=> Q .cse36) (=> Q .cse17)))) (res (= .cse68 .cse7) (res .cse42 .cse43 (res (= .cse69 .cse70) (res (= .cse71 (- 6)) (let ((.cse72 (* (- 1) 6))) (res (= .cse72 (- 6)) (poly* .cse72 (- 6)) (res .cse48 .cse49 (let ((.cse73 (+ 0 .cse72)) (.cse74 (+ 0 (- 6)))) (res (= .cse73 .cse74) (cong (+ 0 .cse72) (+ 0 (- 6))) (res (= .cse71 .cse73) (-def 0 6) (res (= .cse74 (- 6)) (poly+ .cse74 (- 6)) (trans .cse71 .cse73 .cse74 (- 6))))))))) (res .cse75 .cse76 (cong (= .cse77 .cse71) (= .cse77 (- 6))))) (cong (=> .cse69 .cse8) (=> .cse70 .cse8)))) (cong (and .cse68 .cse35) (and .cse7 .cse16)))))) (res .cse55 .cse56 (cong (=> P .cse34) (=> P .cse18)))))) (res (= .cse78 .cse1) (res .cse58 .cse59 (res (= .cse79 .cse2) (res (= .cse80 (- 7)) (let ((.cse81 (* (- 1) 7))) (res (= .cse81 (- 7)) (poly* .cse81 (- 7)) (res .cse48 .cse49 (let ((.cse82 (+ 0 .cse81)) (.cse83 (+ 0 (- 7)))) (res (= .cse82 .cse83) (cong (+ 0 .cse81) (+ 0 (- 7))) (res (= .cse80 .cse82) (-def 0 7) (res (= .cse83 (- 7)) (poly+ .cse83 (- 7)) (trans .cse80 .cse82 .cse83 (- 7))))))))) (res .cse75 .cse76 (cong (= .cse77 .cse80) (= .cse77 (- 7))))) (cong (=> .cse79 .cse6) (=> .cse2 .cse6)))) (cong (and .cse78 .cse33) (and .cse1 .cse5)))))) (res (= .cse21 .cse21) (refl .cse21) (cong (=> .cse21 .cse32) (=> .cse21 .cse25)))) (res (= .cse84 .cse84) (refl .cse84) (cong (=> .cse84 .cse31) (=> .cse84 .cse22)))) (cong (not .cse27) (not .cse26))) (=-2 .cse30)))) (not- .cse28))) (res .cse29 (assume .cse29) (not- .cse29))))))))))))))))))))))) (let-proof ((.cse19 (! (res .cse25 (and+ .cse25) (res .cse22 (=>+ 1 .cse22) .cse23)) :proves (- .cse1 - .cse5) :input))) (res .cse5 (! (res P (! (=>+ 0 .cse5) :proves (+ .cse5 + P) :input) (! (res .cse6 (! (or+ 1 .cse6) :proves (+ .cse6 - P) :input) (! (let-proof ((.cse9 (! (res Q (res A (! (res .cse20 (res .cse21 (res .cse22 (=>+ 0 .cse22) .cse23) (and- 0 .cse21)) (res .cse24 (not+ .cse24) (=>- .cse20))) :proves (+ A + Q) :input) (! (or+ 0 .cse8) :proves (+ .cse8 - A) :input)) (! (or+ 1 .cse8) :proves (+ .cse8 - Q) :input)) :proves (+ .cse8) :rup))) (res .cse7 (! (res .cse8 .cse9 (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse8) :input)) :proves (+ .cse7) :rup) (res .cse10 (! (res .cse11 (! (res .cse8 .cse9 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse8) :input)) :proves (+ .cse11) :rup) (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse11) :input)) :proves (+ .cse10) :rup) (res .cse12 (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse6) :input) (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse6) :input) (res .cse13 (! (res .cse14 (and+ .cse14) (=>+ 1 .cse13)) :proves (+ .cse13 - .cse12 - .cse10) :input) (res .cse5 (res .cse15 (! (=>+ 1 .cse15) :proves (+ .cse15 - .cse13) :input) (res .cse16 (res .cse17 (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse15) :input) (! (=>+ 1 .cse16) :proves (+ .cse16 - .cse17) :input)) (! (res .cse18 (and+ .cse18) (=>+ 1 .cse5)) :proves (- .cse16 + .cse5 - .cse7) :input))) .cse19))))))) :proves (- .cse6) :rup)) :proves (- P) :rup)) :proves (+ .cse5) :rup) .cse19)))))))))))))))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse86 (not .cse2))) (res .cse2 (let ((.cse85 (not .cse0))) (res .cse85 (res .cse86 (not+ .cse86) (let ((.cse87 (= .cse86 .cse85))) (res .cse87 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse87)))) (not- .cse85))) (res .cse86 (assume .cse86) (not- .cse86)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
