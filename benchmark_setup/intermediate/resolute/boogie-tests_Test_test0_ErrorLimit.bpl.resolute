success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test0_ErrorLimit.bpl.mod.smt2:29:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test0_ErrorLimit.bpl.mod.smt2:32:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test0_ErrorLimit.bpl.mod.smt2:35:10: Logical context not inconsistent!")
unsat
(! (let ((.cse15 (ControlFlow 0 2))) (let ((.cse2 (= .cse15 (- 1))) (.cse0 (= (- 1) .cse15))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse15)) (res .cse2 (symm .cse15 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse38 (= x2 3))) (let ((.cse1 (=> .cse2 .cse38))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse50 (= x1 2))) (let ((.cse5 (=> .cse50 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse9 (= .cse15 (- 3)))) (let ((.cse7 (=> .cse9 .cse50))) (let ((.cse59 (= x0 1)) (.cse16 (and .cse7 .cse5))) (let ((.cse6 (=> .cse59 .cse16))) (res .cse6 (res .cse7 (! (let ((.cse8 (= (- 3) .cse15))) (let ((.cse10 (= .cse9 .cse8))) (let-proof ((.cse11 (res .cse8 (res .cse9 (=+1 .cse10) (symm (- 3) .cse15)) (res .cse9 (symm .cse15 (- 3)) (=+2 .cse10))))) (res .cse8 (! (res .cse9 (=>+ 0 .cse7) (res .cse10 .cse11 (=-2 .cse10))) :proves (+ .cse7 + .cse8) :input) (! (let ((.cse13 (not .cse9))) (res .cse9 (let ((.cse12 (not .cse8))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res .cse10 .cse11 (cong (not .cse9) (not .cse8))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13)))) :proves (- .cse8) :input))))) :proves (+ .cse7) :rup) (! (res .cse16 (and+ .cse16) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) (! (let ((.cse19 (= .cse15 (- 4)))) (let ((.cse17 (=> .cse19 .cse59))) (res .cse17 (! (let ((.cse18 (= (- 4) .cse15))) (let ((.cse20 (= .cse19 .cse18))) (let-proof ((.cse21 (res .cse18 (res .cse19 (=+1 .cse20) (symm (- 4) .cse15)) (res .cse19 (symm .cse15 (- 4)) (=+2 .cse20))))) (res .cse18 (! (res .cse19 (=>+ 0 .cse17) (res .cse20 .cse21 (=-2 .cse20))) :proves (+ .cse17 + .cse18) :input) (! (let ((.cse23 (not .cse19))) (res .cse19 (let ((.cse22 (not .cse18))) (res .cse22 (res .cse23 (not+ .cse23) (let ((.cse24 (= .cse23 .cse22))) (res .cse24 (res .cse20 .cse21 (cong (not .cse19) (not .cse18))) (=-2 .cse24)))) (not- .cse22))) (res .cse23 (assume .cse23) (not- .cse23)))) :proves (- .cse18) :input))))) :proves (+ .cse17) :rup) (! (let ((.cse25 (and .cse17 .cse6))) (res .cse25 (and+ .cse25) (let ((.cse66 (= (ControlFlow 0 5) 2))) (let ((.cse26 (=> .cse66 .cse25))) (res .cse26 (=>+ 1 .cse26) (let ((.cse67 (= (ControlFlow 0 0) 5))) (let ((.cse27 (=> .cse67 .cse26))) (res .cse27 (=>+ 1 .cse27) (let ((.cse40 (- 0 1))) (let ((.cse53 (- 0 3)) (.cse39 (= .cse15 .cse40))) (let ((.cse37 (=> .cse39 .cse38)) (.cse52 (= .cse15 .cse53))) (let ((.cse62 (- 0 4)) (.cse51 (=> .cse52 .cse50)) (.cse36 (=> .cse50 .cse37))) (let ((.cse35 (and .cse51 .cse36)) (.cse61 (= .cse15 .cse62))) (let ((.cse60 (=> .cse61 .cse59)) (.cse34 (=> .cse59 .cse35))) (let ((.cse33 (and .cse60 .cse34))) (let ((.cse32 (=> .cse66 .cse33))) (let ((.cse28 (=> .cse67 .cse32))) (let ((.cse30 (not .cse28))) (res .cse28 (let ((.cse29 (not .cse27))) (res .cse29 (res .cse30 (not+ .cse30) (let ((.cse31 (= .cse30 .cse29))) (res .cse31 (res (= .cse28 .cse27) (res (= .cse32 .cse26) (res (= .cse33 .cse25) (let ((.cse57 (= .cse59 .cse59)) (.cse42 (= 0 0)) (.cse46 (= .cse15 .cse15))) (let-proof ((.cse58 (refl .cse59)) (.cse43 (refl 0)) (.cse47 (refl .cse15))) (res (= .cse34 .cse6) (res (= .cse35 .cse16) (let ((.cse48 (= .cse50 .cse50))) (let-proof ((.cse49 (refl .cse50))) (res (= .cse36 .cse5) (res (= .cse37 .cse1) (res (= .cse38 .cse38) (refl .cse38) (res (= .cse39 .cse2) (res (= .cse40 (- 1)) (let ((.cse41 (* (- 1) 1))) (res (= .cse41 (- 1)) (poly* .cse41 (- 1)) (res .cse42 .cse43 (let ((.cse44 (+ 0 .cse41)) (.cse45 (+ 0 (- 1)))) (res (= .cse44 .cse45) (cong (+ 0 .cse41) (+ 0 (- 1))) (res (= .cse40 .cse44) (-def 0 1) (res (= .cse45 (- 1)) (poly+ .cse45 (- 1)) (trans .cse40 .cse44 .cse45 (- 1))))))))) (res .cse46 .cse47 (cong (= .cse15 .cse40) (= .cse15 (- 1))))) (cong (=> .cse39 .cse38) (=> .cse2 .cse38)))) (res .cse48 .cse49 (cong (=> .cse50 .cse37) (=> .cse50 .cse1)))) (res (= .cse51 .cse7) (res .cse48 .cse49 (res (= .cse52 .cse9) (res (= .cse53 (- 3)) (let ((.cse54 (* (- 1) 3))) (res (= .cse54 (- 3)) (poly* .cse54 (- 3)) (res .cse42 .cse43 (let ((.cse55 (+ 0 .cse54)) (.cse56 (+ 0 (- 3)))) (res (= .cse55 .cse56) (cong (+ 0 .cse54) (+ 0 (- 3))) (res (= .cse53 .cse55) (-def 0 3) (res (= .cse56 (- 3)) (poly+ .cse56 (- 3)) (trans .cse53 .cse55 .cse56 (- 3))))))))) (res .cse46 .cse47 (cong (= .cse15 .cse53) (= .cse15 (- 3))))) (cong (=> .cse52 .cse50) (=> .cse9 .cse50)))) (cong (and .cse51 .cse36) (and .cse7 .cse5)))))) (res .cse57 .cse58 (cong (=> .cse59 .cse35) (=> .cse59 .cse16)))) (res (= .cse60 .cse17) (res .cse57 .cse58 (res (= .cse61 .cse19) (res (= .cse62 (- 4)) (let ((.cse63 (* (- 1) 4))) (res (= .cse63 (- 4)) (poly* .cse63 (- 4)) (res .cse42 .cse43 (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 4)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 4))) (res (= .cse62 .cse64) (-def 0 4) (res (= .cse65 (- 4)) (poly+ .cse65 (- 4)) (trans .cse62 .cse64 .cse65 (- 4))))))))) (res .cse46 .cse47 (cong (= .cse15 .cse62) (= .cse15 (- 4))))) (cong (=> .cse61 .cse59) (=> .cse19 .cse59)))) (cong (and .cse60 .cse34) (and .cse17 .cse6)))))) (res (= .cse66 .cse66) (refl .cse66) (cong (=> .cse66 .cse33) (=> .cse66 .cse25)))) (res (= .cse67 .cse67) (refl .cse67) (cong (=> .cse67 .cse32) (=> .cse67 .cse26)))) (cong (not .cse28) (not .cse27))) (=-2 .cse31)))) (not- .cse29))) (res .cse30 (assume .cse30) (not- .cse30))))))))))))))))))))) :proves (- .cse17 - .cse6) :input)))) :proves (- .cse6) :rup)))))) :proves (- .cse5) :rup)))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse69 (not .cse2))) (res .cse2 (let ((.cse68 (not .cse0))) (res .cse68 (res .cse69 (not+ .cse69) (let ((.cse70 (= .cse69 .cse68))) (res .cse70 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse70)))) (not- .cse68))) (res .cse69 (assume .cse69) (not- .cse69)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
