success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test21_FunAxioms2.bpl.mod.smt2:33:10: Logical context not inconsistent!")
unsat
(! (let ((.cse99 (ControlFlow 0 2))) (let ((.cse2 (= .cse99 (- 1))) (.cse0 (= (- 1) .cse99))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse99)) (res .cse2 (symm .cse99 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse66 (* (- 1) f))) (let ((.cse88 (+ .cse66 20))) (let ((.cse84 (<= .cse88 0))) (let ((.cse1 (=> .cse2 .cse84))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse7 (= g c))) (let ((.cse8 (not .cse7))) (let ((.cse5 (=> .cse8 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse104 (= .cse99 (- 3)))) (let ((.cse6 (=> .cse104 .cse8))) (res .cse6 (! (res .cse7 (! (res .cse8 (not+ .cse8) (=>+ 1 .cse6)) :proves (+ .cse6 + .cse7) :input) (! (res .cse8 (assume .cse8) (not- .cse8)) :proves (- .cse7) :input)) :proves (+ .cse6) :rup) (let ((.cse131 (+ .cse66 7)) (.cse52 (* (- 1) x@0))) (let ((.cse25 (<= .cse52 0)) (.cse14 (<= .cse131 0))) (let ((.cse36 (and .cse25 .cse14)) (.cse10 (and .cse6 .cse5))) (let ((.cse9 (=> .cse36 .cse10))) (res .cse9 (! (res .cse10 (and+ .cse10) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse5 - .cse6) :input) (! (let ((.cse114 (= .cse99 (- 4)))) (let ((.cse11 (=> .cse114 .cse36))) (let ((.cse39 (= x@0 f)) (.cse68 (and .cse11 .cse9))) (let ((.cse21 (< 0 .cse131)) (.cse32 (< 0 .cse52)) (.cse40 (=> .cse39 .cse68))) (let-proof ((.cse22 (total .cse131 0)) (.cse33 (total .cse52 0))) (let-proof ((.cse41 (let ((.cse129 (= (ControlFlow 0 5) 2))) (let ((.cse69 (=> .cse129 .cse40))) (res .cse69 (=>+ 1 .cse69) (let ((.cse130 (= (ControlFlow 0 0) 5))) (let ((.cse70 (=> .cse130 .cse69))) (res .cse70 (=>+ 1 .cse70) (let ((.cse91 (- 0 1))) (let ((.cse105 (- 0 3)) (.cse90 (= .cse99 .cse91)) (.cse85 (>= f 20))) (let ((.cse81 (=> .cse90 .cse85)) (.cse103 (= .cse99 .cse105))) (let ((.cse126 (>= x@0 0)) (.cse121 (>= f 7)) (.cse115 (- 0 4)) (.cse102 (=> .cse103 .cse8)) (.cse80 (=> .cse8 .cse81))) (let ((.cse79 (and .cse102 .cse80)) (.cse113 (= .cse99 .cse115)) (.cse111 (and .cse126 .cse121))) (let ((.cse112 (=> .cse113 .cse111)) (.cse78 (=> .cse111 .cse79))) (let ((.cse77 (and .cse112 .cse78))) (let ((.cse76 (=> .cse39 .cse77))) (let ((.cse75 (=> .cse129 .cse76))) (let ((.cse71 (=> .cse130 .cse75))) (let ((.cse73 (not .cse71))) (res .cse71 (let ((.cse72 (not .cse70))) (res .cse72 (res .cse73 (not+ .cse73) (let ((.cse74 (= .cse73 .cse72))) (res .cse74 (res (= .cse71 .cse70) (res (= .cse75 .cse69) (res (= .cse76 .cse40) (res (= .cse77 .cse68) (let ((.cse109 (= .cse111 .cse36)) (.cse93 (= 0 0)) (.cse97 (= .cse99 .cse99))) (let-proof ((.cse110 (let ((.cse119 (= .cse121 .cse14))) (res .cse119 (let ((.cse122 (<= 7 f))) (let ((.cse120 (= .cse121 .cse122))) (res .cse120 (>=def f 7) (res .cse14 (res .cse121 (=+1 .cse119) (res .cse122 (=-2 .cse120) (res .cse21 .cse22 (farkas 1 .cse122 1 .cse21)))) (res .cse121 (res .cse122 (let ((.cse123 (< f 7))) (res .cse123 (total 7 f) (farkas 1 .cse123 1 .cse14))) (=-1 .cse120)) (=+2 .cse119)))))) (let ((.cse124 (= .cse126 .cse25))) (res .cse124 (let ((.cse127 (<= 0 x@0))) (let ((.cse125 (= .cse126 .cse127))) (res .cse125 (>=def x@0 0) (res .cse25 (res .cse126 (=+1 .cse124) (res .cse127 (=-2 .cse125) (res .cse32 .cse33 (farkas 1 .cse127 1 .cse32)))) (res .cse126 (res .cse127 (let ((.cse128 (< x@0 0))) (res .cse128 (total 0 x@0) (farkas 1 .cse128 1 .cse25))) (=-1 .cse125)) (=+2 .cse124)))))) (cong (and .cse126 .cse121) (and .cse25 .cse14))))))) (.cse94 (refl 0)) (.cse98 (refl .cse99))) (res (= .cse78 .cse9) (res (= .cse79 .cse10) (let ((.cse100 (= .cse8 .cse8))) (let-proof ((.cse101 (refl .cse8))) (res (= .cse80 .cse5) (res (= .cse81 .cse1) (let ((.cse82 (= .cse85 .cse84))) (res .cse82 (let ((.cse86 (<= 20 f))) (let ((.cse83 (= .cse85 .cse86))) (res .cse83 (>=def f 20) (res .cse84 (res .cse85 (=+1 .cse82) (res .cse86 (=-2 .cse83) (let ((.cse87 (< 0 .cse88))) (res .cse87 (total .cse88 0) (farkas 1 .cse86 1 .cse87))))) (res .cse85 (res .cse86 (let ((.cse89 (< f 20))) (res .cse89 (total 20 f) (farkas 1 .cse89 1 .cse84))) (=-1 .cse83)) (=+2 .cse82)))))) (res (= .cse90 .cse2) (res (= .cse91 (- 1)) (let ((.cse92 (* (- 1) 1))) (res (= .cse92 (- 1)) (poly* .cse92 (- 1)) (res .cse93 .cse94 (let ((.cse95 (+ 0 .cse92)) (.cse96 (+ 0 (- 1)))) (res (= .cse95 .cse96) (cong (+ 0 .cse92) (+ 0 (- 1))) (res (= .cse91 .cse95) (-def 0 1) (res (= .cse96 (- 1)) (poly+ .cse96 (- 1)) (trans .cse91 .cse95 .cse96 (- 1))))))))) (res .cse97 .cse98 (cong (= .cse99 .cse91) (= .cse99 (- 1))))) (cong (=> .cse90 .cse85) (=> .cse2 .cse84))))) (res .cse100 .cse101 (cong (=> .cse8 .cse81) (=> .cse8 .cse1)))) (res (= .cse102 .cse6) (res .cse100 .cse101 (res (= .cse103 .cse104) (res (= .cse105 (- 3)) (let ((.cse106 (* (- 1) 3))) (res (= .cse106 (- 3)) (poly* .cse106 (- 3)) (res .cse93 .cse94 (let ((.cse107 (+ 0 .cse106)) (.cse108 (+ 0 (- 3)))) (res (= .cse107 .cse108) (cong (+ 0 .cse106) (+ 0 (- 3))) (res (= .cse105 .cse107) (-def 0 3) (res (= .cse108 (- 3)) (poly+ .cse108 (- 3)) (trans .cse105 .cse107 .cse108 (- 3))))))))) (res .cse97 .cse98 (cong (= .cse99 .cse105) (= .cse99 (- 3))))) (cong (=> .cse103 .cse8) (=> .cse104 .cse8)))) (cong (and .cse102 .cse80) (and .cse6 .cse5)))))) (res .cse109 .cse110 (cong (=> .cse111 .cse79) (=> .cse36 .cse10)))) (res (= .cse112 .cse11) (res .cse109 .cse110 (res (= .cse113 .cse114) (res (= .cse115 (- 4)) (let ((.cse116 (* (- 1) 4))) (res (= .cse116 (- 4)) (poly* .cse116 (- 4)) (res .cse93 .cse94 (let ((.cse117 (+ 0 .cse116)) (.cse118 (+ 0 (- 4)))) (res (= .cse117 .cse118) (cong (+ 0 .cse116) (+ 0 (- 4))) (res (= .cse115 .cse117) (-def 0 4) (res (= .cse118 (- 4)) (poly+ .cse118 (- 4)) (trans .cse115 .cse117 .cse118 (- 4))))))))) (res .cse97 .cse98 (cong (= .cse99 .cse115) (= .cse99 (- 4))))) (cong (=> .cse113 .cse111) (=> .cse114 .cse36)))) (cong (and .cse112 .cse78) (and .cse11 .cse9)))))) (res (= .cse39 .cse39) (refl .cse39) (cong (=> .cse39 .cse77) (=> .cse39 .cse68)))) (res (= .cse129 .cse129) (refl .cse129) (cong (=> .cse129 .cse76) (=> .cse129 .cse40)))) (res (= .cse130 .cse130) (refl .cse130) (cong (=> .cse130 .cse75) (=> .cse130 .cse69)))) (cong (not .cse71) (not .cse70))) (=-2 .cse74)))) (not- .cse72))) (res .cse73 (assume .cse73) (not- .cse73)))))))))))))))))))))) (res .cse11 (! (let ((.cse67 (+ f (- 12)))) (let ((.cse50 (<= 1 .cse67)) (.cse37 (<= .cse67 0)) (.cse24 (+ f (- 6)))) (let-proof ((.cse51 (total-int .cse67 0))) (let ((.cse12 (<= .cse24 0))) (let-proof ((.cse53 (! (let ((.cse65 (+ .cse66 13))) (let ((.cse59 (< 0 .cse65)) (.cse54 (<= .cse65 0))) (let-proof ((.cse60 (total .cse65 0))) (res .cse54 (let ((.cse55 (>= f 13))) (res .cse55 (assume .cse55) (let ((.cse56 (= .cse55 .cse54))) (res .cse56 (let ((.cse58 (<= 13 f))) (let ((.cse57 (= .cse55 .cse58))) (res .cse57 (>=def f 13) (res .cse54 (res .cse55 (=+1 .cse56) (res .cse58 (=-2 .cse57) (res .cse59 .cse60 (farkas 1 .cse58 1 .cse59)))) (res .cse55 (res .cse58 (let ((.cse61 (< f 13))) (res .cse61 (total 13 f) (farkas 1 .cse61 1 .cse54))) (=-1 .cse57)) (=+2 .cse56)))))) (=-2 .cse56))))) (let ((.cse62 (not .cse37))) (let-proof ((.cse64 (not- .cse62))) (res .cse62 (let ((.cse63 (= .cse54 .cse62))) (res .cse63 (res .cse62 (res .cse54 (=+1 .cse63) (res .cse37 (not+ .cse62) (farkas 1 .cse54 1 .cse37))) (res .cse54 (res .cse59 .cse60 (res .cse37 (res .cse50 .cse51 (farkas 1 .cse59 1 .cse50)) .cse64)) (=+2 .cse63))) (=-2 .cse63))) .cse64))))))) :proves (- .cse37) :input))) (res .cse12 (let ((.cse35 (+ x@0 1))) (let ((.cse13 (<= .cse35 0))) (res .cse13 (! (res .cse14 (let ((.cse15 (not .cse12))) (let-proof ((.cse16 (not+ .cse15))) (res .cse15 .cse16 (let ((.cse17 (not .cse15))) (res .cse17 (let ((.cse18 (not .cse14))) (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (let ((.cse20 (= .cse14 .cse15))) (res .cse20 (res .cse15 (res .cse14 (=+1 .cse20) (res .cse12 .cse16 (farkas 1 .cse14 1 .cse12))) (res .cse14 (res .cse21 .cse22 (res .cse12 (let ((.cse23 (<= 1 .cse24))) (res .cse23 (total-int .cse24 0) (farkas 1 .cse21 1 .cse23))) (not- .cse15))) (=+2 .cse20))) (cong (not .cse14) (not .cse15)))) (=-2 .cse19))))) (not- .cse17)))))) (res .cse25 (let ((.cse26 (not .cse13))) (let-proof ((.cse27 (not+ .cse26))) (res .cse26 .cse27 (let ((.cse28 (not .cse26))) (res .cse28 (let ((.cse29 (not .cse25))) (res .cse29 (not+ .cse29) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (let ((.cse31 (= .cse25 .cse26))) (res .cse31 (res .cse26 (res .cse25 (=+1 .cse31) (res .cse13 .cse27 (farkas 1 .cse25 1 .cse13))) (res .cse25 (res .cse32 .cse33 (res .cse13 (let ((.cse34 (<= 1 .cse35))) (res .cse34 (total-int .cse35 0) (farkas 1 .cse32 1 .cse34))) (not- .cse26))) (=+2 .cse31))) (cong (not .cse25) (not .cse26)))) (=-2 .cse30))))) (not- .cse28)))))) (res .cse36 (and+ .cse36) (=>+ 1 .cse11)))) :proves (+ .cse11 + .cse13 + .cse12) :input) (! (res .cse37 (let ((.cse46 (+ f .cse52))) (let ((.cse38 (= .cse46 0))) (res .cse38 (! (res .cse39 (res .cse40 (=>+ 0 .cse40) .cse41) (let ((.cse42 (= .cse39 .cse38))) (res .cse42 (res .cse38 (res .cse39 (=+1 .cse42) (let ((.cse43 (= f x@0))) (res .cse43 (symm f x@0) (let ((.cse44 (< .cse46 0))) (res .cse44 (let ((.cse45 (< 0 .cse46))) (res .cse45 (trichotomy .cse46 0) (farkas 1 .cse43 1 .cse45))) (farkas 1 .cse39 1 .cse44)))))) (res .cse39 (let ((.cse47 (= 0 .cse46))) (res .cse47 (symm 0 .cse46) (let ((.cse48 (< x@0 f))) (res .cse48 (let ((.cse49 (< f x@0))) (res .cse49 (trichotomy x@0 f) (farkas 1 .cse47 1 .cse49))) (farkas 1 .cse38 1 .cse48))))) (=+2 .cse42))) (=-2 .cse42)))) :proves (+ .cse38) :input) (! (res .cse50 .cse51 (farkas 1 .cse38 1 .cse13 1 .cse50)) :proves (- .cse38 - .cse13 + .cse37) :LA (1 1 (- 1)))))) .cse53) :proves (- .cse13) :rup)))) (! (res .cse37 (! (res .cse50 .cse51 (farkas 1 .cse12 1 .cse50)) :proves (- .cse12 + .cse37) :LA (1 (- 1))) .cse53) :proves (- .cse12) :rup))))))) :proves (+ .cse11) :rup) (! (res .cse68 (and+ .cse68) (res .cse40 (=>+ 1 .cse40) .cse41)) :proves (- .cse11 - .cse9) :input)))))))) :proves (- .cse9) :rup))))))))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse133 (not .cse2))) (res .cse2 (let ((.cse132 (not .cse0))) (res .cse132 (res .cse133 (not+ .cse133) (let ((.cse134 (= .cse133 .cse132))) (res .cse134 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse134)))) (not- .cse132))) (res .cse133 (assume .cse133) (not- .cse133)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
