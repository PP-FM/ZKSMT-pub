success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse11 (+ inline$inc$0$y@1 (- 1))) (.cse132 (ControlFlow 0 2))) (let ((.cse126 (= .cse132 (- 1))) (.cse5 (= .cse11 inline$dec$0$y@1)) (.cse144 (ControlFlow 0 3))) (let ((.cse133 (= .cse144 2)) (.cse2 (=> .cse126 .cse5))) (let ((.cse1 (=> .cse133 .cse2)) (.cse139 (= .cse144 (- 4))) (.cse10 (= inline$dec$0$y@1 .cse11))) (let ((.cse21 (=> .cse139 .cse10)) (.cse0 (=> .cse10 .cse1)) (.cse162 (ControlFlow 0 5))) (let ((.cse68 (+ inline$incdec$0$z@1 (- 2))) (.cse151 (= .cse162 3)) (.cse25 (and .cse21 .cse0))) (let ((.cse20 (=> .cse151 .cse25)) (.cse157 (= .cse162 (- 6))) (.cse31 (= inline$dec$0$y@1 .cse68))) (let ((.cse50 (+ inline$inc$0$y@1 1)) (.cse28 (=> .cse157 .cse31)) (.cse26 (=> .cse31 .cse20)) (.cse164 (= (ControlFlow 0 7) 5))) (let ((.cse66 (and .cse31 .cse164)) (.cse37 (and .cse28 .cse26)) (.cse47 (= inline$incdec$0$z@1 .cse50)) (.cse65 (* (- 1) inline$dec$0$y@1))) (let ((.cse71 (+ inline$incdec$0$z@1 .cse65 (- 2))) (.cse44 (and .cse47 (= (ControlFlow 0 8) 7))) (.cse27 (=> .cse66 .cse37))) (let ((.cse45 (=> .cse44 .cse27)) (.cse29 (= .cse71 0))) (let ((.cse39 (+ inline$inc$0$y@1 .cse65 (- 1))) (.cse63 (= 0 .cse71)) (.cse35 (= .cse31 .cse29))) (let-proof ((.cse64 (symm 0 .cse71)) (.cse46 (! (let ((.cse178 (ControlFlow 0 9))) (let ((.cse167 (= .cse178 8))) (let ((.cse74 (=> .cse167 .cse45))) (res .cse74 (! (=>+ 1 .cse74) :proves (+ .cse74 - .cse45) :input) (! (let ((.cse78 (= inline$inc$0$y@1 6))) (let ((.cse75 (=> .cse78 .cse74))) (res .cse75 (! (=>+ 1 .cse75) :proves (+ .cse75 - .cse74) :input) (! (let ((.cse173 (= .cse178 (- 10)))) (let ((.cse76 (=> .cse173 .cse78)) (.cse180 (= (ControlFlow 0 11) 9))) (let ((.cse79 (and .cse78 .cse180)) (.cse94 (and .cse76 .cse75))) (let ((.cse80 (=> .cse79 .cse94))) (let-proof ((.cse81 (let ((.cse182 (= (ControlFlow 0 12) 11))) (let ((.cse95 (=> .cse182 .cse80))) (res .cse95 (=>+ 1 .cse95) (let ((.cse183 (= (ControlFlow 0 0) 12))) (let ((.cse96 (=> .cse183 .cse95))) (res .cse96 (=>+ 1 .cse96) (let ((.cse118 (- inline$inc$0$y@1 1)) (.cse127 (- 0 1))) (let ((.cse125 (= .cse132 .cse127)) (.cse115 (= .cse118 inline$dec$0$y@1))) (let ((.cse145 (- .cse50 2)) (.cse140 (- 0 4)) (.cse114 (=> .cse125 .cse115))) (let ((.cse113 (=> .cse133 .cse114)) (.cse138 (= .cse144 .cse140)) (.cse136 (= inline$dec$0$y@1 .cse145))) (let ((.cse137 (=> .cse138 .cse136)) (.cse112 (=> .cse136 .cse113))) (let ((.cse165 (- inline$incdec$0$z@1 2)) (.cse158 (- 0 6)) (.cse111 (and .cse137 .cse112))) (let ((.cse110 (=> .cse151 .cse111)) (.cse156 (= .cse162 .cse158)) (.cse154 (= inline$dec$0$y@1 .cse165))) (let ((.cse155 (=> .cse156 .cse154)) (.cse109 (=> .cse154 .cse110))) (let ((.cse163 (and .cse154 .cse164)) (.cse108 (and .cse155 .cse109))) (let ((.cse107 (=> .cse163 .cse108))) (let ((.cse181 (+ 1 5)) (.cse174 (- 0 10)) (.cse106 (=> .cse44 .cse107))) (let ((.cse105 (=> .cse167 .cse106)) (.cse172 (= .cse178 .cse174)) (.cse170 (= inline$inc$0$y@1 .cse181))) (let ((.cse171 (=> .cse172 .cse170)) (.cse104 (=> .cse170 .cse105))) (let ((.cse179 (and .cse170 .cse180)) (.cse103 (and .cse171 .cse104))) (let ((.cse102 (=> .cse179 .cse103))) (let ((.cse101 (=> .cse182 .cse102))) (let ((.cse97 (=> .cse183 .cse101))) (let ((.cse99 (not .cse97))) (res .cse97 (let ((.cse98 (not .cse96))) (res .cse98 (res .cse99 (not+ .cse99) (let ((.cse100 (= .cse99 .cse98))) (res .cse100 (res (= .cse97 .cse96) (res (= .cse101 .cse95) (res (= .cse102 .cse80) (let ((.cse121 (= inline$inc$0$y@1 inline$inc$0$y@1))) (let-proof ((.cse122 (refl inline$inc$0$y@1))) (let ((.cse168 (= .cse170 .cse78))) (let-proof ((.cse169 (res (= .cse181 6) (poly+ .cse181 6) (res .cse121 .cse122 (cong (= inline$inc$0$y@1 .cse181) (= inline$inc$0$y@1 6)))))) (res (= .cse103 .cse94) (let ((.cse128 (= 0 0))) (let-proof ((.cse129 (refl 0))) (res (= .cse104 .cse75) (res (= .cse105 .cse74) (res (= .cse106 .cse45) (res (= .cse107 .cse27) (let ((.cse150 (* (- 1) 2))) (let ((.cse146 (= .cse150 (- 2))) (.cse116 (= inline$dec$0$y@1 inline$dec$0$y@1))) (let-proof ((.cse147 (poly* .cse150 (- 2))) (.cse117 (refl inline$dec$0$y@1))) (let ((.cse152 (= .cse154 .cse31))) (let-proof ((.cse153 (res (= .cse165 .cse68) (res .cse146 .cse147 (res (= inline$incdec$0$z@1 inline$incdec$0$z@1) (refl inline$incdec$0$z@1) (let ((.cse166 (+ inline$incdec$0$z@1 .cse150))) (res (= .cse166 .cse68) (cong (+ inline$incdec$0$z@1 .cse150) (+ inline$incdec$0$z@1 (- 2))) (res (= .cse165 .cse166) (-def inline$incdec$0$z@1 2) (trans .cse165 .cse166 .cse68)))))) (res .cse116 .cse117 (cong (= inline$dec$0$y@1 .cse165) (= inline$dec$0$y@1 .cse68)))))) (res (= .cse108 .cse37) (res (= .cse109 .cse26) (res (= .cse110 .cse20) (res (= .cse111 .cse25) (let ((.cse134 (= .cse136 .cse10))) (let-proof ((.cse135 (res (= .cse145 .cse11) (res .cse146 .cse147 (res (= .cse50 .cse50) (refl .cse50) (let ((.cse148 (+ .cse50 .cse150)) (.cse149 (+ .cse50 (- 2)))) (res (= .cse148 .cse149) (cong (+ .cse50 .cse150) (+ .cse50 (- 2))) (res (= .cse145 .cse148) (-def .cse50 2) (res (= .cse149 .cse11) (poly+ .cse149 .cse11) (trans .cse145 .cse148 .cse149 .cse11))))))) (res .cse116 .cse117 (cong (= inline$dec$0$y@1 .cse145) (= inline$dec$0$y@1 .cse11)))))) (res (= .cse112 .cse0) (res (= .cse113 .cse1) (res (= .cse114 .cse2) (let ((.cse124 (* (- 1) 1))) (let ((.cse119 (= .cse124 (- 1)))) (let-proof ((.cse120 (poly* .cse124 (- 1)))) (res (= .cse115 .cse5) (res .cse116 .cse117 (res (= .cse118 .cse11) (res .cse119 .cse120 (res .cse121 .cse122 (let ((.cse123 (+ inline$inc$0$y@1 .cse124))) (res (= .cse123 .cse11) (cong (+ inline$inc$0$y@1 .cse124) (+ inline$inc$0$y@1 (- 1))) (res (= .cse118 .cse123) (-def inline$inc$0$y@1 1) (trans .cse118 .cse123 .cse11)))))) (cong (= .cse118 inline$dec$0$y@1) (= .cse11 inline$dec$0$y@1)))) (res (= .cse125 .cse126) (res (= .cse127 (- 1)) (res .cse119 .cse120 (res .cse128 .cse129 (let ((.cse130 (+ 0 .cse124)) (.cse131 (+ 0 (- 1)))) (res (= .cse130 .cse131) (cong (+ 0 .cse124) (+ 0 (- 1))) (res (= .cse127 .cse130) (-def 0 1) (res (= .cse131 (- 1)) (poly+ .cse131 (- 1)) (trans .cse127 .cse130 .cse131 (- 1)))))))) (res (= .cse132 .cse132) (refl .cse132) (cong (= .cse132 .cse127) (= .cse132 (- 1))))) (cong (=> .cse125 .cse115) (=> .cse126 .cse5))))))) (res (= .cse133 .cse133) (refl .cse133) (cong (=> .cse133 .cse114) (=> .cse133 .cse2)))) (res .cse134 .cse135 (cong (=> .cse136 .cse113) (=> .cse10 .cse1)))) (res (= .cse137 .cse21) (res .cse134 .cse135 (res (= .cse138 .cse139) (res (= .cse140 (- 4)) (let ((.cse141 (* (- 1) 4))) (res (= .cse141 (- 4)) (poly* .cse141 (- 4)) (res .cse128 .cse129 (let ((.cse142 (+ 0 .cse141)) (.cse143 (+ 0 (- 4)))) (res (= .cse142 .cse143) (cong (+ 0 .cse141) (+ 0 (- 4))) (res (= .cse140 .cse142) (-def 0 4) (res (= .cse143 (- 4)) (poly+ .cse143 (- 4)) (trans .cse140 .cse142 .cse143 (- 4))))))))) (res (= .cse144 .cse144) (refl .cse144) (cong (= .cse144 .cse140) (= .cse144 (- 4))))) (cong (=> .cse138 .cse136) (=> .cse139 .cse10)))) (cong (and .cse137 .cse112) (and .cse21 .cse0)))))) (res (= .cse151 .cse151) (refl .cse151) (cong (=> .cse151 .cse111) (=> .cse151 .cse25)))) (res .cse152 .cse153 (cong (=> .cse154 .cse110) (=> .cse31 .cse20)))) (res (= .cse155 .cse28) (res .cse152 .cse153 (res (= .cse156 .cse157) (res (= .cse158 (- 6)) (let ((.cse159 (* (- 1) 6))) (res (= .cse159 (- 6)) (poly* .cse159 (- 6)) (res .cse128 .cse129 (let ((.cse160 (+ 0 .cse159)) (.cse161 (+ 0 (- 6)))) (res (= .cse160 .cse161) (cong (+ 0 .cse159) (+ 0 (- 6))) (res (= .cse158 .cse160) (-def 0 6) (res (= .cse161 (- 6)) (poly+ .cse161 (- 6)) (trans .cse158 .cse160 .cse161 (- 6))))))))) (res (= .cse162 .cse162) (refl .cse162) (cong (= .cse162 .cse158) (= .cse162 (- 6))))) (cong (=> .cse156 .cse154) (=> .cse157 .cse31)))) (cong (and .cse155 .cse109) (and .cse28 .cse26)))) (res (= .cse163 .cse66) (res (= .cse164 .cse164) (refl .cse164) (res .cse152 .cse153 (cong (and .cse154 .cse164) (and .cse31 .cse164)))) (cong (=> .cse163 .cse108) (=> .cse66 .cse37))))))))) (res (= .cse44 .cse44) (refl .cse44) (cong (=> .cse44 .cse107) (=> .cse44 .cse27)))) (res (= .cse167 .cse167) (refl .cse167) (cong (=> .cse167 .cse106) (=> .cse167 .cse45)))) (res .cse168 .cse169 (cong (=> .cse170 .cse105) (=> .cse78 .cse74)))) (res (= .cse171 .cse76) (res .cse168 .cse169 (res (= .cse172 .cse173) (res (= .cse174 (- 10)) (let ((.cse175 (* (- 1) 10))) (res (= .cse175 (- 10)) (poly* .cse175 (- 10)) (res .cse128 .cse129 (let ((.cse176 (+ 0 .cse175)) (.cse177 (+ 0 (- 10)))) (res (= .cse176 .cse177) (cong (+ 0 .cse175) (+ 0 (- 10))) (res (= .cse174 .cse176) (-def 0 10) (res (= .cse177 (- 10)) (poly+ .cse177 (- 10)) (trans .cse174 .cse176 .cse177 (- 10))))))))) (res (= .cse178 .cse178) (refl .cse178) (cong (= .cse178 .cse174) (= .cse178 (- 10))))) (cong (=> .cse172 .cse170) (=> .cse173 .cse78)))) (cong (and .cse171 .cse104) (and .cse76 .cse75)))))) (res (= .cse179 .cse79) (res (= .cse180 .cse180) (refl .cse180) (res .cse168 .cse169 (cong (and .cse170 .cse180) (and .cse78 .cse180)))) (cong (=> .cse179 .cse103) (=> .cse79 .cse94)))))))) (res (= .cse182 .cse182) (refl .cse182) (cong (=> .cse182 .cse102) (=> .cse182 .cse80)))) (res (= .cse183 .cse183) (refl .cse183) (cong (=> .cse183 .cse101) (=> .cse183 .cse95)))) (cong (not .cse97) (not .cse96))) (=-2 .cse100)))) (not- .cse98))) (res .cse99 (assume .cse99) (not- .cse99))))))))))))))))))))))))))))) (res .cse76 (! (let ((.cse90 (+ inline$inc$0$y@1 (- 6)))) (let ((.cse77 (= .cse90 0))) (let ((.cse82 (= .cse78 .cse77))) (let-proof ((.cse83 (res .cse77 (res .cse78 (=+1 .cse82) (let ((.cse87 (= 6 inline$inc$0$y@1))) (res .cse87 (symm 6 inline$inc$0$y@1) (let ((.cse88 (< .cse90 0))) (res .cse88 (let ((.cse89 (< 0 .cse90))) (res .cse89 (trichotomy .cse90 0) (farkas 1 .cse78 1 .cse89))) (farkas 1 .cse87 1 .cse88)))))) (res .cse78 (let ((.cse91 (= 0 .cse90))) (res .cse91 (symm 0 .cse90) (let ((.cse92 (< inline$inc$0$y@1 6))) (res .cse92 (let ((.cse93 (< 6 inline$inc$0$y@1))) (res .cse93 (trichotomy inline$inc$0$y@1 6) (farkas 1 .cse77 1 .cse93))) (farkas 1 .cse91 1 .cse92))))) (=+2 .cse82))))) (res .cse77 (! (res .cse78 (res .cse79 (res .cse80 (=>+ 0 .cse80) .cse81) (and- 0 .cse79)) (res .cse82 .cse83 (=-2 .cse82))) :proves (+ .cse77) :input) (! (res .cse78 (let ((.cse84 (not .cse77))) (res .cse84 (let ((.cse85 (not .cse78))) (res .cse85 (not+ .cse85) (let ((.cse86 (= .cse85 .cse84))) (res .cse86 (res .cse82 .cse83 (cong (not .cse78) (not .cse77))) (=-2 .cse86))))) (not- .cse84))) (=>+ 1 .cse76)) :proves (+ .cse76 - .cse77) :input)))))) :proves (+ .cse76) :rup) (! (res .cse94 (and+ .cse94) (res .cse80 (=>+ 1 .cse80) .cse81)) :proves (- .cse76 - .cse75) :input))))))) :proves (- .cse75) :rup)))) :proves (- .cse74) :rup))))) :proves (- .cse45) :rup))) (let ((.cse3 (= .cse39 0))) (let-proof ((.cse38 (! (res .cse45 (! (=>+ 1 .cse45) :proves (+ .cse45 - .cse27) :input) .cse46) :proves (- .cse27) :rup)) (.cse36 (res .cse29 (res .cse31 (=+1 .cse35) (let ((.cse67 (= .cse68 inline$dec$0$y@1))) (res .cse67 (symm .cse68 inline$dec$0$y@1) (let ((.cse69 (< .cse71 0))) (res .cse69 (let ((.cse70 (< 0 .cse71))) (res .cse70 (trichotomy .cse71 0) (farkas 1 .cse67 1 .cse70))) (farkas 1 .cse31 1 .cse69)))))) (res .cse31 (res .cse63 .cse64 (let ((.cse72 (< inline$dec$0$y@1 .cse68))) (res .cse72 (let ((.cse73 (< .cse68 inline$dec$0$y@1))) (res .cse73 (trichotomy inline$dec$0$y@1 .cse68) (farkas 1 .cse63 1 .cse73))) (farkas 1 .cse29 1 .cse72)))) (=+2 .cse35))))) (let ((.cse6 (not .cse3)) (.cse16 (< inline$dec$0$y@1 .cse11)) (.cse13 (= 0 .cse39)) (.cse15 (< .cse11 inline$dec$0$y@1)) (.cse41 (< 0 .cse39)) (.cse40 (< .cse39 0))) (let-proof ((.cse30 (! (res .cse66 (! (res .cse27 (! (=>+ 0 .cse27) :proves (+ .cse27 + .cse66) :input) .cse38) :proves (+ .cse66) :rup) (! (res .cse31 (and- 0 .cse66) (res .cse35 .cse36 (=-2 .cse35))) :proves (- .cse66 + .cse29) :input)) :proves (+ .cse29) :rup)) (.cse42 (trichotomy .cse39 0))) (let-proof ((.cse4 (! (let ((.cse53 (+ inline$inc$0$y@1 (* (- 1) inline$incdec$0$z@1) 1))) (let ((.cse43 (= .cse53 0)) (.cse54 (= 0 .cse53))) (let-proof ((.cse55 (symm 0 .cse53))) (res .cse43 (! (res .cse44 (! (res .cse45 (! (=>+ 0 .cse45) :proves (+ .cse45 + .cse44) :input) .cse46) :proves (+ .cse44) :rup) (! (res .cse47 (and- 0 .cse44) (let ((.cse48 (= .cse47 .cse43))) (res .cse48 (res .cse43 (res .cse47 (=+1 .cse48) (let ((.cse49 (= .cse50 inline$incdec$0$z@1))) (res .cse49 (symm .cse50 inline$incdec$0$z@1) (let ((.cse51 (< .cse53 0))) (res .cse51 (let ((.cse52 (< 0 .cse53))) (res .cse52 (trichotomy .cse53 0) (farkas 1 .cse49 1 .cse52))) (farkas 1 .cse47 1 .cse51)))))) (res .cse47 (res .cse54 .cse55 (let ((.cse56 (< inline$incdec$0$z@1 .cse50))) (res .cse56 (let ((.cse57 (< .cse50 inline$incdec$0$z@1))) (res .cse57 (trichotomy inline$incdec$0$z@1 .cse50) (farkas 1 .cse54 1 .cse57))) (farkas 1 .cse43 1 .cse56)))) (=+2 .cse48))) (=-2 .cse48)))) :proves (- .cse44 + .cse43) :input)) :proves (+ .cse43) :rup) (res .cse29 .cse30 (let ((.cse58 (<= .cse39 0))) (res .cse58 (! (let ((.cse59 (<= 1 .cse39))) (res .cse59 (total-int .cse39 0) (farkas 1 .cse59 1 .cse29 1 .cse43))) :proves (+ .cse58 - .cse29 - .cse43) :LA ((- 1) 1 1)) (let ((.cse62 (+ inline$inc$0$y@1 .cse65))) (let ((.cse60 (<= .cse62 0))) (res .cse60 (! (res .cse40 (res .cse41 .cse42 (farkas 1 .cse41 1 .cse58)) (let ((.cse61 (<= 1 .cse62))) (res .cse61 (total-int .cse62 0) (farkas 1 .cse61 1 .cse40)))) :proves (+ .cse60 + .cse3 - .cse58) :trichotomy) (! (res .cse54 .cse55 (res .cse63 .cse64 (farkas 1 .cse63 1 .cse54 1 .cse60))) :proves (- .cse29 - .cse43 - .cse60) :LA ((- 1) (- 1) 1)))))))))))) :proves (+ .cse3) :rup)) (.cse12 (res .cse40 (res .cse41 .cse42 (farkas 1 .cse5 1 .cse41)) (farkas 1 .cse10 1 .cse40))) (.cse14 (symm 0 .cse39)) (.cse18 (farkas 1 .cse13 1 .cse15)) (.cse17 (farkas 1 .cse3 1 .cse16)) (.cse19 (not- .cse6))) (res .cse0 (res .cse1 (! (res .cse2 (! (res .cse3 .cse4 (! (res .cse5 (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (let ((.cse9 (= .cse5 .cse3))) (res .cse9 (res .cse3 (res .cse5 (=+1 .cse9) (res .cse10 (symm inline$dec$0$y@1 .cse11) .cse12)) (res .cse5 (res .cse13 .cse14 (res .cse15 (res .cse16 (trichotomy .cse11 inline$dec$0$y@1) .cse17) .cse18)) (=+2 .cse9))) (cong (not .cse5) (not .cse3)))) (=-2 .cse8))))) .cse19) (=>+ 1 .cse2)) :proves (+ .cse2 - .cse3) :input)) :proves (+ .cse2) :rup) (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) (! (res .cse20 (res .cse21 (! (res .cse3 .cse4 (! (res .cse10 (res .cse6 (let ((.cse22 (not .cse10))) (res .cse22 (not+ .cse22) (let ((.cse23 (= .cse22 .cse6))) (res .cse23 (let ((.cse24 (= .cse10 .cse3))) (res .cse24 (res .cse3 (res .cse10 (=+1 .cse24) (res .cse5 (symm .cse11 inline$dec$0$y@1) .cse12)) (res .cse10 (res .cse13 .cse14 (res .cse16 (res .cse15 (trichotomy inline$dec$0$y@1 .cse11) .cse18) .cse17)) (=+2 .cse24))) (cong (not .cse10) (not .cse3)))) (=-2 .cse23))))) .cse19) (=>+ 1 .cse21)) :proves (+ .cse21 - .cse3) :input)) :proves (+ .cse21) :rup) (! (res .cse25 (and+ .cse25) (=>+ 1 .cse20)) :proves (- .cse0 - .cse21 + .cse20) :input)) (! (res .cse26 (! (=>+ 1 .cse26) :proves (+ .cse26 - .cse20) :input) (! (res .cse27 (res .cse28 (! (res .cse29 .cse30 (! (res .cse31 (let ((.cse32 (not .cse29))) (res .cse32 (let ((.cse33 (not .cse31))) (res .cse33 (not+ .cse33) (let ((.cse34 (= .cse33 .cse32))) (res .cse34 (res .cse35 .cse36 (cong (not .cse31) (not .cse29))) (=-2 .cse34))))) (not- .cse32))) (=>+ 1 .cse28)) :proves (+ .cse28 - .cse29) :input)) :proves (+ .cse28) :rup) (! (res .cse37 (and+ .cse37) (=>+ 1 .cse27)) :proves (- .cse26 - .cse28 + .cse27) :input)) .cse38) :proves (- .cse26) :rup)) :proves (- .cse20) :rup)) :proves (- .cse0) :rup)))))))))))))))))))) :proves () :rup)
unsupported
