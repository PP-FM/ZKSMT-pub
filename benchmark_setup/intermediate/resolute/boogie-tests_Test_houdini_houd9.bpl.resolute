success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_houd9.bpl.mod.smt2:32:10: Logical context not inconsistent!")
unsat
(! (let ((.cse53 (ControlFlow 0 2))) (let ((.cse2 (= .cse53 (- 6))) (.cse0 (= (- 6) .cse53))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 6) .cse53)) (res .cse2 (symm .cse53 (- 6)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse44 (= .cse53 (- 1))) (.cse32 (=> b3 false))) (let ((.cse30 (=> .cse44 .cse32)) (.cse61 (= .cse53 (- 3))) (.cse57 (=> b2 false))) (let ((.cse59 (=> .cse61 .cse57)) (.cse28 (=> .cse57 .cse30))) (let ((.cse26 (and .cse59 .cse28)) (.cse75 (= .cse53 (- 4))) (.cse71 (=> b1 true))) (let ((.cse73 (=> .cse75 .cse71)) (.cse24 (=> .cse71 .cse26))) (let ((.cse22 (and .cse73 .cse24)) (.cse97 (= .cse53 (- 5)))) (let ((.cse95 (=> .cse97 false)) (.cse20 (=> false .cse22))) (let ((.cse18 (and .cse95 .cse20))) (let ((.cse5 (=> false .cse18))) (let-proof ((.cse6 false-)) (res .cse5 (! (res false (=>+ 0 .cse5) .cse6) :proves (+ .cse5) :input) (! (let ((.cse7 (and .cse1 .cse5))) (res .cse7 (and+ .cse7) (let ((.cse122 (= (ControlFlow 0 7) 2))) (let ((.cse8 (=> .cse122 .cse7))) (res .cse8 (=>+ 1 .cse8) (let ((.cse123 (= (ControlFlow 0 0) 7))) (let ((.cse9 (=> .cse123 .cse8))) (res .cse9 (=>+ 1 .cse9) (let ((.cse33 (< 0 0)) (.cse45 (- 0 1))) (let ((.cse67 (= 5 0)) (.cse62 (- 0 3)) (.cse43 (= .cse53 .cse45)) (.cse31 (=> b3 .cse33))) (let ((.cse29 (=> .cse43 .cse31)) (.cse60 (= .cse53 .cse62)) (.cse56 (=> b2 .cse67))) (let ((.cse80 (> 5 0)) (.cse76 (- 0 4)) (.cse58 (=> .cse60 .cse56)) (.cse27 (=> .cse56 .cse29))) (let ((.cse25 (and .cse58 .cse27)) (.cse74 (= .cse53 .cse76)) (.cse70 (=> b1 .cse80))) (let ((.cse98 (- 0 5)) (.cse72 (=> .cse74 .cse70)) (.cse23 (=> .cse70 .cse25))) (let ((.cse21 (and .cse72 .cse23)) (.cse96 (= .cse53 .cse98)) (.cse93 (> 0 0))) (let ((.cse113 (- 0 6)) (.cse94 (=> .cse96 .cse93)) (.cse19 (=> .cse93 .cse21))) (let ((.cse17 (and .cse94 .cse19)) (.cse112 (= .cse53 .cse113)) (.cse110 (> 5 5))) (let ((.cse111 (=> .cse112 .cse110)) (.cse16 (=> .cse110 .cse17))) (let ((.cse15 (and .cse111 .cse16))) (let ((.cse14 (=> .cse122 .cse15))) (let ((.cse10 (=> .cse123 .cse14))) (let ((.cse12 (not .cse10))) (res .cse10 (let ((.cse11 (not .cse9))) (res .cse11 (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res (= .cse10 .cse9) (res (= .cse14 .cse8) (res (= .cse15 .cse7) (let ((.cse36 (not true)) (.cse104 (<= 0 0))) (let ((.cse40 (not .cse104)) (.cse34 (= .cse36 false))) (let-proof ((.cse105 (total 0 0)) (.cse82 true+)) (let ((.cse37 (= .cse40 .cse36))) (let-proof ((.cse35 (res false (res .cse36 (=+1 .cse34) (res true .cse82 (not- .cse36))) .cse6)) (.cse38 (let ((.cse121 (= .cse104 true))) (res .cse121 (res true .cse82 (res .cse104 (res .cse33 .cse105 (farkas 1 .cse33)) (=+2 .cse121))) (cong (not .cse104) (not true))))) (.cse107 (not+ .cse40)) (.cse106 (not- .cse40))) (let ((.cse108 (= .cse110 false)) (.cse47 (= 0 0)) (.cse51 (= .cse53 .cse53))) (let-proof ((.cse109 (res .cse34 .cse35 (res (= .cse110 .cse36) (res .cse37 .cse38 (let ((.cse117 (= .cse110 .cse40))) (res .cse117 (let ((.cse119 (< 5 5))) (let ((.cse118 (= .cse110 .cse119))) (res .cse118 (>def 5 5) (res .cse40 (res .cse110 (=+1 .cse117) (res .cse119 (=-2 .cse118) (res .cse104 .cse107 (farkas 1 .cse119 1 .cse104)))) (res .cse110 (res .cse119 (let ((.cse120 (<= 5 5))) (res .cse120 (total 5 5) (res .cse104 (res .cse33 .cse105 (farkas 1 .cse120 1 .cse33)) .cse106))) (=-1 .cse118)) (=+2 .cse117)))))) (trans .cse110 .cse40 .cse36)))) (trans .cse110 .cse36 false)))) (.cse48 (refl 0)) (.cse52 (refl .cse53))) (res (= .cse16 .cse5) (res (= .cse17 .cse18) (let-proof ((.cse41 (res .cse104 .cse107 (farkas 1 .cse33 1 .cse104))) (.cse42 (res .cse104 .cse105 (res .cse104 (res .cse33 .cse105 (farkas 1 .cse104 1 .cse33)) .cse106)))) (let ((.cse91 (= .cse93 false))) (let-proof ((.cse92 (res .cse34 .cse35 (res (= .cse93 .cse36) (res .cse37 .cse38 (let ((.cse102 (= .cse93 .cse40))) (res .cse102 (let ((.cse103 (= .cse93 .cse33))) (res .cse103 (>def 0 0) (res .cse40 (res .cse93 (=+1 .cse102) (res .cse33 (=-2 .cse103) .cse41)) (res .cse93 (res .cse33 .cse42 (=-1 .cse103)) (=+2 .cse102))))) (trans .cse93 .cse40 .cse36)))) (trans .cse93 .cse36 false))))) (res (= .cse19 .cse20) (res (= .cse21 .cse22) (let ((.cse68 (= .cse70 .cse71))) (let-proof ((.cse69 (res (= .cse80 true) (let ((.cse83 (not false))) (let ((.cse81 (= .cse83 true))) (res .cse81 (res true .cse82 (res .cse83 (res false (not+ .cse83) .cse6) (=+2 .cse81))) (res (= .cse80 .cse83) (let ((.cse86 (<= 5 0))) (let ((.cse84 (not .cse86))) (res (= .cse84 .cse83) (let ((.cse85 (= .cse86 false))) (res .cse85 (res false (res .cse86 (=+1 .cse85) (farkas 1 .cse86)) .cse6) (cong (not .cse86) (not false)))) (let ((.cse87 (= .cse80 .cse84))) (res .cse87 (let ((.cse89 (< 0 5))) (let ((.cse88 (= .cse80 .cse89))) (res .cse88 (>def 5 0) (res .cse84 (res .cse80 (=+1 .cse87) (res .cse89 (=-2 .cse88) (res .cse86 (not+ .cse84) (farkas 1 .cse89 1 .cse86)))) (res .cse80 (res .cse89 (let-proof ((.cse90 (total 5 0))) (res .cse86 .cse90 (res .cse86 (res .cse89 .cse90 (farkas 1 .cse86 1 .cse89)) (not- .cse84)))) (=-1 .cse88)) (=+2 .cse87)))))) (trans .cse80 .cse84 .cse83)))))) (trans .cse80 .cse83 true))))) (res (= b1 b1) (refl b1) (cong (=> b1 .cse80) (=> b1 true)))))) (res (= .cse23 .cse24) (res (= .cse25 .cse26) (let ((.cse54 (= .cse56 .cse57))) (let-proof ((.cse55 (let ((.cse66 (= .cse67 false))) (res .cse66 (res false (res .cse67 (=+1 .cse66) (farkas 1 .cse67)) .cse6) (res (= b2 b2) (refl b2) (cong (=> b2 .cse67) (=> b2 false))))))) (res (= .cse27 .cse28) (res (= .cse29 .cse30) (res (= .cse31 .cse32) (res (= .cse33 false) (res .cse34 .cse35 (res (= .cse33 .cse36) (res .cse37 .cse38 (let ((.cse39 (= .cse33 .cse40))) (res .cse39 (res .cse40 (res .cse33 (=+1 .cse39) .cse41) (res .cse33 .cse42 (=+2 .cse39))) (trans .cse33 .cse40 .cse36)))) (trans .cse33 .cse36 false))) (res (= b3 b3) (refl b3) (cong (=> b3 .cse33) (=> b3 false)))) (res (= .cse43 .cse44) (res (= .cse45 (- 1)) (let ((.cse46 (* (- 1) 1))) (res (= .cse46 (- 1)) (poly* .cse46 (- 1)) (res .cse47 .cse48 (let ((.cse49 (+ 0 .cse46)) (.cse50 (+ 0 (- 1)))) (res (= .cse49 .cse50) (cong (+ 0 .cse46) (+ 0 (- 1))) (res (= .cse45 .cse49) (-def 0 1) (res (= .cse50 (- 1)) (poly+ .cse50 (- 1)) (trans .cse45 .cse49 .cse50 (- 1))))))))) (res .cse51 .cse52 (cong (= .cse53 .cse45) (= .cse53 (- 1))))) (cong (=> .cse43 .cse31) (=> .cse44 .cse32)))) (res .cse54 .cse55 (cong (=> .cse56 .cse29) (=> .cse57 .cse30)))) (res (= .cse58 .cse59) (res .cse54 .cse55 (res (= .cse60 .cse61) (res (= .cse62 (- 3)) (let ((.cse63 (* (- 1) 3))) (res (= .cse63 (- 3)) (poly* .cse63 (- 3)) (res .cse47 .cse48 (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 3)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 3))) (res (= .cse62 .cse64) (-def 0 3) (res (= .cse65 (- 3)) (poly+ .cse65 (- 3)) (trans .cse62 .cse64 .cse65 (- 3))))))))) (res .cse51 .cse52 (cong (= .cse53 .cse62) (= .cse53 (- 3))))) (cong (=> .cse60 .cse56) (=> .cse61 .cse57)))) (cong (and .cse58 .cse27) (and .cse59 .cse28)))))) (res .cse68 .cse69 (cong (=> .cse70 .cse25) (=> .cse71 .cse26)))) (res (= .cse72 .cse73) (res .cse68 .cse69 (res (= .cse74 .cse75) (res (= .cse76 (- 4)) (let ((.cse77 (* (- 1) 4))) (res (= .cse77 (- 4)) (poly* .cse77 (- 4)) (res .cse47 .cse48 (let ((.cse78 (+ 0 .cse77)) (.cse79 (+ 0 (- 4)))) (res (= .cse78 .cse79) (cong (+ 0 .cse77) (+ 0 (- 4))) (res (= .cse76 .cse78) (-def 0 4) (res (= .cse79 (- 4)) (poly+ .cse79 (- 4)) (trans .cse76 .cse78 .cse79 (- 4))))))))) (res .cse51 .cse52 (cong (= .cse53 .cse76) (= .cse53 (- 4))))) (cong (=> .cse74 .cse70) (=> .cse75 .cse71)))) (cong (and .cse72 .cse23) (and .cse73 .cse24)))))) (res .cse91 .cse92 (cong (=> .cse93 .cse21) (=> false .cse22)))) (res (= .cse94 .cse95) (res .cse91 .cse92 (res (= .cse96 .cse97) (res (= .cse98 (- 5)) (let ((.cse99 (* (- 1) 5))) (res (= .cse99 (- 5)) (poly* .cse99 (- 5)) (res .cse47 .cse48 (let ((.cse100 (+ 0 .cse99)) (.cse101 (+ 0 (- 5)))) (res (= .cse100 .cse101) (cong (+ 0 .cse99) (+ 0 (- 5))) (res (= .cse98 .cse100) (-def 0 5) (res (= .cse101 (- 5)) (poly+ .cse101 (- 5)) (trans .cse98 .cse100 .cse101 (- 5))))))))) (res .cse51 .cse52 (cong (= .cse53 .cse98) (= .cse53 (- 5))))) (cong (=> .cse96 .cse93) (=> .cse97 false)))) (cong (and .cse94 .cse19) (and .cse95 .cse20))))))) (res .cse108 .cse109 (cong (=> .cse110 .cse17) (=> false .cse18)))) (res (= .cse111 .cse1) (res .cse108 .cse109 (res (= .cse112 .cse2) (res (= .cse113 (- 6)) (let ((.cse114 (* (- 1) 6))) (res (= .cse114 (- 6)) (poly* .cse114 (- 6)) (res .cse47 .cse48 (let ((.cse115 (+ 0 .cse114)) (.cse116 (+ 0 (- 6)))) (res (= .cse115 .cse116) (cong (+ 0 .cse114) (+ 0 (- 6))) (res (= .cse113 .cse115) (-def 0 6) (res (= .cse116 (- 6)) (poly+ .cse116 (- 6)) (trans .cse113 .cse115 .cse116 (- 6))))))))) (res .cse51 .cse52 (cong (= .cse53 .cse113) (= .cse53 (- 6))))) (cong (=> .cse112 .cse110) (=> .cse2 false)))) (cong (and .cse111 .cse16) (and .cse1 .cse5))))))))))) (res (= .cse122 .cse122) (refl .cse122) (cong (=> .cse122 .cse15) (=> .cse122 .cse7)))) (res (= .cse123 .cse123) (refl .cse123) (cong (=> .cse123 .cse14) (=> .cse123 .cse8)))) (cong (not .cse10) (not .cse9))) (=-2 .cse13)))) (not- .cse11))) (res .cse12 (assume .cse12) (not- .cse12))))))))))))))))))))))))) :proves (- .cse1 - .cse5) :input)))))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse125 (not .cse2))) (res .cse2 (let ((.cse124 (not .cse0))) (res .cse124 (res .cse125 (not+ .cse125) (let ((.cse126 (= .cse125 .cse124))) (res .cse126 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse126)))) (not- .cse124))) (res .cse125 (assume .cse125) (not- .cse125)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
