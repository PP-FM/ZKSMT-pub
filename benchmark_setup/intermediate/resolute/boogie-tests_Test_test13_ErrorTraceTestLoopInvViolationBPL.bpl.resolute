success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test13_ErrorTraceTestLoopInvViolationBPL.bpl.mod.smt2:26:10: Logical context not inconsistent!")
unsat
(! (let ((.cse19 (ControlFlow 0 2))) (let ((.cse1 (= .cse19 (- 1))) (.cse0 (= (- 1) .cse19))) (let ((.cse22 (= .cse1 .cse0))) (let-proof ((.cse23 (res .cse0 (res .cse1 (=+1 .cse22) (symm (- 1) .cse19)) (res .cse1 (symm .cse19 (- 1)) (=+2 .cse22))))) (res .cse0 (! (res .cse1 (let ((.cse2 (=> .cse1 false))) (res .cse2 (=>+ 0 .cse2) (let ((.cse20 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse20 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse21 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse21 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse15 (- 0 1))) (let ((.cse14 (= .cse19 .cse15)) (.cse12 (= 0 1))) (let ((.cse10 (=> .cse14 .cse12))) (let ((.cse9 (=> .cse20 .cse10))) (let ((.cse5 (=> .cse21 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (let ((.cse11 (= .cse12 false))) (res .cse11 (res false (res .cse12 (=+1 .cse11) (let ((.cse13 (= 1 0))) (res .cse13 (symm 1 0) (farkas 1 .cse13)))) false-) (res (= .cse14 .cse1) (res (= .cse15 (- 1)) (let ((.cse16 (* (- 1) 1))) (res (= .cse16 (- 1)) (poly* .cse16 (- 1)) (res (= 0 0) (refl 0) (let ((.cse17 (+ 0 .cse16)) (.cse18 (+ 0 (- 1)))) (res (= .cse17 .cse18) (cong (+ 0 .cse16) (+ 0 (- 1))) (res (= .cse15 .cse17) (-def 0 1) (res (= .cse18 (- 1)) (poly+ .cse18 (- 1)) (trans .cse15 .cse17 .cse18 (- 1))))))))) (res (= .cse19 .cse19) (refl .cse19) (cong (= .cse19 .cse15) (= .cse19 (- 1))))) (cong (=> .cse14 .cse12) (=> .cse1 false))))) (res (= .cse20 .cse20) (refl .cse20) (cong (=> .cse20 .cse10) (=> .cse20 .cse2)))) (res (= .cse21 .cse21) (refl .cse21) (cong (=> .cse21 .cse9) (=> .cse21 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7))))))))))))))))) (res .cse22 .cse23 (=-2 .cse22))) :proves (+ .cse0) :input) (! (let ((.cse25 (not .cse1))) (res .cse1 (let ((.cse24 (not .cse0))) (res .cse24 (res .cse25 (not+ .cse25) (let ((.cse26 (= .cse25 .cse24))) (res .cse26 (res .cse22 .cse23 (cong (not .cse1) (not .cse0))) (=-2 .cse26)))) (not- .cse24))) (res .cse25 (assume .cse25) (not- .cse25)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test13_ErrorTraceTestLoopInvViolationBPL.bpl.mod.smt2:66:10: Logical context not inconsistent!")
unsat
(! (let ((.cse51 (ControlFlow 0 5))) (let ((.cse2 (= .cse51 (- 6))) (.cse0 (= (- 6) .cse51))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 6) .cse51)) (res .cse2 (symm .cse51 (- 6)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse44 (= y 1))) (let ((.cse1 (=> .cse2 .cse44))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse38 (ControlFlow 0 3))) (let ((.cse31 (= .cse38 (- 2))) (.cse54 (ControlFlow 0 4))) (let ((.cse39 (= .cse54 3)) (.cse9 (=> .cse31 true))) (let ((.cse11 (=> (= .cse54 1) true)) (.cse8 (=> .cse39 .cse9))) (let ((.cse40 (= x@0 1)) (.cse12 (and .cse11 .cse8))) (let ((.cse41 (= .cse51 4)) (.cse7 (=> .cse40 .cse12))) (let ((.cse6 (=> .cse41 .cse7))) (let ((.cse5 (=> .cse44 .cse6))) (let-proof ((.cse10 true+)) (res .cse5 (! (res .cse6 (! (res .cse7 (! (res .cse8 (! (res .cse9 (! (res true .cse10 (=>+ 1 .cse9)) :proves (+ .cse9) :input) (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse9) :input)) :proves (+ .cse8) :rup) (res .cse11 (! (res true .cse10 (=>+ 1 .cse11)) :proves (+ .cse11) :input) (! (res .cse12 (and+ .cse12) (=>+ 1 .cse7)) :proves (+ .cse7 - .cse11 - .cse8) :input))) :proves (+ .cse7) :rup) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (! (let ((.cse13 (and .cse1 .cse5))) (res .cse13 (and+ .cse13) (let ((.cse52 (= (ControlFlow 0 7) 5))) (let ((.cse14 (=> .cse52 .cse13))) (res .cse14 (=>+ 1 .cse14) (let ((.cse53 (= (ControlFlow 0 0) 7))) (let ((.cse15 (=> .cse53 .cse14))) (res .cse15 (=>+ 1 .cse15) (let ((.cse32 (- 0 2))) (let ((.cse30 (= .cse38 .cse32)) (.cse29 (= 1 1))) (let ((.cse27 (=> .cse30 .cse29))) (let ((.cse26 (=> .cse39 .cse27))) (let ((.cse25 (and .cse11 .cse26))) (let ((.cse47 (- 0 6)) (.cse24 (=> .cse40 .cse25))) (let ((.cse23 (=> .cse41 .cse24)) (.cse46 (= .cse51 .cse47))) (let ((.cse45 (=> .cse46 .cse44)) (.cse22 (=> .cse44 .cse23))) (let ((.cse21 (and .cse45 .cse22))) (let ((.cse20 (=> .cse52 .cse21))) (let ((.cse16 (=> .cse53 .cse20))) (let ((.cse18 (not .cse16))) (res .cse16 (let ((.cse17 (not .cse15))) (res .cse17 (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (res (= .cse16 .cse15) (res (= .cse20 .cse14) (res (= .cse21 .cse13) (let ((.cse42 (= .cse44 .cse44)) (.cse34 (= 0 0))) (let-proof ((.cse43 (refl .cse44)) (.cse35 (refl 0))) (res (= .cse22 .cse5) (res (= .cse23 .cse6) (res (= .cse24 .cse7) (res (= .cse25 .cse12) (res (= .cse26 .cse8) (res (= .cse27 .cse9) (let ((.cse28 (= .cse29 true))) (res .cse28 (res true .cse10 (res .cse29 (refl 1) (=+2 .cse28))) (res (= .cse30 .cse31) (res (= .cse32 (- 2)) (let ((.cse33 (* (- 1) 2))) (res (= .cse33 (- 2)) (poly* .cse33 (- 2)) (res .cse34 .cse35 (let ((.cse36 (+ 0 .cse33)) (.cse37 (+ 0 (- 2)))) (res (= .cse36 .cse37) (cong (+ 0 .cse33) (+ 0 (- 2))) (res (= .cse32 .cse36) (-def 0 2) (res (= .cse37 (- 2)) (poly+ .cse37 (- 2)) (trans .cse32 .cse36 .cse37 (- 2))))))))) (res (= .cse38 .cse38) (refl .cse38) (cong (= .cse38 .cse32) (= .cse38 (- 2))))) (cong (=> .cse30 .cse29) (=> .cse31 true))))) (res (= .cse39 .cse39) (refl .cse39) (cong (=> .cse39 .cse27) (=> .cse39 .cse9)))) (res (= .cse11 .cse11) (refl .cse11) (cong (and .cse11 .cse26) (and .cse11 .cse8)))) (res (= .cse40 .cse40) (refl .cse40) (cong (=> .cse40 .cse25) (=> .cse40 .cse12)))) (res (= .cse41 .cse41) (refl .cse41) (cong (=> .cse41 .cse24) (=> .cse41 .cse7)))) (res .cse42 .cse43 (cong (=> .cse44 .cse23) (=> .cse44 .cse6)))) (res (= .cse45 .cse1) (res .cse42 .cse43 (res (= .cse46 .cse2) (res (= .cse47 (- 6)) (let ((.cse48 (* (- 1) 6))) (res (= .cse48 (- 6)) (poly* .cse48 (- 6)) (res .cse34 .cse35 (let ((.cse49 (+ 0 .cse48)) (.cse50 (+ 0 (- 6)))) (res (= .cse49 .cse50) (cong (+ 0 .cse48) (+ 0 (- 6))) (res (= .cse47 .cse49) (-def 0 6) (res (= .cse50 (- 6)) (poly+ .cse50 (- 6)) (trans .cse47 .cse49 .cse50 (- 6))))))))) (res (= .cse51 .cse51) (refl .cse51) (cong (= .cse51 .cse47) (= .cse51 (- 6))))) (cong (=> .cse46 .cse44) (=> .cse2 .cse44)))) (cong (and .cse45 .cse22) (and .cse1 .cse5)))))) (res (= .cse52 .cse52) (refl .cse52) (cong (=> .cse52 .cse21) (=> .cse52 .cse13)))) (res (= .cse53 .cse53) (refl .cse53) (cong (=> .cse53 .cse20) (=> .cse53 .cse14)))) (cong (not .cse16) (not .cse15))) (=-2 .cse19)))) (not- .cse17))) (res .cse18 (assume .cse18) (not- .cse18))))))))))))))))))))))) :proves (- .cse1 - .cse5) :input))))))))))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse56 (not .cse2))) (res .cse2 (let ((.cse55 (not .cse0))) (res .cse55 (res .cse56 (not+ .cse56) (let ((.cse57 (= .cse56 .cse55))) (res .cse57 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse57)))) (not- .cse55))) (res .cse56 (assume .cse56) (not- .cse56)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test13_ErrorTraceTestLoopInvViolationBPL.bpl.mod.smt2:105:10: Logical context not inconsistent!")
unsat
(! (let ((.cse37 (ControlFlow 0 3))) (let ((.cse2 (= .cse37 (- 2))) (.cse0 (= (- 2) .cse37))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 2) .cse37)) (res .cse2 (symm .cse37 (- 2)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse53 (ControlFlow 0 4))) (let ((.cse38 (= .cse53 3))) (let ((.cse5 (=> .cse38 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse6 (=> (= .cse53 1) true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (let ((.cse39 (= x@0 0)) (.cse9 (and .cse6 .cse5))) (let ((.cse8 (=> .cse39 .cse9))) (res .cse8 (! (res .cse9 (and+ .cse9) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse5 - .cse6) :input) (! (let ((.cse50 (ControlFlow 0 5))) (let ((.cse40 (= .cse50 4))) (let ((.cse10 (=> .cse40 .cse8))) (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse8) :input) (! (let ((.cse11 (=> true .cse10))) (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse10) :input) (! (let ((.cse45 (= .cse50 (- 6)))) (let ((.cse12 (=> .cse45 true))) (res .cse12 (! (res true .cse7 (=>+ 1 .cse12)) :proves (+ .cse12) :input) (! (let ((.cse13 (and .cse12 .cse11))) (res .cse13 (and+ .cse13) (let ((.cse51 (= (ControlFlow 0 7) 5))) (let ((.cse14 (=> .cse51 .cse13))) (res .cse14 (=>+ 1 .cse14) (let ((.cse52 (= (ControlFlow 0 0) 7))) (let ((.cse15 (=> .cse52 .cse14))) (res .cse15 (=>+ 1 .cse15) (let ((.cse31 (- 0 2))) (let ((.cse30 (= .cse37 .cse31)) (.cse29 (= 1 0))) (let ((.cse27 (=> .cse30 .cse29))) (let ((.cse26 (=> .cse38 .cse27))) (let ((.cse25 (and .cse6 .cse26))) (let ((.cse46 (- 0 6)) (.cse24 (=> .cse39 .cse25))) (let ((.cse23 (=> .cse40 .cse24)) (.cse44 (= .cse50 .cse46)) (.cse33 (= 0 0))) (let ((.cse43 (=> .cse44 .cse33)) (.cse22 (=> .cse33 .cse23))) (let ((.cse21 (and .cse43 .cse22))) (let ((.cse20 (=> .cse51 .cse21))) (let ((.cse16 (=> .cse52 .cse20))) (let ((.cse18 (not .cse16))) (res .cse16 (let ((.cse17 (not .cse15))) (res .cse17 (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (res (= .cse16 .cse15) (res (= .cse20 .cse14) (res (= .cse21 .cse13) (let ((.cse41 (= .cse33 true))) (let-proof ((.cse34 (refl 0))) (let-proof ((.cse42 (res true .cse7 (res .cse33 .cse34 (=+2 .cse41))))) (res (= .cse22 .cse11) (res (= .cse23 .cse10) (res (= .cse24 .cse8) (res (= .cse25 .cse9) (res (= .cse26 .cse5) (res (= .cse27 .cse1) (let ((.cse28 (= .cse29 false))) (res .cse28 (res false (res .cse29 (=+1 .cse28) (farkas 1 .cse29)) false-) (res (= .cse30 .cse2) (res (= .cse31 (- 2)) (let ((.cse32 (* (- 1) 2))) (res (= .cse32 (- 2)) (poly* .cse32 (- 2)) (res .cse33 .cse34 (let ((.cse35 (+ 0 .cse32)) (.cse36 (+ 0 (- 2)))) (res (= .cse35 .cse36) (cong (+ 0 .cse32) (+ 0 (- 2))) (res (= .cse31 .cse35) (-def 0 2) (res (= .cse36 (- 2)) (poly+ .cse36 (- 2)) (trans .cse31 .cse35 .cse36 (- 2))))))))) (res (= .cse37 .cse37) (refl .cse37) (cong (= .cse37 .cse31) (= .cse37 (- 2))))) (cong (=> .cse30 .cse29) (=> .cse2 false))))) (res (= .cse38 .cse38) (refl .cse38) (cong (=> .cse38 .cse27) (=> .cse38 .cse1)))) (res (= .cse6 .cse6) (refl .cse6) (cong (and .cse6 .cse26) (and .cse6 .cse5)))) (res (= .cse39 .cse39) (refl .cse39) (cong (=> .cse39 .cse25) (=> .cse39 .cse9)))) (res (= .cse40 .cse40) (refl .cse40) (cong (=> .cse40 .cse24) (=> .cse40 .cse8)))) (res .cse41 .cse42 (cong (=> .cse33 .cse23) (=> true .cse10)))) (res (= .cse43 .cse12) (res .cse41 .cse42 (res (= .cse44 .cse45) (res (= .cse46 (- 6)) (let ((.cse47 (* (- 1) 6))) (res (= .cse47 (- 6)) (poly* .cse47 (- 6)) (res .cse33 .cse34 (let ((.cse48 (+ 0 .cse47)) (.cse49 (+ 0 (- 6)))) (res (= .cse48 .cse49) (cong (+ 0 .cse47) (+ 0 (- 6))) (res (= .cse46 .cse48) (-def 0 6) (res (= .cse49 (- 6)) (poly+ .cse49 (- 6)) (trans .cse46 .cse48 .cse49 (- 6))))))))) (res (= .cse50 .cse50) (refl .cse50) (cong (= .cse50 .cse46) (= .cse50 (- 6))))) (cong (=> .cse44 .cse33) (=> .cse45 true)))) (cong (and .cse43 .cse22) (and .cse12 .cse11))))))) (res (= .cse51 .cse51) (refl .cse51) (cong (=> .cse51 .cse21) (=> .cse51 .cse13)))) (res (= .cse52 .cse52) (refl .cse52) (cong (=> .cse52 .cse20) (=> .cse52 .cse14)))) (cong (not .cse16) (not .cse15))) (=-2 .cse19)))) (not- .cse17))) (res .cse18 (assume .cse18) (not- .cse18))))))))))))))))))))))) :proves (- .cse12 - .cse11) :input)))) :proves (- .cse11) :rup))) :proves (- .cse10) :rup))))) :proves (- .cse8) :rup))))))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse55 (not .cse2))) (res .cse2 (let ((.cse54 (not .cse0))) (res .cse54 (res .cse55 (not+ .cse55) (let ((.cse56 (= .cse55 .cse54))) (res .cse56 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse56)))) (not- .cse54))) (res .cse55 (assume .cse55) (not- .cse55)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
