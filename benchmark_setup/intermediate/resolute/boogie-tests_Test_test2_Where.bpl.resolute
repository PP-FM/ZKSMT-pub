success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_Where.bpl.mod.smt2:28:10: Logical context not inconsistent!")
unsat
(! (let ((.cse61 (ControlFlow 0 2))) (let ((.cse2 (= .cse61 (- 1))) (.cse0 (= (- 1) .cse61))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse61)) (res .cse2 (symm .cse61 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse94 (* (- 1) y))) (let ((.cse51 (+ .cse94 5))) (let ((.cse48 (<= .cse51 0))) (let ((.cse46 (not .cse48))) (let ((.cse1 (=> .cse2 .cse46))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse88 (+ x .cse94))) (let ((.cse7 (<= .cse88 0))) (let ((.cse5 (=> .cse7 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse67 (= .cse61 (- 3)))) (let ((.cse93 (* (- 1) x)) (.cse6 (=> .cse67 .cse7))) (let ((.cse13 (and .cse6 .cse5)) (.cse77 (= .cse61 (- 4))) (.cse16 (<= .cse93 0))) (let ((.cse14 (=> .cse77 .cse16)) (.cse12 (=> .cse16 .cse13)) (.cse8 (and .cse7 true)) (.cse83 (= (ControlFlow 0 5) 2))) (let ((.cse9 (and .cse8 .cse83)) (.cse32 (and .cse14 .cse12))) (let ((.cse24 (and .cse16 true)) (.cse10 (=> .cse9 .cse32))) (let ((.cse28 (< 0 .cse93)) (.cse25 (=> .cse24 .cse10))) (let-proof ((.cse29 (total .cse93 0))) (let-proof ((.cse26 (let ((.cse92 (= (ControlFlow 0 0) 5))) (let ((.cse33 (=> .cse92 .cse25))) (res .cse33 (=>+ 1 .cse33) (let ((.cse53 (- 0 1))) (let ((.cse68 (- 0 3)) (.cse52 (= .cse61 .cse53)) (.cse47 (< y 5))) (let ((.cse44 (=> .cse52 .cse47)) (.cse66 (= .cse61 .cse68)) (.cse64 (<= x y))) (let ((.cse78 (- 0 4)) (.cse65 (=> .cse66 .cse64)) (.cse43 (=> .cse64 .cse44))) (let ((.cse42 (and .cse65 .cse43)) (.cse76 (= .cse61 .cse78)) (.cse74 (<= 0 x))) (let ((.cse75 (=> .cse76 .cse74)) (.cse41 (=> .cse74 .cse42)) (.cse84 (and .cse64 true))) (let ((.cse82 (and .cse84 .cse83)) (.cse40 (and .cse75 .cse41))) (let ((.cse90 (and .cse74 true)) (.cse39 (=> .cse82 .cse40))) (let ((.cse38 (=> .cse90 .cse39))) (let ((.cse34 (=> .cse92 .cse38))) (let ((.cse36 (not .cse34))) (res .cse34 (let ((.cse35 (not .cse33))) (res .cse35 (res .cse36 (not+ .cse36) (let ((.cse37 (= .cse36 .cse35))) (res .cse37 (res (= .cse34 .cse33) (res (= .cse38 .cse25) (let ((.cse72 (= .cse74 .cse16))) (let ((.cse85 (= true true))) (let-proof ((.cse86 (refl true)) (.cse73 (res .cse16 (res .cse74 (=+1 .cse72) (res .cse28 .cse29 (farkas 1 .cse74 1 .cse28))) (res .cse74 (let ((.cse91 (< x 0))) (res .cse91 (total 0 x) (farkas 1 .cse91 1 .cse16))) (=+2 .cse72))))) (res (= .cse39 .cse10) (let ((.cse62 (= .cse64 .cse7))) (let-proof ((.cse63 (res .cse7 (res .cse64 (=+1 .cse62) (let ((.cse87 (< 0 .cse88))) (res .cse87 (total .cse88 0) (farkas 1 .cse64 1 .cse87)))) (res .cse64 (let ((.cse89 (< y x))) (res .cse89 (total x y) (farkas 1 .cse89 1 .cse7))) (=+2 .cse62))))) (res (= .cse40 .cse32) (let ((.cse55 (= 0 0)) (.cse59 (= .cse61 .cse61))) (let-proof ((.cse56 (refl 0)) (.cse60 (refl .cse61))) (res (= .cse41 .cse12) (res (= .cse42 .cse13) (res (= .cse43 .cse5) (res (= .cse44 .cse1) (let ((.cse45 (= .cse47 .cse46))) (res .cse45 (res .cse46 (res .cse47 (=+1 .cse45) (res .cse48 (not+ .cse46) (farkas 1 .cse47 1 .cse48))) (res .cse47 (let ((.cse49 (<= 5 y))) (res .cse49 (total 5 y) (res .cse48 (let ((.cse50 (< 0 .cse51))) (res .cse50 (total .cse51 0) (farkas 1 .cse49 1 .cse50))) (not- .cse46)))) (=+2 .cse45))) (res (= .cse52 .cse2) (res (= .cse53 (- 1)) (let ((.cse54 (* (- 1) 1))) (res (= .cse54 (- 1)) (poly* .cse54 (- 1)) (res .cse55 .cse56 (let ((.cse57 (+ 0 .cse54)) (.cse58 (+ 0 (- 1)))) (res (= .cse57 .cse58) (cong (+ 0 .cse54) (+ 0 (- 1))) (res (= .cse53 .cse57) (-def 0 1) (res (= .cse58 (- 1)) (poly+ .cse58 (- 1)) (trans .cse53 .cse57 .cse58 (- 1))))))))) (res .cse59 .cse60 (cong (= .cse61 .cse53) (= .cse61 (- 1))))) (cong (=> .cse52 .cse47) (=> .cse2 .cse46))))) (res .cse62 .cse63 (cong (=> .cse64 .cse44) (=> .cse7 .cse1)))) (res (= .cse65 .cse6) (res .cse62 .cse63 (res (= .cse66 .cse67) (res (= .cse68 (- 3)) (let ((.cse69 (* (- 1) 3))) (res (= .cse69 (- 3)) (poly* .cse69 (- 3)) (res .cse55 .cse56 (let ((.cse70 (+ 0 .cse69)) (.cse71 (+ 0 (- 3)))) (res (= .cse70 .cse71) (cong (+ 0 .cse69) (+ 0 (- 3))) (res (= .cse68 .cse70) (-def 0 3) (res (= .cse71 (- 3)) (poly+ .cse71 (- 3)) (trans .cse68 .cse70 .cse71 (- 3))))))))) (res .cse59 .cse60 (cong (= .cse61 .cse68) (= .cse61 (- 3))))) (cong (=> .cse66 .cse64) (=> .cse67 .cse7)))) (cong (and .cse65 .cse43) (and .cse6 .cse5)))) (res .cse72 .cse73 (cong (=> .cse74 .cse42) (=> .cse16 .cse13)))) (res (= .cse75 .cse14) (res .cse72 .cse73 (res (= .cse76 .cse77) (res (= .cse78 (- 4)) (let ((.cse79 (* (- 1) 4))) (res (= .cse79 (- 4)) (poly* .cse79 (- 4)) (res .cse55 .cse56 (let ((.cse80 (+ 0 .cse79)) (.cse81 (+ 0 (- 4)))) (res (= .cse80 .cse81) (cong (+ 0 .cse79) (+ 0 (- 4))) (res (= .cse78 .cse80) (-def 0 4) (res (= .cse81 (- 4)) (poly+ .cse81 (- 4)) (trans .cse78 .cse80 .cse81 (- 4))))))))) (res .cse59 .cse60 (cong (= .cse61 .cse78) (= .cse61 (- 4))))) (cong (=> .cse76 .cse74) (=> .cse77 .cse16)))) (cong (and .cse75 .cse41) (and .cse14 .cse12)))))) (res (= .cse82 .cse9) (res (= .cse83 .cse83) (refl .cse83) (res (= .cse84 .cse8) (res .cse85 .cse86 (res .cse62 .cse63 (cong (and .cse64 true) (and .cse7 true)))) (cong (and .cse84 .cse83) (and .cse8 .cse83)))) (cong (=> .cse82 .cse40) (=> .cse9 .cse32)))))) (res (= .cse90 .cse24) (res .cse85 .cse86 (res .cse72 .cse73 (cong (and .cse74 true) (and .cse16 true)))) (cong (=> .cse90 .cse39) (=> .cse24 .cse10))))))) (res (= .cse92 .cse92) (refl .cse92) (cong (=> .cse92 .cse38) (=> .cse92 .cse25)))) (cong (not .cse34) (not .cse33))) (=-2 .cse37)))) (not- .cse35))) (res .cse36 (assume .cse36) (not- .cse36))))))))))))))))))) (let-proof ((.cse11 (res .cse25 (=>+ 1 .cse25) .cse26))) (res .cse6 (! (res .cse7 (! (res .cse8 (res .cse9 (res .cse10 (=>+ 0 .cse10) .cse11) (and- 0 .cse9)) (and- 0 .cse8)) :proves (+ .cse7) :input) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (res .cse12 (! (res .cse13 (and+ .cse13) (=>+ 1 .cse12)) :proves (+ .cse12 - .cse5 - .cse6) :input) (! (res .cse14 (! (let ((.cse31 (+ x 1))) (let ((.cse15 (<= .cse31 0))) (let ((.cse17 (not .cse15))) (let ((.cse22 (= .cse16 .cse17))) (let-proof ((.cse18 (not+ .cse17)) (.cse27 (not- .cse17))) (let-proof ((.cse23 (res .cse17 (res .cse16 (=+1 .cse22) (res .cse15 .cse18 (farkas 1 .cse16 1 .cse15))) (res .cse16 (res .cse28 .cse29 (res .cse15 (let ((.cse30 (<= 1 .cse31))) (res .cse30 (total-int .cse31 0) (farkas 1 .cse28 1 .cse30))) .cse27)) (=+2 .cse22))))) (res .cse15 (! (res .cse16 (res .cse17 .cse18 (let ((.cse19 (not .cse17))) (res .cse19 (let ((.cse20 (not .cse16))) (res .cse20 (not+ .cse20) (let ((.cse21 (= .cse20 .cse19))) (res .cse21 (res .cse22 .cse23 (cong (not .cse16) (not .cse17))) (=-2 .cse21))))) (not- .cse19)))) (=>+ 1 .cse14)) :proves (+ .cse14 + .cse15) :input) (! (res .cse16 (res .cse24 (res .cse25 (=>+ 0 .cse25) .cse26) (and- 0 .cse24)) (res .cse17 (res .cse22 .cse23 (=-2 .cse22)) .cse27)) :proves (- .cse15) :input)))))))) :proves (+ .cse14) :rup) (! (res .cse32 (and+ .cse32) (res .cse10 (=>+ 1 .cse10) .cse11)) :proves (- .cse14 - .cse12) :input)) :proves (- .cse12) :rup))))))))))))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup))))))) :proves (+ .cse0) :rup) (! (let ((.cse96 (not .cse2))) (res .cse2 (let ((.cse95 (not .cse0))) (res .cse95 (res .cse96 (not+ .cse96) (let ((.cse97 (= .cse96 .cse95))) (res .cse97 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse97)))) (not- .cse95))) (res .cse96 (assume .cse96) (not- .cse96)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_Where.bpl.mod.smt2:67:10: Logical context not inconsistent!")
unsat
(! (let ((.cse74 (ControlFlow 0 2))) (let ((.cse2 (= .cse74 (- 1))) (.cse0 (= (- 1) .cse74))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse74)) (res .cse2 (symm .cse74 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse120 (* (- 1) y@0))) (let ((.cse63 (+ x@0 .cse120))) (let ((.cse60 (<= .cse63 0))) (let ((.cse1 (=> .cse2 .cse60))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse121 (* (- 1) x@0))) (let ((.cse9 (<= .cse121 0))) (let ((.cse5 (=> .cse9 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse80 (= .cse74 (- 3)))) (let ((.cse7 (=> .cse80 .cse9))) (let ((.cse23 (and .cse7 .cse5))) (let ((.cse19 (< 0 .cse121)) (.cse6 (=> .cse9 .cse23))) (let-proof ((.cse20 (total .cse121 0))) (let-proof ((.cse18 (! (let ((.cse119 (+ .cse120 5))) (let ((.cse27 (<= .cse119 0))) (let ((.cse24 (=> .cse27 .cse6))) (res .cse24 (! (=>+ 1 .cse24) :proves (+ .cse24 - .cse6) :input) (! (let ((.cse91 (= .cse74 (- 4)))) (let ((.cse25 (=> .cse91 .cse27))) (let ((.cse42 (and .cse25 .cse24))) (let ((.cse38 (< 0 .cse119)) (.cse35 (=> .cse27 .cse42))) (let-proof ((.cse39 (total .cse119 0))) (let-proof ((.cse36 (let ((.cse108 (+ x (* (- 1) y)))) (let ((.cse105 (<= .cse108 0))) (let ((.cse101 (and .cse105 true)) (.cse99 (= (ControlFlow 0 5) 2))) (let ((.cse98 (and .cse101 .cse99))) (let ((.cse43 (=> .cse98 .cse35))) (res .cse43 (=>+ 1 .cse43) (let ((.cse116 (* (- 1) x))) (let ((.cse113 (<= .cse116 0))) (let ((.cse111 (and .cse113 true))) (let ((.cse44 (=> .cse111 .cse43))) (res .cse44 (=>+ 1 .cse44) (let ((.cse118 (= (ControlFlow 0 0) 5))) (let ((.cse45 (=> .cse118 .cse44))) (res .cse45 (=>+ 1 .cse45) (let ((.cse66 (- 0 1))) (let ((.cse81 (- 0 3)) (.cse65 (= .cse74 .cse66)) (.cse61 (<= x@0 y@0))) (let ((.cse58 (=> .cse65 .cse61)) (.cse79 (= .cse74 .cse81)) (.cse77 (<= 0 x@0))) (let ((.cse78 (=> .cse79 .cse77)) (.cse57 (=> .cse77 .cse58))) (let ((.cse92 (- 0 4)) (.cse56 (and .cse78 .cse57))) (let ((.cse55 (=> .cse77 .cse56)) (.cse90 (= .cse74 .cse92)) (.cse88 (<= 5 y@0))) (let ((.cse106 (<= x y)) (.cse89 (=> .cse90 .cse88)) (.cse54 (=> .cse88 .cse55))) (let ((.cse53 (and .cse89 .cse54)) (.cse100 (and .cse106 true))) (let ((.cse97 (and .cse100 .cse99)) (.cse52 (=> .cse88 .cse53)) (.cse114 (<= 0 x))) (let ((.cse110 (and .cse114 true)) (.cse51 (=> .cse97 .cse52))) (let ((.cse50 (=> .cse110 .cse51))) (let ((.cse46 (=> .cse118 .cse50))) (let ((.cse48 (not .cse46))) (res .cse46 (let ((.cse47 (not .cse45))) (res .cse47 (res .cse48 (not+ .cse48) (let ((.cse49 (= .cse48 .cse47))) (res .cse49 (res (= .cse46 .cse45) (res (= .cse50 .cse44) (let ((.cse102 (= true true))) (let-proof ((.cse103 (refl true))) (res (= .cse51 .cse43) (res (= .cse52 .cse35) (let ((.cse86 (= .cse88 .cse27))) (let-proof ((.cse87 (res .cse27 (res .cse88 (=+1 .cse86) (res .cse38 .cse39 (farkas 1 .cse88 1 .cse38))) (res .cse88 (let ((.cse96 (< y@0 5))) (res .cse96 (total 5 y@0) (farkas 1 .cse96 1 .cse27))) (=+2 .cse86))))) (res (= .cse53 .cse42) (let ((.cse68 (= 0 0)) (.cse72 (= .cse74 .cse74))) (let-proof ((.cse69 (refl 0)) (.cse73 (refl .cse74))) (res (= .cse54 .cse24) (res (= .cse55 .cse6) (let ((.cse75 (= .cse77 .cse9))) (let-proof ((.cse76 (res .cse9 (res .cse77 (=+1 .cse75) (res .cse19 .cse20 (farkas 1 .cse77 1 .cse19))) (res .cse77 (let ((.cse85 (< x@0 0))) (res .cse85 (total 0 x@0) (farkas 1 .cse85 1 .cse9))) (=+2 .cse75))))) (res (= .cse56 .cse23) (res (= .cse57 .cse5) (res (= .cse58 .cse1) (let ((.cse59 (= .cse61 .cse60))) (res .cse59 (res .cse60 (res .cse61 (=+1 .cse59) (let ((.cse62 (< 0 .cse63))) (res .cse62 (total .cse63 0) (farkas 1 .cse61 1 .cse62)))) (res .cse61 (let ((.cse64 (< y@0 x@0))) (res .cse64 (total x@0 y@0) (farkas 1 .cse64 1 .cse60))) (=+2 .cse59))) (res (= .cse65 .cse2) (res (= .cse66 (- 1)) (let ((.cse67 (* (- 1) 1))) (res (= .cse67 (- 1)) (poly* .cse67 (- 1)) (res .cse68 .cse69 (let ((.cse70 (+ 0 .cse67)) (.cse71 (+ 0 (- 1)))) (res (= .cse70 .cse71) (cong (+ 0 .cse67) (+ 0 (- 1))) (res (= .cse66 .cse70) (-def 0 1) (res (= .cse71 (- 1)) (poly+ .cse71 (- 1)) (trans .cse66 .cse70 .cse71 (- 1))))))))) (res .cse72 .cse73 (cong (= .cse74 .cse66) (= .cse74 (- 1))))) (cong (=> .cse65 .cse61) (=> .cse2 .cse60))))) (res .cse75 .cse76 (cong (=> .cse77 .cse58) (=> .cse9 .cse1)))) (res (= .cse78 .cse7) (res .cse75 .cse76 (res (= .cse79 .cse80) (res (= .cse81 (- 3)) (let ((.cse82 (* (- 1) 3))) (res (= .cse82 (- 3)) (poly* .cse82 (- 3)) (res .cse68 .cse69 (let ((.cse83 (+ 0 .cse82)) (.cse84 (+ 0 (- 3)))) (res (= .cse83 .cse84) (cong (+ 0 .cse82) (+ 0 (- 3))) (res (= .cse81 .cse83) (-def 0 3) (res (= .cse84 (- 3)) (poly+ .cse84 (- 3)) (trans .cse81 .cse83 .cse84 (- 3))))))))) (res .cse72 .cse73 (cong (= .cse74 .cse81) (= .cse74 (- 3))))) (cong (=> .cse79 .cse77) (=> .cse80 .cse9)))) (cong (and .cse78 .cse57) (and .cse7 .cse5)))) (res .cse75 .cse76 (cong (=> .cse77 .cse56) (=> .cse9 .cse23)))))) (res .cse86 .cse87 (cong (=> .cse88 .cse55) (=> .cse27 .cse6)))) (res (= .cse89 .cse25) (res .cse86 .cse87 (res (= .cse90 .cse91) (res (= .cse92 (- 4)) (let ((.cse93 (* (- 1) 4))) (res (= .cse93 (- 4)) (poly* .cse93 (- 4)) (res .cse68 .cse69 (let ((.cse94 (+ 0 .cse93)) (.cse95 (+ 0 (- 4)))) (res (= .cse94 .cse95) (cong (+ 0 .cse93) (+ 0 (- 4))) (res (= .cse92 .cse94) (-def 0 4) (res (= .cse95 (- 4)) (poly+ .cse95 (- 4)) (trans .cse92 .cse94 .cse95 (- 4))))))))) (res .cse72 .cse73 (cong (= .cse74 .cse92) (= .cse74 (- 4))))) (cong (=> .cse90 .cse88) (=> .cse91 .cse27)))) (cong (and .cse89 .cse54) (and .cse25 .cse24)))))) (res .cse86 .cse87 (cong (=> .cse88 .cse53) (=> .cse27 .cse42)))))) (res (= .cse97 .cse98) (res (= .cse99 .cse99) (refl .cse99) (res (= .cse100 .cse101) (res .cse102 .cse103 (let ((.cse104 (= .cse106 .cse105))) (res .cse104 (res .cse105 (res .cse106 (=+1 .cse104) (let ((.cse107 (< 0 .cse108))) (res .cse107 (total .cse108 0) (farkas 1 .cse106 1 .cse107)))) (res .cse106 (let ((.cse109 (< y x))) (res .cse109 (total x y) (farkas 1 .cse109 1 .cse105))) (=+2 .cse104))) (cong (and .cse106 true) (and .cse105 true))))) (cong (and .cse100 .cse99) (and .cse101 .cse99)))) (cong (=> .cse97 .cse52) (=> .cse98 .cse35)))) (res (= .cse110 .cse111) (res .cse102 .cse103 (let ((.cse112 (= .cse114 .cse113))) (res .cse112 (res .cse113 (res .cse114 (=+1 .cse112) (let ((.cse115 (< 0 .cse116))) (res .cse115 (total .cse116 0) (farkas 1 .cse114 1 .cse115)))) (res .cse114 (let ((.cse117 (< x 0))) (res .cse117 (total 0 x) (farkas 1 .cse117 1 .cse113))) (=+2 .cse112))) (cong (and .cse114 true) (and .cse113 true))))) (cong (=> .cse110 .cse51) (=> .cse111 .cse43)))))) (res (= .cse118 .cse118) (refl .cse118) (cong (=> .cse118 .cse50) (=> .cse118 .cse44)))) (cong (not .cse46) (not .cse45))) (=-2 .cse49)))) (not- .cse47))) (res .cse48 (assume .cse48) (not- .cse48)))))))))))))))))))))))))))))))) (res .cse25 (! (let ((.cse41 (+ y@0 (- 4)))) (let ((.cse26 (<= .cse41 0))) (let ((.cse28 (not .cse26))) (let ((.cse33 (= .cse27 .cse28))) (let-proof ((.cse29 (not+ .cse28)) (.cse37 (not- .cse28))) (let-proof ((.cse34 (res .cse28 (res .cse27 (=+1 .cse33) (res .cse26 .cse29 (farkas 1 .cse27 1 .cse26))) (res .cse27 (res .cse38 .cse39 (res .cse26 (let ((.cse40 (<= 1 .cse41))) (res .cse40 (total-int .cse41 0) (farkas 1 .cse38 1 .cse40))) .cse37)) (=+2 .cse33))))) (res .cse26 (! (res .cse27 (res .cse28 .cse29 (let ((.cse30 (not .cse28))) (res .cse30 (let ((.cse31 (not .cse27))) (res .cse31 (not+ .cse31) (let ((.cse32 (= .cse31 .cse30))) (res .cse32 (res .cse33 .cse34 (cong (not .cse27) (not .cse28))) (=-2 .cse32))))) (not- .cse30)))) (=>+ 1 .cse25)) :proves (+ .cse25 + .cse26) :input) (! (res .cse27 (res .cse35 (=>+ 0 .cse35) .cse36) (res .cse28 (res .cse33 .cse34 (=-2 .cse33)) .cse37)) :proves (- .cse26) :input)))))))) :proves (+ .cse25) :rup) (! (res .cse42 (and+ .cse42) (res .cse35 (=>+ 1 .cse35) .cse36)) :proves (- .cse25 - .cse24) :input)))))))) :proves (- .cse24) :rup))))) :proves (- .cse6) :rup))) (res .cse6 (res .cse7 (! (let ((.cse22 (+ x@0 1))) (let ((.cse8 (<= .cse22 0))) (let ((.cse10 (not .cse8))) (let ((.cse15 (= .cse9 .cse10))) (let-proof ((.cse11 (not+ .cse10)) (.cse17 (not- .cse10))) (let-proof ((.cse16 (res .cse10 (res .cse9 (=+1 .cse15) (res .cse8 .cse11 (farkas 1 .cse9 1 .cse8))) (res .cse9 (res .cse19 .cse20 (res .cse8 (let ((.cse21 (<= 1 .cse22))) (res .cse21 (total-int .cse22 0) (farkas 1 .cse19 1 .cse21))) .cse17)) (=+2 .cse15))))) (res .cse8 (! (res .cse9 (res .cse10 .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (let ((.cse13 (not .cse9))) (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res .cse15 .cse16 (cong (not .cse9) (not .cse10))) (=-2 .cse14))))) (not- .cse12)))) (=>+ 1 .cse7)) :proves (+ .cse7 + .cse8) :input) (! (res .cse6 (! (res .cse9 (=>+ 0 .cse6) (res .cse10 (res .cse15 .cse16 (=-2 .cse15)) .cse17)) :proves (+ .cse6 - .cse8) :input) .cse18) :proves (- .cse8) :rup)))))))) :proves (+ .cse7) :rup) (! (res .cse23 (and+ .cse23) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) .cse18))))))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse123 (not .cse2))) (res .cse2 (let ((.cse122 (not .cse0))) (res .cse122 (res .cse123 (not+ .cse123) (let ((.cse124 (= .cse123 .cse122))) (res .cse124 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse124)))) (not- .cse122))) (res .cse123 (assume .cse123) (not- .cse123)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_Where.bpl.mod.smt2:106:10: Logical context not inconsistent!")
unsat
(! (let ((.cse28 (ControlFlow 0 2))) (let ((.cse1 (= .cse28 (- 1))) (.cse0 (= (- 1) .cse28))) (let ((.cse64 (= .cse1 .cse0))) (let-proof ((.cse65 (res .cse0 (res .cse1 (=+1 .cse64) (symm (- 1) .cse28)) (res .cse1 (symm .cse28 (- 1)) (=+2 .cse64))))) (res .cse0 (! (res .cse1 (let ((.cse33 (* (- 1) x@0))) (let ((.cse30 (<= .cse33 0))) (let ((.cse2 (and .cse30 .cse1))) (res .cse2 (let ((.cse63 (* (- 1) y@0))) (let ((.cse20 (+ x@0 .cse63))) (let ((.cse17 (<= .cse20 0))) (let ((.cse3 (=> .cse2 .cse17))) (res .cse3 (=>+ 0 .cse3) (let ((.cse39 (+ x .cse63))) (let ((.cse36 (<= .cse39 0))) (let ((.cse4 (=> .cse36 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse52 (+ x (* (- 1) y)))) (let ((.cse49 (<= .cse52 0))) (let ((.cse45 (and .cse49 true)) (.cse43 (= (ControlFlow 0 3) 2))) (let ((.cse42 (and .cse45 .cse43))) (let ((.cse5 (=> .cse42 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse60 (* (- 1) x))) (let ((.cse57 (<= .cse60 0))) (let ((.cse55 (and .cse57 true))) (let ((.cse6 (=> .cse55 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse62 (= (ControlFlow 0 0) 3))) (let ((.cse7 (=> .cse62 .cse6))) (res .cse7 (=>+ 1 .cse7) (let ((.cse24 (- 0 1))) (let ((.cse31 (<= 0 x@0)) (.cse23 (= .cse28 .cse24))) (let ((.cse50 (<= x y)) (.cse22 (and .cse31 .cse23)) (.cse18 (<= x@0 y@0))) (let ((.cse37 (<= x y@0)) (.cse15 (=> .cse22 .cse18)) (.cse44 (and .cse50 true))) (let ((.cse41 (and .cse44 .cse43)) (.cse14 (=> .cse37 .cse15)) (.cse58 (<= 0 x))) (let ((.cse54 (and .cse58 true)) (.cse13 (=> .cse41 .cse14))) (let ((.cse12 (=> .cse54 .cse13))) (let ((.cse8 (=> .cse62 .cse12))) (let ((.cse10 (not .cse8))) (res .cse8 (let ((.cse9 (not .cse7))) (res .cse9 (res .cse10 (not+ .cse10) (let ((.cse11 (= .cse10 .cse9))) (res .cse11 (res (= .cse8 .cse7) (res (= .cse12 .cse6) (let ((.cse46 (= true true))) (let-proof ((.cse47 (refl true))) (res (= .cse13 .cse5) (res (= .cse14 .cse4) (res (= .cse15 .cse3) (let ((.cse16 (= .cse18 .cse17))) (res .cse16 (res .cse17 (res .cse18 (=+1 .cse16) (let ((.cse19 (< 0 .cse20))) (res .cse19 (total .cse20 0) (farkas 1 .cse18 1 .cse19)))) (res .cse18 (let ((.cse21 (< y@0 x@0))) (res .cse21 (total x@0 y@0) (farkas 1 .cse21 1 .cse17))) (=+2 .cse16))) (res (= .cse22 .cse2) (res (= .cse23 .cse1) (res (= .cse24 (- 1)) (let ((.cse25 (* (- 1) 1))) (res (= .cse25 (- 1)) (poly* .cse25 (- 1)) (res (= 0 0) (refl 0) (let ((.cse26 (+ 0 .cse25)) (.cse27 (+ 0 (- 1)))) (res (= .cse26 .cse27) (cong (+ 0 .cse25) (+ 0 (- 1))) (res (= .cse24 .cse26) (-def 0 1) (res (= .cse27 (- 1)) (poly+ .cse27 (- 1)) (trans .cse24 .cse26 .cse27 (- 1))))))))) (res (= .cse28 .cse28) (refl .cse28) (cong (= .cse28 .cse24) (= .cse28 (- 1))))) (let ((.cse29 (= .cse31 .cse30))) (res .cse29 (res .cse30 (res .cse31 (=+1 .cse29) (let ((.cse32 (< 0 .cse33))) (res .cse32 (total .cse33 0) (farkas 1 .cse31 1 .cse32)))) (res .cse31 (let ((.cse34 (< x@0 0))) (res .cse34 (total 0 x@0) (farkas 1 .cse34 1 .cse30))) (=+2 .cse29))) (cong (and .cse31 .cse23) (and .cse30 .cse1))))) (cong (=> .cse22 .cse18) (=> .cse2 .cse17))))) (let ((.cse35 (= .cse37 .cse36))) (res .cse35 (res .cse36 (res .cse37 (=+1 .cse35) (let ((.cse38 (< 0 .cse39))) (res .cse38 (total .cse39 0) (farkas 1 .cse37 1 .cse38)))) (res .cse37 (let ((.cse40 (< y@0 x))) (res .cse40 (total x y@0) (farkas 1 .cse40 1 .cse36))) (=+2 .cse35))) (cong (=> .cse37 .cse15) (=> .cse36 .cse3))))) (res (= .cse41 .cse42) (res (= .cse43 .cse43) (refl .cse43) (res (= .cse44 .cse45) (res .cse46 .cse47 (let ((.cse48 (= .cse50 .cse49))) (res .cse48 (res .cse49 (res .cse50 (=+1 .cse48) (let ((.cse51 (< 0 .cse52))) (res .cse51 (total .cse52 0) (farkas 1 .cse50 1 .cse51)))) (res .cse50 (let ((.cse53 (< y x))) (res .cse53 (total x y) (farkas 1 .cse53 1 .cse49))) (=+2 .cse48))) (cong (and .cse50 true) (and .cse49 true))))) (cong (and .cse44 .cse43) (and .cse45 .cse43)))) (cong (=> .cse41 .cse14) (=> .cse42 .cse4)))) (res (= .cse54 .cse55) (res .cse46 .cse47 (let ((.cse56 (= .cse58 .cse57))) (res .cse56 (res .cse57 (res .cse58 (=+1 .cse56) (let ((.cse59 (< 0 .cse60))) (res .cse59 (total .cse60 0) (farkas 1 .cse58 1 .cse59)))) (res .cse58 (let ((.cse61 (< x 0))) (res .cse61 (total 0 x) (farkas 1 .cse61 1 .cse57))) (=+2 .cse56))) (cong (and .cse58 true) (and .cse57 true))))) (cong (=> .cse54 .cse13) (=> .cse55 .cse5)))))) (res (= .cse62 .cse62) (refl .cse62) (cong (=> .cse62 .cse12) (=> .cse62 .cse6)))) (cong (not .cse8) (not .cse7))) (=-2 .cse11)))) (not- .cse9))) (res .cse10 (assume .cse10) (not- .cse10))))))))))))))))))))))))))))))))))) (and- 1 .cse2))))) (res .cse64 .cse65 (=-2 .cse64))) :proves (+ .cse0) :input) (! (let ((.cse67 (not .cse1))) (res .cse1 (let ((.cse66 (not .cse0))) (res .cse66 (res .cse67 (not+ .cse67) (let ((.cse68 (= .cse67 .cse66))) (res .cse68 (res .cse64 .cse65 (cong (not .cse1) (not .cse0))) (=-2 .cse68)))) (not- .cse66))) (res .cse67 (assume .cse67) (not- .cse67)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_Where.bpl.mod.smt2:145:10: Logical context not inconsistent!")
unsat
(! (let ((.cse40 (ControlFlow 0 2))) (let ((.cse2 (= .cse40 (- 1))) (.cse0 (= (- 1) .cse40))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse40)) (res .cse2 (symm .cse40 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse83 (* (- 1) y@0))) (let ((.cse29 (+ .cse83 5))) (let ((.cse26 (<= .cse29 0))) (let ((.cse1 (=> .cse2 .cse26))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse59 (+ x@0 .cse83))) (let ((.cse7 (<= .cse59 0))) (let ((.cse5 (=> .cse7 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse56 (* (- 1) x@0)) (.cse46 (= .cse40 (- 3)))) (let ((.cse6 (=> .cse46 .cse7)) (.cse53 (<= .cse56 0))) (let ((.cse8 (and .cse53 .cse7)) (.cse11 (and .cse6 .cse5))) (let ((.cse9 (=> .cse8 .cse11))) (let-proof ((.cse10 (let ((.cse72 (+ x (* (- 1) y)))) (let ((.cse69 (<= .cse72 0))) (let ((.cse65 (and .cse69 true)) (.cse63 (= (ControlFlow 0 4) 2))) (let ((.cse62 (and .cse65 .cse63))) (let ((.cse12 (=> .cse62 .cse9))) (res .cse12 (=>+ 1 .cse12) (let ((.cse80 (* (- 1) x))) (let ((.cse77 (<= .cse80 0))) (let ((.cse75 (and .cse77 true))) (let ((.cse13 (=> .cse75 .cse12))) (res .cse13 (=>+ 1 .cse13) (let ((.cse82 (= (ControlFlow 0 0) 4))) (let ((.cse14 (=> .cse82 .cse13))) (res .cse14 (=>+ 1 .cse14) (let ((.cse32 (- 0 1))) (let ((.cse47 (- 0 3)) (.cse31 (= .cse40 .cse32)) (.cse27 (<= 5 y@0))) (let ((.cse24 (=> .cse31 .cse27)) (.cse45 (= .cse40 .cse47)) (.cse43 (<= x@0 y@0))) (let ((.cse70 (<= x y)) (.cse44 (=> .cse45 .cse43)) (.cse23 (=> .cse43 .cse24)) (.cse54 (<= 0 x@0))) (let ((.cse51 (and .cse54 .cse43)) (.cse22 (and .cse44 .cse23)) (.cse64 (and .cse70 true))) (let ((.cse61 (and .cse64 .cse63)) (.cse21 (=> .cse51 .cse22)) (.cse78 (<= 0 x))) (let ((.cse74 (and .cse78 true)) (.cse20 (=> .cse61 .cse21))) (let ((.cse19 (=> .cse74 .cse20))) (let ((.cse15 (=> .cse82 .cse19))) (let ((.cse17 (not .cse15))) (res .cse15 (let ((.cse16 (not .cse14))) (res .cse16 (res .cse17 (not+ .cse17) (let ((.cse18 (= .cse17 .cse16))) (res .cse18 (res (= .cse15 .cse14) (res (= .cse19 .cse13) (let ((.cse66 (= true true))) (let-proof ((.cse67 (refl true))) (res (= .cse20 .cse12) (res (= .cse21 .cse9) (let ((.cse41 (= .cse43 .cse7))) (let-proof ((.cse42 (res .cse7 (res .cse43 (=+1 .cse41) (let ((.cse58 (< 0 .cse59))) (res .cse58 (total .cse59 0) (farkas 1 .cse43 1 .cse58)))) (res .cse43 (let ((.cse60 (< y@0 x@0))) (res .cse60 (total x@0 y@0) (farkas 1 .cse60 1 .cse7))) (=+2 .cse41))))) (res (= .cse22 .cse11) (let ((.cse34 (= 0 0)) (.cse38 (= .cse40 .cse40))) (let-proof ((.cse35 (refl 0)) (.cse39 (refl .cse40))) (res (= .cse23 .cse5) (res (= .cse24 .cse1) (let ((.cse25 (= .cse27 .cse26))) (res .cse25 (res .cse26 (res .cse27 (=+1 .cse25) (let ((.cse28 (< 0 .cse29))) (res .cse28 (total .cse29 0) (farkas 1 .cse27 1 .cse28)))) (res .cse27 (let ((.cse30 (< y@0 5))) (res .cse30 (total 5 y@0) (farkas 1 .cse30 1 .cse26))) (=+2 .cse25))) (res (= .cse31 .cse2) (res (= .cse32 (- 1)) (let ((.cse33 (* (- 1) 1))) (res (= .cse33 (- 1)) (poly* .cse33 (- 1)) (res .cse34 .cse35 (let ((.cse36 (+ 0 .cse33)) (.cse37 (+ 0 (- 1)))) (res (= .cse36 .cse37) (cong (+ 0 .cse33) (+ 0 (- 1))) (res (= .cse32 .cse36) (-def 0 1) (res (= .cse37 (- 1)) (poly+ .cse37 (- 1)) (trans .cse32 .cse36 .cse37 (- 1))))))))) (res .cse38 .cse39 (cong (= .cse40 .cse32) (= .cse40 (- 1))))) (cong (=> .cse31 .cse27) (=> .cse2 .cse26))))) (res .cse41 .cse42 (cong (=> .cse43 .cse24) (=> .cse7 .cse1)))) (res (= .cse44 .cse6) (res .cse41 .cse42 (res (= .cse45 .cse46) (res (= .cse47 (- 3)) (let ((.cse48 (* (- 1) 3))) (res (= .cse48 (- 3)) (poly* .cse48 (- 3)) (res .cse34 .cse35 (let ((.cse49 (+ 0 .cse48)) (.cse50 (+ 0 (- 3)))) (res (= .cse49 .cse50) (cong (+ 0 .cse48) (+ 0 (- 3))) (res (= .cse47 .cse49) (-def 0 3) (res (= .cse50 (- 3)) (poly+ .cse50 (- 3)) (trans .cse47 .cse49 .cse50 (- 3))))))))) (res .cse38 .cse39 (cong (= .cse40 .cse47) (= .cse40 (- 3))))) (cong (=> .cse45 .cse43) (=> .cse46 .cse7)))) (cong (and .cse44 .cse23) (and .cse6 .cse5)))))) (res (= .cse51 .cse8) (res .cse41 .cse42 (let ((.cse52 (= .cse54 .cse53))) (res .cse52 (res .cse53 (res .cse54 (=+1 .cse52) (let ((.cse55 (< 0 .cse56))) (res .cse55 (total .cse56 0) (farkas 1 .cse54 1 .cse55)))) (res .cse54 (let ((.cse57 (< x@0 0))) (res .cse57 (total 0 x@0) (farkas 1 .cse57 1 .cse53))) (=+2 .cse52))) (cong (and .cse54 .cse43) (and .cse53 .cse7))))) (cong (=> .cse51 .cse22) (=> .cse8 .cse11)))))) (res (= .cse61 .cse62) (res (= .cse63 .cse63) (refl .cse63) (res (= .cse64 .cse65) (res .cse66 .cse67 (let ((.cse68 (= .cse70 .cse69))) (res .cse68 (res .cse69 (res .cse70 (=+1 .cse68) (let ((.cse71 (< 0 .cse72))) (res .cse71 (total .cse72 0) (farkas 1 .cse70 1 .cse71)))) (res .cse70 (let ((.cse73 (< y x))) (res .cse73 (total x y) (farkas 1 .cse73 1 .cse69))) (=+2 .cse68))) (cong (and .cse70 true) (and .cse69 true))))) (cong (and .cse64 .cse63) (and .cse65 .cse63)))) (cong (=> .cse61 .cse21) (=> .cse62 .cse9)))) (res (= .cse74 .cse75) (res .cse66 .cse67 (let ((.cse76 (= .cse78 .cse77))) (res .cse76 (res .cse77 (res .cse78 (=+1 .cse76) (let ((.cse79 (< 0 .cse80))) (res .cse79 (total .cse80 0) (farkas 1 .cse78 1 .cse79)))) (res .cse78 (let ((.cse81 (< x 0))) (res .cse81 (total 0 x) (farkas 1 .cse81 1 .cse77))) (=+2 .cse76))) (cong (and .cse78 true) (and .cse77 true))))) (cong (=> .cse74 .cse20) (=> .cse75 .cse12)))))) (res (= .cse82 .cse82) (refl .cse82) (cong (=> .cse82 .cse19) (=> .cse82 .cse13)))) (cong (not .cse15) (not .cse14))) (=-2 .cse18)))) (not- .cse16))) (res .cse17 (assume .cse17) (not- .cse17))))))))))))))))))))))))))))) (res .cse6 (! (res .cse7 (! (res .cse8 (res .cse9 (=>+ 0 .cse9) .cse10) (and- 1 .cse8)) :proves (+ .cse7) :input) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (res .cse11 (and+ .cse11) (res .cse9 (=>+ 1 .cse9) .cse10)) :proves (- .cse6 - .cse5) :input))))))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse85 (not .cse2))) (res .cse2 (let ((.cse84 (not .cse0))) (res .cse84 (res .cse85 (not+ .cse85) (let ((.cse86 (= .cse85 .cse84))) (res .cse86 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse86)))) (not- .cse84))) (res .cse85 (assume .cse85) (not- .cse85)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_Where.bpl.mod.smt2:186:10: Logical context not inconsistent!")
unsat
(! (let ((.cse76 (ControlFlow 0 2))) (let ((.cse2 (= .cse76 (- 1))) (.cse0 (= (- 1) .cse76))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse76)) (res .cse2 (symm .cse76 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse66 (= x@1 7))) (let ((.cse1 (=> .cse2 .cse66))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse95 (+ x@1 (* (- 1) y@1))) (.cse139 (* (- 1) x@1))) (let ((.cse12 (<= .cse139 0)) (.cse8 (<= .cse95 0))) (let ((.cse20 (and .cse12 .cse8))) (let ((.cse5 (=> .cse20 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse82 (= .cse76 (- 3)))) (let ((.cse7 (=> .cse82 .cse20))) (let ((.cse9 (and .cse8 .cse12)) (.cse27 (and .cse7 .cse5))) (let ((.cse22 (< 0 .cse139)) (.cse6 (=> .cse9 .cse27))) (let-proof ((.cse23 (total .cse139 0))) (let-proof ((.cse26 (! (let ((.cse111 (+ x@0 (* (- 1) y@0))) (.cse138 (* (- 1) x@0))) (let ((.cse34 (<= .cse138 0)) (.cse30 (<= .cse111 0))) (let ((.cse31 (and .cse34 .cse30))) (let ((.cse28 (=> .cse31 .cse6))) (res .cse28 (! (=>+ 1 .cse28) :proves (+ .cse28 - .cse6) :input) (! (let ((.cse103 (= .cse76 (- 4)))) (let ((.cse29 (=> .cse103 .cse31))) (let ((.cse49 (and .cse29 .cse28))) (let ((.cse43 (< 0 .cse138)) (.cse47 (=> .cse31 .cse49))) (let-proof ((.cse44 (total .cse138 0))) (let-proof ((.cse48 (let ((.cse127 (+ x (* (- 1) y)))) (let ((.cse124 (<= .cse127 0))) (let ((.cse120 (and .cse124 true)) (.cse118 (= (ControlFlow 0 5) 2))) (let ((.cse117 (and .cse120 .cse118))) (let ((.cse50 (=> .cse117 .cse47))) (res .cse50 (=>+ 1 .cse50) (let ((.cse135 (* (- 1) x))) (let ((.cse132 (<= .cse135 0))) (let ((.cse130 (and .cse132 true))) (let ((.cse51 (=> .cse130 .cse50))) (res .cse51 (=>+ 1 .cse51) (let ((.cse137 (= (ControlFlow 0 0) 5))) (let ((.cse52 (=> .cse137 .cse51))) (res .cse52 (=>+ 1 .cse52) (let ((.cse68 (- 0 1))) (let ((.cse91 (<= 0 x@1)) (.cse92 (<= x@1 y@1)) (.cse83 (- 0 3)) (.cse67 (= .cse76 .cse68))) (let ((.cse65 (=> .cse67 .cse66)) (.cse81 (= .cse76 .cse83)) (.cse79 (and .cse91 .cse92))) (let ((.cse80 (=> .cse81 .cse79)) (.cse64 (=> .cse79 .cse65))) (let ((.cse114 (<= 0 x@0)) (.cse109 (<= x@0 y@0)) (.cse104 (- 0 4)) (.cse93 (and .cse92 .cse91)) (.cse63 (and .cse80 .cse64))) (let ((.cse62 (=> .cse93 .cse63)) (.cse102 (= .cse76 .cse104)) (.cse100 (and .cse114 .cse109))) (let ((.cse125 (<= x y)) (.cse101 (=> .cse102 .cse100)) (.cse61 (=> .cse100 .cse62))) (let ((.cse60 (and .cse101 .cse61)) (.cse119 (and .cse125 true))) (let ((.cse116 (and .cse119 .cse118)) (.cse59 (=> .cse100 .cse60)) (.cse133 (<= 0 x))) (let ((.cse129 (and .cse133 true)) (.cse58 (=> .cse116 .cse59))) (let ((.cse57 (=> .cse129 .cse58))) (let ((.cse53 (=> .cse137 .cse57))) (let ((.cse55 (not .cse53))) (res .cse53 (let ((.cse54 (not .cse52))) (res .cse54 (res .cse55 (not+ .cse55) (let ((.cse56 (= .cse55 .cse54))) (res .cse56 (res (= .cse53 .cse52) (res (= .cse57 .cse51) (let ((.cse121 (= true true))) (let-proof ((.cse122 (refl true))) (res (= .cse58 .cse50) (res (= .cse59 .cse47) (let ((.cse98 (= .cse100 .cse31))) (let-proof ((.cse99 (let ((.cse108 (= .cse109 .cse30))) (res .cse108 (res .cse30 (res .cse109 (=+1 .cse108) (let ((.cse110 (< 0 .cse111))) (res .cse110 (total .cse111 0) (farkas 1 .cse109 1 .cse110)))) (res .cse109 (let ((.cse112 (< y@0 x@0))) (res .cse112 (total x@0 y@0) (farkas 1 .cse112 1 .cse30))) (=+2 .cse108))) (let ((.cse113 (= .cse114 .cse34))) (res .cse113 (res .cse34 (res .cse114 (=+1 .cse113) (res .cse43 .cse44 (farkas 1 .cse114 1 .cse43))) (res .cse114 (let ((.cse115 (< x@0 0))) (res .cse115 (total 0 x@0) (farkas 1 .cse115 1 .cse34))) (=+2 .cse113))) (cong (and .cse114 .cse109) (and .cse34 .cse30)))))))) (res (= .cse60 .cse49) (let ((.cse70 (= 0 0)) (.cse74 (= .cse76 .cse76))) (let-proof ((.cse71 (refl 0)) (.cse75 (refl .cse76))) (res (= .cse61 .cse28) (res (= .cse62 .cse6) (let ((.cse87 (= .cse92 .cse8)) (.cse89 (= .cse91 .cse12))) (let-proof ((.cse90 (res .cse12 (res .cse91 (=+1 .cse89) (res .cse22 .cse23 (farkas 1 .cse91 1 .cse22))) (res .cse91 (let ((.cse97 (< x@1 0))) (res .cse97 (total 0 x@1) (farkas 1 .cse97 1 .cse12))) (=+2 .cse89)))) (.cse88 (res .cse8 (res .cse92 (=+1 .cse87) (let ((.cse94 (< 0 .cse95))) (res .cse94 (total .cse95 0) (farkas 1 .cse92 1 .cse94)))) (res .cse92 (let ((.cse96 (< y@1 x@1))) (res .cse96 (total x@1 y@1) (farkas 1 .cse96 1 .cse8))) (=+2 .cse87))))) (res (= .cse63 .cse27) (let ((.cse77 (= .cse79 .cse20))) (let-proof ((.cse78 (res .cse87 .cse88 (res .cse89 .cse90 (cong (and .cse91 .cse92) (and .cse12 .cse8)))))) (res (= .cse64 .cse5) (res (= .cse65 .cse1) (res (= .cse66 .cse66) (refl .cse66) (res (= .cse67 .cse2) (res (= .cse68 (- 1)) (let ((.cse69 (* (- 1) 1))) (res (= .cse69 (- 1)) (poly* .cse69 (- 1)) (res .cse70 .cse71 (let ((.cse72 (+ 0 .cse69)) (.cse73 (+ 0 (- 1)))) (res (= .cse72 .cse73) (cong (+ 0 .cse69) (+ 0 (- 1))) (res (= .cse68 .cse72) (-def 0 1) (res (= .cse73 (- 1)) (poly+ .cse73 (- 1)) (trans .cse68 .cse72 .cse73 (- 1))))))))) (res .cse74 .cse75 (cong (= .cse76 .cse68) (= .cse76 (- 1))))) (cong (=> .cse67 .cse66) (=> .cse2 .cse66)))) (res .cse77 .cse78 (cong (=> .cse79 .cse65) (=> .cse20 .cse1)))) (res (= .cse80 .cse7) (res .cse77 .cse78 (res (= .cse81 .cse82) (res (= .cse83 (- 3)) (let ((.cse84 (* (- 1) 3))) (res (= .cse84 (- 3)) (poly* .cse84 (- 3)) (res .cse70 .cse71 (let ((.cse85 (+ 0 .cse84)) (.cse86 (+ 0 (- 3)))) (res (= .cse85 .cse86) (cong (+ 0 .cse84) (+ 0 (- 3))) (res (= .cse83 .cse85) (-def 0 3) (res (= .cse86 (- 3)) (poly+ .cse86 (- 3)) (trans .cse83 .cse85 .cse86 (- 3))))))))) (res .cse74 .cse75 (cong (= .cse76 .cse83) (= .cse76 (- 3))))) (cong (=> .cse81 .cse79) (=> .cse82 .cse20)))) (cong (and .cse80 .cse64) (and .cse7 .cse5)))))) (res (= .cse93 .cse9) (res .cse89 .cse90 (res .cse87 .cse88 (cong (and .cse92 .cse91) (and .cse8 .cse12)))) (cong (=> .cse93 .cse63) (=> .cse9 .cse27)))))) (res .cse98 .cse99 (cong (=> .cse100 .cse62) (=> .cse31 .cse6)))) (res (= .cse101 .cse29) (res .cse98 .cse99 (res (= .cse102 .cse103) (res (= .cse104 (- 4)) (let ((.cse105 (* (- 1) 4))) (res (= .cse105 (- 4)) (poly* .cse105 (- 4)) (res .cse70 .cse71 (let ((.cse106 (+ 0 .cse105)) (.cse107 (+ 0 (- 4)))) (res (= .cse106 .cse107) (cong (+ 0 .cse105) (+ 0 (- 4))) (res (= .cse104 .cse106) (-def 0 4) (res (= .cse107 (- 4)) (poly+ .cse107 (- 4)) (trans .cse104 .cse106 .cse107 (- 4))))))))) (res .cse74 .cse75 (cong (= .cse76 .cse104) (= .cse76 (- 4))))) (cong (=> .cse102 .cse100) (=> .cse103 .cse31)))) (cong (and .cse101 .cse61) (and .cse29 .cse28)))))) (res .cse98 .cse99 (cong (=> .cse100 .cse60) (=> .cse31 .cse49)))))) (res (= .cse116 .cse117) (res (= .cse118 .cse118) (refl .cse118) (res (= .cse119 .cse120) (res .cse121 .cse122 (let ((.cse123 (= .cse125 .cse124))) (res .cse123 (res .cse124 (res .cse125 (=+1 .cse123) (let ((.cse126 (< 0 .cse127))) (res .cse126 (total .cse127 0) (farkas 1 .cse125 1 .cse126)))) (res .cse125 (let ((.cse128 (< y x))) (res .cse128 (total x y) (farkas 1 .cse128 1 .cse124))) (=+2 .cse123))) (cong (and .cse125 true) (and .cse124 true))))) (cong (and .cse119 .cse118) (and .cse120 .cse118)))) (cong (=> .cse116 .cse59) (=> .cse117 .cse47)))) (res (= .cse129 .cse130) (res .cse121 .cse122 (let ((.cse131 (= .cse133 .cse132))) (res .cse131 (res .cse132 (res .cse133 (=+1 .cse131) (let ((.cse134 (< 0 .cse135))) (res .cse134 (total .cse135 0) (farkas 1 .cse133 1 .cse134)))) (res .cse133 (let ((.cse136 (< x 0))) (res .cse136 (total 0 x) (farkas 1 .cse136 1 .cse132))) (=+2 .cse131))) (cong (and .cse133 true) (and .cse132 true))))) (cong (=> .cse129 .cse58) (=> .cse130 .cse50)))))) (res (= .cse137 .cse137) (refl .cse137) (cong (=> .cse137 .cse57) (=> .cse137 .cse51)))) (cong (not .cse53) (not .cse52))) (=-2 .cse56)))) (not- .cse54))) (res .cse55 (assume .cse55) (not- .cse55)))))))))))))))))))))))))))))))) (res .cse29 (! (let-proof ((.cse32 (! (res .cse47 (=>+ 0 .cse47) .cse48) :proves (+ .cse31) :input))) (res .cse30 (! (res .cse31 .cse32 (! (and- 1 .cse31) :proves (- .cse31 + .cse30) :input)) :proves (+ .cse30) :rup) (let ((.cse46 (+ x@0 1))) (let ((.cse33 (<= .cse46 0))) (let ((.cse35 (not .cse33))) (let ((.cse40 (= .cse34 .cse35))) (let-proof ((.cse36 (not+ .cse35)) (.cse42 (not- .cse35))) (let-proof ((.cse41 (res .cse35 (res .cse34 (=+1 .cse40) (res .cse33 .cse36 (farkas 1 .cse34 1 .cse33))) (res .cse34 (res .cse43 .cse44 (res .cse33 (let ((.cse45 (<= 1 .cse46))) (res .cse45 (total-int .cse46 0) (farkas 1 .cse43 1 .cse45))) .cse42)) (=+2 .cse40))))) (res .cse33 (! (res .cse34 (res .cse35 .cse36 (let ((.cse37 (not .cse35))) (res .cse37 (let ((.cse38 (not .cse34))) (res .cse38 (not+ .cse38) (let ((.cse39 (= .cse38 .cse37))) (res .cse39 (res .cse40 .cse41 (cong (not .cse34) (not .cse35))) (=-2 .cse39))))) (not- .cse37)))) (res .cse31 (and+ .cse31) (=>+ 1 .cse29))) :proves (+ .cse29 + .cse33 - .cse30) :input) (! (res .cse31 .cse32 (! (res .cse34 (and- 0 .cse31) (res .cse35 (res .cse40 .cse41 (=-2 .cse40)) .cse42)) :proves (- .cse31 - .cse33) :input)) :proves (- .cse33) :rup)))))))))) :proves (+ .cse29) :rup) (! (res .cse49 (and+ .cse49) (res .cse47 (=>+ 1 .cse47) .cse48)) :proves (- .cse29 - .cse28) :input)))))))) :proves (- .cse28) :rup)))))) :proves (- .cse6) :rup))) (res .cse6 (res .cse7 (! (let-proof ((.cse10 (! (res .cse6 (! (=>+ 0 .cse6) :proves (+ .cse6 + .cse9) :input) .cse26) :proves (+ .cse9) :rup))) (res .cse8 (! (res .cse9 .cse10 (! (and- 0 .cse9) :proves (- .cse9 + .cse8) :input)) :proves (+ .cse8) :rup) (let ((.cse25 (+ x@1 1))) (let ((.cse11 (<= .cse25 0))) (let ((.cse13 (not .cse11))) (let ((.cse18 (= .cse12 .cse13))) (let-proof ((.cse14 (not+ .cse13)) (.cse21 (not- .cse13))) (let-proof ((.cse19 (res .cse13 (res .cse12 (=+1 .cse18) (res .cse11 .cse14 (farkas 1 .cse12 1 .cse11))) (res .cse12 (res .cse22 .cse23 (res .cse11 (let ((.cse24 (<= 1 .cse25))) (res .cse24 (total-int .cse25 0) (farkas 1 .cse22 1 .cse24))) .cse21)) (=+2 .cse18))))) (res .cse11 (! (res .cse12 (res .cse13 .cse14 (let ((.cse15 (not .cse13))) (res .cse15 (let ((.cse16 (not .cse12))) (res .cse16 (not+ .cse16) (let ((.cse17 (= .cse16 .cse15))) (res .cse17 (res .cse18 .cse19 (cong (not .cse12) (not .cse13))) (=-2 .cse17))))) (not- .cse15)))) (res .cse20 (and+ .cse20) (=>+ 1 .cse7))) :proves (+ .cse7 + .cse11 - .cse8) :input) (! (res .cse9 .cse10 (! (res .cse12 (and- 1 .cse9) (res .cse13 (res .cse18 .cse19 (=-2 .cse18)) .cse21)) :proves (- .cse9 - .cse11) :input)) :proves (- .cse11) :rup)))))))))) :proves (+ .cse7) :rup) (! (res .cse27 (and+ .cse27) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) .cse26))))))) :proves (- .cse5) :rup)))))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse141 (not .cse2))) (res .cse2 (let ((.cse140 (not .cse0))) (res .cse140 (res .cse141 (not+ .cse141) (let ((.cse142 (= .cse141 .cse140))) (res .cse142 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse142)))) (not- .cse140))) (res .cse141 (assume .cse141) (not- .cse141)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse160 (+ x@0 (* (- 1) y@0))) (.cse105 (ControlFlow 0 10)) (.cse141 (ControlFlow 0 6))) (let ((.cse209 (* (- 1) x@0)) (.cse134 (= .cse141 (- 5))) (.cse96 (= .cse105 (- 9))) (.cse7 (<= .cse160 0))) (let ((.cse21 (=> .cse96 .cse7)) (.cse112 (= .cse105 (- 11))) (.cse6 (=> .cse134 .cse7)) (.cse144 (= .cse141 (- 7))) (.cse11 (<= .cse209 0))) (let ((.cse9 (=> .cse144 .cse11)) (.cse5 (=> .cse11 .cse6)) (.cse22 (=> .cse112 .cse11)) (.cse20 (=> .cse11 .cse21))) (let ((.cse23 (and .cse22 .cse20)) (.cse121 (= .cse105 (- 12))) (.cse14 (and .cse9 .cse5)) (.cse151 (= .cse141 (- 8))) (.cse2 (= w@0 x@0))) (let ((.cse1 (=> .cse151 .cse2)) (.cse4 (=> .cse2 .cse14)) (.cse18 (=> .cse121 .cse2)) (.cse19 (=> .cse2 .cse23)) (.cse210 (ControlFlow 0 13))) (let ((.cse126 (= .cse210 10)) (.cse24 (and .cse18 .cse19)) (.cse156 (= .cse210 6)) (.cse15 (and .cse1 .cse4))) (let ((.cse0 (=> .cse156 .cse15)) (.cse17 (=> .cse126 .cse24))) (let ((.cse27 (and .cse11 .cse7)) (.cse25 (and .cse0 .cse17))) (let ((.cse42 (+ x@0 1)) (.cse16 (=> .cse27 .cse25))) (let ((.cse39 (< 0 .cse209)) (.cse37 (=> .cse2 .cse16)) (.cse10 (<= .cse42 0))) (let-proof ((.cse40 (total .cse209 0))) (let ((.cse29 (not .cse10))) (let-proof ((.cse38 (! (let ((.cse208 (ControlFlow 0 14))) (let ((.cse162 (= .cse208 13))) (let ((.cse43 (=> .cse162 .cse37))) (res .cse43 (! (=>+ 1 .cse43) :proves (+ .cse43 - .cse37) :input) (! (let ((.cse204 (+ x (* (- 1) y))) (.cse179 (ControlFlow 0 2))) (let ((.cse207 (* (- 1) x)) (.cse172 (= .cse179 (- 1))) (.cse48 (<= .cse204 0))) (let ((.cse47 (=> .cse172 .cse48)) (.cse186 (= .cse179 (- 3))) (.cse53 (<= .cse207 0))) (let ((.cse51 (=> .cse186 .cse53)) (.cse46 (=> .cse53 .cse47))) (let ((.cse66 (and .cse51 .cse46)) (.cse195 (= .cse179 (- 4))) (.cse70 (= w x))) (let ((.cse69 (=> .cse195 .cse70)) (.cse45 (=> .cse70 .cse66))) (let ((.cse200 (= .cse208 2)) (.cse73 (and .cse69 .cse45))) (let ((.cse44 (=> .cse200 .cse73))) (let ((.cse49 (and .cse53 .cse48)) (.cse74 (and .cse44 .cse43))) (let ((.cse67 (=> .cse49 .cse74))) (let ((.cse62 (< 0 .cse207)) (.cse71 (=> .cse70 .cse67))) (let-proof ((.cse63 (total .cse207 0))) (let-proof ((.cse72 (let ((.cse206 (= (ControlFlow 0 0) 14))) (let ((.cse75 (=> .cse206 .cse71))) (res .cse75 (=>+ 1 .cse75) (let ((.cse97 (- 0 9)) (.cse135 (- 0 5))) (let ((.cse145 (- 0 7)) (.cse133 (= .cse141 .cse135)) (.cse113 (- 0 11)) (.cse95 (= .cse105 .cse97)) (.cse106 (<= x@0 y@0))) (let ((.cse92 (=> .cse95 .cse106)) (.cse111 (= .cse105 .cse113)) (.cse132 (=> .cse133 .cse106)) (.cse143 (= .cse141 .cse145)) (.cse109 (<= 0 x@0))) (let ((.cse152 (- 0 8)) (.cse142 (=> .cse143 .cse109)) (.cse131 (=> .cse109 .cse132)) (.cse122 (- 0 12)) (.cse110 (=> .cse111 .cse109)) (.cse91 (=> .cse109 .cse92))) (let ((.cse90 (and .cse110 .cse91)) (.cse120 (= .cse105 .cse122)) (.cse130 (and .cse142 .cse131)) (.cse150 (= .cse141 .cse152)) (.cse173 (- 0 1))) (let ((.cse187 (- 0 3)) (.cse171 (= .cse179 .cse173)) (.cse180 (<= x y)) (.cse149 (=> .cse150 .cse2)) (.cse129 (=> .cse2 .cse130)) (.cse119 (=> .cse120 .cse2)) (.cse89 (=> .cse2 .cse90))) (let ((.cse88 (and .cse119 .cse89)) (.cse128 (and .cse149 .cse129)) (.cse168 (=> .cse171 .cse180)) (.cse185 (= .cse179 .cse187)) (.cse183 (<= 0 x))) (let ((.cse196 (- 0 4)) (.cse184 (=> .cse185 .cse183)) (.cse167 (=> .cse183 .cse168)) (.cse127 (=> .cse156 .cse128)) (.cse87 (=> .cse126 .cse88))) (let ((.cse157 (and .cse109 .cse106)) (.cse86 (and .cse127 .cse87)) (.cse166 (and .cse184 .cse167)) (.cse194 (= .cse179 .cse196))) (let ((.cse193 (=> .cse194 .cse70)) (.cse165 (=> .cse70 .cse166)) (.cse85 (=> .cse157 .cse86))) (let ((.cse84 (=> .cse2 .cse85)) (.cse164 (and .cse193 .cse165))) (let ((.cse163 (=> .cse200 .cse164)) (.cse83 (=> .cse162 .cse84))) (let ((.cse201 (and .cse183 .cse180)) (.cse82 (and .cse163 .cse83))) (let ((.cse81 (=> .cse201 .cse82))) (let ((.cse80 (=> .cse70 .cse81))) (let ((.cse76 (=> .cse206 .cse80))) (let ((.cse78 (not .cse76))) (res .cse76 (let ((.cse77 (not .cse75))) (res .cse77 (res .cse78 (not+ .cse78) (let ((.cse79 (= .cse78 .cse77))) (res .cse79 (res (= .cse76 .cse75) (res (= .cse80 .cse71) (let ((.cse191 (= .cse70 .cse70))) (let-proof ((.cse192 (refl .cse70))) (res (= .cse81 .cse67) (let ((.cse181 (= .cse183 .cse53)) (.cse169 (= .cse180 .cse48))) (let-proof ((.cse170 (res .cse48 (res .cse180 (=+1 .cse169) (let ((.cse203 (< 0 .cse204))) (res .cse203 (total .cse204 0) (farkas 1 .cse180 1 .cse203)))) (res .cse180 (let ((.cse205 (< y x))) (res .cse205 (total x y) (farkas 1 .cse205 1 .cse48))) (=+2 .cse169)))) (.cse182 (res .cse53 (res .cse183 (=+1 .cse181) (res .cse62 .cse63 (farkas 1 .cse183 1 .cse62))) (res .cse183 (let ((.cse202 (< x 0))) (res .cse202 (total 0 x) (farkas 1 .cse202 1 .cse53))) (=+2 .cse181))))) (res (= .cse82 .cse74) (let ((.cse99 (= 0 0))) (let-proof ((.cse100 (refl 0))) (res (= .cse83 .cse43) (res (= .cse84 .cse37) (let ((.cse117 (= .cse2 .cse2))) (let-proof ((.cse118 (refl .cse2))) (res (= .cse85 .cse16) (let ((.cse107 (= .cse109 .cse11)) (.cse93 (= .cse106 .cse7))) (let-proof ((.cse94 (res .cse7 (res .cse106 (=+1 .cse93) (let ((.cse159 (< 0 .cse160))) (res .cse159 (total .cse160 0) (farkas 1 .cse106 1 .cse159)))) (res .cse106 (let ((.cse161 (< y@0 x@0))) (res .cse161 (total x@0 y@0) (farkas 1 .cse161 1 .cse7))) (=+2 .cse93)))) (.cse108 (res .cse11 (res .cse109 (=+1 .cse107) (res .cse39 .cse40 (farkas 1 .cse109 1 .cse39))) (res .cse109 (let ((.cse158 (< x@0 0))) (res .cse158 (total 0 x@0) (farkas 1 .cse158 1 .cse11))) (=+2 .cse107))))) (res (= .cse86 .cse25) (res (= .cse87 .cse17) (res (= .cse88 .cse24) (let ((.cse103 (= .cse105 .cse105))) (let-proof ((.cse104 (refl .cse105))) (res (= .cse89 .cse19) (res (= .cse90 .cse23) (res (= .cse91 .cse20) (res (= .cse92 .cse21) (res .cse93 .cse94 (res (= .cse95 .cse96) (res (= .cse97 (- 9)) (let ((.cse98 (* (- 1) 9))) (res (= .cse98 (- 9)) (poly* .cse98 (- 9)) (res .cse99 .cse100 (let ((.cse101 (+ 0 .cse98)) (.cse102 (+ 0 (- 9)))) (res (= .cse101 .cse102) (cong (+ 0 .cse98) (+ 0 (- 9))) (res (= .cse97 .cse101) (-def 0 9) (res (= .cse102 (- 9)) (poly+ .cse102 (- 9)) (trans .cse97 .cse101 .cse102 (- 9))))))))) (res .cse103 .cse104 (cong (= .cse105 .cse97) (= .cse105 (- 9))))) (cong (=> .cse95 .cse106) (=> .cse96 .cse7)))) (res .cse107 .cse108 (cong (=> .cse109 .cse92) (=> .cse11 .cse21)))) (res (= .cse110 .cse22) (res .cse107 .cse108 (res (= .cse111 .cse112) (res (= .cse113 (- 11)) (let ((.cse114 (* (- 1) 11))) (res (= .cse114 (- 11)) (poly* .cse114 (- 11)) (res .cse99 .cse100 (let ((.cse115 (+ 0 .cse114)) (.cse116 (+ 0 (- 11)))) (res (= .cse115 .cse116) (cong (+ 0 .cse114) (+ 0 (- 11))) (res (= .cse113 .cse115) (-def 0 11) (res (= .cse116 (- 11)) (poly+ .cse116 (- 11)) (trans .cse113 .cse115 .cse116 (- 11))))))))) (res .cse103 .cse104 (cong (= .cse105 .cse113) (= .cse105 (- 11))))) (cong (=> .cse111 .cse109) (=> .cse112 .cse11)))) (cong (and .cse110 .cse91) (and .cse22 .cse20)))) (res .cse117 .cse118 (cong (=> .cse2 .cse90) (=> .cse2 .cse23)))) (res (= .cse119 .cse18) (res .cse117 .cse118 (res (= .cse120 .cse121) (res (= .cse122 (- 12)) (let ((.cse123 (* (- 1) 12))) (res (= .cse123 (- 12)) (poly* .cse123 (- 12)) (res .cse99 .cse100 (let ((.cse124 (+ 0 .cse123)) (.cse125 (+ 0 (- 12)))) (res (= .cse124 .cse125) (cong (+ 0 .cse123) (+ 0 (- 12))) (res (= .cse122 .cse124) (-def 0 12) (res (= .cse125 (- 12)) (poly+ .cse125 (- 12)) (trans .cse122 .cse124 .cse125 (- 12))))))))) (res .cse103 .cse104 (cong (= .cse105 .cse122) (= .cse105 (- 12))))) (cong (=> .cse120 .cse2) (=> .cse121 .cse2)))) (cong (and .cse119 .cse89) (and .cse18 .cse19)))))) (res (= .cse126 .cse126) (refl .cse126) (cong (=> .cse126 .cse88) (=> .cse126 .cse24)))) (res (= .cse127 .cse0) (res (= .cse128 .cse15) (let ((.cse139 (= .cse141 .cse141))) (let-proof ((.cse140 (refl .cse141))) (res (= .cse129 .cse4) (res (= .cse130 .cse14) (res (= .cse131 .cse5) (res (= .cse132 .cse6) (res .cse93 .cse94 (res (= .cse133 .cse134) (res (= .cse135 (- 5)) (let ((.cse136 (* (- 1) 5))) (res (= .cse136 (- 5)) (poly* .cse136 (- 5)) (res .cse99 .cse100 (let ((.cse137 (+ 0 .cse136)) (.cse138 (+ 0 (- 5)))) (res (= .cse137 .cse138) (cong (+ 0 .cse136) (+ 0 (- 5))) (res (= .cse135 .cse137) (-def 0 5) (res (= .cse138 (- 5)) (poly+ .cse138 (- 5)) (trans .cse135 .cse137 .cse138 (- 5))))))))) (res .cse139 .cse140 (cong (= .cse141 .cse135) (= .cse141 (- 5))))) (cong (=> .cse133 .cse106) (=> .cse134 .cse7)))) (res .cse107 .cse108 (cong (=> .cse109 .cse132) (=> .cse11 .cse6)))) (res (= .cse142 .cse9) (res .cse107 .cse108 (res (= .cse143 .cse144) (res (= .cse145 (- 7)) (let ((.cse146 (* (- 1) 7))) (res (= .cse146 (- 7)) (poly* .cse146 (- 7)) (res .cse99 .cse100 (let ((.cse147 (+ 0 .cse146)) (.cse148 (+ 0 (- 7)))) (res (= .cse147 .cse148) (cong (+ 0 .cse146) (+ 0 (- 7))) (res (= .cse145 .cse147) (-def 0 7) (res (= .cse148 (- 7)) (poly+ .cse148 (- 7)) (trans .cse145 .cse147 .cse148 (- 7))))))))) (res .cse139 .cse140 (cong (= .cse141 .cse145) (= .cse141 (- 7))))) (cong (=> .cse143 .cse109) (=> .cse144 .cse11)))) (cong (and .cse142 .cse131) (and .cse9 .cse5)))) (res .cse117 .cse118 (cong (=> .cse2 .cse130) (=> .cse2 .cse14)))) (res (= .cse149 .cse1) (res .cse117 .cse118 (res (= .cse150 .cse151) (res (= .cse152 (- 8)) (let ((.cse153 (* (- 1) 8))) (res (= .cse153 (- 8)) (poly* .cse153 (- 8)) (res .cse99 .cse100 (let ((.cse154 (+ 0 .cse153)) (.cse155 (+ 0 (- 8)))) (res (= .cse154 .cse155) (cong (+ 0 .cse153) (+ 0 (- 8))) (res (= .cse152 .cse154) (-def 0 8) (res (= .cse155 (- 8)) (poly+ .cse155 (- 8)) (trans .cse152 .cse154 .cse155 (- 8))))))))) (res .cse139 .cse140 (cong (= .cse141 .cse152) (= .cse141 (- 8))))) (cong (=> .cse150 .cse2) (=> .cse151 .cse2)))) (cong (and .cse149 .cse129) (and .cse1 .cse4)))))) (res (= .cse156 .cse156) (refl .cse156) (cong (=> .cse156 .cse128) (=> .cse156 .cse15)))) (cong (and .cse127 .cse87) (and .cse0 .cse17)))) (res (= .cse157 .cse27) (res .cse93 .cse94 (res .cse107 .cse108 (cong (and .cse109 .cse106) (and .cse11 .cse7)))) (cong (=> .cse157 .cse86) (=> .cse27 .cse25)))))) (res .cse117 .cse118 (cong (=> .cse2 .cse85) (=> .cse2 .cse16)))))) (res (= .cse162 .cse162) (refl .cse162) (cong (=> .cse162 .cse84) (=> .cse162 .cse37)))) (res (= .cse163 .cse44) (res (= .cse164 .cse73) (let ((.cse177 (= .cse179 .cse179))) (let-proof ((.cse178 (refl .cse179))) (res (= .cse165 .cse45) (res (= .cse166 .cse66) (res (= .cse167 .cse46) (res (= .cse168 .cse47) (res .cse169 .cse170 (res (= .cse171 .cse172) (res (= .cse173 (- 1)) (let ((.cse174 (* (- 1) 1))) (res (= .cse174 (- 1)) (poly* .cse174 (- 1)) (res .cse99 .cse100 (let ((.cse175 (+ 0 .cse174)) (.cse176 (+ 0 (- 1)))) (res (= .cse175 .cse176) (cong (+ 0 .cse174) (+ 0 (- 1))) (res (= .cse173 .cse175) (-def 0 1) (res (= .cse176 (- 1)) (poly+ .cse176 (- 1)) (trans .cse173 .cse175 .cse176 (- 1))))))))) (res .cse177 .cse178 (cong (= .cse179 .cse173) (= .cse179 (- 1))))) (cong (=> .cse171 .cse180) (=> .cse172 .cse48)))) (res .cse181 .cse182 (cong (=> .cse183 .cse168) (=> .cse53 .cse47)))) (res (= .cse184 .cse51) (res .cse181 .cse182 (res (= .cse185 .cse186) (res (= .cse187 (- 3)) (let ((.cse188 (* (- 1) 3))) (res (= .cse188 (- 3)) (poly* .cse188 (- 3)) (res .cse99 .cse100 (let ((.cse189 (+ 0 .cse188)) (.cse190 (+ 0 (- 3)))) (res (= .cse189 .cse190) (cong (+ 0 .cse188) (+ 0 (- 3))) (res (= .cse187 .cse189) (-def 0 3) (res (= .cse190 (- 3)) (poly+ .cse190 (- 3)) (trans .cse187 .cse189 .cse190 (- 3))))))))) (res .cse177 .cse178 (cong (= .cse179 .cse187) (= .cse179 (- 3))))) (cong (=> .cse185 .cse183) (=> .cse186 .cse53)))) (cong (and .cse184 .cse167) (and .cse51 .cse46)))) (res .cse191 .cse192 (cong (=> .cse70 .cse166) (=> .cse70 .cse66)))) (res (= .cse193 .cse69) (res .cse191 .cse192 (res (= .cse194 .cse195) (res (= .cse196 (- 4)) (let ((.cse197 (* (- 1) 4))) (res (= .cse197 (- 4)) (poly* .cse197 (- 4)) (res .cse99 .cse100 (let ((.cse198 (+ 0 .cse197)) (.cse199 (+ 0 (- 4)))) (res (= .cse198 .cse199) (cong (+ 0 .cse197) (+ 0 (- 4))) (res (= .cse196 .cse198) (-def 0 4) (res (= .cse199 (- 4)) (poly+ .cse199 (- 4)) (trans .cse196 .cse198 .cse199 (- 4))))))))) (res .cse177 .cse178 (cong (= .cse179 .cse196) (= .cse179 (- 4))))) (cong (=> .cse194 .cse70) (=> .cse195 .cse70)))) (cong (and .cse193 .cse165) (and .cse69 .cse45)))))) (res (= .cse200 .cse200) (refl .cse200) (cong (=> .cse200 .cse164) (=> .cse200 .cse73)))) (cong (and .cse163 .cse83) (and .cse44 .cse43)))))) (res (= .cse201 .cse49) (res .cse169 .cse170 (res .cse181 .cse182 (cong (and .cse183 .cse180) (and .cse53 .cse48)))) (cong (=> .cse201 .cse82) (=> .cse49 .cse74)))))) (res .cse191 .cse192 (cong (=> .cse70 .cse81) (=> .cse70 .cse67)))))) (res (= .cse206 .cse206) (refl .cse206) (cong (=> .cse206 .cse80) (=> .cse206 .cse71)))) (cong (not .cse76) (not .cse75))) (=-2 .cse79)))) (not- .cse77))) (res .cse78 (assume .cse78) (not- .cse78))))))))))))))))))))))))) (let-proof ((.cse68 (res .cse71 (=>+ 1 .cse71) .cse72))) (res .cse44 (! (res .cse45 (! (let-proof ((.cse50 (res .cse67 (=>+ 0 .cse67) .cse68))) (res .cse46 (! (res .cse47 (! (res .cse48 (! (res .cse49 .cse50 (and- 1 .cse49)) :proves (+ .cse48) :input) (! (=>+ 1 .cse47) :proves (+ .cse47 - .cse48) :input)) :proves (+ .cse47) :rup) (! (=>+ 1 .cse46) :proves (+ .cse46 - .cse47) :input)) :proves (+ .cse46) :rup) (res .cse51 (! (let ((.cse65 (+ x 1))) (let ((.cse52 (<= .cse65 0))) (let ((.cse54 (not .cse52))) (let ((.cse59 (= .cse53 .cse54))) (let-proof ((.cse55 (not+ .cse54)) (.cse61 (not- .cse54))) (let-proof ((.cse60 (res .cse54 (res .cse53 (=+1 .cse59) (res .cse52 .cse55 (farkas 1 .cse53 1 .cse52))) (res .cse53 (res .cse62 .cse63 (res .cse52 (let ((.cse64 (<= 1 .cse65))) (res .cse64 (total-int .cse65 0) (farkas 1 .cse62 1 .cse64))) .cse61)) (=+2 .cse59))))) (res .cse52 (! (res .cse53 (res .cse54 .cse55 (let ((.cse56 (not .cse54))) (res .cse56 (let ((.cse57 (not .cse53))) (res .cse57 (not+ .cse57) (let ((.cse58 (= .cse57 .cse56))) (res .cse58 (res .cse59 .cse60 (cong (not .cse53) (not .cse54))) (=-2 .cse58))))) (not- .cse56)))) (=>+ 1 .cse51)) :proves (+ .cse51 + .cse52) :input) (! (res .cse53 (res .cse49 .cse50 (and- 0 .cse49)) (res .cse54 (res .cse59 .cse60 (=-2 .cse59)) .cse61)) :proves (- .cse52) :input)))))))) :proves (+ .cse51) :rup) (! (res .cse66 (and+ .cse66) (=>+ 1 .cse45)) :proves (+ .cse45 - .cse51 - .cse46) :input)))) :proves (+ .cse45) :rup) (res .cse69 (! (res .cse70 (! (res .cse71 (=>+ 0 .cse71) .cse72) :proves (+ .cse70) :input) (! (=>+ 1 .cse69) :proves (+ .cse69 - .cse70) :input)) :proves (+ .cse69) :rup) (! (res .cse73 (and+ .cse73) (=>+ 1 .cse44)) :proves (+ .cse44 - .cse69 - .cse45) :input))) :proves (+ .cse44) :rup) (! (res .cse74 (and+ .cse74) (res .cse67 (=>+ 1 .cse67) .cse68)) :proves (- .cse44 - .cse43) :input)))))))))))))))) :proves (- .cse43) :rup))))) :proves (- .cse37) :rup))) (let ((.cse30 (= .cse11 .cse29))) (let-proof ((.cse26 (! (res .cse37 (! (=>+ 1 .cse37) :proves (+ .cse37 - .cse16) :input) .cse38) :proves (- .cse16) :rup)) (.cse33 (not+ .cse29)) (.cse32 (not- .cse29))) (let-proof ((.cse31 (res .cse29 (res .cse11 (=+1 .cse30) (res .cse10 .cse33 (farkas 1 .cse11 1 .cse10))) (res .cse11 (res .cse39 .cse40 (res .cse10 (let ((.cse41 (<= 1 .cse42))) (res .cse41 (total-int .cse42 0) (farkas 1 .cse39 1 .cse41))) .cse32)) (=+2 .cse30)))) (.cse28 (! (res .cse16 (! (=>+ 0 .cse16) :proves (+ .cse16 + .cse27) :input) .cse26) :proves (+ .cse27) :rup))) (let-proof ((.cse3 (! (res .cse37 (! (=>+ 0 .cse37) :proves (+ .cse37 + .cse2) :input) .cse38) :proves (+ .cse2) :rup)) (.cse8 (! (res .cse27 .cse28 (! (and- 1 .cse27) :proves (- .cse27 + .cse7) :input)) :proves (+ .cse7) :rup)) (.cse12 (res .cse29 .cse33 (let ((.cse34 (not .cse29))) (res .cse34 (let ((.cse35 (not .cse11))) (res .cse35 (not+ .cse35) (let ((.cse36 (= .cse35 .cse34))) (res .cse36 (res .cse30 .cse31 (cong (not .cse11) (not .cse29))) (=-2 .cse36))))) (not- .cse34))))) (.cse13 (! (res .cse27 .cse28 (! (res .cse11 (and- 0 .cse27) (res .cse29 (res .cse30 .cse31 (=-2 .cse30)) .cse32)) :proves (- .cse27 - .cse10) :input)) :proves (- .cse10) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 .cse3 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (res .cse4 (! (res .cse5 (! (res .cse6 (! (res .cse7 .cse8 (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (res .cse9 (! (res .cse10 (! (res .cse11 .cse12 (=>+ 1 .cse9)) :proves (+ .cse9 + .cse10) :input) .cse13) :proves (+ .cse9) :rup) (! (res .cse14 (and+ .cse14) (=>+ 1 .cse4)) :proves (+ .cse4 - .cse9 - .cse5) :input))) :proves (+ .cse4) :rup) (! (res .cse15 (and+ .cse15) (=>+ 1 .cse0)) :proves (+ .cse0 - .cse4 - .cse1) :input))) :proves (+ .cse0) :rup) (res .cse16 (res .cse17 (! (res .cse18 (! (res .cse2 .cse3 (! (=>+ 1 .cse18) :proves (+ .cse18 - .cse2) :input)) :proves (+ .cse18) :rup) (res .cse19 (! (res .cse20 (! (res .cse21 (! (res .cse7 .cse8 (! (=>+ 1 .cse21) :proves (+ .cse21 - .cse7) :input)) :proves (+ .cse21) :rup) (! (=>+ 1 .cse20) :proves (+ .cse20 - .cse21) :input)) :proves (+ .cse20) :rup) (res .cse22 (! (res .cse10 (! (res .cse11 .cse12 (=>+ 1 .cse22)) :proves (+ .cse22 + .cse10) :input) .cse13) :proves (+ .cse22) :rup) (! (res .cse23 (and+ .cse23) (=>+ 1 .cse19)) :proves (+ .cse19 - .cse22 - .cse20) :input))) :proves (+ .cse19) :rup) (! (res .cse24 (and+ .cse24) (=>+ 1 .cse17)) :proves (+ .cse17 - .cse19 - .cse18) :input))) :proves (+ .cse17) :rup) (! (res .cse25 (and+ .cse25) (=>+ 1 .cse16)) :proves (- .cse17 - .cse0 + .cse16) :input)) .cse26)))))))))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse89 (+ call1formal@xProc@0 (* (- 1) call2formal@yProc@0))) (.cse57 (ControlFlow 0 2))) (let ((.cse102 (* (- 1) call1formal@xProc@0)) (.cse48 (= .cse57 (- 1))) (.cse3 (<= .cse89 0))) (let ((.cse2 (=> .cse48 .cse3)) (.cse64 (= .cse57 (- 3))) (.cse8 (<= .cse102 0))) (let ((.cse6 (=> .cse64 .cse8)) (.cse1 (=> .cse8 .cse2)) (.cse85 (+ call1formal@xProc (* (- 1) call2formal@yProc)))) (let ((.cse82 (<= .cse85 0)) (.cse21 (and .cse6 .cse1)) (.cse73 (= .cse57 (- 4))) (.cse25 (= call0formal@wProc@0 call1formal@xProc@0))) (let ((.cse24 (=> .cse73 .cse25)) (.cse0 (=> .cse25 .cse21)) (.cse26 (and .cse82 .cse25)) (.cse4 (and .cse8 .cse3))) (let ((.cse22 (and .cse26 .cse4)) (.cse27 (and .cse24 .cse0))) (let ((.cse17 (< 0 .cse102)) (.cse28 (=> .cse22 .cse27))) (let-proof ((.cse18 (total .cse102 0))) (let-proof ((.cse29 (let ((.cse97 (* (- 1) call1formal@xProc))) (let ((.cse99 (= call0formal@wProc call1formal@xProc)) (.cse94 (<= .cse97 0))) (let ((.cse92 (and .cse99 .cse94))) (let ((.cse30 (=> .cse92 .cse28))) (res .cse30 (=>+ 1 .cse30) (let ((.cse100 (= (ControlFlow 0 5) 2))) (let ((.cse31 (=> .cse100 .cse30))) (res .cse31 (=>+ 1 .cse31) (let ((.cse101 (= (ControlFlow 0 0) 5))) (let ((.cse32 (=> .cse101 .cse31))) (res .cse32 (=>+ 1 .cse32) (let ((.cse49 (- 0 1))) (let ((.cse65 (- 0 3)) (.cse47 (= .cse57 .cse49)) (.cse58 (<= call1formal@xProc@0 call2formal@yProc@0))) (let ((.cse44 (=> .cse47 .cse58)) (.cse63 (= .cse57 .cse65)) (.cse61 (<= 0 call1formal@xProc@0))) (let ((.cse74 (- 0 4)) (.cse62 (=> .cse63 .cse61)) (.cse43 (=> .cse61 .cse44))) (let ((.cse83 (<= call1formal@xProc call2formal@yProc)) (.cse42 (and .cse62 .cse43)) (.cse72 (= .cse57 .cse74))) (let ((.cse71 (=> .cse72 .cse25)) (.cse41 (=> .cse25 .cse42)) (.cse80 (and .cse83 .cse25)) (.cse79 (and .cse61 .cse58))) (let ((.cse78 (and .cse80 .cse79)) (.cse40 (and .cse71 .cse41)) (.cse95 (<= 0 call1formal@xProc))) (let ((.cse91 (and .cse99 .cse95)) (.cse39 (=> .cse78 .cse40))) (let ((.cse38 (=> .cse91 .cse39))) (let ((.cse37 (=> .cse100 .cse38))) (let ((.cse33 (=> .cse101 .cse37))) (let ((.cse35 (not .cse33))) (res .cse33 (let ((.cse34 (not .cse32))) (res .cse34 (res .cse35 (not+ .cse35) (let ((.cse36 (= .cse35 .cse34))) (res .cse36 (res (= .cse33 .cse32) (res (= .cse37 .cse31) (res (= .cse38 .cse30) (res (= .cse39 .cse28) (let ((.cse59 (= .cse61 .cse8)) (.cse45 (= .cse58 .cse3))) (let ((.cse69 (= .cse25 .cse25))) (let-proof ((.cse46 (res .cse3 (res .cse58 (=+1 .cse45) (let ((.cse88 (< 0 .cse89))) (res .cse88 (total .cse89 0) (farkas 1 .cse58 1 .cse88)))) (res .cse58 (let ((.cse90 (< call2formal@yProc@0 call1formal@xProc@0))) (res .cse90 (total call1formal@xProc@0 call2formal@yProc@0) (farkas 1 .cse90 1 .cse3))) (=+2 .cse45)))) (.cse60 (res .cse8 (res .cse61 (=+1 .cse59) (res .cse17 .cse18 (farkas 1 .cse61 1 .cse17))) (res .cse61 (let ((.cse87 (< call1formal@xProc@0 0))) (res .cse87 (total 0 call1formal@xProc@0) (farkas 1 .cse87 1 .cse8))) (=+2 .cse59)))) (.cse70 (refl .cse25))) (res (= .cse40 .cse27) (let ((.cse51 (= 0 0)) (.cse55 (= .cse57 .cse57))) (let-proof ((.cse52 (refl 0)) (.cse56 (refl .cse57))) (res (= .cse41 .cse0) (res (= .cse42 .cse21) (res (= .cse43 .cse1) (res (= .cse44 .cse2) (res .cse45 .cse46 (res (= .cse47 .cse48) (res (= .cse49 (- 1)) (let ((.cse50 (* (- 1) 1))) (res (= .cse50 (- 1)) (poly* .cse50 (- 1)) (res .cse51 .cse52 (let ((.cse53 (+ 0 .cse50)) (.cse54 (+ 0 (- 1)))) (res (= .cse53 .cse54) (cong (+ 0 .cse50) (+ 0 (- 1))) (res (= .cse49 .cse53) (-def 0 1) (res (= .cse54 (- 1)) (poly+ .cse54 (- 1)) (trans .cse49 .cse53 .cse54 (- 1))))))))) (res .cse55 .cse56 (cong (= .cse57 .cse49) (= .cse57 (- 1))))) (cong (=> .cse47 .cse58) (=> .cse48 .cse3)))) (res .cse59 .cse60 (cong (=> .cse61 .cse44) (=> .cse8 .cse2)))) (res (= .cse62 .cse6) (res .cse59 .cse60 (res (= .cse63 .cse64) (res (= .cse65 (- 3)) (let ((.cse66 (* (- 1) 3))) (res (= .cse66 (- 3)) (poly* .cse66 (- 3)) (res .cse51 .cse52 (let ((.cse67 (+ 0 .cse66)) (.cse68 (+ 0 (- 3)))) (res (= .cse67 .cse68) (cong (+ 0 .cse66) (+ 0 (- 3))) (res (= .cse65 .cse67) (-def 0 3) (res (= .cse68 (- 3)) (poly+ .cse68 (- 3)) (trans .cse65 .cse67 .cse68 (- 3))))))))) (res .cse55 .cse56 (cong (= .cse57 .cse65) (= .cse57 (- 3))))) (cong (=> .cse63 .cse61) (=> .cse64 .cse8)))) (cong (and .cse62 .cse43) (and .cse6 .cse1)))) (res .cse69 .cse70 (cong (=> .cse25 .cse42) (=> .cse25 .cse21)))) (res (= .cse71 .cse24) (res .cse69 .cse70 (res (= .cse72 .cse73) (res (= .cse74 (- 4)) (let ((.cse75 (* (- 1) 4))) (res (= .cse75 (- 4)) (poly* .cse75 (- 4)) (res .cse51 .cse52 (let ((.cse76 (+ 0 .cse75)) (.cse77 (+ 0 (- 4)))) (res (= .cse76 .cse77) (cong (+ 0 .cse75) (+ 0 (- 4))) (res (= .cse74 .cse76) (-def 0 4) (res (= .cse77 (- 4)) (poly+ .cse77 (- 4)) (trans .cse74 .cse76 .cse77 (- 4))))))))) (res .cse55 .cse56 (cong (= .cse57 .cse74) (= .cse57 (- 4))))) (cong (=> .cse72 .cse25) (=> .cse73 .cse25)))) (cong (and .cse71 .cse41) (and .cse24 .cse0)))))) (res (= .cse78 .cse22) (res (= .cse79 .cse4) (res .cse45 .cse46 (res .cse59 .cse60 (cong (and .cse61 .cse58) (and .cse8 .cse3)))) (res (= .cse80 .cse26) (res .cse69 .cse70 (let ((.cse81 (= .cse83 .cse82))) (res .cse81 (res .cse82 (res .cse83 (=+1 .cse81) (let ((.cse84 (< 0 .cse85))) (res .cse84 (total .cse85 0) (farkas 1 .cse83 1 .cse84)))) (res .cse83 (let ((.cse86 (< call2formal@yProc call1formal@xProc))) (res .cse86 (total call1formal@xProc call2formal@yProc) (farkas 1 .cse86 1 .cse82))) (=+2 .cse81))) (cong (and .cse83 .cse25) (and .cse82 .cse25))))) (cong (and .cse80 .cse79) (and .cse26 .cse4)))) (cong (=> .cse78 .cse40) (=> .cse22 .cse27))))))) (res (= .cse91 .cse92) (let ((.cse93 (= .cse95 .cse94))) (res .cse93 (res .cse94 (res .cse95 (=+1 .cse93) (let ((.cse96 (< 0 .cse97))) (res .cse96 (total .cse97 0) (farkas 1 .cse95 1 .cse96)))) (res .cse95 (let ((.cse98 (< call1formal@xProc 0))) (res .cse98 (total 0 call1formal@xProc) (farkas 1 .cse98 1 .cse94))) (=+2 .cse93))) (res (= .cse99 .cse99) (refl .cse99) (cong (and .cse99 .cse95) (and .cse99 .cse94))))) (cong (=> .cse91 .cse39) (=> .cse92 .cse28)))) (res (= .cse100 .cse100) (refl .cse100) (cong (=> .cse100 .cse38) (=> .cse100 .cse30)))) (res (= .cse101 .cse101) (refl .cse101) (cong (=> .cse101 .cse37) (=> .cse101 .cse31)))) (cong (not .cse33) (not .cse32))) (=-2 .cse36)))) (not- .cse34))) (res .cse35 (assume .cse35) (not- .cse35)))))))))))))))))))))))))))) (let-proof ((.cse23 (res .cse28 (=>+ 0 .cse28) .cse29))) (res .cse0 (! (let-proof ((.cse5 (res .cse22 .cse23 (and- 1 .cse22)))) (res .cse1 (! (res .cse2 (! (res .cse3 (! (res .cse4 .cse5 (and- 1 .cse4)) :proves (+ .cse3) :input) (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse3) :input)) :proves (+ .cse2) :rup) (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (res .cse6 (! (let ((.cse20 (+ call1formal@xProc@0 1))) (let ((.cse7 (<= .cse20 0))) (let ((.cse9 (not .cse7))) (let ((.cse14 (= .cse8 .cse9))) (let-proof ((.cse10 (not+ .cse9)) (.cse16 (not- .cse9))) (let-proof ((.cse15 (res .cse9 (res .cse8 (=+1 .cse14) (res .cse7 .cse10 (farkas 1 .cse8 1 .cse7))) (res .cse8 (res .cse17 .cse18 (res .cse7 (let ((.cse19 (<= 1 .cse20))) (res .cse19 (total-int .cse20 0) (farkas 1 .cse17 1 .cse19))) .cse16)) (=+2 .cse14))))) (res .cse7 (! (res .cse8 (res .cse9 .cse10 (let ((.cse11 (not .cse9))) (res .cse11 (let ((.cse12 (not .cse8))) (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res .cse14 .cse15 (cong (not .cse8) (not .cse9))) (=-2 .cse13))))) (not- .cse11)))) (=>+ 1 .cse6)) :proves (+ .cse6 + .cse7) :input) (! (res .cse8 (res .cse4 .cse5 (and- 0 .cse4)) (res .cse9 (res .cse14 .cse15 (=-2 .cse14)) .cse16)) :proves (- .cse7) :input)))))))) :proves (+ .cse6) :rup) (! (res .cse21 (and+ .cse21) (=>+ 1 .cse0)) :proves (+ .cse0 - .cse6 - .cse1) :input)))) :proves (+ .cse0) :rup) (res .cse24 (! (res .cse25 (! (res .cse26 (res .cse22 .cse23 (and- 0 .cse22)) (and- 1 .cse26)) :proves (+ .cse25) :input) (! (=>+ 1 .cse24) :proves (+ .cse24 - .cse25) :input)) :proves (+ .cse24) :rup) (! (res .cse27 (and+ .cse27) (res .cse28 (=>+ 1 .cse28) .cse29)) :proves (- .cse24 - .cse0) :input)))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_Where.bpl.mod.smt2:309:10: Logical context not inconsistent!")
unsat
(! (let ((.cse148 (ControlFlow 0 5)) (.cse7 (+ y@0 2)) (.cse118 (* (- 1) y@1))) (let ((.cse225 (* (- 1) y@0)) (.cse223 (+ .cse118 7)) (.cse4 (= y@1 .cse7)) (.cse139 (= .cse148 (- 4)))) (let ((.cse1 (and .cse4 .cse139)) (.cse16 (<= .cse223 0)) (.cse97 (ControlFlow 0 2)) (.cse222 (+ .cse225 w@0))) (let ((.cse74 (<= .cse222 0)) (.cse91 (= .cse97 (- 1))) (.cse163 (= y@0 10)) (.cse2 (=> .cse1 .cse16)) (.cse153 (= .cse148 (- 6))) (.cse60 (= w@1 6))) (let ((.cse32 (=> .cse153 .cse60)) (.cse30 (=> .cse60 .cse2)) (.cse40 (+ w@0 1)) (.cse89 (=> .cse91 .cse163)) (.cse176 (= .cse97 (- 3))) (.cse86 (and true .cse74))) (let ((.cse72 (=> .cse176 .cse86)) (.cse88 (=> .cse86 .cse89)) (.cse37 (= w@1 .cse40)) (.cse69 (and .cse32 .cse30)) (.cse224 (ControlFlow 0 7))) (let ((.cse221 (+ .cse225 5)) (.cse158 (= .cse224 5)) (.cse31 (=> .cse37 .cse69)) (.cse189 (= .cse224 2)) (.cse98 (and .cse72 .cse88))) (let ((.cse71 (=> .cse189 .cse98)) (.cse70 (=> .cse158 .cse31)) (.cse102 (= w@0 5)) (.cse112 (<= .cse221 0))) (let ((.cse103 (and .cse102 .cse112)) (.cse99 (and .cse71 .cse70))) (let ((.cse23 (< 0 .cse223)) (.cse81 (< 0 .cse222)) (.cse87 (* (- 1) w@0)) (.cse115 (< 0 .cse221)) (.cse100 (=> .cse103 .cse99))) (let-proof ((.cse24 (total .cse223 0)) (.cse82 (total .cse222 0)) (.cse85 true+) (.cse116 (total .cse221 0))) (let ((.cse119 (+ y@0 (- 4)))) (let-proof ((.cse101 (let ((.cse207 (+ x (* (- 1) y))) (.cse217 (* (- 1) x))) (let ((.cse214 (<= .cse217 0)) (.cse204 (<= .cse207 0))) (let ((.cse200 (and .cse204 true)) (.cse198 (= (ControlFlow 0 8) 7)) (.cse219 (and (= w x) true)) (.cse212 (and .cse214 true))) (let ((.cse210 (and .cse219 .cse212)) (.cse197 (and .cse200 .cse198))) (let ((.cse195 (and .cse210 .cse197))) (let ((.cse120 (=> .cse195 .cse100))) (res .cse120 (=>+ 1 .cse120) (let ((.cse220 (= (ControlFlow 0 0) 8))) (let ((.cse121 (=> .cse220 .cse120))) (res .cse121 (=>+ 1 .cse121) (let ((.cse140 (- 0 4))) (let ((.cse138 (= .cse148 .cse140))) (let ((.cse154 (- 0 6)) (.cse137 (and .cse4 .cse138)) (.cse135 (<= 7 y@1)) (.cse165 (- 0 1)) (.cse186 (- y@0 w@0))) (let ((.cse188 (= 5 5)) (.cse181 (<= 0 .cse186)) (.cse177 (- 0 3)) (.cse164 (= .cse97 .cse165)) (.cse133 (=> .cse137 .cse135)) (.cse152 (= .cse148 .cse154))) (let ((.cse151 (=> .cse152 .cse60)) (.cse132 (=> .cse60 .cse133)) (.cse162 (=> .cse164 .cse163)) (.cse175 (= .cse97 .cse177)) (.cse173 (and .cse188 .cse181))) (let ((.cse174 (=> .cse175 .cse173)) (.cse161 (=> .cse173 .cse162)) (.cse131 (and .cse151 .cse132))) (let ((.cse130 (=> .cse37 .cse131)) (.cse160 (and .cse174 .cse161)) (.cse215 (<= 0 x)) (.cse205 (<= x y))) (let ((.cse199 (and .cse205 true)) (.cse211 (and .cse215 true)) (.cse159 (=> .cse189 .cse160)) (.cse129 (=> .cse158 .cse130)) (.cse192 (<= 5 y@0))) (let ((.cse190 (and .cse102 .cse192)) (.cse128 (and .cse159 .cse129)) (.cse209 (and .cse219 .cse211)) (.cse196 (and .cse199 .cse198))) (let ((.cse194 (and .cse209 .cse196)) (.cse127 (=> .cse190 .cse128))) (let ((.cse126 (=> .cse194 .cse127))) (let ((.cse122 (=> .cse220 .cse126))) (let ((.cse124 (not .cse122))) (res .cse122 (let ((.cse123 (not .cse121))) (res .cse123 (res .cse124 (not+ .cse124) (let ((.cse125 (= .cse124 .cse123))) (res .cse125 (res (= .cse122 .cse121) (res (= .cse126 .cse120) (res (= .cse127 .cse100) (res (= .cse128 .cse99) (let ((.cse142 (= 0 0))) (let-proof ((.cse143 (refl 0))) (res (= .cse129 .cse70) (res (= .cse130 .cse31) (res (= .cse131 .cse69) (let ((.cse149 (= .cse60 .cse60)) (.cse146 (= .cse148 .cse148))) (let-proof ((.cse150 (refl .cse60)) (.cse147 (refl .cse148))) (res (= .cse132 .cse30) (res (= .cse133 .cse2) (let ((.cse134 (= .cse135 .cse16))) (res .cse134 (res .cse16 (res .cse135 (=+1 .cse134) (res .cse23 .cse24 (farkas 1 .cse135 1 .cse23))) (res .cse135 (let ((.cse136 (< y@1 7))) (res .cse136 (total 7 y@1) (farkas 1 .cse136 1 .cse16))) (=+2 .cse134))) (res (= .cse137 .cse1) (res (= .cse138 .cse139) (res (= .cse140 (- 4)) (let ((.cse141 (* (- 1) 4))) (res (= .cse141 (- 4)) (poly* .cse141 (- 4)) (res .cse142 .cse143 (let ((.cse144 (+ 0 .cse141)) (.cse145 (+ 0 (- 4)))) (res (= .cse144 .cse145) (cong (+ 0 .cse141) (+ 0 (- 4))) (res (= .cse140 .cse144) (-def 0 4) (res (= .cse145 (- 4)) (poly+ .cse145 (- 4)) (trans .cse140 .cse144 .cse145 (- 4))))))))) (res .cse146 .cse147 (cong (= .cse148 .cse140) (= .cse148 (- 4))))) (res (= .cse4 .cse4) (refl .cse4) (cong (and .cse4 .cse138) (and .cse4 .cse139)))) (cong (=> .cse137 .cse135) (=> .cse1 .cse16))))) (res .cse149 .cse150 (cong (=> .cse60 .cse133) (=> .cse60 .cse2)))) (res (= .cse151 .cse32) (res .cse149 .cse150 (res (= .cse152 .cse153) (res (= .cse154 (- 6)) (let ((.cse155 (* (- 1) 6))) (res (= .cse155 (- 6)) (poly* .cse155 (- 6)) (res .cse142 .cse143 (let ((.cse156 (+ 0 .cse155)) (.cse157 (+ 0 (- 6)))) (res (= .cse156 .cse157) (cong (+ 0 .cse155) (+ 0 (- 6))) (res (= .cse154 .cse156) (-def 0 6) (res (= .cse157 (- 6)) (poly+ .cse157 (- 6)) (trans .cse154 .cse156 .cse157 (- 6))))))))) (res .cse146 .cse147 (cong (= .cse148 .cse154) (= .cse148 (- 6))))) (cong (=> .cse152 .cse60) (=> .cse153 .cse60)))) (cong (and .cse151 .cse132) (and .cse32 .cse30)))))) (res (= .cse37 .cse37) (refl .cse37) (cong (=> .cse37 .cse131) (=> .cse37 .cse69)))) (res (= .cse158 .cse158) (refl .cse158) (cong (=> .cse158 .cse130) (=> .cse158 .cse31)))) (res (= .cse159 .cse71) (res (= .cse160 .cse98) (let ((.cse171 (= .cse173 .cse86)) (.cse169 (= .cse97 .cse97))) (let-proof ((.cse172 (res (= .cse181 .cse74) (let ((.cse185 (+ y@0 .cse87))) (let ((.cse183 (<= 0 .cse185))) (let ((.cse182 (= .cse183 .cse74))) (res .cse182 (res .cse74 (res .cse183 (=+1 .cse182) (res .cse81 .cse82 (farkas 1 .cse183 1 .cse81))) (res .cse183 (let ((.cse184 (< .cse185 0))) (res .cse184 (total 0 .cse185) (farkas 1 .cse184 1 .cse74))) (=+2 .cse182))) (res (= .cse181 .cse183) (res (= .cse186 .cse185) (-def y@0 w@0) (res .cse142 .cse143 (cong (<= 0 .cse186) (<= 0 .cse185)))) (trans .cse181 .cse183 .cse74)))))) (let ((.cse187 (= .cse188 true))) (res .cse187 (res true .cse85 (res .cse188 (refl 5) (=+2 .cse187))) (cong (and .cse188 .cse181) (and true .cse74)))))) (.cse170 (refl .cse97))) (res (= .cse161 .cse88) (res (= .cse162 .cse89) (res (= .cse163 .cse163) (refl .cse163) (res (= .cse164 .cse91) (res (= .cse165 (- 1)) (let ((.cse166 (* (- 1) 1))) (res (= .cse166 (- 1)) (poly* .cse166 (- 1)) (res .cse142 .cse143 (let ((.cse167 (+ 0 .cse166)) (.cse168 (+ 0 (- 1)))) (res (= .cse167 .cse168) (cong (+ 0 .cse166) (+ 0 (- 1))) (res (= .cse165 .cse167) (-def 0 1) (res (= .cse168 (- 1)) (poly+ .cse168 (- 1)) (trans .cse165 .cse167 .cse168 (- 1))))))))) (res .cse169 .cse170 (cong (= .cse97 .cse165) (= .cse97 (- 1))))) (cong (=> .cse164 .cse163) (=> .cse91 .cse163)))) (res .cse171 .cse172 (cong (=> .cse173 .cse162) (=> .cse86 .cse89)))) (res (= .cse174 .cse72) (res .cse171 .cse172 (res (= .cse175 .cse176) (res (= .cse177 (- 3)) (let ((.cse178 (* (- 1) 3))) (res (= .cse178 (- 3)) (poly* .cse178 (- 3)) (res .cse142 .cse143 (let ((.cse179 (+ 0 .cse178)) (.cse180 (+ 0 (- 3)))) (res (= .cse179 .cse180) (cong (+ 0 .cse178) (+ 0 (- 3))) (res (= .cse177 .cse179) (-def 0 3) (res (= .cse180 (- 3)) (poly+ .cse180 (- 3)) (trans .cse177 .cse179 .cse180 (- 3))))))))) (res .cse169 .cse170 (cong (= .cse97 .cse177) (= .cse97 (- 3))))) (cong (=> .cse175 .cse173) (=> .cse176 .cse86)))) (cong (and .cse174 .cse161) (and .cse72 .cse88)))))) (res (= .cse189 .cse189) (refl .cse189) (cong (=> .cse189 .cse160) (=> .cse189 .cse98)))) (cong (and .cse159 .cse129) (and .cse71 .cse70)))))) (res (= .cse190 .cse103) (let ((.cse191 (= .cse192 .cse112))) (res .cse191 (res .cse112 (res .cse192 (=+1 .cse191) (res .cse115 .cse116 (farkas 1 .cse192 1 .cse115))) (res .cse192 (let ((.cse193 (< y@0 5))) (res .cse193 (total 5 y@0) (farkas 1 .cse193 1 .cse112))) (=+2 .cse191))) (res (= .cse102 .cse102) (refl .cse102) (cong (and .cse102 .cse192) (and .cse102 .cse112))))) (cong (=> .cse190 .cse128) (=> .cse103 .cse99)))) (res (= .cse194 .cse195) (let ((.cse201 (= true true))) (let-proof ((.cse202 (refl true))) (res (= .cse196 .cse197) (res (= .cse198 .cse198) (refl .cse198) (res (= .cse199 .cse200) (res .cse201 .cse202 (let ((.cse203 (= .cse205 .cse204))) (res .cse203 (res .cse204 (res .cse205 (=+1 .cse203) (let ((.cse206 (< 0 .cse207))) (res .cse206 (total .cse207 0) (farkas 1 .cse205 1 .cse206)))) (res .cse205 (let ((.cse208 (< y x))) (res .cse208 (total x y) (farkas 1 .cse208 1 .cse204))) (=+2 .cse203))) (cong (and .cse205 true) (and .cse204 true))))) (cong (and .cse199 .cse198) (and .cse200 .cse198)))) (res (= .cse209 .cse210) (res (= .cse211 .cse212) (res .cse201 .cse202 (let ((.cse213 (= .cse215 .cse214))) (res .cse213 (res .cse214 (res .cse215 (=+1 .cse213) (let ((.cse216 (< 0 .cse217))) (res .cse216 (total .cse217 0) (farkas 1 .cse215 1 .cse216)))) (res .cse215 (let ((.cse218 (< x 0))) (res .cse218 (total 0 x) (farkas 1 .cse218 1 .cse214))) (=+2 .cse213))) (cong (and .cse215 true) (and .cse214 true))))) (res (= .cse219 .cse219) (refl .cse219) (cong (and .cse219 .cse211) (and .cse219 .cse212)))) (cong (and .cse209 .cse196) (and .cse210 .cse197)))))) (cong (=> .cse194 .cse127) (=> .cse195 .cse100)))) (res (= .cse220 .cse220) (refl .cse220) (cong (=> .cse220 .cse126) (=> .cse220 .cse120)))) (cong (not .cse122) (not .cse121))) (=-2 .cse125)))) (not- .cse123))) (res .cse124 (assume .cse124) (not- .cse124)))))))))))))))))))))))))))) (let ((.cse27 (<= 1 .cse119)) (.cse14 (<= .cse119 0))) (let-proof ((.cse104 (res .cse100 (=>+ 0 .cse100) .cse101)) (.cse28 (total-int .cse119 0))) (let ((.cse10 (+ y@0 .cse118 2))) (let-proof ((.cse29 (! (res .cse112 (res .cse103 .cse104 (and- 1 .cse103)) (let ((.cse113 (not .cse14))) (let-proof ((.cse117 (not- .cse113))) (res .cse113 (let ((.cse114 (= .cse112 .cse113))) (res .cse114 (res .cse113 (res .cse112 (=+1 .cse114) (res .cse14 (not+ .cse113) (farkas 1 .cse112 1 .cse14))) (res .cse112 (res .cse115 .cse116 (res .cse14 (res .cse27 .cse28 (farkas 1 .cse115 1 .cse27)) .cse117)) (=+2 .cse114))) (=-2 .cse114))) .cse117)))) :proves (- .cse14) :input))) (let ((.cse0 (= .cse10 0))) (let-proof ((.cse3 (! (res .cse30 (! (=>+ 1 .cse30) :proves (+ .cse30 - .cse2) :input) (! (let ((.cse109 (+ w@0 (- 5)))) (let ((.cse58 (= 0 .cse109)) (.cse34 (= .cse109 0))) (let-proof ((.cse59 (symm 0 .cse109))) (let-proof ((.cse35 (! (res .cse102 (res .cse103 .cse104 (and- 0 .cse103)) (let ((.cse105 (= .cse102 .cse34))) (res .cse105 (res .cse34 (res .cse102 (=+1 .cse105) (let ((.cse106 (= 5 w@0))) (res .cse106 (symm 5 w@0) (let ((.cse107 (< .cse109 0))) (res .cse107 (let ((.cse108 (< 0 .cse109))) (res .cse108 (trichotomy .cse109 0) (farkas 1 .cse102 1 .cse108))) (farkas 1 .cse106 1 .cse107)))))) (res .cse102 (res .cse58 .cse59 (let ((.cse110 (< w@0 5))) (res .cse110 (let ((.cse111 (< 5 w@0))) (res .cse111 (trichotomy w@0 5) (farkas 1 .cse34 1 .cse111))) (farkas 1 .cse58 1 .cse110)))) (=+2 .cse105))) (=-2 .cse105)))) :proves (+ .cse34) :input))) (let-proof ((.cse48 (! (res .cse70 (! (=>+ 1 .cse70) :proves (+ .cse70 - .cse31) :input) (! (res .cse71 (! (res .cse72 (! (let ((.cse84 (+ y@0 .cse87 1))) (let ((.cse73 (<= .cse84 0))) (res .cse73 (! (res .cse74 (let ((.cse75 (not .cse73))) (let-proof ((.cse76 (not+ .cse75))) (res .cse75 .cse76 (let ((.cse77 (not .cse75))) (res .cse77 (let ((.cse78 (not .cse74))) (res .cse78 (not+ .cse78) (let ((.cse79 (= .cse78 .cse77))) (res .cse79 (let ((.cse80 (= .cse74 .cse75))) (res .cse80 (res .cse75 (res .cse74 (=+1 .cse80) (res .cse73 .cse76 (farkas 1 .cse74 1 .cse73))) (res .cse74 (res .cse81 .cse82 (res .cse73 (let ((.cse83 (<= 1 .cse84))) (res .cse83 (total-int .cse84 0) (farkas 1 .cse81 1 .cse83))) (not- .cse75))) (=+2 .cse80))) (cong (not .cse74) (not .cse75)))) (=-2 .cse79))))) (not- .cse77)))))) (res true .cse85 (res .cse86 (and+ .cse86) (=>+ 1 .cse72)))) :proves (+ .cse72 + .cse73) :input) (! (res .cse34 .cse35 (res .cse14 (! (res .cse27 .cse28 (farkas 1 .cse27 1 .cse73 1 .cse34)) :proves (+ .cse14 - .cse73 - .cse34) :LA ((- 1) 1 1)) .cse29)) :proves (- .cse73) :rup)))) :proves (+ .cse72) :rup) (res .cse88 (! (res .cse89 (! (let ((.cse90 (= (- 1) .cse97))) (let ((.cse92 (= .cse91 .cse90))) (let-proof ((.cse93 (res .cse90 (res .cse91 (=+1 .cse92) (symm (- 1) .cse97)) (res .cse91 (symm .cse97 (- 1)) (=+2 .cse92))))) (res .cse90 (! (res .cse91 (=>+ 0 .cse89) (res .cse92 .cse93 (=-2 .cse92))) :proves (+ .cse89 + .cse90) :input) (! (let ((.cse95 (not .cse91))) (res .cse91 (let ((.cse94 (not .cse90))) (res .cse94 (res .cse95 (not+ .cse95) (let ((.cse96 (= .cse95 .cse94))) (res .cse96 (res .cse92 .cse93 (cong (not .cse91) (not .cse90))) (=-2 .cse96)))) (not- .cse94))) (res .cse95 (assume .cse95) (not- .cse95)))) :proves (- .cse90) :input))))) :proves (+ .cse89) :rup) (! (=>+ 1 .cse88) :proves (+ .cse88 - .cse89) :input)) :proves (+ .cse88) :rup) (! (res .cse98 (and+ .cse98) (=>+ 1 .cse71)) :proves (+ .cse71 - .cse88 - .cse72) :input))) :proves (+ .cse71) :rup) (! (res .cse99 (and+ .cse99) (res .cse100 (=>+ 1 .cse100) .cse101)) :proves (- .cse71 - .cse70) :input)) :proves (- .cse70) :rup)) :proves (- .cse31) :rup))) (res .cse31 (res .cse32 (! (let ((.cse51 (+ w@1 (- 6)))) (let ((.cse54 (< 0 .cse51)) (.cse53 (< .cse51 0)) (.cse33 (= .cse51 0))) (let-proof ((.cse55 (trichotomy .cse51 0))) (res .cse33 (! (res .cse34 .cse35 (let ((.cse43 (+ w@0 (* (- 1) w@1) 1))) (let ((.cse44 (= 0 .cse43)) (.cse36 (= .cse43 0))) (let-proof ((.cse45 (symm 0 .cse43))) (res .cse36 (! (res .cse31 (! (res .cse37 (=>+ 0 .cse31) (let ((.cse38 (= .cse37 .cse36))) (res .cse38 (res .cse36 (res .cse37 (=+1 .cse38) (let ((.cse39 (= .cse40 w@1))) (res .cse39 (symm .cse40 w@1) (let ((.cse41 (< .cse43 0))) (res .cse41 (let ((.cse42 (< 0 .cse43))) (res .cse42 (trichotomy .cse43 0) (farkas 1 .cse39 1 .cse42))) (farkas 1 .cse37 1 .cse41)))))) (res .cse37 (res .cse44 .cse45 (let ((.cse46 (< w@1 .cse40))) (res .cse46 (let ((.cse47 (< .cse40 w@1))) (res .cse47 (trichotomy w@1 .cse40) (farkas 1 .cse44 1 .cse47))) (farkas 1 .cse36 1 .cse46)))) (=+2 .cse38))) (=-2 .cse38)))) :proves (+ .cse31 + .cse36) :input) .cse48) :proves (+ .cse36) :rup) (let ((.cse49 (<= .cse51 0))) (res .cse49 (! (res .cse44 .cse45 (let ((.cse50 (<= 1 .cse51))) (res .cse50 (total-int .cse51 0) (farkas 1 .cse50 1 .cse44 1 .cse34)))) :proves (+ .cse49 - .cse36 - .cse34) :LA ((- 1) (- 1) 1)) (let ((.cse57 (+ w@1 (- 5)))) (let ((.cse52 (<= .cse57 0))) (res .cse52 (! (res .cse53 (res .cse54 .cse55 (farkas 1 .cse54 1 .cse49)) (let ((.cse56 (<= 1 .cse57))) (res .cse56 (total-int .cse57 0) (farkas 1 .cse56 1 .cse53)))) :proves (+ .cse52 + .cse33 - .cse49) :trichotomy) (! (res .cse58 .cse59 (farkas 1 .cse36 1 .cse58 1 .cse52)) :proves (- .cse36 - .cse34 - .cse52) :LA (1 (- 1) 1)))))))))))) :proves (+ .cse33) :rup) (! (res .cse60 (let ((.cse61 (not .cse33))) (res .cse61 (let ((.cse62 (not .cse60))) (res .cse62 (not+ .cse62) (let ((.cse63 (= .cse62 .cse61))) (res .cse63 (let ((.cse64 (= .cse60 .cse33))) (res .cse64 (res .cse33 (res .cse60 (=+1 .cse64) (let ((.cse65 (= 6 w@1))) (res .cse65 (symm 6 w@1) (res .cse53 (res .cse54 .cse55 (farkas 1 .cse60 1 .cse54)) (farkas 1 .cse65 1 .cse53))))) (res .cse60 (let ((.cse66 (= 0 .cse51))) (res .cse66 (symm 0 .cse51) (let ((.cse67 (< w@1 6))) (res .cse67 (let ((.cse68 (< 6 w@1))) (res .cse68 (trichotomy w@1 6) (farkas 1 .cse33 1 .cse68))) (farkas 1 .cse66 1 .cse67))))) (=+2 .cse64))) (cong (not .cse60) (not .cse33)))) (=-2 .cse63))))) (not- .cse61))) (=>+ 1 .cse32)) :proves (+ .cse32 - .cse33) :input))))) :proves (+ .cse32) :rup) (! (res .cse69 (and+ .cse69) (=>+ 1 .cse31)) :proves (- .cse30 - .cse32 + .cse31) :input)) .cse48)))))) :proves (- .cse30) :rup)) :proves (- .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + .cse1) :input) .cse3) :proves (+ .cse1) :rup) (! (res .cse4 (and- 0 .cse1) (let ((.cse5 (= .cse4 .cse0))) (res .cse5 (res .cse0 (res .cse4 (=+1 .cse5) (let ((.cse6 (= .cse7 y@1))) (res .cse6 (symm .cse7 y@1) (let ((.cse8 (< .cse10 0))) (res .cse8 (let ((.cse9 (< 0 .cse10))) (res .cse9 (trichotomy .cse10 0) (farkas 1 .cse6 1 .cse9))) (farkas 1 .cse4 1 .cse8)))))) (res .cse4 (let ((.cse11 (= 0 .cse10))) (res .cse11 (symm 0 .cse10) (let ((.cse12 (< y@1 .cse7))) (res .cse12 (let ((.cse13 (< .cse7 y@1))) (res .cse13 (trichotomy y@1 .cse7) (farkas 1 .cse11 1 .cse13))) (farkas 1 .cse0 1 .cse12))))) (=+2 .cse5))) (=-2 .cse5)))) :proves (- .cse1 + .cse0) :input)) :proves (+ .cse0) :rup) (res .cse14 (let ((.cse26 (+ y@1 (- 6)))) (let ((.cse15 (<= .cse26 0))) (res .cse15 (! (res .cse2 (! (res .cse16 (let ((.cse17 (not .cse15))) (let-proof ((.cse18 (not+ .cse17))) (res .cse17 .cse18 (let ((.cse19 (not .cse17))) (res .cse19 (let ((.cse20 (not .cse16))) (res .cse20 (not+ .cse20) (let ((.cse21 (= .cse20 .cse19))) (res .cse21 (let ((.cse22 (= .cse16 .cse17))) (res .cse22 (res .cse17 (res .cse16 (=+1 .cse22) (res .cse15 .cse18 (farkas 1 .cse16 1 .cse15))) (res .cse16 (res .cse23 .cse24 (res .cse15 (let ((.cse25 (<= 1 .cse26))) (res .cse25 (total-int .cse26 0) (farkas 1 .cse23 1 .cse25))) (not- .cse17))) (=+2 .cse22))) (cong (not .cse16) (not .cse17)))) (=-2 .cse21))))) (not- .cse19)))))) (=>+ 1 .cse2)) :proves (+ .cse2 + .cse15) :input) .cse3) :proves (+ .cse15) :rup) (! (res .cse27 .cse28 (farkas 1 .cse15 1 .cse27 1 .cse0)) :proves (- .cse15 + .cse14 - .cse0) :LA (1 (- 1) 1))))) .cse29))))))))))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_Where.bpl.mod.smt2:351:10: Logical context not inconsistent!")
unsat
(! (let ((.cse69 (ControlFlow 0 2))) (let ((.cse2 (= .cse69 (- 1))) (.cse0 (= (- 1) .cse69))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse69)) (res .cse2 (symm .cse69 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse58 (+ w@0 (- 10)))) (let ((.cse55 (<= .cse58 0))) (let ((.cse1 (=> .cse2 .cse55))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse5 (=> true .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse75 (= .cse69 (- 3)))) (let ((.cse6 (=> .cse75 true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (let ((.cse129 (* (- 1) x@0))) (let ((.cse12 (<= .cse129 0)) (.cse9 (and .cse6 .cse5))) (let ((.cse8 (=> .cse12 .cse9))) (res .cse8 (! (res .cse9 (and+ .cse9) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse5 - .cse6) :input) (! (let ((.cse85 (= .cse69 (- 4)))) (let ((.cse10 (=> .cse85 .cse12))) (let ((.cse28 (and .cse10 .cse8)) (.cse94 (= .cse69 (- 5))) (.cse31 (= w@0 x@0))) (let ((.cse30 (=> .cse94 .cse31)) (.cse27 (=> .cse31 .cse28)) (.cse130 (ControlFlow 0 7))) (let ((.cse99 (= .cse130 2)) (.cse32 (and .cse30 .cse27))) (let ((.cse29 (=> .cse99 .cse32)) (.cse33 (=> (= .cse130 6) true))) (let ((.cse20 (and .cse31 .cse12)) (.cse34 (and .cse29 .cse33))) (let ((.cse23 (< 0 .cse129)) (.cse35 (=> .cse20 .cse34))) (let-proof ((.cse24 (total .cse129 0))) (let-proof ((.cse36 (let ((.cse115 (+ x (* (- 1) y))) (.cse125 (* (- 1) x))) (let ((.cse122 (<= .cse125 0)) (.cse112 (<= .cse115 0))) (let ((.cse108 (and .cse112 true)) (.cse106 (= (ControlFlow 0 8) 7)) (.cse127 (and (= w x) true)) (.cse120 (and .cse122 true))) (let ((.cse118 (and .cse127 .cse120)) (.cse105 (and .cse108 .cse106))) (let ((.cse103 (and .cse118 .cse105))) (let ((.cse37 (=> .cse103 .cse35))) (res .cse37 (=>+ 1 .cse37) (let ((.cse128 (= (ControlFlow 0 0) 8))) (let ((.cse38 (=> .cse128 .cse37))) (res .cse38 (=>+ 1 .cse38) (let ((.cse61 (- 0 1))) (let ((.cse76 (- 0 3)) (.cse60 (= .cse69 .cse61)) (.cse56 (<= w@0 10))) (let ((.cse53 (=> .cse60 .cse56)) (.cse74 (= .cse69 .cse76)) (.cse72 (= 10 10))) (let ((.cse86 (- 0 4)) (.cse73 (=> .cse74 .cse72)) (.cse52 (=> .cse72 .cse53))) (let ((.cse51 (and .cse73 .cse52)) (.cse84 (= .cse69 .cse86)) (.cse82 (<= 0 x@0))) (let ((.cse95 (- 0 5)) (.cse83 (=> .cse84 .cse82)) (.cse50 (=> .cse82 .cse51))) (let ((.cse49 (and .cse83 .cse50)) (.cse93 (= .cse69 .cse95))) (let ((.cse92 (=> .cse93 .cse31)) (.cse48 (=> .cse31 .cse49))) (let ((.cse47 (and .cse92 .cse48)) (.cse123 (<= 0 x)) (.cse113 (<= x y))) (let ((.cse107 (and .cse113 true)) (.cse119 (and .cse123 true)) (.cse46 (=> .cse99 .cse47))) (let ((.cse100 (and .cse31 .cse82)) (.cse45 (and .cse46 .cse33)) (.cse117 (and .cse127 .cse119)) (.cse104 (and .cse107 .cse106))) (let ((.cse102 (and .cse117 .cse104)) (.cse44 (=> .cse100 .cse45))) (let ((.cse43 (=> .cse102 .cse44))) (let ((.cse39 (=> .cse128 .cse43))) (let ((.cse41 (not .cse39))) (res .cse39 (let ((.cse40 (not .cse38))) (res .cse40 (res .cse41 (not+ .cse41) (let ((.cse42 (= .cse41 .cse40))) (res .cse42 (res (= .cse39 .cse38) (res (= .cse43 .cse37) (res (= .cse44 .cse35) (let ((.cse80 (= .cse82 .cse12))) (let ((.cse90 (= .cse31 .cse31))) (let-proof ((.cse81 (res .cse12 (res .cse82 (=+1 .cse80) (res .cse23 .cse24 (farkas 1 .cse82 1 .cse23))) (res .cse82 (let ((.cse101 (< x@0 0))) (res .cse101 (total 0 x@0) (farkas 1 .cse101 1 .cse12))) (=+2 .cse80)))) (.cse91 (refl .cse31))) (res (= .cse45 .cse34) (res (= .cse33 .cse33) (refl .cse33) (res (= .cse46 .cse29) (res (= .cse47 .cse32) (let ((.cse63 (= 0 0)) (.cse67 (= .cse69 .cse69))) (let-proof ((.cse64 (refl 0)) (.cse68 (refl .cse69))) (res (= .cse48 .cse27) (res (= .cse49 .cse28) (res (= .cse50 .cse8) (res (= .cse51 .cse9) (let ((.cse70 (= .cse72 true))) (let-proof ((.cse71 (res true .cse7 (res .cse72 (refl 10) (=+2 .cse70))))) (res (= .cse52 .cse5) (res (= .cse53 .cse1) (let ((.cse54 (= .cse56 .cse55))) (res .cse54 (res .cse55 (res .cse56 (=+1 .cse54) (let ((.cse57 (< 0 .cse58))) (res .cse57 (total .cse58 0) (farkas 1 .cse56 1 .cse57)))) (res .cse56 (let ((.cse59 (< 10 w@0))) (res .cse59 (total w@0 10) (farkas 1 .cse59 1 .cse55))) (=+2 .cse54))) (res (= .cse60 .cse2) (res (= .cse61 (- 1)) (let ((.cse62 (* (- 1) 1))) (res (= .cse62 (- 1)) (poly* .cse62 (- 1)) (res .cse63 .cse64 (let ((.cse65 (+ 0 .cse62)) (.cse66 (+ 0 (- 1)))) (res (= .cse65 .cse66) (cong (+ 0 .cse62) (+ 0 (- 1))) (res (= .cse61 .cse65) (-def 0 1) (res (= .cse66 (- 1)) (poly+ .cse66 (- 1)) (trans .cse61 .cse65 .cse66 (- 1))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse61) (= .cse69 (- 1))))) (cong (=> .cse60 .cse56) (=> .cse2 .cse55))))) (res .cse70 .cse71 (cong (=> .cse72 .cse53) (=> true .cse1)))) (res (= .cse73 .cse6) (res .cse70 .cse71 (res (= .cse74 .cse75) (res (= .cse76 (- 3)) (let ((.cse77 (* (- 1) 3))) (res (= .cse77 (- 3)) (poly* .cse77 (- 3)) (res .cse63 .cse64 (let ((.cse78 (+ 0 .cse77)) (.cse79 (+ 0 (- 3)))) (res (= .cse78 .cse79) (cong (+ 0 .cse77) (+ 0 (- 3))) (res (= .cse76 .cse78) (-def 0 3) (res (= .cse79 (- 3)) (poly+ .cse79 (- 3)) (trans .cse76 .cse78 .cse79 (- 3))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse76) (= .cse69 (- 3))))) (cong (=> .cse74 .cse72) (=> .cse75 true)))) (cong (and .cse73 .cse52) (and .cse6 .cse5)))))) (res .cse80 .cse81 (cong (=> .cse82 .cse51) (=> .cse12 .cse9)))) (res (= .cse83 .cse10) (res .cse80 .cse81 (res (= .cse84 .cse85) (res (= .cse86 (- 4)) (let ((.cse87 (* (- 1) 4))) (res (= .cse87 (- 4)) (poly* .cse87 (- 4)) (res .cse63 .cse64 (let ((.cse88 (+ 0 .cse87)) (.cse89 (+ 0 (- 4)))) (res (= .cse88 .cse89) (cong (+ 0 .cse87) (+ 0 (- 4))) (res (= .cse86 .cse88) (-def 0 4) (res (= .cse89 (- 4)) (poly+ .cse89 (- 4)) (trans .cse86 .cse88 .cse89 (- 4))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse86) (= .cse69 (- 4))))) (cong (=> .cse84 .cse82) (=> .cse85 .cse12)))) (cong (and .cse83 .cse50) (and .cse10 .cse8)))) (res .cse90 .cse91 (cong (=> .cse31 .cse49) (=> .cse31 .cse28)))) (res (= .cse92 .cse30) (res .cse90 .cse91 (res (= .cse93 .cse94) (res (= .cse95 (- 5)) (let ((.cse96 (* (- 1) 5))) (res (= .cse96 (- 5)) (poly* .cse96 (- 5)) (res .cse63 .cse64 (let ((.cse97 (+ 0 .cse96)) (.cse98 (+ 0 (- 5)))) (res (= .cse97 .cse98) (cong (+ 0 .cse96) (+ 0 (- 5))) (res (= .cse95 .cse97) (-def 0 5) (res (= .cse98 (- 5)) (poly+ .cse98 (- 5)) (trans .cse95 .cse97 .cse98 (- 5))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse95) (= .cse69 (- 5))))) (cong (=> .cse93 .cse31) (=> .cse94 .cse31)))) (cong (and .cse92 .cse48) (and .cse30 .cse27)))))) (res (= .cse99 .cse99) (refl .cse99) (cong (=> .cse99 .cse47) (=> .cse99 .cse32)))) (cong (and .cse46 .cse33) (and .cse29 .cse33)))) (res (= .cse100 .cse20) (res .cse80 .cse81 (res .cse90 .cse91 (cong (and .cse31 .cse82) (and .cse31 .cse12)))) (cong (=> .cse100 .cse45) (=> .cse20 .cse34))))))) (res (= .cse102 .cse103) (let ((.cse109 (= true true))) (let-proof ((.cse110 (refl true))) (res (= .cse104 .cse105) (res (= .cse106 .cse106) (refl .cse106) (res (= .cse107 .cse108) (res .cse109 .cse110 (let ((.cse111 (= .cse113 .cse112))) (res .cse111 (res .cse112 (res .cse113 (=+1 .cse111) (let ((.cse114 (< 0 .cse115))) (res .cse114 (total .cse115 0) (farkas 1 .cse113 1 .cse114)))) (res .cse113 (let ((.cse116 (< y x))) (res .cse116 (total x y) (farkas 1 .cse116 1 .cse112))) (=+2 .cse111))) (cong (and .cse113 true) (and .cse112 true))))) (cong (and .cse107 .cse106) (and .cse108 .cse106)))) (res (= .cse117 .cse118) (res (= .cse119 .cse120) (res .cse109 .cse110 (let ((.cse121 (= .cse123 .cse122))) (res .cse121 (res .cse122 (res .cse123 (=+1 .cse121) (let ((.cse124 (< 0 .cse125))) (res .cse124 (total .cse125 0) (farkas 1 .cse123 1 .cse124)))) (res .cse123 (let ((.cse126 (< x 0))) (res .cse126 (total 0 x) (farkas 1 .cse126 1 .cse122))) (=+2 .cse121))) (cong (and .cse123 true) (and .cse122 true))))) (res (= .cse127 .cse127) (refl .cse127) (cong (and .cse127 .cse119) (and .cse127 .cse120)))) (cong (and .cse117 .cse104) (and .cse118 .cse105)))))) (cong (=> .cse102 .cse44) (=> .cse103 .cse35)))) (res (= .cse128 .cse128) (refl .cse128) (cong (=> .cse128 .cse43) (=> .cse128 .cse37)))) (cong (not .cse39) (not .cse38))) (=-2 .cse42)))) (not- .cse40))) (res .cse41 (assume .cse41) (not- .cse41)))))))))))))))))))))))))))))) (let-proof ((.cse21 (res .cse35 (=>+ 0 .cse35) .cse36))) (res .cse10 (! (let ((.cse26 (+ x@0 1))) (let ((.cse11 (<= .cse26 0))) (let ((.cse13 (not .cse11))) (let ((.cse18 (= .cse12 .cse13))) (let-proof ((.cse14 (not+ .cse13)) (.cse22 (not- .cse13))) (let-proof ((.cse19 (res .cse13 (res .cse12 (=+1 .cse18) (res .cse11 .cse14 (farkas 1 .cse12 1 .cse11))) (res .cse12 (res .cse23 .cse24 (res .cse11 (let ((.cse25 (<= 1 .cse26))) (res .cse25 (total-int .cse26 0) (farkas 1 .cse23 1 .cse25))) .cse22)) (=+2 .cse18))))) (res .cse11 (! (res .cse12 (res .cse13 .cse14 (let ((.cse15 (not .cse13))) (res .cse15 (let ((.cse16 (not .cse12))) (res .cse16 (not+ .cse16) (let ((.cse17 (= .cse16 .cse15))) (res .cse17 (res .cse18 .cse19 (cong (not .cse12) (not .cse13))) (=-2 .cse17))))) (not- .cse15)))) (=>+ 1 .cse10)) :proves (+ .cse10 + .cse11) :input) (! (res .cse12 (res .cse20 .cse21 (and- 1 .cse20)) (res .cse13 (res .cse18 .cse19 (=-2 .cse18)) .cse22)) :proves (- .cse11) :input)))))))) :proves (+ .cse10) :rup) (res .cse27 (! (res .cse28 (and+ .cse28) (=>+ 1 .cse27)) :proves (+ .cse27 - .cse8 - .cse10) :input) (! (res .cse29 (res .cse30 (! (res .cse31 (! (res .cse20 .cse21 (and- 0 .cse20)) :proves (+ .cse31) :input) (! (=>+ 1 .cse30) :proves (+ .cse30 - .cse31) :input)) :proves (+ .cse30) :rup) (! (res .cse32 (and+ .cse32) (=>+ 1 .cse29)) :proves (- .cse27 - .cse30 + .cse29) :input)) (! (res .cse33 (! (res true .cse7 (=>+ 1 .cse33)) :proves (+ .cse33) :input) (! (res .cse34 (and+ .cse34) (res .cse35 (=>+ 1 .cse35) .cse36)) :proves (- .cse29 - .cse33) :input)) :proves (- .cse29) :rup)) :proves (- .cse27) :rup)))))))))))))) :proves (- .cse8) :rup))))))))) :proves (- .cse5) :rup))) :proves (- .cse1) :rup))))) :proves (+ .cse0) :rup) (! (let ((.cse132 (not .cse2))) (res .cse2 (let ((.cse131 (not .cse0))) (res .cse131 (res .cse132 (not+ .cse132) (let ((.cse133 (= .cse132 .cse131))) (res .cse133 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse133)))) (not- .cse131))) (res .cse132 (assume .cse132) (not- .cse132)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_Where.bpl.mod.smt2:393:10: Logical context not inconsistent!")
unsat
(! (let ((.cse69 (ControlFlow 0 2))) (let ((.cse2 (= .cse69 (- 1))) (.cse0 (= (- 1) .cse69))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse69)) (res .cse2 (symm .cse69 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse135 (* (- 1) y@0))) (let ((.cse58 (+ .cse135 8))) (let ((.cse55 (<= .cse58 0))) (let ((.cse1 (=> .cse2 .cse55))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse5 (=> true .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse75 (= .cse69 (- 3)))) (let ((.cse6 (=> .cse75 true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (let ((.cse104 (+ x@0 .cse135))) (let ((.cse11 (<= .cse104 0)) (.cse9 (and .cse6 .cse5))) (let ((.cse8 (=> .cse11 .cse9))) (res .cse8 (! (res .cse9 (and+ .cse9) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse5 - .cse6) :input) (! (let ((.cse85 (= .cse69 (- 4)))) (let ((.cse133 (* (- 1) x@0)) (.cse10 (=> .cse85 .cse11))) (let ((.cse15 (and .cse10 .cse8)) (.cse95 (= .cse69 (- 5))) (.cse19 (<= .cse133 0))) (let ((.cse17 (=> .cse95 .cse19)) (.cse14 (=> .cse19 .cse15)) (.cse134 (ControlFlow 0 7))) (let ((.cse100 (= .cse134 2)) (.cse32 (and .cse17 .cse14))) (let ((.cse16 (=> .cse100 .cse32)) (.cse33 (=> (= .cse134 6) true))) (let ((.cse12 (and .cse19 .cse11)) (.cse34 (and .cse16 .cse33))) (let ((.cse28 (< 0 .cse133)) (.cse35 (=> .cse12 .cse34))) (let-proof ((.cse29 (total .cse133 0))) (let-proof ((.cse36 (let ((.cse119 (+ x (* (- 1) y))) (.cse129 (* (- 1) x))) (let ((.cse126 (<= .cse129 0)) (.cse116 (<= .cse119 0))) (let ((.cse112 (and .cse116 true)) (.cse110 (= (ControlFlow 0 8) 7)) (.cse131 (and (= w x) true)) (.cse124 (and .cse126 true))) (let ((.cse122 (and .cse131 .cse124)) (.cse109 (and .cse112 .cse110))) (let ((.cse107 (and .cse122 .cse109))) (let ((.cse37 (=> .cse107 .cse35))) (res .cse37 (=>+ 1 .cse37) (let ((.cse132 (= (ControlFlow 0 0) 8))) (let ((.cse38 (=> .cse132 .cse37))) (res .cse38 (=>+ 1 .cse38) (let ((.cse61 (- 0 1))) (let ((.cse76 (- 0 3)) (.cse60 (= .cse69 .cse61)) (.cse56 (<= 8 y@0))) (let ((.cse53 (=> .cse60 .cse56)) (.cse74 (= .cse69 .cse76)) (.cse72 (= 12 12))) (let ((.cse86 (- 0 4)) (.cse73 (=> .cse74 .cse72)) (.cse52 (=> .cse72 .cse53))) (let ((.cse51 (and .cse73 .cse52)) (.cse84 (= .cse69 .cse86)) (.cse82 (<= x@0 y@0))) (let ((.cse96 (- 0 5)) (.cse83 (=> .cse84 .cse82)) (.cse50 (=> .cse82 .cse51))) (let ((.cse49 (and .cse83 .cse50)) (.cse94 (= .cse69 .cse96)) (.cse92 (<= 0 x@0))) (let ((.cse93 (=> .cse94 .cse92)) (.cse48 (=> .cse92 .cse49))) (let ((.cse47 (and .cse93 .cse48)) (.cse127 (<= 0 x)) (.cse117 (<= x y))) (let ((.cse111 (and .cse117 true)) (.cse123 (and .cse127 true)) (.cse46 (=> .cse100 .cse47))) (let ((.cse101 (and .cse92 .cse82)) (.cse45 (and .cse46 .cse33)) (.cse121 (and .cse131 .cse123)) (.cse108 (and .cse111 .cse110))) (let ((.cse106 (and .cse121 .cse108)) (.cse44 (=> .cse101 .cse45))) (let ((.cse43 (=> .cse106 .cse44))) (let ((.cse39 (=> .cse132 .cse43))) (let ((.cse41 (not .cse39))) (res .cse39 (let ((.cse40 (not .cse38))) (res .cse40 (res .cse41 (not+ .cse41) (let ((.cse42 (= .cse41 .cse40))) (res .cse42 (res (= .cse39 .cse38) (res (= .cse43 .cse37) (res (= .cse44 .cse35) (let ((.cse90 (= .cse92 .cse19)) (.cse80 (= .cse82 .cse11))) (let-proof ((.cse81 (res .cse11 (res .cse82 (=+1 .cse80) (let ((.cse103 (< 0 .cse104))) (res .cse103 (total .cse104 0) (farkas 1 .cse82 1 .cse103)))) (res .cse82 (let ((.cse105 (< y@0 x@0))) (res .cse105 (total x@0 y@0) (farkas 1 .cse105 1 .cse11))) (=+2 .cse80)))) (.cse91 (res .cse19 (res .cse92 (=+1 .cse90) (res .cse28 .cse29 (farkas 1 .cse92 1 .cse28))) (res .cse92 (let ((.cse102 (< x@0 0))) (res .cse102 (total 0 x@0) (farkas 1 .cse102 1 .cse19))) (=+2 .cse90))))) (res (= .cse45 .cse34) (res (= .cse33 .cse33) (refl .cse33) (res (= .cse46 .cse16) (res (= .cse47 .cse32) (let ((.cse63 (= 0 0)) (.cse67 (= .cse69 .cse69))) (let-proof ((.cse64 (refl 0)) (.cse68 (refl .cse69))) (res (= .cse48 .cse14) (res (= .cse49 .cse15) (res (= .cse50 .cse8) (res (= .cse51 .cse9) (let ((.cse70 (= .cse72 true))) (let-proof ((.cse71 (res true .cse7 (res .cse72 (refl 12) (=+2 .cse70))))) (res (= .cse52 .cse5) (res (= .cse53 .cse1) (let ((.cse54 (= .cse56 .cse55))) (res .cse54 (res .cse55 (res .cse56 (=+1 .cse54) (let ((.cse57 (< 0 .cse58))) (res .cse57 (total .cse58 0) (farkas 1 .cse56 1 .cse57)))) (res .cse56 (let ((.cse59 (< y@0 8))) (res .cse59 (total 8 y@0) (farkas 1 .cse59 1 .cse55))) (=+2 .cse54))) (res (= .cse60 .cse2) (res (= .cse61 (- 1)) (let ((.cse62 (* (- 1) 1))) (res (= .cse62 (- 1)) (poly* .cse62 (- 1)) (res .cse63 .cse64 (let ((.cse65 (+ 0 .cse62)) (.cse66 (+ 0 (- 1)))) (res (= .cse65 .cse66) (cong (+ 0 .cse62) (+ 0 (- 1))) (res (= .cse61 .cse65) (-def 0 1) (res (= .cse66 (- 1)) (poly+ .cse66 (- 1)) (trans .cse61 .cse65 .cse66 (- 1))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse61) (= .cse69 (- 1))))) (cong (=> .cse60 .cse56) (=> .cse2 .cse55))))) (res .cse70 .cse71 (cong (=> .cse72 .cse53) (=> true .cse1)))) (res (= .cse73 .cse6) (res .cse70 .cse71 (res (= .cse74 .cse75) (res (= .cse76 (- 3)) (let ((.cse77 (* (- 1) 3))) (res (= .cse77 (- 3)) (poly* .cse77 (- 3)) (res .cse63 .cse64 (let ((.cse78 (+ 0 .cse77)) (.cse79 (+ 0 (- 3)))) (res (= .cse78 .cse79) (cong (+ 0 .cse77) (+ 0 (- 3))) (res (= .cse76 .cse78) (-def 0 3) (res (= .cse79 (- 3)) (poly+ .cse79 (- 3)) (trans .cse76 .cse78 .cse79 (- 3))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse76) (= .cse69 (- 3))))) (cong (=> .cse74 .cse72) (=> .cse75 true)))) (cong (and .cse73 .cse52) (and .cse6 .cse5)))))) (res .cse80 .cse81 (cong (=> .cse82 .cse51) (=> .cse11 .cse9)))) (res (= .cse83 .cse10) (res .cse80 .cse81 (res (= .cse84 .cse85) (res (= .cse86 (- 4)) (let ((.cse87 (* (- 1) 4))) (res (= .cse87 (- 4)) (poly* .cse87 (- 4)) (res .cse63 .cse64 (let ((.cse88 (+ 0 .cse87)) (.cse89 (+ 0 (- 4)))) (res (= .cse88 .cse89) (cong (+ 0 .cse87) (+ 0 (- 4))) (res (= .cse86 .cse88) (-def 0 4) (res (= .cse89 (- 4)) (poly+ .cse89 (- 4)) (trans .cse86 .cse88 .cse89 (- 4))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse86) (= .cse69 (- 4))))) (cong (=> .cse84 .cse82) (=> .cse85 .cse11)))) (cong (and .cse83 .cse50) (and .cse10 .cse8)))) (res .cse90 .cse91 (cong (=> .cse92 .cse49) (=> .cse19 .cse15)))) (res (= .cse93 .cse17) (res .cse90 .cse91 (res (= .cse94 .cse95) (res (= .cse96 (- 5)) (let ((.cse97 (* (- 1) 5))) (res (= .cse97 (- 5)) (poly* .cse97 (- 5)) (res .cse63 .cse64 (let ((.cse98 (+ 0 .cse97)) (.cse99 (+ 0 (- 5)))) (res (= .cse98 .cse99) (cong (+ 0 .cse97) (+ 0 (- 5))) (res (= .cse96 .cse98) (-def 0 5) (res (= .cse99 (- 5)) (poly+ .cse99 (- 5)) (trans .cse96 .cse98 .cse99 (- 5))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse96) (= .cse69 (- 5))))) (cong (=> .cse94 .cse92) (=> .cse95 .cse19)))) (cong (and .cse93 .cse48) (and .cse17 .cse14)))))) (res (= .cse100 .cse100) (refl .cse100) (cong (=> .cse100 .cse47) (=> .cse100 .cse32)))) (cong (and .cse46 .cse33) (and .cse16 .cse33)))) (res (= .cse101 .cse12) (res .cse80 .cse81 (res .cse90 .cse91 (cong (and .cse92 .cse82) (and .cse19 .cse11)))) (cong (=> .cse101 .cse45) (=> .cse12 .cse34)))))) (res (= .cse106 .cse107) (let ((.cse113 (= true true))) (let-proof ((.cse114 (refl true))) (res (= .cse108 .cse109) (res (= .cse110 .cse110) (refl .cse110) (res (= .cse111 .cse112) (res .cse113 .cse114 (let ((.cse115 (= .cse117 .cse116))) (res .cse115 (res .cse116 (res .cse117 (=+1 .cse115) (let ((.cse118 (< 0 .cse119))) (res .cse118 (total .cse119 0) (farkas 1 .cse117 1 .cse118)))) (res .cse117 (let ((.cse120 (< y x))) (res .cse120 (total x y) (farkas 1 .cse120 1 .cse116))) (=+2 .cse115))) (cong (and .cse117 true) (and .cse116 true))))) (cong (and .cse111 .cse110) (and .cse112 .cse110)))) (res (= .cse121 .cse122) (res (= .cse123 .cse124) (res .cse113 .cse114 (let ((.cse125 (= .cse127 .cse126))) (res .cse125 (res .cse126 (res .cse127 (=+1 .cse125) (let ((.cse128 (< 0 .cse129))) (res .cse128 (total .cse129 0) (farkas 1 .cse127 1 .cse128)))) (res .cse127 (let ((.cse130 (< x 0))) (res .cse130 (total 0 x) (farkas 1 .cse130 1 .cse126))) (=+2 .cse125))) (cong (and .cse127 true) (and .cse126 true))))) (res (= .cse131 .cse131) (refl .cse131) (cong (and .cse131 .cse123) (and .cse131 .cse124)))) (cong (and .cse121 .cse108) (and .cse122 .cse109)))))) (cong (=> .cse106 .cse44) (=> .cse107 .cse35)))) (res (= .cse132 .cse132) (refl .cse132) (cong (=> .cse132 .cse43) (=> .cse132 .cse37)))) (cong (not .cse39) (not .cse38))) (=-2 .cse42)))) (not- .cse40))) (res .cse41 (assume .cse41) (not- .cse41)))))))))))))))))))))))))))))) (let-proof ((.cse13 (res .cse35 (=>+ 0 .cse35) .cse36))) (res .cse10 (! (res .cse11 (! (res .cse12 .cse13 (and- 1 .cse12)) :proves (+ .cse11) :input) (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse11) :input)) :proves (+ .cse10) :rup) (res .cse14 (! (res .cse15 (and+ .cse15) (=>+ 1 .cse14)) :proves (+ .cse14 - .cse8 - .cse10) :input) (! (res .cse16 (res .cse17 (! (let ((.cse31 (+ x@0 1))) (let ((.cse18 (<= .cse31 0))) (let ((.cse20 (not .cse18))) (let ((.cse25 (= .cse19 .cse20))) (let-proof ((.cse21 (not+ .cse20)) (.cse27 (not- .cse20))) (let-proof ((.cse26 (res .cse20 (res .cse19 (=+1 .cse25) (res .cse18 .cse21 (farkas 1 .cse19 1 .cse18))) (res .cse19 (res .cse28 .cse29 (res .cse18 (let ((.cse30 (<= 1 .cse31))) (res .cse30 (total-int .cse31 0) (farkas 1 .cse28 1 .cse30))) .cse27)) (=+2 .cse25))))) (res .cse18 (! (res .cse19 (res .cse20 .cse21 (let ((.cse22 (not .cse20))) (res .cse22 (let ((.cse23 (not .cse19))) (res .cse23 (not+ .cse23) (let ((.cse24 (= .cse23 .cse22))) (res .cse24 (res .cse25 .cse26 (cong (not .cse19) (not .cse20))) (=-2 .cse24))))) (not- .cse22)))) (=>+ 1 .cse17)) :proves (+ .cse17 + .cse18) :input) (! (res .cse19 (res .cse12 .cse13 (and- 0 .cse12)) (res .cse20 (res .cse25 .cse26 (=-2 .cse25)) .cse27)) :proves (- .cse18) :input)))))))) :proves (+ .cse17) :rup) (! (res .cse32 (and+ .cse32) (=>+ 1 .cse16)) :proves (- .cse14 - .cse17 + .cse16) :input)) (! (res .cse33 (! (res true .cse7 (=>+ 1 .cse33)) :proves (+ .cse33) :input) (! (res .cse34 (and+ .cse34) (res .cse35 (=>+ 1 .cse35) .cse36)) :proves (- .cse16 - .cse33) :input)) :proves (- .cse16) :rup)) :proves (- .cse14) :rup)))))))))))))) :proves (- .cse8) :rup))))))))) :proves (- .cse5) :rup))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse137 (not .cse2))) (res .cse2 (let ((.cse136 (not .cse0))) (res .cse136 (res .cse137 (not+ .cse137) (let ((.cse138 (= .cse137 .cse136))) (res .cse138 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse138)))) (not- .cse136))) (res .cse137 (assume .cse137) (not- .cse137)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_Where.bpl.mod.smt2:436:10: Logical context not inconsistent!")
unsat
(! (let ((.cse56 (ControlFlow 0 2))) (let ((.cse2 (= .cse56 (- 1))) (.cse0 (= (- 1) .cse56))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse56)) (res .cse2 (symm .cse56 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse45 (* (- 1) K))) (let ((.cse42 (<= .cse45 0))) (let ((.cse1 (=> .cse2 .cse42))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse5 (=> true .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse62 (= .cse56 (- 3)))) (let ((.cse6 (=> .cse62 true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (let ((.cse89 (+ K (* (- 1) y@0)))) (let ((.cse11 (<= .cse89 0)) (.cse9 (and .cse6 .cse5))) (let ((.cse8 (=> .cse11 .cse9))) (res .cse8 (! (res .cse9 (and+ .cse9) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse5 - .cse6) :input) (! (let ((.cse72 (= .cse56 (- 4)))) (let ((.cse10 (=> .cse72 .cse11))) (let ((.cse15 (and .cse10 .cse8)) (.cse81 (= .cse56 (- 5))) (.cse18 (= w@0 K))) (let ((.cse17 (=> .cse81 .cse18)) (.cse14 (=> .cse18 .cse15)) (.cse118 (ControlFlow 0 7))) (let ((.cse86 (= .cse118 2)) (.cse19 (and .cse17 .cse14))) (let ((.cse16 (=> .cse86 .cse19)) (.cse20 (=> (= .cse118 6) true))) (let ((.cse12 (and .cse18 .cse11)) (.cse21 (and .cse16 .cse20))) (let ((.cse22 (=> .cse12 .cse21))) (let-proof ((.cse23 (let ((.cse104 (+ x (* (- 1) y))) (.cse114 (* (- 1) x))) (let ((.cse111 (<= .cse114 0)) (.cse101 (<= .cse104 0))) (let ((.cse97 (and .cse101 true)) (.cse95 (= (ControlFlow 0 8) 7)) (.cse116 (and (= w x) true)) (.cse109 (and .cse111 true))) (let ((.cse107 (and .cse116 .cse109)) (.cse94 (and .cse97 .cse95))) (let ((.cse92 (and .cse107 .cse94))) (let ((.cse24 (=> .cse92 .cse22))) (res .cse24 (=>+ 1 .cse24) (let ((.cse117 (= (ControlFlow 0 0) 8))) (let ((.cse25 (=> .cse117 .cse24))) (res .cse25 (=>+ 1 .cse25) (let ((.cse48 (- 0 1))) (let ((.cse63 (- 0 3)) (.cse47 (= .cse56 .cse48)) (.cse43 (<= 0 K))) (let ((.cse40 (=> .cse47 .cse43)) (.cse61 (= .cse56 .cse63)) (.cse59 (= K K))) (let ((.cse73 (- 0 4)) (.cse60 (=> .cse61 .cse59)) (.cse39 (=> .cse59 .cse40))) (let ((.cse38 (and .cse60 .cse39)) (.cse71 (= .cse56 .cse73)) (.cse69 (<= K y@0))) (let ((.cse82 (- 0 5)) (.cse70 (=> .cse71 .cse69)) (.cse37 (=> .cse69 .cse38))) (let ((.cse36 (and .cse70 .cse37)) (.cse80 (= .cse56 .cse82))) (let ((.cse79 (=> .cse80 .cse18)) (.cse35 (=> .cse18 .cse36))) (let ((.cse34 (and .cse79 .cse35)) (.cse112 (<= 0 x)) (.cse102 (<= x y))) (let ((.cse96 (and .cse102 true)) (.cse108 (and .cse112 true)) (.cse33 (=> .cse86 .cse34))) (let ((.cse87 (and .cse18 .cse69)) (.cse32 (and .cse33 .cse20)) (.cse106 (and .cse116 .cse108)) (.cse93 (and .cse96 .cse95))) (let ((.cse91 (and .cse106 .cse93)) (.cse31 (=> .cse87 .cse32))) (let ((.cse30 (=> .cse91 .cse31))) (let ((.cse26 (=> .cse117 .cse30))) (let ((.cse28 (not .cse26))) (res .cse26 (let ((.cse27 (not .cse25))) (res .cse27 (res .cse28 (not+ .cse28) (let ((.cse29 (= .cse28 .cse27))) (res .cse29 (res (= .cse26 .cse25) (res (= .cse30 .cse24) (res (= .cse31 .cse22) (let ((.cse67 (= .cse69 .cse11))) (let ((.cse77 (= .cse18 .cse18))) (let-proof ((.cse68 (res .cse11 (res .cse69 (=+1 .cse67) (let ((.cse88 (< 0 .cse89))) (res .cse88 (total .cse89 0) (farkas 1 .cse69 1 .cse88)))) (res .cse69 (let ((.cse90 (< y@0 K))) (res .cse90 (total K y@0) (farkas 1 .cse90 1 .cse11))) (=+2 .cse67)))) (.cse78 (refl .cse18))) (res (= .cse32 .cse21) (res (= .cse20 .cse20) (refl .cse20) (res (= .cse33 .cse16) (res (= .cse34 .cse19) (let ((.cse50 (= 0 0)) (.cse54 (= .cse56 .cse56))) (let-proof ((.cse51 (refl 0)) (.cse55 (refl .cse56))) (res (= .cse35 .cse14) (res (= .cse36 .cse15) (res (= .cse37 .cse8) (res (= .cse38 .cse9) (let ((.cse57 (= .cse59 true))) (let-proof ((.cse58 (res true .cse7 (res .cse59 (refl K) (=+2 .cse57))))) (res (= .cse39 .cse5) (res (= .cse40 .cse1) (let ((.cse41 (= .cse43 .cse42))) (res .cse41 (res .cse42 (res .cse43 (=+1 .cse41) (let ((.cse44 (< 0 .cse45))) (res .cse44 (total .cse45 0) (farkas 1 .cse43 1 .cse44)))) (res .cse43 (let ((.cse46 (< K 0))) (res .cse46 (total 0 K) (farkas 1 .cse46 1 .cse42))) (=+2 .cse41))) (res (= .cse47 .cse2) (res (= .cse48 (- 1)) (let ((.cse49 (* (- 1) 1))) (res (= .cse49 (- 1)) (poly* .cse49 (- 1)) (res .cse50 .cse51 (let ((.cse52 (+ 0 .cse49)) (.cse53 (+ 0 (- 1)))) (res (= .cse52 .cse53) (cong (+ 0 .cse49) (+ 0 (- 1))) (res (= .cse48 .cse52) (-def 0 1) (res (= .cse53 (- 1)) (poly+ .cse53 (- 1)) (trans .cse48 .cse52 .cse53 (- 1))))))))) (res .cse54 .cse55 (cong (= .cse56 .cse48) (= .cse56 (- 1))))) (cong (=> .cse47 .cse43) (=> .cse2 .cse42))))) (res .cse57 .cse58 (cong (=> .cse59 .cse40) (=> true .cse1)))) (res (= .cse60 .cse6) (res .cse57 .cse58 (res (= .cse61 .cse62) (res (= .cse63 (- 3)) (let ((.cse64 (* (- 1) 3))) (res (= .cse64 (- 3)) (poly* .cse64 (- 3)) (res .cse50 .cse51 (let ((.cse65 (+ 0 .cse64)) (.cse66 (+ 0 (- 3)))) (res (= .cse65 .cse66) (cong (+ 0 .cse64) (+ 0 (- 3))) (res (= .cse63 .cse65) (-def 0 3) (res (= .cse66 (- 3)) (poly+ .cse66 (- 3)) (trans .cse63 .cse65 .cse66 (- 3))))))))) (res .cse54 .cse55 (cong (= .cse56 .cse63) (= .cse56 (- 3))))) (cong (=> .cse61 .cse59) (=> .cse62 true)))) (cong (and .cse60 .cse39) (and .cse6 .cse5)))))) (res .cse67 .cse68 (cong (=> .cse69 .cse38) (=> .cse11 .cse9)))) (res (= .cse70 .cse10) (res .cse67 .cse68 (res (= .cse71 .cse72) (res (= .cse73 (- 4)) (let ((.cse74 (* (- 1) 4))) (res (= .cse74 (- 4)) (poly* .cse74 (- 4)) (res .cse50 .cse51 (let ((.cse75 (+ 0 .cse74)) (.cse76 (+ 0 (- 4)))) (res (= .cse75 .cse76) (cong (+ 0 .cse74) (+ 0 (- 4))) (res (= .cse73 .cse75) (-def 0 4) (res (= .cse76 (- 4)) (poly+ .cse76 (- 4)) (trans .cse73 .cse75 .cse76 (- 4))))))))) (res .cse54 .cse55 (cong (= .cse56 .cse73) (= .cse56 (- 4))))) (cong (=> .cse71 .cse69) (=> .cse72 .cse11)))) (cong (and .cse70 .cse37) (and .cse10 .cse8)))) (res .cse77 .cse78 (cong (=> .cse18 .cse36) (=> .cse18 .cse15)))) (res (= .cse79 .cse17) (res .cse77 .cse78 (res (= .cse80 .cse81) (res (= .cse82 (- 5)) (let ((.cse83 (* (- 1) 5))) (res (= .cse83 (- 5)) (poly* .cse83 (- 5)) (res .cse50 .cse51 (let ((.cse84 (+ 0 .cse83)) (.cse85 (+ 0 (- 5)))) (res (= .cse84 .cse85) (cong (+ 0 .cse83) (+ 0 (- 5))) (res (= .cse82 .cse84) (-def 0 5) (res (= .cse85 (- 5)) (poly+ .cse85 (- 5)) (trans .cse82 .cse84 .cse85 (- 5))))))))) (res .cse54 .cse55 (cong (= .cse56 .cse82) (= .cse56 (- 5))))) (cong (=> .cse80 .cse18) (=> .cse81 .cse18)))) (cong (and .cse79 .cse35) (and .cse17 .cse14)))))) (res (= .cse86 .cse86) (refl .cse86) (cong (=> .cse86 .cse34) (=> .cse86 .cse19)))) (cong (and .cse33 .cse20) (and .cse16 .cse20)))) (res (= .cse87 .cse12) (res .cse67 .cse68 (res .cse77 .cse78 (cong (and .cse18 .cse69) (and .cse18 .cse11)))) (cong (=> .cse87 .cse32) (=> .cse12 .cse21))))))) (res (= .cse91 .cse92) (let ((.cse98 (= true true))) (let-proof ((.cse99 (refl true))) (res (= .cse93 .cse94) (res (= .cse95 .cse95) (refl .cse95) (res (= .cse96 .cse97) (res .cse98 .cse99 (let ((.cse100 (= .cse102 .cse101))) (res .cse100 (res .cse101 (res .cse102 (=+1 .cse100) (let ((.cse103 (< 0 .cse104))) (res .cse103 (total .cse104 0) (farkas 1 .cse102 1 .cse103)))) (res .cse102 (let ((.cse105 (< y x))) (res .cse105 (total x y) (farkas 1 .cse105 1 .cse101))) (=+2 .cse100))) (cong (and .cse102 true) (and .cse101 true))))) (cong (and .cse96 .cse95) (and .cse97 .cse95)))) (res (= .cse106 .cse107) (res (= .cse108 .cse109) (res .cse98 .cse99 (let ((.cse110 (= .cse112 .cse111))) (res .cse110 (res .cse111 (res .cse112 (=+1 .cse110) (let ((.cse113 (< 0 .cse114))) (res .cse113 (total .cse114 0) (farkas 1 .cse112 1 .cse113)))) (res .cse112 (let ((.cse115 (< x 0))) (res .cse115 (total 0 x) (farkas 1 .cse115 1 .cse111))) (=+2 .cse110))) (cong (and .cse112 true) (and .cse111 true))))) (res (= .cse116 .cse116) (refl .cse116) (cong (and .cse116 .cse108) (and .cse116 .cse109)))) (cong (and .cse106 .cse93) (and .cse107 .cse94)))))) (cong (=> .cse91 .cse31) (=> .cse92 .cse22)))) (res (= .cse117 .cse117) (refl .cse117) (cong (=> .cse117 .cse30) (=> .cse117 .cse24)))) (cong (not .cse26) (not .cse25))) (=-2 .cse29)))) (not- .cse27))) (res .cse28 (assume .cse28) (not- .cse28)))))))))))))))))))))))))))))) (let-proof ((.cse13 (res .cse22 (=>+ 0 .cse22) .cse23))) (res .cse10 (! (res .cse11 (! (res .cse12 .cse13 (and- 1 .cse12)) :proves (+ .cse11) :input) (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse11) :input)) :proves (+ .cse10) :rup) (res .cse14 (! (res .cse15 (and+ .cse15) (=>+ 1 .cse14)) :proves (+ .cse14 - .cse8 - .cse10) :input) (! (res .cse16 (res .cse17 (! (res .cse18 (! (res .cse12 .cse13 (and- 0 .cse12)) :proves (+ .cse18) :input) (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse18) :input)) :proves (+ .cse17) :rup) (! (res .cse19 (and+ .cse19) (=>+ 1 .cse16)) :proves (- .cse14 - .cse17 + .cse16) :input)) (! (res .cse20 (! (res true .cse7 (=>+ 1 .cse20)) :proves (+ .cse20) :input) (! (res .cse21 (and+ .cse21) (res .cse22 (=>+ 1 .cse22) .cse23)) :proves (- .cse16 - .cse20) :input)) :proves (- .cse16) :rup)) :proves (- .cse14) :rup))))))))))))) :proves (- .cse8) :rup))))))))) :proves (- .cse5) :rup))) :proves (- .cse1) :rup))))) :proves (+ .cse0) :rup) (! (let ((.cse120 (not .cse2))) (res .cse2 (let ((.cse119 (not .cse0))) (res .cse119 (res .cse120 (not+ .cse120) (let ((.cse121 (= .cse120 .cse119))) (res .cse121 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse121)))) (not- .cse119))) (res .cse120 (assume .cse120) (not- .cse120)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
