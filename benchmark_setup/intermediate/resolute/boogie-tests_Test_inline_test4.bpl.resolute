success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_inline_test4.bpl.mod.smt2:45:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_inline_test4.bpl.mod.smt2:48:10: Logical context not inconsistent!")
unsat
(! (let ((.cse179 (ControlFlow 0 3)) (.cse169 (<= inline$find$0$ret@2 0))) (let ((.cse166 (not .cse169)) (.cse163 (= (|Select__T@[Int]Int_| A inline$find$0$ret@2) x)) (.cse174 (= .cse179 (- 2)))) (let ((.cse172 (and inline$find$0$found@1 .cse174)) (.cse162 (and .cse166 .cse163)) (.cse202 (ControlFlow 0 6))) (let ((.cse95 (xor inline$find$0$found@1 inline$check$0$ret@2)) (.cse89 (= .cse202 3)) (.cse13 (=> .cse172 .cse162))) (let ((.cse12 (=> .cse89 .cse13)) (.cse10 (=> (= .cse202 4) true)) (.cse97 (= inline$find$0$ret@2 0)) (.cse96 (not .cse95))) (let ((.cse92 (and .cse97 .cse96)) (.cse15 (and .cse12 .cse10)) (.cse115 (|Select__T@[Int]Int_| A 0))) (let ((.cse122 (+ .cse115 (* (- 1) x))) (.cse9 (=> .cse92 .cse15)) (.cse112 (ControlFlow 0 7))) (let ((.cse98 (= .cse112 6)) (.cse8 (=> inline$check$0$ret@2 .cse9)) (.cse119 (<= .cse122 0))) (let ((.cse116 (not .cse119)) (.cse7 (=> .cse98 .cse8)) (.cse5 (=> (= .cse112 1) true))) (let ((.cse81 (and .cse7 .cse5)) (.cse105 (= .cse112 (- 8))) (.cse102 (=> .cse116 inline$check$0$ret@2))) (let ((.cse2 (=> .cse105 .cse102)) (.cse4 (=> .cse102 .cse81)) (.cse73 (= (ControlFlow 0 9) 7))) (let ((.cse72 (and inline$check$0$ret@2 .cse73)) (.cse18 (and .cse2 .cse4))) (let ((.cse77 (= .cse115 x)) (.cse1 (=> .cse72 .cse18))) (let-proof ((.cse11 true+)) (let ((.cse0 (=> .cse77 .cse1))) (let-proof ((.cse3 (! (let ((.cse196 (= (- 8) .cse112))) (let ((.cse197 (= .cse105 .cse196))) (let-proof ((.cse198 (res .cse196 (res .cse105 (=+1 .cse197) (symm (- 8) .cse112)) (res .cse105 (symm .cse112 (- 8)) (=+2 .cse197))))) (res .cse196 (! (res .cse105 (=>+ 0 .cse2) (res .cse197 .cse198 (=-2 .cse197))) :proves (+ .cse2 + .cse196) :input) (! (let ((.cse200 (not .cse105))) (res .cse105 (let ((.cse199 (not .cse196))) (res .cse199 (res .cse200 (not+ .cse200) (let ((.cse201 (= .cse200 .cse199))) (res .cse201 (res .cse197 .cse198 (cong (not .cse105) (not .cse196))) (=-2 .cse201)))) (not- .cse199))) (res .cse200 (assume .cse200) (not- .cse200)))) :proves (- .cse196) :input))))) :proves (+ .cse2) :rup)) (.cse6 (! (res true .cse11 (=>+ 1 .cse5)) :proves (+ .cse5) :input)) (.cse16 (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse8) :input)) (.cse17 (! (res .cse81 (and+ .cse81) (=>+ 1 .cse4)) :proves (+ .cse4 - .cse7 - .cse5) :input)) (.cse19 (and+ .cse18)) (.cse14 (! (res .cse172 (! (=>+ 0 .cse13) :proves (+ .cse13 + .cse172) :input) (! (let ((.cse190 (= (- 2) .cse179))) (let ((.cse191 (= .cse174 .cse190))) (let-proof ((.cse192 (res .cse190 (res .cse174 (=+1 .cse191) (symm (- 2) .cse179)) (res .cse174 (symm .cse179 (- 2)) (=+2 .cse191))))) (res .cse190 (! (res .cse174 (and- 1 .cse172) (res .cse191 .cse192 (=-2 .cse191))) :proves (- .cse172 + .cse190) :input) (! (let ((.cse194 (not .cse174))) (res .cse174 (let ((.cse193 (not .cse190))) (res .cse193 (res .cse194 (not+ .cse194) (let ((.cse195 (= .cse194 .cse193))) (res .cse195 (res .cse191 .cse192 (cong (not .cse174) (not .cse190))) (=-2 .cse195)))) (not- .cse193))) (res .cse194 (assume .cse194) (not- .cse194)))) :proves (- .cse190) :input))))) :proves (- .cse172) :rup)) :proves (+ .cse13) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 .cse3 (res .cse4 (! (res .cse5 .cse6 (res .cse7 (! (res .cse8 (! (res .cse9 (! (res .cse10 (! (res true .cse11 (=>+ 1 .cse10)) :proves (+ .cse10) :input) (res .cse12 (! (res .cse13 .cse14 (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse13) :input)) :proves (+ .cse12) :rup) (! (res .cse15 (and+ .cse15) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse12 - .cse10) :input))) :proves (+ .cse9) :rup) (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse9) :input)) :proves (+ .cse8) :rup) .cse16) :proves (+ .cse7) :rup) .cse17)) :proves (+ .cse4) :rup) (! (res .cse18 .cse19 (=>+ 1 .cse1)) :proves (+ .cse1 - .cse4 - .cse2) :input))) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse133 (ControlFlow 0 11))) (let ((.cse78 (= .cse133 9))) (let ((.cse20 (=> .cse78 .cse0))) (res .cse20 (! (=>+ 1 .cse20) :proves (+ .cse20 - .cse0) :input) (! (let ((.cse25 (not inline$check$0$ret@2)) (.cse61 (= (ControlFlow 0 10) 7))) (let ((.cse24 (and .cse25 .cse61))) (let ((.cse66 (not .cse77)) (.cse23 (=> .cse24 .cse18))) (let ((.cse67 (= .cse133 10)) (.cse22 (=> .cse66 .cse23))) (let ((.cse21 (=> .cse67 .cse22))) (let-proof ((.cse26 (not- .cse25))) (res .cse21 (! (res .cse22 (! (res .cse23 (! (res .cse2 .cse3 (res .cse5 .cse6 (res .cse4 (res .cse24 (! (=>+ 0 .cse23) :proves (+ .cse23 + .cse24) :input) (res .cse7 (res inline$check$0$ret@2 (res .cse8 (! (=>+ 0 .cse8) :proves (+ .cse8 + inline$check$0$ret@2) :input) .cse16) (! (res .cse25 (and- 0 .cse24) .cse26) :proves (- .cse24 - inline$check$0$ret@2) :input)) .cse17)) (! (res .cse18 .cse19 (=>+ 1 .cse23)) :proves (+ .cse23 - .cse4 - .cse2) :input)))) :proves (+ .cse23) :rup) (! (=>+ 1 .cse22) :proves (+ .cse22 - .cse23) :input)) :proves (+ .cse22) :rup) (! (=>+ 1 .cse21) :proves (+ .cse21 - .cse22) :input)) :proves (+ .cse21) :rup) (let ((.cse28 (and .cse20 .cse21))) (let ((.cse27 (=> true .cse28))) (res .cse27 (! (res .cse28 (and+ .cse28) (=>+ 1 .cse27)) :proves (+ .cse27 - .cse20 - .cse21) :input) (! (let ((.cse128 (= .cse133 (- 12)))) (let ((.cse29 (=> .cse128 true))) (res .cse29 (! (res true .cse11 (=>+ 1 .cse29)) :proves (+ .cse29) :input) (let ((.cse145 (<= size 0))) (let ((.cse143 (not .cse145)) (.cse141 (= (ControlFlow 0 13) 11))) (let ((.cse140 (and .cse143 .cse141)) (.cse31 (and .cse29 .cse27))) (let ((.cse30 (=> .cse140 .cse31))) (res .cse30 (! (res .cse31 (and+ .cse31) (=>+ 1 .cse30)) :proves (+ .cse30 - .cse27 - .cse29) :input) (! (let ((.cse188 (ControlFlow 0 14))) (let ((.cse147 (= .cse188 13))) (let ((.cse32 (=> .cse147 .cse30))) (res .cse32 (! (=>+ 1 .cse32) :proves (+ .cse32 - .cse30) :input) (! (let ((.cse189 (ControlFlow 0 5))) (let ((.cse153 (= .cse189 3))) (let ((.cse37 (=> .cse153 .cse13)) (.cse36 (=> (= .cse189 4) true)) (.cse159 (= inline$find$0$ret@2 inline$find$0$ret@1)) (.cse157 (not inline$find$0$found@1))) (let ((.cse155 (and .cse159 .cse157)) (.cse38 (and .cse37 .cse36))) (let ((.cse35 (=> .cse155 .cse38))) (let ((.cse160 (= .cse188 5)) (.cse34 (=> .cse145 .cse35))) (let ((.cse33 (=> .cse160 .cse34))) (res .cse33 (! (res .cse34 (! (res .cse35 (! (res .cse36 (! (res true .cse11 (=>+ 1 .cse36)) :proves (+ .cse36) :input) (res .cse37 (! (res .cse13 .cse14 (! (=>+ 1 .cse37) :proves (+ .cse37 - .cse13) :input)) :proves (+ .cse37) :rup) (! (res .cse38 (and+ .cse38) (=>+ 1 .cse35)) :proves (+ .cse35 - .cse37 - .cse36) :input))) :proves (+ .cse35) :rup) (! (=>+ 1 .cse34) :proves (+ .cse34 - .cse35) :input)) :proves (+ .cse34) :rup) (! (=>+ 1 .cse33) :proves (+ .cse33 - .cse34) :input)) :proves (+ .cse33) :rup) (! (let ((.cse39 (and .cse33 .cse32))) (res .cse39 (and+ .cse39) (let ((.cse181 (= inline$find$0$ret@1 (- 1)))) (let ((.cse40 (=> .cse181 .cse39))) (res .cse40 (=>+ 1 .cse40) (let ((.cse186 (= (ControlFlow 0 15) 14))) (let ((.cse41 (=> .cse186 .cse40))) (res .cse41 (=>+ 1 .cse41) (let ((.cse187 (= (ControlFlow 0 0) 15))) (let ((.cse42 (=> .cse187 .cse41))) (res .cse42 (=>+ 1 .cse42) (let ((.cse175 (- 0 2))) (let ((.cse167 (> inline$find$0$ret@2 0)) (.cse173 (= .cse179 .cse175))) (let ((.cse171 (and inline$find$0$found@1 .cse173)) (.cse161 (and .cse167 .cse163))) (let ((.cse90 (=> .cse171 .cse161))) (let ((.cse86 (=> .cse89 .cse90)) (.cse94 (= inline$find$0$found@1 inline$check$0$ret@2))) (let ((.cse91 (and .cse97 .cse94)) (.cse85 (and .cse86 .cse10))) (let ((.cse84 (=> .cse91 .cse85))) (let ((.cse83 (=> inline$check$0$ret@2 .cse84))) (let ((.cse117 (> .cse115 x)) (.cse76 (= inline$check$0$ret@2 true)) (.cse106 (- 0 8)) (.cse82 (=> .cse98 .cse83))) (let ((.cse80 (and .cse82 .cse5)) (.cse104 (= .cse112 .cse106)) (.cse101 (=> .cse117 .cse76))) (let ((.cse103 (=> .cse104 .cse101)) (.cse79 (=> .cse101 .cse80)) (.cse63 (= inline$check$0$ret@2 false))) (let ((.cse60 (and .cse63 .cse61)) (.cse71 (and .cse76 .cse73)) (.cse65 (and .cse103 .cse79))) (let ((.cse70 (=> .cse71 .cse65)) (.cse57 (=> .cse60 .cse65))) (let ((.cse56 (=> .cse66 .cse57)) (.cse69 (=> .cse77 .cse70))) (let ((.cse129 (- 0 12)) (.cse68 (=> .cse78 .cse69)) (.cse55 (=> .cse67 .cse56))) (let ((.cse152 (=> .cse153 .cse90)) (.cse158 (= inline$find$0$found@1 false)) (.cse54 (and .cse68 .cse55)) (.cse127 (= .cse133 .cse129)) (.cse125 (>= 0 0))) (let ((.cse126 (=> .cse127 .cse125)) (.cse53 (=> .cse125 .cse54)) (.cse144 (< 0 size)) (.cse154 (and .cse159 .cse158)) (.cse151 (and .cse152 .cse36))) (let ((.cse150 (=> .cse154 .cse151)) (.cse139 (and .cse144 .cse141)) (.cse52 (and .cse126 .cse53))) (let ((.cse51 (=> .cse139 .cse52)) (.cse149 (=> .cse145 .cse150))) (let ((.cse148 (=> .cse160 .cse149)) (.cse50 (=> .cse147 .cse51)) (.cse182 (- 0 1))) (let ((.cse180 (= inline$find$0$ret@1 .cse182)) (.cse49 (and .cse148 .cse50))) (let ((.cse48 (=> .cse180 .cse49))) (let ((.cse47 (=> .cse186 .cse48))) (let ((.cse43 (=> .cse187 .cse47))) (let ((.cse45 (not .cse43))) (res .cse43 (let ((.cse44 (not .cse42))) (res .cse44 (res .cse45 (not+ .cse45) (let ((.cse46 (= .cse45 .cse44))) (res .cse46 (res (= .cse43 .cse42) (res (= .cse47 .cse41) (res (= .cse48 .cse40) (let ((.cse108 (= 0 0))) (let-proof ((.cse109 (refl 0))) (res (= .cse49 .cse39) (let ((.cse87 (= .cse90 .cse13))) (let-proof ((.cse88 (res (= .cse161 .cse162) (res (= .cse163 .cse163) (refl .cse163) (let ((.cse164 (= .cse167 .cse166))) (res .cse164 (let ((.cse168 (< 0 inline$find$0$ret@2))) (let ((.cse165 (= .cse167 .cse168))) (res .cse165 (>def inline$find$0$ret@2 0) (res .cse166 (res .cse167 (=+1 .cse164) (res .cse168 (=-2 .cse165) (res .cse169 (not+ .cse166) (farkas 1 .cse168 1 .cse169)))) (res .cse167 (res .cse168 (let-proof ((.cse170 (total inline$find$0$ret@2 0))) (res .cse169 .cse170 (res .cse169 (res .cse168 .cse170 (farkas 1 .cse169 1 .cse168)) (not- .cse166)))) (=-1 .cse165)) (=+2 .cse164)))))) (cong (and .cse167 .cse163) (and .cse166 .cse163))))) (res (= .cse171 .cse172) (res (= .cse173 .cse174) (res (= .cse175 (- 2)) (let ((.cse176 (* (- 1) 2))) (res (= .cse176 (- 2)) (poly* .cse176 (- 2)) (res .cse108 .cse109 (let ((.cse177 (+ 0 .cse176)) (.cse178 (+ 0 (- 2)))) (res (= .cse177 .cse178) (cong (+ 0 .cse176) (+ 0 (- 2))) (res (= .cse175 .cse177) (-def 0 2) (res (= .cse178 (- 2)) (poly+ .cse178 (- 2)) (trans .cse175 .cse177 .cse178 (- 2))))))))) (res (= .cse179 .cse179) (refl .cse179) (cong (= .cse179 .cse175) (= .cse179 (- 2))))) (res (= inline$find$0$found@1 inline$find$0$found@1) (refl inline$find$0$found@1) (cong (and inline$find$0$found@1 .cse173) (and inline$find$0$found@1 .cse174)))) (cong (=> .cse171 .cse161) (=> .cse172 .cse162))))) (.cse64 false-)) (res (= .cse50 .cse32) (res (= .cse51 .cse30) (res (= .cse52 .cse31) (let ((.cse123 (= .cse125 true))) (let-proof ((.cse124 (let ((.cse135 (<= 0 0))) (let ((.cse134 (= .cse135 true)) (.cse136 (< 0 0))) (let-proof ((.cse137 (total 0 0))) (res .cse134 (res true .cse11 (res .cse135 (res .cse136 .cse137 (farkas 1 .cse136)) (=+2 .cse134))) (let ((.cse138 (= .cse125 .cse135))) (res .cse138 (res .cse138 (>=def 0 0) (res .cse135 (res .cse125 (=+1 .cse138) (res .cse135 (=-2 .cse138) (res .cse136 .cse137 (farkas 1 .cse135 1 .cse136)))) (res .cse125 (res .cse135 (res .cse136 .cse137 (farkas 1 .cse136 1 .cse135)) (=-1 .cse138)) (=+2 .cse138)))) (trans .cse125 .cse135 true))))))))) (res (= .cse53 .cse27) (res (= .cse54 .cse28) (let ((.cse74 (= .cse76 inline$check$0$ret@2))) (let-proof ((.cse75 (res true .cse11 (res inline$check$0$ret@2 (res .cse76 (=+1 .cse74) (=-1 .cse76)) (res .cse76 (=+2 .cse76) (=+2 .cse74)))))) (let ((.cse58 (= .cse65 .cse18))) (let-proof ((.cse59 (let ((.cse99 (= .cse101 .cse102))) (let-proof ((.cse100 (res .cse74 .cse75 (let ((.cse113 (= .cse117 .cse116))) (res .cse113 (let ((.cse118 (< x .cse115))) (let ((.cse114 (= .cse117 .cse118))) (res .cse114 (>def .cse115 x) (res .cse116 (res .cse117 (=+1 .cse113) (res .cse118 (=-2 .cse114) (res .cse119 (not+ .cse116) (farkas 1 .cse118 1 .cse119)))) (res .cse117 (res .cse118 (let ((.cse120 (<= .cse115 x))) (res .cse120 (total .cse115 x) (res .cse119 (let ((.cse121 (< 0 .cse122))) (res .cse121 (total .cse122 0) (farkas 1 .cse120 1 .cse121))) (not- .cse116)))) (=-1 .cse114)) (=+2 .cse113)))))) (cong (=> .cse117 .cse76) (=> .cse116 inline$check$0$ret@2))))))) (res (= .cse79 .cse4) (res (= .cse80 .cse81) (res (= .cse5 .cse5) (refl .cse5) (res (= .cse82 .cse7) (res (= .cse83 .cse8) (res (= .cse84 .cse9) (res (= .cse85 .cse15) (res (= .cse10 .cse10) (refl .cse10) (res (= .cse86 .cse12) (res .cse87 .cse88 (res (= .cse89 .cse89) (refl .cse89) (cong (=> .cse89 .cse90) (=> .cse89 .cse13)))) (cong (and .cse86 .cse10) (and .cse12 .cse10)))) (res (= .cse91 .cse92) (let ((.cse93 (= .cse94 .cse96))) (res .cse93 (res .cse94 (res .cse95 (res inline$find$0$found@1 (res inline$check$0$ret@2 (=+1 .cse94) (xor+ (inline$find$0$found@1 inline$check$0$ret@2) (inline$find$0$found@1) (inline$check$0$ret@2))) (res inline$check$0$ret@2 (xor+ (inline$find$0$found@1 inline$check$0$ret@2) (inline$check$0$ret@2) (inline$find$0$found@1)) (=+2 .cse94))) (res .cse96 (=+1 .cse93) (not- .cse96))) (res .cse95 (res .cse96 (not+ .cse96) (=+2 .cse93)) (res inline$find$0$found@1 (res inline$check$0$ret@2 (xor+ (inline$find$0$found@1) (inline$check$0$ret@2) (inline$find$0$found@1 inline$check$0$ret@2)) (=-1 .cse94)) (res inline$check$0$ret@2 (=-2 .cse94) (xor- (inline$find$0$found@1) (inline$check$0$ret@2) (inline$find$0$found@1 inline$check$0$ret@2)))))) (res (= .cse97 .cse97) (refl .cse97) (cong (and .cse97 .cse94) (and .cse97 .cse96))))) (cong (=> .cse91 .cse85) (=> .cse92 .cse15)))) (res (= inline$check$0$ret@2 inline$check$0$ret@2) (refl inline$check$0$ret@2) (cong (=> inline$check$0$ret@2 .cse84) (=> inline$check$0$ret@2 .cse9)))) (res (= .cse98 .cse98) (refl .cse98) (cong (=> .cse98 .cse83) (=> .cse98 .cse8)))) (cong (and .cse82 .cse5) (and .cse7 .cse5)))) (res .cse99 .cse100 (cong (=> .cse101 .cse80) (=> .cse102 .cse81)))) (res (= .cse103 .cse2) (res .cse99 .cse100 (res (= .cse104 .cse105) (res (= .cse106 (- 8)) (let ((.cse107 (* (- 1) 8))) (res (= .cse107 (- 8)) (poly* .cse107 (- 8)) (res .cse108 .cse109 (let ((.cse110 (+ 0 .cse107)) (.cse111 (+ 0 (- 8)))) (res (= .cse110 .cse111) (cong (+ 0 .cse107) (+ 0 (- 8))) (res (= .cse106 .cse110) (-def 0 8) (res (= .cse111 (- 8)) (poly+ .cse111 (- 8)) (trans .cse106 .cse110 .cse111 (- 8))))))))) (res (= .cse112 .cse112) (refl .cse112) (cong (= .cse112 .cse106) (= .cse112 (- 8))))) (cong (=> .cse104 .cse101) (=> .cse105 .cse102)))) (cong (and .cse103 .cse79) (and .cse2 .cse4)))))))) (res (= .cse55 .cse21) (res (= .cse56 .cse22) (res (= .cse57 .cse23) (res .cse58 .cse59 (res (= .cse60 .cse24) (res (= .cse61 .cse61) (refl .cse61) (let ((.cse62 (= .cse63 .cse25))) (res .cse62 (res false (res .cse25 (res .cse63 (=+1 .cse62) (res inline$check$0$ret@2 (not+ .cse25) (=-2 .cse63))) (res .cse63 (res inline$check$0$ret@2 (=+1 .cse63) .cse26) (=+2 .cse62))) .cse64) (cong (and .cse63 .cse61) (and .cse25 .cse61))))) (cong (=> .cse60 .cse65) (=> .cse24 .cse18)))) (res (= .cse66 .cse66) (refl .cse66) (cong (=> .cse66 .cse57) (=> .cse66 .cse23)))) (res (= .cse67 .cse67) (refl .cse67) (cong (=> .cse67 .cse56) (=> .cse67 .cse22)))) (res (= .cse68 .cse20) (res (= .cse69 .cse0) (res (= .cse70 .cse1) (res .cse58 .cse59 (res (= .cse71 .cse72) (res (= .cse73 .cse73) (refl .cse73) (res .cse74 .cse75 (cong (and .cse76 .cse73) (and inline$check$0$ret@2 .cse73)))) (cong (=> .cse71 .cse65) (=> .cse72 .cse18)))) (res (= .cse77 .cse77) (refl .cse77) (cong (=> .cse77 .cse70) (=> .cse77 .cse1)))) (res (= .cse78 .cse78) (refl .cse78) (cong (=> .cse78 .cse69) (=> .cse78 .cse0)))) (cong (and .cse68 .cse55) (and .cse20 .cse21)))))))) (res .cse123 .cse124 (cong (=> .cse125 .cse54) (=> true .cse28)))) (res (= .cse126 .cse29) (res .cse123 .cse124 (res (= .cse127 .cse128) (res (= .cse129 (- 12)) (let ((.cse130 (* (- 1) 12))) (res (= .cse130 (- 12)) (poly* .cse130 (- 12)) (res .cse108 .cse109 (let ((.cse131 (+ 0 .cse130)) (.cse132 (+ 0 (- 12)))) (res (= .cse131 .cse132) (cong (+ 0 .cse130) (+ 0 (- 12))) (res (= .cse129 .cse131) (-def 0 12) (res (= .cse132 (- 12)) (poly+ .cse132 (- 12)) (trans .cse129 .cse131 .cse132 (- 12))))))))) (res (= .cse133 .cse133) (refl .cse133) (cong (= .cse133 .cse129) (= .cse133 (- 12))))) (cong (=> .cse127 .cse125) (=> .cse128 true)))) (cong (and .cse126 .cse53) (and .cse29 .cse27)))))) (res (= .cse139 .cse140) (res (= .cse141 .cse141) (refl .cse141) (let ((.cse142 (= .cse144 .cse143))) (res .cse142 (res .cse143 (res .cse144 (=+1 .cse142) (res .cse145 (not+ .cse143) (farkas 1 .cse144 1 .cse145))) (res .cse144 (let-proof ((.cse146 (total size 0))) (res .cse145 .cse146 (res .cse145 (res .cse144 .cse146 (farkas 1 .cse145 1 .cse144)) (not- .cse143)))) (=+2 .cse142))) (cong (and .cse144 .cse141) (and .cse143 .cse141))))) (cong (=> .cse139 .cse52) (=> .cse140 .cse31)))) (res (= .cse147 .cse147) (refl .cse147) (cong (=> .cse147 .cse51) (=> .cse147 .cse30)))) (res (= .cse148 .cse33) (res (= .cse149 .cse34) (res (= .cse150 .cse35) (res (= .cse151 .cse38) (res (= .cse36 .cse36) (refl .cse36) (res (= .cse152 .cse37) (res .cse87 .cse88 (res (= .cse153 .cse153) (refl .cse153) (cong (=> .cse153 .cse90) (=> .cse153 .cse13)))) (cong (and .cse152 .cse36) (and .cse37 .cse36)))) (res (= .cse154 .cse155) (let ((.cse156 (= .cse158 .cse157))) (res .cse156 (res false (res .cse157 (res .cse158 (=+1 .cse156) (res inline$find$0$found@1 (not+ .cse157) (=-2 .cse158))) (res .cse158 (res inline$find$0$found@1 (=+1 .cse158) (not- .cse157)) (=+2 .cse156))) .cse64) (res (= .cse159 .cse159) (refl .cse159) (cong (and .cse159 .cse158) (and .cse159 .cse157))))) (cong (=> .cse154 .cse151) (=> .cse155 .cse38)))) (res (= .cse145 .cse145) (refl .cse145) (cong (=> .cse145 .cse150) (=> .cse145 .cse35)))) (res (= .cse160 .cse160) (refl .cse160) (cong (=> .cse160 .cse149) (=> .cse160 .cse34)))) (cong (and .cse148 .cse50) (and .cse33 .cse32)))))) (res (= .cse180 .cse181) (res (= .cse182 (- 1)) (let ((.cse183 (* (- 1) 1))) (res (= .cse183 (- 1)) (poly* .cse183 (- 1)) (res .cse108 .cse109 (let ((.cse184 (+ 0 .cse183)) (.cse185 (+ 0 (- 1)))) (res (= .cse184 .cse185) (cong (+ 0 .cse183) (+ 0 (- 1))) (res (= .cse182 .cse184) (-def 0 1) (res (= .cse185 (- 1)) (poly+ .cse185 (- 1)) (trans .cse182 .cse184 .cse185 (- 1))))))))) (res (= inline$find$0$ret@1 inline$find$0$ret@1) (refl inline$find$0$ret@1) (cong (= inline$find$0$ret@1 .cse182) (= inline$find$0$ret@1 (- 1))))) (cong (=> .cse180 .cse49) (=> .cse181 .cse39)))))) (res (= .cse186 .cse186) (refl .cse186) (cong (=> .cse186 .cse48) (=> .cse186 .cse40)))) (res (= .cse187 .cse187) (refl .cse187) (cong (=> .cse187 .cse47) (=> .cse187 .cse41)))) (cong (not .cse43) (not .cse42))) (=-2 .cse46)))) (not- .cse44))) (res .cse45 (assume .cse45) (not- .cse45))))))))))))))))))))))))))))))))))))))) :proves (- .cse33 - .cse32) :input))))))))) :proves (- .cse32) :rup))))) :proves (- .cse30) :rup))))))))) :proves (- .cse27) :rup))))))))))) :proves (- .cse20) :rup)))))))))))))))))))))) :proves () :rup)
unsupported
