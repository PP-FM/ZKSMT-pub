success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse42 (ControlFlow 0 2))) (let ((.cse33 (= .cse42 (- 1))) (.cse3 (= x 0))) (let ((.cse1 (=> .cse33 .cse3)) (.cse47 (= .cse42 (- 3)))) (let ((.cse11 (=> .cse47 true)) (.cse0 (=> true .cse1)) (.cse55 (ControlFlow 0 5))) (let ((.cse52 (= .cse55 2)) (.cse14 (and .cse11 .cse0))) (let ((.cse13 (=> .cse52 .cse14)) (.cse15 (=> (= .cse55 4) true))) (let ((.cse16 (and .cse13 .cse15))) (let ((.cse4 (=> .cse3 .cse16))) (let-proof ((.cse12 true+)) (let-proof ((.cse5 (let ((.cse53 (= (ControlFlow 0 6) 5))) (let ((.cse17 (=> .cse53 .cse4))) (res .cse17 (=>+ 1 .cse17) (let ((.cse54 (= (ControlFlow 0 0) 6))) (let ((.cse18 (=> .cse54 .cse17))) (res .cse18 (=>+ 1 .cse18) (let ((.cse34 (- 0 1))) (let ((.cse48 (- 0 3)) (.cse32 (= .cse42 .cse34))) (let ((.cse29 (=> .cse32 .cse3)) (.cse46 (= .cse42 .cse48)) (.cse36 (= 0 0))) (let ((.cse45 (=> .cse46 .cse36)) (.cse28 (=> .cse36 .cse29))) (let ((.cse27 (and .cse45 .cse28))) (let ((.cse26 (=> .cse52 .cse27))) (let ((.cse25 (and .cse26 .cse15))) (let ((.cse24 (=> .cse3 .cse25))) (let ((.cse23 (=> .cse53 .cse24))) (let ((.cse19 (=> .cse54 .cse23))) (let ((.cse21 (not .cse19))) (res .cse19 (let ((.cse20 (not .cse18))) (res .cse20 (res .cse21 (not+ .cse21) (let ((.cse22 (= .cse21 .cse20))) (res .cse22 (res (= .cse19 .cse18) (res (= .cse23 .cse17) (res (= .cse24 .cse4) (let ((.cse30 (= .cse3 .cse3))) (let-proof ((.cse31 (refl .cse3))) (res (= .cse25 .cse16) (res (= .cse15 .cse15) (refl .cse15) (res (= .cse26 .cse13) (res (= .cse27 .cse14) (let ((.cse43 (= .cse36 true))) (let-proof ((.cse37 (refl 0))) (let ((.cse40 (= .cse42 .cse42))) (let-proof ((.cse44 (res true .cse12 (res .cse36 .cse37 (=+2 .cse43)))) (.cse41 (refl .cse42))) (res (= .cse28 .cse0) (res (= .cse29 .cse1) (res .cse30 .cse31 (res (= .cse32 .cse33) (res (= .cse34 (- 1)) (let ((.cse35 (* (- 1) 1))) (res (= .cse35 (- 1)) (poly* .cse35 (- 1)) (res .cse36 .cse37 (let ((.cse38 (+ 0 .cse35)) (.cse39 (+ 0 (- 1)))) (res (= .cse38 .cse39) (cong (+ 0 .cse35) (+ 0 (- 1))) (res (= .cse34 .cse38) (-def 0 1) (res (= .cse39 (- 1)) (poly+ .cse39 (- 1)) (trans .cse34 .cse38 .cse39 (- 1))))))))) (res .cse40 .cse41 (cong (= .cse42 .cse34) (= .cse42 (- 1))))) (cong (=> .cse32 .cse3) (=> .cse33 .cse3)))) (res .cse43 .cse44 (cong (=> .cse36 .cse29) (=> true .cse1)))) (res (= .cse45 .cse11) (res .cse43 .cse44 (res (= .cse46 .cse47) (res (= .cse48 (- 3)) (let ((.cse49 (* (- 1) 3))) (res (= .cse49 (- 3)) (poly* .cse49 (- 3)) (res .cse36 .cse37 (let ((.cse50 (+ 0 .cse49)) (.cse51 (+ 0 (- 3)))) (res (= .cse50 .cse51) (cong (+ 0 .cse49) (+ 0 (- 3))) (res (= .cse48 .cse50) (-def 0 3) (res (= .cse51 (- 3)) (poly+ .cse51 (- 3)) (trans .cse48 .cse50 .cse51 (- 3))))))))) (res .cse40 .cse41 (cong (= .cse42 .cse48) (= .cse42 (- 3))))) (cong (=> .cse46 .cse36) (=> .cse47 true)))) (cong (and .cse45 .cse28) (and .cse11 .cse0)))))))) (res (= .cse52 .cse52) (refl .cse52) (cong (=> .cse52 .cse27) (=> .cse52 .cse14)))) (cong (and .cse26 .cse15) (and .cse13 .cse15)))) (res .cse30 .cse31 (cong (=> .cse3 .cse25) (=> .cse3 .cse16)))))) (res (= .cse53 .cse53) (refl .cse53) (cong (=> .cse53 .cse24) (=> .cse53 .cse4)))) (res (= .cse54 .cse54) (refl .cse54) (cong (=> .cse54 .cse23) (=> .cse54 .cse17)))) (cong (not .cse19) (not .cse18))) (=-2 .cse22)))) (not- .cse20))) (res .cse21 (assume .cse21) (not- .cse21)))))))))))))))))))))) (res .cse0 (res .cse1 (! (let ((.cse2 (= 0 x))) (let ((.cse6 (= .cse3 .cse2))) (let-proof ((.cse7 (res .cse2 (res .cse3 (=+1 .cse6) (symm 0 x)) (res .cse3 (symm x 0) (=+2 .cse6))))) (res .cse2 (! (res .cse3 (res .cse4 (=>+ 0 .cse4) .cse5) (res .cse6 .cse7 (=-2 .cse6))) :proves (+ .cse2) :input) (! (res .cse3 (let ((.cse8 (not .cse2))) (res .cse8 (let ((.cse9 (not .cse3))) (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res .cse6 .cse7 (cong (not .cse3) (not .cse2))) (=-2 .cse10))))) (not- .cse8))) (=>+ 1 .cse1)) :proves (+ .cse1 - .cse2) :input))))) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) (! (res .cse11 (! (res true .cse12 (=>+ 1 .cse11)) :proves (+ .cse11) :input) (res .cse13 (! (res .cse14 (and+ .cse14) (=>+ 1 .cse13)) :proves (+ .cse13 - .cse0 - .cse11) :input) (! (res .cse15 (! (res true .cse12 (=>+ 1 .cse15)) :proves (+ .cse15) :input) (! (res .cse16 (and+ .cse16) (res .cse4 (=>+ 1 .cse4) .cse5)) :proves (- .cse13 - .cse15) :input)) :proves (- .cse13) :rup))) :proves (- .cse0) :rup)))))))))))) :proves () :rup)
unsupported
