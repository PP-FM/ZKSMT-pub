success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse25 (ControlFlow 0 2))) (let ((.cse20 (= .cse25 (- 1))) (.cse48 (ControlFlow 0 6))) (let ((.cse26 (= .cse48 2)) (.cse1 (=> .cse20 true))) (let ((.cse0 (=> .cse26 .cse1))) (let-proof ((.cse2 true+)) (res .cse0 (! (res .cse1 (! (res true .cse2 (=>+ 1 .cse1)) :proves (+ .cse1) :input) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse43 (ControlFlow 0 4))) (let ((.cse38 (= .cse43 (- 3))) (.cse45 (= (ControlFlow 0 5) 4))) (let ((.cse5 (and false .cse45)) (.cse30 (=> .cse38 false))) (let ((.cse46 (= .cse48 5)) (.cse4 (=> .cse5 .cse30))) (let ((.cse3 (=> .cse46 .cse4))) (let-proof ((.cse6 false-)) (res .cse3 (! (res .cse4 (! (res .cse5 (! (=>+ 0 .cse4) :proves (+ .cse4 + .cse5) :input) (! (res false (and- 0 .cse5) .cse6) :proves (- .cse5) :input)) :proves (+ .cse4) :rup) (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse4) :input)) :proves (+ .cse3) :rup) (! (let ((.cse7 (and .cse3 .cse0))) (res .cse7 (and+ .cse7) (let ((.cse47 (= (ControlFlow 0 0) 6))) (let ((.cse8 (=> .cse47 .cse7))) (res .cse8 (=>+ 1 .cse8) (let ((.cse36 (= 2 2)) (.cse39 (- 0 3))) (let ((.cse21 (- 0 1)) (.cse37 (= .cse43 .cse39)) (.cse31 (not .cse36)) (.cse34 (not true))) (let ((.cse44 (and .cse34 .cse45)) (.cse29 (=> .cse37 .cse31)) (.cse19 (= .cse25 .cse21)) (.cse17 (= 0 0))) (let ((.cse15 (=> .cse19 .cse17)) (.cse28 (=> .cse44 .cse29))) (let ((.cse27 (=> .cse46 .cse28)) (.cse14 (=> .cse26 .cse15))) (let ((.cse13 (and .cse27 .cse14))) (let ((.cse9 (=> .cse47 .cse13))) (let ((.cse11 (not .cse9))) (res .cse9 (let ((.cse10 (not .cse8))) (res .cse10 (res .cse11 (not+ .cse11) (let ((.cse12 (= .cse11 .cse10))) (res .cse12 (res (= .cse9 .cse8) (res (= .cse13 .cse7) (let-proof ((.cse18 (refl 0))) (res (= .cse14 .cse0) (res (= .cse15 .cse1) (let ((.cse16 (= .cse17 true))) (res .cse16 (res true .cse2 (res .cse17 .cse18 (=+2 .cse16))) (res (= .cse19 .cse20) (res (= .cse21 (- 1)) (let ((.cse22 (* (- 1) 1))) (res (= .cse22 (- 1)) (poly* .cse22 (- 1)) (res .cse17 .cse18 (let ((.cse23 (+ 0 .cse22)) (.cse24 (+ 0 (- 1)))) (res (= .cse23 .cse24) (cong (+ 0 .cse22) (+ 0 (- 1))) (res (= .cse21 .cse23) (-def 0 1) (res (= .cse24 (- 1)) (poly+ .cse24 (- 1)) (trans .cse21 .cse23 .cse24 (- 1))))))))) (res (= .cse25 .cse25) (refl .cse25) (cong (= .cse25 .cse21) (= .cse25 (- 1))))) (cong (=> .cse19 .cse17) (=> .cse20 true))))) (res (= .cse26 .cse26) (refl .cse26) (cong (=> .cse26 .cse15) (=> .cse26 .cse1)))) (res (= .cse27 .cse3) (res (= .cse28 .cse4) (let ((.cse32 (= .cse34 false))) (let-proof ((.cse33 (res false (res .cse34 (=+1 .cse32) (res true .cse2 (not- .cse34))) .cse6))) (res (= .cse29 .cse30) (res (= .cse31 false) (res .cse32 .cse33 (res (= .cse31 .cse34) (let ((.cse35 (= .cse36 true))) (res .cse35 (res true .cse2 (res .cse36 (refl 2) (=+2 .cse35))) (cong (not .cse36) (not true)))) (trans .cse31 .cse34 false))) (res (= .cse37 .cse38) (res (= .cse39 (- 3)) (let ((.cse40 (* (- 1) 3))) (res (= .cse40 (- 3)) (poly* .cse40 (- 3)) (res .cse17 .cse18 (let ((.cse41 (+ 0 .cse40)) (.cse42 (+ 0 (- 3)))) (res (= .cse41 .cse42) (cong (+ 0 .cse40) (+ 0 (- 3))) (res (= .cse39 .cse41) (-def 0 3) (res (= .cse42 (- 3)) (poly+ .cse42 (- 3)) (trans .cse39 .cse41 .cse42 (- 3))))))))) (res (= .cse43 .cse43) (refl .cse43) (cong (= .cse43 .cse39) (= .cse43 (- 3))))) (cong (=> .cse37 .cse31) (=> .cse38 false)))) (res (= .cse44 .cse5) (res (= .cse45 .cse45) (refl .cse45) (res .cse32 .cse33 (cong (and .cse34 .cse45) (and false .cse45)))) (cong (=> .cse44 .cse29) (=> .cse5 .cse30)))))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse28) (=> .cse46 .cse4)))) (cong (and .cse27 .cse14) (and .cse3 .cse0))))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse13) (=> .cse47 .cse7)))) (cong (not .cse9) (not .cse8))) (=-2 .cse12)))) (not- .cse10))) (res .cse11 (assume .cse11) (not- .cse11)))))))))))))))) :proves (- .cse3 - .cse0) :input)))))))))))))) :proves () :rup)
unsupported
