success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_unnecessaryassumes_unnecessaryassumes1.bpl.mod.smt2:28:10: Logical context not inconsistent!")
unsat
(! (let ((.cse24 (ControlFlow 0 2))) (let ((.cse1 (= .cse24 (- 1))) (.cse0 (= (- 1) .cse24))) (let ((.cse34 (= .cse1 .cse0))) (let-proof ((.cse35 (res .cse0 (res .cse1 (=+1 .cse34) (symm (- 1) .cse24)) (res .cse1 (symm .cse24 (- 1)) (=+2 .cse34))))) (res .cse0 (! (res .cse1 (let ((.cse30 (<= n 0))) (let ((.cse28 (not .cse30))) (let ((.cse26 (=> assume$$s0 .cse28))) (let ((.cse2 (and .cse26 .cse1))) (res .cse2 (let ((.cse16 (* (- 1) n))) (let ((.cse13 (<= .cse16 0))) (let ((.cse3 (=> .cse2 .cse13))) (res .cse3 (=>+ 0 .cse3) (let ((.cse32 (= (ControlFlow 0 3) 2))) (let ((.cse4 (=> .cse32 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse33 (= (ControlFlow 0 0) 3))) (let ((.cse5 (=> .cse33 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse20 (- 0 1)) (.cse29 (< 0 n))) (let ((.cse25 (=> assume$$s0 .cse29)) (.cse19 (= .cse24 .cse20))) (let ((.cse18 (and .cse25 .cse19)) (.cse14 (<= 0 n))) (let ((.cse11 (=> .cse18 .cse14))) (let ((.cse10 (=> .cse32 .cse11))) (let ((.cse6 (=> .cse33 .cse10))) (let ((.cse8 (not .cse6))) (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res (= .cse6 .cse5) (res (= .cse10 .cse4) (res (= .cse11 .cse3) (let ((.cse12 (= .cse14 .cse13))) (res .cse12 (res .cse13 (res .cse14 (=+1 .cse12) (let ((.cse15 (< 0 .cse16))) (res .cse15 (total .cse16 0) (farkas 1 .cse14 1 .cse15)))) (res .cse14 (let ((.cse17 (< n 0))) (res .cse17 (total 0 n) (farkas 1 .cse17 1 .cse13))) (=+2 .cse12))) (res (= .cse18 .cse2) (res (= .cse19 .cse1) (res (= .cse20 (- 1)) (let ((.cse21 (* (- 1) 1))) (res (= .cse21 (- 1)) (poly* .cse21 (- 1)) (res (= 0 0) (refl 0) (let ((.cse22 (+ 0 .cse21)) (.cse23 (+ 0 (- 1)))) (res (= .cse22 .cse23) (cong (+ 0 .cse21) (+ 0 (- 1))) (res (= .cse20 .cse22) (-def 0 1) (res (= .cse23 (- 1)) (poly+ .cse23 (- 1)) (trans .cse20 .cse22 .cse23 (- 1))))))))) (res (= .cse24 .cse24) (refl .cse24) (cong (= .cse24 .cse20) (= .cse24 (- 1))))) (res (= .cse25 .cse26) (let ((.cse27 (= .cse29 .cse28))) (res .cse27 (res .cse28 (res .cse29 (=+1 .cse27) (res .cse30 (not+ .cse28) (farkas 1 .cse29 1 .cse30))) (res .cse29 (let-proof ((.cse31 (total n 0))) (res .cse30 .cse31 (res .cse30 (res .cse29 .cse31 (farkas 1 .cse30 1 .cse29)) (not- .cse28)))) (=+2 .cse27))) (res (= assume$$s0 assume$$s0) (refl assume$$s0) (cong (=> assume$$s0 .cse29) (=> assume$$s0 .cse28))))) (cong (and .cse25 .cse19) (and .cse26 .cse1)))) (cong (=> .cse18 .cse14) (=> .cse2 .cse13))))) (res (= .cse32 .cse32) (refl .cse32) (cong (=> .cse32 .cse11) (=> .cse32 .cse3)))) (res (= .cse33 .cse33) (refl .cse33) (cong (=> .cse33 .cse10) (=> .cse33 .cse4)))) (cong (not .cse6) (not .cse5))) (=-2 .cse9)))) (not- .cse7))) (res .cse8 (assume .cse8) (not- .cse8)))))))))))))))))))) (and- 1 .cse2)))))) (res .cse34 .cse35 (=-2 .cse34))) :proves (+ .cse0) :input) (! (let ((.cse37 (not .cse1))) (res .cse1 (let ((.cse36 (not .cse0))) (res .cse36 (res .cse37 (not+ .cse37) (let ((.cse38 (= .cse37 .cse36))) (res .cse38 (res .cse34 .cse35 (cong (not .cse1) (not .cse0))) (=-2 .cse38)))) (not- .cse36))) (res .cse37 (assume .cse37) (not- .cse37)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse39 (ControlFlow 0 2))) (let ((.cse46 (* (- 1) n)) (.cse40 (=> assume$$s1 (= n 3))) (.cse34 (= .cse39 (- 1)))) (let ((.cse0 (<= n 0)) (.cse32 (and .cse40 .cse34)) (.cse2 (<= .cse46 0))) (let ((.cse13 (=> .cse32 .cse2)) (.cse17 (not .cse0))) (let ((.cse9 (< 0 .cse46)) (.cse14 (=> .cse17 .cse13))) (let-proof ((.cse10 (total .cse46 0)) (.cse18 (not- .cse17))) (let-proof ((.cse15 (let ((.cse44 (= (ControlFlow 0 3) 2))) (let ((.cse19 (=> .cse44 .cse14))) (res .cse19 (=>+ 1 .cse19) (let ((.cse45 (= (ControlFlow 0 0) 3))) (let ((.cse20 (=> .cse45 .cse19))) (res .cse20 (=>+ 1 .cse20) (let ((.cse35 (- 0 1))) (let ((.cse33 (= .cse39 .cse35))) (let ((.cse31 (and .cse40 .cse33)) (.cse29 (<= 0 n))) (let ((.cse42 (< 0 n)) (.cse27 (=> .cse31 .cse29))) (let ((.cse26 (=> .cse42 .cse27))) (let ((.cse25 (=> .cse44 .cse26))) (let ((.cse21 (=> .cse45 .cse25))) (let ((.cse23 (not .cse21))) (res .cse21 (let ((.cse22 (not .cse20))) (res .cse22 (res .cse23 (not+ .cse23) (let ((.cse24 (= .cse23 .cse22))) (res .cse24 (res (= .cse21 .cse20) (res (= .cse25 .cse19) (res (= .cse26 .cse14) (res (= .cse27 .cse13) (let ((.cse28 (= .cse29 .cse2))) (res .cse28 (res .cse2 (res .cse29 (=+1 .cse28) (res .cse9 .cse10 (farkas 1 .cse29 1 .cse9))) (res .cse29 (let ((.cse30 (< n 0))) (res .cse30 (total 0 n) (farkas 1 .cse30 1 .cse2))) (=+2 .cse28))) (res (= .cse31 .cse32) (res (= .cse33 .cse34) (res (= .cse35 (- 1)) (let ((.cse36 (* (- 1) 1))) (res (= .cse36 (- 1)) (poly* .cse36 (- 1)) (res (= 0 0) (refl 0) (let ((.cse37 (+ 0 .cse36)) (.cse38 (+ 0 (- 1)))) (res (= .cse37 .cse38) (cong (+ 0 .cse36) (+ 0 (- 1))) (res (= .cse35 .cse37) (-def 0 1) (res (= .cse38 (- 1)) (poly+ .cse38 (- 1)) (trans .cse35 .cse37 .cse38 (- 1))))))))) (res (= .cse39 .cse39) (refl .cse39) (cong (= .cse39 .cse35) (= .cse39 (- 1))))) (res (= .cse40 .cse40) (refl .cse40) (cong (and .cse40 .cse33) (and .cse40 .cse34)))) (cong (=> .cse31 .cse29) (=> .cse32 .cse2))))) (let ((.cse41 (= .cse42 .cse17))) (res .cse41 (res .cse17 (res .cse42 (=+1 .cse41) (res .cse0 (not+ .cse17) (farkas 1 .cse42 1 .cse0))) (res .cse42 (let-proof ((.cse43 (total n 0))) (res .cse0 .cse43 (res .cse0 (res .cse42 .cse43 (farkas 1 .cse0 1 .cse42)) .cse18))) (=+2 .cse41))) (cong (=> .cse42 .cse27) (=> .cse17 .cse13))))) (res (= .cse44 .cse44) (refl .cse44) (cong (=> .cse44 .cse26) (=> .cse44 .cse14)))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse25) (=> .cse45 .cse19)))) (cong (not .cse21) (not .cse20))) (=-2 .cse24)))) (not- .cse22))) (res .cse23 (assume .cse23) (not- .cse23))))))))))))))))))) (res .cse0 (! (let ((.cse12 (+ n 1))) (let ((.cse1 (<= .cse12 0))) (res .cse1 (! (res .cse2 (let ((.cse3 (not .cse1))) (let-proof ((.cse4 (not+ .cse3))) (res .cse3 .cse4 (let ((.cse5 (not .cse3))) (res .cse5 (let ((.cse6 (not .cse2))) (res .cse6 (not+ .cse6) (let ((.cse7 (= .cse6 .cse5))) (res .cse7 (let ((.cse8 (= .cse2 .cse3))) (res .cse8 (res .cse3 (res .cse2 (=+1 .cse8) (res .cse1 .cse4 (farkas 1 .cse2 1 .cse1))) (res .cse2 (res .cse9 .cse10 (res .cse1 (let ((.cse11 (<= 1 .cse12))) (res .cse11 (total-int .cse12 0) (farkas 1 .cse9 1 .cse11))) (not- .cse3))) (=+2 .cse8))) (cong (not .cse2) (not .cse3)))) (=-2 .cse7))))) (not- .cse5)))))) (res .cse13 (=>+ 1 .cse13) (res .cse14 (=>+ 1 .cse14) .cse15))) :proves (+ .cse1) :input) (! (let ((.cse16 (<= 1 n))) (res .cse16 (total-int n 0) (farkas 1 .cse16 1 .cse1))) :proves (+ .cse0 - .cse1) :LA ((- 1) 1))))) :proves (+ .cse0) :rup) (! (res .cse14 (res .cse17 (=>+ 0 .cse14) .cse18) .cse15) :proves (- .cse0) :input))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_unnecessaryassumes_unnecessaryassumes1.bpl.mod.smt2:100:10: Logical context not inconsistent!")
unsat
(! (let ((.cse21 (ControlFlow 0 2))) (let ((.cse1 (= .cse21 (- 1))) (.cse0 (= (- 1) .cse21))) (let ((.cse47 (= .cse1 .cse0))) (let-proof ((.cse48 (res .cse0 (res .cse1 (=+1 .cse47) (symm (- 1) .cse21)) (res .cse1 (symm .cse21 (- 1)) (=+2 .cse47))))) (res .cse0 (! (res .cse1 (let ((.cse28 (+ (* (- 1) n) 42))) (let ((.cse25 (<= .cse28 0))) (let ((.cse23 (=> assume$$s3 .cse25))) (let ((.cse2 (and .cse23 .cse1))) (res .cse2 (let ((.cse38 (+ n (- 42)))) (let ((.cse35 (<= .cse38 0)) (.cse43 (<= n 0))) (let ((.cse41 (not .cse43)) (.cse33 (=> assume$$s2 .cse35))) (let ((.cse31 (and .cse41 .cse33))) (let ((.cse3 (and .cse31 .cse2))) (res .cse3 (let ((.cse13 (= n 42))) (let ((.cse4 (=> .cse3 .cse13))) (res .cse4 (=>+ 0 .cse4) (let ((.cse45 (= (ControlFlow 0 3) 2))) (let ((.cse5 (=> .cse45 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse46 (= (ControlFlow 0 0) 3))) (let ((.cse6 (=> .cse46 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse36 (<= n 42)) (.cse17 (- 0 1)) (.cse26 (<= 42 n))) (let ((.cse22 (=> assume$$s3 .cse26)) (.cse16 (= .cse21 .cse17)) (.cse42 (< 0 n)) (.cse32 (=> assume$$s2 .cse36))) (let ((.cse30 (and .cse42 .cse32)) (.cse15 (and .cse22 .cse16))) (let ((.cse14 (and .cse30 .cse15))) (let ((.cse12 (=> .cse14 .cse13))) (let ((.cse11 (=> .cse45 .cse12))) (let ((.cse7 (=> .cse46 .cse11))) (let ((.cse9 (not .cse7))) (res .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res (= .cse7 .cse6) (res (= .cse11 .cse5) (res (= .cse12 .cse4) (res (= .cse13 .cse13) (refl .cse13) (res (= .cse14 .cse3) (res (= .cse15 .cse2) (res (= .cse16 .cse1) (res (= .cse17 (- 1)) (let ((.cse18 (* (- 1) 1))) (res (= .cse18 (- 1)) (poly* .cse18 (- 1)) (res (= 0 0) (refl 0) (let ((.cse19 (+ 0 .cse18)) (.cse20 (+ 0 (- 1)))) (res (= .cse19 .cse20) (cong (+ 0 .cse18) (+ 0 (- 1))) (res (= .cse17 .cse19) (-def 0 1) (res (= .cse20 (- 1)) (poly+ .cse20 (- 1)) (trans .cse17 .cse19 .cse20 (- 1))))))))) (res (= .cse21 .cse21) (refl .cse21) (cong (= .cse21 .cse17) (= .cse21 (- 1))))) (res (= .cse22 .cse23) (let ((.cse24 (= .cse26 .cse25))) (res .cse24 (res .cse25 (res .cse26 (=+1 .cse24) (let ((.cse27 (< 0 .cse28))) (res .cse27 (total .cse28 0) (farkas 1 .cse26 1 .cse27)))) (res .cse26 (let ((.cse29 (< n 42))) (res .cse29 (total 42 n) (farkas 1 .cse29 1 .cse25))) (=+2 .cse24))) (res (= assume$$s3 assume$$s3) (refl assume$$s3) (cong (=> assume$$s3 .cse26) (=> assume$$s3 .cse25))))) (cong (and .cse22 .cse16) (and .cse23 .cse1)))) (res (= .cse30 .cse31) (res (= .cse32 .cse33) (let ((.cse34 (= .cse36 .cse35))) (res .cse34 (res .cse35 (res .cse36 (=+1 .cse34) (let ((.cse37 (< 0 .cse38))) (res .cse37 (total .cse38 0) (farkas 1 .cse36 1 .cse37)))) (res .cse36 (let ((.cse39 (< 42 n))) (res .cse39 (total n 42) (farkas 1 .cse39 1 .cse35))) (=+2 .cse34))) (res (= assume$$s2 assume$$s2) (refl assume$$s2) (cong (=> assume$$s2 .cse36) (=> assume$$s2 .cse35))))) (let ((.cse40 (= .cse42 .cse41))) (res .cse40 (res .cse41 (res .cse42 (=+1 .cse40) (res .cse43 (not+ .cse41) (farkas 1 .cse42 1 .cse43))) (res .cse42 (let-proof ((.cse44 (total n 0))) (res .cse43 .cse44 (res .cse43 (res .cse42 .cse44 (farkas 1 .cse43 1 .cse42)) (not- .cse41)))) (=+2 .cse40))) (cong (and .cse42 .cse32) (and .cse41 .cse33))))) (cong (and .cse30 .cse15) (and .cse31 .cse2)))) (cong (=> .cse14 .cse13) (=> .cse3 .cse13)))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse12) (=> .cse45 .cse4)))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse11) (=> .cse46 .cse5)))) (cong (not .cse7) (not .cse6))) (=-2 .cse10)))) (not- .cse8))) (res .cse9 (assume .cse9) (not- .cse9)))))))))))))))))))) (and- 1 .cse3))))))) (and- 1 .cse2)))))) (res .cse47 .cse48 (=-2 .cse47))) :proves (+ .cse0) :input) (! (let ((.cse50 (not .cse1))) (res .cse1 (let ((.cse49 (not .cse0))) (res .cse49 (res .cse50 (not+ .cse50) (let ((.cse51 (= .cse50 .cse49))) (res .cse51 (res .cse47 .cse48 (cong (not .cse1) (not .cse0))) (=-2 .cse51)))) (not- .cse49))) (res .cse50 (assume .cse50) (not- .cse50)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
