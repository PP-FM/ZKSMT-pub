success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let-proof ((.cse0 true+)) (res true .cse0 (let ((.cse21 (ControlFlow 0 2))) (let ((.cse16 (= .cse21 (- 1)))) (let ((.cse1 (=> .cse16 true))) (res .cse1 (=>+ 1 .cse1) (let ((.cse22 (= (ControlFlow 0 3) 2))) (let ((.cse2 (=> .cse22 .cse1))) (res .cse2 (=>+ 1 .cse2) (let ((.cse23 (= (ControlFlow 0 0) 3))) (let ((.cse3 (=> .cse23 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse14 (+ 1 1)) (.cse17 (- 0 1))) (let ((.cse15 (= .cse21 .cse17)) (.cse10 (= .cse14 2))) (let ((.cse9 (=> .cse15 .cse10))) (let ((.cse8 (=> .cse22 .cse9))) (let ((.cse4 (=> .cse23 .cse8))) (let ((.cse6 (not .cse4))) (res .cse4 (let ((.cse5 (not .cse3))) (res .cse5 (res .cse6 (not+ .cse6) (let ((.cse7 (= .cse6 .cse5))) (res .cse7 (res (= .cse4 .cse3) (res (= .cse8 .cse2) (res (= .cse9 .cse1) (res (= .cse10 true) (let ((.cse12 (= 2 2))) (let ((.cse11 (= .cse12 true))) (let-proof ((.cse13 (refl 2))) (res .cse11 (res true .cse0 (res .cse12 .cse13 (=+2 .cse11))) (res (= .cse10 .cse12) (res .cse12 .cse13 (res .cse10 (poly+ .cse14 2) (cong (= .cse14 2) (= 2 2)))) (trans .cse10 .cse12 true)))))) (res (= .cse15 .cse16) (res (= .cse17 (- 1)) (let ((.cse18 (* (- 1) 1))) (res (= .cse18 (- 1)) (poly* .cse18 (- 1)) (res (= 0 0) (refl 0) (let ((.cse19 (+ 0 .cse18)) (.cse20 (+ 0 (- 1)))) (res (= .cse19 .cse20) (cong (+ 0 .cse18) (+ 0 (- 1))) (res (= .cse17 .cse19) (-def 0 1) (res (= .cse20 (- 1)) (poly+ .cse20 (- 1)) (trans .cse17 .cse19 .cse20 (- 1))))))))) (res (= .cse21 .cse21) (refl .cse21) (cong (= .cse21 .cse17) (= .cse21 (- 1))))) (cong (=> .cse15 .cse10) (=> .cse16 true)))) (res (= .cse22 .cse22) (refl .cse22) (cong (=> .cse22 .cse9) (=> .cse22 .cse1)))) (res (= .cse23 .cse23) (refl .cse23) (cong (=> .cse23 .cse8) (=> .cse23 .cse2)))) (cong (not .cse4) (not .cse3))) (=-2 .cse7)))) (not- .cse5))) (res .cse6 (assume .cse6) (not- .cse6))))))))))))))))))))) :proves () :input)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let-proof ((.cse0 true+)) (res true .cse0 (let ((.cse23 (ControlFlow 0 2))) (let ((.cse18 (= .cse23 (- 1)))) (let ((.cse16 (and true .cse18))) (let ((.cse1 (=> .cse16 true))) (res .cse1 (=>+ 1 .cse1) (let ((.cse29 (= (ControlFlow 0 3) 2))) (let ((.cse2 (=> .cse29 .cse1))) (res .cse2 (=>+ 1 .cse2) (let ((.cse30 (= (ControlFlow 0 0) 3))) (let ((.cse3 (=> .cse30 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse19 (- 0 1)) (.cse28 (+ 1 1))) (let ((.cse14 (+ 2 2)) (.cse24 (= .cse28 2)) (.cse17 (= .cse23 .cse19))) (let ((.cse15 (and .cse24 .cse17)) (.cse10 (= .cse14 4))) (let ((.cse9 (=> .cse15 .cse10))) (let ((.cse8 (=> .cse29 .cse9))) (let ((.cse4 (=> .cse30 .cse8))) (let ((.cse6 (not .cse4))) (res .cse4 (let ((.cse5 (not .cse3))) (res .cse5 (res .cse6 (not+ .cse6) (let ((.cse7 (= .cse6 .cse5))) (res .cse7 (res (= .cse4 .cse3) (res (= .cse8 .cse2) (res (= .cse9 .cse1) (res (= .cse10 true) (let ((.cse12 (= 4 4))) (let ((.cse11 (= .cse12 true))) (let-proof ((.cse13 (refl 4))) (res .cse11 (res true .cse0 (res .cse12 .cse13 (=+2 .cse11))) (res (= .cse10 .cse12) (res .cse12 .cse13 (res .cse10 (poly+ .cse14 4) (cong (= .cse14 4) (= 4 4)))) (trans .cse10 .cse12 true)))))) (res (= .cse15 .cse16) (res (= .cse17 .cse18) (res (= .cse19 (- 1)) (let ((.cse20 (* (- 1) 1))) (res (= .cse20 (- 1)) (poly* .cse20 (- 1)) (res (= 0 0) (refl 0) (let ((.cse21 (+ 0 .cse20)) (.cse22 (+ 0 (- 1)))) (res (= .cse21 .cse22) (cong (+ 0 .cse20) (+ 0 (- 1))) (res (= .cse19 .cse21) (-def 0 1) (res (= .cse22 (- 1)) (poly+ .cse22 (- 1)) (trans .cse19 .cse21 .cse22 (- 1))))))))) (res (= .cse23 .cse23) (refl .cse23) (cong (= .cse23 .cse19) (= .cse23 (- 1))))) (res (= .cse24 true) (let ((.cse26 (= 2 2))) (let ((.cse25 (= .cse26 true))) (let-proof ((.cse27 (refl 2))) (res .cse25 (res true .cse0 (res .cse26 .cse27 (=+2 .cse25))) (res (= .cse24 .cse26) (res .cse26 .cse27 (res .cse24 (poly+ .cse28 2) (cong (= .cse28 2) (= 2 2)))) (trans .cse24 .cse26 true)))))) (cong (and .cse24 .cse17) (and true .cse18)))) (cong (=> .cse15 .cse10) (=> .cse16 true)))) (res (= .cse29 .cse29) (refl .cse29) (cong (=> .cse29 .cse9) (=> .cse29 .cse1)))) (res (= .cse30 .cse30) (refl .cse30) (cong (=> .cse30 .cse8) (=> .cse30 .cse2)))) (cong (not .cse4) (not .cse3))) (=-2 .cse7)))) (not- .cse5))) (res .cse6 (assume .cse6) (not- .cse6))))))))))))))))))))))) :proves () :input)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse30 (ControlFlow 0 2))) (let ((.cse21 (= .cse30 (- 1)))) (let ((.cse1 (=> .cse21 true))) (let ((.cse0 (=> true .cse1))) (let-proof ((.cse2 true+)) (res .cse0 (! (res .cse1 (! (res true .cse2 (=>+ 1 .cse1)) :proves (+ .cse1) :input) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse36 (= .cse30 (- 3)))) (let ((.cse3 (=> .cse36 true))) (res .cse3 (! (res true .cse2 (=>+ 1 .cse3)) :proves (+ .cse3) :input) (! (let ((.cse4 (and .cse3 .cse0))) (res .cse4 (and+ .cse4) (let ((.cse45 (= (ControlFlow 0 4) 2))) (let ((.cse5 (=> .cse45 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse46 (= (ControlFlow 0 0) 4))) (let ((.cse6 (=> .cse46 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse19 (+ 2 2)) (.cse22 (- 0 1))) (let ((.cse44 (+ 1 1)) (.cse37 (- 0 3)) (.cse20 (= .cse30 .cse22)) (.cse15 (= .cse19 4))) (let ((.cse14 (=> .cse20 .cse15)) (.cse35 (= .cse30 .cse37)) (.cse33 (= .cse44 2))) (let ((.cse34 (=> .cse35 .cse33)) (.cse13 (=> .cse33 .cse14))) (let ((.cse12 (and .cse34 .cse13))) (let ((.cse11 (=> .cse45 .cse12))) (let ((.cse7 (=> .cse46 .cse11))) (let ((.cse9 (not .cse7))) (res .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res (= .cse7 .cse6) (res (= .cse11 .cse5) (res (= .cse12 .cse4) (let ((.cse31 (= .cse33 true)) (.cse24 (= 0 0)) (.cse28 (= .cse30 .cse30))) (let-proof ((.cse32 (let ((.cse42 (= 2 2))) (let ((.cse41 (= .cse42 true))) (let-proof ((.cse43 (refl 2))) (res .cse41 (res true .cse2 (res .cse42 .cse43 (=+2 .cse41))) (res (= .cse33 .cse42) (res .cse42 .cse43 (res .cse33 (poly+ .cse44 2) (cong (= .cse44 2) (= 2 2)))) (trans .cse33 .cse42 true))))))) (.cse25 (refl 0)) (.cse29 (refl .cse30))) (res (= .cse13 .cse0) (res (= .cse14 .cse1) (res (= .cse15 true) (let ((.cse17 (= 4 4))) (let ((.cse16 (= .cse17 true))) (let-proof ((.cse18 (refl 4))) (res .cse16 (res true .cse2 (res .cse17 .cse18 (=+2 .cse16))) (res (= .cse15 .cse17) (res .cse17 .cse18 (res .cse15 (poly+ .cse19 4) (cong (= .cse19 4) (= 4 4)))) (trans .cse15 .cse17 true)))))) (res (= .cse20 .cse21) (res (= .cse22 (- 1)) (let ((.cse23 (* (- 1) 1))) (res (= .cse23 (- 1)) (poly* .cse23 (- 1)) (res .cse24 .cse25 (let ((.cse26 (+ 0 .cse23)) (.cse27 (+ 0 (- 1)))) (res (= .cse26 .cse27) (cong (+ 0 .cse23) (+ 0 (- 1))) (res (= .cse22 .cse26) (-def 0 1) (res (= .cse27 (- 1)) (poly+ .cse27 (- 1)) (trans .cse22 .cse26 .cse27 (- 1))))))))) (res .cse28 .cse29 (cong (= .cse30 .cse22) (= .cse30 (- 1))))) (cong (=> .cse20 .cse15) (=> .cse21 true)))) (res .cse31 .cse32 (cong (=> .cse33 .cse14) (=> true .cse1)))) (res (= .cse34 .cse3) (res .cse31 .cse32 (res (= .cse35 .cse36) (res (= .cse37 (- 3)) (let ((.cse38 (* (- 1) 3))) (res (= .cse38 (- 3)) (poly* .cse38 (- 3)) (res .cse24 .cse25 (let ((.cse39 (+ 0 .cse38)) (.cse40 (+ 0 (- 3)))) (res (= .cse39 .cse40) (cong (+ 0 .cse38) (+ 0 (- 3))) (res (= .cse37 .cse39) (-def 0 3) (res (= .cse40 (- 3)) (poly+ .cse40 (- 3)) (trans .cse37 .cse39 .cse40 (- 3))))))))) (res .cse28 .cse29 (cong (= .cse30 .cse37) (= .cse30 (- 3))))) (cong (=> .cse35 .cse33) (=> .cse36 true)))) (cong (and .cse34 .cse13) (and .cse3 .cse0)))))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse12) (=> .cse45 .cse4)))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse11) (=> .cse46 .cse5)))) (cong (not .cse7) (not .cse6))) (=-2 .cse10)))) (not- .cse8))) (res .cse9 (assume .cse9) (not- .cse9))))))))))))))))))) :proves (- .cse3 - .cse0) :input)))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse30 (ControlFlow 0 2))) (let ((.cse21 (= .cse30 (- 1)))) (let ((.cse1 (=> .cse21 true))) (let ((.cse0 (=> true .cse1))) (let-proof ((.cse2 true+)) (res .cse0 (! (res .cse1 (! (res true .cse2 (=>+ 1 .cse1)) :proves (+ .cse1) :input) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse36 (= .cse30 (- 3)))) (let ((.cse3 (=> .cse36 true))) (res .cse3 (! (res true .cse2 (=>+ 1 .cse3)) :proves (+ .cse3) :input) (! (let ((.cse4 (and .cse3 .cse0))) (res .cse4 (and+ .cse4) (let ((.cse45 (= (ControlFlow 0 4) 2))) (let ((.cse5 (=> .cse45 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse46 (= (ControlFlow 0 0) 4))) (let ((.cse6 (=> .cse46 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse19 (+ 2 2)) (.cse22 (- 0 1))) (let ((.cse44 (+ 1 1)) (.cse37 (- 0 3)) (.cse20 (= .cse30 .cse22)) (.cse15 (= .cse19 4))) (let ((.cse14 (=> .cse20 .cse15)) (.cse35 (= .cse30 .cse37)) (.cse33 (= .cse44 2))) (let ((.cse34 (=> .cse35 .cse33)) (.cse13 (=> .cse33 .cse14))) (let ((.cse12 (and .cse34 .cse13))) (let ((.cse11 (=> .cse45 .cse12))) (let ((.cse7 (=> .cse46 .cse11))) (let ((.cse9 (not .cse7))) (res .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res (= .cse7 .cse6) (res (= .cse11 .cse5) (res (= .cse12 .cse4) (let ((.cse31 (= .cse33 true)) (.cse24 (= 0 0)) (.cse28 (= .cse30 .cse30))) (let-proof ((.cse32 (let ((.cse42 (= 2 2))) (let ((.cse41 (= .cse42 true))) (let-proof ((.cse43 (refl 2))) (res .cse41 (res true .cse2 (res .cse42 .cse43 (=+2 .cse41))) (res (= .cse33 .cse42) (res .cse42 .cse43 (res .cse33 (poly+ .cse44 2) (cong (= .cse44 2) (= 2 2)))) (trans .cse33 .cse42 true))))))) (.cse25 (refl 0)) (.cse29 (refl .cse30))) (res (= .cse13 .cse0) (res (= .cse14 .cse1) (res (= .cse15 true) (let ((.cse17 (= 4 4))) (let ((.cse16 (= .cse17 true))) (let-proof ((.cse18 (refl 4))) (res .cse16 (res true .cse2 (res .cse17 .cse18 (=+2 .cse16))) (res (= .cse15 .cse17) (res .cse17 .cse18 (res .cse15 (poly+ .cse19 4) (cong (= .cse19 4) (= 4 4)))) (trans .cse15 .cse17 true)))))) (res (= .cse20 .cse21) (res (= .cse22 (- 1)) (let ((.cse23 (* (- 1) 1))) (res (= .cse23 (- 1)) (poly* .cse23 (- 1)) (res .cse24 .cse25 (let ((.cse26 (+ 0 .cse23)) (.cse27 (+ 0 (- 1)))) (res (= .cse26 .cse27) (cong (+ 0 .cse23) (+ 0 (- 1))) (res (= .cse22 .cse26) (-def 0 1) (res (= .cse27 (- 1)) (poly+ .cse27 (- 1)) (trans .cse22 .cse26 .cse27 (- 1))))))))) (res .cse28 .cse29 (cong (= .cse30 .cse22) (= .cse30 (- 1))))) (cong (=> .cse20 .cse15) (=> .cse21 true)))) (res .cse31 .cse32 (cong (=> .cse33 .cse14) (=> true .cse1)))) (res (= .cse34 .cse3) (res .cse31 .cse32 (res (= .cse35 .cse36) (res (= .cse37 (- 3)) (let ((.cse38 (* (- 1) 3))) (res (= .cse38 (- 3)) (poly* .cse38 (- 3)) (res .cse24 .cse25 (let ((.cse39 (+ 0 .cse38)) (.cse40 (+ 0 (- 3)))) (res (= .cse39 .cse40) (cong (+ 0 .cse38) (+ 0 (- 3))) (res (= .cse37 .cse39) (-def 0 3) (res (= .cse40 (- 3)) (poly+ .cse40 (- 3)) (trans .cse37 .cse39 .cse40 (- 3))))))))) (res .cse28 .cse29 (cong (= .cse30 .cse37) (= .cse30 (- 3))))) (cong (=> .cse35 .cse33) (=> .cse36 true)))) (cong (and .cse34 .cse13) (and .cse3 .cse0)))))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse12) (=> .cse45 .cse4)))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse11) (=> .cse46 .cse5)))) (cong (not .cse7) (not .cse6))) (=-2 .cse10)))) (not- .cse8))) (res .cse9 (assume .cse9) (not- .cse9))))))))))))))))))) :proves (- .cse3 - .cse0) :input)))))))))) :proves () :rup)
unsupported
