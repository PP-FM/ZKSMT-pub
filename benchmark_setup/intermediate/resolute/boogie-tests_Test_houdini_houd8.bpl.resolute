success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_houd8.bpl.mod.smt2:29:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_houd8.bpl.mod.smt2:32:10: Logical context not inconsistent!")
unsat
(! (let ((.cse15 (ControlFlow 0 2))) (let ((.cse2 (= .cse15 (- 1))) (.cse0 (= (- 1) .cse15))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse15)) (res .cse2 (symm .cse15 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse34 (=> b3 false))) (let ((.cse1 (=> .cse2 .cse34))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse58 (=> b2 false))) (let ((.cse5 (=> .cse58 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse9 (= .cse15 (- 3)))) (let ((.cse7 (=> .cse9 .cse58))) (let ((.cse18 (=> b1 true)) (.cse16 (and .cse7 .cse5))) (let ((.cse6 (=> .cse18 .cse16))) (res .cse6 (res .cse7 (! (let ((.cse8 (= (- 3) .cse15))) (let ((.cse10 (= .cse9 .cse8))) (let-proof ((.cse11 (res .cse8 (res .cse9 (=+1 .cse10) (symm (- 3) .cse15)) (res .cse9 (symm .cse15 (- 3)) (=+2 .cse10))))) (res .cse8 (! (res .cse9 (=>+ 0 .cse7) (res .cse10 .cse11 (=-2 .cse10))) :proves (+ .cse7 + .cse8) :input) (! (let ((.cse13 (not .cse9))) (res .cse9 (let ((.cse12 (not .cse8))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res .cse10 .cse11 (cong (not .cse9) (not .cse8))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13)))) :proves (- .cse8) :input))))) :proves (+ .cse7) :rup) (! (res .cse16 (and+ .cse16) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) (! (let ((.cse72 (= .cse15 (- 4)))) (let ((.cse17 (=> .cse72 .cse18))) (let-proof ((.cse19 true+)) (res .cse17 (! (res .cse18 (! (res true .cse19 (=>+ 1 .cse18)) :proves (+ .cse18) :input) (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse18) :input)) :proves (+ .cse17) :rup) (! (let ((.cse20 (and .cse17 .cse6))) (res .cse20 (and+ .cse20) (let ((.cse87 (= (ControlFlow 0 5) 2))) (let ((.cse21 (=> .cse87 .cse20))) (res .cse21 (=>+ 1 .cse21) (let ((.cse88 (= (ControlFlow 0 0) 5))) (let ((.cse22 (=> .cse88 .cse21))) (res .cse22 (=>+ 1 .cse22) (let ((.cse35 (< 5 0)) (.cse47 (- 0 1))) (let ((.cse66 (= 5 0)) (.cse61 (- 0 3)) (.cse46 (= .cse15 .cse47)) (.cse33 (=> b3 .cse35))) (let ((.cse32 (=> .cse46 .cse33)) (.cse60 (= .cse15 .cse61)) (.cse57 (=> b2 .cse66))) (let ((.cse77 (> 5 0)) (.cse73 (- 0 4)) (.cse59 (=> .cse60 .cse57)) (.cse31 (=> .cse57 .cse32))) (let ((.cse30 (and .cse59 .cse31)) (.cse71 (= .cse15 .cse73)) (.cse69 (=> b1 .cse77))) (let ((.cse70 (=> .cse71 .cse69)) (.cse29 (=> .cse69 .cse30))) (let ((.cse28 (and .cse70 .cse29))) (let ((.cse27 (=> .cse87 .cse28))) (let ((.cse23 (=> .cse88 .cse27))) (let ((.cse25 (not .cse23))) (res .cse23 (let ((.cse24 (not .cse22))) (res .cse24 (res .cse25 (not+ .cse25) (let ((.cse26 (= .cse25 .cse24))) (res .cse26 (res (= .cse23 .cse22) (res (= .cse27 .cse21) (res (= .cse28 .cse20) (let-proof ((.cse38 false-)) (let ((.cse67 (= .cse69 .cse18)) (.cse49 (= 0 0)) (.cse53 (= .cse15 .cse15))) (let-proof ((.cse68 (res (= .cse77 true) (let ((.cse79 (not false))) (let ((.cse78 (= .cse79 true))) (res .cse78 (res true .cse19 (res .cse79 (res false (not+ .cse79) .cse38) (=+2 .cse78))) (res (= .cse77 .cse79) (let ((.cse82 (<= 5 0))) (let ((.cse80 (not .cse82))) (res (= .cse80 .cse79) (let ((.cse81 (= .cse82 false))) (res .cse81 (res false (res .cse82 (=+1 .cse81) (farkas 1 .cse82)) .cse38) (cong (not .cse82) (not false)))) (let ((.cse83 (= .cse77 .cse80))) (res .cse83 (let ((.cse85 (< 0 5))) (let ((.cse84 (= .cse77 .cse85))) (res .cse84 (>def 5 0) (res .cse80 (res .cse77 (=+1 .cse83) (res .cse85 (=-2 .cse84) (res .cse82 (not+ .cse80) (farkas 1 .cse85 1 .cse82)))) (res .cse77 (res .cse85 (let-proof ((.cse86 (total 5 0))) (res .cse82 .cse86 (res .cse82 (res .cse85 .cse86 (farkas 1 .cse82 1 .cse85)) (not- .cse80)))) (=-1 .cse84)) (=+2 .cse83)))))) (trans .cse77 .cse80 .cse79)))))) (trans .cse77 .cse79 true))))) (res (= b1 b1) (refl b1) (cong (=> b1 .cse77) (=> b1 true))))) (.cse50 (refl 0)) (.cse54 (refl .cse15))) (res (= .cse29 .cse6) (res (= .cse30 .cse16) (let ((.cse55 (= .cse57 .cse58))) (let-proof ((.cse56 (let ((.cse65 (= .cse66 false))) (res .cse65 (res false (res .cse66 (=+1 .cse65) (farkas 1 .cse66)) .cse38) (res (= b2 b2) (refl b2) (cong (=> b2 .cse66) (=> b2 false))))))) (res (= .cse31 .cse5) (res (= .cse32 .cse1) (res (= .cse33 .cse34) (res (= .cse35 false) (let ((.cse37 (not true))) (let ((.cse36 (= .cse37 false))) (res .cse36 (res false (res .cse37 (=+1 .cse36) (res true .cse19 (not- .cse37))) .cse38) (res (= .cse35 .cse37) (let ((.cse41 (<= (- 5) 0))) (let ((.cse42 (< 0 (- 5))) (.cse39 (not .cse41))) (let-proof ((.cse43 (total (- 5) 0))) (res (= .cse39 .cse37) (let ((.cse40 (= .cse41 true))) (res .cse40 (res true .cse19 (res .cse41 (res .cse42 .cse43 (farkas 1 .cse42)) (=+2 .cse40))) (cong (not .cse41) (not true)))) (let ((.cse44 (= .cse35 .cse39))) (res .cse44 (res .cse39 (res .cse35 (=+1 .cse44) (res .cse41 (not+ .cse39) (farkas 1 .cse35 1 .cse41))) (res .cse35 (let ((.cse45 (<= 0 5))) (res .cse45 (total 0 5) (res .cse41 (res .cse42 .cse43 (farkas 1 .cse45 1 .cse42)) (not- .cse39)))) (=+2 .cse44))) (trans .cse35 .cse39 .cse37))))))) (trans .cse35 .cse37 false))))) (res (= b3 b3) (refl b3) (cong (=> b3 .cse35) (=> b3 false)))) (res (= .cse46 .cse2) (res (= .cse47 (- 1)) (let ((.cse48 (* (- 1) 1))) (res (= .cse48 (- 1)) (poly* .cse48 (- 1)) (res .cse49 .cse50 (let ((.cse51 (+ 0 .cse48)) (.cse52 (+ 0 (- 1)))) (res (= .cse51 .cse52) (cong (+ 0 .cse48) (+ 0 (- 1))) (res (= .cse47 .cse51) (-def 0 1) (res (= .cse52 (- 1)) (poly+ .cse52 (- 1)) (trans .cse47 .cse51 .cse52 (- 1))))))))) (res .cse53 .cse54 (cong (= .cse15 .cse47) (= .cse15 (- 1))))) (cong (=> .cse46 .cse33) (=> .cse2 .cse34)))) (res .cse55 .cse56 (cong (=> .cse57 .cse32) (=> .cse58 .cse1)))) (res (= .cse59 .cse7) (res .cse55 .cse56 (res (= .cse60 .cse9) (res (= .cse61 (- 3)) (let ((.cse62 (* (- 1) 3))) (res (= .cse62 (- 3)) (poly* .cse62 (- 3)) (res .cse49 .cse50 (let ((.cse63 (+ 0 .cse62)) (.cse64 (+ 0 (- 3)))) (res (= .cse63 .cse64) (cong (+ 0 .cse62) (+ 0 (- 3))) (res (= .cse61 .cse63) (-def 0 3) (res (= .cse64 (- 3)) (poly+ .cse64 (- 3)) (trans .cse61 .cse63 .cse64 (- 3))))))))) (res .cse53 .cse54 (cong (= .cse15 .cse61) (= .cse15 (- 3))))) (cong (=> .cse60 .cse57) (=> .cse9 .cse58)))) (cong (and .cse59 .cse31) (and .cse7 .cse5)))))) (res .cse67 .cse68 (cong (=> .cse69 .cse30) (=> .cse18 .cse16)))) (res (= .cse70 .cse17) (res .cse67 .cse68 (res (= .cse71 .cse72) (res (= .cse73 (- 4)) (let ((.cse74 (* (- 1) 4))) (res (= .cse74 (- 4)) (poly* .cse74 (- 4)) (res .cse49 .cse50 (let ((.cse75 (+ 0 .cse74)) (.cse76 (+ 0 (- 4)))) (res (= .cse75 .cse76) (cong (+ 0 .cse74) (+ 0 (- 4))) (res (= .cse73 .cse75) (-def 0 4) (res (= .cse76 (- 4)) (poly+ .cse76 (- 4)) (trans .cse73 .cse75 .cse76 (- 4))))))))) (res .cse53 .cse54 (cong (= .cse15 .cse73) (= .cse15 (- 4))))) (cong (=> .cse71 .cse69) (=> .cse72 .cse18)))) (cong (and .cse70 .cse29) (and .cse17 .cse6))))))) (res (= .cse87 .cse87) (refl .cse87) (cong (=> .cse87 .cse28) (=> .cse87 .cse20)))) (res (= .cse88 .cse88) (refl .cse88) (cong (=> .cse88 .cse27) (=> .cse88 .cse21)))) (cong (not .cse23) (not .cse22))) (=-2 .cse26)))) (not- .cse24))) (res .cse25 (assume .cse25) (not- .cse25))))))))))))))))))))) :proves (- .cse17 - .cse6) :input))))) :proves (- .cse6) :rup)))))) :proves (- .cse5) :rup)))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse90 (not .cse2))) (res .cse2 (let ((.cse89 (not .cse0))) (res .cse89 (res .cse90 (not+ .cse90) (let ((.cse91 (= .cse90 .cse89))) (res .cse91 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse91)))) (not- .cse89))) (res .cse90 (assume .cse90) (not- .cse90)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
