success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse31 (ControlFlow 0 2))) (let ((.cse22 (= .cse31 (- 1)))) (let ((.cse1 (=> .cse22 true))) (let ((.cse0 (=> true .cse1))) (let-proof ((.cse2 true+)) (res .cse0 (! (res .cse1 (! (res true .cse2 (=>+ 1 .cse1)) :proves (+ .cse1) :input) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse37 (= .cse31 (- 3)))) (let ((.cse3 (=> .cse37 true))) (res .cse3 (! (res true .cse2 (=>+ 1 .cse3)) :proves (+ .cse3) :input) (! (let ((.cse4 (and .cse3 .cse0))) (res .cse4 (and+ .cse4) (let ((.cse43 (= (ControlFlow 0 4) 2))) (let ((.cse5 (=> .cse43 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse44 (= (ControlFlow 0 0) 4))) (let ((.cse6 (=> .cse44 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse19 (ite true x y)) (.cse23 (- 0 1))) (let ((.cse42 (ite b x x)) (.cse38 (- 0 3)) (.cse21 (= .cse31 .cse23)) (.cse15 (= x .cse19))) (let ((.cse14 (=> .cse21 .cse15)) (.cse36 (= .cse31 .cse38)) (.cse34 (= x .cse42))) (let ((.cse35 (=> .cse36 .cse34)) (.cse13 (=> .cse34 .cse14))) (let ((.cse12 (and .cse35 .cse13))) (let ((.cse11 (=> .cse43 .cse12))) (let ((.cse7 (=> .cse44 .cse11))) (let ((.cse9 (not .cse7))) (res .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res (= .cse7 .cse6) (res (= .cse11 .cse5) (res (= .cse12 .cse4) (let ((.cse18 (= x x))) (let ((.cse16 (= .cse18 true))) (let-proof ((.cse20 (refl x))) (let-proof ((.cse17 (res true .cse2 (res .cse18 .cse20 (=+2 .cse16))))) (let ((.cse32 (= .cse34 true)) (.cse25 (= 0 0)) (.cse29 (= .cse31 .cse31))) (let-proof ((.cse33 (res .cse16 .cse17 (res (= .cse34 .cse18) (res (= .cse42 x) (res b (ite2 .cse42) (ite1 .cse42)) (res .cse18 .cse20 (cong (= x .cse42) (= x x)))) (trans .cse34 .cse18 true)))) (.cse26 (refl 0)) (.cse30 (refl .cse31))) (res (= .cse13 .cse0) (res (= .cse14 .cse1) (res (= .cse15 true) (res .cse16 .cse17 (res (= .cse15 .cse18) (res (= .cse19 x) (res true .cse2 (ite1 .cse19)) (res .cse18 .cse20 (cong (= x .cse19) (= x x)))) (trans .cse15 .cse18 true))) (res (= .cse21 .cse22) (res (= .cse23 (- 1)) (let ((.cse24 (* (- 1) 1))) (res (= .cse24 (- 1)) (poly* .cse24 (- 1)) (res .cse25 .cse26 (let ((.cse27 (+ 0 .cse24)) (.cse28 (+ 0 (- 1)))) (res (= .cse27 .cse28) (cong (+ 0 .cse24) (+ 0 (- 1))) (res (= .cse23 .cse27) (-def 0 1) (res (= .cse28 (- 1)) (poly+ .cse28 (- 1)) (trans .cse23 .cse27 .cse28 (- 1))))))))) (res .cse29 .cse30 (cong (= .cse31 .cse23) (= .cse31 (- 1))))) (cong (=> .cse21 .cse15) (=> .cse22 true)))) (res .cse32 .cse33 (cong (=> .cse34 .cse14) (=> true .cse1)))) (res (= .cse35 .cse3) (res .cse32 .cse33 (res (= .cse36 .cse37) (res (= .cse38 (- 3)) (let ((.cse39 (* (- 1) 3))) (res (= .cse39 (- 3)) (poly* .cse39 (- 3)) (res .cse25 .cse26 (let ((.cse40 (+ 0 .cse39)) (.cse41 (+ 0 (- 3)))) (res (= .cse40 .cse41) (cong (+ 0 .cse39) (+ 0 (- 3))) (res (= .cse38 .cse40) (-def 0 3) (res (= .cse41 (- 3)) (poly+ .cse41 (- 3)) (trans .cse38 .cse40 .cse41 (- 3))))))))) (res .cse29 .cse30 (cong (= .cse31 .cse38) (= .cse31 (- 3))))) (cong (=> .cse36 .cse34) (=> .cse37 true)))) (cong (and .cse35 .cse13) (and .cse3 .cse0)))))))))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse12) (=> .cse43 .cse4)))) (res (= .cse44 .cse44) (refl .cse44) (cong (=> .cse44 .cse11) (=> .cse44 .cse5)))) (cong (not .cse7) (not .cse6))) (=-2 .cse10)))) (not- .cse8))) (res .cse9 (assume .cse9) (not- .cse9))))))))))))))))))) :proves (- .cse3 - .cse0) :input)))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse64 (+ x (* (- 1) y)))) (let ((.cse45 (ControlFlow 0 2)) (.cse3 (<= .cse64 0))) (let ((.cse5 (not .cse3)) (.cse36 (= .cse45 (- 1)))) (let ((.cse10 (= c@0 b)) (.cse2 (and .cse5 .cse36)) (.cse19 (= c@0 a))) (let ((.cse1 (=> .cse2 .cse19)) (.cse53 (= .cse45 (- 3))) (.cse9 (or .cse19 .cse10))) (let ((.cse8 (=> .cse53 .cse9)) (.cse0 (=> .cse9 .cse1)) (.cse12 (ite .cse5 a b))) (let ((.cse13 (= c@0 .cse12)) (.cse20 (and .cse8 .cse0))) (let ((.cse21 (=> .cse13 .cse20))) (let-proof ((.cse18 (not+ .cse5)) (.cse6 (not- .cse5))) (let-proof ((.cse22 (let ((.cse65 (= (ControlFlow 0 4) 2))) (let ((.cse23 (=> .cse65 .cse21))) (res .cse23 (=>+ 1 .cse23) (let ((.cse66 (= (ControlFlow 0 0) 4))) (let ((.cse24 (=> .cse66 .cse23))) (res .cse24 (=>+ 1 .cse24) (let ((.cse37 (- 0 1))) (let ((.cse48 (> x y)) (.cse35 (= .cse45 .cse37))) (let ((.cse54 (- 0 3)) (.cse34 (and .cse48 .cse35))) (let ((.cse33 (=> .cse34 .cse19)) (.cse52 (= .cse45 .cse54))) (let ((.cse51 (=> .cse52 .cse9)) (.cse32 (=> .cse9 .cse33)) (.cse59 (ite .cse48 a b))) (let ((.cse58 (= c@0 .cse59)) (.cse31 (and .cse51 .cse32))) (let ((.cse30 (=> .cse58 .cse31))) (let ((.cse29 (=> .cse65 .cse30))) (let ((.cse25 (=> .cse66 .cse29))) (let ((.cse27 (not .cse25))) (res .cse25 (let ((.cse26 (not .cse24))) (res .cse26 (res .cse27 (not+ .cse27) (let ((.cse28 (= .cse27 .cse26))) (res .cse28 (res (= .cse25 .cse24) (res (= .cse29 .cse23) (res (= .cse30 .cse21) (let ((.cse46 (= .cse48 .cse5))) (let-proof ((.cse47 (let ((.cse61 (< y x))) (let ((.cse60 (= .cse48 .cse61))) (res .cse60 (>def x y) (res .cse5 (res .cse48 (=+1 .cse46) (res .cse61 (=-2 .cse60) (res .cse3 .cse18 (farkas 1 .cse61 1 .cse3)))) (res .cse48 (res .cse61 (let ((.cse62 (<= x y))) (res .cse62 (total x y) (res .cse3 (let ((.cse63 (< 0 .cse64))) (res .cse63 (total .cse64 0) (farkas 1 .cse62 1 .cse63))) .cse6))) (=-1 .cse60)) (=+2 .cse46)))))))) (res (= .cse31 .cse20) (let ((.cse49 (= .cse9 .cse9)) (.cse39 (= 0 0)) (.cse43 (= .cse45 .cse45))) (let-proof ((.cse50 (refl .cse9)) (.cse40 (refl 0)) (.cse44 (refl .cse45))) (res (= .cse32 .cse0) (res (= .cse33 .cse1) (res (= .cse19 .cse19) (refl .cse19) (res (= .cse34 .cse2) (res (= .cse35 .cse36) (res (= .cse37 (- 1)) (let ((.cse38 (* (- 1) 1))) (res (= .cse38 (- 1)) (poly* .cse38 (- 1)) (res .cse39 .cse40 (let ((.cse41 (+ 0 .cse38)) (.cse42 (+ 0 (- 1)))) (res (= .cse41 .cse42) (cong (+ 0 .cse38) (+ 0 (- 1))) (res (= .cse37 .cse41) (-def 0 1) (res (= .cse42 (- 1)) (poly+ .cse42 (- 1)) (trans .cse37 .cse41 .cse42 (- 1))))))))) (res .cse43 .cse44 (cong (= .cse45 .cse37) (= .cse45 (- 1))))) (res .cse46 .cse47 (cong (and .cse48 .cse35) (and .cse5 .cse36)))) (cong (=> .cse34 .cse19) (=> .cse2 .cse19)))) (res .cse49 .cse50 (cong (=> .cse9 .cse33) (=> .cse9 .cse1)))) (res (= .cse51 .cse8) (res .cse49 .cse50 (res (= .cse52 .cse53) (res (= .cse54 (- 3)) (let ((.cse55 (* (- 1) 3))) (res (= .cse55 (- 3)) (poly* .cse55 (- 3)) (res .cse39 .cse40 (let ((.cse56 (+ 0 .cse55)) (.cse57 (+ 0 (- 3)))) (res (= .cse56 .cse57) (cong (+ 0 .cse55) (+ 0 (- 3))) (res (= .cse54 .cse56) (-def 0 3) (res (= .cse57 (- 3)) (poly+ .cse57 (- 3)) (trans .cse54 .cse56 .cse57 (- 3))))))))) (res .cse43 .cse44 (cong (= .cse45 .cse54) (= .cse45 (- 3))))) (cong (=> .cse52 .cse9) (=> .cse53 .cse9)))) (cong (and .cse51 .cse32) (and .cse8 .cse0)))))) (res (= .cse58 .cse13) (res (= .cse59 .cse12) (res (= b b) (refl b) (res (= a a) (refl a) (res .cse46 .cse47 (cong (ite .cse48 a b) (ite .cse5 a b))))) (res (= c@0 c@0) (refl c@0) (cong (= c@0 .cse59) (= c@0 .cse12)))) (cong (=> .cse58 .cse31) (=> .cse13 .cse20)))))) (res (= .cse65 .cse65) (refl .cse65) (cong (=> .cse65 .cse30) (=> .cse65 .cse21)))) (res (= .cse66 .cse66) (refl .cse66) (cong (=> .cse66 .cse29) (=> .cse66 .cse23)))) (cong (not .cse25) (not .cse24))) (=-2 .cse28)))) (not- .cse26))) (res .cse27 (assume .cse27) (not- .cse27))))))))))))))))))))) (let-proof ((.cse14 (! (res .cse21 (=>+ 0 .cse21) .cse22) :proves (+ .cse13) :input)) (.cse15 (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse9) :input)) (.cse7 (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) (.cse16 (! (res .cse20 (and+ .cse20) (res .cse21 (=>+ 1 .cse21) .cse22)) :proves (- .cse8 - .cse0) :input))) (let-proof ((.cse4 (! (let ((.cse17 (= .cse12 a))) (res .cse17 (! (res .cse5 .cse18 (ite1 .cse12)) :proves (+ .cse17 + .cse3) :input) (! (res .cse13 .cse14 (res .cse19 (! (trans c@0 .cse12 a) :proves (+ .cse19 - .cse13 - .cse17) :trans (c@0 .cse12 a)) (! (res .cse9 (! (or+ 0 .cse9) :proves (+ .cse9 - .cse19) :input) (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse19) :input) (res .cse8 .cse15 (res .cse0 .cse7 .cse16)))) :proves (- .cse19) :rup))) :proves (- .cse17) :rup))) :proves (+ .cse3) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse2) :input) (! (res .cse3 .cse4 (! (res .cse5 (and- 0 .cse2) .cse6) :proves (- .cse2 - .cse3) :input)) :proves (- .cse2) :rup)) :proves (+ .cse1) :rup) .cse7) :proves (+ .cse0) :rup) (res .cse8 (! (res .cse9 (! (res .cse10 (! (let ((.cse11 (= .cse12 b))) (res .cse11 (! (res .cse3 .cse4 (! (res .cse5 (ite2 .cse12) .cse6) :proves (+ .cse11 - .cse3) :input)) :proves (+ .cse11) :rup) (res .cse13 .cse14 (! (trans c@0 .cse12 b) :proves (+ .cse10 - .cse13 - .cse11) :trans (c@0 .cse12 b))))) :proves (+ .cse10) :rup) (! (or+ 1 .cse9) :proves (+ .cse9 - .cse10) :input)) :proves (+ .cse9) :rup) .cse15) :proves (+ .cse8) :rup) .cse16)))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_IfThenElse1.bpl.mod.smt2:102:10: Logical context not inconsistent!")
unsat
(! (let ((.cse17 (ControlFlow 0 2))) (let ((.cse1 (= .cse17 (- 1))) (.cse0 (= (- 1) .cse17))) (let ((.cse20 (= .cse1 .cse0))) (let-proof ((.cse21 (res .cse0 (res .cse1 (=+1 .cse20) (symm (- 1) .cse17)) (res .cse1 (symm .cse17 (- 1)) (=+2 .cse20))))) (res .cse0 (! (res .cse1 (let ((.cse11 (= x (ite b x y)))) (let ((.cse2 (=> .cse1 .cse11))) (res .cse2 (=>+ 0 .cse2) (let ((.cse18 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse18 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse19 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse19 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse13 (- 0 1))) (let ((.cse12 (= .cse17 .cse13))) (let ((.cse10 (=> .cse12 .cse11))) (let ((.cse9 (=> .cse18 .cse10))) (let ((.cse5 (=> .cse19 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (res (= .cse11 .cse11) (refl .cse11) (res (= .cse12 .cse1) (res (= .cse13 (- 1)) (let ((.cse14 (* (- 1) 1))) (res (= .cse14 (- 1)) (poly* .cse14 (- 1)) (res (= 0 0) (refl 0) (let ((.cse15 (+ 0 .cse14)) (.cse16 (+ 0 (- 1)))) (res (= .cse15 .cse16) (cong (+ 0 .cse14) (+ 0 (- 1))) (res (= .cse13 .cse15) (-def 0 1) (res (= .cse16 (- 1)) (poly+ .cse16 (- 1)) (trans .cse13 .cse15 .cse16 (- 1))))))))) (res (= .cse17 .cse17) (refl .cse17) (cong (= .cse17 .cse13) (= .cse17 (- 1))))) (cong (=> .cse12 .cse11) (=> .cse1 .cse11)))) (res (= .cse18 .cse18) (refl .cse18) (cong (=> .cse18 .cse10) (=> .cse18 .cse2)))) (res (= .cse19 .cse19) (refl .cse19) (cong (=> .cse19 .cse9) (=> .cse19 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7)))))))))))))))))) (res .cse20 .cse21 (=-2 .cse20))) :proves (+ .cse0) :input) (! (let ((.cse23 (not .cse1))) (res .cse1 (let ((.cse22 (not .cse0))) (res .cse22 (res .cse23 (not+ .cse23) (let ((.cse24 (= .cse23 .cse22))) (res .cse24 (res .cse20 .cse21 (cong (not .cse1) (not .cse0))) (=-2 .cse24)))) (not- .cse22))) (res .cse23 (assume .cse23) (not- .cse23)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_IfThenElse1.bpl.mod.smt2:139:10: Logical context not inconsistent!")
unsat
(! (let ((.cse19 (ControlFlow 0 2))) (let ((.cse1 (= .cse19 (- 1))) (.cse0 (= (- 1) .cse19))) (let ((.cse22 (= .cse1 .cse0))) (let-proof ((.cse23 (res .cse0 (res .cse1 (=+1 .cse22) (symm (- 1) .cse19)) (res .cse1 (symm .cse19 (- 1)) (=+2 .cse22))))) (res .cse0 (! (res .cse1 (let ((.cse12 (= x y))) (let ((.cse2 (=> .cse1 .cse12))) (res .cse2 (=>+ 0 .cse2) (let ((.cse20 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse20 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse21 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse21 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse13 (ite false x y)) (.cse15 (- 0 1))) (let ((.cse14 (= .cse19 .cse15)) (.cse11 (= x .cse13))) (let ((.cse10 (=> .cse14 .cse11))) (let ((.cse9 (=> .cse20 .cse10))) (let ((.cse5 (=> .cse21 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (res (= .cse11 .cse12) (res (= .cse13 y) (res false (ite2 .cse13) false-) (res (= x x) (refl x) (cong (= x .cse13) (= x y)))) (res (= .cse14 .cse1) (res (= .cse15 (- 1)) (let ((.cse16 (* (- 1) 1))) (res (= .cse16 (- 1)) (poly* .cse16 (- 1)) (res (= 0 0) (refl 0) (let ((.cse17 (+ 0 .cse16)) (.cse18 (+ 0 (- 1)))) (res (= .cse17 .cse18) (cong (+ 0 .cse16) (+ 0 (- 1))) (res (= .cse15 .cse17) (-def 0 1) (res (= .cse18 (- 1)) (poly+ .cse18 (- 1)) (trans .cse15 .cse17 .cse18 (- 1))))))))) (res (= .cse19 .cse19) (refl .cse19) (cong (= .cse19 .cse15) (= .cse19 (- 1))))) (cong (=> .cse14 .cse11) (=> .cse1 .cse12)))) (res (= .cse20 .cse20) (refl .cse20) (cong (=> .cse20 .cse10) (=> .cse20 .cse2)))) (res (= .cse21 .cse21) (refl .cse21) (cong (=> .cse21 .cse9) (=> .cse21 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7)))))))))))))))))) (res .cse22 .cse23 (=-2 .cse22))) :proves (+ .cse0) :input) (! (let ((.cse25 (not .cse1))) (res .cse1 (let ((.cse24 (not .cse0))) (res .cse24 (res .cse25 (not+ .cse25) (let ((.cse26 (= .cse25 .cse24))) (res .cse26 (res .cse22 .cse23 (cong (not .cse1) (not .cse0))) (=-2 .cse26)))) (not- .cse24))) (res .cse25 (assume .cse25) (not- .cse25)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
