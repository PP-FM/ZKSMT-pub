success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots21.v0.bpl.mod.smt2:28:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots21.v0.bpl.mod.smt2:31:10: Logical context not inconsistent!")
unsat
(! (let ((.cse49 (ControlFlow 0 5))) (let ((.cse2 (= .cse49 (- 6))) (.cse0 (= (- 6) .cse49))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 6) .cse49)) (res .cse2 (symm .cse49 (- 6)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse84 (ControlFlow 0 2))) (let ((.cse79 (= .cse84 (- 1)))) (let ((.cse35 (= .cse49 2)) (.cse37 (=> .cse79 false))) (let ((.cse32 (=> .cse35 .cse37))) (let ((.cse5 (=> false .cse32))) (let-proof ((.cse6 false-)) (res .cse5 (! (res false (=>+ 0 .cse5) .cse6) :proves (+ .cse5) :input) (let ((.cse86 (ControlFlow 0 7))) (let ((.cse56 (= .cse86 5)) (.cse8 (and .cse1 .cse5))) (let ((.cse7 (=> .cse56 .cse8))) (res .cse7 (! (res .cse8 (and+ .cse8) (=>+ 1 .cse7)) :proves (+ .cse7 - .cse1 - .cse5) :input) (! (let ((.cse19 (ControlFlow 0 3))) (let ((.cse62 (= .cse19 2))) (let ((.cse61 (=> .cse62 .cse37)) (.cse13 (= .cse19 (- 4)))) (let ((.cse11 (=> .cse13 false)) (.cse10 (=> false .cse61))) (let ((.cse74 (= .cse86 3)) (.cse20 (and .cse11 .cse10))) (let ((.cse9 (=> .cse74 .cse20))) (res .cse9 (! (res .cse10 (! (res false (=>+ 0 .cse10) .cse6) :proves (+ .cse10) :input) (res .cse11 (! (let ((.cse12 (= (- 4) .cse19))) (let ((.cse14 (= .cse13 .cse12))) (let-proof ((.cse15 (res .cse12 (res .cse13 (=+1 .cse14) (symm (- 4) .cse19)) (res .cse13 (symm .cse19 (- 4)) (=+2 .cse14))))) (res .cse12 (! (res .cse13 (=>+ 0 .cse11) (res .cse14 .cse15 (=-2 .cse14))) :proves (+ .cse11 + .cse12) :input) (! (let ((.cse17 (not .cse13))) (res .cse13 (let ((.cse16 (not .cse12))) (res .cse16 (res .cse17 (not+ .cse17) (let ((.cse18 (= .cse17 .cse16))) (res .cse18 (res .cse14 .cse15 (cong (not .cse13) (not .cse12))) (=-2 .cse18)))) (not- .cse16))) (res .cse17 (assume .cse17) (not- .cse17)))) :proves (- .cse12) :input))))) :proves (+ .cse11) :rup) (! (res .cse20 (and+ .cse20) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse11 - .cse10) :input))) :proves (+ .cse9) :rup) (! (let ((.cse21 (and .cse9 .cse7))) (res .cse21 (and+ .cse21) (let ((.cse85 (= (ControlFlow 0 0) 7))) (let ((.cse22 (=> .cse85 .cse21))) (res .cse22 (=>+ 1 .cse22) (let ((.cse77 (= 3 3)) (.cse80 (- 0 1))) (let ((.cse78 (= .cse84 .cse80)) (.cse75 (not .cse77))) (let ((.cse73 (= 1 1)) (.cse68 (- 0 4)) (.cse55 (= 2 2)) (.cse43 (- 0 6)) (.cse36 (=> .cse78 .cse75))) (let ((.cse31 (=> .cse35 .cse36)) (.cse42 (= .cse49 .cse43)) (.cse40 (not .cse55)) (.cse60 (=> .cse62 .cse36)) (.cse67 (= .cse19 .cse68)) (.cse65 (not .cse73))) (let ((.cse66 (=> .cse67 .cse65)) (.cse59 (=> .cse65 .cse60)) (.cse41 (=> .cse42 .cse40)) (.cse30 (=> .cse40 .cse31))) (let ((.cse29 (and .cse41 .cse30)) (.cse58 (and .cse66 .cse59))) (let ((.cse57 (=> .cse74 .cse58)) (.cse28 (=> .cse56 .cse29))) (let ((.cse27 (and .cse57 .cse28))) (let ((.cse23 (=> .cse85 .cse27))) (let ((.cse25 (not .cse23))) (res .cse23 (let ((.cse24 (not .cse22))) (res .cse24 (res .cse25 (not+ .cse25) (let ((.cse26 (= .cse25 .cse24))) (res .cse26 (res (= .cse23 .cse22) (res (= .cse27 .cse21) (let ((.cse52 (not true))) (let ((.cse50 (= .cse52 false))) (let-proof ((.cse54 true+)) (let ((.cse45 (= 0 0))) (let-proof ((.cse51 (res false (res .cse52 (=+1 .cse50) (res true .cse54 (not- .cse52))) .cse6)) (.cse46 (refl 0))) (let ((.cse33 (= .cse36 .cse37))) (let-proof ((.cse34 (res (= .cse75 false) (res .cse50 .cse51 (res (= .cse75 .cse52) (let ((.cse76 (= .cse77 true))) (res .cse76 (res true .cse54 (res .cse77 (refl 3) (=+2 .cse76))) (cong (not .cse77) (not true)))) (trans .cse75 .cse52 false))) (res (= .cse78 .cse79) (res (= .cse80 (- 1)) (let ((.cse81 (* (- 1) 1))) (res (= .cse81 (- 1)) (poly* .cse81 (- 1)) (res .cse45 .cse46 (let ((.cse82 (+ 0 .cse81)) (.cse83 (+ 0 (- 1)))) (res (= .cse82 .cse83) (cong (+ 0 .cse81) (+ 0 (- 1))) (res (= .cse80 .cse82) (-def 0 1) (res (= .cse83 (- 1)) (poly+ .cse83 (- 1)) (trans .cse80 .cse82 .cse83 (- 1))))))))) (res (= .cse84 .cse84) (refl .cse84) (cong (= .cse84 .cse80) (= .cse84 (- 1))))) (cong (=> .cse78 .cse75) (=> .cse79 false)))))) (res (= .cse28 .cse7) (res (= .cse29 .cse8) (let ((.cse38 (= .cse40 false))) (let-proof ((.cse39 (res .cse50 .cse51 (res (= .cse40 .cse52) (let ((.cse53 (= .cse55 true))) (res .cse53 (res true .cse54 (res .cse55 (refl 2) (=+2 .cse53))) (cong (not .cse55) (not true)))) (trans .cse40 .cse52 false))))) (res (= .cse30 .cse5) (res (= .cse31 .cse32) (res .cse33 .cse34 (res (= .cse35 .cse35) (refl .cse35) (cong (=> .cse35 .cse36) (=> .cse35 .cse37)))) (res .cse38 .cse39 (cong (=> .cse40 .cse31) (=> false .cse32)))) (res (= .cse41 .cse1) (res .cse38 .cse39 (res (= .cse42 .cse2) (res (= .cse43 (- 6)) (let ((.cse44 (* (- 1) 6))) (res (= .cse44 (- 6)) (poly* .cse44 (- 6)) (res .cse45 .cse46 (let ((.cse47 (+ 0 .cse44)) (.cse48 (+ 0 (- 6)))) (res (= .cse47 .cse48) (cong (+ 0 .cse44) (+ 0 (- 6))) (res (= .cse43 .cse47) (-def 0 6) (res (= .cse48 (- 6)) (poly+ .cse48 (- 6)) (trans .cse43 .cse47 .cse48 (- 6))))))))) (res (= .cse49 .cse49) (refl .cse49) (cong (= .cse49 .cse43) (= .cse49 (- 6))))) (cong (=> .cse42 .cse40) (=> .cse2 false)))) (cong (and .cse41 .cse30) (and .cse1 .cse5)))))) (res (= .cse56 .cse56) (refl .cse56) (cong (=> .cse56 .cse29) (=> .cse56 .cse8)))) (res (= .cse57 .cse9) (res (= .cse58 .cse20) (let ((.cse63 (= .cse65 false))) (let-proof ((.cse64 (res .cse50 .cse51 (res (= .cse65 .cse52) (let ((.cse72 (= .cse73 true))) (res .cse72 (res true .cse54 (res .cse73 (refl 1) (=+2 .cse72))) (cong (not .cse73) (not true)))) (trans .cse65 .cse52 false))))) (res (= .cse59 .cse10) (res (= .cse60 .cse61) (res .cse33 .cse34 (res (= .cse62 .cse62) (refl .cse62) (cong (=> .cse62 .cse36) (=> .cse62 .cse37)))) (res .cse63 .cse64 (cong (=> .cse65 .cse60) (=> false .cse61)))) (res (= .cse66 .cse11) (res .cse63 .cse64 (res (= .cse67 .cse13) (res (= .cse68 (- 4)) (let ((.cse69 (* (- 1) 4))) (res (= .cse69 (- 4)) (poly* .cse69 (- 4)) (res .cse45 .cse46 (let ((.cse70 (+ 0 .cse69)) (.cse71 (+ 0 (- 4)))) (res (= .cse70 .cse71) (cong (+ 0 .cse69) (+ 0 (- 4))) (res (= .cse68 .cse70) (-def 0 4) (res (= .cse71 (- 4)) (poly+ .cse71 (- 4)) (trans .cse68 .cse70 .cse71 (- 4))))))))) (res (= .cse19 .cse19) (refl .cse19) (cong (= .cse19 .cse68) (= .cse19 (- 4))))) (cong (=> .cse67 .cse65) (=> .cse13 false)))) (cong (and .cse66 .cse59) (and .cse11 .cse10)))))) (res (= .cse74 .cse74) (refl .cse74) (cong (=> .cse74 .cse58) (=> .cse74 .cse20)))) (cong (and .cse57 .cse28) (and .cse9 .cse7))))))))))) (res (= .cse85 .cse85) (refl .cse85) (cong (=> .cse85 .cse27) (=> .cse85 .cse21)))) (cong (not .cse23) (not .cse22))) (=-2 .cse26)))) (not- .cse24))) (res .cse25 (assume .cse25) (not- .cse25)))))))))))))))))) :proves (- .cse9 - .cse7) :input)))))))) :proves (- .cse7) :rup)))))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse88 (not .cse2))) (res .cse2 (let ((.cse87 (not .cse0))) (res .cse87 (res .cse88 (not+ .cse88) (let ((.cse89 (= .cse88 .cse87))) (res .cse89 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse89)))) (not- .cse87))) (res .cse88 (assume .cse88) (not- .cse88)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
