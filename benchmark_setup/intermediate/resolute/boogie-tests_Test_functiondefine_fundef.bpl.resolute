success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse34 (+ x@@1 1))) (let ((.cse11 (<= r@1 0)) (.cse103 (ControlFlow 0 2)) (.cse42 (<= .cse34 0))) (let ((.cse20 (= r@1 r@0)) (.cse44 (not .cse42)) (.cse31 (= r@0 .cse34)) (.cse98 (= .cse103 (- 1))) (.cse12 (not .cse11)) (.cse46 (= r@1 1))) (let ((.cse15 (and .cse46 (= (ControlFlow 0 4) 2))) (.cse2 (=> .cse98 .cse12)) (.cse18 (and .cse44 .cse31)) (.cse17 (and .cse20 (= (ControlFlow 0 3) 2)))) (let ((.cse16 (and .cse18 .cse17)) (.cse70 (not .cse44)) (.cse1 (=> .cse15 .cse2)) (.cse105 (ControlFlow 0 5))) (let ((.cse74 (= .cse105 4)) (.cse0 (=> .cse70 .cse1)) (.cse83 (= .cse105 3)) (.cse8 (=> .cse16 .cse2))) (let ((.cse7 (=> .cse83 .cse8)) (.cse5 (=> .cse74 .cse0))) (let-proof ((.cse45 (not- .cse44)) (.cse13 (not+ .cse12))) (let-proof ((.cse4 (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) (.cse6 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse0) :input)) (.cse9 (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse8) :input)) (.cse10 (! (let ((.cse56 (and .cse7 .cse5))) (res .cse56 (and+ .cse56) (let ((.cse104 (= (ControlFlow 0 0) 5))) (let ((.cse57 (=> .cse104 .cse56))) (res .cse57 (=>+ 1 .cse57) (let ((.cse99 (- 0 1)) (.cse82 (foo2 x@@1))) (let ((.cse73 (foo x@@1)) (.cse79 (= r@0 .cse82)) (.cse97 (= .cse103 .cse99)) (.cse94 (> r@1 0))) (let ((.cse68 (=> .cse97 .cse94)) (.cse78 (and .cse73 .cse79))) (let ((.cse77 (and .cse78 .cse17)) (.cse69 (not .cse73)) (.cse65 (=> .cse15 .cse68))) (let ((.cse64 (=> .cse69 .cse65)) (.cse76 (=> .cse77 .cse68))) (let ((.cse75 (=> .cse83 .cse76)) (.cse63 (=> .cse74 .cse64))) (let ((.cse62 (and .cse75 .cse63))) (let ((.cse58 (=> .cse104 .cse62))) (let ((.cse60 (not .cse58))) (res .cse58 (let ((.cse59 (not .cse57))) (res .cse59 (res .cse60 (not+ .cse60) (let ((.cse61 (= .cse60 .cse59))) (res .cse61 (res (= .cse58 .cse57) (res (= .cse62 .cse56) (let ((.cse80 (= .cse82 .cse34)) (.cse90 (= 0 0))) (let-proof ((.cse81 (expand (foo2 x@@1))) (.cse91 (refl 0))) (let ((.cse66 (= .cse68 .cse2)) (.cse71 (= .cse73 .cse44))) (let-proof ((.cse67 (let ((.cse92 (= .cse94 .cse12))) (res .cse92 (let ((.cse95 (< 0 r@1))) (let ((.cse93 (= .cse94 .cse95))) (res .cse93 (>def r@1 0) (res .cse12 (res .cse94 (=+1 .cse92) (res .cse95 (=-2 .cse93) (res .cse11 .cse13 (farkas 1 .cse95 1 .cse11)))) (res .cse94 (res .cse95 (let-proof ((.cse96 (total r@1 0))) (res .cse11 .cse96 (res .cse11 (res .cse95 .cse96 (farkas 1 .cse11 1 .cse95)) (not- .cse12)))) (=-1 .cse93)) (=+2 .cse92)))))) (res (= .cse97 .cse98) (res (= .cse99 (- 1)) (let ((.cse100 (* (- 1) 1))) (res (= .cse100 (- 1)) (poly* .cse100 (- 1)) (res .cse90 .cse91 (let ((.cse101 (+ 0 .cse100)) (.cse102 (+ 0 (- 1)))) (res (= .cse101 .cse102) (cong (+ 0 .cse100) (+ 0 (- 1))) (res (= .cse99 .cse101) (-def 0 1) (res (= .cse102 (- 1)) (poly+ .cse102 (- 1)) (trans .cse99 .cse101 .cse102 (- 1))))))))) (res (= .cse103 .cse103) (refl .cse103) (cong (= .cse103 .cse99) (= .cse103 (- 1))))) (cong (=> .cse97 .cse94) (=> .cse98 .cse12)))))) (.cse72 (let ((.cse84 (> .cse82 0))) (res (= .cse84 .cse44) (let ((.cse87 (> .cse34 0))) (let ((.cse85 (= .cse87 .cse44))) (res .cse85 (let ((.cse88 (< 0 .cse34))) (let ((.cse86 (= .cse87 .cse88))) (res .cse86 (>def .cse34 0) (res .cse44 (res .cse87 (=+1 .cse85) (res .cse88 (=-2 .cse86) (res .cse42 (not+ .cse44) (farkas 1 .cse88 1 .cse42)))) (res .cse87 (res .cse88 (let-proof ((.cse89 (total .cse34 0))) (res .cse42 .cse89 (res .cse42 (res .cse88 .cse89 (farkas 1 .cse42 1 .cse88)) .cse45))) (=-1 .cse86)) (=+2 .cse85)))))) (res (= .cse84 .cse87) (res .cse90 .cse91 (res .cse80 .cse81 (cong (> .cse82 0) (> .cse34 0)))) (trans .cse84 .cse87 .cse44))))) (res (= .cse73 .cse84) (expand (foo x@@1)) (trans .cse73 .cse84 .cse44)))))) (res (= .cse63 .cse5) (res (= .cse64 .cse0) (res (= .cse65 .cse1) (res .cse66 .cse67 (res (= .cse15 .cse15) (refl .cse15) (cong (=> .cse15 .cse68) (=> .cse15 .cse2)))) (res (= .cse69 .cse70) (res .cse71 .cse72 (cong (not .cse73) (not .cse44))) (cong (=> .cse69 .cse65) (=> .cse70 .cse1)))) (res (= .cse74 .cse74) (refl .cse74) (cong (=> .cse74 .cse64) (=> .cse74 .cse0)))) (res (= .cse75 .cse7) (res (= .cse76 .cse8) (res .cse66 .cse67 (res (= .cse77 .cse16) (res (= .cse17 .cse17) (refl .cse17) (res (= .cse78 .cse18) (res (= .cse79 .cse31) (res .cse80 .cse81 (res (= r@0 r@0) (refl r@0) (cong (= r@0 .cse82) (= r@0 .cse34)))) (res .cse71 .cse72 (cong (and .cse73 .cse79) (and .cse44 .cse31)))) (cong (and .cse78 .cse17) (and .cse18 .cse17)))) (cong (=> .cse77 .cse68) (=> .cse16 .cse2)))) (res (= .cse83 .cse83) (refl .cse83) (cong (=> .cse83 .cse76) (=> .cse83 .cse8)))) (cong (and .cse75 .cse63) (and .cse7 .cse5)))))))) (res (= .cse104 .cse104) (refl .cse104) (cong (=> .cse104 .cse62) (=> .cse104 .cse56)))) (cong (not .cse58) (not .cse57))) (=-2 .cse61)))) (not- .cse59))) (res .cse60 (assume .cse60) (not- .cse60))))))))))))))))) :proves (- .cse7 - .cse5) :input))) (let-proof ((.cse3 (! (res .cse11 (! (res .cse12 .cse13 (=>+ 1 .cse2)) :proves (+ .cse2 + .cse11) :input) (! (let ((.cse51 (+ r@1 (- 1)))) (let ((.cse14 (= .cse51 0)) (.cse52 (= 0 .cse51))) (let-proof ((.cse53 (symm 0 .cse51))) (res .cse14 (res .cse15 (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse15) :input) (res .cse0 .cse4 (res .cse5 .cse6 (res .cse7 (res .cse8 (res .cse16 (! (=>+ 0 .cse8) :proves (+ .cse8 + .cse16) :input) (res .cse17 (! (and- 1 .cse16) :proves (- .cse16 + .cse17) :input) (res .cse18 (! (and- 0 .cse16) :proves (- .cse16 + .cse18) :input) (let ((.cse25 (+ r@1 (* (- 1) r@0)))) (let ((.cse19 (= .cse25 0)) (.cse26 (= 0 .cse25))) (let-proof ((.cse27 (symm 0 .cse25))) (res .cse19 (! (res .cse20 (and- 0 .cse17) (let ((.cse21 (= .cse20 .cse19))) (res .cse21 (res .cse19 (res .cse20 (=+1 .cse21) (let ((.cse22 (= r@0 r@1))) (res .cse22 (symm r@0 r@1) (let ((.cse23 (< .cse25 0))) (res .cse23 (let ((.cse24 (< 0 .cse25))) (res .cse24 (trichotomy .cse25 0) (farkas 1 .cse20 1 .cse24))) (farkas 1 .cse22 1 .cse23)))))) (res .cse20 (res .cse26 .cse27 (let ((.cse28 (< r@1 r@0))) (res .cse28 (let ((.cse29 (< r@0 r@1))) (res .cse29 (trichotomy r@1 r@0) (farkas 1 .cse19 1 .cse29))) (farkas 1 .cse26 1 .cse28)))) (=+2 .cse21))) (=-2 .cse21)))) :proves (- .cse17 + .cse19) :input) (let ((.cse37 (+ r@0 (* (- 1) x@@1) (- 1)))) (let ((.cse30 (= .cse37 0)) (.cse38 (= 0 .cse37))) (let-proof ((.cse39 (symm 0 .cse37))) (res .cse30 (! (res .cse31 (and- 1 .cse18) (let ((.cse32 (= .cse31 .cse30))) (res .cse32 (res .cse30 (res .cse31 (=+1 .cse32) (let ((.cse33 (= .cse34 r@0))) (res .cse33 (symm .cse34 r@0) (let ((.cse35 (< .cse37 0))) (res .cse35 (let ((.cse36 (< 0 .cse37))) (res .cse36 (trichotomy .cse37 0) (farkas 1 .cse31 1 .cse36))) (farkas 1 .cse33 1 .cse35)))))) (res .cse31 (res .cse38 .cse39 (let ((.cse40 (< r@0 .cse34))) (res .cse40 (let ((.cse41 (< .cse34 r@0))) (res .cse41 (trichotomy r@0 .cse34) (farkas 1 .cse30 1 .cse41))) (farkas 1 .cse38 1 .cse40)))) (=+2 .cse32))) (=-2 .cse32)))) :proves (- .cse18 + .cse30) :input) (res .cse42 (! (res .cse38 .cse39 (res .cse26 .cse27 (let ((.cse43 (<= 1 .cse34))) (res .cse43 (total-int .cse34 0) (farkas 1 .cse11 1 .cse43 1 .cse26 1 .cse38))))) :proves (- .cse11 + .cse42 - .cse19 - .cse30) :LA (1 (- 1) (- 1) (- 1))) (! (res .cse44 (and- 0 .cse18) .cse45) :proves (- .cse18 - .cse42) :input))))))))))))) .cse9) .cse10)))) (! (res .cse46 (and- 0 .cse15) (let ((.cse47 (= .cse46 .cse14))) (res .cse47 (res .cse14 (res .cse46 (=+1 .cse47) (let ((.cse48 (= 1 r@1))) (res .cse48 (symm 1 r@1) (let ((.cse49 (< .cse51 0))) (res .cse49 (let ((.cse50 (< 0 .cse51))) (res .cse50 (trichotomy .cse51 0) (farkas 1 .cse46 1 .cse50))) (farkas 1 .cse48 1 .cse49)))))) (res .cse46 (res .cse52 .cse53 (let ((.cse54 (< r@1 1))) (res .cse54 (let ((.cse55 (< 1 r@1))) (res .cse55 (trichotomy r@1 1) (farkas 1 .cse14 1 .cse55))) (farkas 1 .cse52 1 .cse54)))) (=+2 .cse47))) (=-2 .cse47)))) :proves (- .cse15 + .cse14) :input)) (! (res .cse52 .cse53 (farkas 1 .cse11 1 .cse52)) :proves (- .cse11 - .cse14) :LA (1 (- 1))))))) :proves (- .cse11) :rup)) :proves (+ .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 .cse3 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) .cse4) :proves (+ .cse0) :rup) (res .cse5 .cse6 (! (res .cse7 (! (res .cse8 (! (res .cse2 .cse3 (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse2) :input)) :proves (+ .cse8) :rup) .cse9) :proves (+ .cse7) :rup) .cse10) :proves (- .cse5) :rup))))))))))))) :proves () :rup)
unsupported
