success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test21_LargeLiterals0.bpl.mod.smt2:29:10: Logical context not inconsistent!")
unsat
(! (let ((.cse117 (ControlFlow 0 2))) (let ((.cse2 (= .cse117 (- 1))) (.cse0 (= (- 1) .cse117))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse117)) (res .cse2 (symm .cse117 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse101 (+ (* (- 1) x@2) (- 123456789)))) (let ((.cse98 (<= .cse101 0))) (let ((.cse95 (not .cse98))) (let ((.cse1 (=> .cse2 .cse95))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse44 (= x@2 1000000100000))) (let ((.cse5 (=> .cse44 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse15 (+ x@1 (- 100))) (.cse122 (= .cse117 (- 3)))) (let ((.cse7 (=> .cse122 .cse44)) (.cse24 (= x@1 1000000100100)) (.cse12 (= x@2 .cse15))) (let ((.cse10 (and .cse24 .cse12)) (.cse53 (and .cse7 .cse5))) (let ((.cse6 (=> .cse10 .cse53))) (let-proof ((.cse43 (! (let ((.cse58 (= x@0 1000256))) (let ((.cse54 (=> .cse58 .cse6))) (res .cse54 (! (=>+ 1 .cse54) :proves (+ .cse54 - .cse6) :input) (! (let ((.cse140 (= .cse117 (- 4)))) (let ((.cse56 (=> .cse140 .cse58))) (let ((.cse72 (and .cse56 .cse54))) (let ((.cse55 (=> .cse58 .cse72))) (let-proof ((.cse61 (! (let ((.cse76 (and true true))) (let ((.cse73 (=> .cse76 .cse55))) (res .cse73 (! (=>+ 1 .cse73) :proves (+ .cse73 - .cse55) :input) (! (let ((.cse152 (= .cse117 (- 5)))) (let ((.cse74 (=> .cse152 .cse76))) (let-proof ((.cse75 true+)) (res .cse74 (! (res true .cse75 (res .cse76 (and+ .cse76) (=>+ 1 .cse74))) :proves (+ .cse74) :input) (! (let ((.cse77 (and .cse74 .cse73))) (res .cse77 (and+ .cse77) (let ((.cse176 (= (ControlFlow 0 6) 2))) (let ((.cse78 (=> .cse176 .cse77))) (res .cse78 (=>+ 1 .cse78) (let ((.cse177 (= (ControlFlow 0 0) 6))) (let ((.cse79 (=> .cse177 .cse78))) (res .cse79 (=>+ 1 .cse79) (let ((.cse102 (- 0 123456789)) (.cse111 (- 0 1))) (let ((.cse123 (- 0 3)) (.cse110 (= .cse117 .cse111)) (.cse94 (< x@2 .cse102))) (let ((.cse129 (- x@1 100)) (.cse135 (+ 1000000000000 100100)) (.cse93 (=> .cse110 .cse94)) (.cse121 (= .cse117 .cse123))) (let ((.cse120 (=> .cse121 .cse44)) (.cse92 (=> .cse44 .cse93)) (.cse134 (= x@1 .cse135)) (.cse128 (= x@2 .cse129))) (let ((.cse141 (- 0 4)) (.cse127 (and .cse134 .cse128)) (.cse91 (and .cse120 .cse92))) (let ((.cse90 (=> .cse127 .cse91)) (.cse139 (= .cse117 .cse141))) (let ((.cse138 (=> .cse139 .cse58)) (.cse89 (=> .cse58 .cse90)) (.cse146 (+ 1000000 256))) (let ((.cse171 (> 1000000 0)) (.cse157 (< 1000000 2000000)) (.cse153 (- 0 5)) (.cse145 (= x@0 .cse146)) (.cse88 (and .cse138 .cse89))) (let ((.cse87 (=> .cse145 .cse88)) (.cse151 (= .cse117 .cse153)) (.cse149 (and .cse171 .cse157))) (let ((.cse150 (=> .cse151 .cse149)) (.cse86 (=> .cse149 .cse87))) (let ((.cse85 (and .cse150 .cse86))) (let ((.cse84 (=> .cse176 .cse85))) (let ((.cse80 (=> .cse177 .cse84))) (let ((.cse82 (not .cse80))) (res .cse80 (let ((.cse81 (not .cse79))) (res .cse81 (res .cse82 (not+ .cse82) (let ((.cse83 (= .cse82 .cse81))) (res .cse83 (res (= .cse80 .cse79) (res (= .cse84 .cse78) (res (= .cse85 .cse77) (let ((.cse147 (= .cse149 .cse76)) (.cse104 (= 0 0)) (.cse115 (= .cse117 .cse117))) (let-proof ((.cse148 (let ((.cse160 (not false)) (.cse165 (<= 1000000 0))) (let ((.cse164 (not .cse165)) (.cse158 (= .cse160 true))) (let-proof ((.cse175 false-)) (let ((.cse161 (= .cse164 .cse160)) (.cse168 (< 0 1000000))) (let-proof ((.cse159 (res true .cse75 (res .cse160 (res false (not+ .cse160) .cse175) (=+2 .cse158)))) (.cse162 (let ((.cse174 (= .cse165 false))) (res .cse174 (res false (res .cse165 (=+1 .cse174) (farkas 1 .cse165)) .cse175) (cong (not .cse165) (not false))))) (.cse166 (not+ .cse164)) (.cse169 (total 1000000 0)) (.cse170 (not- .cse164))) (res (= .cse157 true) (res .cse158 .cse159 (res (= .cse157 .cse160) (res .cse161 .cse162 (let ((.cse163 (= .cse157 .cse164))) (res .cse163 (res .cse164 (res .cse157 (=+1 .cse163) (res .cse165 .cse166 (farkas 1 .cse157 1 .cse165))) (res .cse157 (let ((.cse167 (<= 2000000 1000000))) (res .cse167 (total 2000000 1000000) (res .cse165 (res .cse168 .cse169 (farkas 1 .cse167 1 .cse168)) .cse170))) (=+2 .cse163))) (trans .cse157 .cse164 .cse160)))) (trans .cse157 .cse160 true))) (res (= .cse171 true) (res .cse158 .cse159 (res (= .cse171 .cse160) (res .cse161 .cse162 (let ((.cse172 (= .cse171 .cse164))) (res .cse172 (let ((.cse173 (= .cse171 .cse168))) (res .cse173 (>def 1000000 0) (res .cse164 (res .cse171 (=+1 .cse172) (res .cse168 (=-2 .cse173) (res .cse165 .cse166 (farkas 1 .cse168 1 .cse165)))) (res .cse171 (res .cse168 (res .cse165 .cse169 (res .cse165 (res .cse168 .cse169 (farkas 1 .cse165 1 .cse168)) .cse170)) (=-1 .cse173)) (=+2 .cse172))))) (trans .cse171 .cse164 .cse160)))) (trans .cse171 .cse160 true))) (cong (and .cse171 .cse157) (and true true)))))))))) (.cse105 (refl 0)) (.cse116 (refl .cse117))) (res (= .cse86 .cse73) (res (= .cse87 .cse55) (res (= .cse88 .cse72) (let ((.cse136 (= .cse58 .cse58))) (let-proof ((.cse137 (refl .cse58))) (res (= .cse89 .cse54) (res (= .cse90 .cse6) (let ((.cse108 (= x@2 x@2))) (let-proof ((.cse109 (refl x@2))) (res (= .cse91 .cse53) (let ((.cse118 (= .cse44 .cse44))) (let-proof ((.cse119 (refl .cse44))) (res (= .cse92 .cse5) (res (= .cse93 .cse1) (res (= .cse94 .cse95) (let ((.cse97 (< x@2 (- 123456789)))) (let ((.cse96 (= .cse97 .cse95))) (res .cse96 (res .cse95 (res .cse97 (=+1 .cse96) (res .cse98 (not+ .cse95) (farkas 1 .cse97 1 .cse98))) (res .cse97 (let ((.cse99 (<= (- 123456789) x@2))) (res .cse99 (total (- 123456789) x@2) (res .cse98 (let ((.cse100 (< 0 .cse101))) (res .cse100 (total .cse101 0) (farkas 1 .cse99 1 .cse100))) (not- .cse95)))) (=+2 .cse96))) (res (= .cse94 .cse97) (res (= .cse102 (- 123456789)) (let ((.cse103 (* (- 1) 123456789))) (res (= .cse103 (- 123456789)) (poly* .cse103 (- 123456789)) (res .cse104 .cse105 (let ((.cse106 (+ 0 .cse103)) (.cse107 (+ 0 (- 123456789)))) (res (= .cse106 .cse107) (cong (+ 0 .cse103) (+ 0 (- 123456789))) (res (= .cse102 .cse106) (-def 0 123456789) (res (= .cse107 (- 123456789)) (poly+ .cse107 (- 123456789)) (trans .cse102 .cse106 .cse107 (- 123456789))))))))) (res .cse108 .cse109 (cong (< x@2 .cse102) (< x@2 (- 123456789))))) (trans .cse94 .cse97 .cse95))))) (res (= .cse110 .cse2) (res (= .cse111 (- 1)) (let ((.cse112 (* (- 1) 1))) (res (= .cse112 (- 1)) (poly* .cse112 (- 1)) (res .cse104 .cse105 (let ((.cse113 (+ 0 .cse112)) (.cse114 (+ 0 (- 1)))) (res (= .cse113 .cse114) (cong (+ 0 .cse112) (+ 0 (- 1))) (res (= .cse111 .cse113) (-def 0 1) (res (= .cse114 (- 1)) (poly+ .cse114 (- 1)) (trans .cse111 .cse113 .cse114 (- 1))))))))) (res .cse115 .cse116 (cong (= .cse117 .cse111) (= .cse117 (- 1))))) (cong (=> .cse110 .cse94) (=> .cse2 .cse95)))) (res .cse118 .cse119 (cong (=> .cse44 .cse93) (=> .cse44 .cse1)))) (res (= .cse120 .cse7) (res .cse118 .cse119 (res (= .cse121 .cse122) (res (= .cse123 (- 3)) (let ((.cse124 (* (- 1) 3))) (res (= .cse124 (- 3)) (poly* .cse124 (- 3)) (res .cse104 .cse105 (let ((.cse125 (+ 0 .cse124)) (.cse126 (+ 0 (- 3)))) (res (= .cse125 .cse126) (cong (+ 0 .cse124) (+ 0 (- 3))) (res (= .cse123 .cse125) (-def 0 3) (res (= .cse126 (- 3)) (poly+ .cse126 (- 3)) (trans .cse123 .cse125 .cse126 (- 3))))))))) (res .cse115 .cse116 (cong (= .cse117 .cse123) (= .cse117 (- 3))))) (cong (=> .cse121 .cse44) (=> .cse122 .cse44)))) (cong (and .cse120 .cse92) (and .cse7 .cse5)))))) (res (= .cse127 .cse10) (let ((.cse131 (= x@1 x@1))) (let-proof ((.cse132 (refl x@1))) (res (= .cse128 .cse12) (res (= .cse129 .cse15) (let ((.cse130 (* (- 1) 100))) (res (= .cse130 (- 100)) (poly* .cse130 (- 100)) (res .cse131 .cse132 (let ((.cse133 (+ x@1 .cse130))) (res (= .cse133 .cse15) (cong (+ x@1 .cse130) (+ x@1 (- 100))) (res (= .cse129 .cse133) (-def x@1 100) (trans .cse129 .cse133 .cse15))))))) (res .cse108 .cse109 (cong (= x@2 .cse129) (= x@2 .cse15)))) (res (= .cse134 .cse24) (res (= .cse135 1000000100100) (poly+ .cse135 1000000100100) (res .cse131 .cse132 (cong (= x@1 .cse135) (= x@1 1000000100100)))) (cong (and .cse134 .cse128) (and .cse24 .cse12)))))) (cong (=> .cse127 .cse91) (=> .cse10 .cse53)))))) (res .cse136 .cse137 (cong (=> .cse58 .cse90) (=> .cse58 .cse6)))) (res (= .cse138 .cse56) (res .cse136 .cse137 (res (= .cse139 .cse140) (res (= .cse141 (- 4)) (let ((.cse142 (* (- 1) 4))) (res (= .cse142 (- 4)) (poly* .cse142 (- 4)) (res .cse104 .cse105 (let ((.cse143 (+ 0 .cse142)) (.cse144 (+ 0 (- 4)))) (res (= .cse143 .cse144) (cong (+ 0 .cse142) (+ 0 (- 4))) (res (= .cse141 .cse143) (-def 0 4) (res (= .cse144 (- 4)) (poly+ .cse144 (- 4)) (trans .cse141 .cse143 .cse144 (- 4))))))))) (res .cse115 .cse116 (cong (= .cse117 .cse141) (= .cse117 (- 4))))) (cong (=> .cse139 .cse58) (=> .cse140 .cse58)))) (cong (and .cse138 .cse89) (and .cse56 .cse54)))))) (res (= .cse145 .cse58) (res (= .cse146 1000256) (poly+ .cse146 1000256) (res (= x@0 x@0) (refl x@0) (cong (= x@0 .cse146) (= x@0 1000256)))) (cong (=> .cse145 .cse88) (=> .cse58 .cse72)))) (res .cse147 .cse148 (cong (=> .cse149 .cse87) (=> .cse76 .cse55)))) (res (= .cse150 .cse74) (res .cse147 .cse148 (res (= .cse151 .cse152) (res (= .cse153 (- 5)) (let ((.cse154 (* (- 1) 5))) (res (= .cse154 (- 5)) (poly* .cse154 (- 5)) (res .cse104 .cse105 (let ((.cse155 (+ 0 .cse154)) (.cse156 (+ 0 (- 5)))) (res (= .cse155 .cse156) (cong (+ 0 .cse154) (+ 0 (- 5))) (res (= .cse153 .cse155) (-def 0 5) (res (= .cse156 (- 5)) (poly+ .cse156 (- 5)) (trans .cse153 .cse155 .cse156 (- 5))))))))) (res .cse115 .cse116 (cong (= .cse117 .cse153) (= .cse117 (- 5))))) (cong (=> .cse151 .cse149) (=> .cse152 .cse76)))) (cong (and .cse150 .cse86) (and .cse74 .cse73)))))) (res (= .cse176 .cse176) (refl .cse176) (cong (=> .cse176 .cse85) (=> .cse176 .cse77)))) (res (= .cse177 .cse177) (refl .cse177) (cong (=> .cse177 .cse84) (=> .cse177 .cse78)))) (cong (not .cse80) (not .cse79))) (=-2 .cse83)))) (not- .cse81))) (res .cse82 (assume .cse82) (not- .cse82))))))))))))))))))))))))) :proves (- .cse74 - .cse73) :input))))) :proves (- .cse73) :rup)))) :proves (- .cse55) :rup))) (res .cse55 (res .cse56 (! (let ((.cse68 (+ x@0 (- 1000256)))) (let ((.cse57 (= .cse68 0))) (let ((.cse59 (= .cse58 .cse57))) (let-proof ((.cse60 (res .cse57 (res .cse58 (=+1 .cse59) (let ((.cse65 (= 1000256 x@0))) (res .cse65 (symm 1000256 x@0) (let ((.cse66 (< .cse68 0))) (res .cse66 (let ((.cse67 (< 0 .cse68))) (res .cse67 (trichotomy .cse68 0) (farkas 1 .cse58 1 .cse67))) (farkas 1 .cse65 1 .cse66)))))) (res .cse58 (let ((.cse69 (= 0 .cse68))) (res .cse69 (symm 0 .cse68) (let ((.cse70 (< x@0 1000256))) (res .cse70 (let ((.cse71 (< 1000256 x@0))) (res .cse71 (trichotomy x@0 1000256) (farkas 1 .cse57 1 .cse71))) (farkas 1 .cse69 1 .cse70))))) (=+2 .cse59))))) (res .cse57 (! (res .cse55 (! (res .cse58 (=>+ 0 .cse55) (res .cse59 .cse60 (=-2 .cse59))) :proves (+ .cse55 + .cse57) :input) .cse61) :proves (+ .cse57) :rup) (! (res .cse58 (let ((.cse62 (not .cse57))) (res .cse62 (let ((.cse63 (not .cse58))) (res .cse63 (not+ .cse63) (let ((.cse64 (= .cse63 .cse62))) (res .cse64 (res .cse59 .cse60 (cong (not .cse58) (not .cse57))) (=-2 .cse64))))) (not- .cse62))) (=>+ 1 .cse56)) :proves (+ .cse56 - .cse57) :input)))))) :proves (+ .cse56) :rup) (! (res .cse72 (and+ .cse72) (=>+ 1 .cse55)) :proves (- .cse54 - .cse56 + .cse55) :input)) .cse61)))))) :proves (- .cse54) :rup)))) :proves (- .cse6) :rup))) (res .cse6 (res .cse7 (! (let ((.cse36 (+ x@2 (- 1000000100000)))) (let ((.cse39 (< 0 .cse36)) (.cse38 (< .cse36 0)) (.cse8 (= .cse36 0))) (let-proof ((.cse40 (trichotomy .cse36 0))) (res .cse8 (! (let ((.cse18 (+ x@2 (* (- 1) x@1) 100))) (let ((.cse9 (= .cse18 0)) (.cse19 (= 0 .cse18))) (let-proof ((.cse11 (! (res .cse6 (! (=>+ 0 .cse6) :proves (+ .cse6 + .cse10) :input) .cse43) :proves (+ .cse10) :rup)) (.cse20 (symm 0 .cse18))) (res .cse9 (! (res .cse10 .cse11 (! (res .cse12 (and- 1 .cse10) (let ((.cse13 (= .cse12 .cse9))) (res .cse13 (res .cse9 (res .cse12 (=+1 .cse13) (let ((.cse14 (= .cse15 x@2))) (res .cse14 (symm .cse15 x@2) (let ((.cse16 (< .cse18 0))) (res .cse16 (let ((.cse17 (< 0 .cse18))) (res .cse17 (trichotomy .cse18 0) (farkas 1 .cse12 1 .cse17))) (farkas 1 .cse14 1 .cse16)))))) (res .cse12 (res .cse19 .cse20 (let ((.cse21 (< x@2 .cse15))) (res .cse21 (let ((.cse22 (< .cse15 x@2))) (res .cse22 (trichotomy x@2 .cse15) (farkas 1 .cse9 1 .cse22))) (farkas 1 .cse19 1 .cse21)))) (=+2 .cse13))) (=-2 .cse13)))) :proves (- .cse10 + .cse9) :input)) :proves (+ .cse9) :rup) (let ((.cse29 (+ x@1 (- 1000000100100)))) (let ((.cse23 (= .cse29 0)) (.cse30 (= 0 .cse29))) (let-proof ((.cse31 (symm 0 .cse29))) (res .cse23 (! (res .cse10 .cse11 (! (res .cse24 (and- 0 .cse10) (let ((.cse25 (= .cse24 .cse23))) (res .cse25 (res .cse23 (res .cse24 (=+1 .cse25) (let ((.cse26 (= 1000000100100 x@1))) (res .cse26 (symm 1000000100100 x@1) (let ((.cse27 (< .cse29 0))) (res .cse27 (let ((.cse28 (< 0 .cse29))) (res .cse28 (trichotomy .cse29 0) (farkas 1 .cse24 1 .cse28))) (farkas 1 .cse26 1 .cse27)))))) (res .cse24 (res .cse30 .cse31 (let ((.cse32 (< x@1 1000000100100))) (res .cse32 (let ((.cse33 (< 1000000100100 x@1))) (res .cse33 (trichotomy x@1 1000000100100) (farkas 1 .cse23 1 .cse33))) (farkas 1 .cse30 1 .cse32)))) (=+2 .cse25))) (=-2 .cse25)))) :proves (- .cse10 + .cse23) :input)) :proves (+ .cse23) :rup) (let ((.cse34 (<= .cse36 0))) (res .cse34 (! (let ((.cse35 (<= 1 .cse36))) (res .cse35 (total-int .cse36 0) (farkas 1 .cse35 1 .cse23 1 .cse9))) :proves (+ .cse34 - .cse23 - .cse9) :LA ((- 1) 1 1)) (let ((.cse42 (+ x@2 (- 1000000099999)))) (let ((.cse37 (<= .cse42 0))) (res .cse37 (! (res .cse38 (res .cse39 .cse40 (farkas 1 .cse39 1 .cse34)) (let ((.cse41 (<= 1 .cse42))) (res .cse41 (total-int .cse42 0) (farkas 1 .cse41 1 .cse38)))) :proves (+ .cse37 + .cse8 - .cse34) :trichotomy) (! (res .cse19 .cse20 (res .cse30 .cse31 (farkas 1 .cse30 1 .cse19 1 .cse37))) :proves (- .cse23 - .cse9 - .cse37) :LA ((- 1) (- 1) 1))))))))))))))) :proves (+ .cse8) :rup) (! (res .cse44 (let ((.cse45 (not .cse8))) (res .cse45 (let ((.cse46 (not .cse44))) (res .cse46 (not+ .cse46) (let ((.cse47 (= .cse46 .cse45))) (res .cse47 (let ((.cse48 (= .cse44 .cse8))) (res .cse48 (res .cse8 (res .cse44 (=+1 .cse48) (let ((.cse49 (= 1000000100000 x@2))) (res .cse49 (symm 1000000100000 x@2) (res .cse38 (res .cse39 .cse40 (farkas 1 .cse44 1 .cse39)) (farkas 1 .cse49 1 .cse38))))) (res .cse44 (let ((.cse50 (= 0 .cse36))) (res .cse50 (symm 0 .cse36) (let ((.cse51 (< x@2 1000000100000))) (res .cse51 (let ((.cse52 (< 1000000100000 x@2))) (res .cse52 (trichotomy x@2 1000000100000) (farkas 1 .cse8 1 .cse52))) (farkas 1 .cse50 1 .cse51))))) (=+2 .cse48))) (cong (not .cse44) (not .cse8)))) (=-2 .cse47))))) (not- .cse45))) (=>+ 1 .cse7)) :proves (+ .cse7 - .cse8) :input))))) :proves (+ .cse7) :rup) (! (res .cse53 (and+ .cse53) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) .cse43)))))) :proves (- .cse5) :rup)))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse179 (not .cse2))) (res .cse2 (let ((.cse178 (not .cse0))) (res .cse178 (res .cse179 (not+ .cse179) (let ((.cse180 (= .cse179 .cse178))) (res .cse180 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse180)))) (not- .cse178))) (res .cse179 (assume .cse179) (not- .cse179)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
