success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse67 (ControlFlow 0 2))) (let ((.cse62 (= .cse67 (- 1))) (.cse57 (ControlFlow 0 3))) (let ((.cse46 (= .cse57 2)) (.cse3 (=> .cse62 true))) (let ((.cse2 (=> .cse46 .cse3)) (.cse52 (= .cse57 (- 4)))) (let ((.cse5 (=> .cse52 true)) (.cse1 (=> true .cse2)) (.cse69 (ControlFlow 0 7))) (let ((.cse58 (= .cse69 3)) (.cse7 (and .cse5 .cse1))) (let-proof ((.cse6 true+)) (let ((.cse0 (=> .cse58 .cse7))) (let-proof ((.cse4 (! (res true .cse6 (=>+ 1 .cse3)) :proves (+ .cse3) :input))) (res .cse0 (! (res .cse1 (! (res .cse2 (! (res .cse3 .cse4 (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse3) :input)) :proves (+ .cse2) :rup) (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (res .cse5 (! (res true .cse6 (=>+ 1 .cse5)) :proves (+ .cse5) :input) (! (res .cse7 (and+ .cse7) (=>+ 1 .cse0)) :proves (+ .cse0 - .cse5 - .cse1) :input))) :proves (+ .cse0) :rup) (let ((.cse40 (ControlFlow 0 5))) (let ((.cse26 (= .cse40 2))) (let ((.cse10 (=> .cse26 .cse3)) (.cse33 (= .cse40 (- 6)))) (let ((.cse11 (=> .cse33 true)) (.cse9 (=> true .cse10))) (let ((.cse41 (= .cse69 5)) (.cse12 (and .cse11 .cse9))) (let ((.cse8 (=> .cse41 .cse12))) (res .cse8 (! (res .cse9 (! (res .cse10 (! (res .cse3 .cse4 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse3) :input)) :proves (+ .cse10) :rup) (! (=>+ 1 .cse9) :proves (+ .cse9 - .cse10) :input)) :proves (+ .cse9) :rup) (res .cse11 (! (res true .cse6 (=>+ 1 .cse11)) :proves (+ .cse11) :input) (! (res .cse12 (and+ .cse12) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse11 - .cse9) :input))) :proves (+ .cse8) :rup) (! (let ((.cse13 (and .cse0 .cse8))) (res .cse13 (and+ .cse13) (let ((.cse68 (= (ControlFlow 0 0) 7))) (let ((.cse14 (=> .cse68 .cse13))) (res .cse14 (=>+ 1 .cse14) (let ((.cse63 (- 0 1))) (let ((.cse61 (= .cse67 .cse63)) (.cse60 (= 3 3))) (let ((.cse53 (- 0 4)) (.cse34 (- 0 6)) (.cse27 (=> .cse61 .cse60))) (let ((.cse23 (=> .cse26 .cse27)) (.cse32 (= .cse40 .cse34)) (.cse30 (= 2 2)) (.cse45 (=> .cse46 .cse27)) (.cse51 (= .cse57 .cse53)) (.cse49 (= 1 1))) (let ((.cse50 (=> .cse51 .cse49)) (.cse44 (=> .cse49 .cse45)) (.cse31 (=> .cse32 .cse30)) (.cse22 (=> .cse30 .cse23))) (let ((.cse21 (and .cse31 .cse22)) (.cse43 (and .cse50 .cse44))) (let ((.cse42 (=> .cse58 .cse43)) (.cse20 (=> .cse41 .cse21))) (let ((.cse19 (and .cse42 .cse20))) (let ((.cse15 (=> .cse68 .cse19))) (let ((.cse17 (not .cse15))) (res .cse15 (let ((.cse16 (not .cse14))) (res .cse16 (res .cse17 (not+ .cse17) (let ((.cse18 (= .cse17 .cse16))) (res .cse18 (res (= .cse15 .cse14) (res (= .cse19 .cse13) (let ((.cse36 (= 0 0))) (let-proof ((.cse37 (refl 0))) (let ((.cse24 (= .cse27 .cse3))) (let-proof ((.cse25 (let ((.cse59 (= .cse60 true))) (res .cse59 (res true .cse6 (res .cse60 (refl 3) (=+2 .cse59))) (res (= .cse61 .cse62) (res (= .cse63 (- 1)) (let ((.cse64 (* (- 1) 1))) (res (= .cse64 (- 1)) (poly* .cse64 (- 1)) (res .cse36 .cse37 (let ((.cse65 (+ 0 .cse64)) (.cse66 (+ 0 (- 1)))) (res (= .cse65 .cse66) (cong (+ 0 .cse64) (+ 0 (- 1))) (res (= .cse63 .cse65) (-def 0 1) (res (= .cse66 (- 1)) (poly+ .cse66 (- 1)) (trans .cse63 .cse65 .cse66 (- 1))))))))) (res (= .cse67 .cse67) (refl .cse67) (cong (= .cse67 .cse63) (= .cse67 (- 1))))) (cong (=> .cse61 .cse60) (=> .cse62 true))))))) (res (= .cse20 .cse8) (res (= .cse21 .cse12) (let ((.cse28 (= .cse30 true))) (let-proof ((.cse29 (res true .cse6 (res .cse30 (refl 2) (=+2 .cse28))))) (res (= .cse22 .cse9) (res (= .cse23 .cse10) (res .cse24 .cse25 (res (= .cse26 .cse26) (refl .cse26) (cong (=> .cse26 .cse27) (=> .cse26 .cse3)))) (res .cse28 .cse29 (cong (=> .cse30 .cse23) (=> true .cse10)))) (res (= .cse31 .cse11) (res .cse28 .cse29 (res (= .cse32 .cse33) (res (= .cse34 (- 6)) (let ((.cse35 (* (- 1) 6))) (res (= .cse35 (- 6)) (poly* .cse35 (- 6)) (res .cse36 .cse37 (let ((.cse38 (+ 0 .cse35)) (.cse39 (+ 0 (- 6)))) (res (= .cse38 .cse39) (cong (+ 0 .cse35) (+ 0 (- 6))) (res (= .cse34 .cse38) (-def 0 6) (res (= .cse39 (- 6)) (poly+ .cse39 (- 6)) (trans .cse34 .cse38 .cse39 (- 6))))))))) (res (= .cse40 .cse40) (refl .cse40) (cong (= .cse40 .cse34) (= .cse40 (- 6))))) (cong (=> .cse32 .cse30) (=> .cse33 true)))) (cong (and .cse31 .cse22) (and .cse11 .cse9)))))) (res (= .cse41 .cse41) (refl .cse41) (cong (=> .cse41 .cse21) (=> .cse41 .cse12)))) (res (= .cse42 .cse0) (res (= .cse43 .cse7) (let ((.cse47 (= .cse49 true))) (let-proof ((.cse48 (res true .cse6 (res .cse49 (refl 1) (=+2 .cse47))))) (res (= .cse44 .cse1) (res (= .cse45 .cse2) (res .cse24 .cse25 (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse27) (=> .cse46 .cse3)))) (res .cse47 .cse48 (cong (=> .cse49 .cse45) (=> true .cse2)))) (res (= .cse50 .cse5) (res .cse47 .cse48 (res (= .cse51 .cse52) (res (= .cse53 (- 4)) (let ((.cse54 (* (- 1) 4))) (res (= .cse54 (- 4)) (poly* .cse54 (- 4)) (res .cse36 .cse37 (let ((.cse55 (+ 0 .cse54)) (.cse56 (+ 0 (- 4)))) (res (= .cse55 .cse56) (cong (+ 0 .cse54) (+ 0 (- 4))) (res (= .cse53 .cse55) (-def 0 4) (res (= .cse56 (- 4)) (poly+ .cse56 (- 4)) (trans .cse53 .cse55 .cse56 (- 4))))))))) (res (= .cse57 .cse57) (refl .cse57) (cong (= .cse57 .cse53) (= .cse57 (- 4))))) (cong (=> .cse51 .cse49) (=> .cse52 true)))) (cong (and .cse50 .cse44) (and .cse5 .cse1)))))) (res (= .cse58 .cse58) (refl .cse58) (cong (=> .cse58 .cse43) (=> .cse58 .cse7)))) (cong (and .cse42 .cse20) (and .cse0 .cse8)))))))) (res (= .cse68 .cse68) (refl .cse68) (cong (=> .cse68 .cse19) (=> .cse68 .cse13)))) (cong (not .cse15) (not .cse14))) (=-2 .cse18)))) (not- .cse16))) (res .cse17 (assume .cse17) (not- .cse17)))))))))))))))))) :proves (- .cse0 - .cse8) :input)))))))))))))))))) :proves () :rup)
unsupported
