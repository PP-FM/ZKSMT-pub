success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_Call.bpl.mod.smt2:30:10: Logical context not inconsistent!")
unsat
(! (let ((.cse19 (ControlFlow 0 2))) (let ((.cse1 (= .cse19 (- 1))) (.cse0 (= (- 1) .cse19))) (let ((.cse23 (= .cse1 .cse0))) (let-proof ((.cse24 (res .cse0 (res .cse1 (=+1 .cse23) (symm (- 1) .cse19)) (res .cse1 (symm .cse19 (- 1)) (=+2 .cse23))))) (res .cse0 (! (res .cse1 (let ((.cse20 (= call0formal@barresult@0 null))) (let ((.cse2 (and .cse20 .cse1))) (res .cse2 (let ((.cse12 (= call0formal@barresult@0@@0 null))) (let ((.cse3 (=> .cse2 .cse12))) (res .cse3 (=>+ 0 .cse3) (let ((.cse21 (= (ControlFlow 0 3) 2))) (let ((.cse4 (=> .cse21 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse22 (= (ControlFlow 0 0) 3))) (let ((.cse5 (=> .cse22 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse15 (- 0 1))) (let ((.cse14 (= .cse19 .cse15))) (let ((.cse13 (and .cse20 .cse14))) (let ((.cse11 (=> .cse13 .cse12))) (let ((.cse10 (=> .cse21 .cse11))) (let ((.cse6 (=> .cse22 .cse10))) (let ((.cse8 (not .cse6))) (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res (= .cse6 .cse5) (res (= .cse10 .cse4) (res (= .cse11 .cse3) (res (= .cse12 .cse12) (refl .cse12) (res (= .cse13 .cse2) (res (= .cse14 .cse1) (res (= .cse15 (- 1)) (let ((.cse16 (* (- 1) 1))) (res (= .cse16 (- 1)) (poly* .cse16 (- 1)) (res (= 0 0) (refl 0) (let ((.cse17 (+ 0 .cse16)) (.cse18 (+ 0 (- 1)))) (res (= .cse17 .cse18) (cong (+ 0 .cse16) (+ 0 (- 1))) (res (= .cse15 .cse17) (-def 0 1) (res (= .cse18 (- 1)) (poly+ .cse18 (- 1)) (trans .cse15 .cse17 .cse18 (- 1))))))))) (res (= .cse19 .cse19) (refl .cse19) (cong (= .cse19 .cse15) (= .cse19 (- 1))))) (res (= .cse20 .cse20) (refl .cse20) (cong (and .cse20 .cse14) (and .cse20 .cse1)))) (cong (=> .cse13 .cse12) (=> .cse2 .cse12)))) (res (= .cse21 .cse21) (refl .cse21) (cong (=> .cse21 .cse11) (=> .cse21 .cse3)))) (res (= .cse22 .cse22) (refl .cse22) (cong (=> .cse22 .cse10) (=> .cse22 .cse4)))) (cong (not .cse6) (not .cse5))) (=-2 .cse9)))) (not- .cse7))) (res .cse8 (assume .cse8) (not- .cse8))))))))))))))))))) (and- 1 .cse2)))) (res .cse23 .cse24 (=-2 .cse23))) :proves (+ .cse0) :input) (! (let ((.cse26 (not .cse1))) (res .cse1 (let ((.cse25 (not .cse0))) (res .cse25 (res .cse26 (not+ .cse26) (let ((.cse27 (= .cse26 .cse25))) (res .cse27 (res .cse23 .cse24 (cong (not .cse1) (not .cse0))) (=-2 .cse27)))) (not- .cse25))) (res .cse26 (assume .cse26) (not- .cse26)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse33 (ControlFlow 0 2)) (.cse48 (+ y (* (- 1) x)))) (let ((.cse0 (<= .cse48 0)) (.cse24 (= .cse33 (- 1)))) (let ((.cse5 (=> .cse24 true)) (.cse39 (= .cse33 (- 3))) (.cse2 (not .cse0))) (let ((.cse1 (=> .cse39 .cse2)) (.cse4 (=> .cse2 .cse5)) (.cse45 (= (ControlFlow 0 4) 2))) (let ((.cse10 (and .cse2 .cse45)) (.cse7 (and .cse1 .cse4))) (let ((.cse8 (=> .cse10 .cse7))) (let-proof ((.cse6 true+) (.cse3 (not+ .cse2)) (.cse11 (not- .cse2))) (let-proof ((.cse9 (let ((.cse49 (= (ControlFlow 0 0) 4))) (let ((.cse12 (=> .cse49 .cse8))) (res .cse12 (=>+ 1 .cse12) (let ((.cse25 (- 0 1))) (let ((.cse40 (- 0 3)) (.cse23 (= .cse33 .cse25)) (.cse22 (= x x))) (let ((.cse20 (=> .cse23 .cse22)) (.cse38 (= .cse33 .cse40)) (.cse36 (< x y))) (let ((.cse37 (=> .cse38 .cse36)) (.cse19 (=> .cse36 .cse20))) (let ((.cse44 (and .cse36 .cse45)) (.cse18 (and .cse37 .cse19))) (let ((.cse17 (=> .cse44 .cse18))) (let ((.cse13 (=> .cse49 .cse17))) (let ((.cse15 (not .cse13))) (res .cse13 (let ((.cse14 (not .cse12))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res (= .cse13 .cse12) (res (= .cse17 .cse8) (let ((.cse34 (= .cse36 .cse2))) (let-proof ((.cse35 (res .cse2 (res .cse36 (=+1 .cse34) (res .cse0 .cse3 (farkas 1 .cse36 1 .cse0))) (res .cse36 (let ((.cse46 (<= y x))) (res .cse46 (total y x) (res .cse0 (let ((.cse47 (< 0 .cse48))) (res .cse47 (total .cse48 0) (farkas 1 .cse46 1 .cse47))) .cse11))) (=+2 .cse34))))) (res (= .cse18 .cse7) (let ((.cse27 (= 0 0)) (.cse31 (= .cse33 .cse33))) (let-proof ((.cse28 (refl 0)) (.cse32 (refl .cse33))) (res (= .cse19 .cse4) (res (= .cse20 .cse5) (let ((.cse21 (= .cse22 true))) (res .cse21 (res true .cse6 (res .cse22 (refl x) (=+2 .cse21))) (res (= .cse23 .cse24) (res (= .cse25 (- 1)) (let ((.cse26 (* (- 1) 1))) (res (= .cse26 (- 1)) (poly* .cse26 (- 1)) (res .cse27 .cse28 (let ((.cse29 (+ 0 .cse26)) (.cse30 (+ 0 (- 1)))) (res (= .cse29 .cse30) (cong (+ 0 .cse26) (+ 0 (- 1))) (res (= .cse25 .cse29) (-def 0 1) (res (= .cse30 (- 1)) (poly+ .cse30 (- 1)) (trans .cse25 .cse29 .cse30 (- 1))))))))) (res .cse31 .cse32 (cong (= .cse33 .cse25) (= .cse33 (- 1))))) (cong (=> .cse23 .cse22) (=> .cse24 true))))) (res .cse34 .cse35 (cong (=> .cse36 .cse20) (=> .cse2 .cse5)))) (res (= .cse37 .cse1) (res .cse34 .cse35 (res (= .cse38 .cse39) (res (= .cse40 (- 3)) (let ((.cse41 (* (- 1) 3))) (res (= .cse41 (- 3)) (poly* .cse41 (- 3)) (res .cse27 .cse28 (let ((.cse42 (+ 0 .cse41)) (.cse43 (+ 0 (- 3)))) (res (= .cse42 .cse43) (cong (+ 0 .cse41) (+ 0 (- 3))) (res (= .cse40 .cse42) (-def 0 3) (res (= .cse43 (- 3)) (poly+ .cse43 (- 3)) (trans .cse40 .cse42 .cse43 (- 3))))))))) (res .cse31 .cse32 (cong (= .cse33 .cse40) (= .cse33 (- 3))))) (cong (=> .cse38 .cse36) (=> .cse39 .cse2)))) (cong (and .cse37 .cse19) (and .cse1 .cse4)))))) (res (= .cse44 .cse10) (res (= .cse45 .cse45) (refl .cse45) (res .cse34 .cse35 (cong (and .cse36 .cse45) (and .cse2 .cse45)))) (cong (=> .cse44 .cse18) (=> .cse10 .cse7)))))) (res (= .cse49 .cse49) (refl .cse49) (cong (=> .cse49 .cse17) (=> .cse49 .cse8)))) (cong (not .cse13) (not .cse12))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (assume .cse15) (not- .cse15)))))))))))))))) (res .cse0 (res .cse1 (! (res .cse2 .cse3 (=>+ 1 .cse1)) :proves (+ .cse1 + .cse0) :input) (! (res .cse4 (! (res .cse5 (! (res true .cse6 (=>+ 1 .cse5)) :proves (+ .cse5) :input) (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse5) :input)) :proves (+ .cse4) :rup) (! (res .cse7 (and+ .cse7) (res .cse8 (=>+ 1 .cse8) .cse9)) :proves (- .cse1 - .cse4) :input)) :proves (- .cse1) :rup)) (! (res .cse10 (res .cse8 (=>+ 0 .cse8) .cse9) (res .cse2 (and- 0 .cse10) .cse11)) :proves (- .cse0) :input)))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse46 (ControlFlow 0 4))) (let ((.cse39 (= .cse46 (- 3))) (.cse4 (= w@0 y))) (let ((.cse0 (and .cse4 (= (ControlFlow 0 5) 4))) (.cse7 (=> .cse39 .cse4))) (let ((.cse1 (=> .cse0 .cse7))) (let-proof ((.cse2 (! (let ((.cse65 (ControlFlow 0 6))) (let ((.cse47 (= .cse65 5))) (let ((.cse18 (=> .cse47 .cse1))) (res .cse18 (! (=>+ 1 .cse18) :proves (+ .cse18 - .cse1) :input) (! (let ((.cse63 (+ x (* (- 1) y)))) (let ((.cse21 (<= .cse63 0)) (.cse58 (ControlFlow 0 2))) (let ((.cse53 (= .cse58 (- 1))) (.cse22 (not .cse21))) (let ((.cse60 (= .cse65 2)) (.cse20 (=> .cse53 .cse22))) (let ((.cse19 (=> .cse60 .cse20))) (let ((.cse27 (and .cse19 .cse18))) (let ((.cse24 (=> .cse22 .cse27))) (let-proof ((.cse23 (not+ .cse22)) (.cse25 (not- .cse22))) (let-proof ((.cse26 (let ((.cse64 (= (ControlFlow 0 0) 6))) (let ((.cse28 (=> .cse64 .cse24))) (res .cse28 (=>+ 1 .cse28) (let ((.cse40 (- 0 3))) (let ((.cse38 (= .cse46 .cse40)) (.cse54 (- 0 1))) (let ((.cse52 (= .cse58 .cse54)) (.cse59 (< y x)) (.cse37 (=> .cse38 .cse4))) (let ((.cse36 (=> .cse0 .cse37)) (.cse49 (=> .cse52 .cse59))) (let ((.cse48 (=> .cse60 .cse49)) (.cse35 (=> .cse47 .cse36))) (let ((.cse34 (and .cse48 .cse35))) (let ((.cse33 (=> .cse59 .cse34))) (let ((.cse29 (=> .cse64 .cse33))) (let ((.cse31 (not .cse29))) (res .cse29 (let ((.cse30 (not .cse28))) (res .cse30 (res .cse31 (not+ .cse31) (let ((.cse32 (= .cse31 .cse30))) (res .cse32 (res (= .cse29 .cse28) (res (= .cse33 .cse24) (let ((.cse50 (= .cse59 .cse22))) (let-proof ((.cse51 (res .cse22 (res .cse59 (=+1 .cse50) (res .cse21 .cse23 (farkas 1 .cse59 1 .cse21))) (res .cse59 (let ((.cse61 (<= x y))) (res .cse61 (total x y) (res .cse21 (let ((.cse62 (< 0 .cse63))) (res .cse62 (total .cse63 0) (farkas 1 .cse61 1 .cse62))) .cse25))) (=+2 .cse50))))) (res (= .cse34 .cse27) (let ((.cse42 (= 0 0))) (let-proof ((.cse43 (refl 0))) (res (= .cse35 .cse18) (res (= .cse36 .cse1) (res (= .cse37 .cse7) (res (= .cse4 .cse4) (refl .cse4) (res (= .cse38 .cse39) (res (= .cse40 (- 3)) (let ((.cse41 (* (- 1) 3))) (res (= .cse41 (- 3)) (poly* .cse41 (- 3)) (res .cse42 .cse43 (let ((.cse44 (+ 0 .cse41)) (.cse45 (+ 0 (- 3)))) (res (= .cse44 .cse45) (cong (+ 0 .cse41) (+ 0 (- 3))) (res (= .cse40 .cse44) (-def 0 3) (res (= .cse45 (- 3)) (poly+ .cse45 (- 3)) (trans .cse40 .cse44 .cse45 (- 3))))))))) (res (= .cse46 .cse46) (refl .cse46) (cong (= .cse46 .cse40) (= .cse46 (- 3))))) (cong (=> .cse38 .cse4) (=> .cse39 .cse4)))) (res (= .cse0 .cse0) (refl .cse0) (cong (=> .cse0 .cse37) (=> .cse0 .cse7)))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse36) (=> .cse47 .cse1)))) (res (= .cse48 .cse19) (res (= .cse49 .cse20) (res .cse50 .cse51 (res (= .cse52 .cse53) (res (= .cse54 (- 1)) (let ((.cse55 (* (- 1) 1))) (res (= .cse55 (- 1)) (poly* .cse55 (- 1)) (res .cse42 .cse43 (let ((.cse56 (+ 0 .cse55)) (.cse57 (+ 0 (- 1)))) (res (= .cse56 .cse57) (cong (+ 0 .cse55) (+ 0 (- 1))) (res (= .cse54 .cse56) (-def 0 1) (res (= .cse57 (- 1)) (poly+ .cse57 (- 1)) (trans .cse54 .cse56 .cse57 (- 1))))))))) (res (= .cse58 .cse58) (refl .cse58) (cong (= .cse58 .cse54) (= .cse58 (- 1))))) (cong (=> .cse52 .cse59) (=> .cse53 .cse22)))) (res (= .cse60 .cse60) (refl .cse60) (cong (=> .cse60 .cse49) (=> .cse60 .cse20)))) (cong (and .cse48 .cse35) (and .cse19 .cse18)))))) (res .cse50 .cse51 (cong (=> .cse59 .cse34) (=> .cse22 .cse27)))))) (res (= .cse64 .cse64) (refl .cse64) (cong (=> .cse64 .cse33) (=> .cse64 .cse24)))) (cong (not .cse29) (not .cse28))) (=-2 .cse32)))) (not- .cse30))) (res .cse31 (assume .cse31) (not- .cse31))))))))))))))))) (res .cse19 (! (res .cse20 (! (res .cse21 (! (res .cse22 .cse23 (=>+ 1 .cse20)) :proves (+ .cse20 + .cse21) :input) (! (res .cse24 (res .cse22 (=>+ 0 .cse24) .cse25) .cse26) :proves (- .cse21) :input)) :proves (+ .cse20) :rup) (! (=>+ 1 .cse19) :proves (+ .cse19 - .cse20) :input)) :proves (+ .cse19) :rup) (! (res .cse27 (and+ .cse27) (res .cse24 (=>+ 1 .cse24) .cse26)) :proves (- .cse19 - .cse18) :input))))))))))) :proves (- .cse18) :rup))))) :proves (- .cse1) :rup))) (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (let ((.cse14 (+ y (* (- 1) w@0)))) (let ((.cse3 (= .cse14 0))) (let ((.cse5 (= .cse4 .cse3))) (let-proof ((.cse6 (res .cse3 (res .cse4 (=+1 .cse5) (let ((.cse11 (= y w@0))) (res .cse11 (symm y w@0) (let ((.cse12 (< .cse14 0))) (res .cse12 (let ((.cse13 (< 0 .cse14))) (res .cse13 (trichotomy .cse14 0) (farkas 1 .cse11 1 .cse13))) (farkas 1 .cse4 1 .cse12)))))) (res .cse4 (let ((.cse15 (= 0 .cse14))) (res .cse15 (symm 0 .cse14) (let ((.cse16 (< w@0 y))) (res .cse16 (let ((.cse17 (< y w@0))) (res .cse17 (trichotomy w@0 y) (farkas 1 .cse15 1 .cse17))) (farkas 1 .cse3 1 .cse16))))) (=+2 .cse5))))) (res .cse3 (! (res .cse4 (and- 0 .cse0) (res .cse5 .cse6 (=-2 .cse5))) :proves (- .cse0 + .cse3) :input) (! (res .cse7 (! (res .cse4 (let ((.cse8 (not .cse3))) (res .cse8 (let ((.cse9 (not .cse4))) (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res .cse5 .cse6 (cong (not .cse4) (not .cse3))) (=-2 .cse10))))) (not- .cse8))) (=>+ 1 .cse7)) :proves (+ .cse7 - .cse3) :input) (! (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse7) :input) .cse2) :proves (- .cse7) :rup)) :proves (- .cse3) :rup)))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_Call.bpl.mod.smt2:138:10: Logical context not inconsistent!")
unsat
(! (let ((.cse31 (ControlFlow 0 2))) (let ((.cse2 (= .cse31 (- 3))) (.cse0 (= (- 3) .cse31))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 3) .cse31)) (res .cse2 (symm .cse31 (- 3)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse45 (+ y (* (- 1) x)))) (let ((.cse42 (<= .cse45 0))) (let ((.cse35 (not .cse42))) (let ((.cse1 (=> .cse2 .cse35))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse22 (= .cse31 (- 1)))) (let ((.cse6 (=> .cse22 true))) (let ((.cse5 (=> .cse35 .cse6))) (let-proof ((.cse7 true+)) (res .cse5 (! (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (! (let ((.cse8 (and .cse1 .cse5))) (res .cse8 (and+ .cse8) (let ((.cse55 (+ x (* (- 1) y)))) (let ((.cse52 (<= .cse55 0))) (let ((.cse50 (not .cse52)) (.cse48 (= (ControlFlow 0 4) 2))) (let ((.cse47 (and .cse50 .cse48))) (let ((.cse9 (=> .cse47 .cse8))) (res .cse9 (=>+ 1 .cse9) (let ((.cse56 (= (ControlFlow 0 0) 4))) (let ((.cse10 (=> .cse56 .cse9))) (res .cse10 (=>+ 1 .cse10) (let ((.cse23 (- 0 1))) (let ((.cse38 (- 0 3)) (.cse21 (= .cse31 .cse23)) (.cse20 (= y y))) (let ((.cse18 (=> .cse21 .cse20)) (.cse37 (= .cse31 .cse38)) (.cse34 (< x y))) (let ((.cse36 (=> .cse37 .cse34)) (.cse17 (=> .cse34 .cse18)) (.cse51 (< y x))) (let ((.cse46 (and .cse51 .cse48)) (.cse16 (and .cse36 .cse17))) (let ((.cse15 (=> .cse46 .cse16))) (let ((.cse11 (=> .cse56 .cse15))) (let ((.cse13 (not .cse11))) (res .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res (= .cse11 .cse10) (res (= .cse15 .cse9) (res (= .cse16 .cse8) (let ((.cse32 (= .cse34 .cse35))) (let ((.cse25 (= 0 0)) (.cse29 (= .cse31 .cse31))) (let-proof ((.cse33 (res .cse35 (res .cse34 (=+1 .cse32) (res .cse42 (not+ .cse35) (farkas 1 .cse34 1 .cse42))) (res .cse34 (let ((.cse43 (<= y x))) (res .cse43 (total y x) (res .cse42 (let ((.cse44 (< 0 .cse45))) (res .cse44 (total .cse45 0) (farkas 1 .cse43 1 .cse44))) (not- .cse35)))) (=+2 .cse32)))) (.cse26 (refl 0)) (.cse30 (refl .cse31))) (res (= .cse17 .cse5) (res (= .cse18 .cse6) (let ((.cse19 (= .cse20 true))) (res .cse19 (res true .cse7 (res .cse20 (refl y) (=+2 .cse19))) (res (= .cse21 .cse22) (res (= .cse23 (- 1)) (let ((.cse24 (* (- 1) 1))) (res (= .cse24 (- 1)) (poly* .cse24 (- 1)) (res .cse25 .cse26 (let ((.cse27 (+ 0 .cse24)) (.cse28 (+ 0 (- 1)))) (res (= .cse27 .cse28) (cong (+ 0 .cse24) (+ 0 (- 1))) (res (= .cse23 .cse27) (-def 0 1) (res (= .cse28 (- 1)) (poly+ .cse28 (- 1)) (trans .cse23 .cse27 .cse28 (- 1))))))))) (res .cse29 .cse30 (cong (= .cse31 .cse23) (= .cse31 (- 1))))) (cong (=> .cse21 .cse20) (=> .cse22 true))))) (res .cse32 .cse33 (cong (=> .cse34 .cse18) (=> .cse35 .cse6)))) (res (= .cse36 .cse1) (res .cse32 .cse33 (res (= .cse37 .cse2) (res (= .cse38 (- 3)) (let ((.cse39 (* (- 1) 3))) (res (= .cse39 (- 3)) (poly* .cse39 (- 3)) (res .cse25 .cse26 (let ((.cse40 (+ 0 .cse39)) (.cse41 (+ 0 (- 3)))) (res (= .cse40 .cse41) (cong (+ 0 .cse39) (+ 0 (- 3))) (res (= .cse38 .cse40) (-def 0 3) (res (= .cse41 (- 3)) (poly+ .cse41 (- 3)) (trans .cse38 .cse40 .cse41 (- 3))))))))) (res .cse29 .cse30 (cong (= .cse31 .cse38) (= .cse31 (- 3))))) (cong (=> .cse37 .cse34) (=> .cse2 .cse35)))) (cong (and .cse36 .cse17) (and .cse1 .cse5))))))) (res (= .cse46 .cse47) (res (= .cse48 .cse48) (refl .cse48) (let ((.cse49 (= .cse51 .cse50))) (res .cse49 (res .cse50 (res .cse51 (=+1 .cse49) (res .cse52 (not+ .cse50) (farkas 1 .cse51 1 .cse52))) (res .cse51 (let ((.cse53 (<= x y))) (res .cse53 (total x y) (res .cse52 (let ((.cse54 (< 0 .cse55))) (res .cse54 (total .cse55 0) (farkas 1 .cse53 1 .cse54))) (not- .cse50)))) (=+2 .cse49))) (cong (and .cse51 .cse48) (and .cse50 .cse48))))) (cong (=> .cse46 .cse16) (=> .cse47 .cse8)))) (res (= .cse56 .cse56) (refl .cse56) (cong (=> .cse56 .cse15) (=> .cse56 .cse9)))) (cong (not .cse11) (not .cse10))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13)))))))))))))))))))))) :proves (- .cse1 - .cse5) :input)))))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse58 (not .cse2))) (res .cse2 (let ((.cse57 (not .cse0))) (res .cse57 (res .cse58 (not+ .cse58) (let ((.cse59 (= .cse58 .cse57))) (res .cse59 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse59)))) (not- .cse57))) (res .cse58 (assume .cse58) (not- .cse58)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_Call.bpl.mod.smt2:175:10: Logical context not inconsistent!")
unsat
(! (let ((.cse17 (ControlFlow 0 2))) (let ((.cse1 (= .cse17 (- 1))) (.cse0 (= (- 1) .cse17))) (let ((.cse29 (= .cse1 .cse0))) (let-proof ((.cse30 (res .cse0 (res .cse1 (=+1 .cse29) (symm (- 1) .cse17)) (res .cse1 (symm .cse17 (- 1)) (=+2 .cse29))))) (res .cse0 (! (res .cse1 (let ((.cse11 (= x y))) (let ((.cse2 (=> .cse1 .cse11))) (res .cse2 (=>+ 0 .cse2) (let ((.cse27 (+ x (* (- 1) y)))) (let ((.cse24 (<= .cse27 0))) (let ((.cse22 (not .cse24)) (.cse20 (= (ControlFlow 0 3) 2))) (let ((.cse19 (and .cse22 .cse20))) (let ((.cse3 (=> .cse19 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse28 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse28 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse13 (- 0 1))) (let ((.cse12 (= .cse17 .cse13)) (.cse23 (< y x))) (let ((.cse18 (and .cse23 .cse20)) (.cse10 (=> .cse12 .cse11))) (let ((.cse9 (=> .cse18 .cse10))) (let ((.cse5 (=> .cse28 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (res (= .cse11 .cse11) (refl .cse11) (res (= .cse12 .cse1) (res (= .cse13 (- 1)) (let ((.cse14 (* (- 1) 1))) (res (= .cse14 (- 1)) (poly* .cse14 (- 1)) (res (= 0 0) (refl 0) (let ((.cse15 (+ 0 .cse14)) (.cse16 (+ 0 (- 1)))) (res (= .cse15 .cse16) (cong (+ 0 .cse14) (+ 0 (- 1))) (res (= .cse13 .cse15) (-def 0 1) (res (= .cse16 (- 1)) (poly+ .cse16 (- 1)) (trans .cse13 .cse15 .cse16 (- 1))))))))) (res (= .cse17 .cse17) (refl .cse17) (cong (= .cse17 .cse13) (= .cse17 (- 1))))) (cong (=> .cse12 .cse11) (=> .cse1 .cse11)))) (res (= .cse18 .cse19) (res (= .cse20 .cse20) (refl .cse20) (let ((.cse21 (= .cse23 .cse22))) (res .cse21 (res .cse22 (res .cse23 (=+1 .cse21) (res .cse24 (not+ .cse22) (farkas 1 .cse23 1 .cse24))) (res .cse23 (let ((.cse25 (<= x y))) (res .cse25 (total x y) (res .cse24 (let ((.cse26 (< 0 .cse27))) (res .cse26 (total .cse27 0) (farkas 1 .cse25 1 .cse26))) (not- .cse22)))) (=+2 .cse21))) (cong (and .cse23 .cse20) (and .cse22 .cse20))))) (cong (=> .cse18 .cse10) (=> .cse19 .cse2)))) (res (= .cse28 .cse28) (refl .cse28) (cong (=> .cse28 .cse9) (=> .cse28 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7))))))))))))))))))))) (res .cse29 .cse30 (=-2 .cse29))) :proves (+ .cse0) :input) (! (let ((.cse32 (not .cse1))) (res .cse1 (let ((.cse31 (not .cse0))) (res .cse31 (res .cse32 (not+ .cse32) (let ((.cse33 (= .cse32 .cse31))) (res .cse33 (res .cse29 .cse30 (cong (not .cse1) (not .cse0))) (=-2 .cse33)))) (not- .cse31))) (res .cse32 (assume .cse32) (not- .cse32)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
