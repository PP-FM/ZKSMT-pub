success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_lock_LockIncorrect.bpl.mod.smt2:36:10: Logical context not inconsistent!")
unsat
(! (let ((.cse95 (ControlFlow 0 3))) (let ((.cse8 (= x@2 x@0)) (.cse90 (= .cse95 (- 2)))) (let ((.cse0 (and .cse8 .cse90)) (.cse27 (= held@2 1)) (.cse86 (ControlFlow 0 4))) (let ((.cse73 (= .cse86 3)) (.cse1 (=> .cse0 .cse27))) (let ((.cse3 (=> (= .cse86 1) true)) (.cse2 (=> .cse73 .cse1)) (.cse12 (= x@2 x@1))) (let ((.cse13 (and (= held@2 0) .cse12)) (.cse6 (and .cse3 .cse2)) (.cse15 (+ x@0 1))) (let ((.cse9 (= x@1 .cse15)) (.cse5 (=> .cse13 .cse6))) (let ((.cse10 (=> .cse9 .cse5))) (let-proof ((.cse4 true+)) (let-proof ((.cse11 (! (let ((.cse16 (=> true .cse10))) (res .cse16 (! (=>+ 1 .cse16) :proves (+ .cse16 - .cse10) :input) (! (let ((.cse79 (= .cse86 (- 5)))) (let ((.cse17 (=> .cse79 true))) (res .cse17 (! (res true .cse4 (=>+ 1 .cse17)) :proves (+ .cse17) :input) (let ((.cse43 (ControlFlow 0 7))) (let ((.cse87 (= .cse43 4)) (.cse19 (and .cse17 .cse16))) (let ((.cse18 (=> .cse87 .cse19))) (res .cse18 (! (res .cse19 (and+ .cse19) (=>+ 1 .cse18)) :proves (+ .cse18 - .cse16 - .cse17) :input) (! (let ((.cse108 (ControlFlow 0 6))) (let ((.cse63 (= .cse108 3))) (let ((.cse23 (=> (= .cse108 1) true)) (.cse24 (=> .cse63 .cse1))) (let ((.cse25 (and .cse27 .cse8)) (.cse33 (and .cse23 .cse24))) (let ((.cse65 (= .cse43 6)) (.cse22 (=> .cse25 .cse33))) (let ((.cse21 (=> .cse65 .cse22))) (let ((.cse98 (= held@1 0)) (.cse34 (and .cse18 .cse21))) (let ((.cse20 (=> .cse98 .cse34))) (res .cse20 (res .cse21 (! (res .cse22 (! (res .cse23 (! (res true .cse4 (=>+ 1 .cse23)) :proves (+ .cse23) :input) (res .cse24 (res .cse25 (! (=>+ 0 .cse22) :proves (+ .cse22 + .cse25) :input) (res .cse1 (let ((.cse26 (= 1 held@2))) (let ((.cse28 (= .cse27 .cse26))) (let-proof ((.cse29 (res .cse26 (res .cse27 (=+1 .cse28) (symm 1 held@2)) (res .cse27 (symm held@2 1) (=+2 .cse28))))) (res .cse26 (! (res .cse27 (and- 0 .cse25) (res .cse28 .cse29 (=-2 .cse28))) :proves (- .cse25 + .cse26) :input) (! (res .cse27 (let ((.cse30 (not .cse26))) (res .cse30 (let ((.cse31 (not .cse27))) (res .cse31 (not+ .cse31) (let ((.cse32 (= .cse31 .cse30))) (res .cse32 (res .cse28 .cse29 (cong (not .cse27) (not .cse26))) (=-2 .cse32))))) (not- .cse30))) (=>+ 1 .cse1)) :proves (+ .cse1 - .cse26) :input))))) (! (=>+ 1 .cse24) :proves (+ .cse24 - .cse1) :input))) (! (res .cse33 (and+ .cse33) (=>+ 1 .cse22)) :proves (+ .cse22 - .cse24 - .cse23) :input))) :proves (+ .cse22) :rup) (! (=>+ 1 .cse21) :proves (+ .cse21 - .cse22) :input)) :proves (+ .cse21) :rup) (! (res .cse34 (and+ .cse34) (=>+ 1 .cse20)) :proves (- .cse21 - .cse18 + .cse20) :input)) (! (let ((.cse37 (= .cse43 (- 8)))) (let ((.cse35 (=> .cse37 .cse98))) (res .cse35 (! (let ((.cse36 (= (- 8) .cse43))) (let ((.cse38 (= .cse37 .cse36))) (let-proof ((.cse39 (res .cse36 (res .cse37 (=+1 .cse38) (symm (- 8) .cse43)) (res .cse37 (symm .cse43 (- 8)) (=+2 .cse38))))) (res .cse36 (! (res .cse37 (=>+ 0 .cse35) (res .cse38 .cse39 (=-2 .cse38))) :proves (+ .cse35 + .cse36) :input) (! (let ((.cse41 (not .cse37))) (res .cse37 (let ((.cse40 (not .cse36))) (res .cse40 (res .cse41 (not+ .cse41) (let ((.cse42 (= .cse41 .cse40))) (res .cse42 (res .cse38 .cse39 (cong (not .cse37) (not .cse36))) (=-2 .cse42)))) (not- .cse40))) (res .cse41 (assume .cse41) (not- .cse41)))) :proves (- .cse36) :input))))) :proves (+ .cse35) :rup) (! (let ((.cse44 (and .cse35 .cse20))) (res .cse44 (and+ .cse44) (let ((.cse105 (= held@1 (+ held@0 6)))) (let ((.cse45 (=> .cse105 .cse44))) (res .cse45 (=>+ 1 .cse45) (let ((.cse106 (= (ControlFlow 0 9) 7))) (let ((.cse46 (=> .cse106 .cse45))) (res .cse46 (=>+ 1 .cse46) (let ((.cse107 (= (ControlFlow 0 0) 9))) (let ((.cse47 (=> .cse107 .cse46))) (res .cse47 (=>+ 1 .cse47) (let ((.cse91 (- 0 2))) (let ((.cse89 (= .cse95 .cse91))) (let ((.cse88 (and .cse8 .cse89))) (let ((.cse64 (=> .cse88 .cse27))) (let ((.cse72 (=> .cse73 .cse64))) (let ((.cse71 (and .cse3 .cse72))) (let ((.cse80 (- 0 5)) (.cse70 (=> .cse13 .cse71))) (let ((.cse60 (=> .cse63 .cse64)) (.cse69 (=> .cse9 .cse70)) (.cse78 (= .cse86 .cse80)) (.cse76 (= 1 1))) (let ((.cse77 (=> .cse78 .cse76)) (.cse68 (=> .cse76 .cse69)) (.cse59 (and .cse23 .cse60))) (let ((.cse58 (=> .cse25 .cse59)) (.cse67 (and .cse77 .cse68))) (let ((.cse101 (- 0 8)) (.cse66 (=> .cse87 .cse67)) (.cse57 (=> .cse65 .cse58))) (let ((.cse56 (and .cse66 .cse57)) (.cse100 (= .cse43 .cse101))) (let ((.cse99 (=> .cse100 .cse98)) (.cse55 (=> .cse98 .cse56))) (let ((.cse54 (and .cse99 .cse55))) (let ((.cse53 (=> .cse105 .cse54))) (let ((.cse52 (=> .cse106 .cse53))) (let ((.cse48 (=> .cse107 .cse52))) (let ((.cse50 (not .cse48))) (res .cse48 (let ((.cse49 (not .cse47))) (res .cse49 (res .cse50 (not+ .cse50) (let ((.cse51 (= .cse50 .cse49))) (res .cse51 (res (= .cse48 .cse47) (res (= .cse52 .cse46) (res (= .cse53 .cse45) (res (= .cse54 .cse44) (let ((.cse96 (= .cse98 .cse98)) (.cse82 (= 0 0))) (let-proof ((.cse97 (refl .cse98)) (.cse83 (refl 0))) (res (= .cse55 .cse20) (res (= .cse56 .cse34) (let ((.cse61 (= .cse64 .cse1))) (let-proof ((.cse62 (res (= .cse27 .cse27) (refl .cse27) (res (= .cse88 .cse0) (res (= .cse89 .cse90) (res (= .cse91 (- 2)) (let ((.cse92 (* (- 1) 2))) (res (= .cse92 (- 2)) (poly* .cse92 (- 2)) (res .cse82 .cse83 (let ((.cse93 (+ 0 .cse92)) (.cse94 (+ 0 (- 2)))) (res (= .cse93 .cse94) (cong (+ 0 .cse92) (+ 0 (- 2))) (res (= .cse91 .cse93) (-def 0 2) (res (= .cse94 (- 2)) (poly+ .cse94 (- 2)) (trans .cse91 .cse93 .cse94 (- 2))))))))) (res (= .cse95 .cse95) (refl .cse95) (cong (= .cse95 .cse91) (= .cse95 (- 2))))) (res (= .cse8 .cse8) (refl .cse8) (cong (and .cse8 .cse89) (and .cse8 .cse90)))) (cong (=> .cse88 .cse27) (=> .cse0 .cse27)))))) (res (= .cse57 .cse21) (res (= .cse58 .cse22) (res (= .cse59 .cse33) (res (= .cse60 .cse24) (res .cse61 .cse62 (res (= .cse63 .cse63) (refl .cse63) (cong (=> .cse63 .cse64) (=> .cse63 .cse1)))) (res (= .cse23 .cse23) (refl .cse23) (cong (and .cse23 .cse60) (and .cse23 .cse24)))) (res (= .cse25 .cse25) (refl .cse25) (cong (=> .cse25 .cse59) (=> .cse25 .cse33)))) (res (= .cse65 .cse65) (refl .cse65) (cong (=> .cse65 .cse58) (=> .cse65 .cse22)))) (res (= .cse66 .cse18) (res (= .cse67 .cse19) (let ((.cse74 (= .cse76 true))) (let-proof ((.cse75 (res true .cse4 (res .cse76 (refl 1) (=+2 .cse74))))) (res (= .cse68 .cse16) (res (= .cse69 .cse10) (res (= .cse70 .cse5) (res (= .cse71 .cse6) (res (= .cse72 .cse2) (res .cse61 .cse62 (res (= .cse73 .cse73) (refl .cse73) (cong (=> .cse73 .cse64) (=> .cse73 .cse1)))) (res (= .cse3 .cse3) (refl .cse3) (cong (and .cse3 .cse72) (and .cse3 .cse2)))) (res (= .cse13 .cse13) (refl .cse13) (cong (=> .cse13 .cse71) (=> .cse13 .cse6)))) (res (= .cse9 .cse9) (refl .cse9) (cong (=> .cse9 .cse70) (=> .cse9 .cse5)))) (res .cse74 .cse75 (cong (=> .cse76 .cse69) (=> true .cse10)))) (res (= .cse77 .cse17) (res .cse74 .cse75 (res (= .cse78 .cse79) (res (= .cse80 (- 5)) (let ((.cse81 (* (- 1) 5))) (res (= .cse81 (- 5)) (poly* .cse81 (- 5)) (res .cse82 .cse83 (let ((.cse84 (+ 0 .cse81)) (.cse85 (+ 0 (- 5)))) (res (= .cse84 .cse85) (cong (+ 0 .cse81) (+ 0 (- 5))) (res (= .cse80 .cse84) (-def 0 5) (res (= .cse85 (- 5)) (poly+ .cse85 (- 5)) (trans .cse80 .cse84 .cse85 (- 5))))))))) (res (= .cse86 .cse86) (refl .cse86) (cong (= .cse86 .cse80) (= .cse86 (- 5))))) (cong (=> .cse78 .cse76) (=> .cse79 true)))) (cong (and .cse77 .cse68) (and .cse17 .cse16)))))) (res (= .cse87 .cse87) (refl .cse87) (cong (=> .cse87 .cse67) (=> .cse87 .cse19)))) (cong (and .cse66 .cse57) (and .cse18 .cse21)))))) (res .cse96 .cse97 (cong (=> .cse98 .cse56) (=> .cse98 .cse34)))) (res (= .cse99 .cse35) (res .cse96 .cse97 (res (= .cse100 .cse37) (res (= .cse101 (- 8)) (let ((.cse102 (* (- 1) 8))) (res (= .cse102 (- 8)) (poly* .cse102 (- 8)) (res .cse82 .cse83 (let ((.cse103 (+ 0 .cse102)) (.cse104 (+ 0 (- 8)))) (res (= .cse103 .cse104) (cong (+ 0 .cse102) (+ 0 (- 8))) (res (= .cse101 .cse103) (-def 0 8) (res (= .cse104 (- 8)) (poly+ .cse104 (- 8)) (trans .cse101 .cse103 .cse104 (- 8))))))))) (res (= .cse43 .cse43) (refl .cse43) (cong (= .cse43 .cse101) (= .cse43 (- 8))))) (cong (=> .cse100 .cse98) (=> .cse37 .cse98)))) (cong (and .cse99 .cse55) (and .cse35 .cse20)))))) (res (= .cse105 .cse105) (refl .cse105) (cong (=> .cse105 .cse54) (=> .cse105 .cse44)))) (res (= .cse106 .cse106) (refl .cse106) (cong (=> .cse106 .cse53) (=> .cse106 .cse45)))) (res (= .cse107 .cse107) (refl .cse107) (cong (=> .cse107 .cse52) (=> .cse107 .cse46)))) (cong (not .cse48) (not .cse47))) (=-2 .cse51)))) (not- .cse49))) (res .cse50 (assume .cse50) (not- .cse50)))))))))))))))))))))))))))))))) :proves (- .cse35 - .cse20) :input)))) :proves (- .cse20) :rup)))))))))) :proves (- .cse18) :rup)))))))) :proves (- .cse16) :rup))) :proves (- .cse10) :rup))) (let-proof ((.cse7 (! (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse5) :input) .cse11) :proves (- .cse5) :rup))) (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) (! (res .cse2 (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse1) :input) (! (res .cse3 (! (res true .cse4 (=>+ 1 .cse3)) :proves (+ .cse3) :input) (res .cse5 (! (res .cse6 (and+ .cse6) (=>+ 1 .cse5)) :proves (+ .cse5 - .cse2 - .cse3) :input) .cse7)) :proves (- .cse2) :rup)) :proves (- .cse1) :rup)) :proves (+ .cse0) :rup) (res .cse8 (! (and- 0 .cse0) :proves (- .cse0 + .cse8) :input) (! (res .cse9 (! (res .cse10 (! (=>+ 0 .cse10) :proves (+ .cse10 + .cse9) :input) .cse11) :proves (+ .cse9) :rup) (res .cse12 (! (res .cse13 (! (res .cse5 (! (=>+ 0 .cse5) :proves (+ .cse5 + .cse13) :input) .cse7) :proves (+ .cse13) :rup) (! (and- 1 .cse13) :proves (- .cse13 + .cse12) :input)) :proves (+ .cse12) :rup) (let ((.cse14 (= .cse15 x@0))) (res .cse14 (! (res (= x@1 x@2) (symm x@1 x@2) (res (= .cse15 x@1) (symm .cse15 x@1) (trans .cse15 x@1 x@2 x@0))) :proves (+ .cse14 - .cse9 - .cse12 - .cse8) :trans (.cse15 x@1 x@2 x@0)) (! (farkas 1 .cse14) :proves (- .cse14) :EQ))))) :proves (- .cse8) :rup)))))))))))))) :proves () :rup)
unsupported
