success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots26.v0.bpl.mod.smt2:28:10: Logical context not inconsistent!")
unsat
(! (let ((.cse36 (ControlFlow 0 2))) (let ((.cse2 (= .cse36 (- 1))) (.cse0 (= (- 1) .cse36))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse36)) (res .cse2 (symm .cse36 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse5 (=> true .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse41 (= .cse36 (- 3)))) (let ((.cse6 (=> .cse41 true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (let ((.cse48 (ControlFlow 0 5))) (let ((.cse46 (= .cse48 2)) (.cse9 (and .cse6 .cse5))) (let ((.cse8 (=> .cse46 .cse9))) (res .cse8 (! (res .cse9 (and+ .cse9) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse5 - .cse6) :input) (! (let ((.cse10 (=> (= .cse48 4) true))) (res .cse10 (! (res true .cse7 (=>+ 1 .cse10)) :proves (+ .cse10) :input) (! (let ((.cse11 (and .cse8 .cse10))) (res .cse11 (and+ .cse11) (let ((.cse47 (= (ControlFlow 0 0) 5))) (let ((.cse12 (=> .cse47 .cse11))) (res .cse12 (=>+ 1 .cse12) (let ((.cse26 (= x@0 x@0)) (.cse28 (- 0 1))) (let ((.cse42 (- 0 3)) (.cse27 (= .cse36 .cse28)) (.cse22 (not .cse26))) (let ((.cse21 (=> .cse27 .cse22)) (.cse40 (= .cse36 .cse42)) (.cse30 (= 0 0))) (let ((.cse39 (=> .cse40 .cse30)) (.cse20 (=> .cse30 .cse21))) (let ((.cse19 (and .cse39 .cse20))) (let ((.cse18 (=> .cse46 .cse19))) (let ((.cse17 (and .cse18 .cse10))) (let ((.cse13 (=> .cse47 .cse17))) (let ((.cse15 (not .cse13))) (res .cse13 (let ((.cse14 (not .cse12))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res (= .cse13 .cse12) (res (= .cse17 .cse11) (res (= .cse10 .cse10) (refl .cse10) (res (= .cse18 .cse8) (res (= .cse19 .cse9) (let ((.cse37 (= .cse30 true))) (let-proof ((.cse31 (refl 0))) (let ((.cse34 (= .cse36 .cse36))) (let-proof ((.cse38 (res true .cse7 (res .cse30 .cse31 (=+2 .cse37)))) (.cse35 (refl .cse36))) (res (= .cse20 .cse5) (res (= .cse21 .cse1) (res (= .cse22 false) (let ((.cse24 (not true))) (let ((.cse23 (= .cse24 false))) (res .cse23 (res false (res .cse24 (=+1 .cse23) (res true .cse7 (not- .cse24))) false-) (res (= .cse22 .cse24) (let ((.cse25 (= .cse26 true))) (res .cse25 (res true .cse7 (res .cse26 (refl x@0) (=+2 .cse25))) (cong (not .cse26) (not true)))) (trans .cse22 .cse24 false))))) (res (= .cse27 .cse2) (res (= .cse28 (- 1)) (let ((.cse29 (* (- 1) 1))) (res (= .cse29 (- 1)) (poly* .cse29 (- 1)) (res .cse30 .cse31 (let ((.cse32 (+ 0 .cse29)) (.cse33 (+ 0 (- 1)))) (res (= .cse32 .cse33) (cong (+ 0 .cse29) (+ 0 (- 1))) (res (= .cse28 .cse32) (-def 0 1) (res (= .cse33 (- 1)) (poly+ .cse33 (- 1)) (trans .cse28 .cse32 .cse33 (- 1))))))))) (res .cse34 .cse35 (cong (= .cse36 .cse28) (= .cse36 (- 1))))) (cong (=> .cse27 .cse22) (=> .cse2 false)))) (res .cse37 .cse38 (cong (=> .cse30 .cse21) (=> true .cse1)))) (res (= .cse39 .cse6) (res .cse37 .cse38 (res (= .cse40 .cse41) (res (= .cse42 (- 3)) (let ((.cse43 (* (- 1) 3))) (res (= .cse43 (- 3)) (poly* .cse43 (- 3)) (res .cse30 .cse31 (let ((.cse44 (+ 0 .cse43)) (.cse45 (+ 0 (- 3)))) (res (= .cse44 .cse45) (cong (+ 0 .cse43) (+ 0 (- 3))) (res (= .cse42 .cse44) (-def 0 3) (res (= .cse45 (- 3)) (poly+ .cse45 (- 3)) (trans .cse42 .cse44 .cse45 (- 3))))))))) (res .cse34 .cse35 (cong (= .cse36 .cse42) (= .cse36 (- 3))))) (cong (=> .cse40 .cse30) (=> .cse41 true)))) (cong (and .cse39 .cse20) (and .cse6 .cse5)))))))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse19) (=> .cse46 .cse9)))) (cong (and .cse18 .cse10) (and .cse8 .cse10)))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse17) (=> .cse47 .cse11)))) (cong (not .cse13) (not .cse12))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (assume .cse15) (not- .cse15))))))))))))))))) :proves (- .cse8 - .cse10) :input))) :proves (- .cse8) :rup))))))))) :proves (- .cse5) :rup))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse50 (not .cse2))) (res .cse2 (let ((.cse49 (not .cse0))) (res .cse49 (res .cse50 (not+ .cse50) (let ((.cse51 (= .cse50 .cse49))) (res .cse51 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse51)))) (not- .cse49))) (res .cse50 (assume .cse50) (not- .cse50)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
