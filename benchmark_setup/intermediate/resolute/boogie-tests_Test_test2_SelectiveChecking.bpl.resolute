success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse27 (* (- 1) y))) (let ((.cse60 (* (- 1) x)) (.cse23 (+ z .cse27))) (let ((.cse49 (ControlFlow 0 2)) (.cse21 (<= .cse23 0)) (.cse41 (+ z .cse60))) (let ((.cse0 (<= .cse41 0)) (.cse25 (not .cse21)) (.cse44 (= .cse49 (- 1))) (.cse59 (+ y .cse60))) (let ((.cse6 (<= .cse59 0)) (.cse24 (and .cse25 .cse44)) (.cse2 (not .cse0))) (let ((.cse1 (=> .cse24 .cse2)) (.cse10 (not .cse6))) (let ((.cse14 (< 0 .cse59)) (.cse18 (=> .cse10 .cse1))) (let-proof ((.cse3 (not+ .cse2)) (.cse26 (not- .cse25)) (.cse11 (not+ .cse10)) (.cse15 (total .cse59 0)) (.cse19 (not- .cse10))) (let-proof ((.cse20 (let ((.cse57 (= (ControlFlow 0 3) 2))) (let ((.cse28 (=> .cse57 .cse18))) (res .cse28 (=>+ 1 .cse28) (let ((.cse58 (= (ControlFlow 0 0) 3))) (let ((.cse29 (=> .cse58 .cse28))) (res .cse29 (=>+ 1 .cse29) (let ((.cse45 (- 0 1))) (let ((.cse51 (< y z)) (.cse43 (= .cse49 .cse45))) (let ((.cse42 (and .cse51 .cse43)) (.cse38 (< x z))) (let ((.cse55 (< x y)) (.cse36 (=> .cse42 .cse38))) (let ((.cse35 (=> .cse55 .cse36))) (let ((.cse34 (=> .cse57 .cse35))) (let ((.cse30 (=> .cse58 .cse34))) (let ((.cse32 (not .cse30))) (res .cse30 (let ((.cse31 (not .cse29))) (res .cse31 (res .cse32 (not+ .cse32) (let ((.cse33 (= .cse32 .cse31))) (res .cse33 (res (= .cse30 .cse29) (res (= .cse34 .cse28) (res (= .cse35 .cse18) (res (= .cse36 .cse1) (let ((.cse37 (= .cse38 .cse2))) (res .cse37 (res .cse2 (res .cse38 (=+1 .cse37) (res .cse0 .cse3 (farkas 1 .cse38 1 .cse0))) (res .cse38 (let ((.cse39 (<= z x))) (res .cse39 (total z x) (res .cse0 (let ((.cse40 (< 0 .cse41))) (res .cse40 (total .cse41 0) (farkas 1 .cse39 1 .cse40))) (not- .cse2)))) (=+2 .cse37))) (res (= .cse42 .cse24) (res (= .cse43 .cse44) (res (= .cse45 (- 1)) (let ((.cse46 (* (- 1) 1))) (res (= .cse46 (- 1)) (poly* .cse46 (- 1)) (res (= 0 0) (refl 0) (let ((.cse47 (+ 0 .cse46)) (.cse48 (+ 0 (- 1)))) (res (= .cse47 .cse48) (cong (+ 0 .cse46) (+ 0 (- 1))) (res (= .cse45 .cse47) (-def 0 1) (res (= .cse48 (- 1)) (poly+ .cse48 (- 1)) (trans .cse45 .cse47 .cse48 (- 1))))))))) (res (= .cse49 .cse49) (refl .cse49) (cong (= .cse49 .cse45) (= .cse49 (- 1))))) (let ((.cse50 (= .cse51 .cse25))) (res .cse50 (res .cse25 (res .cse51 (=+1 .cse50) (res .cse21 (not+ .cse25) (farkas 1 .cse51 1 .cse21))) (res .cse51 (let ((.cse52 (<= z y))) (res .cse52 (total z y) (res .cse21 (let ((.cse53 (< 0 .cse23))) (res .cse53 (total .cse23 0) (farkas 1 .cse52 1 .cse53))) .cse26))) (=+2 .cse50))) (cong (and .cse51 .cse43) (and .cse25 .cse44))))) (cong (=> .cse42 .cse38) (=> .cse24 .cse2))))) (let ((.cse54 (= .cse55 .cse10))) (res .cse54 (res .cse10 (res .cse55 (=+1 .cse54) (res .cse6 .cse11 (farkas 1 .cse55 1 .cse6))) (res .cse55 (let ((.cse56 (<= y x))) (res .cse56 (total y x) (res .cse6 (res .cse14 .cse15 (farkas 1 .cse56 1 .cse14)) .cse19))) (=+2 .cse54))) (cong (=> .cse55 .cse36) (=> .cse10 .cse1))))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse35) (=> .cse57 .cse18)))) (res (= .cse58 .cse58) (refl .cse58) (cong (=> .cse58 .cse34) (=> .cse58 .cse28)))) (cong (not .cse30) (not .cse29))) (=-2 .cse33)))) (not- .cse31))) (res .cse32 (assume .cse32) (not- .cse32))))))))))))))))))) (let-proof ((.cse4 (res .cse18 (=>+ 1 .cse18) .cse20))) (res .cse0 (! (res .cse1 (res .cse2 .cse3 (=>+ 1 .cse1)) .cse4) :proves (+ .cse0) :input) (let ((.cse17 (+ x .cse27 1))) (let ((.cse5 (<= .cse17 0))) (res .cse5 (! (res .cse6 (let ((.cse7 (not .cse5))) (let-proof ((.cse8 (not+ .cse7))) (res .cse7 .cse8 (let ((.cse9 (not .cse7))) (res .cse9 (res .cse10 .cse11 (let ((.cse12 (= .cse10 .cse9))) (res .cse12 (let ((.cse13 (= .cse6 .cse7))) (res .cse13 (res .cse7 (res .cse6 (=+1 .cse13) (res .cse5 .cse8 (farkas 1 .cse6 1 .cse5))) (res .cse6 (res .cse14 .cse15 (res .cse5 (let ((.cse16 (<= 1 .cse17))) (res .cse16 (total-int .cse17 0) (farkas 1 .cse14 1 .cse16))) (not- .cse7))) (=+2 .cse13))) (cong (not .cse6) (not .cse7)))) (=-2 .cse12)))) (not- .cse9)))))) (res .cse18 (res .cse10 (=>+ 0 .cse18) .cse19) .cse20)) :proves (+ .cse5) :input) (res .cse21 (! (let ((.cse22 (<= 1 .cse23))) (res .cse22 (total-int .cse23 0) (farkas 1 .cse22 1 .cse5 1 .cse0))) :proves (+ .cse21 - .cse5 - .cse0) :LA ((- 1) 1 1)) (! (res .cse24 (res .cse1 (=>+ 0 .cse1) .cse4) (res .cse25 (and- 0 .cse24) .cse26)) :proves (- .cse21) :input)))))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_SelectiveChecking.bpl.mod.smt2:64:10: Logical context not inconsistent!")
unsat
(! (let ((.cse25 (ControlFlow 0 2))) (let ((.cse1 (= .cse25 (- 1))) (.cse0 (= (- 1) .cse25))) (let ((.cse36 (= .cse1 .cse0))) (let-proof ((.cse37 (res .cse0 (res .cse1 (=+1 .cse36) (symm (- 1) .cse25)) (res .cse1 (symm .cse25 (- 1)) (=+2 .cse36))))) (res .cse0 (! (res .cse1 (let ((.cse35 (* (- 1) x))) (let ((.cse32 (+ y .cse35))) (let ((.cse29 (<= .cse32 0))) (let ((.cse27 (not .cse29))) (let ((.cse2 (and .cse27 .cse1))) (res .cse2 (let ((.cse18 (+ z .cse35))) (let ((.cse15 (<= .cse18 0))) (let ((.cse13 (not .cse15))) (let ((.cse3 (=> .cse2 .cse13))) (res .cse3 (=>+ 0 .cse3) (let ((.cse33 (= (ControlFlow 0 3) 2))) (let ((.cse4 (=> .cse33 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse34 (= (ControlFlow 0 0) 3))) (let ((.cse5 (=> .cse34 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse21 (- 0 1))) (let ((.cse28 (< x y)) (.cse20 (= .cse25 .cse21))) (let ((.cse19 (and .cse28 .cse20)) (.cse14 (< x z))) (let ((.cse11 (=> .cse19 .cse14))) (let ((.cse10 (=> .cse33 .cse11))) (let ((.cse6 (=> .cse34 .cse10))) (let ((.cse8 (not .cse6))) (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res (= .cse6 .cse5) (res (= .cse10 .cse4) (res (= .cse11 .cse3) (let ((.cse12 (= .cse14 .cse13))) (res .cse12 (res .cse13 (res .cse14 (=+1 .cse12) (res .cse15 (not+ .cse13) (farkas 1 .cse14 1 .cse15))) (res .cse14 (let ((.cse16 (<= z x))) (res .cse16 (total z x) (res .cse15 (let ((.cse17 (< 0 .cse18))) (res .cse17 (total .cse18 0) (farkas 1 .cse16 1 .cse17))) (not- .cse13)))) (=+2 .cse12))) (res (= .cse19 .cse2) (res (= .cse20 .cse1) (res (= .cse21 (- 1)) (let ((.cse22 (* (- 1) 1))) (res (= .cse22 (- 1)) (poly* .cse22 (- 1)) (res (= 0 0) (refl 0) (let ((.cse23 (+ 0 .cse22)) (.cse24 (+ 0 (- 1)))) (res (= .cse23 .cse24) (cong (+ 0 .cse22) (+ 0 (- 1))) (res (= .cse21 .cse23) (-def 0 1) (res (= .cse24 (- 1)) (poly+ .cse24 (- 1)) (trans .cse21 .cse23 .cse24 (- 1))))))))) (res (= .cse25 .cse25) (refl .cse25) (cong (= .cse25 .cse21) (= .cse25 (- 1))))) (let ((.cse26 (= .cse28 .cse27))) (res .cse26 (res .cse27 (res .cse28 (=+1 .cse26) (res .cse29 (not+ .cse27) (farkas 1 .cse28 1 .cse29))) (res .cse28 (let ((.cse30 (<= y x))) (res .cse30 (total y x) (res .cse29 (let ((.cse31 (< 0 .cse32))) (res .cse31 (total .cse32 0) (farkas 1 .cse30 1 .cse31))) (not- .cse27)))) (=+2 .cse26))) (cong (and .cse28 .cse20) (and .cse27 .cse1))))) (cong (=> .cse19 .cse14) (=> .cse2 .cse13))))) (res (= .cse33 .cse33) (refl .cse33) (cong (=> .cse33 .cse11) (=> .cse33 .cse3)))) (res (= .cse34 .cse34) (refl .cse34) (cong (=> .cse34 .cse10) (=> .cse34 .cse4)))) (cong (not .cse6) (not .cse5))) (=-2 .cse9)))) (not- .cse7))) (res .cse8 (assume .cse8) (not- .cse8))))))))))))))))))))) (and- 1 .cse2))))))) (res .cse36 .cse37 (=-2 .cse36))) :proves (+ .cse0) :input) (! (let ((.cse39 (not .cse1))) (res .cse1 (let ((.cse38 (not .cse0))) (res .cse38 (res .cse39 (not+ .cse39) (let ((.cse40 (= .cse39 .cse38))) (res .cse40 (res .cse36 .cse37 (cong (not .cse1) (not .cse0))) (=-2 .cse40)))) (not- .cse38))) (res .cse39 (assume .cse39) (not- .cse39)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_SelectiveChecking.bpl.mod.smt2:104:10: Logical context not inconsistent!")
unsat
(! (let ((.cse48 (* (- 1) x))) (let ((.cse31 (+ z .cse48))) (let ((.cse28 (<= .cse31 0)) (.cse38 (ControlFlow 0 2))) (let ((.cse33 (= .cse38 (- 1))) (.cse26 (not .cse28))) (let ((.cse23 (= (ControlFlow 0 3) 2)) (.cse2 (=> .cse33 .cse26)) (.cse49 (ControlFlow 0 4))) (let ((.cse24 (= .cse49 3)) (.cse1 (=> .cse23 .cse2))) (let ((.cse0 (=> .cse24 .cse1))) (let-proof ((.cse3 (! (let ((.cse50 (= (- 1) .cse38))) (let ((.cse51 (= .cse33 .cse50))) (let-proof ((.cse52 (res .cse50 (res .cse33 (=+1 .cse51) (symm (- 1) .cse38)) (res .cse33 (symm .cse38 (- 1)) (=+2 .cse51))))) (res .cse50 (! (res .cse33 (=>+ 0 .cse2) (res .cse51 .cse52 (=-2 .cse51))) :proves (+ .cse2 + .cse50) :input) (! (let ((.cse54 (not .cse33))) (res .cse33 (let ((.cse53 (not .cse50))) (res .cse53 (res .cse54 (not+ .cse54) (let ((.cse55 (= .cse54 .cse53))) (res .cse55 (res .cse51 .cse52 (cong (not .cse33) (not .cse50))) (=-2 .cse55)))) (not- .cse53))) (res .cse54 (assume .cse54) (not- .cse54)))) :proves (- .cse50) :input))))) :proves (+ .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 .cse3 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse19 (= .cse49 2))) (let ((.cse4 (=> .cse19 .cse2))) (res .cse4 (! (res .cse2 .cse3 (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse2) :input)) :proves (+ .cse4) :rup) (! (let ((.cse5 (and .cse0 .cse4))) (res .cse5 (and+ .cse5) (let ((.cse45 (+ y .cse48))) (let ((.cse42 (<= .cse45 0))) (let ((.cse40 (not .cse42))) (let ((.cse6 (=> .cse40 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse46 (= (ControlFlow 0 5) 4))) (let ((.cse7 (=> .cse46 .cse6))) (res .cse7 (=>+ 1 .cse7) (let ((.cse47 (= (ControlFlow 0 0) 5))) (let ((.cse8 (=> .cse47 .cse7))) (res .cse8 (=>+ 1 .cse8) (let ((.cse34 (- 0 1))) (let ((.cse32 (= .cse38 .cse34)) (.cse27 (< x z))) (let ((.cse20 (=> .cse32 .cse27))) (let ((.cse22 (=> .cse23 .cse20))) (let ((.cse21 (=> .cse24 .cse22)) (.cse16 (=> .cse19 .cse20))) (let ((.cse41 (< x y)) (.cse15 (and .cse21 .cse16))) (let ((.cse14 (=> .cse41 .cse15))) (let ((.cse13 (=> .cse46 .cse14))) (let ((.cse9 (=> .cse47 .cse13))) (let ((.cse11 (not .cse9))) (res .cse9 (let ((.cse10 (not .cse8))) (res .cse10 (res .cse11 (not+ .cse11) (let ((.cse12 (= .cse11 .cse10))) (res .cse12 (res (= .cse9 .cse8) (res (= .cse13 .cse7) (res (= .cse14 .cse6) (res (= .cse15 .cse5) (let ((.cse17 (= .cse20 .cse2))) (let-proof ((.cse18 (let ((.cse25 (= .cse27 .cse26))) (res .cse25 (res .cse26 (res .cse27 (=+1 .cse25) (res .cse28 (not+ .cse26) (farkas 1 .cse27 1 .cse28))) (res .cse27 (let ((.cse29 (<= z x))) (res .cse29 (total z x) (res .cse28 (let ((.cse30 (< 0 .cse31))) (res .cse30 (total .cse31 0) (farkas 1 .cse29 1 .cse30))) (not- .cse26)))) (=+2 .cse25))) (res (= .cse32 .cse33) (res (= .cse34 (- 1)) (let ((.cse35 (* (- 1) 1))) (res (= .cse35 (- 1)) (poly* .cse35 (- 1)) (res (= 0 0) (refl 0) (let ((.cse36 (+ 0 .cse35)) (.cse37 (+ 0 (- 1)))) (res (= .cse36 .cse37) (cong (+ 0 .cse35) (+ 0 (- 1))) (res (= .cse34 .cse36) (-def 0 1) (res (= .cse37 (- 1)) (poly+ .cse37 (- 1)) (trans .cse34 .cse36 .cse37 (- 1))))))))) (res (= .cse38 .cse38) (refl .cse38) (cong (= .cse38 .cse34) (= .cse38 (- 1))))) (cong (=> .cse32 .cse27) (=> .cse33 .cse26))))))) (res (= .cse16 .cse4) (res .cse17 .cse18 (res (= .cse19 .cse19) (refl .cse19) (cong (=> .cse19 .cse20) (=> .cse19 .cse2)))) (res (= .cse21 .cse0) (res (= .cse22 .cse1) (res .cse17 .cse18 (res (= .cse23 .cse23) (refl .cse23) (cong (=> .cse23 .cse20) (=> .cse23 .cse2)))) (res (= .cse24 .cse24) (refl .cse24) (cong (=> .cse24 .cse22) (=> .cse24 .cse1)))) (cong (and .cse21 .cse16) (and .cse0 .cse4)))))) (let ((.cse39 (= .cse41 .cse40))) (res .cse39 (res .cse40 (res .cse41 (=+1 .cse39) (res .cse42 (not+ .cse40) (farkas 1 .cse41 1 .cse42))) (res .cse41 (let ((.cse43 (<= y x))) (res .cse43 (total y x) (res .cse42 (let ((.cse44 (< 0 .cse45))) (res .cse44 (total .cse45 0) (farkas 1 .cse43 1 .cse44))) (not- .cse40)))) (=+2 .cse39))) (cong (=> .cse41 .cse15) (=> .cse40 .cse5))))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse14) (=> .cse46 .cse6)))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse13) (=> .cse47 .cse7)))) (cong (not .cse9) (not .cse8))) (=-2 .cse12)))) (not- .cse10))) (res .cse11 (assume .cse11) (not- .cse11)))))))))))))))))))))))))) :proves (- .cse0 - .cse4) :input))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_SelectiveChecking.bpl.mod.smt2:142:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_SelectiveChecking.bpl.mod.smt2:145:10: Logical context not inconsistent!")
unsat
(! (let ((.cse14 (ControlFlow 0 2))) (let ((.cse2 (= .cse14 (- 1))) (.cse0 (= (- 1) .cse14))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse14)) (res .cse2 (symm .cse14 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse58 (* (- 1) x))) (let ((.cse32 (+ z .cse58))) (let ((.cse29 (<= .cse32 0))) (let ((.cse27 (not .cse29))) (let ((.cse1 (=> .cse2 .cse27))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse55 (+ y .cse58))) (let ((.cse52 (<= .cse55 0))) (let ((.cse45 (not .cse52))) (let ((.cse5 (=> .cse45 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse8 (= .cse14 (- 3)))) (let ((.cse6 (=> .cse8 .cse45))) (res .cse6 (! (let ((.cse7 (= (- 3) .cse14))) (let ((.cse9 (= .cse8 .cse7))) (let-proof ((.cse10 (res .cse7 (res .cse8 (=+1 .cse9) (symm (- 3) .cse14)) (res .cse8 (symm .cse14 (- 3)) (=+2 .cse9))))) (res .cse7 (! (res .cse8 (=>+ 0 .cse6) (res .cse9 .cse10 (=-2 .cse9))) :proves (+ .cse6 + .cse7) :input) (! (let ((.cse12 (not .cse8))) (res .cse8 (let ((.cse11 (not .cse7))) (res .cse11 (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res .cse9 .cse10 (cong (not .cse8) (not .cse7))) (=-2 .cse13)))) (not- .cse11))) (res .cse12 (assume .cse12) (not- .cse12)))) :proves (- .cse7) :input))))) :proves (+ .cse6) :rup) (! (let ((.cse15 (and .cse6 .cse5))) (res .cse15 (and+ .cse15) (let ((.cse56 (= (ControlFlow 0 4) 2))) (let ((.cse16 (=> .cse56 .cse15))) (res .cse16 (=>+ 1 .cse16) (let ((.cse57 (= (ControlFlow 0 0) 4))) (let ((.cse17 (=> .cse57 .cse16))) (res .cse17 (=>+ 1 .cse17) (let ((.cse34 (- 0 1))) (let ((.cse48 (- 0 3)) (.cse33 (= .cse14 .cse34)) (.cse28 (< x z))) (let ((.cse25 (=> .cse33 .cse28)) (.cse47 (= .cse14 .cse48)) (.cse44 (< x y))) (let ((.cse46 (=> .cse47 .cse44)) (.cse24 (=> .cse44 .cse25))) (let ((.cse23 (and .cse46 .cse24))) (let ((.cse22 (=> .cse56 .cse23))) (let ((.cse18 (=> .cse57 .cse22))) (let ((.cse20 (not .cse18))) (res .cse18 (let ((.cse19 (not .cse17))) (res .cse19 (res .cse20 (not+ .cse20) (let ((.cse21 (= .cse20 .cse19))) (res .cse21 (res (= .cse18 .cse17) (res (= .cse22 .cse16) (res (= .cse23 .cse15) (let ((.cse42 (= .cse44 .cse45))) (let ((.cse36 (= 0 0)) (.cse40 (= .cse14 .cse14))) (let-proof ((.cse43 (res .cse45 (res .cse44 (=+1 .cse42) (res .cse52 (not+ .cse45) (farkas 1 .cse44 1 .cse52))) (res .cse44 (let ((.cse53 (<= y x))) (res .cse53 (total y x) (res .cse52 (let ((.cse54 (< 0 .cse55))) (res .cse54 (total .cse55 0) (farkas 1 .cse53 1 .cse54))) (not- .cse45)))) (=+2 .cse42)))) (.cse37 (refl 0)) (.cse41 (refl .cse14))) (res (= .cse24 .cse5) (res (= .cse25 .cse1) (let ((.cse26 (= .cse28 .cse27))) (res .cse26 (res .cse27 (res .cse28 (=+1 .cse26) (res .cse29 (not+ .cse27) (farkas 1 .cse28 1 .cse29))) (res .cse28 (let ((.cse30 (<= z x))) (res .cse30 (total z x) (res .cse29 (let ((.cse31 (< 0 .cse32))) (res .cse31 (total .cse32 0) (farkas 1 .cse30 1 .cse31))) (not- .cse27)))) (=+2 .cse26))) (res (= .cse33 .cse2) (res (= .cse34 (- 1)) (let ((.cse35 (* (- 1) 1))) (res (= .cse35 (- 1)) (poly* .cse35 (- 1)) (res .cse36 .cse37 (let ((.cse38 (+ 0 .cse35)) (.cse39 (+ 0 (- 1)))) (res (= .cse38 .cse39) (cong (+ 0 .cse35) (+ 0 (- 1))) (res (= .cse34 .cse38) (-def 0 1) (res (= .cse39 (- 1)) (poly+ .cse39 (- 1)) (trans .cse34 .cse38 .cse39 (- 1))))))))) (res .cse40 .cse41 (cong (= .cse14 .cse34) (= .cse14 (- 1))))) (cong (=> .cse33 .cse28) (=> .cse2 .cse27))))) (res .cse42 .cse43 (cong (=> .cse44 .cse25) (=> .cse45 .cse1)))) (res (= .cse46 .cse6) (res .cse42 .cse43 (res (= .cse47 .cse8) (res (= .cse48 (- 3)) (let ((.cse49 (* (- 1) 3))) (res (= .cse49 (- 3)) (poly* .cse49 (- 3)) (res .cse36 .cse37 (let ((.cse50 (+ 0 .cse49)) (.cse51 (+ 0 (- 3)))) (res (= .cse50 .cse51) (cong (+ 0 .cse49) (+ 0 (- 3))) (res (= .cse48 .cse50) (-def 0 3) (res (= .cse51 (- 3)) (poly+ .cse51 (- 3)) (trans .cse48 .cse50 .cse51 (- 3))))))))) (res .cse40 .cse41 (cong (= .cse14 .cse48) (= .cse14 (- 3))))) (cong (=> .cse47 .cse44) (=> .cse8 .cse45)))) (cong (and .cse46 .cse24) (and .cse6 .cse5))))))) (res (= .cse56 .cse56) (refl .cse56) (cong (=> .cse56 .cse23) (=> .cse56 .cse15)))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse22) (=> .cse57 .cse16)))) (cong (not .cse18) (not .cse17))) (=-2 .cse21)))) (not- .cse19))) (res .cse20 (assume .cse20) (not- .cse20))))))))))))))))))) :proves (- .cse6 - .cse5) :input)))) :proves (- .cse5) :rup)))))) :proves (- .cse1) :rup))))))) :proves (+ .cse0) :rup) (! (let ((.cse60 (not .cse2))) (res .cse2 (let ((.cse59 (not .cse0))) (res .cse59 (res .cse60 (not+ .cse60) (let ((.cse61 (= .cse60 .cse59))) (res .cse61 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse61)))) (not- .cse59))) (res .cse60 (assume .cse60) (not- .cse60)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
