success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots19.v0.bpl.mod.smt2:26:10: Logical context not inconsistent!")
unsat
(! (let ((.cse33 (ControlFlow 0 2))) (let ((.cse2 (= .cse33 (- 1))) (.cse0 (= (- 1) .cse33))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse33)) (res .cse2 (symm .cse33 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse5 (=> true .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse39 (= .cse33 (- 3)))) (let ((.cse6 (=> .cse39 true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (! (let ((.cse8 (and .cse6 .cse5))) (res .cse8 (and+ .cse8) (let ((.cse44 (= (ControlFlow 0 4) 2))) (let ((.cse9 (=> .cse44 .cse8))) (res .cse9 (=>+ 1 .cse9) (let ((.cse45 (= (ControlFlow 0 0) 4))) (let ((.cse10 (=> .cse45 .cse9))) (res .cse10 (=>+ 1 .cse10) (let ((.cse23 (= 1 1)) (.cse25 (- 0 1))) (let ((.cse40 (- 0 3)) (.cse24 (= .cse33 .cse25)) (.cse19 (not .cse23))) (let ((.cse18 (=> .cse24 .cse19)) (.cse38 (= .cse33 .cse40)) (.cse36 (= 2 2))) (let ((.cse37 (=> .cse38 .cse36)) (.cse17 (=> .cse36 .cse18))) (let ((.cse16 (and .cse37 .cse17))) (let ((.cse15 (=> .cse44 .cse16))) (let ((.cse11 (=> .cse45 .cse15))) (let ((.cse13 (not .cse11))) (res .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res (= .cse11 .cse10) (res (= .cse15 .cse9) (res (= .cse16 .cse8) (let ((.cse34 (= .cse36 true))) (let ((.cse27 (= 0 0)) (.cse31 (= .cse33 .cse33))) (let-proof ((.cse35 (res true .cse7 (res .cse36 (refl 2) (=+2 .cse34)))) (.cse28 (refl 0)) (.cse32 (refl .cse33))) (res (= .cse17 .cse5) (res (= .cse18 .cse1) (res (= .cse19 false) (let ((.cse21 (not true))) (let ((.cse20 (= .cse21 false))) (res .cse20 (res false (res .cse21 (=+1 .cse20) (res true .cse7 (not- .cse21))) false-) (res (= .cse19 .cse21) (let ((.cse22 (= .cse23 true))) (res .cse22 (res true .cse7 (res .cse23 (refl 1) (=+2 .cse22))) (cong (not .cse23) (not true)))) (trans .cse19 .cse21 false))))) (res (= .cse24 .cse2) (res (= .cse25 (- 1)) (let ((.cse26 (* (- 1) 1))) (res (= .cse26 (- 1)) (poly* .cse26 (- 1)) (res .cse27 .cse28 (let ((.cse29 (+ 0 .cse26)) (.cse30 (+ 0 (- 1)))) (res (= .cse29 .cse30) (cong (+ 0 .cse26) (+ 0 (- 1))) (res (= .cse25 .cse29) (-def 0 1) (res (= .cse30 (- 1)) (poly+ .cse30 (- 1)) (trans .cse25 .cse29 .cse30 (- 1))))))))) (res .cse31 .cse32 (cong (= .cse33 .cse25) (= .cse33 (- 1))))) (cong (=> .cse24 .cse19) (=> .cse2 false)))) (res .cse34 .cse35 (cong (=> .cse36 .cse18) (=> true .cse1)))) (res (= .cse37 .cse6) (res .cse34 .cse35 (res (= .cse38 .cse39) (res (= .cse40 (- 3)) (let ((.cse41 (* (- 1) 3))) (res (= .cse41 (- 3)) (poly* .cse41 (- 3)) (res .cse27 .cse28 (let ((.cse42 (+ 0 .cse41)) (.cse43 (+ 0 (- 3)))) (res (= .cse42 .cse43) (cong (+ 0 .cse41) (+ 0 (- 3))) (res (= .cse40 .cse42) (-def 0 3) (res (= .cse43 (- 3)) (poly+ .cse43 (- 3)) (trans .cse40 .cse42 .cse43 (- 3))))))))) (res .cse31 .cse32 (cong (= .cse33 .cse40) (= .cse33 (- 3))))) (cong (=> .cse38 .cse36) (=> .cse39 true)))) (cong (and .cse37 .cse17) (and .cse6 .cse5))))))) (res (= .cse44 .cse44) (refl .cse44) (cong (=> .cse44 .cse16) (=> .cse44 .cse8)))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse15) (=> .cse45 .cse9)))) (cong (not .cse11) (not .cse10))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13))))))))))))))))))) :proves (- .cse6 - .cse5) :input))))) :proves (- .cse5) :rup))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse47 (not .cse2))) (res .cse2 (let ((.cse46 (not .cse0))) (res .cse46 (res .cse47 (not+ .cse47) (let ((.cse48 (= .cse47 .cse46))) (res .cse48 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse48)))) (not- .cse46))) (res .cse47 (assume .cse47) (not- .cse47)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
