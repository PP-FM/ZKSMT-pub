success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_CutBackEdge.bpl.mod.smt2:29:10: Logical context not inconsistent!")
unsat
(! (let ((.cse29 (ControlFlow 0 2))) (let ((.cse22 (= .cse29 (- 1))) (.cse0 (= (- 1) .cse29))) (let ((.cse44 (= .cse22 .cse0))) (let-proof ((.cse45 (res .cse0 (res .cse22 (=+1 .cse44) (symm (- 1) .cse29)) (res .cse22 (symm .cse29 (- 1)) (=+2 .cse44))))) (res .cse0 (! (let ((.cse30 (= i@0 0))) (let ((.cse1 (and .cse30 .cse22))) (res .cse1 (! (let ((.cse19 (= i@1 0))) (let ((.cse2 (=> .cse1 .cse19))) (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + .cse1) :input) (! (let ((.cse41 (ControlFlow 0 3))) (let ((.cse31 (= .cse41 2))) (let ((.cse3 (=> .cse31 .cse2))) (res .cse3 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse2) :input) (! (let ((.cse4 (=> true .cse3))) (res .cse4 (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse3) :input) (! (let ((.cse36 (= .cse41 (- 4)))) (let ((.cse5 (=> .cse36 true))) (let-proof ((.cse6 true+)) (res .cse5 (! (res true .cse6 (=>+ 1 .cse5)) :proves (+ .cse5) :input) (! (let ((.cse7 (and .cse5 .cse4))) (res .cse7 (and+ .cse7) (let ((.cse42 (= (ControlFlow 0 5) 3))) (let ((.cse8 (=> .cse42 .cse7))) (res .cse8 (=>+ 1 .cse8) (let ((.cse43 (= (ControlFlow 0 0) 5))) (let ((.cse9 (=> .cse43 .cse8))) (res .cse9 (=>+ 1 .cse9) (let ((.cse23 (- 0 1))) (let ((.cse21 (= .cse29 .cse23))) (let ((.cse20 (and .cse30 .cse21))) (let ((.cse37 (- 0 4)) (.cse18 (=> .cse20 .cse19))) (let ((.cse17 (=> .cse31 .cse18)) (.cse35 (= .cse41 .cse37)) (.cse25 (= 0 0))) (let ((.cse34 (=> .cse35 .cse25)) (.cse16 (=> .cse25 .cse17))) (let ((.cse15 (and .cse34 .cse16))) (let ((.cse14 (=> .cse42 .cse15))) (let ((.cse10 (=> .cse43 .cse14))) (let ((.cse12 (not .cse10))) (res .cse10 (let ((.cse11 (not .cse9))) (res .cse11 (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res (= .cse10 .cse9) (res (= .cse14 .cse8) (res (= .cse15 .cse7) (let ((.cse32 (= .cse25 true))) (let-proof ((.cse26 (refl 0))) (let-proof ((.cse33 (res true .cse6 (res .cse25 .cse26 (=+2 .cse32))))) (res (= .cse16 .cse4) (res (= .cse17 .cse3) (res (= .cse18 .cse2) (res (= .cse19 .cse19) (refl .cse19) (res (= .cse20 .cse1) (res (= .cse21 .cse22) (res (= .cse23 (- 1)) (let ((.cse24 (* (- 1) 1))) (res (= .cse24 (- 1)) (poly* .cse24 (- 1)) (res .cse25 .cse26 (let ((.cse27 (+ 0 .cse24)) (.cse28 (+ 0 (- 1)))) (res (= .cse27 .cse28) (cong (+ 0 .cse24) (+ 0 (- 1))) (res (= .cse23 .cse27) (-def 0 1) (res (= .cse28 (- 1)) (poly+ .cse28 (- 1)) (trans .cse23 .cse27 .cse28 (- 1))))))))) (res (= .cse29 .cse29) (refl .cse29) (cong (= .cse29 .cse23) (= .cse29 (- 1))))) (res (= .cse30 .cse30) (refl .cse30) (cong (and .cse30 .cse21) (and .cse30 .cse22)))) (cong (=> .cse20 .cse19) (=> .cse1 .cse19)))) (res (= .cse31 .cse31) (refl .cse31) (cong (=> .cse31 .cse18) (=> .cse31 .cse2)))) (res .cse32 .cse33 (cong (=> .cse25 .cse17) (=> true .cse3)))) (res (= .cse34 .cse5) (res .cse32 .cse33 (res (= .cse35 .cse36) (res (= .cse37 (- 4)) (let ((.cse38 (* (- 1) 4))) (res (= .cse38 (- 4)) (poly* .cse38 (- 4)) (res .cse25 .cse26 (let ((.cse39 (+ 0 .cse38)) (.cse40 (+ 0 (- 4)))) (res (= .cse39 .cse40) (cong (+ 0 .cse38) (+ 0 (- 4))) (res (= .cse37 .cse39) (-def 0 4) (res (= .cse40 (- 4)) (poly+ .cse40 (- 4)) (trans .cse37 .cse39 .cse40 (- 4))))))))) (res (= .cse41 .cse41) (refl .cse41) (cong (= .cse41 .cse37) (= .cse41 (- 4))))) (cong (=> .cse35 .cse25) (=> .cse36 true)))) (cong (and .cse34 .cse16) (and .cse5 .cse4))))))) (res (= .cse42 .cse42) (refl .cse42) (cong (=> .cse42 .cse15) (=> .cse42 .cse7)))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse14) (=> .cse43 .cse8)))) (cong (not .cse10) (not .cse9))) (=-2 .cse13)))) (not- .cse11))) (res .cse12 (assume .cse12) (not- .cse12))))))))))))))))))))) :proves (- .cse5 - .cse4) :input))))) :proves (- .cse4) :rup))) :proves (- .cse3) :rup))))) :proves (- .cse2) :rup)))) :proves (+ .cse1) :rup) (! (res .cse22 (and- 1 .cse1) (res .cse44 .cse45 (=-2 .cse44))) :proves (- .cse1 + .cse0) :input)))) :proves (+ .cse0) :rup) (! (let ((.cse47 (not .cse22))) (res .cse22 (let ((.cse46 (not .cse0))) (res .cse46 (res .cse47 (not+ .cse47) (let ((.cse48 (= .cse47 .cse46))) (res .cse48 (res .cse44 .cse45 (cong (not .cse22) (not .cse0))) (=-2 .cse48)))) (not- .cse46))) (res .cse47 (assume .cse47) (not- .cse47)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_CutBackEdge.bpl.mod.smt2:65:10: Logical context not inconsistent!")
unsat
(! (let ((.cse42 (ControlFlow 0 3))) (let ((.cse2 (= .cse42 (- 4))) (.cse0 (= (- 4) .cse42))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 4) .cse42)) (res .cse2 (symm .cse42 (- 4)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse33 (ControlFlow 0 2))) (let ((.cse26 (= .cse33 (- 1)))) (let ((.cse8 (and false .cse26))) (let ((.cse35 (= .cse42 2)) (.cse7 (=> .cse8 false))) (let ((.cse6 (=> .cse35 .cse7))) (let ((.cse5 (=> false .cse6))) (let-proof ((.cse9 false-)) (res .cse5 (! (res .cse6 (! (res .cse7 (! (res .cse8 (! (=>+ 0 .cse7) :proves (+ .cse7 + .cse8) :input) (! (res false (and- 0 .cse8) .cse9) :proves (- .cse8) :input)) :proves (+ .cse7) :rup) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (! (let ((.cse10 (and .cse1 .cse5))) (res .cse10 (and+ .cse10) (let ((.cse43 (= (ControlFlow 0 5) 3))) (let ((.cse11 (=> .cse43 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse44 (= (ControlFlow 0 0) 5))) (let ((.cse12 (=> .cse44 .cse11))) (res .cse12 (=>+ 1 .cse12) (let ((.cse27 (- 0 1))) (let ((.cse34 (not true)) (.cse25 (= .cse33 .cse27))) (let ((.cse24 (and .cse34 .cse25))) (let ((.cse38 (- 0 4)) (.cse21 (=> .cse24 .cse34))) (let ((.cse20 (=> .cse35 .cse21)) (.cse37 (= .cse42 .cse38))) (let ((.cse36 (=> .cse37 .cse34)) (.cse19 (=> .cse34 .cse20))) (let ((.cse18 (and .cse36 .cse19))) (let ((.cse17 (=> .cse43 .cse18))) (let ((.cse13 (=> .cse44 .cse17))) (let ((.cse15 (not .cse13))) (res .cse13 (let ((.cse14 (not .cse12))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res (= .cse13 .cse12) (res (= .cse17 .cse11) (res (= .cse18 .cse10) (let ((.cse22 (= .cse34 false))) (let ((.cse29 (= 0 0))) (let-proof ((.cse23 (res false (res .cse34 (=+1 .cse22) (res true true+ (not- .cse34))) .cse9)) (.cse30 (refl 0))) (res (= .cse19 .cse5) (res (= .cse20 .cse6) (res (= .cse21 .cse7) (res .cse22 .cse23 (res (= .cse24 .cse8) (res (= .cse25 .cse26) (res (= .cse27 (- 1)) (let ((.cse28 (* (- 1) 1))) (res (= .cse28 (- 1)) (poly* .cse28 (- 1)) (res .cse29 .cse30 (let ((.cse31 (+ 0 .cse28)) (.cse32 (+ 0 (- 1)))) (res (= .cse31 .cse32) (cong (+ 0 .cse28) (+ 0 (- 1))) (res (= .cse27 .cse31) (-def 0 1) (res (= .cse32 (- 1)) (poly+ .cse32 (- 1)) (trans .cse27 .cse31 .cse32 (- 1))))))))) (res (= .cse33 .cse33) (refl .cse33) (cong (= .cse33 .cse27) (= .cse33 (- 1))))) (res .cse22 .cse23 (cong (and .cse34 .cse25) (and false .cse26)))) (cong (=> .cse24 .cse34) (=> .cse8 false)))) (res (= .cse35 .cse35) (refl .cse35) (cong (=> .cse35 .cse21) (=> .cse35 .cse7)))) (res .cse22 .cse23 (cong (=> .cse34 .cse20) (=> false .cse6)))) (res (= .cse36 .cse1) (res .cse22 .cse23 (res (= .cse37 .cse2) (res (= .cse38 (- 4)) (let ((.cse39 (* (- 1) 4))) (res (= .cse39 (- 4)) (poly* .cse39 (- 4)) (res .cse29 .cse30 (let ((.cse40 (+ 0 .cse39)) (.cse41 (+ 0 (- 4)))) (res (= .cse40 .cse41) (cong (+ 0 .cse39) (+ 0 (- 4))) (res (= .cse38 .cse40) (-def 0 4) (res (= .cse41 (- 4)) (poly+ .cse41 (- 4)) (trans .cse38 .cse40 .cse41 (- 4))))))))) (res (= .cse42 .cse42) (refl .cse42) (cong (= .cse42 .cse38) (= .cse42 (- 4))))) (cong (=> .cse37 .cse34) (=> .cse2 false)))) (cong (and .cse36 .cse19) (and .cse1 .cse5))))))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse18) (=> .cse43 .cse10)))) (res (= .cse44 .cse44) (refl .cse44) (cong (=> .cse44 .cse17) (=> .cse44 .cse11)))) (cong (not .cse13) (not .cse12))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (assume .cse15) (not- .cse15))))))))))))))))))))) :proves (- .cse1 - .cse5) :input))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse46 (not .cse2))) (res .cse2 (let ((.cse45 (not .cse0))) (res .cse45 (res .cse46 (not+ .cse46) (let ((.cse47 (= .cse46 .cse45))) (res .cse47 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse47)))) (not- .cse45))) (res .cse46 (assume .cse46) (not- .cse46)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_CutBackEdge.bpl.mod.smt2:100:10: Logical context not inconsistent!")
unsat
(! (let ((.cse16 (ControlFlow 0 2))) (let ((.cse1 (= .cse16 (- 1))) (.cse0 (= (- 1) .cse16))) (let ((.cse19 (= .cse1 .cse0))) (let-proof ((.cse20 (res .cse0 (res .cse1 (=+1 .cse19) (symm (- 1) .cse16)) (res .cse1 (symm .cse16 (- 1)) (=+2 .cse19))))) (res .cse0 (! (res .cse1 (let ((.cse2 (=> .cse1 false))) (res .cse2 (=>+ 0 .cse2) (let ((.cse17 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse17 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse18 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse18 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse12 (- 0 1))) (let ((.cse11 (= .cse16 .cse12))) (let ((.cse10 (=> .cse11 false))) (let ((.cse9 (=> .cse17 .cse10))) (let ((.cse5 (=> .cse18 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (res (= false false) (refl false) (res (= .cse11 .cse1) (res (= .cse12 (- 1)) (let ((.cse13 (* (- 1) 1))) (res (= .cse13 (- 1)) (poly* .cse13 (- 1)) (res (= 0 0) (refl 0) (let ((.cse14 (+ 0 .cse13)) (.cse15 (+ 0 (- 1)))) (res (= .cse14 .cse15) (cong (+ 0 .cse13) (+ 0 (- 1))) (res (= .cse12 .cse14) (-def 0 1) (res (= .cse15 (- 1)) (poly+ .cse15 (- 1)) (trans .cse12 .cse14 .cse15 (- 1))))))))) (res (= .cse16 .cse16) (refl .cse16) (cong (= .cse16 .cse12) (= .cse16 (- 1))))) (cong (=> .cse11 false) (=> .cse1 false)))) (res (= .cse17 .cse17) (refl .cse17) (cong (=> .cse17 .cse10) (=> .cse17 .cse2)))) (res (= .cse18 .cse18) (refl .cse18) (cong (=> .cse18 .cse9) (=> .cse18 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7))))))))))))))))) (res .cse19 .cse20 (=-2 .cse19))) :proves (+ .cse0) :input) (! (let ((.cse22 (not .cse1))) (res .cse1 (let ((.cse21 (not .cse0))) (res .cse21 (res .cse22 (not+ .cse22) (let ((.cse23 (= .cse22 .cse21))) (res .cse23 (res .cse19 .cse20 (cong (not .cse1) (not .cse0))) (=-2 .cse23)))) (not- .cse21))) (res .cse22 (assume .cse22) (not- .cse22)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse25 (ControlFlow 0 2))) (let ((.cse18 (= .cse25 (- 1))) (.cse34 (ControlFlow 0 3))) (let ((.cse26 (= .cse34 2)) (.cse1 (=> .cse18 true))) (let ((.cse0 (=> .cse26 .cse1))) (let-proof ((.cse2 true+)) (res .cse0 (! (res .cse1 (! (res true .cse2 (=>+ 1 .cse1)) :proves (+ .cse1) :input) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse29 (= .cse34 (- 4)))) (let ((.cse3 (=> .cse29 true))) (res .cse3 (! (res true .cse2 (=>+ 1 .cse3)) :proves (+ .cse3) :input) (! (let ((.cse4 (and .cse3 .cse0))) (res .cse4 (and+ .cse4) (let ((.cse35 (= (ControlFlow 0 5) 3))) (let ((.cse5 (=> .cse35 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse36 (= (ControlFlow 0 0) 5))) (let ((.cse6 (=> .cse36 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse19 (- 0 1))) (let ((.cse30 (- 0 4)) (.cse17 (= .cse25 .cse19))) (let ((.cse14 (=> .cse17 true)) (.cse28 (= .cse34 .cse30))) (let ((.cse27 (=> .cse28 true)) (.cse13 (=> .cse26 .cse14))) (let ((.cse12 (and .cse27 .cse13))) (let ((.cse11 (=> .cse35 .cse12))) (let ((.cse7 (=> .cse36 .cse11))) (let ((.cse9 (not .cse7))) (res .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res (= .cse7 .cse6) (res (= .cse11 .cse5) (res (= .cse12 .cse4) (let ((.cse15 (= true true)) (.cse21 (= 0 0))) (let-proof ((.cse16 (refl true)) (.cse22 (refl 0))) (res (= .cse13 .cse0) (res (= .cse14 .cse1) (res .cse15 .cse16 (res (= .cse17 .cse18) (res (= .cse19 (- 1)) (let ((.cse20 (* (- 1) 1))) (res (= .cse20 (- 1)) (poly* .cse20 (- 1)) (res .cse21 .cse22 (let ((.cse23 (+ 0 .cse20)) (.cse24 (+ 0 (- 1)))) (res (= .cse23 .cse24) (cong (+ 0 .cse20) (+ 0 (- 1))) (res (= .cse19 .cse23) (-def 0 1) (res (= .cse24 (- 1)) (poly+ .cse24 (- 1)) (trans .cse19 .cse23 .cse24 (- 1))))))))) (res (= .cse25 .cse25) (refl .cse25) (cong (= .cse25 .cse19) (= .cse25 (- 1))))) (cong (=> .cse17 true) (=> .cse18 true)))) (res (= .cse26 .cse26) (refl .cse26) (cong (=> .cse26 .cse14) (=> .cse26 .cse1)))) (res (= .cse27 .cse3) (res .cse15 .cse16 (res (= .cse28 .cse29) (res (= .cse30 (- 4)) (let ((.cse31 (* (- 1) 4))) (res (= .cse31 (- 4)) (poly* .cse31 (- 4)) (res .cse21 .cse22 (let ((.cse32 (+ 0 .cse31)) (.cse33 (+ 0 (- 4)))) (res (= .cse32 .cse33) (cong (+ 0 .cse31) (+ 0 (- 4))) (res (= .cse30 .cse32) (-def 0 4) (res (= .cse33 (- 4)) (poly+ .cse33 (- 4)) (trans .cse30 .cse32 .cse33 (- 4))))))))) (res (= .cse34 .cse34) (refl .cse34) (cong (= .cse34 .cse30) (= .cse34 (- 4))))) (cong (=> .cse28 true) (=> .cse29 true)))) (cong (and .cse27 .cse13) (and .cse3 .cse0)))))) (res (= .cse35 .cse35) (refl .cse35) (cong (=> .cse35 .cse12) (=> .cse35 .cse4)))) (res (= .cse36 .cse36) (refl .cse36) (cong (=> .cse36 .cse11) (=> .cse36 .cse5)))) (cong (not .cse7) (not .cse6))) (=-2 .cse10)))) (not- .cse8))) (res .cse9 (assume .cse9) (not- .cse9))))))))))))))))))) :proves (- .cse3 - .cse0) :input)))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_CutBackEdge.bpl.mod.smt2:170:10: Logical context not inconsistent!")
unsat
(! (let ((.cse37 (ControlFlow 0 2))) (let ((.cse30 (= .cse37 (- 1)))) (let ((.cse28 (and b .cse30)) (.cse12 (ControlFlow 0 3))) (let ((.cse38 (= .cse12 2)) (.cse0 (=> .cse28 b))) (let ((.cse3 (=> .cse38 .cse0))) (let ((.cse1 (=> b .cse3))) (let-proof ((.cse2 (! (let ((.cse6 (= .cse12 (- 4)))) (let ((.cse4 (=> .cse6 b))) (res .cse4 (! (let ((.cse5 (= (- 4) .cse12))) (let ((.cse7 (= .cse6 .cse5))) (let-proof ((.cse8 (res .cse5 (res .cse6 (=+1 .cse7) (symm (- 4) .cse12)) (res .cse6 (symm .cse12 (- 4)) (=+2 .cse7))))) (res .cse5 (! (res .cse6 (=>+ 0 .cse4) (res .cse7 .cse8 (=-2 .cse7))) :proves (+ .cse4 + .cse5) :input) (! (let ((.cse10 (not .cse6))) (res .cse6 (let ((.cse9 (not .cse5))) (res .cse9 (res .cse10 (not+ .cse10) (let ((.cse11 (= .cse10 .cse9))) (res .cse11 (res .cse7 .cse8 (cong (not .cse6) (not .cse5))) (=-2 .cse11)))) (not- .cse9))) (res .cse10 (assume .cse10) (not- .cse10)))) :proves (- .cse5) :input))))) :proves (+ .cse4) :rup) (! (let ((.cse13 (and .cse4 .cse1))) (res .cse13 (and+ .cse13) (let ((.cse45 (= (ControlFlow 0 5) 3))) (let ((.cse14 (=> .cse45 .cse13))) (res .cse14 (=>+ 1 .cse14) (let ((.cse46 (= (ControlFlow 0 0) 5))) (let ((.cse15 (=> .cse46 .cse14))) (res .cse15 (=>+ 1 .cse15) (let ((.cse31 (- 0 1))) (let ((.cse29 (= .cse37 .cse31))) (let ((.cse27 (and b .cse29))) (let ((.cse41 (- 0 4)) (.cse24 (=> .cse27 b))) (let ((.cse23 (=> .cse38 .cse24)) (.cse40 (= .cse12 .cse41))) (let ((.cse39 (=> .cse40 b)) (.cse22 (=> b .cse23))) (let ((.cse21 (and .cse39 .cse22))) (let ((.cse20 (=> .cse45 .cse21))) (let ((.cse16 (=> .cse46 .cse20))) (let ((.cse18 (not .cse16))) (res .cse16 (let ((.cse17 (not .cse15))) (res .cse17 (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (res (= .cse16 .cse15) (res (= .cse20 .cse14) (res (= .cse21 .cse13) (let ((.cse25 (= b b)) (.cse33 (= 0 0))) (let-proof ((.cse26 (refl b)) (.cse34 (refl 0))) (res (= .cse22 .cse1) (res (= .cse23 .cse3) (res (= .cse24 .cse0) (res .cse25 .cse26 (res (= .cse27 .cse28) (res (= .cse29 .cse30) (res (= .cse31 (- 1)) (let ((.cse32 (* (- 1) 1))) (res (= .cse32 (- 1)) (poly* .cse32 (- 1)) (res .cse33 .cse34 (let ((.cse35 (+ 0 .cse32)) (.cse36 (+ 0 (- 1)))) (res (= .cse35 .cse36) (cong (+ 0 .cse32) (+ 0 (- 1))) (res (= .cse31 .cse35) (-def 0 1) (res (= .cse36 (- 1)) (poly+ .cse36 (- 1)) (trans .cse31 .cse35 .cse36 (- 1))))))))) (res (= .cse37 .cse37) (refl .cse37) (cong (= .cse37 .cse31) (= .cse37 (- 1))))) (res .cse25 .cse26 (cong (and b .cse29) (and b .cse30)))) (cong (=> .cse27 b) (=> .cse28 b)))) (res (= .cse38 .cse38) (refl .cse38) (cong (=> .cse38 .cse24) (=> .cse38 .cse0)))) (res .cse25 .cse26 (cong (=> b .cse23) (=> b .cse3)))) (res (= .cse39 .cse4) (res .cse25 .cse26 (res (= .cse40 .cse6) (res (= .cse41 (- 4)) (let ((.cse42 (* (- 1) 4))) (res (= .cse42 (- 4)) (poly* .cse42 (- 4)) (res .cse33 .cse34 (let ((.cse43 (+ 0 .cse42)) (.cse44 (+ 0 (- 4)))) (res (= .cse43 .cse44) (cong (+ 0 .cse42) (+ 0 (- 4))) (res (= .cse41 .cse43) (-def 0 4) (res (= .cse44 (- 4)) (poly+ .cse44 (- 4)) (trans .cse41 .cse43 .cse44 (- 4))))))))) (res (= .cse12 .cse12) (refl .cse12) (cong (= .cse12 .cse41) (= .cse12 (- 4))))) (cong (=> .cse40 b) (=> .cse6 b)))) (cong (and .cse39 .cse22) (and .cse4 .cse1)))))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse21) (=> .cse45 .cse13)))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse20) (=> .cse46 .cse14)))) (cong (not .cse16) (not .cse15))) (=-2 .cse19)))) (not- .cse17))) (res .cse18 (assume .cse18) (not- .cse18))))))))))))))))))))) :proves (- .cse4 - .cse1) :input)))) :proves (- .cse1) :rup))) (res .cse0 (res b (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + b) :input) .cse2) :proves (+ b) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - b) :input)) (! (res .cse3 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse0) :input) (! (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse3) :input) .cse2) :proves (- .cse3) :rup)) :proves (- .cse0) :rup))))))))) :proves () :rup)
unsupported
