success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots41.v0.bpl.mod.smt2:27:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots41.v0.bpl.mod.smt2:30:10: Logical context not inconsistent!")
unsat
(! (let ((.cse14 (ControlFlow 0 2))) (let ((.cse2 (= .cse14 (- 3))) (.cse0 (= (- 3) .cse14))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 3) .cse14)) (res .cse2 (symm .cse14 (- 3)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse61 (* (- 1) x))) (let ((.cse101 (+ .cse61 10))) (let ((.cse20 (<= .cse101 0))) (let ((.cse24 (not .cse20))) (let ((.cse1 (=> .cse2 .cse24))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse8 (= .cse14 (- 1))) (.cse58 (<= .cse61 0))) (let ((.cse6 (=> .cse8 .cse58))) (let ((.cse5 (=> .cse24 .cse6))) (res .cse5 (! (res .cse6 (! (let ((.cse7 (= (- 1) .cse14))) (let ((.cse9 (= .cse8 .cse7))) (let-proof ((.cse10 (res .cse7 (res .cse8 (=+1 .cse9) (symm (- 1) .cse14)) (res .cse8 (symm .cse14 (- 1)) (=+2 .cse9))))) (res .cse7 (! (res .cse8 (=>+ 0 .cse6) (res .cse9 .cse10 (=-2 .cse9))) :proves (+ .cse6 + .cse7) :input) (! (let ((.cse12 (not .cse8))) (res .cse8 (let ((.cse11 (not .cse7))) (res .cse11 (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res .cse9 .cse10 (cong (not .cse8) (not .cse7))) (=-2 .cse13)))) (not- .cse11))) (res .cse12 (assume .cse12) (not- .cse12)))) :proves (- .cse7) :input))))) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (let ((.cse102 (+ .cse61 20))) (let ((.cse35 (<= .cse102 0))) (let ((.cse36 (not .cse35))) (let ((.cse18 (or .cse36 .cse20)) (.cse16 (and .cse1 .cse5))) (let ((.cse15 (=> .cse18 .cse16))) (res .cse15 (! (res .cse16 (and+ .cse16) (=>+ 1 .cse15)) :proves (+ .cse15 - .cse1 - .cse5) :input) (! (let ((.cse90 (= .cse14 (- 4)))) (let ((.cse40 (< 0 .cse102)) (.cse28 (< 0 .cse101)) (.cse17 (=> .cse90 .cse18))) (let-proof ((.cse25 (not+ .cse24)) (.cse37 (not+ .cse36)) (.cse41 (total .cse102 0)) (.cse29 (total .cse101 0))) (res .cse17 (! (res .cse18 (! (let ((.cse31 (+ x (- 9)))) (let ((.cse19 (<= .cse31 0))) (res .cse19 (! (res .cse20 (let ((.cse21 (not .cse19))) (let-proof ((.cse22 (not+ .cse21))) (res .cse21 .cse22 (let ((.cse23 (not .cse21))) (res .cse23 (res .cse24 .cse25 (let ((.cse26 (= .cse24 .cse23))) (res .cse26 (let ((.cse27 (= .cse20 .cse21))) (res .cse27 (res .cse21 (res .cse20 (=+1 .cse27) (res .cse19 .cse22 (farkas 1 .cse20 1 .cse19))) (res .cse20 (res .cse28 .cse29 (res .cse19 (let ((.cse30 (<= 1 .cse31))) (res .cse30 (total-int .cse31 0) (farkas 1 .cse28 1 .cse30))) (not- .cse21))) (=+2 .cse27))) (cong (not .cse20) (not .cse21)))) (=-2 .cse26)))) (not- .cse23)))))) (or+ 1 .cse18)) :proves (+ .cse18 + .cse19) :input) (let ((.cse43 (+ x (- 19)))) (let ((.cse33 (<= 1 .cse43)) (.cse32 (<= .cse43 0))) (let-proof ((.cse34 (total-int .cse43 0))) (res .cse32 (! (res .cse33 .cse34 (farkas 1 .cse33 1 .cse19)) :proves (+ .cse32 - .cse19) :LA ((- 1) 1)) (! (res .cse35 (res .cse36 .cse37 (or+ 0 .cse18)) (let ((.cse38 (not .cse32))) (let-proof ((.cse42 (not- .cse38))) (res .cse38 (let ((.cse39 (= .cse35 .cse38))) (res .cse39 (res .cse38 (res .cse35 (=+1 .cse39) (res .cse32 (not+ .cse38) (farkas 1 .cse35 1 .cse32))) (res .cse35 (res .cse40 .cse41 (res .cse32 (res .cse33 .cse34 (farkas 1 .cse40 1 .cse33)) .cse42)) (=+2 .cse39))) (=-2 .cse39))) .cse42)))) :proves (+ .cse18 - .cse32) :input)))))))) :proves (+ .cse18) :rup) (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse18) :input)) :proves (+ .cse17) :rup) (! (let ((.cse44 (and .cse17 .cse15))) (res .cse44 (and+ .cse44) (let ((.cse99 (= (ControlFlow 0 5) 2))) (let ((.cse45 (=> .cse99 .cse44))) (res .cse45 (=>+ 1 .cse45) (let ((.cse100 (= (ControlFlow 0 0) 5))) (let ((.cse46 (=> .cse100 .cse45))) (res .cse46 (=>+ 1 .cse46) (let ((.cse64 (- 0 1))) (let ((.cse77 (- 0 3)) (.cse63 (= .cse14 .cse64)) (.cse59 (<= 0 x))) (let ((.cse56 (=> .cse63 .cse59)) (.cse76 (= .cse14 .cse77)) (.cse74 (< x 10))) (let ((.cse97 (< x 20)) (.cse82 (<= 10 x)) (.cse91 (- 0 4)) (.cse75 (=> .cse76 .cse74)) (.cse55 (=> .cse74 .cse56))) (let ((.cse54 (and .cse75 .cse55)) (.cse89 (= .cse14 .cse91)) (.cse87 (or .cse97 .cse82))) (let ((.cse88 (=> .cse89 .cse87)) (.cse53 (=> .cse87 .cse54))) (let ((.cse52 (and .cse88 .cse53))) (let ((.cse51 (=> .cse99 .cse52))) (let ((.cse47 (=> .cse100 .cse51))) (let ((.cse49 (not .cse47))) (res .cse47 (let ((.cse48 (not .cse46))) (res .cse48 (res .cse49 (not+ .cse49) (let ((.cse50 (= .cse49 .cse48))) (res .cse50 (res (= .cse47 .cse46) (res (= .cse51 .cse45) (res (= .cse52 .cse44) (let-proof ((.cse84 (res .cse28 .cse29 (farkas 1 .cse82 1 .cse28))) (.cse83 (total 10 x)) (.cse81 (farkas 1 .cse74 1 .cse20))) (let ((.cse85 (= .cse87 .cse18)) (.cse66 (= 0 0)) (.cse70 (= .cse14 .cse14))) (let-proof ((.cse86 (let ((.cse95 (= .cse82 .cse20))) (res .cse95 (res .cse20 (res .cse82 (=+1 .cse95) .cse84) (res .cse82 (res .cse74 .cse83 .cse81) (=+2 .cse95))) (let ((.cse96 (= .cse97 .cse36))) (res .cse96 (res .cse36 (res .cse97 (=+1 .cse96) (res .cse35 .cse37 (farkas 1 .cse97 1 .cse35))) (res .cse97 (let ((.cse98 (<= 20 x))) (res .cse98 (total 20 x) (res .cse35 (res .cse40 .cse41 (farkas 1 .cse98 1 .cse40)) (not- .cse36)))) (=+2 .cse96))) (cong (or .cse97 .cse82) (or .cse36 .cse20))))))) (.cse67 (refl 0)) (.cse71 (refl .cse14))) (res (= .cse53 .cse15) (res (= .cse54 .cse16) (let ((.cse72 (= .cse74 .cse24))) (let-proof ((.cse73 (res .cse24 (res .cse74 (=+1 .cse72) (res .cse20 .cse25 .cse81)) (res .cse74 (res .cse82 .cse83 (res .cse20 .cse84 (not- .cse24))) (=+2 .cse72))))) (res (= .cse55 .cse5) (res (= .cse56 .cse6) (let ((.cse57 (= .cse59 .cse58))) (res .cse57 (res .cse58 (res .cse59 (=+1 .cse57) (let ((.cse60 (< 0 .cse61))) (res .cse60 (total .cse61 0) (farkas 1 .cse59 1 .cse60)))) (res .cse59 (let ((.cse62 (< x 0))) (res .cse62 (total 0 x) (farkas 1 .cse62 1 .cse58))) (=+2 .cse57))) (res (= .cse63 .cse8) (res (= .cse64 (- 1)) (let ((.cse65 (* (- 1) 1))) (res (= .cse65 (- 1)) (poly* .cse65 (- 1)) (res .cse66 .cse67 (let ((.cse68 (+ 0 .cse65)) (.cse69 (+ 0 (- 1)))) (res (= .cse68 .cse69) (cong (+ 0 .cse65) (+ 0 (- 1))) (res (= .cse64 .cse68) (-def 0 1) (res (= .cse69 (- 1)) (poly+ .cse69 (- 1)) (trans .cse64 .cse68 .cse69 (- 1))))))))) (res .cse70 .cse71 (cong (= .cse14 .cse64) (= .cse14 (- 1))))) (cong (=> .cse63 .cse59) (=> .cse8 .cse58))))) (res .cse72 .cse73 (cong (=> .cse74 .cse56) (=> .cse24 .cse6)))) (res (= .cse75 .cse1) (res .cse72 .cse73 (res (= .cse76 .cse2) (res (= .cse77 (- 3)) (let ((.cse78 (* (- 1) 3))) (res (= .cse78 (- 3)) (poly* .cse78 (- 3)) (res .cse66 .cse67 (let ((.cse79 (+ 0 .cse78)) (.cse80 (+ 0 (- 3)))) (res (= .cse79 .cse80) (cong (+ 0 .cse78) (+ 0 (- 3))) (res (= .cse77 .cse79) (-def 0 3) (res (= .cse80 (- 3)) (poly+ .cse80 (- 3)) (trans .cse77 .cse79 .cse80 (- 3))))))))) (res .cse70 .cse71 (cong (= .cse14 .cse77) (= .cse14 (- 3))))) (cong (=> .cse76 .cse74) (=> .cse2 .cse24)))) (cong (and .cse75 .cse55) (and .cse1 .cse5)))))) (res .cse85 .cse86 (cong (=> .cse87 .cse54) (=> .cse18 .cse16)))) (res (= .cse88 .cse17) (res .cse85 .cse86 (res (= .cse89 .cse90) (res (= .cse91 (- 4)) (let ((.cse92 (* (- 1) 4))) (res (= .cse92 (- 4)) (poly* .cse92 (- 4)) (res .cse66 .cse67 (let ((.cse93 (+ 0 .cse92)) (.cse94 (+ 0 (- 4)))) (res (= .cse93 .cse94) (cong (+ 0 .cse92) (+ 0 (- 4))) (res (= .cse91 .cse93) (-def 0 4) (res (= .cse94 (- 4)) (poly+ .cse94 (- 4)) (trans .cse91 .cse93 .cse94 (- 4))))))))) (res .cse70 .cse71 (cong (= .cse14 .cse91) (= .cse14 (- 4))))) (cong (=> .cse89 .cse87) (=> .cse90 .cse18)))) (cong (and .cse88 .cse53) (and .cse17 .cse15))))))) (res (= .cse99 .cse99) (refl .cse99) (cong (=> .cse99 .cse52) (=> .cse99 .cse44)))) (res (= .cse100 .cse100) (refl .cse100) (cong (=> .cse100 .cse51) (=> .cse100 .cse45)))) (cong (not .cse47) (not .cse46))) (=-2 .cse50)))) (not- .cse48))) (res .cse49 (assume .cse49) (not- .cse49))))))))))))))))))))) :proves (- .cse17 - .cse15) :input))))) :proves (- .cse15) :rup))))))))))) :proves (- .cse1) :rup))))))) :proves (+ .cse0) :rup) (! (let ((.cse104 (not .cse2))) (res .cse2 (let ((.cse103 (not .cse0))) (res .cse103 (res .cse104 (not+ .cse104) (let ((.cse105 (= .cse104 .cse103))) (res .cse105 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse105)))) (not- .cse103))) (res .cse104 (assume .cse104) (not- .cse104)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (res true true+ (let ((.cse0 (=> (= (ControlFlow 0 0) 1) true))) (res .cse0 (=>+ 1 .cse0) (let ((.cse1 (not .cse0))) (res .cse1 (assume .cse1) (not- .cse1)))))) :proves () :input)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots41.v0.bpl.mod.smt2:98:10: Logical context not inconsistent!")
unsat
(! (let ((.cse38 (+ z (- 20))) (.cse43 (+ (* (- 1) z) 2)) (.cse51 (ControlFlow 0 2))) (let ((.cse46 (= .cse51 (- 1))) (.cse40 (<= .cse43 0)) (.cse21 (<= .cse38 0)) (.cse19 (= (ControlFlow 0 4) 2))) (let ((.cse18 (and .cse21 .cse19)) (.cse2 (=> .cse46 .cse40)) (.cse53 (ControlFlow 0 5))) (let ((.cse28 (= .cse53 4)) (.cse1 (=> .cse18 .cse2))) (let ((.cse0 (=> .cse28 .cse1))) (let-proof ((.cse3 (! (let ((.cse54 (= (- 1) .cse51))) (let ((.cse55 (= .cse46 .cse54))) (let-proof ((.cse56 (res .cse54 (res .cse46 (=+1 .cse55) (symm (- 1) .cse51)) (res .cse46 (symm .cse51 (- 1)) (=+2 .cse55))))) (res .cse54 (! (res .cse46 (=>+ 0 .cse2) (res .cse55 .cse56 (=-2 .cse55))) :proves (+ .cse2 + .cse54) :input) (! (let ((.cse58 (not .cse46))) (res .cse46 (let ((.cse57 (not .cse54))) (res .cse57 (res .cse58 (not+ .cse58) (let ((.cse59 (= .cse58 .cse57))) (res .cse59 (res .cse55 .cse56 (cong (not .cse46) (not .cse54))) (=-2 .cse59)))) (not- .cse57))) (res .cse58 (assume .cse58) (not- .cse58)))) :proves (- .cse54) :input))))) :proves (+ .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 .cse3 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse35 (not .cse21)) (.cse33 (= (ControlFlow 0 3) 2))) (let ((.cse32 (and .cse35 .cse33))) (let ((.cse36 (= .cse53 3)) (.cse5 (=> .cse32 .cse2))) (let ((.cse4 (=> .cse36 .cse5))) (res .cse4 (! (res .cse5 (! (res .cse2 .cse3 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse2) :input)) :proves (+ .cse5) :rup) (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse5) :input)) :proves (+ .cse4) :rup) (! (let ((.cse6 (and .cse4 .cse0))) (res .cse6 (and+ .cse6) (let ((.cse52 (= (ControlFlow 0 0) 5))) (let ((.cse7 (=> .cse52 .cse6))) (res .cse7 (=>+ 1 .cse7) (let ((.cse47 (- 0 1))) (let ((.cse45 (= .cse51 .cse47)) (.cse41 (<= 2 z)) (.cse22 (<= z 20)) (.cse24 (< 20 z))) (let ((.cse31 (and .cse24 .cse33)) (.cse17 (and .cse22 .cse19)) (.cse27 (=> .cse45 .cse41))) (let ((.cse14 (=> .cse17 .cse27)) (.cse30 (=> .cse31 .cse27))) (let ((.cse29 (=> .cse36 .cse30)) (.cse13 (=> .cse28 .cse14))) (let ((.cse12 (and .cse29 .cse13))) (let ((.cse8 (=> .cse52 .cse12))) (let ((.cse10 (not .cse8))) (res .cse8 (let ((.cse9 (not .cse7))) (res .cse9 (res .cse10 (not+ .cse10) (let ((.cse11 (= .cse10 .cse9))) (res .cse11 (res (= .cse8 .cse7) (res (= .cse12 .cse6) (let ((.cse15 (= .cse27 .cse2))) (let-proof ((.cse16 (let ((.cse39 (= .cse41 .cse40))) (res .cse39 (res .cse40 (res .cse41 (=+1 .cse39) (let ((.cse42 (< 0 .cse43))) (res .cse42 (total .cse43 0) (farkas 1 .cse41 1 .cse42)))) (res .cse41 (let ((.cse44 (< z 2))) (res .cse44 (total 2 z) (farkas 1 .cse44 1 .cse40))) (=+2 .cse39))) (res (= .cse45 .cse46) (res (= .cse47 (- 1)) (let ((.cse48 (* (- 1) 1))) (res (= .cse48 (- 1)) (poly* .cse48 (- 1)) (res (= 0 0) (refl 0) (let ((.cse49 (+ 0 .cse48)) (.cse50 (+ 0 (- 1)))) (res (= .cse49 .cse50) (cong (+ 0 .cse48) (+ 0 (- 1))) (res (= .cse47 .cse49) (-def 0 1) (res (= .cse50 (- 1)) (poly+ .cse50 (- 1)) (trans .cse47 .cse49 .cse50 (- 1))))))))) (res (= .cse51 .cse51) (refl .cse51) (cong (= .cse51 .cse47) (= .cse51 (- 1))))) (cong (=> .cse45 .cse41) (=> .cse46 .cse40)))))) (.cse26 (farkas 1 .cse24 1 .cse21)) (.cse25 (total z 20)) (.cse23 (let ((.cse37 (< 0 .cse38))) (res .cse37 (total .cse38 0) (farkas 1 .cse22 1 .cse37))))) (res (= .cse13 .cse0) (res (= .cse14 .cse1) (res .cse15 .cse16 (res (= .cse17 .cse18) (res (= .cse19 .cse19) (refl .cse19) (let ((.cse20 (= .cse22 .cse21))) (res .cse20 (res .cse21 (res .cse22 (=+1 .cse20) .cse23) (res .cse22 (res .cse24 .cse25 .cse26) (=+2 .cse20))) (cong (and .cse22 .cse19) (and .cse21 .cse19))))) (cong (=> .cse17 .cse27) (=> .cse18 .cse2)))) (res (= .cse28 .cse28) (refl .cse28) (cong (=> .cse28 .cse14) (=> .cse28 .cse1)))) (res (= .cse29 .cse4) (res (= .cse30 .cse5) (res .cse15 .cse16 (res (= .cse31 .cse32) (res (= .cse33 .cse33) (refl .cse33) (let ((.cse34 (= .cse24 .cse35))) (res .cse34 (res .cse35 (res .cse24 (=+1 .cse34) (res .cse21 (not+ .cse35) .cse26)) (res .cse24 (res .cse22 .cse25 (res .cse21 .cse23 (not- .cse35))) (=+2 .cse34))) (cong (and .cse24 .cse33) (and .cse35 .cse33))))) (cong (=> .cse31 .cse27) (=> .cse32 .cse2)))) (res (= .cse36 .cse36) (refl .cse36) (cong (=> .cse36 .cse30) (=> .cse36 .cse5)))) (cong (and .cse29 .cse13) (and .cse4 .cse0)))))) (res (= .cse52 .cse52) (refl .cse52) (cong (=> .cse52 .cse12) (=> .cse52 .cse6)))) (cong (not .cse8) (not .cse7))) (=-2 .cse11)))) (not- .cse9))) (res .cse10 (assume .cse10) (not- .cse10)))))))))))))))) :proves (- .cse4 - .cse0) :input))))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots41.v0.bpl.mod.smt2:134:10: Logical context not inconsistent!")
unsat
(! (let ((.cse17 (ControlFlow 0 2))) (let ((.cse1 (= .cse17 (- 1))) (.cse0 (= (- 1) .cse17))) (let ((.cse20 (= .cse1 .cse0))) (let-proof ((.cse21 (res .cse0 (res .cse1 (=+1 .cse20) (symm (- 1) .cse17)) (res .cse1 (symm .cse17 (- 1)) (=+2 .cse20))))) (res .cse0 (! (res .cse1 (let ((.cse11 (not (= u 53)))) (let ((.cse2 (=> .cse1 .cse11))) (res .cse2 (=>+ 0 .cse2) (let ((.cse18 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse18 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse19 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse19 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse13 (- 0 1))) (let ((.cse12 (= .cse17 .cse13))) (let ((.cse10 (=> .cse12 .cse11))) (let ((.cse9 (=> .cse18 .cse10))) (let ((.cse5 (=> .cse19 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (res (= .cse11 .cse11) (refl .cse11) (res (= .cse12 .cse1) (res (= .cse13 (- 1)) (let ((.cse14 (* (- 1) 1))) (res (= .cse14 (- 1)) (poly* .cse14 (- 1)) (res (= 0 0) (refl 0) (let ((.cse15 (+ 0 .cse14)) (.cse16 (+ 0 (- 1)))) (res (= .cse15 .cse16) (cong (+ 0 .cse14) (+ 0 (- 1))) (res (= .cse13 .cse15) (-def 0 1) (res (= .cse16 (- 1)) (poly+ .cse16 (- 1)) (trans .cse13 .cse15 .cse16 (- 1))))))))) (res (= .cse17 .cse17) (refl .cse17) (cong (= .cse17 .cse13) (= .cse17 (- 1))))) (cong (=> .cse12 .cse11) (=> .cse1 .cse11)))) (res (= .cse18 .cse18) (refl .cse18) (cong (=> .cse18 .cse10) (=> .cse18 .cse2)))) (res (= .cse19 .cse19) (refl .cse19) (cong (=> .cse19 .cse9) (=> .cse19 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7)))))))))))))))))) (res .cse20 .cse21 (=-2 .cse20))) :proves (+ .cse0) :input) (! (let ((.cse23 (not .cse1))) (res .cse1 (let ((.cse22 (not .cse0))) (res .cse22 (res .cse23 (not+ .cse23) (let ((.cse24 (= .cse23 .cse22))) (res .cse24 (res .cse20 .cse21 (cong (not .cse1) (not .cse0))) (=-2 .cse24)))) (not- .cse22))) (res .cse23 (assume .cse23) (not- .cse23)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (res true true+ (let ((.cse15 (ControlFlow 0 2))) (let ((.cse10 (= .cse15 (- 1)))) (let ((.cse0 (=> .cse10 true))) (res .cse0 (=>+ 1 .cse0) (let ((.cse16 (= (ControlFlow 0 3) 2))) (let ((.cse1 (=> .cse16 .cse0))) (res .cse1 (=>+ 1 .cse1) (let ((.cse17 (= (ControlFlow 0 0) 3))) (let ((.cse2 (=> .cse17 .cse1))) (res .cse2 (=>+ 1 .cse2) (let ((.cse11 (- 0 1))) (let ((.cse9 (= .cse15 .cse11))) (let ((.cse8 (=> .cse9 true))) (let ((.cse7 (=> .cse16 .cse8))) (let ((.cse3 (=> .cse17 .cse7))) (let ((.cse5 (not .cse3))) (res .cse3 (let ((.cse4 (not .cse2))) (res .cse4 (res .cse5 (not+ .cse5) (let ((.cse6 (= .cse5 .cse4))) (res .cse6 (res (= .cse3 .cse2) (res (= .cse7 .cse1) (res (= .cse8 .cse0) (res (= true true) (refl true) (res (= .cse9 .cse10) (res (= .cse11 (- 1)) (let ((.cse12 (* (- 1) 1))) (res (= .cse12 (- 1)) (poly* .cse12 (- 1)) (res (= 0 0) (refl 0) (let ((.cse13 (+ 0 .cse12)) (.cse14 (+ 0 (- 1)))) (res (= .cse13 .cse14) (cong (+ 0 .cse12) (+ 0 (- 1))) (res (= .cse11 .cse13) (-def 0 1) (res (= .cse14 (- 1)) (poly+ .cse14 (- 1)) (trans .cse11 .cse13 .cse14 (- 1))))))))) (res (= .cse15 .cse15) (refl .cse15) (cong (= .cse15 .cse11) (= .cse15 (- 1))))) (cong (=> .cse9 true) (=> .cse10 true)))) (res (= .cse16 .cse16) (refl .cse16) (cong (=> .cse16 .cse8) (=> .cse16 .cse0)))) (res (= .cse17 .cse17) (refl .cse17) (cong (=> .cse17 .cse7) (=> .cse17 .cse1)))) (cong (not .cse3) (not .cse2))) (=-2 .cse6)))) (not- .cse4))) (res .cse5 (assume .cse5) (not- .cse5)))))))))))))))))))) :proves () :input)
unsupported
