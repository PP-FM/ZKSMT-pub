success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots24.v0.bpl.mod.smt2:30:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots24.v0.bpl.mod.smt2:33:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots24.v0.bpl.mod.smt2:36:10: Logical context not inconsistent!")
unsat
(! (let ((.cse120 (ControlFlow 0 7))) (let ((.cse2 (= .cse120 (- 8))) (.cse0 (= (- 8) .cse120))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 8) .cse120)) (res .cse2 (symm .cse120 (- 8)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse165 (ControlFlow 0 2))) (let ((.cse160 (= .cse165 (- 1)))) (let ((.cse110 (= .cse120 2)) (.cse7 (=> .cse160 true))) (let ((.cse6 (=> .cse110 .cse7))) (let-proof ((.cse17 true+)) (let ((.cse5 (=> false .cse6))) (let-proof ((.cse8 (! (res true .cse17 (=>+ 1 .cse7)) :proves (+ .cse7) :input))) (res .cse5 (! (res .cse6 (! (res .cse7 .cse8 (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (let ((.cse167 (ControlFlow 0 13))) (let ((.cse126 (= .cse167 7)) (.cse10 (and .cse1 .cse5))) (let ((.cse9 (=> .cse126 .cse10))) (res .cse9 (! (res .cse10 (and+ .cse10) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse1 - .cse5) :input) (! (let ((.cse83 (ControlFlow 0 9))) (let ((.cse67 (= .cse83 2))) (let ((.cse15 (=> .cse67 .cse7)) (.cse74 (= .cse83 (- 10)))) (let ((.cse16 (=> .cse74 true)) (.cse14 (=> true .cse15))) (let ((.cse18 (and .cse16 .cse14)) (.cse89 (= .cse83 (- 11)))) (let ((.cse19 (=> .cse89 true)) (.cse13 (=> true .cse18))) (let ((.cse20 (and .cse19 .cse13)) (.cse99 (= .cse83 (- 12)))) (let ((.cse21 (=> .cse99 true)) (.cse12 (=> true .cse20))) (let ((.cse104 (= .cse167 9)) (.cse22 (and .cse21 .cse12))) (let ((.cse11 (=> .cse104 .cse22))) (res .cse11 (! (res .cse12 (! (res .cse13 (! (res .cse14 (! (res .cse15 (! (res .cse7 .cse8 (! (=>+ 1 .cse15) :proves (+ .cse15 - .cse7) :input)) :proves (+ .cse15) :rup) (! (=>+ 1 .cse14) :proves (+ .cse14 - .cse15) :input)) :proves (+ .cse14) :rup) (res .cse16 (! (res true .cse17 (=>+ 1 .cse16)) :proves (+ .cse16) :input) (! (res .cse18 (and+ .cse18) (=>+ 1 .cse13)) :proves (+ .cse13 - .cse16 - .cse14) :input))) :proves (+ .cse13) :rup) (res .cse19 (! (res true .cse17 (=>+ 1 .cse19)) :proves (+ .cse19) :input) (! (res .cse20 (and+ .cse20) (=>+ 1 .cse12)) :proves (+ .cse12 - .cse19 - .cse13) :input))) :proves (+ .cse12) :rup) (res .cse21 (! (res true .cse17 (=>+ 1 .cse21)) :proves (+ .cse21) :input) (! (res .cse22 (and+ .cse22) (=>+ 1 .cse11)) :proves (+ .cse11 - .cse21 - .cse12) :input))) :proves (+ .cse11) :rup) (let ((.cse34 (ControlFlow 0 5))) (let ((.cse132 (= .cse34 2))) (let ((.cse25 (=> .cse132 .cse7)) (.cse28 (= .cse34 (- 6)))) (let ((.cse26 (=> .cse28 false)) (.cse24 (=> false .cse25))) (let ((.cse142 (= .cse167 5)) (.cse35 (and .cse26 .cse24))) (let ((.cse23 (=> .cse142 .cse35))) (res .cse23 (! (res .cse24 (! (res .cse25 (! (res .cse7 .cse8 (! (=>+ 1 .cse25) :proves (+ .cse25 - .cse7) :input)) :proves (+ .cse25) :rup) (! (=>+ 1 .cse24) :proves (+ .cse24 - .cse25) :input)) :proves (+ .cse24) :rup) (res .cse26 (! (let ((.cse27 (= (- 6) .cse34))) (let ((.cse29 (= .cse28 .cse27))) (let-proof ((.cse30 (res .cse27 (res .cse28 (=+1 .cse29) (symm (- 6) .cse34)) (res .cse28 (symm .cse34 (- 6)) (=+2 .cse29))))) (res .cse27 (! (res .cse28 (=>+ 0 .cse26) (res .cse29 .cse30 (=-2 .cse29))) :proves (+ .cse26 + .cse27) :input) (! (let ((.cse32 (not .cse28))) (res .cse28 (let ((.cse31 (not .cse27))) (res .cse31 (res .cse32 (not+ .cse32) (let ((.cse33 (= .cse32 .cse31))) (res .cse33 (res .cse29 .cse30 (cong (not .cse28) (not .cse27))) (=-2 .cse33)))) (not- .cse31))) (res .cse32 (assume .cse32) (not- .cse32)))) :proves (- .cse27) :input))))) :proves (+ .cse26) :rup) (! (res .cse35 (and+ .cse35) (=>+ 1 .cse23)) :proves (+ .cse23 - .cse26 - .cse24) :input))) :proves (+ .cse23) :rup) (let ((.cse46 (ControlFlow 0 3))) (let ((.cse146 (= .cse46 2)) (.cse40 (= .cse46 (- 4)))) (let ((.cse38 (=> .cse40 false)) (.cse37 (=> .cse146 .cse7))) (let ((.cse156 (= .cse167 3)) (.cse47 (and .cse38 .cse37))) (let ((.cse36 (=> .cse156 .cse47))) (res .cse36 (! (res .cse37 (! (res .cse7 .cse8 (! (=>+ 1 .cse37) :proves (+ .cse37 - .cse7) :input)) :proves (+ .cse37) :rup) (res .cse38 (! (let ((.cse39 (= (- 4) .cse46))) (let ((.cse41 (= .cse40 .cse39))) (let-proof ((.cse42 (res .cse39 (res .cse40 (=+1 .cse41) (symm (- 4) .cse46)) (res .cse40 (symm .cse46 (- 4)) (=+2 .cse41))))) (res .cse39 (! (res .cse40 (=>+ 0 .cse38) (res .cse41 .cse42 (=-2 .cse41))) :proves (+ .cse38 + .cse39) :input) (! (let ((.cse44 (not .cse40))) (res .cse40 (let ((.cse43 (not .cse39))) (res .cse43 (res .cse44 (not+ .cse44) (let ((.cse45 (= .cse44 .cse43))) (res .cse45 (res .cse41 .cse42 (cong (not .cse40) (not .cse39))) (=-2 .cse45)))) (not- .cse43))) (res .cse44 (assume .cse44) (not- .cse44)))) :proves (- .cse39) :input))))) :proves (+ .cse38) :rup) (! (res .cse47 (and+ .cse47) (=>+ 1 .cse36)) :proves (+ .cse36 - .cse38 - .cse37) :input))) :proves (+ .cse36) :rup) (! (let ((.cse48 (and .cse36 .cse23))) (res .cse48 (and+ .cse48) (let ((.cse49 (and .cse48 .cse9))) (res .cse49 (and+ .cse49) (let ((.cse50 (and .cse49 .cse11))) (res .cse50 (and+ .cse50) (let ((.cse166 (= (ControlFlow 0 0) 13))) (let ((.cse51 (=> .cse166 .cse50))) (res .cse51 (=>+ 1 .cse51) (let ((.cse161 (- 0 1))) (let ((.cse159 (= .cse165 .cse161)) (.cse158 (= 3 3))) (let ((.cse75 (- 0 10)) (.cse68 (=> .cse159 .cse158))) (let ((.cse64 (=> .cse67 .cse68)) (.cse73 (= .cse83 .cse75)) (.cse71 (= 5 5))) (let ((.cse150 (= 1 1)) (.cse152 (- 0 4)) (.cse138 (- 0 6)) (.cse90 (- 0 11)) (.cse72 (=> .cse73 .cse71)) (.cse63 (=> .cse71 .cse64))) (let ((.cse62 (and .cse72 .cse63)) (.cse88 (= .cse83 .cse90)) (.cse86 (= 4 4)) (.cse131 (=> .cse132 .cse68)) (.cse137 (= .cse34 .cse138)) (.cse135 (not .cse71)) (.cse151 (= .cse46 .cse152)) (.cse148 (not .cse150)) (.cse125 (= 6 6)) (.cse116 (- 0 8))) (let ((.cse109 (=> .cse110 .cse68)) (.cse115 (= .cse120 .cse116)) (.cse113 (not .cse125)) (.cse147 (=> .cse151 .cse148)) (.cse145 (=> .cse146 .cse68)) (.cse136 (=> .cse137 .cse135)) (.cse130 (=> .cse135 .cse131)) (.cse100 (- 0 12)) (.cse87 (=> .cse88 .cse86)) (.cse61 (=> .cse86 .cse62))) (let ((.cse60 (and .cse87 .cse61)) (.cse98 (= .cse83 .cse100)) (.cse96 (= 2 2)) (.cse129 (and .cse136 .cse130)) (.cse144 (and .cse147 .cse145)) (.cse114 (=> .cse115 .cse113)) (.cse108 (=> .cse113 .cse109))) (let ((.cse107 (and .cse114 .cse108)) (.cse143 (=> .cse156 .cse144)) (.cse128 (=> .cse142 .cse129)) (.cse97 (=> .cse98 .cse96)) (.cse59 (=> .cse96 .cse60))) (let ((.cse58 (and .cse97 .cse59)) (.cse127 (and .cse143 .cse128)) (.cse106 (=> .cse126 .cse107))) (let ((.cse105 (and .cse127 .cse106)) (.cse57 (=> .cse104 .cse58))) (let ((.cse56 (and .cse105 .cse57))) (let ((.cse52 (=> .cse166 .cse56))) (let ((.cse54 (not .cse52))) (res .cse52 (let ((.cse53 (not .cse51))) (res .cse53 (res .cse54 (not+ .cse54) (let ((.cse55 (= .cse54 .cse53))) (res .cse55 (res (= .cse52 .cse51) (res (= .cse56 .cse50) (let ((.cse77 (= 0 0)) (.cse69 (= .cse71 true))) (let-proof ((.cse78 (refl 0))) (let ((.cse65 (= .cse68 .cse7))) (let-proof ((.cse70 (res true .cse17 (res .cse71 (refl 5) (=+2 .cse69)))) (.cse66 (let ((.cse157 (= .cse158 true))) (res .cse157 (res true .cse17 (res .cse158 (refl 3) (=+2 .cse157))) (res (= .cse159 .cse160) (res (= .cse161 (- 1)) (let ((.cse162 (* (- 1) 1))) (res (= .cse162 (- 1)) (poly* .cse162 (- 1)) (res .cse77 .cse78 (let ((.cse163 (+ 0 .cse162)) (.cse164 (+ 0 (- 1)))) (res (= .cse163 .cse164) (cong (+ 0 .cse162) (+ 0 (- 1))) (res (= .cse161 .cse163) (-def 0 1) (res (= .cse164 (- 1)) (poly+ .cse164 (- 1)) (trans .cse161 .cse163 .cse164 (- 1))))))))) (res (= .cse165 .cse165) (refl .cse165) (cong (= .cse165 .cse161) (= .cse165 (- 1))))) (cong (=> .cse159 .cse158) (=> .cse160 true))))))) (res (= .cse57 .cse11) (res (= .cse58 .cse22) (let ((.cse94 (= .cse96 true))) (let ((.cse81 (= .cse83 .cse83))) (let-proof ((.cse95 (res true .cse17 (res .cse96 (refl 2) (=+2 .cse94)))) (.cse82 (refl .cse83))) (res (= .cse59 .cse12) (res (= .cse60 .cse20) (let ((.cse84 (= .cse86 true))) (let-proof ((.cse85 (res true .cse17 (res .cse86 (refl 4) (=+2 .cse84))))) (res (= .cse61 .cse13) (res (= .cse62 .cse18) (res (= .cse63 .cse14) (res (= .cse64 .cse15) (res .cse65 .cse66 (res (= .cse67 .cse67) (refl .cse67) (cong (=> .cse67 .cse68) (=> .cse67 .cse7)))) (res .cse69 .cse70 (cong (=> .cse71 .cse64) (=> true .cse15)))) (res (= .cse72 .cse16) (res .cse69 .cse70 (res (= .cse73 .cse74) (res (= .cse75 (- 10)) (let ((.cse76 (* (- 1) 10))) (res (= .cse76 (- 10)) (poly* .cse76 (- 10)) (res .cse77 .cse78 (let ((.cse79 (+ 0 .cse76)) (.cse80 (+ 0 (- 10)))) (res (= .cse79 .cse80) (cong (+ 0 .cse76) (+ 0 (- 10))) (res (= .cse75 .cse79) (-def 0 10) (res (= .cse80 (- 10)) (poly+ .cse80 (- 10)) (trans .cse75 .cse79 .cse80 (- 10))))))))) (res .cse81 .cse82 (cong (= .cse83 .cse75) (= .cse83 (- 10))))) (cong (=> .cse73 .cse71) (=> .cse74 true)))) (cong (and .cse72 .cse63) (and .cse16 .cse14)))) (res .cse84 .cse85 (cong (=> .cse86 .cse62) (=> true .cse18)))) (res (= .cse87 .cse19) (res .cse84 .cse85 (res (= .cse88 .cse89) (res (= .cse90 (- 11)) (let ((.cse91 (* (- 1) 11))) (res (= .cse91 (- 11)) (poly* .cse91 (- 11)) (res .cse77 .cse78 (let ((.cse92 (+ 0 .cse91)) (.cse93 (+ 0 (- 11)))) (res (= .cse92 .cse93) (cong (+ 0 .cse91) (+ 0 (- 11))) (res (= .cse90 .cse92) (-def 0 11) (res (= .cse93 (- 11)) (poly+ .cse93 (- 11)) (trans .cse90 .cse92 .cse93 (- 11))))))))) (res .cse81 .cse82 (cong (= .cse83 .cse90) (= .cse83 (- 11))))) (cong (=> .cse88 .cse86) (=> .cse89 true)))) (cong (and .cse87 .cse61) (and .cse19 .cse13)))))) (res .cse94 .cse95 (cong (=> .cse96 .cse60) (=> true .cse20)))) (res (= .cse97 .cse21) (res .cse94 .cse95 (res (= .cse98 .cse99) (res (= .cse100 (- 12)) (let ((.cse101 (* (- 1) 12))) (res (= .cse101 (- 12)) (poly* .cse101 (- 12)) (res .cse77 .cse78 (let ((.cse102 (+ 0 .cse101)) (.cse103 (+ 0 (- 12)))) (res (= .cse102 .cse103) (cong (+ 0 .cse101) (+ 0 (- 12))) (res (= .cse100 .cse102) (-def 0 12) (res (= .cse103 (- 12)) (poly+ .cse103 (- 12)) (trans .cse100 .cse102 .cse103 (- 12))))))))) (res .cse81 .cse82 (cong (= .cse83 .cse100) (= .cse83 (- 12))))) (cong (=> .cse98 .cse96) (=> .cse99 true)))) (cong (and .cse97 .cse59) (and .cse21 .cse12))))))) (res (= .cse104 .cse104) (refl .cse104) (cong (=> .cse104 .cse58) (=> .cse104 .cse22)))) (res (= .cse105 .cse49) (let ((.cse123 (not true))) (let ((.cse121 (= .cse123 false))) (let-proof ((.cse122 (res false (res .cse123 (=+1 .cse121) (res true .cse17 (not- .cse123))) false-))) (res (= .cse106 .cse9) (res (= .cse107 .cse10) (let ((.cse111 (= .cse113 false))) (let-proof ((.cse112 (res .cse121 .cse122 (res (= .cse113 .cse123) (let ((.cse124 (= .cse125 true))) (res .cse124 (res true .cse17 (res .cse125 (refl 6) (=+2 .cse124))) (cong (not .cse125) (not true)))) (trans .cse113 .cse123 false))))) (res (= .cse108 .cse5) (res (= .cse109 .cse6) (res .cse65 .cse66 (res (= .cse110 .cse110) (refl .cse110) (cong (=> .cse110 .cse68) (=> .cse110 .cse7)))) (res .cse111 .cse112 (cong (=> .cse113 .cse109) (=> false .cse6)))) (res (= .cse114 .cse1) (res .cse111 .cse112 (res (= .cse115 .cse2) (res (= .cse116 (- 8)) (let ((.cse117 (* (- 1) 8))) (res (= .cse117 (- 8)) (poly* .cse117 (- 8)) (res .cse77 .cse78 (let ((.cse118 (+ 0 .cse117)) (.cse119 (+ 0 (- 8)))) (res (= .cse118 .cse119) (cong (+ 0 .cse117) (+ 0 (- 8))) (res (= .cse116 .cse118) (-def 0 8) (res (= .cse119 (- 8)) (poly+ .cse119 (- 8)) (trans .cse116 .cse118 .cse119 (- 8))))))))) (res (= .cse120 .cse120) (refl .cse120) (cong (= .cse120 .cse116) (= .cse120 (- 8))))) (cong (=> .cse115 .cse113) (=> .cse2 false)))) (cong (and .cse114 .cse108) (and .cse1 .cse5)))))) (res (= .cse126 .cse126) (refl .cse126) (cong (=> .cse126 .cse107) (=> .cse126 .cse10)))) (res (= .cse127 .cse48) (res (= .cse128 .cse23) (res (= .cse129 .cse35) (let ((.cse133 (= .cse135 false))) (let-proof ((.cse134 (res .cse121 .cse122 (res (= .cse135 .cse123) (res .cse69 .cse70 (cong (not .cse71) (not true))) (trans .cse135 .cse123 false))))) (res (= .cse130 .cse24) (res (= .cse131 .cse25) (res .cse65 .cse66 (res (= .cse132 .cse132) (refl .cse132) (cong (=> .cse132 .cse68) (=> .cse132 .cse7)))) (res .cse133 .cse134 (cong (=> .cse135 .cse131) (=> false .cse25)))) (res (= .cse136 .cse26) (res .cse133 .cse134 (res (= .cse137 .cse28) (res (= .cse138 (- 6)) (let ((.cse139 (* (- 1) 6))) (res (= .cse139 (- 6)) (poly* .cse139 (- 6)) (res .cse77 .cse78 (let ((.cse140 (+ 0 .cse139)) (.cse141 (+ 0 (- 6)))) (res (= .cse140 .cse141) (cong (+ 0 .cse139) (+ 0 (- 6))) (res (= .cse138 .cse140) (-def 0 6) (res (= .cse141 (- 6)) (poly+ .cse141 (- 6)) (trans .cse138 .cse140 .cse141 (- 6))))))))) (res (= .cse34 .cse34) (refl .cse34) (cong (= .cse34 .cse138) (= .cse34 (- 6))))) (cong (=> .cse137 .cse135) (=> .cse28 false)))) (cong (and .cse136 .cse130) (and .cse26 .cse24)))))) (res (= .cse142 .cse142) (refl .cse142) (cong (=> .cse142 .cse129) (=> .cse142 .cse35)))) (res (= .cse143 .cse36) (res (= .cse144 .cse47) (res (= .cse145 .cse37) (res .cse65 .cse66 (res (= .cse146 .cse146) (refl .cse146) (cong (=> .cse146 .cse68) (=> .cse146 .cse7)))) (res (= .cse147 .cse38) (res (= .cse148 false) (res .cse121 .cse122 (res (= .cse148 .cse123) (let ((.cse149 (= .cse150 true))) (res .cse149 (res true .cse17 (res .cse150 (refl 1) (=+2 .cse149))) (cong (not .cse150) (not true)))) (trans .cse148 .cse123 false))) (res (= .cse151 .cse40) (res (= .cse152 (- 4)) (let ((.cse153 (* (- 1) 4))) (res (= .cse153 (- 4)) (poly* .cse153 (- 4)) (res .cse77 .cse78 (let ((.cse154 (+ 0 .cse153)) (.cse155 (+ 0 (- 4)))) (res (= .cse154 .cse155) (cong (+ 0 .cse153) (+ 0 (- 4))) (res (= .cse152 .cse154) (-def 0 4) (res (= .cse155 (- 4)) (poly+ .cse155 (- 4)) (trans .cse152 .cse154 .cse155 (- 4))))))))) (res (= .cse46 .cse46) (refl .cse46) (cong (= .cse46 .cse152) (= .cse46 (- 4))))) (cong (=> .cse151 .cse148) (=> .cse40 false)))) (cong (and .cse147 .cse145) (and .cse38 .cse37)))) (res (= .cse156 .cse156) (refl .cse156) (cong (=> .cse156 .cse144) (=> .cse156 .cse47)))) (cong (and .cse143 .cse128) (and .cse36 .cse23)))) (cong (and .cse127 .cse106) (and .cse48 .cse9))))))) (cong (and .cse105 .cse57) (and .cse49 .cse11)))))))) (res (= .cse166 .cse166) (refl .cse166) (cong (=> .cse166 .cse56) (=> .cse166 .cse50)))) (cong (not .cse52) (not .cse51))) (=-2 .cse55)))) (not- .cse53))) (res .cse54 (assume .cse54) (not- .cse54)))))))))))))))))))))))))) :proves (- .cse36 - .cse9 - .cse23 - .cse11) :input))))))))))))))))))))))))) :proves (- .cse9) :rup))))))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse169 (not .cse2))) (res .cse2 (let ((.cse168 (not .cse0))) (res .cse168 (res .cse169 (not+ .cse169) (let ((.cse170 (= .cse169 .cse168))) (res .cse170 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse170)))) (not- .cse168))) (res .cse169 (assume .cse169) (not- .cse169)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
