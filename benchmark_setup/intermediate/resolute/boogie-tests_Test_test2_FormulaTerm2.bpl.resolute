success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse0 (= a b))) (let ((.cse26 (ControlFlow 0 2)) (.cse3 (xor t@0 .cse0))) (let ((.cse8 (not .cse3)) (.cse21 (= .cse26 (- 1)))) (let ((.cse5 (and .cse8 .cse21))) (let ((.cse6 (=> .cse5 t@0))) (let ((.cse1 (=> .cse0 .cse6))) (let-proof ((.cse4 (xor+ (t@0 .cse0) (t@0) (.cse0))) (.cse9 (not- .cse8))) (let-proof ((.cse2 (let ((.cse29 (= (ControlFlow 0 3) 2))) (let ((.cse10 (=> .cse29 .cse1))) (res .cse10 (=>+ 1 .cse10) (let ((.cse30 (= (ControlFlow 0 0) 3))) (let ((.cse11 (=> .cse30 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse22 (- 0 1))) (let ((.cse28 (= t@0 .cse0)) (.cse20 (= .cse26 .cse22))) (let ((.cse19 (and .cse28 .cse20))) (let ((.cse18 (=> .cse19 t@0))) (let ((.cse17 (=> .cse0 .cse18))) (let ((.cse16 (=> .cse29 .cse17))) (let ((.cse12 (=> .cse30 .cse16))) (let ((.cse14 (not .cse12))) (res .cse12 (let ((.cse13 (not .cse11))) (res .cse13 (res .cse14 (not+ .cse14) (let ((.cse15 (= .cse14 .cse13))) (res .cse15 (res (= .cse12 .cse11) (res (= .cse16 .cse10) (res (= .cse17 .cse1) (res (= .cse18 .cse6) (res (= t@0 t@0) (refl t@0) (res (= .cse19 .cse5) (res (= .cse20 .cse21) (res (= .cse22 (- 1)) (let ((.cse23 (* (- 1) 1))) (res (= .cse23 (- 1)) (poly* .cse23 (- 1)) (res (= 0 0) (refl 0) (let ((.cse24 (+ 0 .cse23)) (.cse25 (+ 0 (- 1)))) (res (= .cse24 .cse25) (cong (+ 0 .cse23) (+ 0 (- 1))) (res (= .cse22 .cse24) (-def 0 1) (res (= .cse25 (- 1)) (poly+ .cse25 (- 1)) (trans .cse22 .cse24 .cse25 (- 1))))))))) (res (= .cse26 .cse26) (refl .cse26) (cong (= .cse26 .cse22) (= .cse26 (- 1))))) (let ((.cse27 (= .cse28 .cse8))) (res .cse27 (res .cse28 (res .cse3 (res t@0 (res .cse0 (=+1 .cse28) .cse4) (res .cse0 (xor+ (t@0 .cse0) (.cse0) (t@0)) (=+2 .cse28))) (res .cse8 (=+1 .cse27) .cse9)) (res .cse3 (res .cse8 (not+ .cse8) (=+2 .cse27)) (res t@0 (res .cse0 (xor+ (t@0) (.cse0) (t@0 .cse0)) (=-1 .cse28)) (res .cse0 (=-2 .cse28) (xor- (t@0) (.cse0) (t@0 .cse0)))))) (cong (and .cse28 .cse20) (and .cse8 .cse21))))) (cong (=> .cse19 t@0) (=> .cse5 t@0)))) (res (= .cse0 .cse0) (refl .cse0) (cong (=> .cse0 .cse18) (=> .cse0 .cse6)))) (res (= .cse29 .cse29) (refl .cse29) (cong (=> .cse29 .cse17) (=> .cse29 .cse1)))) (res (= .cse30 .cse30) (refl .cse30) (cong (=> .cse30 .cse16) (=> .cse30 .cse10)))) (cong (not .cse12) (not .cse11))) (=-2 .cse15)))) (not- .cse13))) (res .cse14 (assume .cse14) (not- .cse14))))))))))))))))))) (res .cse0 (! (res .cse1 (=>+ 0 .cse1) .cse2) :proves (+ .cse0) :input) (! (let-proof ((.cse7 (res .cse1 (=>+ 1 .cse1) .cse2))) (res t@0 (! (res .cse3 .cse4 (res .cse5 (res .cse6 (=>+ 0 .cse6) .cse7) (res .cse8 (and- 0 .cse5) .cse9))) :proves (- .cse0 + t@0) :input) (! (res .cse6 (=>+ 1 .cse6) .cse7) :proves (- t@0) :input))) :proves (- .cse0) :rup)))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse46 (+ B (* (- 1) A)))) (let ((.cse41 (ControlFlow 0 2)) (.cse13 (<= .cse46 0))) (let ((.cse9 (< A B)) (.cse20 (f true)) (.cse10 (not .cse13)) (.cse36 (= .cse41 (- 1)))) (let ((.cse15 (and .cse10 .cse36)) (.cse21 (= .cse20 5)) (.cse7 (= .cse9 .cse10))) (let-proof ((.cse14 (not+ .cse10)) (.cse18 (not- .cse10))) (let ((.cse16 (=> .cse15 .cse21))) (let-proof ((.cse8 (res .cse10 (res .cse9 (=+1 .cse7) (res .cse13 .cse14 (farkas 1 .cse9 1 .cse13))) (res .cse9 (let ((.cse44 (<= B A))) (res .cse44 (total B A) (res .cse13 (let ((.cse45 (< 0 .cse46))) (res .cse45 (total .cse46 0) (farkas 1 .cse44 1 .cse45))) .cse18))) (=+2 .cse7))))) (let ((.cse0 (= 5 .cse20))) (let-proof ((.cse17 (let ((.cse42 (= (ControlFlow 0 3) 2))) (let ((.cse26 (=> .cse42 .cse16))) (res .cse26 (=>+ 1 .cse26) (let ((.cse43 (= (ControlFlow 0 0) 3))) (let ((.cse27 (=> .cse43 .cse26))) (res .cse27 (=>+ 1 .cse27) (let ((.cse37 (- 0 1))) (let ((.cse35 (= .cse41 .cse37))) (let ((.cse34 (and .cse9 .cse35))) (let ((.cse33 (=> .cse34 .cse21))) (let ((.cse32 (=> .cse42 .cse33))) (let ((.cse28 (=> .cse43 .cse32))) (let ((.cse30 (not .cse28))) (res .cse28 (let ((.cse29 (not .cse27))) (res .cse29 (res .cse30 (not+ .cse30) (let ((.cse31 (= .cse30 .cse29))) (res .cse31 (res (= .cse28 .cse27) (res (= .cse32 .cse26) (res (= .cse33 .cse16) (res (= .cse21 .cse21) (refl .cse21) (res (= .cse34 .cse15) (res (= .cse35 .cse36) (res (= .cse37 (- 1)) (let ((.cse38 (* (- 1) 1))) (res (= .cse38 (- 1)) (poly* .cse38 (- 1)) (res (= 0 0) (refl 0) (let ((.cse39 (+ 0 .cse38)) (.cse40 (+ 0 (- 1)))) (res (= .cse39 .cse40) (cong (+ 0 .cse38) (+ 0 (- 1))) (res (= .cse37 .cse39) (-def 0 1) (res (= .cse40 (- 1)) (poly+ .cse40 (- 1)) (trans .cse37 .cse39 .cse40 (- 1))))))))) (res (= .cse41 .cse41) (refl .cse41) (cong (= .cse41 .cse37) (= .cse41 (- 1))))) (res .cse7 .cse8 (cong (and .cse9 .cse35) (and .cse10 .cse36)))) (cong (=> .cse34 .cse21) (=> .cse15 .cse21)))) (res (= .cse42 .cse42) (refl .cse42) (cong (=> .cse42 .cse33) (=> .cse42 .cse16)))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse32) (=> .cse43 .cse26)))) (cong (not .cse28) (not .cse27))) (=-2 .cse31)))) (not- .cse29))) (res .cse30 (assume .cse30) (not- .cse30)))))))))))))))))) (res .cse0 (let ((.cse6 (f .cse10))) (let ((.cse1 (= 5 .cse6))) (res .cse1 (! (let ((.cse2 (= .cse6 5))) (res .cse2 (let ((.cse5 (f .cse9))) (let ((.cse3 (= .cse5 5))) (res .cse3 (assume .cse3) (let ((.cse4 (= .cse3 .cse2))) (res .cse4 (res (= 5 5) (refl 5) (res (= .cse5 .cse6) (res .cse7 .cse8 (cong (f .cse9) (f .cse10))) (cong (= .cse5 5) (= .cse6 5)))) (=-2 .cse4)))))) (let ((.cse11 (= .cse2 .cse1))) (res .cse11 (res .cse1 (res .cse2 (=+1 .cse11) (symm 5 .cse6)) (res .cse2 (symm .cse6 5) (=+2 .cse11))) (=-2 .cse11))))) :proves (+ .cse1) :input) (let ((.cse12 (= .cse10 true))) (res .cse12 (! (res .cse13 (! (res .cse10 .cse14 (res true true+ (=+2 .cse12))) :proves (+ .cse12 + .cse13) :input) (! (res .cse15 (res .cse16 (=>+ 0 .cse16) .cse17) (res .cse10 (and- 0 .cse15) .cse18)) :proves (- .cse13) :input)) :proves (+ .cse12) :rup) (let ((.cse19 (= .cse6 .cse20))) (res .cse19 (! (cong (f .cse10) (f true)) :proves (+ .cse19 - .cse12) :cong (.cse6 .cse20)) (! (trans 5 .cse6 .cse20) :proves (+ .cse0 - .cse1 - .cse19) :trans (5 .cse6 .cse20))))))))) (! (res .cse21 (let ((.cse22 (not .cse0))) (res .cse22 (let ((.cse23 (not .cse21))) (res .cse23 (not+ .cse23) (let ((.cse24 (= .cse23 .cse22))) (res .cse24 (let ((.cse25 (= .cse21 .cse0))) (res .cse25 (res .cse0 (res .cse21 (=+1 .cse25) (symm 5 .cse20)) (res .cse21 (symm .cse20 5) (=+2 .cse25))) (cong (not .cse21) (not .cse0)))) (=-2 .cse24))))) (not- .cse22))) (res .cse16 (=>+ 1 .cse16) .cse17)) :proves (- .cse0) :input))))))))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_FormulaTerm2.bpl.mod.smt2:108:10: Logical context not inconsistent!")
unsat
(! (let ((.cse21 (ControlFlow 0 2))) (let ((.cse1 (= .cse21 (- 1))) (.cse0 (= (- 1) .cse21))) (let ((.cse29 (= .cse1 .cse0))) (let-proof ((.cse30 (res .cse0 (res .cse1 (=+1 .cse29) (symm (- 1) .cse21)) (res .cse1 (symm .cse21 (- 1)) (=+2 .cse29))))) (res .cse0 (! (res .cse1 (let ((.cse25 (= a b))) (let ((.cse24 (xor t@0 .cse25))) (let ((.cse26 (not .cse24))) (let ((.cse2 (and .cse26 .cse1))) (res .cse2 (let ((.cse14 (not t@0))) (let ((.cse3 (=> .cse2 .cse14))) (res .cse3 (=>+ 0 .cse3) (let ((.cse4 (=> .cse25 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse27 (= (ControlFlow 0 3) 2))) (let ((.cse5 (=> .cse27 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse28 (= (ControlFlow 0 0) 3))) (let ((.cse6 (=> .cse28 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse17 (- 0 1))) (let ((.cse23 (= t@0 .cse25)) (.cse16 (= .cse21 .cse17))) (let ((.cse15 (and .cse23 .cse16))) (let ((.cse13 (=> .cse15 .cse14))) (let ((.cse12 (=> .cse25 .cse13))) (let ((.cse11 (=> .cse27 .cse12))) (let ((.cse7 (=> .cse28 .cse11))) (let ((.cse9 (not .cse7))) (res .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res (= .cse7 .cse6) (res (= .cse11 .cse5) (res (= .cse12 .cse4) (res (= .cse13 .cse3) (res (= .cse14 .cse14) (refl .cse14) (res (= .cse15 .cse2) (res (= .cse16 .cse1) (res (= .cse17 (- 1)) (let ((.cse18 (* (- 1) 1))) (res (= .cse18 (- 1)) (poly* .cse18 (- 1)) (res (= 0 0) (refl 0) (let ((.cse19 (+ 0 .cse18)) (.cse20 (+ 0 (- 1)))) (res (= .cse19 .cse20) (cong (+ 0 .cse18) (+ 0 (- 1))) (res (= .cse17 .cse19) (-def 0 1) (res (= .cse20 (- 1)) (poly+ .cse20 (- 1)) (trans .cse17 .cse19 .cse20 (- 1))))))))) (res (= .cse21 .cse21) (refl .cse21) (cong (= .cse21 .cse17) (= .cse21 (- 1))))) (let ((.cse22 (= .cse23 .cse26))) (res .cse22 (res .cse23 (res .cse24 (res t@0 (res .cse25 (=+1 .cse23) (xor+ (t@0 .cse25) (t@0) (.cse25))) (res .cse25 (xor+ (t@0 .cse25) (.cse25) (t@0)) (=+2 .cse23))) (res .cse26 (=+1 .cse22) (not- .cse26))) (res .cse24 (res .cse26 (not+ .cse26) (=+2 .cse22)) (res t@0 (res .cse25 (xor+ (t@0) (.cse25) (t@0 .cse25)) (=-1 .cse23)) (res .cse25 (=-2 .cse23) (xor- (t@0) (.cse25) (t@0 .cse25)))))) (cong (and .cse23 .cse16) (and .cse26 .cse1))))) (cong (=> .cse15 .cse14) (=> .cse2 .cse14)))) (res (= .cse25 .cse25) (refl .cse25) (cong (=> .cse25 .cse13) (=> .cse25 .cse3)))) (res (= .cse27 .cse27) (refl .cse27) (cong (=> .cse27 .cse12) (=> .cse27 .cse4)))) (res (= .cse28 .cse28) (refl .cse28) (cong (=> .cse28 .cse11) (=> .cse28 .cse5)))) (cong (not .cse7) (not .cse6))) (=-2 .cse10)))) (not- .cse8))) (res .cse9 (assume .cse9) (not- .cse9)))))))))))))))))))))) (and- 1 .cse2)))))) (res .cse29 .cse30 (=-2 .cse29))) :proves (+ .cse0) :input) (! (let ((.cse32 (not .cse1))) (res .cse1 (let ((.cse31 (not .cse0))) (res .cse31 (res .cse32 (not+ .cse32) (let ((.cse33 (= .cse32 .cse31))) (res .cse33 (res .cse29 .cse30 (cong (not .cse1) (not .cse0))) (=-2 .cse33)))) (not- .cse31))) (res .cse32 (assume .cse32) (not- .cse32)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_test2_FormulaTerm2.bpl.mod.smt2:147:10: Logical context not inconsistent!")
unsat
(! (let ((.cse26 (ControlFlow 0 2))) (let ((.cse1 (= .cse26 (- 1))) (.cse0 (= (- 1) .cse26))) (let ((.cse36 (= .cse1 .cse0))) (let-proof ((.cse37 (res .cse0 (res .cse1 (=+1 .cse36) (symm (- 1) .cse26)) (res .cse1 (symm .cse26 (- 1)) (=+2 .cse36))))) (res .cse0 (! (res .cse1 (let ((.cse33 (+ B (* (- 1) A)))) (let ((.cse30 (<= .cse33 0))) (let ((.cse28 (not .cse30))) (let ((.cse2 (and .cse28 .cse1))) (res .cse2 (let ((.cse17 (f true))) (let ((.cse19 (+ (* (- 1) .cse17) 2))) (let ((.cse15 (<= .cse19 0))) (let ((.cse13 (not .cse15))) (let ((.cse3 (=> .cse2 .cse13))) (res .cse3 (=>+ 0 .cse3) (let ((.cse34 (= (ControlFlow 0 3) 2))) (let ((.cse4 (=> .cse34 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse35 (= (ControlFlow 0 0) 3))) (let ((.cse5 (=> .cse35 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse22 (- 0 1))) (let ((.cse29 (< A B)) (.cse21 (= .cse26 .cse22))) (let ((.cse20 (and .cse29 .cse21)) (.cse14 (< .cse17 2))) (let ((.cse11 (=> .cse20 .cse14))) (let ((.cse10 (=> .cse34 .cse11))) (let ((.cse6 (=> .cse35 .cse10))) (let ((.cse8 (not .cse6))) (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res (= .cse6 .cse5) (res (= .cse10 .cse4) (res (= .cse11 .cse3) (let ((.cse12 (= .cse14 .cse13))) (res .cse12 (res .cse13 (res .cse14 (=+1 .cse12) (res .cse15 (not+ .cse13) (farkas 1 .cse14 1 .cse15))) (res .cse14 (let ((.cse16 (<= 2 .cse17))) (res .cse16 (total 2 .cse17) (res .cse15 (let ((.cse18 (< 0 .cse19))) (res .cse18 (total .cse19 0) (farkas 1 .cse16 1 .cse18))) (not- .cse13)))) (=+2 .cse12))) (res (= .cse20 .cse2) (res (= .cse21 .cse1) (res (= .cse22 (- 1)) (let ((.cse23 (* (- 1) 1))) (res (= .cse23 (- 1)) (poly* .cse23 (- 1)) (res (= 0 0) (refl 0) (let ((.cse24 (+ 0 .cse23)) (.cse25 (+ 0 (- 1)))) (res (= .cse24 .cse25) (cong (+ 0 .cse23) (+ 0 (- 1))) (res (= .cse22 .cse24) (-def 0 1) (res (= .cse25 (- 1)) (poly+ .cse25 (- 1)) (trans .cse22 .cse24 .cse25 (- 1))))))))) (res (= .cse26 .cse26) (refl .cse26) (cong (= .cse26 .cse22) (= .cse26 (- 1))))) (let ((.cse27 (= .cse29 .cse28))) (res .cse27 (res .cse28 (res .cse29 (=+1 .cse27) (res .cse30 (not+ .cse28) (farkas 1 .cse29 1 .cse30))) (res .cse29 (let ((.cse31 (<= B A))) (res .cse31 (total B A) (res .cse30 (let ((.cse32 (< 0 .cse33))) (res .cse32 (total .cse33 0) (farkas 1 .cse31 1 .cse32))) (not- .cse28)))) (=+2 .cse27))) (cong (and .cse29 .cse21) (and .cse28 .cse1))))) (cong (=> .cse20 .cse14) (=> .cse2 .cse13))))) (res (= .cse34 .cse34) (refl .cse34) (cong (=> .cse34 .cse11) (=> .cse34 .cse3)))) (res (= .cse35 .cse35) (refl .cse35) (cong (=> .cse35 .cse10) (=> .cse35 .cse4)))) (cong (not .cse6) (not .cse5))) (=-2 .cse9)))) (not- .cse7))) (res .cse8 (assume .cse8) (not- .cse8)))))))))))))))))))))) (and- 1 .cse2)))))) (res .cse36 .cse37 (=-2 .cse36))) :proves (+ .cse0) :input) (! (let ((.cse39 (not .cse1))) (res .cse1 (let ((.cse38 (not .cse0))) (res .cse38 (res .cse39 (not+ .cse39) (let ((.cse40 (= .cse39 .cse38))) (res .cse40 (res .cse36 .cse37 (cong (not .cse1) (not .cse0))) (=-2 .cse40)))) (not- .cse38))) (res .cse39 (assume .cse39) (not- .cse39)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
