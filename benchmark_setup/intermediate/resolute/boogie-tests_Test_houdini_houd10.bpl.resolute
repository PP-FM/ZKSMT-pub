success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_houd10.bpl.mod.smt2:29:10: Logical context not inconsistent!")
unsat
(! (let ((.cse42 (ControlFlow 0 2))) (let ((.cse2 (= .cse42 (- 4))) (.cse0 (= (- 4) .cse42))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 4) .cse42)) (res .cse2 (symm .cse42 (- 4)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse31 (* (- 1) xVar@0))) (let ((.cse28 (<= .cse31 0))) (let ((.cse26 (not .cse28))) (let ((.cse33 (= .cse42 (- 1))) (.cse24 (=> b3 .cse26))) (let ((.cse22 (=> .cse33 .cse24)) (.cse50 (= .cse42 (- 3))) (.cse46 (=> b1 false))) (let ((.cse48 (=> .cse50 .cse46)) (.cse20 (=> .cse46 .cse22))) (let ((.cse18 (and .cse48 .cse20))) (let ((.cse5 (=> false .cse18))) (let-proof ((.cse6 false-)) (res .cse5 (! (res false (=>+ 0 .cse5) .cse6) :proves (+ .cse5) :input) (! (let ((.cse7 (and .cse1 .cse5))) (res .cse7 (and+ .cse7) (let ((.cse71 (= (ControlFlow 0 5) 2))) (let ((.cse8 (=> .cse71 .cse7))) (res .cse8 (=>+ 1 .cse8) (let ((.cse72 (= (ControlFlow 0 0) 5))) (let ((.cse9 (=> .cse72 .cse8))) (res .cse9 (=>+ 1 .cse9) (let ((.cse27 (< xVar@0 0)) (.cse34 (- 0 1))) (let ((.cse56 (= 5 0)) (.cse51 (- 0 3)) (.cse32 (= .cse42 .cse34)) (.cse23 (=> b3 .cse27))) (let ((.cse21 (=> .cse32 .cse23)) (.cse49 (= .cse42 .cse51)) (.cse45 (=> b1 .cse56))) (let ((.cse70 (= 5 5)) (.cse62 (- 0 4)) (.cse47 (=> .cse49 .cse45)) (.cse19 (=> .cse45 .cse21))) (let ((.cse17 (and .cse47 .cse19)) (.cse61 (= .cse42 .cse62)) (.cse59 (not .cse70))) (let ((.cse60 (=> .cse61 .cse59)) (.cse16 (=> .cse59 .cse17))) (let ((.cse15 (and .cse60 .cse16))) (let ((.cse14 (=> .cse71 .cse15))) (let ((.cse10 (=> .cse72 .cse14))) (let ((.cse12 (not .cse10))) (res .cse10 (let ((.cse11 (not .cse9))) (res .cse11 (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res (= .cse10 .cse9) (res (= .cse14 .cse8) (res (= .cse15 .cse7) (let ((.cse57 (= .cse59 false)) (.cse36 (= 0 0)) (.cse40 (= .cse42 .cse42))) (let-proof ((.cse58 (let ((.cse67 (not true))) (let ((.cse66 (= .cse67 false))) (let-proof ((.cse68 true+)) (res .cse66 (res false (res .cse67 (=+1 .cse66) (res true .cse68 (not- .cse67))) .cse6) (res (= .cse59 .cse67) (let ((.cse69 (= .cse70 true))) (res .cse69 (res true .cse68 (res .cse70 (refl 5) (=+2 .cse69))) (cong (not .cse70) (not true)))) (trans .cse59 .cse67 false))))))) (.cse37 (refl 0)) (.cse41 (refl .cse42))) (res (= .cse16 .cse5) (res (= .cse17 .cse18) (let ((.cse43 (= .cse45 .cse46))) (let-proof ((.cse44 (let ((.cse55 (= .cse56 false))) (res .cse55 (res false (res .cse56 (=+1 .cse55) (farkas 1 .cse56)) .cse6) (res (= b1 b1) (refl b1) (cong (=> b1 .cse56) (=> b1 false))))))) (res (= .cse19 .cse20) (res (= .cse21 .cse22) (res (= .cse23 .cse24) (let ((.cse25 (= .cse27 .cse26))) (res .cse25 (res .cse26 (res .cse27 (=+1 .cse25) (res .cse28 (not+ .cse26) (farkas 1 .cse27 1 .cse28))) (res .cse27 (let ((.cse29 (<= 0 xVar@0))) (res .cse29 (total 0 xVar@0) (res .cse28 (let ((.cse30 (< 0 .cse31))) (res .cse30 (total .cse31 0) (farkas 1 .cse29 1 .cse30))) (not- .cse26)))) (=+2 .cse25))) (res (= b3 b3) (refl b3) (cong (=> b3 .cse27) (=> b3 .cse26))))) (res (= .cse32 .cse33) (res (= .cse34 (- 1)) (let ((.cse35 (* (- 1) 1))) (res (= .cse35 (- 1)) (poly* .cse35 (- 1)) (res .cse36 .cse37 (let ((.cse38 (+ 0 .cse35)) (.cse39 (+ 0 (- 1)))) (res (= .cse38 .cse39) (cong (+ 0 .cse35) (+ 0 (- 1))) (res (= .cse34 .cse38) (-def 0 1) (res (= .cse39 (- 1)) (poly+ .cse39 (- 1)) (trans .cse34 .cse38 .cse39 (- 1))))))))) (res .cse40 .cse41 (cong (= .cse42 .cse34) (= .cse42 (- 1))))) (cong (=> .cse32 .cse23) (=> .cse33 .cse24)))) (res .cse43 .cse44 (cong (=> .cse45 .cse21) (=> .cse46 .cse22)))) (res (= .cse47 .cse48) (res .cse43 .cse44 (res (= .cse49 .cse50) (res (= .cse51 (- 3)) (let ((.cse52 (* (- 1) 3))) (res (= .cse52 (- 3)) (poly* .cse52 (- 3)) (res .cse36 .cse37 (let ((.cse53 (+ 0 .cse52)) (.cse54 (+ 0 (- 3)))) (res (= .cse53 .cse54) (cong (+ 0 .cse52) (+ 0 (- 3))) (res (= .cse51 .cse53) (-def 0 3) (res (= .cse54 (- 3)) (poly+ .cse54 (- 3)) (trans .cse51 .cse53 .cse54 (- 3))))))))) (res .cse40 .cse41 (cong (= .cse42 .cse51) (= .cse42 (- 3))))) (cong (=> .cse49 .cse45) (=> .cse50 .cse46)))) (cong (and .cse47 .cse19) (and .cse48 .cse20)))))) (res .cse57 .cse58 (cong (=> .cse59 .cse17) (=> false .cse18)))) (res (= .cse60 .cse1) (res .cse57 .cse58 (res (= .cse61 .cse2) (res (= .cse62 (- 4)) (let ((.cse63 (* (- 1) 4))) (res (= .cse63 (- 4)) (poly* .cse63 (- 4)) (res .cse36 .cse37 (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 4)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 4))) (res (= .cse62 .cse64) (-def 0 4) (res (= .cse65 (- 4)) (poly+ .cse65 (- 4)) (trans .cse62 .cse64 .cse65 (- 4))))))))) (res .cse40 .cse41 (cong (= .cse42 .cse62) (= .cse42 (- 4))))) (cong (=> .cse61 .cse59) (=> .cse2 false)))) (cong (and .cse60 .cse16) (and .cse1 .cse5)))))) (res (= .cse71 .cse71) (refl .cse71) (cong (=> .cse71 .cse15) (=> .cse71 .cse7)))) (res (= .cse72 .cse72) (refl .cse72) (cong (=> .cse72 .cse14) (=> .cse72 .cse8)))) (cong (not .cse10) (not .cse9))) (=-2 .cse13)))) (not- .cse11))) (res .cse12 (assume .cse12) (not- .cse12))))))))))))))))))))) :proves (- .cse1 - .cse5) :input))))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse74 (not .cse2))) (res .cse2 (let ((.cse73 (not .cse0))) (res .cse73 (res .cse74 (not+ .cse74) (let ((.cse75 (= .cse74 .cse73))) (res .cse75 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse75)))) (not- .cse73))) (res .cse74 (assume .cse74) (not- .cse74)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
