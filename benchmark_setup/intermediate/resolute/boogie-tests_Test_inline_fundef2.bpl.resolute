success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_inline_fundef2.bpl.mod.smt2:26:10: Logical context not inconsistent!")
unsat
(! (let ((.cse44 (ControlFlow 0 2))) (let ((.cse2 (= .cse44 (- 1))) (.cse0 (= (- 1) .cse44))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse44)) (res .cse2 (symm .cse44 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse5 (=> true .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse50 (= .cse44 (- 3)))) (let ((.cse6 (=> .cse50 true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (! (let ((.cse8 (and .cse6 .cse5))) (res .cse8 (and+ .cse8) (let ((.cse64 (= (ControlFlow 0 4) 2))) (let ((.cse9 (=> .cse64 .cse8))) (res .cse9 (=>+ 1 .cse9) (let ((.cse65 (= (ControlFlow 0 0) 4))) (let ((.cse10 (=> .cse65 .cse9))) (res .cse10 (=>+ 1 .cse10) (let ((.cse33 (- 0 5)) (.cse38 (- 0 1))) (let ((.cse51 (- 0 3)) (.cse37 (= .cse44 .cse38)) (.cse19 (> .cse33 0))) (let ((.cse18 (=> .cse37 .cse19)) (.cse49 (= .cse44 .cse51)) (.cse47 (> 13 0))) (let ((.cse48 (=> .cse49 .cse47)) (.cse17 (=> .cse47 .cse18))) (let ((.cse16 (and .cse48 .cse17))) (let ((.cse15 (=> .cse64 .cse16))) (let ((.cse11 (=> .cse65 .cse15))) (let ((.cse13 (not .cse11))) (res .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res (= .cse11 .cse10) (res (= .cse15 .cse9) (res (= .cse16 .cse8) (let-proof ((.cse22 false-)) (let ((.cse45 (= .cse47 true)) (.cse31 (= 0 0)) (.cse42 (= .cse44 .cse44))) (let-proof ((.cse46 (let ((.cse56 (not false))) (let ((.cse55 (= .cse56 true))) (res .cse55 (res true .cse7 (res .cse56 (res false (not+ .cse56) .cse22) (=+2 .cse55))) (res (= .cse47 .cse56) (let ((.cse59 (<= 13 0))) (let ((.cse57 (not .cse59))) (res (= .cse57 .cse56) (let ((.cse58 (= .cse59 false))) (res .cse58 (res false (res .cse59 (=+1 .cse58) (farkas 1 .cse59)) .cse22) (cong (not .cse59) (not false)))) (let ((.cse60 (= .cse47 .cse57))) (res .cse60 (let ((.cse62 (< 0 13))) (let ((.cse61 (= .cse47 .cse62))) (res .cse61 (>def 13 0) (res .cse57 (res .cse47 (=+1 .cse60) (res .cse62 (=-2 .cse61) (res .cse59 (not+ .cse57) (farkas 1 .cse62 1 .cse59)))) (res .cse47 (res .cse62 (let-proof ((.cse63 (total 13 0))) (res .cse59 .cse63 (res .cse59 (res .cse62 .cse63 (farkas 1 .cse59 1 .cse62)) (not- .cse57)))) (=-1 .cse61)) (=+2 .cse60)))))) (trans .cse47 .cse57 .cse56)))))) (trans .cse47 .cse56 true)))))) (.cse32 (refl 0)) (.cse43 (refl .cse44))) (res (= .cse17 .cse5) (res (= .cse18 .cse1) (res (= .cse19 false) (let ((.cse21 (not true))) (let ((.cse20 (= .cse21 false))) (res .cse20 (res false (res .cse21 (=+1 .cse20) (res true .cse7 (not- .cse21))) .cse22) (res (= .cse19 .cse21) (let ((.cse25 (<= (- 5) 0))) (let ((.cse26 (< 0 (- 5))) (.cse23 (not .cse25))) (let-proof ((.cse27 (total (- 5) 0))) (res (= .cse23 .cse21) (let ((.cse24 (= .cse25 true))) (res .cse24 (res true .cse7 (res .cse25 (res .cse26 .cse27 (farkas 1 .cse26)) (=+2 .cse24))) (cong (not .cse25) (not true)))) (res (= .cse19 .cse23) (let ((.cse30 (> (- 5) 0))) (let ((.cse28 (= .cse30 .cse23))) (res .cse28 (let ((.cse29 (= .cse30 .cse26))) (res .cse29 (>def (- 5) 0) (res .cse23 (res .cse30 (=+1 .cse28) (res .cse26 (=-2 .cse29) (res .cse25 (not+ .cse23) (farkas 1 .cse26 1 .cse25)))) (res .cse30 (res .cse26 (res .cse25 .cse27 (res .cse25 (res .cse26 .cse27 (farkas 1 .cse25 1 .cse26)) (not- .cse23))) (=-1 .cse29)) (=+2 .cse28))))) (res (= .cse19 .cse30) (res .cse31 .cse32 (res (= .cse33 (- 5)) (let ((.cse34 (* (- 1) 5))) (res (= .cse34 (- 5)) (poly* .cse34 (- 5)) (res .cse31 .cse32 (let ((.cse35 (+ 0 .cse34)) (.cse36 (+ 0 (- 5)))) (res (= .cse35 .cse36) (cong (+ 0 .cse34) (+ 0 (- 5))) (res (= .cse33 .cse35) (-def 0 5) (res (= .cse36 (- 5)) (poly+ .cse36 (- 5)) (trans .cse33 .cse35 .cse36 (- 5))))))))) (cong (> .cse33 0) (> (- 5) 0)))) (trans .cse19 .cse30 .cse23))))) (trans .cse19 .cse23 .cse21)))))) (trans .cse19 .cse21 false))))) (res (= .cse37 .cse2) (res (= .cse38 (- 1)) (let ((.cse39 (* (- 1) 1))) (res (= .cse39 (- 1)) (poly* .cse39 (- 1)) (res .cse31 .cse32 (let ((.cse40 (+ 0 .cse39)) (.cse41 (+ 0 (- 1)))) (res (= .cse40 .cse41) (cong (+ 0 .cse39) (+ 0 (- 1))) (res (= .cse38 .cse40) (-def 0 1) (res (= .cse41 (- 1)) (poly+ .cse41 (- 1)) (trans .cse38 .cse40 .cse41 (- 1))))))))) (res .cse42 .cse43 (cong (= .cse44 .cse38) (= .cse44 (- 1))))) (cong (=> .cse37 .cse19) (=> .cse2 false)))) (res .cse45 .cse46 (cong (=> .cse47 .cse18) (=> true .cse1)))) (res (= .cse48 .cse6) (res .cse45 .cse46 (res (= .cse49 .cse50) (res (= .cse51 (- 3)) (let ((.cse52 (* (- 1) 3))) (res (= .cse52 (- 3)) (poly* .cse52 (- 3)) (res .cse31 .cse32 (let ((.cse53 (+ 0 .cse52)) (.cse54 (+ 0 (- 3)))) (res (= .cse53 .cse54) (cong (+ 0 .cse52) (+ 0 (- 3))) (res (= .cse51 .cse53) (-def 0 3) (res (= .cse54 (- 3)) (poly+ .cse54 (- 3)) (trans .cse51 .cse53 .cse54 (- 3))))))))) (res .cse42 .cse43 (cong (= .cse44 .cse51) (= .cse44 (- 3))))) (cong (=> .cse49 .cse47) (=> .cse50 true)))) (cong (and .cse48 .cse17) (and .cse6 .cse5))))))) (res (= .cse64 .cse64) (refl .cse64) (cong (=> .cse64 .cse16) (=> .cse64 .cse8)))) (res (= .cse65 .cse65) (refl .cse65) (cong (=> .cse65 .cse15) (=> .cse65 .cse9)))) (cong (not .cse11) (not .cse10))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13))))))))))))))))))) :proves (- .cse6 - .cse5) :input))))) :proves (- .cse5) :rup))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse67 (not .cse2))) (res .cse2 (let ((.cse66 (not .cse0))) (res .cse66 (res .cse67 (not+ .cse67) (let ((.cse68 (= .cse67 .cse66))) (res .cse68 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse68)))) (not- .cse66))) (res .cse67 (assume .cse67) (not- .cse67)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
