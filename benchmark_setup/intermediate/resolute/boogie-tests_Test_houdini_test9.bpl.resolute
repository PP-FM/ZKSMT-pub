success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:31:10: Logical context not inconsistent!")
unsat
(! (let ((.cse35 (ControlFlow 0 2))) (let ((.cse2 (= .cse35 (- 3))) (.cse0 (= (- 3) .cse35))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 3) .cse35)) (res .cse2 (symm .cse35 (- 3)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse39 (=> b3 false))) (let ((.cse1 (=> .cse2 .cse39))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse26 (= .cse35 (- 1))) (.cse7 (=> b4 true))) (let ((.cse6 (=> .cse26 .cse7))) (let ((.cse5 (=> .cse39 .cse6))) (let-proof ((.cse8 true+)) (res .cse5 (! (res .cse6 (! (res .cse7 (! (res true .cse8 (=>+ 1 .cse7)) :proves (+ .cse7) :input) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (! (let ((.cse9 (and .cse1 .cse5))) (res .cse9 (and+ .cse9) (let ((.cse48 (and (=> b2 (= v1 1)) (= (ControlFlow 0 4) 2)))) (let ((.cse10 (=> .cse48 .cse9))) (res .cse10 (=>+ 1 .cse10) (let ((.cse49 (=> b1 (= v1 0)))) (let ((.cse11 (=> .cse49 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse50 (= (ControlFlow 0 0) 4))) (let ((.cse12 (=> .cse50 .cse11))) (res .cse12 (=>+ 1 .cse12) (let ((.cse24 (= 1 1)) (.cse27 (- 0 1))) (let ((.cse47 (= 1 0)) (.cse42 (- 0 3)) (.cse25 (= .cse35 .cse27)) (.cse22 (=> b4 .cse24))) (let ((.cse21 (=> .cse25 .cse22)) (.cse41 (= .cse35 .cse42)) (.cse38 (=> b3 .cse47))) (let ((.cse40 (=> .cse41 .cse38)) (.cse20 (=> .cse38 .cse21))) (let ((.cse19 (and .cse40 .cse20))) (let ((.cse18 (=> .cse48 .cse19))) (let ((.cse17 (=> .cse49 .cse18))) (let ((.cse13 (=> .cse50 .cse17))) (let ((.cse15 (not .cse13))) (res .cse13 (let ((.cse14 (not .cse12))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res (= .cse13 .cse12) (res (= .cse17 .cse11) (res (= .cse18 .cse10) (res (= .cse19 .cse9) (let ((.cse36 (= .cse38 .cse39)) (.cse29 (= 0 0)) (.cse33 (= .cse35 .cse35))) (let-proof ((.cse37 (let ((.cse46 (= .cse47 false))) (res .cse46 (res false (res .cse47 (=+1 .cse46) (farkas 1 .cse47)) false-) (res (= b3 b3) (refl b3) (cong (=> b3 .cse47) (=> b3 false)))))) (.cse30 (refl 0)) (.cse34 (refl .cse35))) (res (= .cse20 .cse5) (res (= .cse21 .cse6) (res (= .cse22 .cse7) (let ((.cse23 (= .cse24 true))) (res .cse23 (res true .cse8 (res .cse24 (refl 1) (=+2 .cse23))) (res (= b4 b4) (refl b4) (cong (=> b4 .cse24) (=> b4 true))))) (res (= .cse25 .cse26) (res (= .cse27 (- 1)) (let ((.cse28 (* (- 1) 1))) (res (= .cse28 (- 1)) (poly* .cse28 (- 1)) (res .cse29 .cse30 (let ((.cse31 (+ 0 .cse28)) (.cse32 (+ 0 (- 1)))) (res (= .cse31 .cse32) (cong (+ 0 .cse28) (+ 0 (- 1))) (res (= .cse27 .cse31) (-def 0 1) (res (= .cse32 (- 1)) (poly+ .cse32 (- 1)) (trans .cse27 .cse31 .cse32 (- 1))))))))) (res .cse33 .cse34 (cong (= .cse35 .cse27) (= .cse35 (- 1))))) (cong (=> .cse25 .cse22) (=> .cse26 .cse7)))) (res .cse36 .cse37 (cong (=> .cse38 .cse21) (=> .cse39 .cse6)))) (res (= .cse40 .cse1) (res .cse36 .cse37 (res (= .cse41 .cse2) (res (= .cse42 (- 3)) (let ((.cse43 (* (- 1) 3))) (res (= .cse43 (- 3)) (poly* .cse43 (- 3)) (res .cse29 .cse30 (let ((.cse44 (+ 0 .cse43)) (.cse45 (+ 0 (- 3)))) (res (= .cse44 .cse45) (cong (+ 0 .cse43) (+ 0 (- 3))) (res (= .cse42 .cse44) (-def 0 3) (res (= .cse45 (- 3)) (poly+ .cse45 (- 3)) (trans .cse42 .cse44 .cse45 (- 3))))))))) (res .cse33 .cse34 (cong (= .cse35 .cse42) (= .cse35 (- 3))))) (cong (=> .cse41 .cse38) (=> .cse2 .cse39)))) (cong (and .cse40 .cse20) (and .cse1 .cse5)))))) (res (= .cse48 .cse48) (refl .cse48) (cong (=> .cse48 .cse19) (=> .cse48 .cse9)))) (res (= .cse49 .cse49) (refl .cse49) (cong (=> .cse49 .cse18) (=> .cse49 .cse10)))) (res (= .cse50 .cse50) (refl .cse50) (cong (=> .cse50 .cse17) (=> .cse50 .cse11)))) (cong (not .cse13) (not .cse12))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (assume .cse15) (not- .cse15))))))))))))))))))))))) :proves (- .cse1 - .cse5) :input)))))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse52 (not .cse2))) (res .cse2 (let ((.cse51 (not .cse0))) (res .cse51 (res .cse52 (not+ .cse52) (let ((.cse53 (= .cse52 .cse51))) (res .cse53 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse53)))) (not- .cse51))) (res .cse52 (assume .cse52) (not- .cse52)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:72:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:75:10: Logical context not inconsistent!")
unsat
(! (let ((.cse14 (ControlFlow 0 2))) (let ((.cse2 (= .cse14 (- 1))) (.cse0 (= (- 1) .cse14))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse14)) (res .cse2 (symm .cse14 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse28 (=> b8 (= v2 1)))) (let ((.cse1 (=> .cse2 .cse28))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse40 (=> b7 (= v2 0)))) (let ((.cse5 (=> .cse40 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse8 (= .cse14 (- 3)))) (let ((.cse6 (=> .cse8 .cse40))) (res .cse6 (! (let ((.cse7 (= (- 3) .cse14))) (let ((.cse9 (= .cse8 .cse7))) (let-proof ((.cse10 (res .cse7 (res .cse8 (=+1 .cse9) (symm (- 3) .cse14)) (res .cse8 (symm .cse14 (- 3)) (=+2 .cse9))))) (res .cse7 (! (res .cse8 (=>+ 0 .cse6) (res .cse9 .cse10 (=-2 .cse9))) :proves (+ .cse6 + .cse7) :input) (! (let ((.cse12 (not .cse8))) (res .cse8 (let ((.cse11 (not .cse7))) (res .cse11 (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res .cse9 .cse10 (cong (not .cse8) (not .cse7))) (=-2 .cse13)))) (not- .cse11))) (res .cse12 (assume .cse12) (not- .cse12)))) :proves (- .cse7) :input))))) :proves (+ .cse6) :rup) (! (let ((.cse15 (and .cse6 .cse5))) (res .cse15 (and+ .cse15) (let ((.cse47 (and (=> b6 (= v1 1)) (= (ControlFlow 0 4) 2)))) (let ((.cse16 (=> .cse47 .cse15))) (res .cse16 (=>+ 1 .cse16) (let ((.cse48 (=> b5 (= v1 0)))) (let ((.cse17 (=> .cse48 .cse16))) (res .cse17 (=>+ 1 .cse17) (let ((.cse49 (= (ControlFlow 0 0) 4))) (let ((.cse18 (=> .cse49 .cse17))) (res .cse18 (=>+ 1 .cse18) (let ((.cse30 (- 0 1))) (let ((.cse43 (- 0 3)) (.cse29 (= .cse14 .cse30))) (let ((.cse27 (=> .cse29 .cse28)) (.cse42 (= .cse14 .cse43))) (let ((.cse41 (=> .cse42 .cse40)) (.cse26 (=> .cse40 .cse27))) (let ((.cse25 (and .cse41 .cse26))) (let ((.cse24 (=> .cse47 .cse25))) (let ((.cse23 (=> .cse48 .cse24))) (let ((.cse19 (=> .cse49 .cse23))) (let ((.cse21 (not .cse19))) (res .cse19 (let ((.cse20 (not .cse18))) (res .cse20 (res .cse21 (not+ .cse21) (let ((.cse22 (= .cse21 .cse20))) (res .cse22 (res (= .cse19 .cse18) (res (= .cse23 .cse17) (res (= .cse24 .cse16) (res (= .cse25 .cse15) (let ((.cse38 (= .cse40 .cse40)) (.cse32 (= 0 0)) (.cse36 (= .cse14 .cse14))) (let-proof ((.cse39 (refl .cse40)) (.cse33 (refl 0)) (.cse37 (refl .cse14))) (res (= .cse26 .cse5) (res (= .cse27 .cse1) (res (= .cse28 .cse28) (refl .cse28) (res (= .cse29 .cse2) (res (= .cse30 (- 1)) (let ((.cse31 (* (- 1) 1))) (res (= .cse31 (- 1)) (poly* .cse31 (- 1)) (res .cse32 .cse33 (let ((.cse34 (+ 0 .cse31)) (.cse35 (+ 0 (- 1)))) (res (= .cse34 .cse35) (cong (+ 0 .cse31) (+ 0 (- 1))) (res (= .cse30 .cse34) (-def 0 1) (res (= .cse35 (- 1)) (poly+ .cse35 (- 1)) (trans .cse30 .cse34 .cse35 (- 1))))))))) (res .cse36 .cse37 (cong (= .cse14 .cse30) (= .cse14 (- 1))))) (cong (=> .cse29 .cse28) (=> .cse2 .cse28)))) (res .cse38 .cse39 (cong (=> .cse40 .cse27) (=> .cse40 .cse1)))) (res (= .cse41 .cse6) (res .cse38 .cse39 (res (= .cse42 .cse8) (res (= .cse43 (- 3)) (let ((.cse44 (* (- 1) 3))) (res (= .cse44 (- 3)) (poly* .cse44 (- 3)) (res .cse32 .cse33 (let ((.cse45 (+ 0 .cse44)) (.cse46 (+ 0 (- 3)))) (res (= .cse45 .cse46) (cong (+ 0 .cse44) (+ 0 (- 3))) (res (= .cse43 .cse45) (-def 0 3) (res (= .cse46 (- 3)) (poly+ .cse46 (- 3)) (trans .cse43 .cse45 .cse46 (- 3))))))))) (res .cse36 .cse37 (cong (= .cse14 .cse43) (= .cse14 (- 3))))) (cong (=> .cse42 .cse40) (=> .cse8 .cse40)))) (cong (and .cse41 .cse26) (and .cse6 .cse5)))))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse25) (=> .cse47 .cse15)))) (res (= .cse48 .cse48) (refl .cse48) (cong (=> .cse48 .cse24) (=> .cse48 .cse16)))) (res (= .cse49 .cse49) (refl .cse49) (cong (=> .cse49 .cse23) (=> .cse49 .cse17)))) (cong (not .cse19) (not .cse18))) (=-2 .cse22)))) (not- .cse20))) (res .cse21 (assume .cse21) (not- .cse21))))))))))))))))))))))) :proves (- .cse6 - .cse5) :input)))) :proves (- .cse5) :rup)))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse51 (not .cse2))) (res .cse2 (let ((.cse50 (not .cse0))) (res .cse50 (res .cse51 (not+ .cse51) (let ((.cse52 (= .cse51 .cse50))) (res .cse52 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse52)))) (not- .cse50))) (res .cse51 (assume .cse51) (not- .cse51)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:125:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:128:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:131:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:134:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:137:10: Logical context not inconsistent!")
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:184:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:187:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:190:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:193:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:196:10: Logical context not inconsistent!")
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:236:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:239:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_test9.bpl.mod.smt2:242:10: Logical context not inconsistent!")
unsat
(! (let ((.cse15 (ControlFlow 0 2))) (let ((.cse2 (= .cse15 (- 3))) (.cse0 (= (- 3) .cse15))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 3) .cse15)) (res .cse2 (symm .cse15 (- 3)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse59 (=> b13 (= v1@1 0)))) (let ((.cse1 (=> .cse2 .cse59))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse9 (= .cse15 (- 1))) (.cse47 (=> b14 (= v1@1 1)))) (let ((.cse7 (=> .cse9 .cse47))) (let ((.cse6 (=> .cse59 .cse7))) (let ((.cse66 (and (=> b11 (= v1@0 0)) (=> b12 (= v1@0 1)))) (.cse16 (and .cse1 .cse6))) (let ((.cse5 (=> .cse66 .cse16))) (res .cse5 (res .cse6 (! (res .cse7 (! (let ((.cse8 (= (- 1) .cse15))) (let ((.cse10 (= .cse9 .cse8))) (let-proof ((.cse11 (res .cse8 (res .cse9 (=+1 .cse10) (symm (- 1) .cse15)) (res .cse9 (symm .cse15 (- 1)) (=+2 .cse10))))) (res .cse8 (! (res .cse9 (=>+ 0 .cse7) (res .cse10 .cse11 (=-2 .cse10))) :proves (+ .cse7 + .cse8) :input) (! (let ((.cse13 (not .cse9))) (res .cse9 (let ((.cse12 (not .cse8))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res .cse10 .cse11 (cong (not .cse9) (not .cse8))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13)))) :proves (- .cse8) :input))))) :proves (+ .cse7) :rup) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (res .cse16 (and+ .cse16) (=>+ 1 .cse5)) :proves (- .cse6 - .cse1 + .cse5) :input)) (! (let ((.cse19 (=> b10 true))) (let ((.cse17 (=> .cse19 .cse5))) (res .cse17 (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse5) :input) (! (let ((.cse72 (= .cse15 (- 4)))) (let ((.cse18 (=> .cse72 .cse19))) (let-proof ((.cse20 true+)) (res .cse18 (! (res .cse19 (! (res true .cse20 (=>+ 1 .cse19)) :proves (+ .cse19) :input) (! (=>+ 1 .cse18) :proves (+ .cse18 - .cse19) :input)) :proves (+ .cse18) :rup) (let ((.cse82 (=> b9 false)) (.cse22 (and .cse18 .cse17))) (let ((.cse21 (=> .cse82 .cse22))) (res .cse21 (! (res .cse22 (and+ .cse22) (=>+ 1 .cse21)) :proves (+ .cse21 - .cse17 - .cse18) :input) (! (let ((.cse25 (= .cse15 (- 5)))) (let ((.cse23 (=> .cse25 .cse82))) (res .cse23 (! (let ((.cse24 (= (- 5) .cse15))) (let ((.cse26 (= .cse25 .cse24))) (let-proof ((.cse27 (res .cse24 (res .cse25 (=+1 .cse26) (symm (- 5) .cse15)) (res .cse25 (symm .cse15 (- 5)) (=+2 .cse26))))) (res .cse24 (! (res .cse25 (=>+ 0 .cse23) (res .cse26 .cse27 (=-2 .cse26))) :proves (+ .cse23 + .cse24) :input) (! (let ((.cse29 (not .cse25))) (res .cse25 (let ((.cse28 (not .cse24))) (res .cse28 (res .cse29 (not+ .cse29) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (res .cse26 .cse27 (cong (not .cse25) (not .cse24))) (=-2 .cse30)))) (not- .cse28))) (res .cse29 (assume .cse29) (not- .cse29)))) :proves (- .cse24) :input))))) :proves (+ .cse23) :rup) (! (let ((.cse31 (and .cse23 .cse21))) (res .cse31 (and+ .cse31) (let ((.cse91 (= (ControlFlow 0 6) 2))) (let ((.cse32 (=> .cse91 .cse31))) (res .cse32 (=>+ 1 .cse32) (let ((.cse92 (= (ControlFlow 0 0) 6))) (let ((.cse33 (=> .cse92 .cse32))) (res .cse33 (=>+ 1 .cse33) (let ((.cse49 (- 0 1))) (let ((.cse62 (- 0 3)) (.cse48 (= .cse15 .cse49))) (let ((.cse46 (=> .cse48 .cse47)) (.cse61 (= .cse15 .cse62))) (let ((.cse60 (=> .cse61 .cse59)) (.cse45 (=> .cse59 .cse46))) (let ((.cse78 (= 1 1)) (.cse73 (- 0 4)) (.cse44 (and .cse60 .cse45))) (let ((.cse43 (=> .cse66 .cse44)) (.cse71 (= .cse15 .cse73)) (.cse69 (=> b10 .cse78))) (let ((.cse90 (= 1 0)) (.cse85 (- 0 5)) (.cse70 (=> .cse71 .cse69)) (.cse42 (=> .cse69 .cse43))) (let ((.cse41 (and .cse70 .cse42)) (.cse84 (= .cse15 .cse85)) (.cse81 (=> b9 .cse90))) (let ((.cse83 (=> .cse84 .cse81)) (.cse40 (=> .cse81 .cse41))) (let ((.cse39 (and .cse83 .cse40))) (let ((.cse38 (=> .cse91 .cse39))) (let ((.cse34 (=> .cse92 .cse38))) (let ((.cse36 (not .cse34))) (res .cse34 (let ((.cse35 (not .cse33))) (res .cse35 (res .cse36 (not+ .cse36) (let ((.cse37 (= .cse36 .cse35))) (res .cse37 (res (= .cse34 .cse33) (res (= .cse38 .cse32) (res (= .cse39 .cse31) (let ((.cse79 (= .cse81 .cse82)) (.cse51 (= 0 0)) (.cse55 (= .cse15 .cse15))) (let-proof ((.cse80 (let ((.cse89 (= .cse90 false))) (res .cse89 (res false (res .cse90 (=+1 .cse89) (farkas 1 .cse90)) false-) (res (= b9 b9) (refl b9) (cong (=> b9 .cse90) (=> b9 false)))))) (.cse52 (refl 0)) (.cse56 (refl .cse15))) (res (= .cse40 .cse21) (res (= .cse41 .cse22) (let ((.cse67 (= .cse69 .cse19))) (let-proof ((.cse68 (let ((.cse77 (= .cse78 true))) (res .cse77 (res true .cse20 (res .cse78 (refl 1) (=+2 .cse77))) (res (= b10 b10) (refl b10) (cong (=> b10 .cse78) (=> b10 true))))))) (res (= .cse42 .cse17) (res (= .cse43 .cse5) (res (= .cse44 .cse16) (let ((.cse57 (= .cse59 .cse59))) (let-proof ((.cse58 (refl .cse59))) (res (= .cse45 .cse6) (res (= .cse46 .cse7) (res (= .cse47 .cse47) (refl .cse47) (res (= .cse48 .cse9) (res (= .cse49 (- 1)) (let ((.cse50 (* (- 1) 1))) (res (= .cse50 (- 1)) (poly* .cse50 (- 1)) (res .cse51 .cse52 (let ((.cse53 (+ 0 .cse50)) (.cse54 (+ 0 (- 1)))) (res (= .cse53 .cse54) (cong (+ 0 .cse50) (+ 0 (- 1))) (res (= .cse49 .cse53) (-def 0 1) (res (= .cse54 (- 1)) (poly+ .cse54 (- 1)) (trans .cse49 .cse53 .cse54 (- 1))))))))) (res .cse55 .cse56 (cong (= .cse15 .cse49) (= .cse15 (- 1))))) (cong (=> .cse48 .cse47) (=> .cse9 .cse47)))) (res .cse57 .cse58 (cong (=> .cse59 .cse46) (=> .cse59 .cse7)))) (res (= .cse60 .cse1) (res .cse57 .cse58 (res (= .cse61 .cse2) (res (= .cse62 (- 3)) (let ((.cse63 (* (- 1) 3))) (res (= .cse63 (- 3)) (poly* .cse63 (- 3)) (res .cse51 .cse52 (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 3)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 3))) (res (= .cse62 .cse64) (-def 0 3) (res (= .cse65 (- 3)) (poly+ .cse65 (- 3)) (trans .cse62 .cse64 .cse65 (- 3))))))))) (res .cse55 .cse56 (cong (= .cse15 .cse62) (= .cse15 (- 3))))) (cong (=> .cse61 .cse59) (=> .cse2 .cse59)))) (cong (and .cse60 .cse45) (and .cse1 .cse6)))))) (res (= .cse66 .cse66) (refl .cse66) (cong (=> .cse66 .cse44) (=> .cse66 .cse16)))) (res .cse67 .cse68 (cong (=> .cse69 .cse43) (=> .cse19 .cse5)))) (res (= .cse70 .cse18) (res .cse67 .cse68 (res (= .cse71 .cse72) (res (= .cse73 (- 4)) (let ((.cse74 (* (- 1) 4))) (res (= .cse74 (- 4)) (poly* .cse74 (- 4)) (res .cse51 .cse52 (let ((.cse75 (+ 0 .cse74)) (.cse76 (+ 0 (- 4)))) (res (= .cse75 .cse76) (cong (+ 0 .cse74) (+ 0 (- 4))) (res (= .cse73 .cse75) (-def 0 4) (res (= .cse76 (- 4)) (poly+ .cse76 (- 4)) (trans .cse73 .cse75 .cse76 (- 4))))))))) (res .cse55 .cse56 (cong (= .cse15 .cse73) (= .cse15 (- 4))))) (cong (=> .cse71 .cse69) (=> .cse72 .cse19)))) (cong (and .cse70 .cse42) (and .cse18 .cse17)))))) (res .cse79 .cse80 (cong (=> .cse81 .cse41) (=> .cse82 .cse22)))) (res (= .cse83 .cse23) (res .cse79 .cse80 (res (= .cse84 .cse25) (res (= .cse85 (- 5)) (let ((.cse86 (* (- 1) 5))) (res (= .cse86 (- 5)) (poly* .cse86 (- 5)) (res .cse51 .cse52 (let ((.cse87 (+ 0 .cse86)) (.cse88 (+ 0 (- 5)))) (res (= .cse87 .cse88) (cong (+ 0 .cse86) (+ 0 (- 5))) (res (= .cse85 .cse87) (-def 0 5) (res (= .cse88 (- 5)) (poly+ .cse88 (- 5)) (trans .cse85 .cse87 .cse88 (- 5))))))))) (res .cse55 .cse56 (cong (= .cse15 .cse85) (= .cse15 (- 5))))) (cong (=> .cse84 .cse81) (=> .cse25 .cse82)))) (cong (and .cse83 .cse40) (and .cse23 .cse21)))))) (res (= .cse91 .cse91) (refl .cse91) (cong (=> .cse91 .cse39) (=> .cse91 .cse31)))) (res (= .cse92 .cse92) (refl .cse92) (cong (=> .cse92 .cse38) (=> .cse92 .cse32)))) (cong (not .cse34) (not .cse33))) (=-2 .cse37)))) (not- .cse35))) (res .cse36 (assume .cse36) (not- .cse36)))))))))))))))))))))))) :proves (- .cse23 - .cse21) :input)))) :proves (- .cse21) :rup)))))))) :proves (- .cse17) :rup)))) :proves (- .cse5) :rup))))))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse94 (not .cse2))) (res .cse2 (let ((.cse93 (not .cse0))) (res .cse93 (res .cse94 (not+ .cse94) (let ((.cse95 (= .cse94 .cse93))) (res .cse95 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse95)))) (not- .cse93))) (res .cse94 (assume .cse94) (not- .cse94)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
