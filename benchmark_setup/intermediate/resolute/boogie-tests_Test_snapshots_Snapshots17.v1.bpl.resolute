success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots17.v1.bpl.mod.smt2:30:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots17.v1.bpl.mod.smt2:33:10: Logical context not inconsistent!")
unsat
(! (let ((.cse42 (ControlFlow 0 6))) (let ((.cse33 (= .cse42 (- 5))) (.cse0 (= (- 5) .cse42))) (let ((.cse75 (= .cse33 .cse0))) (let-proof ((.cse76 (res .cse0 (res .cse33 (=+1 .cse75) (symm (- 5) .cse42)) (res .cse33 (symm .cse42 (- 5)) (=+2 .cse75))))) (res .cse0 (! (let ((.cse43 (= x@1 (+ x@0 1)))) (let ((.cse1 (and .cse43 .cse33))) (res .cse1 (! (let ((.cse30 (= x@1 1))) (let ((.cse2 (=> .cse1 .cse30))) (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + .cse1) :input) (! (let ((.cse48 (= .cse42 (- 7)))) (let ((.cse3 (=> .cse48 true))) (let-proof ((.cse4 true+)) (res .cse3 (! (res true .cse4 (=>+ 1 .cse3)) :proves (+ .cse3) :input) (let ((.cse74 (ControlFlow 0 8))) (let ((.cse53 (= .cse74 6)) (.cse6 (and .cse3 .cse2))) (let ((.cse5 (=> .cse53 .cse6))) (res .cse5 (! (res .cse6 (and+ .cse6) (=>+ 1 .cse5)) :proves (+ .cse5 - .cse2 - .cse3) :input) (! (let ((.cse71 (ControlFlow 0 2))) (let ((.cse66 (= .cse71 (- 1)))) (let ((.cse72 (= .cse74 2)) (.cse8 (=> .cse66 true))) (let ((.cse7 (=> .cse72 .cse8))) (res .cse7 (! (res .cse8 (! (res true .cse4 (=>+ 1 .cse8)) :proves (+ .cse8) :input) (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse8) :input)) :proves (+ .cse7) :rup) (let ((.cse18 (ControlFlow 0 4))) (let ((.cse12 (= .cse18 (- 3)))) (let ((.cse62 (= .cse74 4)) (.cse10 (=> .cse12 false))) (let ((.cse9 (=> .cse62 .cse10))) (res .cse9 (! (res .cse10 (! (let ((.cse11 (= (- 3) .cse18))) (let ((.cse13 (= .cse12 .cse11))) (let-proof ((.cse14 (res .cse11 (res .cse12 (=+1 .cse13) (symm (- 3) .cse18)) (res .cse12 (symm .cse18 (- 3)) (=+2 .cse13))))) (res .cse11 (! (res .cse12 (=>+ 0 .cse10) (res .cse13 .cse14 (=-2 .cse13))) :proves (+ .cse10 + .cse11) :input) (! (let ((.cse16 (not .cse12))) (res .cse12 (let ((.cse15 (not .cse11))) (res .cse15 (res .cse16 (not+ .cse16) (let ((.cse17 (= .cse16 .cse15))) (res .cse17 (res .cse13 .cse14 (cong (not .cse12) (not .cse11))) (=-2 .cse17)))) (not- .cse15))) (res .cse16 (assume .cse16) (not- .cse16)))) :proves (- .cse11) :input))))) :proves (+ .cse10) :rup) (! (=>+ 1 .cse9) :proves (+ .cse9 - .cse10) :input)) :proves (+ .cse9) :rup) (! (let ((.cse19 (and .cse7 .cse9))) (res .cse19 (and+ .cse19) (let ((.cse20 (and .cse19 .cse5))) (res .cse20 (and+ .cse20) (let ((.cse73 (= (ControlFlow 0 0) 8))) (let ((.cse21 (=> .cse73 .cse20))) (res .cse21 (=>+ 1 .cse21) (let ((.cse34 (- 0 5))) (let ((.cse58 (- 0 3)) (.cse67 (- 0 1)) (.cse49 (- 0 7)) (.cse32 (= .cse42 .cse34))) (let ((.cse31 (and .cse43 .cse32)) (.cse47 (= .cse42 .cse49)) (.cse65 (= .cse71 .cse67)) (.cse57 (= .cse18 .cse58))) (let ((.cse56 (=> .cse57 false)) (.cse64 (=> .cse65 true)) (.cse44 (=> .cse47 true)) (.cse29 (=> .cse31 .cse30))) (let ((.cse28 (and .cse44 .cse29)) (.cse63 (=> .cse72 .cse64)) (.cse55 (=> .cse62 .cse56))) (let ((.cse54 (and .cse63 .cse55)) (.cse27 (=> .cse53 .cse28))) (let ((.cse26 (and .cse54 .cse27))) (let ((.cse22 (=> .cse73 .cse26))) (let ((.cse24 (not .cse22))) (res .cse22 (let ((.cse23 (not .cse21))) (res .cse23 (res .cse24 (not+ .cse24) (let ((.cse25 (= .cse24 .cse23))) (res .cse25 (res (= .cse22 .cse21) (res (= .cse26 .cse20) (let ((.cse45 (= true true)) (.cse36 (= 0 0))) (let-proof ((.cse46 (refl true)) (.cse37 (refl 0))) (res (= .cse27 .cse5) (res (= .cse28 .cse6) (let ((.cse40 (= .cse42 .cse42))) (let-proof ((.cse41 (refl .cse42))) (res (= .cse29 .cse2) (res (= .cse30 .cse30) (refl .cse30) (res (= .cse31 .cse1) (res (= .cse32 .cse33) (res (= .cse34 (- 5)) (let ((.cse35 (* (- 1) 5))) (res (= .cse35 (- 5)) (poly* .cse35 (- 5)) (res .cse36 .cse37 (let ((.cse38 (+ 0 .cse35)) (.cse39 (+ 0 (- 5)))) (res (= .cse38 .cse39) (cong (+ 0 .cse35) (+ 0 (- 5))) (res (= .cse34 .cse38) (-def 0 5) (res (= .cse39 (- 5)) (poly+ .cse39 (- 5)) (trans .cse34 .cse38 .cse39 (- 5))))))))) (res .cse40 .cse41 (cong (= .cse42 .cse34) (= .cse42 (- 5))))) (res (= .cse43 .cse43) (refl .cse43) (cong (and .cse43 .cse32) (and .cse43 .cse33)))) (cong (=> .cse31 .cse30) (=> .cse1 .cse30)))) (res (= .cse44 .cse3) (res .cse45 .cse46 (res (= .cse47 .cse48) (res (= .cse49 (- 7)) (let ((.cse50 (* (- 1) 7))) (res (= .cse50 (- 7)) (poly* .cse50 (- 7)) (res .cse36 .cse37 (let ((.cse51 (+ 0 .cse50)) (.cse52 (+ 0 (- 7)))) (res (= .cse51 .cse52) (cong (+ 0 .cse50) (+ 0 (- 7))) (res (= .cse49 .cse51) (-def 0 7) (res (= .cse52 (- 7)) (poly+ .cse52 (- 7)) (trans .cse49 .cse51 .cse52 (- 7))))))))) (res .cse40 .cse41 (cong (= .cse42 .cse49) (= .cse42 (- 7))))) (cong (=> .cse47 true) (=> .cse48 true)))) (cong (and .cse44 .cse29) (and .cse3 .cse2)))))) (res (= .cse53 .cse53) (refl .cse53) (cong (=> .cse53 .cse28) (=> .cse53 .cse6)))) (res (= .cse54 .cse19) (res (= .cse55 .cse9) (res (= .cse56 .cse10) (res (= false false) (refl false) (res (= .cse57 .cse12) (res (= .cse58 (- 3)) (let ((.cse59 (* (- 1) 3))) (res (= .cse59 (- 3)) (poly* .cse59 (- 3)) (res .cse36 .cse37 (let ((.cse60 (+ 0 .cse59)) (.cse61 (+ 0 (- 3)))) (res (= .cse60 .cse61) (cong (+ 0 .cse59) (+ 0 (- 3))) (res (= .cse58 .cse60) (-def 0 3) (res (= .cse61 (- 3)) (poly+ .cse61 (- 3)) (trans .cse58 .cse60 .cse61 (- 3))))))))) (res (= .cse18 .cse18) (refl .cse18) (cong (= .cse18 .cse58) (= .cse18 (- 3))))) (cong (=> .cse57 false) (=> .cse12 false)))) (res (= .cse62 .cse62) (refl .cse62) (cong (=> .cse62 .cse56) (=> .cse62 .cse10)))) (res (= .cse63 .cse7) (res (= .cse64 .cse8) (res .cse45 .cse46 (res (= .cse65 .cse66) (res (= .cse67 (- 1)) (let ((.cse68 (* (- 1) 1))) (res (= .cse68 (- 1)) (poly* .cse68 (- 1)) (res .cse36 .cse37 (let ((.cse69 (+ 0 .cse68)) (.cse70 (+ 0 (- 1)))) (res (= .cse69 .cse70) (cong (+ 0 .cse68) (+ 0 (- 1))) (res (= .cse67 .cse69) (-def 0 1) (res (= .cse70 (- 1)) (poly+ .cse70 (- 1)) (trans .cse67 .cse69 .cse70 (- 1))))))))) (res (= .cse71 .cse71) (refl .cse71) (cong (= .cse71 .cse67) (= .cse71 (- 1))))) (cong (=> .cse65 true) (=> .cse66 true)))) (res (= .cse72 .cse72) (refl .cse72) (cong (=> .cse72 .cse64) (=> .cse72 .cse8)))) (cong (and .cse63 .cse55) (and .cse7 .cse9)))) (cong (and .cse54 .cse27) (and .cse19 .cse5)))))) (res (= .cse73 .cse73) (refl .cse73) (cong (=> .cse73 .cse26) (=> .cse73 .cse20)))) (cong (not .cse22) (not .cse21))) (=-2 .cse25)))) (not- .cse23))) (res .cse24 (assume .cse24) (not- .cse24))))))))))))))))))) :proves (- .cse5 - .cse9 - .cse7) :input))))))))))) :proves (- .cse5) :rup))))))))) :proves (- .cse2) :rup)))) :proves (+ .cse1) :rup) (! (res .cse33 (and- 1 .cse1) (res .cse75 .cse76 (=-2 .cse75))) :proves (- .cse1 + .cse0) :input)))) :proves (+ .cse0) :rup) (! (let ((.cse78 (not .cse33))) (res .cse33 (let ((.cse77 (not .cse0))) (res .cse77 (res .cse78 (not+ .cse78) (let ((.cse79 (= .cse78 .cse77))) (res .cse79 (res .cse75 .cse76 (cong (not .cse33) (not .cse0))) (=-2 .cse79)))) (not- .cse77))) (res .cse78 (assume .cse78) (not- .cse78)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
