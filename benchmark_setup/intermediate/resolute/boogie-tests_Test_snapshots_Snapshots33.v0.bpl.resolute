success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse12 (+ g@0 (* (- 1) g)))) (let ((.cse33 (ControlFlow 0 2)) (.cse4 (<= .cse12 0))) (let ((.cse5 (<= g@0 0)) (.cse14 (not .cse4)) (.cse28 (= .cse33 (- 1)))) (let ((.cse13 (and .cse14 .cse28)) (.cse7 (not .cse5)) (.cse0 (= g 0))) (let ((.cse1 (and .cse0 (= (ControlFlow 0 3) 2))) (.cse6 (=> .cse13 .cse7))) (let ((.cse2 (=> .cse1 .cse6))) (let-proof ((.cse8 (not+ .cse7)) (.cse15 (not- .cse14))) (let-proof ((.cse3 (let ((.cse38 (= (ControlFlow 0 0) 3))) (let ((.cse16 (=> .cse38 .cse2))) (res .cse16 (=>+ 1 .cse16) (let ((.cse29 (- 0 1))) (let ((.cse35 (< g g@0)) (.cse27 (= .cse33 .cse29))) (let ((.cse26 (and .cse35 .cse27)) (.cse24 (< 0 g@0))) (let ((.cse22 (=> .cse26 .cse24))) (let ((.cse21 (=> .cse1 .cse22))) (let ((.cse17 (=> .cse38 .cse21))) (let ((.cse19 (not .cse17))) (res .cse17 (let ((.cse18 (not .cse16))) (res .cse18 (res .cse19 (not+ .cse19) (let ((.cse20 (= .cse19 .cse18))) (res .cse20 (res (= .cse17 .cse16) (res (= .cse21 .cse2) (res (= .cse22 .cse6) (let ((.cse23 (= .cse24 .cse7))) (res .cse23 (res .cse7 (res .cse24 (=+1 .cse23) (res .cse5 .cse8 (farkas 1 .cse24 1 .cse5))) (res .cse24 (let-proof ((.cse25 (total g@0 0))) (res .cse5 .cse25 (res .cse5 (res .cse24 .cse25 (farkas 1 .cse5 1 .cse24)) (not- .cse7)))) (=+2 .cse23))) (res (= .cse26 .cse13) (res (= .cse27 .cse28) (res (= .cse29 (- 1)) (let ((.cse30 (* (- 1) 1))) (res (= .cse30 (- 1)) (poly* .cse30 (- 1)) (res (= 0 0) (refl 0) (let ((.cse31 (+ 0 .cse30)) (.cse32 (+ 0 (- 1)))) (res (= .cse31 .cse32) (cong (+ 0 .cse30) (+ 0 (- 1))) (res (= .cse29 .cse31) (-def 0 1) (res (= .cse32 (- 1)) (poly+ .cse32 (- 1)) (trans .cse29 .cse31 .cse32 (- 1))))))))) (res (= .cse33 .cse33) (refl .cse33) (cong (= .cse33 .cse29) (= .cse33 (- 1))))) (let ((.cse34 (= .cse35 .cse14))) (res .cse34 (res .cse14 (res .cse35 (=+1 .cse34) (res .cse4 (not+ .cse14) (farkas 1 .cse35 1 .cse4))) (res .cse35 (let ((.cse36 (<= g@0 g))) (res .cse36 (total g@0 g) (res .cse4 (let ((.cse37 (< 0 .cse12))) (res .cse37 (total .cse12 0) (farkas 1 .cse36 1 .cse37))) .cse15))) (=+2 .cse34))) (cong (and .cse35 .cse27) (and .cse14 .cse28))))) (cong (=> .cse26 .cse24) (=> .cse13 .cse7))))) (res (= .cse1 .cse1) (refl .cse1) (cong (=> .cse1 .cse22) (=> .cse1 .cse6)))) (res (= .cse38 .cse38) (refl .cse38) (cong (=> .cse38 .cse21) (=> .cse38 .cse2)))) (cong (not .cse17) (not .cse16))) (=-2 .cse20)))) (not- .cse18))) (res .cse19 (assume .cse19) (not- .cse19))))))))))))))) (res .cse0 (! (res .cse1 (res .cse2 (=>+ 0 .cse2) .cse3) (and- 0 .cse1)) :proves (+ .cse0) :input) (let-proof ((.cse9 (res .cse2 (=>+ 1 .cse2) .cse3))) (res .cse4 (res .cse5 (! (res .cse6 (res .cse7 .cse8 (=>+ 1 .cse6)) .cse9) :proves (+ .cse5) :input) (! (let ((.cse10 (= 0 g))) (res .cse10 (symm 0 g) (let ((.cse11 (<= 1 .cse12))) (res .cse11 (total-int .cse12 0) (farkas 1 .cse5 1 .cse11 1 .cse10))))) :proves (- .cse5 + .cse4 - .cse0) :LA (1 (- 1) (- 1)))) (! (res .cse13 (res .cse6 (=>+ 0 .cse6) .cse9) (res .cse14 (and- 0 .cse13) .cse15)) :proves (- .cse4) :input)))))))))))) :proves () :rup)
unsupported
