success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (res true true+ (let ((.cse0 (=> (= (ControlFlow 0 0) 4) true))) (res .cse0 (=>+ 1 .cse0) (let ((.cse1 (not .cse0))) (res .cse1 (assume .cse1) (not- .cse1)))))) :proves () :input)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (res true true+ (let ((.cse0 (=> (= (ControlFlow 0 0) 3) true))) (res .cse0 (=>+ 1 .cse0) (let ((.cse1 (not .cse0))) (res .cse1 (assume .cse1) (not- .cse1)))))) :proves () :input)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (res true true+ (let ((.cse0 (=> (= (ControlFlow 0 0) 4) true))) (res .cse0 (=>+ 1 .cse0) (let ((.cse1 (not .cse0))) (res .cse1 (assume .cse1) (not- .cse1)))))) :proves () :input)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (res true true+ (let ((.cse0 (=> (= (ControlFlow 0 0) 3) true))) (res .cse0 (=>+ 1 .cse0) (let ((.cse1 (not .cse0))) (res .cse1 (assume .cse1) (not- .cse1)))))) :proves () :input)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_mergedProgSingle_res_ex2.bpl.mod.smt2:182:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_mergedProgSingle_res_ex2.bpl.mod.smt2:185:10: Logical context not inconsistent!")
unsat
(! (let ((.cse17 (ControlFlow 0 4))) (let ((.cse2 (= .cse17 (- 3))) (.cse0 (= (- 3) .cse17))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 3) .cse17)) (res .cse2 (symm .cse17 (- 3)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse86 (= _v1.x _v2.x))) (let ((.cse96 (=> _houdini_Eval_result_1 (=> .cse86 (= _v1.result@0 _v2.result@0))))) (let ((.cse1 (=> .cse2 .cse96))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse106 (=> _houdini_Eval_control_flag_0 (=> (and (= _v1.control_flag _v2.control_flag) .cse86) (= _v1.control_flag@4 _v2.control_flag@4))))) (let ((.cse5 (=> .cse106 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse115 (= .cse17 (- 6)))) (let ((.cse6 (=> .cse115 true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (let ((.cse11 (= .cse17 (- 5)))) (let ((.cse9 (=> .cse11 .cse106))) (let ((.cse18 (and .cse9 .cse5))) (let ((.cse120 (and (and (= _v1.result@0 call3formal@out_result@0) (= _v2.control_flag@4 _v2.control_flag@1)) (and (= _v2.result@0 call3formal@out_result@0@@0) (= (ControlFlow 0 7) 4)))) (.cse19 (and .cse6 .cse18))) (let ((.cse8 (=> .cse120 .cse19))) (res .cse8 (res .cse9 (! (let ((.cse10 (= (- 5) .cse17))) (let ((.cse12 (= .cse11 .cse10))) (let-proof ((.cse13 (res .cse10 (res .cse11 (=+1 .cse12) (symm (- 5) .cse17)) (res .cse11 (symm .cse17 (- 5)) (=+2 .cse12))))) (res .cse10 (! (res .cse11 (=>+ 0 .cse9) (res .cse12 .cse13 (=-2 .cse12))) :proves (+ .cse9 + .cse10) :input) (! (let ((.cse15 (not .cse11))) (res .cse11 (let ((.cse14 (not .cse10))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res .cse12 .cse13 (cong (not .cse11) (not .cse10))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (assume .cse15) (not- .cse15)))) :proves (- .cse10) :input))))) :proves (+ .cse9) :rup) (! (res .cse18 (and+ .cse18) (res .cse19 (and+ .cse19) (=>+ 1 .cse8))) :proves (- .cse5 - .cse9 + .cse8 - .cse6) :input)) (! (let ((.cse121 (= _v1.control_flag@4 _v1.control_flag@1))) (let ((.cse20 (=> .cse121 .cse8))) (res .cse20 (! (=>+ 1 .cse20) :proves (+ .cse20 - .cse8) :input) (! (let ((.cse61 (and (and (and (and (= call3formal@out_result@0 call6formal@_v1.out_result@0) (= call4formal@out_x@0 call7formal@_v1.out_x@0)) (= call3formal@out_result@0@@0 call8formal@_v2.out_result@0)) (= call4formal@out_x@0@@0 call9formal@_v2.out_x@0)) (= (ControlFlow 0 8) 7)))) (let ((.cse21 (=> .cse61 .cse20))) (res .cse21 (! (=>+ 1 .cse21) :proves (+ .cse21 - .cse20) :input) (! (let ((.cse78 (and true .cse86)) (.cse74 (= call6formal@_v1.out_result@0 call8formal@_v2.out_result@0))) (let ((.cse73 (=> .cse78 .cse74)) (.cse85 (= _v1.control_flag@3 _v2.control_flag@3))) (let ((.cse84 (=> .cse78 .cse85)) (.cse71 (=> _houdini_Eval_loop_anon3_LoopHead_out_result_3 .cse73)) (.cse69 (=> _houdini_Eval_loop_anon3_LoopHead_out_x_4 (=> .cse86 (= call7formal@_v1.out_x@0 call9formal@_v2.out_x@0))))) (let ((.cse68 (and .cse71 .cse69)) (.cse66 (and (= _v1.control_flag@3 _v1.control_flag@0) (= _v2.control_flag@3 _v2.control_flag@0))) (.cse27 (and true true)) (.cse82 (=> _houdini_Eval_loop_anon3_LoopHead_control_flag_2 .cse84))) (let ((.cse80 (and .cse27 .cse82)) (.cse65 (and .cse68 .cse66))) (let ((.cse63 (and .cse80 .cse65))) (let ((.cse22 (=> .cse63 .cse21))) (res .cse22 (! (=>+ 1 .cse22) :proves (+ .cse22 - .cse21) :input) (! (let ((.cse144 (ControlFlow 0 10))) (let ((.cse90 (= .cse144 8))) (let ((.cse23 (=> .cse90 .cse22))) (res .cse23 (! (=>+ 1 .cse23) :proves (+ .cse23 - .cse22) :input) (! (let ((.cse28 (not .cse27))) (let ((.cse26 (and .cse28 (= (ControlFlow 0 9) 7)))) (let ((.cse57 (= .cse144 9)) (.cse25 (=> .cse26 .cse20))) (let ((.cse24 (=> .cse57 .cse25))) (res .cse24 (! (res .cse25 (! (res .cse26 (! (=>+ 0 .cse25) :proves (+ .cse25 + .cse26) :input) (! (res true .cse7 (res .cse27 (and+ .cse27) (res .cse28 (and- 0 .cse26) (not- .cse28)))) :proves (- .cse26) :input)) :proves (+ .cse25) :rup) (! (=>+ 1 .cse24) :proves (+ .cse24 - .cse25) :input)) :proves (+ .cse24) :rup) (let ((.cse126 (<= call4formal@out_x@0@@0 0)) (.cse124 (= _v2.control_flag@1 (_v2.control_UIF _v2.control_flag@0 2)))) (let ((.cse123 (and .cse126 .cse124)) (.cse30 (and .cse23 .cse24))) (let ((.cse29 (=> .cse123 .cse30))) (res .cse29 (! (res .cse30 (and+ .cse30) (=>+ 1 .cse29)) :proves (+ .cse29 - .cse23 - .cse24) :input) (! (let ((.cse143 (ControlFlow 0 11))) (let ((.cse130 (= .cse143 10))) (let ((.cse31 (=> .cse130 .cse29))) (res .cse31 (! (=>+ 1 .cse31) :proves (+ .cse31 - .cse29) :input) (! (let ((.cse32 (=> (= .cse143 2) true))) (res .cse32 (! (res true .cse7 (=>+ 1 .cse32)) :proves (+ .cse32) :input) (let ((.cse135 (<= call4formal@out_x@0 0)) (.cse133 (= _v1.control_flag@1 (_v2.control_UIF _v1.control_flag@0 2)))) (let ((.cse132 (and .cse135 .cse133)) (.cse34 (and .cse31 .cse32))) (let ((.cse33 (=> .cse132 .cse34))) (res .cse33 (! (res .cse34 (and+ .cse34) (=>+ 1 .cse33)) :proves (+ .cse33 - .cse31 - .cse32) :input) (! (let ((.cse142 (ControlFlow 0 12))) (let ((.cse139 (= .cse142 11))) (let ((.cse35 (=> .cse139 .cse33))) (res .cse35 (! (=>+ 1 .cse35) :proves (+ .cse35 - .cse33) :input) (! (let ((.cse36 (=> (= .cse142 1) true))) (res .cse36 (! (res true .cse7 (=>+ 1 .cse36)) :proves (+ .cse36) :input) (! (let ((.cse37 (and .cse35 .cse36))) (res .cse37 (and+ .cse37) (let ((.cse140 (= (ControlFlow 0 13) 12))) (let ((.cse38 (=> .cse140 .cse37))) (res .cse38 (=>+ 1 .cse38) (let ((.cse141 (= (ControlFlow 0 0) 13))) (let ((.cse39 (=> .cse141 .cse38))) (res .cse39 (=>+ 1 .cse39) (let ((.cse98 (- 0 3))) (let ((.cse109 (- 0 5)) (.cse97 (= .cse17 .cse98))) (let ((.cse88 (= 0 0)) (.cse116 (- 0 6)) (.cse95 (=> .cse97 .cse96)) (.cse108 (= .cse17 .cse109))) (let ((.cse107 (=> .cse108 .cse106)) (.cse94 (=> .cse106 .cse95)) (.cse114 (= .cse17 .cse116)) (.cse77 (and .cse88 .cse86))) (let ((.cse72 (=> .cse77 .cse74)) (.cse113 (=> .cse114 true)) (.cse93 (and .cse107 .cse94))) (let ((.cse92 (and .cse113 .cse93)) (.cse83 (=> .cse77 .cse85)) (.cse70 (=> _houdini_Eval_loop_anon3_LoopHead_out_result_3 .cse72))) (let ((.cse67 (and .cse70 .cse69)) (.cse81 (=> _houdini_Eval_loop_anon3_LoopHead_control_flag_2 .cse83)) (.cse91 (=> .cse120 .cse92))) (let ((.cse56 (=> .cse121 .cse91)) (.cse79 (and .cse27 .cse81)) (.cse64 (and .cse67 .cse66))) (let ((.cse62 (and .cse79 .cse64)) (.cse60 (=> .cse61 .cse56))) (let ((.cse53 (=> .cse26 .cse56)) (.cse59 (=> .cse62 .cse60))) (let ((.cse58 (=> .cse90 .cse59)) (.cse52 (=> .cse57 .cse53)) (.cse127 (>= 0 call4formal@out_x@0@@0))) (let ((.cse122 (and .cse127 .cse124)) (.cse51 (and .cse58 .cse52))) (let ((.cse50 (=> .cse122 .cse51))) (let ((.cse49 (=> .cse130 .cse50)) (.cse136 (>= 0 call4formal@out_x@0))) (let ((.cse131 (and .cse136 .cse133)) (.cse48 (and .cse49 .cse32))) (let ((.cse47 (=> .cse131 .cse48))) (let ((.cse46 (=> .cse139 .cse47))) (let ((.cse45 (and .cse46 .cse36))) (let ((.cse44 (=> .cse140 .cse45))) (let ((.cse40 (=> .cse141 .cse44))) (let ((.cse42 (not .cse40))) (res .cse40 (let ((.cse41 (not .cse39))) (res .cse41 (res .cse42 (not+ .cse42) (let ((.cse43 (= .cse42 .cse41))) (res .cse43 (res (= .cse40 .cse39) (res (= .cse44 .cse38) (res (= .cse45 .cse37) (res (= .cse36 .cse36) (refl .cse36) (res (= .cse46 .cse35) (res (= .cse47 .cse33) (res (= .cse48 .cse34) (res (= .cse32 .cse32) (refl .cse32) (res (= .cse49 .cse31) (res (= .cse50 .cse29) (res (= .cse51 .cse30) (let-proof ((.cse89 (refl 0))) (let ((.cse54 (= .cse56 .cse20))) (let-proof ((.cse55 (res (= .cse91 .cse8) (res (= .cse92 .cse19) (let ((.cse102 (= .cse17 .cse17))) (let-proof ((.cse103 (refl .cse17))) (res (= .cse93 .cse18) (let ((.cse104 (= .cse106 .cse106))) (let-proof ((.cse105 (refl .cse106))) (res (= .cse94 .cse5) (res (= .cse95 .cse1) (res (= .cse96 .cse96) (refl .cse96) (res (= .cse97 .cse2) (res (= .cse98 (- 3)) (let ((.cse99 (* (- 1) 3))) (res (= .cse99 (- 3)) (poly* .cse99 (- 3)) (res .cse88 .cse89 (let ((.cse100 (+ 0 .cse99)) (.cse101 (+ 0 (- 3)))) (res (= .cse100 .cse101) (cong (+ 0 .cse99) (+ 0 (- 3))) (res (= .cse98 .cse100) (-def 0 3) (res (= .cse101 (- 3)) (poly+ .cse101 (- 3)) (trans .cse98 .cse100 .cse101 (- 3))))))))) (res .cse102 .cse103 (cong (= .cse17 .cse98) (= .cse17 (- 3))))) (cong (=> .cse97 .cse96) (=> .cse2 .cse96)))) (res .cse104 .cse105 (cong (=> .cse106 .cse95) (=> .cse106 .cse1)))) (res (= .cse107 .cse9) (res .cse104 .cse105 (res (= .cse108 .cse11) (res (= .cse109 (- 5)) (let ((.cse110 (* (- 1) 5))) (res (= .cse110 (- 5)) (poly* .cse110 (- 5)) (res .cse88 .cse89 (let ((.cse111 (+ 0 .cse110)) (.cse112 (+ 0 (- 5)))) (res (= .cse111 .cse112) (cong (+ 0 .cse110) (+ 0 (- 5))) (res (= .cse109 .cse111) (-def 0 5) (res (= .cse112 (- 5)) (poly+ .cse112 (- 5)) (trans .cse109 .cse111 .cse112 (- 5))))))))) (res .cse102 .cse103 (cong (= .cse17 .cse109) (= .cse17 (- 5))))) (cong (=> .cse108 .cse106) (=> .cse11 .cse106)))) (cong (and .cse107 .cse94) (and .cse9 .cse5)))))) (res (= .cse113 .cse6) (res (= true true) (refl true) (res (= .cse114 .cse115) (res (= .cse116 (- 6)) (let ((.cse117 (* (- 1) 6))) (res (= .cse117 (- 6)) (poly* .cse117 (- 6)) (res .cse88 .cse89 (let ((.cse118 (+ 0 .cse117)) (.cse119 (+ 0 (- 6)))) (res (= .cse118 .cse119) (cong (+ 0 .cse117) (+ 0 (- 6))) (res (= .cse116 .cse118) (-def 0 6) (res (= .cse119 (- 6)) (poly+ .cse119 (- 6)) (trans .cse116 .cse118 .cse119 (- 6))))))))) (res .cse102 .cse103 (cong (= .cse17 .cse116) (= .cse17 (- 6))))) (cong (=> .cse114 true) (=> .cse115 true)))) (cong (and .cse113 .cse93) (and .cse6 .cse18)))))) (res (= .cse120 .cse120) (refl .cse120) (cong (=> .cse120 .cse92) (=> .cse120 .cse19)))) (res (= .cse121 .cse121) (refl .cse121) (cong (=> .cse121 .cse91) (=> .cse121 .cse8)))))) (res (= .cse52 .cse24) (res (= .cse53 .cse25) (res .cse54 .cse55 (res (= .cse26 .cse26) (refl .cse26) (cong (=> .cse26 .cse56) (=> .cse26 .cse20)))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse53) (=> .cse57 .cse25)))) (res (= .cse58 .cse23) (res (= .cse59 .cse22) (res (= .cse60 .cse21) (res .cse54 .cse55 (res (= .cse61 .cse61) (refl .cse61) (cong (=> .cse61 .cse56) (=> .cse61 .cse20)))) (res (= .cse62 .cse63) (let ((.cse75 (= .cse77 .cse78))) (let-proof ((.cse76 (res (= .cse86 .cse86) (refl .cse86) (let ((.cse87 (= .cse88 true))) (res .cse87 (res true .cse7 (res .cse88 .cse89 (=+2 .cse87))) (cong (and .cse88 .cse86) (and true .cse86))))))) (res (= .cse64 .cse65) (res (= .cse66 .cse66) (refl .cse66) (res (= .cse67 .cse68) (res (= .cse69 .cse69) (refl .cse69) (res (= .cse70 .cse71) (res (= .cse72 .cse73) (res (= .cse74 .cse74) (refl .cse74) (res .cse75 .cse76 (cong (=> .cse77 .cse74) (=> .cse78 .cse74)))) (res (= _houdini_Eval_loop_anon3_LoopHead_out_result_3 _houdini_Eval_loop_anon3_LoopHead_out_result_3) (refl _houdini_Eval_loop_anon3_LoopHead_out_result_3) (cong (=> _houdini_Eval_loop_anon3_LoopHead_out_result_3 .cse72) (=> _houdini_Eval_loop_anon3_LoopHead_out_result_3 .cse73)))) (cong (and .cse70 .cse69) (and .cse71 .cse69)))) (cong (and .cse67 .cse66) (and .cse68 .cse66)))) (res (= .cse79 .cse80) (res (= .cse81 .cse82) (res (= .cse83 .cse84) (res (= .cse85 .cse85) (refl .cse85) (res .cse75 .cse76 (cong (=> .cse77 .cse85) (=> .cse78 .cse85)))) (res (= _houdini_Eval_loop_anon3_LoopHead_control_flag_2 _houdini_Eval_loop_anon3_LoopHead_control_flag_2) (refl _houdini_Eval_loop_anon3_LoopHead_control_flag_2) (cong (=> _houdini_Eval_loop_anon3_LoopHead_control_flag_2 .cse83) (=> _houdini_Eval_loop_anon3_LoopHead_control_flag_2 .cse84)))) (res (= .cse27 .cse27) (refl .cse27) (cong (and .cse27 .cse81) (and .cse27 .cse82)))) (cong (and .cse79 .cse64) (and .cse80 .cse65)))))) (cong (=> .cse62 .cse60) (=> .cse63 .cse21)))) (res (= .cse90 .cse90) (refl .cse90) (cong (=> .cse90 .cse59) (=> .cse90 .cse22)))) (cong (and .cse58 .cse52) (and .cse23 .cse24))))))) (res (= .cse122 .cse123) (res (= .cse124 .cse124) (refl .cse124) (let ((.cse125 (= .cse127 .cse126))) (res .cse125 (res .cse125 (>=def 0 call4formal@out_x@0@@0) (let ((.cse128 (< 0 call4formal@out_x@0@@0))) (let-proof ((.cse129 (total call4formal@out_x@0@@0 0))) (res .cse126 (res .cse127 (=+1 .cse125) (res .cse126 (=-2 .cse125) (res .cse128 .cse129 (farkas 1 .cse126 1 .cse128)))) (res .cse127 (res .cse126 (res .cse128 .cse129 (farkas 1 .cse128 1 .cse126)) (=-1 .cse125)) (=+2 .cse125)))))) (cong (and .cse127 .cse124) (and .cse126 .cse124))))) (cong (=> .cse122 .cse51) (=> .cse123 .cse30)))) (res (= .cse130 .cse130) (refl .cse130) (cong (=> .cse130 .cse50) (=> .cse130 .cse29)))) (cong (and .cse49 .cse32) (and .cse31 .cse32)))) (res (= .cse131 .cse132) (res (= .cse133 .cse133) (refl .cse133) (let ((.cse134 (= .cse136 .cse135))) (res .cse134 (res .cse134 (>=def 0 call4formal@out_x@0) (let ((.cse137 (< 0 call4formal@out_x@0))) (let-proof ((.cse138 (total call4formal@out_x@0 0))) (res .cse135 (res .cse136 (=+1 .cse134) (res .cse135 (=-2 .cse134) (res .cse137 .cse138 (farkas 1 .cse135 1 .cse137)))) (res .cse136 (res .cse135 (res .cse137 .cse138 (farkas 1 .cse137 1 .cse135)) (=-1 .cse134)) (=+2 .cse134)))))) (cong (and .cse136 .cse133) (and .cse135 .cse133))))) (cong (=> .cse131 .cse48) (=> .cse132 .cse34)))) (res (= .cse139 .cse139) (refl .cse139) (cong (=> .cse139 .cse47) (=> .cse139 .cse33)))) (cong (and .cse46 .cse36) (and .cse35 .cse36)))) (res (= .cse140 .cse140) (refl .cse140) (cong (=> .cse140 .cse45) (=> .cse140 .cse37)))) (res (= .cse141 .cse141) (refl .cse141) (cong (=> .cse141 .cse44) (=> .cse141 .cse38)))) (cong (not .cse40) (not .cse39))) (=-2 .cse43)))) (not- .cse41))) (res .cse42 (assume .cse42) (not- .cse42)))))))))))))))))))))))))))))))) :proves (- .cse35 - .cse36) :input))) :proves (- .cse35) :rup))))) :proves (- .cse33) :rup))))))) :proves (- .cse31) :rup))))) :proves (- .cse29) :rup)))))))))) :proves (- .cse23) :rup))))) :proves (- .cse22) :rup))))))))) :proves (- .cse21) :rup)))) :proves (- .cse20) :rup)))) :proves (- .cse8) :rup))))))))))) :proves (- .cse5) :rup)))) :proves (- .cse1) :rup))))) :proves (+ .cse0) :rup) (! (let ((.cse146 (not .cse2))) (res .cse2 (let ((.cse145 (not .cse0))) (res .cse145 (res .cse146 (not+ .cse146) (let ((.cse147 (= .cse146 .cse145))) (res .cse147 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse147)))) (not- .cse145))) (res .cse146 (assume .cse146) (not- .cse146)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
success
success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_mergedProgSingle_res_ex2.bpl.mod.smt2:289:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_mergedProgSingle_res_ex2.bpl.mod.smt2:292:10: Logical context not inconsistent!")
sat
(error "intermediate/mod_smt2/boogie-tests_Test_houdini_mergedProgSingle_res_ex2.bpl.mod.smt2:295:10: Logical context not inconsistent!")
unsat
(! (let ((.cse265 (= _v1.in_x _v2.in_x)) (.cse202 (ControlFlow 0 2))) (let ((.cse194 (= .cse202 (- 1))) (.cse192 (=> _houdini_Eval_loop_anon3_LoopHead_out_x_4 (=> .cse265 (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@2 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@3))))) (let ((.cse191 (=> .cse194 .cse192)) (.cse209 (= .cse202 (- 3))) (.cse205 (=> _houdini_Eval_loop_anon3_LoopHead_out_result_3 (=> (and (= _v1.in_result _v2.in_result) .cse265) (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_result@2 inline$_v2.Eval_loop_anon3_LoopHead$0$out_result@2))))) (let ((.cse207 (=> .cse209 .cse205)) (.cse189 (=> .cse205 .cse191))) (let ((.cse187 (and .cse207 .cse189)) (.cse220 (= .cse202 (- 4))) (.cse216 (=> _houdini_Eval_loop_anon3_LoopHead_control_flag_2 (=> (and (= _v1.control_flag _v2.control_flag) .cse265) (= _v1.control_flag@2 _v2.control_flag@2))))) (let ((.cse218 (=> .cse220 .cse216)) (.cse185 (=> .cse216 .cse187)) (.cse228 (= .cse202 (- 5)))) (let ((.cse226 (=> .cse228 true)) (.cse183 (and .cse218 .cse185))) (let ((.cse179 (and (and (and (and (= _v1.Eval_loop_anon3_LoopHead_out_1_0@0 call6formal@_v1.out_result@0) (= _v1.Eval_loop_anon3_LoopHead_out_1_1@0 call7formal@_v1.out_x@0)) (= _v2.Eval_loop_anon3_LoopHead_out_2_0@0 call8formal@_v2.out_result@0)) (= _v2.Eval_loop_anon3_LoopHead_out_2_1@0 call9formal@_v2.out_x@0)) (= (ControlFlow 0 6) 2))) (.cse171 (and .cse226 .cse183)) (.cse263 (and _v1.Eval_loop_anon3_LoopHead_1_done@0 _v2.Eval_loop_anon3_LoopHead_2_done@0))) (let ((.cse180 (let ((.cse264 (= _v1.Eval_loop_anon3_LoopHead_in_1_1@0 _v2.Eval_loop_anon3_LoopHead_in_2_1@0))) (and (and .cse263 (=> _houdini_Eval_loop_anon3_LoopHead_control_flag_2 (=> (and (= _v1.Eval_loop_anon3_LoopHead_in_1_2@0 _v2.Eval_loop_anon3_LoopHead_in_2_2@0) .cse264) (= _v1.control_flag@3 _v2.control_flag@3)))) (and (and (=> _houdini_Eval_loop_anon3_LoopHead_out_result_3 (=> (and (= _v1.Eval_loop_anon3_LoopHead_in_1_0@0 _v2.Eval_loop_anon3_LoopHead_in_2_0@0) .cse264) (= call6formal@_v1.out_result@0 call8formal@_v2.out_result@0))) (=> _houdini_Eval_loop_anon3_LoopHead_out_x_4 (=> .cse264 (= call7formal@_v1.out_x@0 call9formal@_v2.out_x@0)))) (and (= _v1.control_flag@3 _v1.Eval_loop_anon3_LoopHead_out_1_2@0) (= _v2.control_flag@3 _v2.Eval_loop_anon3_LoopHead_out_2_2@0)))))) (.cse178 (=> .cse179 .cse171)) (.cse169 (and (not .cse263) (= (ControlFlow 0 7) 2))) (.cse262 (ControlFlow 0 8)) (.cse111 (= _v2.Eval_loop_anon3_LoopHead_out_2_0@0 call3formal@out_result@0))) (let ((.cse112 (and (= _v2.Eval_loop_anon3_LoopHead_out_2_2@0 _v2.control_flag@1) (= _v2.Eval_loop_anon3_LoopHead_out_2_1@0 call4formal@out_x@0))) (.cse108 (and .cse111 _v2.Eval_loop_anon3_LoopHead_2_done@0)) (.cse172 (= .cse262 7)) (.cse166 (=> .cse169 .cse171)) (.cse181 (= .cse262 6)) (.cse176 (=> .cse180 .cse178)) (.cse124 (+ _v2.in_x (- 1)))) (let ((.cse152 (= _v2.Eval_loop_anon3_LoopHead_out_2_0@0 _v2.Eval_loop_anon3_LoopHead_out_2_0)) (.cse150 (not _v2.Eval_loop_anon3_LoopHead_2_done@0)) (.cse122 (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 .cse124)) (.cse120 (= _v2.Eval_loop_anon3_LoopHead_in_2_0@0 inline$_v2.Eval_loop_anon3_LoopHead$0$out_result@1)) (.cse174 (=> .cse181 .cse176)) (.cse164 (=> .cse172 .cse166)) (.cse106 (and .cse112 .cse108)) (.cse104 (and (and (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_result@2 call3formal@out_result@0) (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@3 call4formal@out_x@0)) (and (= _v2.control_flag@2 _v2.control_flag@1) (= (ControlFlow 0 10) 8))))) (let ((.cse103 (and .cse106 .cse104)) (.cse114 (and .cse174 .cse164)) (.cse119 (and .cse122 .cse120)) (.cse117 (and (= _v2.Eval_loop_anon3_LoopHead_in_2_1@0 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@2) (= _v2.Eval_loop_anon3_LoopHead_in_2_2@0 _v2.control_flag@0))) (.cse153 (and (= _v2.Eval_loop_anon3_LoopHead_out_2_2@0 _v2.Eval_loop_anon3_LoopHead_out_2_2) (= _v2.Eval_loop_anon3_LoopHead_out_2_1@0 _v2.Eval_loop_anon3_LoopHead_out_2_1))) (.cse148 (and .cse152 .cse150))) (let ((.cse132 (<= _v2.in_x 0)) (.cse159 (= _v2.Eval_loop_anon3_LoopHead_in_2_0@0 _v2.Eval_loop_anon3_LoopHead_in_2_0)) (.cse146 (and .cse153 .cse148)) (.cse144 (and (and (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_result@2 _v2.in_result) (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@3 _v2.in_x)) (and (= _v2.control_flag@2 _v2.control_flag) (= (ControlFlow 0 9) 8)))) (.cse116 (and .cse119 .cse117)) (.cse99 (=> .cse103 .cse114))) (let ((.cse126 (and (= _v2.control_flag@0 (_v2.control_UIF _v2.control_flag 1)) (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_result@1 (+ _v2.in_result _v2.in_x)))) (.cse97 (=> .cse116 .cse99)) (.cse143 (and .cse146 .cse144)) (.cse158 (and .cse132 .cse159)) (.cse156 (and (= _v2.Eval_loop_anon3_LoopHead_in_2_1@0 _v2.Eval_loop_anon3_LoopHead_in_2_1) (= _v2.Eval_loop_anon3_LoopHead_in_2_2@0 _v2.Eval_loop_anon3_LoopHead_in_2_2)))) (let ((.cse155 (and .cse158 .cse156)) (.cse141 (=> .cse143 .cse114)) (.cse129 (not .cse132)) (.cse95 (=> .cse126 .cse97)) (.cse261 (ControlFlow 0 11)) (.cse38 (= _v1.Eval_loop_anon3_LoopHead_out_1_0@0 call3formal@out_result@0@@0))) (let ((.cse39 (and (= _v1.Eval_loop_anon3_LoopHead_out_1_2@0 _v1.control_flag@1) (= _v1.Eval_loop_anon3_LoopHead_out_1_1@0 call4formal@out_x@0@@0))) (.cse34 (and .cse38 _v1.Eval_loop_anon3_LoopHead_1_done@0)) (.cse136 (= .cse261 10)) (.cse93 (=> .cse129 .cse95)) (.cse162 (= .cse261 9)) (.cse139 (=> .cse155 .cse141)) (.cse50 (+ _v1.in_x (- 1)))) (let ((.cse48 (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1 .cse50)) (.cse46 (= _v1.Eval_loop_anon3_LoopHead_in_1_0@0 inline$_v1.Eval_loop_anon3_LoopHead$0$out_result@1)) (.cse4 (=> .cse162 .cse139)) (.cse6 (=> .cse136 .cse93)) (.cse32 (and .cse39 .cse34)) (.cse30 (and (and (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_result@2 call3formal@out_result@0@@0) (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@2 call4formal@out_x@0@@0)) (and (= _v1.control_flag@2 _v1.control_flag@1) (= (ControlFlow 0 13) 11))))) (let ((.cse29 (and .cse32 .cse30)) (.cse8 (and .cse4 .cse6)) (.cse45 (and .cse48 .cse46)) (.cse43 (and (= _v1.Eval_loop_anon3_LoopHead_in_1_1@0 inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1) (= _v1.Eval_loop_anon3_LoopHead_in_1_2@0 _v1.control_flag@0)))) (let ((.cse42 (and .cse45 .cse43)) (.cse3 (=> .cse29 .cse8))) (let-proof ((.cse36 true+)) (let ((.cse55 (and (= _v1.control_flag@0 (_v2.control_UIF _v1.control_flag 1)) (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_result@1 (+ _v1.in_result _v1.in_x)))) (.cse2 (=> .cse42 .cse3)) (.cse61 (<= _v1.in_x 0))) (let-proof ((.cse238 (! (res true .cse36 (=>+ 1 .cse226)) :proves (+ .cse226) :input)) (.cse239 (! (let ((.cse255 (= (- 4) .cse202))) (let ((.cse256 (= .cse220 .cse255))) (let-proof ((.cse257 (res .cse255 (res .cse220 (=+1 .cse256) (symm (- 4) .cse202)) (res .cse220 (symm .cse202 (- 4)) (=+2 .cse256))))) (res .cse255 (! (res .cse220 (=>+ 0 .cse218) (res .cse256 .cse257 (=-2 .cse256))) :proves (+ .cse218 + .cse255) :input) (! (let ((.cse259 (not .cse220))) (res .cse220 (let ((.cse258 (not .cse255))) (res .cse258 (res .cse259 (not+ .cse259) (let ((.cse260 (= .cse259 .cse258))) (res .cse260 (res .cse256 .cse257 (cong (not .cse220) (not .cse255))) (=-2 .cse260)))) (not- .cse258))) (res .cse259 (assume .cse259) (not- .cse259)))) :proves (- .cse255) :input))))) :proves (+ .cse218) :rup)) (.cse240 (! (res .cse189 (! (res .cse191 (! (let ((.cse243 (= (- 1) .cse202))) (let ((.cse244 (= .cse194 .cse243))) (let-proof ((.cse245 (res .cse243 (res .cse194 (=+1 .cse244) (symm (- 1) .cse202)) (res .cse194 (symm .cse202 (- 1)) (=+2 .cse244))))) (res .cse243 (! (res .cse194 (=>+ 0 .cse191) (res .cse244 .cse245 (=-2 .cse244))) :proves (+ .cse191 + .cse243) :input) (! (let ((.cse247 (not .cse194))) (res .cse194 (let ((.cse246 (not .cse243))) (res .cse246 (res .cse247 (not+ .cse247) (let ((.cse248 (= .cse247 .cse246))) (res .cse248 (res .cse244 .cse245 (cong (not .cse194) (not .cse243))) (=-2 .cse248)))) (not- .cse246))) (res .cse247 (assume .cse247) (not- .cse247)))) :proves (- .cse243) :input))))) :proves (+ .cse191) :rup) (! (=>+ 1 .cse189) :proves (+ .cse189 - .cse191) :input)) :proves (+ .cse189) :rup) (res .cse207 (! (let ((.cse249 (= (- 3) .cse202))) (let ((.cse250 (= .cse209 .cse249))) (let-proof ((.cse251 (res .cse249 (res .cse209 (=+1 .cse250) (symm (- 3) .cse202)) (res .cse209 (symm .cse202 (- 3)) (=+2 .cse250))))) (res .cse249 (! (res .cse209 (=>+ 0 .cse207) (res .cse250 .cse251 (=-2 .cse250))) :proves (+ .cse207 + .cse249) :input) (! (let ((.cse253 (not .cse209))) (res .cse209 (let ((.cse252 (not .cse249))) (res .cse252 (res .cse253 (not+ .cse253) (let ((.cse254 (= .cse253 .cse252))) (res .cse254 (res .cse250 .cse251 (cong (not .cse209) (not .cse249))) (=-2 .cse254)))) (not- .cse252))) (res .cse253 (assume .cse253) (not- .cse253)))) :proves (- .cse249) :input))))) :proves (+ .cse207) :rup) (! (res .cse187 (and+ .cse187) (=>+ 1 .cse185)) :proves (+ .cse185 - .cse207 - .cse189) :input))) :proves (+ .cse185) :rup)) (.cse241 (and+ .cse183)) (.cse242 (and+ .cse171))) (let ((.cse58 (not .cse61)) (.cse1 (=> .cse55 .cse2))) (let-proof ((.cse235 (! (res .cse166 (! (res .cse226 .cse238 (res .cse218 .cse239 (res .cse185 .cse240 (! (res .cse183 .cse241 (res .cse171 .cse242 (=>+ 1 .cse166))) :proves (- .cse185 + .cse166 - .cse218 - .cse226) :input)))) :proves (+ .cse166) :rup) (! (=>+ 1 .cse164) :proves (+ .cse164 - .cse166) :input)) :proves (+ .cse164) :rup)) (.cse236 (! (res .cse176 (! (res .cse178 (! (res .cse226 .cse238 (res .cse218 .cse239 (res .cse185 .cse240 (! (res .cse183 .cse241 (res .cse171 .cse242 (=>+ 1 .cse178))) :proves (- .cse185 + .cse178 - .cse218 - .cse226) :input)))) :proves (+ .cse178) :rup) (! (=>+ 1 .cse176) :proves (+ .cse176 - .cse178) :input)) :proves (+ .cse176) :rup) (! (=>+ 1 .cse174) :proves (+ .cse174 - .cse176) :input)) :proves (+ .cse174) :rup)) (.cse237 (and+ .cse114))) (let ((.cse0 (=> .cse58 .cse1))) (let-proof ((.cse5 (! (res .cse139 (! (res .cse141 (! (res .cse164 .cse235 (res .cse174 .cse236 (! (res .cse114 .cse237 (=>+ 1 .cse141)) :proves (- .cse174 + .cse141 - .cse164) :input))) :proves (+ .cse141) :rup) (! (=>+ 1 .cse139) :proves (+ .cse139 - .cse141) :input)) :proves (+ .cse139) :rup) (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse139) :input)) :proves (+ .cse4) :rup)) (.cse7 (! (res .cse93 (! (res .cse95 (! (res .cse97 (! (res .cse99 (! (res .cse164 .cse235 (res .cse174 .cse236 (! (res .cse114 .cse237 (=>+ 1 .cse99)) :proves (- .cse174 + .cse99 - .cse164) :input))) :proves (+ .cse99) :rup) (! (=>+ 1 .cse97) :proves (+ .cse97 - .cse99) :input)) :proves (+ .cse97) :rup) (! (=>+ 1 .cse95) :proves (+ .cse95 - .cse97) :input)) :proves (+ .cse95) :rup) (! (=>+ 1 .cse93) :proves (+ .cse93 - .cse95) :input)) :proves (+ .cse93) :rup) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse93) :input)) :proves (+ .cse6) :rup)) (.cse9 (and+ .cse8))) (res .cse0 (! (res .cse1 (! (res .cse2 (! (res .cse3 (! (res .cse4 .cse5 (res .cse6 .cse7 (! (res .cse8 .cse9 (=>+ 1 .cse3)) :proves (- .cse6 + .cse3 - .cse4) :input))) :proves (+ .cse3) :rup) (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse3) :input)) :proves (+ .cse2) :rup) (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse234 (ControlFlow 0 14))) (let ((.cse65 (= .cse234 13))) (let ((.cse10 (=> .cse65 .cse0))) (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse0) :input) (! (let ((.cse80 (= _v1.Eval_loop_anon3_LoopHead_out_1_0@0 _v1.Eval_loop_anon3_LoopHead_out_1_0)) (.cse77 (not _v1.Eval_loop_anon3_LoopHead_1_done@0))) (let ((.cse81 (and (= _v1.Eval_loop_anon3_LoopHead_out_1_2@0 _v1.Eval_loop_anon3_LoopHead_out_1_2) (= _v1.Eval_loop_anon3_LoopHead_out_1_1@0 _v1.Eval_loop_anon3_LoopHead_out_1_1))) (.cse75 (and .cse80 .cse77))) (let ((.cse87 (= _v1.Eval_loop_anon3_LoopHead_in_1_0@0 _v1.Eval_loop_anon3_LoopHead_in_1_0)) (.cse73 (and .cse81 .cse75)) (.cse71 (and (and (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_result@2 _v1.in_result) (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@2 _v1.in_x)) (and (= _v1.control_flag@2 _v1.control_flag) (= (ControlFlow 0 12) 11))))) (let ((.cse70 (and .cse73 .cse71)) (.cse86 (and .cse61 .cse87)) (.cse84 (and (= _v1.Eval_loop_anon3_LoopHead_in_1_1@0 _v1.Eval_loop_anon3_LoopHead_in_1_1) (= _v1.Eval_loop_anon3_LoopHead_in_1_2@0 _v1.Eval_loop_anon3_LoopHead_in_1_2)))) (let ((.cse83 (and .cse86 .cse84)) (.cse13 (=> .cse70 .cse8))) (let ((.cse90 (= .cse234 12)) (.cse12 (=> .cse83 .cse13))) (let ((.cse11 (=> .cse90 .cse12))) (res .cse11 (! (res .cse12 (! (res .cse13 (! (res .cse4 .cse5 (res .cse6 .cse7 (! (res .cse8 .cse9 (=>+ 1 .cse13)) :proves (+ .cse13 - .cse6 - .cse4) :input))) :proves (+ .cse13) :rup) (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse13) :input)) :proves (+ .cse12) :rup) (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse12) :input)) :proves (+ .cse11) :rup) (! (let ((.cse14 (and .cse11 .cse10))) (res .cse14 (and+ .cse14) (let ((.cse233 (= (ControlFlow 0 0) 14))) (let ((.cse15 (=> .cse233 .cse14))) (res .cse15 (=>+ 1 .cse15) (let ((.cse195 (- 0 1))) (let ((.cse210 (- 0 3)) (.cse193 (= .cse202 .cse195))) (let ((.cse190 (=> .cse193 .cse192)) (.cse208 (= .cse202 .cse210))) (let ((.cse221 (- 0 4)) (.cse206 (=> .cse208 .cse205)) (.cse188 (=> .cse205 .cse190))) (let ((.cse229 (- 0 5)) (.cse186 (and .cse206 .cse188)) (.cse219 (= .cse202 .cse221))) (let ((.cse217 (=> .cse219 .cse216)) (.cse184 (=> .cse216 .cse186)) (.cse227 (= .cse202 .cse229))) (let ((.cse225 (=> .cse227 true)) (.cse182 (and .cse217 .cse184))) (let ((.cse170 (and .cse225 .cse182))) (let ((.cse177 (=> .cse179 .cse170)) (.cse110 (= _v2.Eval_loop_anon3_LoopHead_2_done@0 true))) (let ((.cse107 (and .cse111 .cse110)) (.cse165 (=> .cse169 .cse170)) (.cse175 (=> .cse180 .cse177)) (.cse123 (- _v2.in_x 1))) (let ((.cse151 (= _v2.Eval_loop_anon3_LoopHead_2_done@0 false)) (.cse121 (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 .cse123)) (.cse173 (=> .cse181 .cse175)) (.cse163 (=> .cse172 .cse165)) (.cse105 (and .cse112 .cse107))) (let ((.cse102 (and .cse105 .cse104)) (.cse113 (and .cse173 .cse163)) (.cse118 (and .cse121 .cse120)) (.cse147 (and .cse152 .cse151))) (let ((.cse161 (>= 0 _v2.in_x)) (.cse145 (and .cse153 .cse147)) (.cse115 (and .cse118 .cse117)) (.cse98 (=> .cse102 .cse113))) (let ((.cse96 (=> .cse115 .cse98)) (.cse142 (and .cse145 .cse144)) (.cse157 (and .cse161 .cse159))) (let ((.cse154 (and .cse157 .cse156)) (.cse140 (=> .cse142 .cse113)) (.cse130 (> _v2.in_x 0)) (.cse94 (=> .cse126 .cse96)) (.cse37 (= _v1.Eval_loop_anon3_LoopHead_1_done@0 true))) (let ((.cse33 (and .cse38 .cse37)) (.cse92 (=> .cse130 .cse94)) (.cse138 (=> .cse154 .cse140)) (.cse49 (- _v1.in_x 1))) (let ((.cse78 (= _v1.Eval_loop_anon3_LoopHead_1_done@0 false)) (.cse47 (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1 .cse49)) (.cse137 (=> .cse162 .cse138)) (.cse91 (=> .cse136 .cse92)) (.cse31 (and .cse39 .cse33))) (let ((.cse28 (and .cse31 .cse30)) (.cse40 (and .cse137 .cse91)) (.cse44 (and .cse47 .cse46)) (.cse74 (and .cse80 .cse78))) (let ((.cse89 (>= 0 _v1.in_x)) (.cse72 (and .cse81 .cse74)) (.cse41 (and .cse44 .cse43)) (.cse25 (=> .cse28 .cse40))) (let ((.cse24 (=> .cse41 .cse25)) (.cse69 (and .cse72 .cse71)) (.cse85 (and .cse89 .cse87))) (let ((.cse82 (and .cse85 .cse84)) (.cse68 (=> .cse69 .cse40)) (.cse59 (> _v1.in_x 0)) (.cse23 (=> .cse55 .cse24))) (let ((.cse22 (=> .cse59 .cse23)) (.cse67 (=> .cse82 .cse68))) (let ((.cse66 (=> .cse90 .cse67)) (.cse21 (=> .cse65 .cse22))) (let ((.cse20 (and .cse66 .cse21))) (let ((.cse16 (=> .cse233 .cse20))) (let ((.cse18 (not .cse16))) (res .cse16 (let ((.cse17 (not .cse15))) (res .cse17 (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (res (= .cse16 .cse15) (res (= .cse20 .cse14) (let ((.cse54 (* (- 1) 1))) (let ((.cse60 (< 0 _v1.in_x)) (.cse51 (= .cse54 (- 1)))) (let-proof ((.cse63 (total _v1.in_x 0)) (.cse79 false-) (.cse52 (poly* .cse54 (- 1)))) (let ((.cse26 (= .cse40 .cse8))) (let-proof ((.cse27 (let ((.cse131 (< 0 _v2.in_x))) (let-proof ((.cse134 (total _v2.in_x 0))) (let ((.cse100 (= .cse113 .cse114))) (let-proof ((.cse101 (let ((.cse167 (= .cse170 .cse171))) (let-proof ((.cse168 (let ((.cse196 (= 0 0)) (.cse200 (= .cse202 .cse202))) (let-proof ((.cse197 (refl 0)) (.cse201 (refl .cse202))) (res (= .cse182 .cse183) (let ((.cse214 (= .cse216 .cse216))) (let-proof ((.cse215 (refl .cse216))) (res (= .cse184 .cse185) (res (= .cse186 .cse187) (let ((.cse203 (= .cse205 .cse205))) (let-proof ((.cse204 (refl .cse205))) (res (= .cse188 .cse189) (res (= .cse190 .cse191) (res (= .cse192 .cse192) (refl .cse192) (res (= .cse193 .cse194) (res (= .cse195 (- 1)) (res .cse51 .cse52 (res .cse196 .cse197 (let ((.cse198 (+ 0 .cse54)) (.cse199 (+ 0 (- 1)))) (res (= .cse198 .cse199) (cong (+ 0 .cse54) (+ 0 (- 1))) (res (= .cse195 .cse198) (-def 0 1) (res (= .cse199 (- 1)) (poly+ .cse199 (- 1)) (trans .cse195 .cse198 .cse199 (- 1)))))))) (res .cse200 .cse201 (cong (= .cse202 .cse195) (= .cse202 (- 1))))) (cong (=> .cse193 .cse192) (=> .cse194 .cse192)))) (res .cse203 .cse204 (cong (=> .cse205 .cse190) (=> .cse205 .cse191)))) (res (= .cse206 .cse207) (res .cse203 .cse204 (res (= .cse208 .cse209) (res (= .cse210 (- 3)) (let ((.cse211 (* (- 1) 3))) (res (= .cse211 (- 3)) (poly* .cse211 (- 3)) (res .cse196 .cse197 (let ((.cse212 (+ 0 .cse211)) (.cse213 (+ 0 (- 3)))) (res (= .cse212 .cse213) (cong (+ 0 .cse211) (+ 0 (- 3))) (res (= .cse210 .cse212) (-def 0 3) (res (= .cse213 (- 3)) (poly+ .cse213 (- 3)) (trans .cse210 .cse212 .cse213 (- 3))))))))) (res .cse200 .cse201 (cong (= .cse202 .cse210) (= .cse202 (- 3))))) (cong (=> .cse208 .cse205) (=> .cse209 .cse205)))) (cong (and .cse206 .cse188) (and .cse207 .cse189)))))) (res .cse214 .cse215 (cong (=> .cse216 .cse186) (=> .cse216 .cse187)))) (res (= .cse217 .cse218) (res .cse214 .cse215 (res (= .cse219 .cse220) (res (= .cse221 (- 4)) (let ((.cse222 (* (- 1) 4))) (res (= .cse222 (- 4)) (poly* .cse222 (- 4)) (res .cse196 .cse197 (let ((.cse223 (+ 0 .cse222)) (.cse224 (+ 0 (- 4)))) (res (= .cse223 .cse224) (cong (+ 0 .cse222) (+ 0 (- 4))) (res (= .cse221 .cse223) (-def 0 4) (res (= .cse224 (- 4)) (poly+ .cse224 (- 4)) (trans .cse221 .cse223 .cse224 (- 4))))))))) (res .cse200 .cse201 (cong (= .cse202 .cse221) (= .cse202 (- 4))))) (cong (=> .cse219 .cse216) (=> .cse220 .cse216)))) (cong (and .cse217 .cse184) (and .cse218 .cse185)))))) (res (= .cse225 .cse226) (res (= true true) (refl true) (res (= .cse227 .cse228) (res (= .cse229 (- 5)) (let ((.cse230 (* (- 1) 5))) (res (= .cse230 (- 5)) (poly* .cse230 (- 5)) (res .cse196 .cse197 (let ((.cse231 (+ 0 .cse230)) (.cse232 (+ 0 (- 5)))) (res (= .cse231 .cse232) (cong (+ 0 .cse230) (+ 0 (- 5))) (res (= .cse229 .cse231) (-def 0 5) (res (= .cse232 (- 5)) (poly+ .cse232 (- 5)) (trans .cse229 .cse231 .cse232 (- 5))))))))) (res .cse200 .cse201 (cong (= .cse202 .cse229) (= .cse202 (- 5))))) (cong (=> .cse227 true) (=> .cse228 true)))) (cong (and .cse225 .cse182) (and .cse226 .cse183)))))))) (res (= .cse163 .cse164) (res (= .cse165 .cse166) (res .cse167 .cse168 (res (= .cse169 .cse169) (refl .cse169) (cong (=> .cse169 .cse170) (=> .cse169 .cse171)))) (res (= .cse172 .cse172) (refl .cse172) (cong (=> .cse172 .cse165) (=> .cse172 .cse166)))) (res (= .cse173 .cse174) (res (= .cse175 .cse176) (res (= .cse177 .cse178) (res .cse167 .cse168 (res (= .cse179 .cse179) (refl .cse179) (cong (=> .cse179 .cse170) (=> .cse179 .cse171)))) (res (= .cse180 .cse180) (refl .cse180) (cong (=> .cse180 .cse177) (=> .cse180 .cse178)))) (res (= .cse181 .cse181) (refl .cse181) (cong (=> .cse181 .cse175) (=> .cse181 .cse176)))) (cong (and .cse173 .cse163) (and .cse174 .cse164))))))) (.cse135 (res .cse131 .cse134 (farkas 1 .cse132 1 .cse131))) (.cse133 (farkas 1 .cse131 1 .cse132))) (res (= .cse91 .cse6) (res (= .cse92 .cse93) (res (= .cse94 .cse95) (res (= .cse96 .cse97) (res (= .cse98 .cse99) (res .cse100 .cse101 (res (= .cse102 .cse103) (res (= .cse104 .cse104) (refl .cse104) (res (= .cse105 .cse106) (res (= .cse107 .cse108) (let ((.cse109 (= .cse110 _v2.Eval_loop_anon3_LoopHead_2_done@0))) (res .cse109 (res true .cse36 (res _v2.Eval_loop_anon3_LoopHead_2_done@0 (res .cse110 (=+1 .cse109) (=-1 .cse110)) (res .cse110 (=+2 .cse110) (=+2 .cse109)))) (res (= .cse111 .cse111) (refl .cse111) (cong (and .cse111 .cse110) (and .cse111 _v2.Eval_loop_anon3_LoopHead_2_done@0))))) (res (= .cse112 .cse112) (refl .cse112) (cong (and .cse112 .cse107) (and .cse112 .cse108)))) (cong (and .cse105 .cse104) (and .cse106 .cse104)))) (cong (=> .cse102 .cse113) (=> .cse103 .cse114)))) (res (= .cse115 .cse116) (res (= .cse117 .cse117) (refl .cse117) (res (= .cse118 .cse119) (res (= .cse120 .cse120) (refl .cse120) (res (= .cse121 .cse122) (res (= .cse123 .cse124) (res .cse51 .cse52 (res (= _v2.in_x _v2.in_x) (refl _v2.in_x) (let ((.cse125 (+ _v2.in_x .cse54))) (res (= .cse125 .cse124) (cong (+ _v2.in_x .cse54) (+ _v2.in_x (- 1))) (res (= .cse123 .cse125) (-def _v2.in_x 1) (trans .cse123 .cse125 .cse124)))))) (res (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1) (refl inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1) (cong (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 .cse123) (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 .cse124)))) (cong (and .cse121 .cse120) (and .cse122 .cse120)))) (cong (and .cse118 .cse117) (and .cse119 .cse117)))) (cong (=> .cse115 .cse98) (=> .cse116 .cse99)))) (res (= .cse126 .cse126) (refl .cse126) (cong (=> .cse126 .cse96) (=> .cse126 .cse97)))) (let ((.cse127 (= .cse130 .cse129))) (res .cse127 (let ((.cse128 (= .cse130 .cse131))) (res .cse128 (>def _v2.in_x 0) (res .cse129 (res .cse130 (=+1 .cse127) (res .cse131 (=-2 .cse128) (res .cse132 (not+ .cse129) .cse133))) (res .cse130 (res .cse131 (res .cse132 .cse134 (res .cse132 .cse135 (not- .cse129))) (=-1 .cse128)) (=+2 .cse127))))) (cong (=> .cse130 .cse94) (=> .cse129 .cse95))))) (res (= .cse136 .cse136) (refl .cse136) (cong (=> .cse136 .cse92) (=> .cse136 .cse93)))) (res (= .cse137 .cse4) (res (= .cse138 .cse139) (res (= .cse140 .cse141) (res .cse100 .cse101 (res (= .cse142 .cse143) (res (= .cse144 .cse144) (refl .cse144) (res (= .cse145 .cse146) (res (= .cse147 .cse148) (let ((.cse149 (= .cse151 .cse150))) (res .cse149 (res false (res .cse150 (res .cse151 (=+1 .cse149) (res _v2.Eval_loop_anon3_LoopHead_2_done@0 (not+ .cse150) (=-2 .cse151))) (res .cse151 (res _v2.Eval_loop_anon3_LoopHead_2_done@0 (=+1 .cse151) (not- .cse150)) (=+2 .cse149))) .cse79) (res (= .cse152 .cse152) (refl .cse152) (cong (and .cse152 .cse151) (and .cse152 .cse150))))) (res (= .cse153 .cse153) (refl .cse153) (cong (and .cse153 .cse147) (and .cse153 .cse148)))) (cong (and .cse145 .cse144) (and .cse146 .cse144)))) (cong (=> .cse142 .cse113) (=> .cse143 .cse114)))) (res (= .cse154 .cse155) (res (= .cse156 .cse156) (refl .cse156) (res (= .cse157 .cse158) (res (= .cse159 .cse159) (refl .cse159) (let ((.cse160 (= .cse161 .cse132))) (res .cse160 (res .cse160 (>=def 0 _v2.in_x) (res .cse132 (res .cse161 (=+1 .cse160) (res .cse132 (=-2 .cse160) .cse135)) (res .cse161 (res .cse132 (res .cse131 .cse134 .cse133) (=-1 .cse160)) (=+2 .cse160)))) (cong (and .cse161 .cse159) (and .cse132 .cse159))))) (cong (and .cse157 .cse156) (and .cse158 .cse156)))) (cong (=> .cse154 .cse140) (=> .cse155 .cse141)))) (res (= .cse162 .cse162) (refl .cse162) (cong (=> .cse162 .cse138) (=> .cse162 .cse139)))) (cong (and .cse137 .cse91) (and .cse4 .cse6))))))))) (.cse64 (res .cse60 .cse63 (farkas 1 .cse61 1 .cse60))) (.cse62 (farkas 1 .cse60 1 .cse61))) (res (= .cse21 .cse10) (res (= .cse22 .cse0) (res (= .cse23 .cse1) (res (= .cse24 .cse2) (res (= .cse25 .cse3) (res .cse26 .cse27 (res (= .cse28 .cse29) (res (= .cse30 .cse30) (refl .cse30) (res (= .cse31 .cse32) (res (= .cse33 .cse34) (let ((.cse35 (= .cse37 _v1.Eval_loop_anon3_LoopHead_1_done@0))) (res .cse35 (res true .cse36 (res _v1.Eval_loop_anon3_LoopHead_1_done@0 (res .cse37 (=+1 .cse35) (=-1 .cse37)) (res .cse37 (=+2 .cse37) (=+2 .cse35)))) (res (= .cse38 .cse38) (refl .cse38) (cong (and .cse38 .cse37) (and .cse38 _v1.Eval_loop_anon3_LoopHead_1_done@0))))) (res (= .cse39 .cse39) (refl .cse39) (cong (and .cse39 .cse33) (and .cse39 .cse34)))) (cong (and .cse31 .cse30) (and .cse32 .cse30)))) (cong (=> .cse28 .cse40) (=> .cse29 .cse8)))) (res (= .cse41 .cse42) (res (= .cse43 .cse43) (refl .cse43) (res (= .cse44 .cse45) (res (= .cse46 .cse46) (refl .cse46) (res (= .cse47 .cse48) (res (= .cse49 .cse50) (res .cse51 .cse52 (res (= _v1.in_x _v1.in_x) (refl _v1.in_x) (let ((.cse53 (+ _v1.in_x .cse54))) (res (= .cse53 .cse50) (cong (+ _v1.in_x .cse54) (+ _v1.in_x (- 1))) (res (= .cse49 .cse53) (-def _v1.in_x 1) (trans .cse49 .cse53 .cse50)))))) (res (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1 inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1) (refl inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1) (cong (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1 .cse49) (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1 .cse50)))) (cong (and .cse47 .cse46) (and .cse48 .cse46)))) (cong (and .cse44 .cse43) (and .cse45 .cse43)))) (cong (=> .cse41 .cse25) (=> .cse42 .cse3)))) (res (= .cse55 .cse55) (refl .cse55) (cong (=> .cse55 .cse24) (=> .cse55 .cse2)))) (let ((.cse56 (= .cse59 .cse58))) (res .cse56 (let ((.cse57 (= .cse59 .cse60))) (res .cse57 (>def _v1.in_x 0) (res .cse58 (res .cse59 (=+1 .cse56) (res .cse60 (=-2 .cse57) (res .cse61 (not+ .cse58) .cse62))) (res .cse59 (res .cse60 (res .cse61 .cse63 (res .cse61 .cse64 (not- .cse58))) (=-1 .cse57)) (=+2 .cse56))))) (cong (=> .cse59 .cse23) (=> .cse58 .cse1))))) (res (= .cse65 .cse65) (refl .cse65) (cong (=> .cse65 .cse22) (=> .cse65 .cse0)))) (res (= .cse66 .cse11) (res (= .cse67 .cse12) (res (= .cse68 .cse13) (res .cse26 .cse27 (res (= .cse69 .cse70) (res (= .cse71 .cse71) (refl .cse71) (res (= .cse72 .cse73) (res (= .cse74 .cse75) (let ((.cse76 (= .cse78 .cse77))) (res .cse76 (res false (res .cse77 (res .cse78 (=+1 .cse76) (res _v1.Eval_loop_anon3_LoopHead_1_done@0 (not+ .cse77) (=-2 .cse78))) (res .cse78 (res _v1.Eval_loop_anon3_LoopHead_1_done@0 (=+1 .cse78) (not- .cse77)) (=+2 .cse76))) .cse79) (res (= .cse80 .cse80) (refl .cse80) (cong (and .cse80 .cse78) (and .cse80 .cse77))))) (res (= .cse81 .cse81) (refl .cse81) (cong (and .cse81 .cse74) (and .cse81 .cse75)))) (cong (and .cse72 .cse71) (and .cse73 .cse71)))) (cong (=> .cse69 .cse40) (=> .cse70 .cse8)))) (res (= .cse82 .cse83) (res (= .cse84 .cse84) (refl .cse84) (res (= .cse85 .cse86) (res (= .cse87 .cse87) (refl .cse87) (let ((.cse88 (= .cse89 .cse61))) (res .cse88 (res .cse88 (>=def 0 _v1.in_x) (res .cse61 (res .cse89 (=+1 .cse88) (res .cse61 (=-2 .cse88) .cse64)) (res .cse89 (res .cse61 (res .cse60 .cse63 .cse62) (=-1 .cse88)) (=+2 .cse88)))) (cong (and .cse89 .cse87) (and .cse61 .cse87))))) (cong (and .cse85 .cse84) (and .cse86 .cse84)))) (cong (=> .cse82 .cse68) (=> .cse83 .cse13)))) (res (= .cse90 .cse90) (refl .cse90) (cong (=> .cse90 .cse67) (=> .cse90 .cse12)))) (cong (and .cse66 .cse21) (and .cse11 .cse10))))))))) (res (= .cse233 .cse233) (refl .cse233) (cong (=> .cse233 .cse20) (=> .cse233 .cse14)))) (cong (not .cse16) (not .cse15))) (=-2 .cse19)))) (not- .cse17))) (res .cse18 (assume .cse18) (not- .cse18)))))))))))))))))))))))))))))))))) :proves (- .cse11 - .cse10) :input))))))))) :proves (- .cse10) :rup)))))))))))))))))))))))))))))))) :proves () :rup)
unsupported
