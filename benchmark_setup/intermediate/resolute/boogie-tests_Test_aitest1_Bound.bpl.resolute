success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_aitest1_Bound.bpl.mod.smt2:30:10: Logical context not inconsistent!")
unsat
(! (let ((.cse48 (ControlFlow 0 3))) (let ((.cse41 (= .cse48 (- 2))) (.cse0 (= (- 2) .cse48))) (let ((.cse79 (= .cse41 .cse0))) (let-proof ((.cse80 (res .cse0 (res .cse41 (=+1 .cse79) (symm (- 2) .cse48)) (res .cse41 (symm .cse48 (- 2)) (=+2 .cse79))))) (res .cse0 (! (let ((.cse57 (+ N (* (- 1) i@0)))) (let ((.cse54 (<= .cse57 0))) (let ((.cse52 (not .cse54))) (let ((.cse50 (not .cse52))) (let ((.cse1 (and .cse50 .cse41))) (res .cse1 (! (let ((.cse38 (= i@0 N))) (let ((.cse2 (=> .cse1 .cse38))) (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + .cse1) :input) (! (let ((.cse69 (ControlFlow 0 4))) (let ((.cse58 (= .cse69 3))) (let ((.cse3 (=> .cse58 .cse2))) (res .cse3 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse2) :input) (! (let ((.cse4 (=> (= .cse69 1) true))) (res .cse4 (! (res true true+ (=>+ 1 .cse4)) :proves (+ .cse4) :input) (let ((.cse78 (* (- 1) N))) (let ((.cse9 (<= .cse78 0)) (.cse6 (and .cse4 .cse3))) (let ((.cse5 (=> .cse9 .cse6))) (res .cse5 (! (res .cse6 (and+ .cse6) (=>+ 1 .cse5)) :proves (+ .cse5 - .cse3 - .cse4) :input) (! (let ((.cse64 (= .cse69 (- 5)))) (let ((.cse7 (=> .cse64 .cse9))) (let ((.cse24 (and .cse7 .cse5))) (let ((.cse20 (< 0 .cse78)) (.cse17 (=> .cse9 .cse24))) (let-proof ((.cse21 (total .cse78 0))) (let-proof ((.cse18 (let ((.cse76 (= (ControlFlow 0 6) 4))) (let ((.cse25 (=> .cse76 .cse17))) (res .cse25 (=>+ 1 .cse25) (let ((.cse77 (= (ControlFlow 0 0) 6))) (let ((.cse26 (=> .cse77 .cse25))) (res .cse26 (=>+ 1 .cse26) (let ((.cse42 (- 0 2)) (.cse53 (< i@0 N))) (let ((.cse49 (not .cse53)) (.cse40 (= .cse48 .cse42))) (let ((.cse39 (and .cse49 .cse40))) (let ((.cse37 (=> .cse39 .cse38))) (let ((.cse65 (- 0 5)) (.cse36 (=> .cse58 .cse37))) (let ((.cse35 (and .cse4 .cse36)) (.cse63 (= .cse69 .cse65)) (.cse61 (<= 0 N))) (let ((.cse62 (=> .cse63 .cse61)) (.cse34 (=> .cse61 .cse35))) (let ((.cse74 (>= N 0)) (.cse33 (and .cse62 .cse34))) (let ((.cse32 (=> .cse74 .cse33))) (let ((.cse31 (=> .cse76 .cse32))) (let ((.cse27 (=> .cse77 .cse31))) (let ((.cse29 (not .cse27))) (res .cse27 (let ((.cse28 (not .cse26))) (res .cse28 (res .cse29 (not+ .cse29) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (res (= .cse27 .cse26) (res (= .cse31 .cse25) (res (= .cse32 .cse17) (let-proof ((.cse70 (res .cse20 .cse21 (farkas 1 .cse61 1 .cse20))) (.cse71 (let ((.cse75 (< N 0))) (res .cse75 (total 0 N) (farkas 1 .cse75 1 .cse9))))) (res (= .cse33 .cse24) (let ((.cse59 (= .cse61 .cse9))) (let ((.cse44 (= 0 0))) (let-proof ((.cse60 (res .cse9 (res .cse61 (=+1 .cse59) .cse70) (res .cse61 .cse71 (=+2 .cse59)))) (.cse45 (refl 0))) (res (= .cse34 .cse5) (res (= .cse35 .cse6) (res (= .cse36 .cse3) (res (= .cse37 .cse2) (res (= .cse38 .cse38) (refl .cse38) (res (= .cse39 .cse1) (res (= .cse40 .cse41) (res (= .cse42 (- 2)) (let ((.cse43 (* (- 1) 2))) (res (= .cse43 (- 2)) (poly* .cse43 (- 2)) (res .cse44 .cse45 (let ((.cse46 (+ 0 .cse43)) (.cse47 (+ 0 (- 2)))) (res (= .cse46 .cse47) (cong (+ 0 .cse43) (+ 0 (- 2))) (res (= .cse42 .cse46) (-def 0 2) (res (= .cse47 (- 2)) (poly+ .cse47 (- 2)) (trans .cse42 .cse46 .cse47 (- 2))))))))) (res (= .cse48 .cse48) (refl .cse48) (cong (= .cse48 .cse42) (= .cse48 (- 2))))) (res (= .cse49 .cse50) (let ((.cse51 (= .cse53 .cse52))) (res .cse51 (res .cse52 (res .cse53 (=+1 .cse51) (res .cse54 (not+ .cse52) (farkas 1 .cse53 1 .cse54))) (res .cse53 (let ((.cse55 (<= N i@0))) (res .cse55 (total N i@0) (res .cse54 (let ((.cse56 (< 0 .cse57))) (res .cse56 (total .cse57 0) (farkas 1 .cse55 1 .cse56))) (not- .cse52)))) (=+2 .cse51))) (cong (not .cse53) (not .cse52)))) (cong (and .cse49 .cse40) (and .cse50 .cse41)))) (cong (=> .cse39 .cse38) (=> .cse1 .cse38)))) (res (= .cse58 .cse58) (refl .cse58) (cong (=> .cse58 .cse37) (=> .cse58 .cse2)))) (res (= .cse4 .cse4) (refl .cse4) (cong (and .cse4 .cse36) (and .cse4 .cse3)))) (res .cse59 .cse60 (cong (=> .cse61 .cse35) (=> .cse9 .cse6)))) (res (= .cse62 .cse7) (res .cse59 .cse60 (res (= .cse63 .cse64) (res (= .cse65 (- 5)) (let ((.cse66 (* (- 1) 5))) (res (= .cse66 (- 5)) (poly* .cse66 (- 5)) (res .cse44 .cse45 (let ((.cse67 (+ 0 .cse66)) (.cse68 (+ 0 (- 5)))) (res (= .cse67 .cse68) (cong (+ 0 .cse66) (+ 0 (- 5))) (res (= .cse65 .cse67) (-def 0 5) (res (= .cse68 (- 5)) (poly+ .cse68 (- 5)) (trans .cse65 .cse67 .cse68 (- 5))))))))) (res (= .cse69 .cse69) (refl .cse69) (cong (= .cse69 .cse65) (= .cse69 (- 5))))) (cong (=> .cse63 .cse61) (=> .cse64 .cse9)))) (cong (and .cse62 .cse34) (and .cse7 .cse5))))))) (let ((.cse72 (= .cse74 .cse9))) (res .cse72 (let ((.cse73 (= .cse74 .cse61))) (res .cse73 (>=def N 0) (res .cse9 (res .cse74 (=+1 .cse72) (res .cse61 (=-2 .cse73) .cse70)) (res .cse74 (res .cse61 .cse71 (=-1 .cse73)) (=+2 .cse72))))) (cong (=> .cse74 .cse33) (=> .cse9 .cse24)))))) (res (= .cse76 .cse76) (refl .cse76) (cong (=> .cse76 .cse32) (=> .cse76 .cse17)))) (res (= .cse77 .cse77) (refl .cse77) (cong (=> .cse77 .cse31) (=> .cse77 .cse25)))) (cong (not .cse27) (not .cse26))) (=-2 .cse30)))) (not- .cse28))) (res .cse29 (assume .cse29) (not- .cse29))))))))))))))))))))))) (res .cse7 (! (let ((.cse23 (+ N 1))) (let ((.cse8 (<= .cse23 0))) (let ((.cse10 (not .cse8))) (let ((.cse15 (= .cse9 .cse10))) (let-proof ((.cse11 (not+ .cse10)) (.cse19 (not- .cse10))) (let-proof ((.cse16 (res .cse10 (res .cse9 (=+1 .cse15) (res .cse8 .cse11 (farkas 1 .cse9 1 .cse8))) (res .cse9 (res .cse20 .cse21 (res .cse8 (let ((.cse22 (<= 1 .cse23))) (res .cse22 (total-int .cse23 0) (farkas 1 .cse20 1 .cse22))) .cse19)) (=+2 .cse15))))) (res .cse8 (! (res .cse9 (res .cse10 .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (let ((.cse13 (not .cse9))) (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res .cse15 .cse16 (cong (not .cse9) (not .cse10))) (=-2 .cse14))))) (not- .cse12)))) (=>+ 1 .cse7)) :proves (+ .cse7 + .cse8) :input) (! (res .cse9 (res .cse17 (=>+ 0 .cse17) .cse18) (res .cse10 (res .cse15 .cse16 (=-2 .cse15)) .cse19)) :proves (- .cse8) :input)))))))) :proves (+ .cse7) :rup) (! (res .cse24 (and+ .cse24) (res .cse17 (=>+ 1 .cse17) .cse18)) :proves (- .cse7 - .cse5) :input)))))))) :proves (- .cse5) :rup))))))) :proves (- .cse3) :rup))))) :proves (- .cse2) :rup)))) :proves (+ .cse1) :rup) (! (res .cse41 (and- 1 .cse1) (res .cse79 .cse80 (=-2 .cse79))) :proves (- .cse1 + .cse0) :input))))))) :proves (+ .cse0) :rup) (! (let ((.cse82 (not .cse41))) (res .cse41 (let ((.cse81 (not .cse0))) (res .cse81 (res .cse82 (not+ .cse82) (let ((.cse83 (= .cse82 .cse81))) (res .cse83 (res .cse79 .cse80 (cong (not .cse41) (not .cse0))) (=-2 .cse83)))) (not- .cse81))) (res .cse82 (assume .cse82) (not- .cse82)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
