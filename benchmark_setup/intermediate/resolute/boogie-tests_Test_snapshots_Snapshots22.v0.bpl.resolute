success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots22.v0.bpl.mod.smt2:28:10: Logical context not inconsistent!")
unsat
(! (let ((.cse60 (ControlFlow 0 3))) (let ((.cse2 (= .cse60 (- 4))) (.cse0 (= (- 4) .cse60))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 4) .cse60)) (res .cse2 (symm .cse60 (- 4)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse74 (ControlFlow 0 2))) (let ((.cse69 (= .cse74 (- 1)))) (let ((.cse50 (= .cse60 2)) (.cse7 (=> .cse69 true))) (let ((.cse6 (=> .cse50 .cse7))) (let-proof ((.cse15 true+)) (let ((.cse5 (=> false .cse6))) (let-proof ((.cse8 (! (res true .cse15 (=>+ 1 .cse7)) :proves (+ .cse7) :input))) (res .cse5 (! (res .cse6 (! (res .cse7 .cse8 (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (let ((.cse76 (ControlFlow 0 7))) (let ((.cse65 (= .cse76 3)) (.cse10 (and .cse1 .cse5))) (let ((.cse9 (=> .cse65 .cse10))) (res .cse9 (! (res .cse10 (and+ .cse10) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse1 - .cse5) :input) (! (let ((.cse44 (ControlFlow 0 5))) (let ((.cse30 (= .cse44 2))) (let ((.cse13 (=> .cse30 .cse7)) (.cse37 (= .cse44 (- 6)))) (let ((.cse14 (=> .cse37 true)) (.cse12 (=> true .cse13))) (let ((.cse45 (= .cse76 5)) (.cse16 (and .cse14 .cse12))) (let ((.cse11 (=> .cse45 .cse16))) (res .cse11 (! (res .cse12 (! (res .cse13 (! (res .cse7 .cse8 (! (=>+ 1 .cse13) :proves (+ .cse13 - .cse7) :input)) :proves (+ .cse13) :rup) (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse13) :input)) :proves (+ .cse12) :rup) (res .cse14 (! (res true .cse15 (=>+ 1 .cse14)) :proves (+ .cse14) :input) (! (res .cse16 (and+ .cse16) (=>+ 1 .cse11)) :proves (+ .cse11 - .cse14 - .cse12) :input))) :proves (+ .cse11) :rup) (! (let ((.cse17 (and .cse9 .cse11))) (res .cse17 (and+ .cse17) (let ((.cse75 (= (ControlFlow 0 0) 7))) (let ((.cse18 (=> .cse75 .cse17))) (res .cse18 (=>+ 1 .cse18) (let ((.cse70 (- 0 1))) (let ((.cse68 (= .cse74 .cse70)) (.cse67 (= 3 3))) (let ((.cse64 (= 1 1)) (.cse56 (- 0 4)) (.cse38 (- 0 6)) (.cse31 (=> .cse68 .cse67))) (let ((.cse27 (=> .cse30 .cse31)) (.cse36 (= .cse44 .cse38)) (.cse34 (= 2 2)) (.cse49 (=> .cse50 .cse31)) (.cse55 (= .cse60 .cse56)) (.cse53 (not .cse64))) (let ((.cse54 (=> .cse55 .cse53)) (.cse48 (=> .cse53 .cse49)) (.cse35 (=> .cse36 .cse34)) (.cse26 (=> .cse34 .cse27))) (let ((.cse25 (and .cse35 .cse26)) (.cse47 (and .cse54 .cse48))) (let ((.cse46 (=> .cse65 .cse47)) (.cse24 (=> .cse45 .cse25))) (let ((.cse23 (and .cse46 .cse24))) (let ((.cse19 (=> .cse75 .cse23))) (let ((.cse21 (not .cse19))) (res .cse19 (let ((.cse20 (not .cse18))) (res .cse20 (res .cse21 (not+ .cse21) (let ((.cse22 (= .cse21 .cse20))) (res .cse22 (res (= .cse19 .cse18) (res (= .cse23 .cse17) (let ((.cse40 (= 0 0))) (let-proof ((.cse41 (refl 0))) (let ((.cse28 (= .cse31 .cse7))) (let-proof ((.cse29 (let ((.cse66 (= .cse67 true))) (res .cse66 (res true .cse15 (res .cse67 (refl 3) (=+2 .cse66))) (res (= .cse68 .cse69) (res (= .cse70 (- 1)) (let ((.cse71 (* (- 1) 1))) (res (= .cse71 (- 1)) (poly* .cse71 (- 1)) (res .cse40 .cse41 (let ((.cse72 (+ 0 .cse71)) (.cse73 (+ 0 (- 1)))) (res (= .cse72 .cse73) (cong (+ 0 .cse71) (+ 0 (- 1))) (res (= .cse70 .cse72) (-def 0 1) (res (= .cse73 (- 1)) (poly+ .cse73 (- 1)) (trans .cse70 .cse72 .cse73 (- 1))))))))) (res (= .cse74 .cse74) (refl .cse74) (cong (= .cse74 .cse70) (= .cse74 (- 1))))) (cong (=> .cse68 .cse67) (=> .cse69 true))))))) (res (= .cse24 .cse11) (res (= .cse25 .cse16) (let ((.cse32 (= .cse34 true))) (let-proof ((.cse33 (res true .cse15 (res .cse34 (refl 2) (=+2 .cse32))))) (res (= .cse26 .cse12) (res (= .cse27 .cse13) (res .cse28 .cse29 (res (= .cse30 .cse30) (refl .cse30) (cong (=> .cse30 .cse31) (=> .cse30 .cse7)))) (res .cse32 .cse33 (cong (=> .cse34 .cse27) (=> true .cse13)))) (res (= .cse35 .cse14) (res .cse32 .cse33 (res (= .cse36 .cse37) (res (= .cse38 (- 6)) (let ((.cse39 (* (- 1) 6))) (res (= .cse39 (- 6)) (poly* .cse39 (- 6)) (res .cse40 .cse41 (let ((.cse42 (+ 0 .cse39)) (.cse43 (+ 0 (- 6)))) (res (= .cse42 .cse43) (cong (+ 0 .cse39) (+ 0 (- 6))) (res (= .cse38 .cse42) (-def 0 6) (res (= .cse43 (- 6)) (poly+ .cse43 (- 6)) (trans .cse38 .cse42 .cse43 (- 6))))))))) (res (= .cse44 .cse44) (refl .cse44) (cong (= .cse44 .cse38) (= .cse44 (- 6))))) (cong (=> .cse36 .cse34) (=> .cse37 true)))) (cong (and .cse35 .cse26) (and .cse14 .cse12)))))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse25) (=> .cse45 .cse16)))) (res (= .cse46 .cse9) (res (= .cse47 .cse10) (let ((.cse51 (= .cse53 false))) (let-proof ((.cse52 (let ((.cse62 (not true))) (let ((.cse61 (= .cse62 false))) (res .cse61 (res false (res .cse62 (=+1 .cse61) (res true .cse15 (not- .cse62))) false-) (res (= .cse53 .cse62) (let ((.cse63 (= .cse64 true))) (res .cse63 (res true .cse15 (res .cse64 (refl 1) (=+2 .cse63))) (cong (not .cse64) (not true)))) (trans .cse53 .cse62 false))))))) (res (= .cse48 .cse5) (res (= .cse49 .cse6) (res .cse28 .cse29 (res (= .cse50 .cse50) (refl .cse50) (cong (=> .cse50 .cse31) (=> .cse50 .cse7)))) (res .cse51 .cse52 (cong (=> .cse53 .cse49) (=> false .cse6)))) (res (= .cse54 .cse1) (res .cse51 .cse52 (res (= .cse55 .cse2) (res (= .cse56 (- 4)) (let ((.cse57 (* (- 1) 4))) (res (= .cse57 (- 4)) (poly* .cse57 (- 4)) (res .cse40 .cse41 (let ((.cse58 (+ 0 .cse57)) (.cse59 (+ 0 (- 4)))) (res (= .cse58 .cse59) (cong (+ 0 .cse57) (+ 0 (- 4))) (res (= .cse56 .cse58) (-def 0 4) (res (= .cse59 (- 4)) (poly+ .cse59 (- 4)) (trans .cse56 .cse58 .cse59 (- 4))))))))) (res (= .cse60 .cse60) (refl .cse60) (cong (= .cse60 .cse56) (= .cse60 (- 4))))) (cong (=> .cse55 .cse53) (=> .cse2 false)))) (cong (and .cse54 .cse48) (and .cse1 .cse5)))))) (res (= .cse65 .cse65) (refl .cse65) (cong (=> .cse65 .cse47) (=> .cse65 .cse10)))) (cong (and .cse46 .cse24) (and .cse9 .cse11)))))))) (res (= .cse75 .cse75) (refl .cse75) (cong (=> .cse75 .cse23) (=> .cse75 .cse17)))) (cong (not .cse19) (not .cse18))) (=-2 .cse22)))) (not- .cse20))) (res .cse21 (assume .cse21) (not- .cse21)))))))))))))))))) :proves (- .cse9 - .cse11) :input)))))))) :proves (- .cse9) :rup))))))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse78 (not .cse2))) (res .cse2 (let ((.cse77 (not .cse0))) (res .cse77 (res .cse78 (not+ .cse78) (let ((.cse79 (= .cse78 .cse77))) (res .cse79 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse79)))) (not- .cse77))) (res .cse78 (assume .cse78) (not- .cse78)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
