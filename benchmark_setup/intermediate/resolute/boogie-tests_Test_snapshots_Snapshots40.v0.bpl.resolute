success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots40.v0.bpl.mod.smt2:28:10: Logical context not inconsistent!")
unsat
(! (let ((.cse33 (ControlFlow 0 2)) (.cse87 (+ (* (- 1) call1formal@r@0) 42))) (let ((.cse4 (= call1formal@r@0 0)) (.cse13 (<= .cse87 0)) (.cse49 (= .cse33 (- 1)))) (let ((.cse0 (and .cse13 .cse49)) (.cse6 (not .cse4))) (let ((.cse16 (< 0 .cse87)) (.cse1 (=> .cse0 .cse6))) (let-proof ((.cse17 (total .cse87 0))) (let-proof ((.cse2 (! (let ((.cse20 (=> true .cse1))) (res .cse20 (! (=>+ 1 .cse20) :proves (+ .cse20 - .cse1) :input) (! (let ((.cse66 (= .cse33 (- 3)))) (let ((.cse21 (=> .cse66 true))) (let-proof ((.cse22 true+)) (res .cse21 (! (res true .cse22 (=>+ 1 .cse21)) :proves (+ .cse21) :input) (let ((.cse24 (and .cse21 .cse20))) (let ((.cse23 (=> b .cse24))) (res .cse23 (! (res .cse24 (and+ .cse24) (=>+ 1 .cse23)) :proves (+ .cse23 - .cse20 - .cse21) :input) (! (let ((.cse27 (= .cse33 (- 4)))) (let ((.cse25 (=> .cse27 b))) (res .cse25 (! (let ((.cse26 (= (- 4) .cse33))) (let ((.cse28 (= .cse27 .cse26))) (let-proof ((.cse29 (res .cse26 (res .cse27 (=+1 .cse28) (symm (- 4) .cse33)) (res .cse27 (symm .cse33 (- 4)) (=+2 .cse28))))) (res .cse26 (! (res .cse27 (=>+ 0 .cse25) (res .cse28 .cse29 (=-2 .cse28))) :proves (+ .cse25 + .cse26) :input) (! (let ((.cse31 (not .cse27))) (res .cse27 (let ((.cse30 (not .cse26))) (res .cse30 (res .cse31 (not+ .cse31) (let ((.cse32 (= .cse31 .cse30))) (res .cse32 (res .cse28 .cse29 (cong (not .cse27) (not .cse26))) (=-2 .cse32)))) (not- .cse30))) (res .cse31 (assume .cse31) (not- .cse31)))) :proves (- .cse26) :input))))) :proves (+ .cse25) :rup) (! (let ((.cse34 (and .cse25 .cse23))) (res .cse34 (and+ .cse34) (let ((.cse85 (= (ControlFlow 0 5) 2))) (let ((.cse35 (=> .cse85 .cse34))) (res .cse35 (=>+ 1 .cse35) (let ((.cse86 (= (ControlFlow 0 0) 5))) (let ((.cse36 (=> .cse86 .cse35))) (res .cse36 (=>+ 1 .cse36) (let ((.cse50 (- 0 1))) (let ((.cse59 (<= 42 call1formal@r@0)) (.cse48 (= .cse33 .cse50))) (let ((.cse67 (- 0 3)) (.cse47 (and .cse59 .cse48))) (let ((.cse46 (=> .cse47 .cse6)) (.cse65 (= .cse33 .cse67)) (.cse63 (<= 0 42))) (let ((.cse81 (- 0 4)) (.cse64 (=> .cse65 .cse63)) (.cse45 (=> .cse63 .cse46))) (let ((.cse44 (and .cse64 .cse45)) (.cse80 (= .cse33 .cse81))) (let ((.cse79 (=> .cse80 b)) (.cse43 (=> b .cse44))) (let ((.cse42 (and .cse79 .cse43))) (let ((.cse41 (=> .cse85 .cse42))) (let ((.cse37 (=> .cse86 .cse41))) (let ((.cse39 (not .cse37))) (res .cse37 (let ((.cse38 (not .cse36))) (res .cse38 (res .cse39 (not+ .cse39) (let ((.cse40 (= .cse39 .cse38))) (res .cse40 (res (= .cse37 .cse36) (res (= .cse41 .cse35) (res (= .cse42 .cse34) (let ((.cse77 (= b b)) (.cse52 (= 0 0)) (.cse56 (= .cse33 .cse33))) (let-proof ((.cse78 (refl b)) (.cse53 (refl 0)) (.cse57 (refl .cse33))) (res (= .cse43 .cse23) (res (= .cse44 .cse24) (let ((.cse61 (= .cse63 true))) (let-proof ((.cse62 (let ((.cse72 (<= (- 42) 0))) (let ((.cse71 (= .cse72 true)) (.cse73 (< 0 (- 42)))) (let-proof ((.cse74 (total (- 42) 0))) (res .cse71 (res true .cse22 (res .cse72 (res .cse73 .cse74 (farkas 1 .cse73)) (=+2 .cse71))) (let ((.cse75 (= .cse63 .cse72))) (res .cse75 (res .cse72 (res .cse63 (=+1 .cse75) (res .cse73 .cse74 (farkas 1 .cse63 1 .cse73))) (res .cse63 (let ((.cse76 (< 42 0))) (res .cse76 (total 0 42) (farkas 1 .cse76 1 .cse72))) (=+2 .cse75))) (trans .cse63 .cse72 true))))))))) (res (= .cse45 .cse20) (res (= .cse46 .cse1) (res (= .cse6 .cse6) (refl .cse6) (res (= .cse47 .cse0) (res (= .cse48 .cse49) (res (= .cse50 (- 1)) (let ((.cse51 (* (- 1) 1))) (res (= .cse51 (- 1)) (poly* .cse51 (- 1)) (res .cse52 .cse53 (let ((.cse54 (+ 0 .cse51)) (.cse55 (+ 0 (- 1)))) (res (= .cse54 .cse55) (cong (+ 0 .cse51) (+ 0 (- 1))) (res (= .cse50 .cse54) (-def 0 1) (res (= .cse55 (- 1)) (poly+ .cse55 (- 1)) (trans .cse50 .cse54 .cse55 (- 1))))))))) (res .cse56 .cse57 (cong (= .cse33 .cse50) (= .cse33 (- 1))))) (let ((.cse58 (= .cse59 .cse13))) (res .cse58 (res .cse13 (res .cse59 (=+1 .cse58) (res .cse16 .cse17 (farkas 1 .cse59 1 .cse16))) (res .cse59 (let ((.cse60 (< call1formal@r@0 42))) (res .cse60 (total 42 call1formal@r@0) (farkas 1 .cse60 1 .cse13))) (=+2 .cse58))) (cong (and .cse59 .cse48) (and .cse13 .cse49))))) (cong (=> .cse47 .cse6) (=> .cse0 .cse6)))) (res .cse61 .cse62 (cong (=> .cse63 .cse46) (=> true .cse1)))) (res (= .cse64 .cse21) (res .cse61 .cse62 (res (= .cse65 .cse66) (res (= .cse67 (- 3)) (let ((.cse68 (* (- 1) 3))) (res (= .cse68 (- 3)) (poly* .cse68 (- 3)) (res .cse52 .cse53 (let ((.cse69 (+ 0 .cse68)) (.cse70 (+ 0 (- 3)))) (res (= .cse69 .cse70) (cong (+ 0 .cse68) (+ 0 (- 3))) (res (= .cse67 .cse69) (-def 0 3) (res (= .cse70 (- 3)) (poly+ .cse70 (- 3)) (trans .cse67 .cse69 .cse70 (- 3))))))))) (res .cse56 .cse57 (cong (= .cse33 .cse67) (= .cse33 (- 3))))) (cong (=> .cse65 .cse63) (=> .cse66 true)))) (cong (and .cse64 .cse45) (and .cse21 .cse20)))))) (res .cse77 .cse78 (cong (=> b .cse44) (=> b .cse24)))) (res (= .cse79 .cse25) (res .cse77 .cse78 (res (= .cse80 .cse27) (res (= .cse81 (- 4)) (let ((.cse82 (* (- 1) 4))) (res (= .cse82 (- 4)) (poly* .cse82 (- 4)) (res .cse52 .cse53 (let ((.cse83 (+ 0 .cse82)) (.cse84 (+ 0 (- 4)))) (res (= .cse83 .cse84) (cong (+ 0 .cse82) (+ 0 (- 4))) (res (= .cse81 .cse83) (-def 0 4) (res (= .cse84 (- 4)) (poly+ .cse84 (- 4)) (trans .cse81 .cse83 .cse84 (- 4))))))))) (res .cse56 .cse57 (cong (= .cse33 .cse81) (= .cse33 (- 4))))) (cong (=> .cse80 b) (=> .cse27 b)))) (cong (and .cse79 .cse43) (and .cse25 .cse23)))))) (res (= .cse85 .cse85) (refl .cse85) (cong (=> .cse85 .cse42) (=> .cse85 .cse34)))) (res (= .cse86 .cse86) (refl .cse86) (cong (=> .cse86 .cse41) (=> .cse86 .cse35)))) (cong (not .cse37) (not .cse36))) (=-2 .cse40)))) (not- .cse38))) (res .cse39 (assume .cse39) (not- .cse39)))))))))))))))))))))) :proves (- .cse25 - .cse23) :input)))) :proves (- .cse23) :rup)))))))) :proves (- .cse20) :rup))) :proves (- .cse1) :rup))) (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (let ((.cse19 (+ call1formal@r@0 (- 41)))) (let ((.cse11 (<= 1 .cse19)) (.cse3 (<= .cse19 0))) (let-proof ((.cse12 (total-int .cse19 0))) (res .cse3 (! (res .cse4 (! (let ((.cse5 (= 0 call1formal@r@0))) (let-proof ((.cse8 (symm call1formal@r@0 0))) (res .cse5 (! (res .cse1 (! (res .cse4 (res .cse6 (not+ .cse6) (=>+ 1 .cse1)) (let ((.cse7 (= .cse4 .cse5))) (res .cse7 (res .cse5 (res .cse4 (=+1 .cse7) (symm 0 call1formal@r@0)) (res .cse4 .cse8 (=+2 .cse7))) (=-2 .cse7)))) :proves (+ .cse1 + .cse5) :input) .cse2) :proves (+ .cse5) :rup) (! (res .cse4 .cse8 (let ((.cse9 (< call1formal@r@0 0))) (res .cse9 (let ((.cse10 (< 0 call1formal@r@0))) (res .cse10 (trichotomy call1formal@r@0 0) (farkas 1 .cse4 1 .cse10))) (farkas 1 .cse5 1 .cse9)))) :proves (- .cse5 + .cse4) :EQ)))) :proves (+ .cse4) :rup) (! (res .cse11 .cse12 (farkas 1 .cse4 1 .cse11)) :proves (- .cse4 + .cse3) :LA (1 (- 1)))) :proves (+ .cse3) :rup) (! (res .cse13 (and- 0 .cse0) (let ((.cse14 (not .cse3))) (let-proof ((.cse18 (not- .cse14))) (res .cse14 (let ((.cse15 (= .cse13 .cse14))) (res .cse15 (res .cse14 (res .cse13 (=+1 .cse15) (res .cse3 (not+ .cse14) (farkas 1 .cse13 1 .cse3))) (res .cse13 (res .cse16 .cse17 (res .cse3 (res .cse11 .cse12 (farkas 1 .cse16 1 .cse11)) .cse18)) (=+2 .cse15))) (=-2 .cse15))) .cse18)))) :proves (- .cse0 - .cse3) :input)))))))))))) :proves () :rup)
unsupported
