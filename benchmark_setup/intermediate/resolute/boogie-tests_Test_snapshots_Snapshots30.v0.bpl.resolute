success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
sat
(error "intermediate/mod_smt2/boogie-tests_Test_snapshots_Snapshots30.v0.bpl.mod.smt2:26:10: Logical context not inconsistent!")
unsat
(! (let ((.cse46 (ControlFlow 0 2))) (let ((.cse2 (= .cse46 (- 4))) (.cse0 (= (- 4) .cse46))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 4) .cse46)) (res .cse2 (symm .cse46 (- 4)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse37 (= .cse46 (- 1)))) (let ((.cse7 (=> .cse37 true)) (.cse52 (= .cse46 (- 3)))) (let ((.cse9 (=> .cse52 true)) (.cse6 (=> true .cse7))) (let ((.cse10 (and .cse9 .cse6))) (let ((.cse5 (=> false .cse10))) (let-proof ((.cse8 true+)) (res .cse5 (! (res .cse6 (! (res .cse7 (! (res true .cse8 (=>+ 1 .cse7)) :proves (+ .cse7) :input) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (res .cse9 (! (res true .cse8 (=>+ 1 .cse9)) :proves (+ .cse9) :input) (! (res .cse10 (and+ .cse10) (=>+ 1 .cse5)) :proves (+ .cse5 - .cse9 - .cse6) :input))) :proves (+ .cse5) :rup) (let ((.cse12 (and .cse1 .cse5))) (let ((.cse11 (=> true .cse12))) (res .cse11 (! (res .cse12 (and+ .cse12) (=>+ 1 .cse11)) :proves (+ .cse11 - .cse1 - .cse5) :input) (! (let ((.cse75 (= .cse46 (- 5)))) (let ((.cse13 (=> .cse75 true))) (res .cse13 (! (res true .cse8 (=>+ 1 .cse13)) :proves (+ .cse13) :input) (let ((.cse15 (and .cse13 .cse11))) (let ((.cse14 (=> true .cse15))) (res .cse14 (! (res .cse15 (and+ .cse15) (=>+ 1 .cse14)) :proves (+ .cse14 - .cse11 - .cse13) :input) (! (let ((.cse84 (= .cse46 (- 6)))) (let ((.cse16 (=> .cse84 true))) (res .cse16 (! (res true .cse8 (=>+ 1 .cse16)) :proves (+ .cse16) :input) (! (let ((.cse17 (and .cse16 .cse14))) (res .cse17 (and+ .cse17) (let ((.cse89 (= (ControlFlow 0 7) 2))) (let ((.cse18 (=> .cse89 .cse17))) (res .cse18 (=>+ 1 .cse18) (let ((.cse90 (= (ControlFlow 0 0) 7))) (let ((.cse19 (=> .cse90 .cse18))) (res .cse19 (=>+ 1 .cse19) (let ((.cse38 (- 0 1))) (let ((.cse53 (- 0 3)) (.cse36 (= .cse46 .cse38)) (.cse35 (= 4 4))) (let ((.cse33 (=> .cse36 .cse35)) (.cse51 (= .cse46 .cse53)) (.cse49 (= 3 3))) (let ((.cse69 (= 2 2)) (.cse62 (- 0 4)) (.cse50 (=> .cse51 .cse49)) (.cse32 (=> .cse49 .cse33))) (let ((.cse31 (and .cse50 .cse32)) (.cse61 (= .cse46 .cse62)) (.cse59 (not .cse69))) (let ((.cse76 (- 0 5)) (.cse60 (=> .cse61 .cse59)) (.cse30 (=> .cse59 .cse31))) (let ((.cse29 (and .cse60 .cse30)) (.cse74 (= .cse46 .cse76)) (.cse72 (= 1 1))) (let ((.cse85 (- 0 6)) (.cse73 (=> .cse74 .cse72)) (.cse28 (=> .cse72 .cse29))) (let ((.cse27 (and .cse73 .cse28)) (.cse83 (= .cse46 .cse85)) (.cse40 (= 0 0))) (let ((.cse82 (=> .cse83 .cse40)) (.cse26 (=> .cse40 .cse27))) (let ((.cse25 (and .cse82 .cse26))) (let ((.cse24 (=> .cse89 .cse25))) (let ((.cse20 (=> .cse90 .cse24))) (let ((.cse22 (not .cse20))) (res .cse20 (let ((.cse21 (not .cse19))) (res .cse21 (res .cse22 (not+ .cse22) (let ((.cse23 (= .cse22 .cse21))) (res .cse23 (res (= .cse20 .cse19) (res (= .cse24 .cse18) (res (= .cse25 .cse17) (let ((.cse80 (= .cse40 true))) (let-proof ((.cse41 (refl 0))) (let ((.cse44 (= .cse46 .cse46))) (let-proof ((.cse81 (res true .cse8 (res .cse40 .cse41 (=+2 .cse80)))) (.cse45 (refl .cse46))) (res (= .cse26 .cse14) (res (= .cse27 .cse15) (let ((.cse70 (= .cse72 true))) (let-proof ((.cse71 (res true .cse8 (res .cse72 (refl 1) (=+2 .cse70))))) (res (= .cse28 .cse11) (res (= .cse29 .cse12) (let ((.cse57 (= .cse59 false))) (let-proof ((.cse58 (let ((.cse67 (not true))) (let ((.cse66 (= .cse67 false))) (res .cse66 (res false (res .cse67 (=+1 .cse66) (res true .cse8 (not- .cse67))) false-) (res (= .cse59 .cse67) (let ((.cse68 (= .cse69 true))) (res .cse68 (res true .cse8 (res .cse69 (refl 2) (=+2 .cse68))) (cong (not .cse69) (not true)))) (trans .cse59 .cse67 false))))))) (res (= .cse30 .cse5) (res (= .cse31 .cse10) (let ((.cse47 (= .cse49 true))) (let-proof ((.cse48 (res true .cse8 (res .cse49 (refl 3) (=+2 .cse47))))) (res (= .cse32 .cse6) (res (= .cse33 .cse7) (let ((.cse34 (= .cse35 true))) (res .cse34 (res true .cse8 (res .cse35 (refl 4) (=+2 .cse34))) (res (= .cse36 .cse37) (res (= .cse38 (- 1)) (let ((.cse39 (* (- 1) 1))) (res (= .cse39 (- 1)) (poly* .cse39 (- 1)) (res .cse40 .cse41 (let ((.cse42 (+ 0 .cse39)) (.cse43 (+ 0 (- 1)))) (res (= .cse42 .cse43) (cong (+ 0 .cse39) (+ 0 (- 1))) (res (= .cse38 .cse42) (-def 0 1) (res (= .cse43 (- 1)) (poly+ .cse43 (- 1)) (trans .cse38 .cse42 .cse43 (- 1))))))))) (res .cse44 .cse45 (cong (= .cse46 .cse38) (= .cse46 (- 1))))) (cong (=> .cse36 .cse35) (=> .cse37 true))))) (res .cse47 .cse48 (cong (=> .cse49 .cse33) (=> true .cse7)))) (res (= .cse50 .cse9) (res .cse47 .cse48 (res (= .cse51 .cse52) (res (= .cse53 (- 3)) (let ((.cse54 (* (- 1) 3))) (res (= .cse54 (- 3)) (poly* .cse54 (- 3)) (res .cse40 .cse41 (let ((.cse55 (+ 0 .cse54)) (.cse56 (+ 0 (- 3)))) (res (= .cse55 .cse56) (cong (+ 0 .cse54) (+ 0 (- 3))) (res (= .cse53 .cse55) (-def 0 3) (res (= .cse56 (- 3)) (poly+ .cse56 (- 3)) (trans .cse53 .cse55 .cse56 (- 3))))))))) (res .cse44 .cse45 (cong (= .cse46 .cse53) (= .cse46 (- 3))))) (cong (=> .cse51 .cse49) (=> .cse52 true)))) (cong (and .cse50 .cse32) (and .cse9 .cse6)))))) (res .cse57 .cse58 (cong (=> .cse59 .cse31) (=> false .cse10)))) (res (= .cse60 .cse1) (res .cse57 .cse58 (res (= .cse61 .cse2) (res (= .cse62 (- 4)) (let ((.cse63 (* (- 1) 4))) (res (= .cse63 (- 4)) (poly* .cse63 (- 4)) (res .cse40 .cse41 (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 4)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 4))) (res (= .cse62 .cse64) (-def 0 4) (res (= .cse65 (- 4)) (poly+ .cse65 (- 4)) (trans .cse62 .cse64 .cse65 (- 4))))))))) (res .cse44 .cse45 (cong (= .cse46 .cse62) (= .cse46 (- 4))))) (cong (=> .cse61 .cse59) (=> .cse2 false)))) (cong (and .cse60 .cse30) (and .cse1 .cse5)))))) (res .cse70 .cse71 (cong (=> .cse72 .cse29) (=> true .cse12)))) (res (= .cse73 .cse13) (res .cse70 .cse71 (res (= .cse74 .cse75) (res (= .cse76 (- 5)) (let ((.cse77 (* (- 1) 5))) (res (= .cse77 (- 5)) (poly* .cse77 (- 5)) (res .cse40 .cse41 (let ((.cse78 (+ 0 .cse77)) (.cse79 (+ 0 (- 5)))) (res (= .cse78 .cse79) (cong (+ 0 .cse77) (+ 0 (- 5))) (res (= .cse76 .cse78) (-def 0 5) (res (= .cse79 (- 5)) (poly+ .cse79 (- 5)) (trans .cse76 .cse78 .cse79 (- 5))))))))) (res .cse44 .cse45 (cong (= .cse46 .cse76) (= .cse46 (- 5))))) (cong (=> .cse74 .cse72) (=> .cse75 true)))) (cong (and .cse73 .cse28) (and .cse13 .cse11)))))) (res .cse80 .cse81 (cong (=> .cse40 .cse27) (=> true .cse15)))) (res (= .cse82 .cse16) (res .cse80 .cse81 (res (= .cse83 .cse84) (res (= .cse85 (- 6)) (let ((.cse86 (* (- 1) 6))) (res (= .cse86 (- 6)) (poly* .cse86 (- 6)) (res .cse40 .cse41 (let ((.cse87 (+ 0 .cse86)) (.cse88 (+ 0 (- 6)))) (res (= .cse87 .cse88) (cong (+ 0 .cse86) (+ 0 (- 6))) (res (= .cse85 .cse87) (-def 0 6) (res (= .cse88 (- 6)) (poly+ .cse88 (- 6)) (trans .cse85 .cse87 .cse88 (- 6))))))))) (res .cse44 .cse45 (cong (= .cse46 .cse85) (= .cse46 (- 6))))) (cong (=> .cse83 .cse40) (=> .cse84 true)))) (cong (and .cse82 .cse26) (and .cse16 .cse14)))))))) (res (= .cse89 .cse89) (refl .cse89) (cong (=> .cse89 .cse25) (=> .cse89 .cse17)))) (res (= .cse90 .cse90) (refl .cse90) (cong (=> .cse90 .cse24) (=> .cse90 .cse18)))) (cong (not .cse20) (not .cse19))) (=-2 .cse23)))) (not- .cse21))) (res .cse22 (assume .cse22) (not- .cse22))))))))))))))))))))))))) :proves (- .cse16 - .cse14) :input)))) :proves (- .cse14) :rup))))))) :proves (- .cse11) :rup))))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse92 (not .cse2))) (res .cse2 (let ((.cse91 (not .cse0))) (res .cse91 (res .cse92 (not+ .cse92) (let ((.cse93 (= .cse92 .cse91))) (res .cse93 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse93)))) (not- .cse91))) (res .cse92 (assume .cse92) (not- .cse92)))) :proves (- .cse0) :input)))))) :proves () :rup)
unsupported
