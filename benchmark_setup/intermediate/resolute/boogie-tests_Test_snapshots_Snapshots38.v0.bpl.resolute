success
success
success
unsupported
unsupported
unsupported
unsupported
unsupported
unsat
(! (let ((.cse73 (+ (* (- 1) call1formal@r@0) 1))) (let ((.cse45 (ControlFlow 0 2)) (.cse13 (<= .cse73 0))) (let ((.cse4 (= call1formal@r@0 0)) (.cse15 (=> true .cse13)) (.cse36 (= .cse45 (- 1)))) (let ((.cse0 (and .cse15 .cse36)) (.cse6 (not .cse4))) (let ((.cse18 (< 0 .cse73)) (.cse11 (<= 1 call1formal@r@0)) (.cse1 (=> .cse0 .cse6))) (let-proof ((.cse19 (total .cse73 0)) (.cse14 true+)) (let-proof ((.cse2 (! (let ((.cse21 (=> true .cse1))) (res .cse21 (! (=>+ 1 .cse21) :proves (+ .cse21 - .cse1) :input) (! (let ((.cse60 (= .cse45 (- 3)))) (let ((.cse22 (=> .cse60 true))) (res .cse22 (! (res true .cse14 (=>+ 1 .cse22)) :proves (+ .cse22) :input) (! (let ((.cse23 (and .cse22 .cse21))) (res .cse23 (and+ .cse23) (let ((.cse71 (= (ControlFlow 0 4) 2))) (let ((.cse24 (=> .cse71 .cse23))) (res .cse24 (=>+ 1 .cse24) (let ((.cse72 (= (ControlFlow 0 0) 4))) (let ((.cse25 (=> .cse72 .cse24))) (res .cse25 (=>+ 1 .cse25) (let ((.cse54 (= 42 0))) (let ((.cse37 (- 0 1)) (.cse49 (not .cse54))) (let ((.cse46 (=> .cse49 .cse11)) (.cse35 (= .cse45 .cse37))) (let ((.cse61 (- 0 3)) (.cse34 (and .cse46 .cse35))) (let ((.cse33 (=> .cse34 .cse6)) (.cse59 (= .cse45 .cse61)) (.cse57 (<= 0 42))) (let ((.cse58 (=> .cse59 .cse57)) (.cse32 (=> .cse57 .cse33))) (let ((.cse31 (and .cse58 .cse32))) (let ((.cse30 (=> .cse71 .cse31))) (let ((.cse26 (=> .cse72 .cse30))) (let ((.cse28 (not .cse26))) (res .cse26 (let ((.cse27 (not .cse25))) (res .cse27 (res .cse28 (not+ .cse28) (let ((.cse29 (= .cse28 .cse27))) (res .cse29 (res (= .cse26 .cse25) (res (= .cse30 .cse24) (res (= .cse31 .cse23) (let ((.cse55 (= .cse57 true)) (.cse39 (= 0 0)) (.cse43 (= .cse45 .cse45))) (let-proof ((.cse56 (let ((.cse66 (<= (- 42) 0))) (let ((.cse65 (= .cse66 true)) (.cse67 (< 0 (- 42)))) (let-proof ((.cse68 (total (- 42) 0))) (res .cse65 (res true .cse14 (res .cse66 (res .cse67 .cse68 (farkas 1 .cse67)) (=+2 .cse65))) (let ((.cse69 (= .cse57 .cse66))) (res .cse69 (res .cse66 (res .cse57 (=+1 .cse69) (res .cse67 .cse68 (farkas 1 .cse57 1 .cse67))) (res .cse57 (let ((.cse70 (< 42 0))) (res .cse70 (total 0 42) (farkas 1 .cse70 1 .cse66))) (=+2 .cse69))) (trans .cse57 .cse66 true)))))))) (.cse40 (refl 0)) (.cse44 (refl .cse45))) (res (= .cse32 .cse21) (res (= .cse33 .cse1) (res (= .cse6 .cse6) (refl .cse6) (res (= .cse34 .cse0) (res (= .cse35 .cse36) (res (= .cse37 (- 1)) (let ((.cse38 (* (- 1) 1))) (res (= .cse38 (- 1)) (poly* .cse38 (- 1)) (res .cse39 .cse40 (let ((.cse41 (+ 0 .cse38)) (.cse42 (+ 0 (- 1)))) (res (= .cse41 .cse42) (cong (+ 0 .cse38) (+ 0 (- 1))) (res (= .cse37 .cse41) (-def 0 1) (res (= .cse42 (- 1)) (poly+ .cse42 (- 1)) (trans .cse37 .cse41 .cse42 (- 1))))))))) (res .cse43 .cse44 (cong (= .cse45 .cse37) (= .cse45 (- 1))))) (res (= .cse46 .cse15) (let ((.cse47 (= .cse11 .cse13))) (res .cse47 (res .cse13 (res .cse11 (=+1 .cse47) (res .cse18 .cse19 (farkas 1 .cse11 1 .cse18))) (res .cse11 (let ((.cse48 (< call1formal@r@0 1))) (res .cse48 (total 1 call1formal@r@0) (farkas 1 .cse48 1 .cse13))) (=+2 .cse47))) (res (= .cse49 true) (let ((.cse51 (not false))) (let ((.cse50 (= .cse51 true))) (let-proof ((.cse52 false-)) (res .cse50 (res true .cse14 (res .cse51 (res false (not+ .cse51) .cse52) (=+2 .cse50))) (res (= .cse49 .cse51) (let ((.cse53 (= .cse54 false))) (res .cse53 (res false (res .cse54 (=+1 .cse53) (farkas 1 .cse54)) .cse52) (cong (not .cse54) (not false)))) (trans .cse49 .cse51 true)))))) (cong (=> .cse49 .cse11) (=> true .cse13))))) (cong (and .cse46 .cse35) (and .cse15 .cse36)))) (cong (=> .cse34 .cse6) (=> .cse0 .cse6)))) (res .cse55 .cse56 (cong (=> .cse57 .cse33) (=> true .cse1)))) (res (= .cse58 .cse22) (res .cse55 .cse56 (res (= .cse59 .cse60) (res (= .cse61 (- 3)) (let ((.cse62 (* (- 1) 3))) (res (= .cse62 (- 3)) (poly* .cse62 (- 3)) (res .cse39 .cse40 (let ((.cse63 (+ 0 .cse62)) (.cse64 (+ 0 (- 3)))) (res (= .cse63 .cse64) (cong (+ 0 .cse62) (+ 0 (- 3))) (res (= .cse61 .cse63) (-def 0 3) (res (= .cse64 (- 3)) (poly+ .cse64 (- 3)) (trans .cse61 .cse63 .cse64 (- 3))))))))) (res .cse43 .cse44 (cong (= .cse45 .cse61) (= .cse45 (- 3))))) (cong (=> .cse59 .cse57) (=> .cse60 true)))) (cong (and .cse58 .cse32) (and .cse22 .cse21)))))) (res (= .cse71 .cse71) (refl .cse71) (cong (=> .cse71 .cse31) (=> .cse71 .cse23)))) (res (= .cse72 .cse72) (refl .cse72) (cong (=> .cse72 .cse30) (=> .cse72 .cse24)))) (cong (not .cse26) (not .cse25))) (=-2 .cse29)))) (not- .cse27))) (res .cse28 (assume .cse28) (not- .cse28))))))))))))))))))))) :proves (- .cse22 - .cse21) :input)))) :proves (- .cse21) :rup))) :proves (- .cse1) :rup))) (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (let ((.cse3 (<= call1formal@r@0 0))) (let-proof ((.cse12 (total-int call1formal@r@0 0))) (res .cse3 (! (res .cse4 (! (let ((.cse5 (= 0 call1formal@r@0))) (let-proof ((.cse8 (symm call1formal@r@0 0))) (res .cse5 (! (res .cse1 (! (res .cse4 (res .cse6 (not+ .cse6) (=>+ 1 .cse1)) (let ((.cse7 (= .cse4 .cse5))) (res .cse7 (res .cse5 (res .cse4 (=+1 .cse7) (symm 0 call1formal@r@0)) (res .cse4 .cse8 (=+2 .cse7))) (=-2 .cse7)))) :proves (+ .cse1 + .cse5) :input) .cse2) :proves (+ .cse5) :rup) (! (res .cse4 .cse8 (let ((.cse9 (< call1formal@r@0 0))) (res .cse9 (let ((.cse10 (< 0 call1formal@r@0))) (res .cse10 (trichotomy call1formal@r@0 0) (farkas 1 .cse4 1 .cse10))) (farkas 1 .cse5 1 .cse9)))) :proves (- .cse5 + .cse4) :EQ)))) :proves (+ .cse4) :rup) (! (res .cse11 .cse12 (farkas 1 .cse11 1 .cse4)) :proves (+ .cse3 - .cse4) :LA ((- 1) 1))) :proves (+ .cse3) :rup) (! (res .cse13 (res true .cse14 (res .cse15 (and- 0 .cse0) (=>- .cse15))) (let ((.cse16 (not .cse3))) (let-proof ((.cse20 (not- .cse16))) (res .cse16 (let ((.cse17 (= .cse13 .cse16))) (res .cse17 (res .cse16 (res .cse13 (=+1 .cse17) (res .cse3 (not+ .cse16) (farkas 1 .cse13 1 .cse3))) (res .cse13 (res .cse18 .cse19 (res .cse3 (res .cse11 .cse12 (farkas 1 .cse18 1 .cse11)) .cse20)) (=+2 .cse17))) (=-2 .cse17))) .cse20)))) :proves (- .cse0 - .cse3) :input)))))))))))) :proves () :rup)
unsupported
