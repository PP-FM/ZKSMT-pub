unsat
(! (let ((.cse143 (+ (* (- 1) o@1) 44))) (let ((.cse71 (<= .cse143 0)) (.cse134 (ControlFlow 0 2))) (let ((.cse125 (= .cse134 (- 1))) (.cse72 (not .cse71)) (.cse137 (= .cse134 (- 3)))) (let ((.cse49 (+ o@0 1)) (.cse9 (=> .cse137 true)) (.cse11 (=> .cse125 .cse72)) (.cse59 (= o@1 |inline$SecondIncr$0$o'@1|))) (let ((.cse44 (and .cse59 (= (ControlFlow 0 5) 2))) (.cse118 (and .cse9 .cse11)) (.cse46 (= |inline$SecondIncr$0$o'@1| .cse49))) (let ((.cse116 (and (= o@1 o@0) (= (ControlFlow 0 4) 2))) (.cse43 (and .cse46 (= (ControlFlow 0 6) 5))) (.cse8 (=> .cse44 .cse118)) (.cse153 (ControlFlow 0 8))) (let ((.cse96 (= .cse153 6)) (.cse7 (=> .cse43 .cse8)) (.cse101 (= .cse153 4)) (.cse4 (=> .cse116 .cse118))) (let ((.cse3 (=> .cse101 .cse4)) (.cse6 (=> .cse96 .cse7))) (let ((.cse103 (= o@0 |inline$FirstIncr$0$o'@1|)) (.cse15 (and .cse3 .cse6))) (let ((.cse104 (and (= |inline$FirstIncr$0$o'@1| (+ i 1)) (= (ControlFlow 0 9) 8))) (.cse2 (=> .cse103 .cse15)) (.cse144 (ControlFlow 0 10))) (let ((.cse105 (= .cse144 9)) (.cse1 (=> .cse104 .cse2))) (let-proof ((.cse10 (! (res true true+ (=>+ 1 .cse9)) :proves (+ .cse9) :input)) (.cse12 (! (let ((.cse147 (= (- 1) .cse134))) (let ((.cse148 (= .cse125 .cse147))) (let-proof ((.cse149 (res .cse147 (res .cse125 (=+1 .cse148) (symm (- 1) .cse134)) (res .cse125 (symm .cse134 (- 1)) (=+2 .cse148))))) (res .cse147 (! (res .cse125 (=>+ 0 .cse11) (res .cse148 .cse149 (=-2 .cse148))) :proves (+ .cse11 + .cse147) :input) (! (let ((.cse151 (not .cse125))) (res .cse125 (let ((.cse150 (not .cse147))) (res .cse150 (res .cse151 (not+ .cse151) (let ((.cse152 (= .cse151 .cse150))) (res .cse152 (res .cse148 .cse149 (cong (not .cse125) (not .cse147))) (=-2 .cse152)))) (not- .cse150))) (res .cse151 (assume .cse151) (not- .cse151)))) :proves (- .cse147) :input))))) :proves (+ .cse11) :rup)) (.cse146 (and+ .cse118))) (let ((.cse0 (=> .cse105 .cse1))) (let-proof ((.cse5 (! (res .cse9 .cse10 (res .cse11 .cse12 (! (res .cse118 .cse146 (=>+ 1 .cse4)) :proves (+ .cse4 - .cse11 - .cse9) :input))) :proves (+ .cse4) :rup)) (.cse13 (! (res .cse118 .cse146 (=>+ 1 .cse8)) :proves (+ .cse8 - .cse11 - .cse9) :input)) (.cse14 (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse8) :input))) (res .cse0 (res .cse1 (! (res .cse2 (! (res .cse3 (! (res .cse4 .cse5 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse4) :input)) :proves (+ .cse3) :rup) (res .cse6 (! (res .cse7 (! (res .cse8 (! (res .cse9 .cse10 (res .cse11 .cse12 .cse13)) :proves (+ .cse8) :rup) .cse14) :proves (+ .cse7) :rup) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (res .cse15 (and+ .cse15) (=>+ 1 .cse2)) :proves (- .cse6 + .cse2 - .cse3) :input))) :proves (+ .cse2) :rup) (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) (! (let ((.cse145 (ControlFlow 0 7))) (let ((.cse110 (= .cse145 6)) (.cse112 (= .cse145 4))) (let ((.cse18 (=> .cse112 .cse4)) (.cse32 (=> .cse110 .cse7))) (let ((.cse34 (= o@0 i)) (.cse80 (and .cse18 .cse32))) (let ((.cse113 (= .cse144 7)) (.cse17 (=> .cse34 .cse80))) (let ((.cse16 (=> .cse113 .cse17)) (.cse20 (= i 42))) (let ((.cse21 (and .cse20 (= (ControlFlow 0 11) 10))) (.cse81 (and .cse16 .cse0))) (let ((.cse76 (< 0 .cse143)) (.cse22 (=> .cse21 .cse81))) (let-proof ((.cse73 (not+ .cse72)) (.cse77 (total .cse143 0))) (let-proof ((.cse23 (let ((.cse142 (= (ControlFlow 0 0) 11))) (let ((.cse82 (=> .cse142 .cse22))) (res .cse82 (=>+ 1 .cse82) (let ((.cse138 (- 0 3)) (.cse126 (- 0 1))) (let ((.cse124 (= .cse134 .cse126)) (.cse122 (< o@1 44)) (.cse136 (= .cse134 .cse138))) (let ((.cse135 (=> .cse136 true)) (.cse120 (=> .cse124 .cse122))) (let ((.cse117 (and .cse135 .cse120))) (let ((.cse119 (=> .cse44 .cse117))) (let ((.cse97 (=> .cse43 .cse119)) (.cse102 (=> .cse116 .cse117))) (let ((.cse98 (=> .cse101 .cse102)) (.cse93 (=> .cse96 .cse97))) (let ((.cse92 (and .cse98 .cse93)) (.cse111 (=> .cse112 .cse102)) (.cse109 (=> .cse110 .cse97))) (let ((.cse108 (and .cse111 .cse109)) (.cse91 (=> .cse103 .cse92))) (let ((.cse90 (=> .cse104 .cse91)) (.cse107 (=> .cse34 .cse108))) (let ((.cse106 (=> .cse113 .cse107)) (.cse89 (=> .cse105 .cse90))) (let ((.cse88 (and .cse106 .cse89))) (let ((.cse87 (=> .cse21 .cse88))) (let ((.cse83 (=> .cse142 .cse87))) (let ((.cse85 (not .cse83))) (res .cse83 (let ((.cse84 (not .cse82))) (res .cse84 (res .cse85 (not+ .cse85) (let ((.cse86 (= .cse85 .cse84))) (res .cse86 (res (= .cse83 .cse82) (res (= .cse87 .cse22) (res (= .cse88 .cse81) (let ((.cse114 (= .cse117 .cse118))) (let-proof ((.cse115 (let ((.cse128 (= 0 0)) (.cse132 (= .cse134 .cse134))) (let-proof ((.cse129 (refl 0)) (.cse133 (refl .cse134))) (res (= .cse120 .cse11) (let ((.cse121 (= .cse122 .cse72))) (res .cse121 (res .cse72 (res .cse122 (=+1 .cse121) (res .cse71 .cse73 (farkas 1 .cse122 1 .cse71))) (res .cse122 (let ((.cse123 (<= 44 o@1))) (res .cse123 (total 44 o@1) (res .cse71 (res .cse76 .cse77 (farkas 1 .cse123 1 .cse76)) (not- .cse72)))) (=+2 .cse121))) (res (= .cse124 .cse125) (res (= .cse126 (- 1)) (let ((.cse127 (* (- 1) 1))) (res (= .cse127 (- 1)) (poly* .cse127 (- 1)) (res .cse128 .cse129 (let ((.cse130 (+ 0 .cse127)) (.cse131 (+ 0 (- 1)))) (res (= .cse130 .cse131) (cong (+ 0 .cse127) (+ 0 (- 1))) (res (= .cse126 .cse130) (-def 0 1) (res (= .cse131 (- 1)) (poly+ .cse131 (- 1)) (trans .cse126 .cse130 .cse131 (- 1))))))))) (res .cse132 .cse133 (cong (= .cse134 .cse126) (= .cse134 (- 1))))) (cong (=> .cse124 .cse122) (=> .cse125 .cse72))))) (res (= .cse135 .cse9) (res (= true true) (refl true) (res (= .cse136 .cse137) (res (= .cse138 (- 3)) (let ((.cse139 (* (- 1) 3))) (res (= .cse139 (- 3)) (poly* .cse139 (- 3)) (res .cse128 .cse129 (let ((.cse140 (+ 0 .cse139)) (.cse141 (+ 0 (- 3)))) (res (= .cse140 .cse141) (cong (+ 0 .cse139) (+ 0 (- 3))) (res (= .cse138 .cse140) (-def 0 3) (res (= .cse141 (- 3)) (poly+ .cse141 (- 3)) (trans .cse138 .cse140 .cse141 (- 3))))))))) (res .cse132 .cse133 (cong (= .cse134 .cse138) (= .cse134 (- 3))))) (cong (=> .cse136 true) (=> .cse137 true)))) (cong (and .cse135 .cse120) (and .cse9 .cse11)))))))) (let ((.cse94 (= .cse97 .cse7)) (.cse99 (= .cse102 .cse4))) (let-proof ((.cse95 (res (= .cse119 .cse8) (res .cse114 .cse115 (res (= .cse44 .cse44) (refl .cse44) (cong (=> .cse44 .cse117) (=> .cse44 .cse118)))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse119) (=> .cse43 .cse8))))) (.cse100 (res .cse114 .cse115 (res (= .cse116 .cse116) (refl .cse116) (cong (=> .cse116 .cse117) (=> .cse116 .cse118)))))) (res (= .cse89 .cse0) (res (= .cse90 .cse1) (res (= .cse91 .cse2) (res (= .cse92 .cse15) (res (= .cse93 .cse6) (res .cse94 .cse95 (res (= .cse96 .cse96) (refl .cse96) (cong (=> .cse96 .cse97) (=> .cse96 .cse7)))) (res (= .cse98 .cse3) (res .cse99 .cse100 (res (= .cse101 .cse101) (refl .cse101) (cong (=> .cse101 .cse102) (=> .cse101 .cse4)))) (cong (and .cse98 .cse93) (and .cse3 .cse6)))) (res (= .cse103 .cse103) (refl .cse103) (cong (=> .cse103 .cse92) (=> .cse103 .cse15)))) (res (= .cse104 .cse104) (refl .cse104) (cong (=> .cse104 .cse91) (=> .cse104 .cse2)))) (res (= .cse105 .cse105) (refl .cse105) (cong (=> .cse105 .cse90) (=> .cse105 .cse1)))) (res (= .cse106 .cse16) (res (= .cse107 .cse17) (res (= .cse108 .cse80) (res (= .cse109 .cse32) (res .cse94 .cse95 (res (= .cse110 .cse110) (refl .cse110) (cong (=> .cse110 .cse97) (=> .cse110 .cse7)))) (res (= .cse111 .cse18) (res .cse99 .cse100 (res (= .cse112 .cse112) (refl .cse112) (cong (=> .cse112 .cse102) (=> .cse112 .cse4)))) (cong (and .cse111 .cse109) (and .cse18 .cse32)))) (res (= .cse34 .cse34) (refl .cse34) (cong (=> .cse34 .cse108) (=> .cse34 .cse80)))) (res (= .cse113 .cse113) (refl .cse113) (cong (=> .cse113 .cse107) (=> .cse113 .cse17)))) (cong (and .cse106 .cse89) (and .cse16 .cse0)))))))) (res (= .cse21 .cse21) (refl .cse21) (cong (=> .cse21 .cse88) (=> .cse21 .cse81)))) (res (= .cse142 .cse142) (refl .cse142) (cong (=> .cse142 .cse87) (=> .cse142 .cse22)))) (cong (not .cse83) (not .cse82))) (=-2 .cse86)))) (not- .cse84))) (res .cse85 (assume .cse85) (not- .cse85))))))))))))))))))))))) (res .cse16 (! (res .cse17 (! (res .cse18 (! (res .cse4 .cse5 (! (=>+ 1 .cse18) :proves (+ .cse18 - .cse4) :input)) :proves (+ .cse18) :rup) (! (res .cse9 .cse10 (let ((.cse28 (+ i (- 42)))) (let ((.cse19 (= .cse28 0))) (res .cse19 (! (res .cse20 (res .cse21 (res .cse22 (=>+ 0 .cse22) .cse23) (and- 0 .cse21)) (let ((.cse24 (= .cse20 .cse19))) (res .cse24 (res .cse19 (res .cse20 (=+1 .cse24) (let ((.cse25 (= 42 i))) (res .cse25 (symm 42 i) (let ((.cse26 (< .cse28 0))) (res .cse26 (let ((.cse27 (< 0 .cse28))) (res .cse27 (trichotomy .cse28 0) (farkas 1 .cse20 1 .cse27))) (farkas 1 .cse25 1 .cse26)))))) (res .cse20 (let ((.cse29 (= 0 .cse28))) (res .cse29 (symm 0 .cse28) (let ((.cse30 (< i 42))) (res .cse30 (let ((.cse31 (< 42 i))) (res .cse31 (trichotomy i 42) (farkas 1 .cse19 1 .cse31))) (farkas 1 .cse29 1 .cse30))))) (=+2 .cse24))) (=-2 .cse24)))) :proves (+ .cse19) :input) (res .cse32 (let ((.cse39 (+ o@0 (* (- 1) i)))) (let ((.cse33 (= .cse39 0))) (res .cse33 (! (res .cse34 (=>+ 0 .cse17) (let ((.cse35 (= .cse34 .cse33))) (res .cse35 (res .cse33 (res .cse34 (=+1 .cse35) (let ((.cse36 (= i o@0))) (res .cse36 (symm i o@0) (let ((.cse37 (< .cse39 0))) (res .cse37 (let ((.cse38 (< 0 .cse39))) (res .cse38 (trichotomy .cse39 0) (farkas 1 .cse34 1 .cse38))) (farkas 1 .cse36 1 .cse37)))))) (res .cse34 (let ((.cse40 (= 0 .cse39))) (res .cse40 (symm 0 .cse39) (let ((.cse41 (< o@0 i))) (res .cse41 (let ((.cse42 (< i o@0))) (res .cse42 (trichotomy o@0 i) (farkas 1 .cse33 1 .cse42))) (farkas 1 .cse40 1 .cse41))))) (=+2 .cse35))) (=-2 .cse35)))) :proves (+ .cse17 + .cse33) :input) (res .cse7 (res .cse8 (res .cse43 (! (=>+ 0 .cse7) :proves (+ .cse7 + .cse43) :input) (res .cse11 (res .cse44 (! (=>+ 0 .cse8) :proves (+ .cse8 + .cse44) :input) (let ((.cse70 (* (- 1) |inline$SecondIncr$0$o'@1|))) (let ((.cse52 (+ o@0 .cse70 1))) (let ((.cse45 (= .cse52 0)) (.cse53 (= 0 .cse52))) (let-proof ((.cse54 (symm 0 .cse52))) (res .cse45 (! (res .cse46 (and- 0 .cse43) (let ((.cse47 (= .cse46 .cse45))) (res .cse47 (res .cse45 (res .cse46 (=+1 .cse47) (let ((.cse48 (= .cse49 |inline$SecondIncr$0$o'@1|))) (res .cse48 (symm .cse49 |inline$SecondIncr$0$o'@1|) (let ((.cse50 (< .cse52 0))) (res .cse50 (let ((.cse51 (< 0 .cse52))) (res .cse51 (trichotomy .cse52 0) (farkas 1 .cse48 1 .cse51))) (farkas 1 .cse46 1 .cse50)))))) (res .cse46 (res .cse53 .cse54 (let ((.cse55 (< |inline$SecondIncr$0$o'@1| .cse49))) (res .cse55 (let ((.cse56 (< .cse49 |inline$SecondIncr$0$o'@1|))) (res .cse56 (trichotomy |inline$SecondIncr$0$o'@1| .cse49) (farkas 1 .cse53 1 .cse56))) (farkas 1 .cse45 1 .cse55)))) (=+2 .cse47))) (=-2 .cse47)))) :proves (- .cse43 + .cse45) :input) (let ((.cse79 (+ o@1 (- 43)))) (let ((.cse68 (<= 1 .cse79)) (.cse57 (<= .cse79 0))) (let-proof ((.cse69 (total-int .cse79 0))) (res .cse57 (let ((.cse64 (+ o@1 .cse70))) (let ((.cse58 (= .cse64 0))) (res .cse58 (! (res .cse59 (and- 0 .cse44) (let ((.cse60 (= .cse59 .cse58))) (res .cse60 (res .cse58 (res .cse59 (=+1 .cse60) (let ((.cse61 (= |inline$SecondIncr$0$o'@1| o@1))) (res .cse61 (symm |inline$SecondIncr$0$o'@1| o@1) (let ((.cse62 (< .cse64 0))) (res .cse62 (let ((.cse63 (< 0 .cse64))) (res .cse63 (trichotomy .cse64 0) (farkas 1 .cse59 1 .cse63))) (farkas 1 .cse61 1 .cse62)))))) (res .cse59 (let ((.cse65 (= 0 .cse64))) (res .cse65 (symm 0 .cse64) (let ((.cse66 (< o@1 |inline$SecondIncr$0$o'@1|))) (res .cse66 (let ((.cse67 (< |inline$SecondIncr$0$o'@1| o@1))) (res .cse67 (trichotomy o@1 |inline$SecondIncr$0$o'@1|) (farkas 1 .cse58 1 .cse67))) (farkas 1 .cse65 1 .cse66))))) (=+2 .cse60))) (=-2 .cse60)))) :proves (- .cse44 + .cse58) :input) (! (res .cse53 .cse54 (res .cse68 .cse69 (farkas 1 .cse68 1 .cse19 1 .cse58 1 .cse33 1 .cse53))) :proves (+ .cse57 - .cse19 - .cse58 - .cse33 - .cse45) :LA ((- 1) 1 1 1 (- 1)))))) (! (res .cse71 (res .cse72 .cse73 (=>+ 1 .cse11)) (let ((.cse74 (not .cse57))) (let-proof ((.cse78 (not- .cse74))) (res .cse74 (let ((.cse75 (= .cse71 .cse74))) (res .cse75 (res .cse74 (res .cse71 (=+1 .cse75) (res .cse57 (not+ .cse74) (farkas 1 .cse71 1 .cse57))) (res .cse71 (res .cse76 .cse77 (res .cse57 (res .cse68 .cse69 (farkas 1 .cse76 1 .cse68)) .cse78)) (=+2 .cse75))) (=-2 .cse75))) .cse78)))) :proves (+ .cse11 - .cse57) :input))))))))))) .cse13)) .cse14) (! (=>+ 1 .cse32) :proves (+ .cse32 - .cse7) :input))))) (! (res .cse80 (and+ .cse80) (=>+ 1 .cse17)) :proves (+ .cse17 - .cse32 - .cse18) :input)))))) :proves (+ .cse17 - .cse18) :rup)) :proves (+ .cse17) :rup) (! (=>+ 1 .cse16) :proves (+ .cse16 - .cse17) :input)) :proves (+ .cse16) :rup) (! (res .cse81 (and+ .cse81) (res .cse22 (=>+ 1 .cse22) .cse23)) :proves (- .cse16 - .cse0) :input)))))))))))) :proves (- .cse0) :rup)))))))))))))))) :proves () :rup)

