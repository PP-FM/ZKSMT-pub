unsat
(! (let ((.cse20 (ControlFlow 0 2))) (let ((.cse15 (= .cse20 (- 1)))) (let ((.cse0 (and b .cse15))) (let ((.cse1 (=> .cse0 b))) (let-proof ((.cse2 (let ((.cse27 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse27 .cse1))) (res .cse3 (=>+ 1 .cse3) (let ((.cse28 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse28 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse16 (- 0 1)) (.cse26 (not false))) (let ((.cse21 (= b .cse26)) (.cse14 (= .cse20 .cse16))) (let ((.cse13 (and .cse21 .cse14))) (let ((.cse10 (=> .cse13 b))) (let ((.cse9 (=> .cse27 .cse10))) (let ((.cse5 (=> .cse28 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse1) (let ((.cse11 (= b b))) (let-proof ((.cse12 (refl b))) (res .cse11 .cse12 (res (= .cse13 .cse0) (res (= .cse14 .cse15) (res (= .cse16 (- 1)) (let ((.cse17 (* (- 1) 1))) (res (= .cse17 (- 1)) (poly* .cse17 (- 1)) (res (= 0 0) (refl 0) (let ((.cse18 (+ 0 .cse17)) (.cse19 (+ 0 (- 1)))) (res (= .cse18 .cse19) (cong (+ 0 .cse17) (+ 0 (- 1))) (res (= .cse16 .cse18) (-def 0 1) (res (= .cse19 (- 1)) (poly+ .cse19 (- 1)) (trans .cse16 .cse18 .cse19 (- 1))))))))) (res (= .cse20 .cse20) (refl .cse20) (cong (= .cse20 .cse16) (= .cse20 (- 1))))) (res (= .cse21 b) (let ((.cse24 (= b true))) (let ((.cse22 (= .cse24 b))) (let-proof ((.cse23 true+)) (res .cse22 (res true .cse23 (res b (res .cse24 (=+1 .cse22) (=-1 .cse24)) (res .cse24 (=+2 .cse24) (=+2 .cse22)))) (res (= .cse21 .cse24) (let ((.cse25 (= .cse26 true))) (res .cse25 (res true .cse23 (res .cse26 (res false (not+ .cse26) false-) (=+2 .cse25))) (res .cse11 .cse12 (cong (= b .cse26) (= b true))))) (trans .cse21 .cse24 b)))))) (cong (and .cse21 .cse14) (and b .cse15)))) (cong (=> .cse13 b) (=> .cse0 b)))))) (res (= .cse27 .cse27) (refl .cse27) (cong (=> .cse27 .cse10) (=> .cse27 .cse1)))) (res (= .cse28 .cse28) (refl .cse28) (cong (=> .cse28 .cse9) (=> .cse28 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7)))))))))))))))))) (res b (! (res .cse0 (res .cse1 (=>+ 0 .cse1) .cse2) (and- 0 .cse0)) :proves (+ b) :input) (! (res .cse1 (=>+ 1 .cse1) .cse2) :proves (- b) :input))))))) :proves () :rup)

