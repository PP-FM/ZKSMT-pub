unsat
(! (let ((.cse27 (* (- 1) y))) (let ((.cse60 (* (- 1) x)) (.cse23 (+ z .cse27))) (let ((.cse49 (ControlFlow 0 2)) (.cse21 (<= .cse23 0)) (.cse41 (+ z .cse60))) (let ((.cse0 (<= .cse41 0)) (.cse25 (not .cse21)) (.cse44 (= .cse49 (- 1))) (.cse59 (+ y .cse60))) (let ((.cse6 (<= .cse59 0)) (.cse24 (and .cse25 .cse44)) (.cse2 (not .cse0))) (let ((.cse1 (=> .cse24 .cse2)) (.cse10 (not .cse6))) (let ((.cse14 (< 0 .cse59)) (.cse18 (=> .cse10 .cse1))) (let-proof ((.cse3 (not+ .cse2)) (.cse26 (not- .cse25)) (.cse11 (not+ .cse10)) (.cse15 (total .cse59 0)) (.cse19 (not- .cse10))) (let-proof ((.cse20 (let ((.cse57 (= (ControlFlow 0 3) 2))) (let ((.cse28 (=> .cse57 .cse18))) (res .cse28 (=>+ 1 .cse28) (let ((.cse58 (= (ControlFlow 0 0) 3))) (let ((.cse29 (=> .cse58 .cse28))) (res .cse29 (=>+ 1 .cse29) (let ((.cse45 (- 0 1))) (let ((.cse51 (< y z)) (.cse43 (= .cse49 .cse45))) (let ((.cse42 (and .cse51 .cse43)) (.cse38 (< x z))) (let ((.cse55 (< x y)) (.cse36 (=> .cse42 .cse38))) (let ((.cse35 (=> .cse55 .cse36))) (let ((.cse34 (=> .cse57 .cse35))) (let ((.cse30 (=> .cse58 .cse34))) (let ((.cse32 (not .cse30))) (res .cse30 (let ((.cse31 (not .cse29))) (res .cse31 (res .cse32 (not+ .cse32) (let ((.cse33 (= .cse32 .cse31))) (res .cse33 (res (= .cse30 .cse29) (res (= .cse34 .cse28) (res (= .cse35 .cse18) (res (= .cse36 .cse1) (let ((.cse37 (= .cse38 .cse2))) (res .cse37 (res .cse2 (res .cse38 (=+1 .cse37) (res .cse0 .cse3 (farkas 1 .cse38 1 .cse0))) (res .cse38 (let ((.cse39 (<= z x))) (res .cse39 (total z x) (res .cse0 (let ((.cse40 (< 0 .cse41))) (res .cse40 (total .cse41 0) (farkas 1 .cse39 1 .cse40))) (not- .cse2)))) (=+2 .cse37))) (res (= .cse42 .cse24) (res (= .cse43 .cse44) (res (= .cse45 (- 1)) (let ((.cse46 (* (- 1) 1))) (res (= .cse46 (- 1)) (poly* .cse46 (- 1)) (res (= 0 0) (refl 0) (let ((.cse47 (+ 0 .cse46)) (.cse48 (+ 0 (- 1)))) (res (= .cse47 .cse48) (cong (+ 0 .cse46) (+ 0 (- 1))) (res (= .cse45 .cse47) (-def 0 1) (res (= .cse48 (- 1)) (poly+ .cse48 (- 1)) (trans .cse45 .cse47 .cse48 (- 1))))))))) (res (= .cse49 .cse49) (refl .cse49) (cong (= .cse49 .cse45) (= .cse49 (- 1))))) (let ((.cse50 (= .cse51 .cse25))) (res .cse50 (res .cse25 (res .cse51 (=+1 .cse50) (res .cse21 (not+ .cse25) (farkas 1 .cse51 1 .cse21))) (res .cse51 (let ((.cse52 (<= z y))) (res .cse52 (total z y) (res .cse21 (let ((.cse53 (< 0 .cse23))) (res .cse53 (total .cse23 0) (farkas 1 .cse52 1 .cse53))) .cse26))) (=+2 .cse50))) (cong (and .cse51 .cse43) (and .cse25 .cse44))))) (cong (=> .cse42 .cse38) (=> .cse24 .cse2))))) (let ((.cse54 (= .cse55 .cse10))) (res .cse54 (res .cse10 (res .cse55 (=+1 .cse54) (res .cse6 .cse11 (farkas 1 .cse55 1 .cse6))) (res .cse55 (let ((.cse56 (<= y x))) (res .cse56 (total y x) (res .cse6 (res .cse14 .cse15 (farkas 1 .cse56 1 .cse14)) .cse19))) (=+2 .cse54))) (cong (=> .cse55 .cse36) (=> .cse10 .cse1))))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse35) (=> .cse57 .cse18)))) (res (= .cse58 .cse58) (refl .cse58) (cong (=> .cse58 .cse34) (=> .cse58 .cse28)))) (cong (not .cse30) (not .cse29))) (=-2 .cse33)))) (not- .cse31))) (res .cse32 (assume .cse32) (not- .cse32))))))))))))))))))) (let-proof ((.cse4 (res .cse18 (=>+ 1 .cse18) .cse20))) (res .cse0 (! (res .cse1 (res .cse2 .cse3 (=>+ 1 .cse1)) .cse4) :proves (+ .cse0) :input) (let ((.cse17 (+ x .cse27 1))) (let ((.cse5 (<= .cse17 0))) (res .cse5 (! (res .cse6 (let ((.cse7 (not .cse5))) (let-proof ((.cse8 (not+ .cse7))) (res .cse7 .cse8 (let ((.cse9 (not .cse7))) (res .cse9 (res .cse10 .cse11 (let ((.cse12 (= .cse10 .cse9))) (res .cse12 (let ((.cse13 (= .cse6 .cse7))) (res .cse13 (res .cse7 (res .cse6 (=+1 .cse13) (res .cse5 .cse8 (farkas 1 .cse6 1 .cse5))) (res .cse6 (res .cse14 .cse15 (res .cse5 (let ((.cse16 (<= 1 .cse17))) (res .cse16 (total-int .cse17 0) (farkas 1 .cse14 1 .cse16))) (not- .cse7))) (=+2 .cse13))) (cong (not .cse6) (not .cse7)))) (=-2 .cse12)))) (not- .cse9)))))) (res .cse18 (res .cse10 (=>+ 0 .cse18) .cse19) .cse20)) :proves (+ .cse5) :input) (res .cse21 (! (let ((.cse22 (<= 1 .cse23))) (res .cse22 (total-int .cse23 0) (farkas 1 .cse22 1 .cse5 1 .cse0))) :proves (+ .cse21 - .cse5 - .cse0) :LA ((- 1) 1 1)) (! (res .cse24 (res .cse1 (=>+ 0 .cse1) .cse4) (res .cse25 (and- 0 .cse24) .cse26)) :proves (- .cse21) :input)))))))))))))))) :proves () :rup)

