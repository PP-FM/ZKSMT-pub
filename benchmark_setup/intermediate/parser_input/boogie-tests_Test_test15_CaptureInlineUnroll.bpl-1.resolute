unsat
(! (let ((.cse90 (ControlFlow 0 6))) (let ((.cse2 (= .cse90 (- 7))) (.cse0 (= (- 7) .cse90))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 7) .cse90)) (res .cse2 (symm .cse90 (- 7)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse7 (= inline$Increment$0$y@1 2))) (let ((.cse1 (=> .cse2 .cse7))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse65 (ControlFlow 0 2))) (let ((.cse58 (= .cse65 (- 1))) (.cse56 (= inline$Increment$1$y@1 8)) (.cse78 (ControlFlow 0 3))) (let ((.cse66 (= .cse78 2)) (.cse55 (=> .cse58 .cse56))) (let ((.cse53 (=> .cse66 .cse55)) (.cse73 (= .cse78 (- 4))) (.cse69 (= inline$Increment$1$y@1 2))) (let ((.cse71 (=> .cse73 .cse69)) (.cse51 (=> .cse69 .cse53))) (let ((.cse79 (= inline$Increment$1$y@1 (+ u@0 1))) (.cse49 (and .cse71 .cse51))) (let ((.cse80 (and (= u@0 (+ inline$Increment$0$y@1 3)) (= (ControlFlow 0 5) 3))) (.cse47 (=> .cse79 .cse49))) (let ((.cse81 (= .cse90 5)) (.cse45 (=> .cse80 .cse47))) (let ((.cse43 (=> .cse81 .cse45))) (let ((.cse5 (=> .cse7 .cse43))) (let ((.cse18 (= inline$Increment$0$y@1 1)) (.cse29 (and .cse1 .cse5))) (let ((.cse19 (=> .cse18 .cse29))) (let-proof ((.cse20 (let ((.cse93 (= (ControlFlow 0 8) 6))) (let ((.cse30 (=> .cse93 .cse19))) (res .cse30 (=>+ 1 .cse30) (let ((.cse94 (= (ControlFlow 0 9) 8))) (let ((.cse31 (=> .cse94 .cse30))) (res .cse31 (=>+ 1 .cse31) (let ((.cse95 (= (ControlFlow 0 0) 9))) (let ((.cse32 (=> .cse95 .cse31))) (res .cse32 (=>+ 1 .cse32) (let ((.cse59 (- 0 1))) (let ((.cse57 (= .cse65 .cse59))) (let ((.cse74 (- 0 4)) (.cse54 (=> .cse57 .cse56))) (let ((.cse52 (=> .cse66 .cse54)) (.cse72 (= .cse78 .cse74))) (let ((.cse70 (=> .cse72 .cse69)) (.cse50 (=> .cse69 .cse52))) (let ((.cse48 (and .cse70 .cse50))) (let ((.cse46 (=> .cse79 .cse48))) (let ((.cse86 (- 0 7)) (.cse44 (=> .cse80 .cse46))) (let ((.cse42 (=> .cse81 .cse44)) (.cse85 (= .cse90 .cse86))) (let ((.cse84 (=> .cse85 .cse7)) (.cse41 (=> .cse7 .cse42)) (.cse92 (+ 0 1))) (let ((.cse91 (= inline$Increment$0$y@1 .cse92)) (.cse40 (and .cse84 .cse41))) (let ((.cse39 (=> .cse91 .cse40))) (let ((.cse38 (=> .cse93 .cse39))) (let ((.cse37 (=> .cse94 .cse38))) (let ((.cse33 (=> .cse95 .cse37))) (let ((.cse35 (not .cse33))) (res .cse33 (let ((.cse34 (not .cse32))) (res .cse34 (res .cse35 (not+ .cse35) (let ((.cse36 (= .cse35 .cse34))) (res .cse36 (res (= .cse33 .cse32) (res (= .cse37 .cse31) (res (= .cse38 .cse30) (res (= .cse39 .cse19) (res (= .cse40 .cse29) (let ((.cse82 (= .cse7 .cse7)) (.cse61 (= 0 0))) (let-proof ((.cse83 (refl .cse7)) (.cse62 (refl 0))) (res (= .cse41 .cse5) (res (= .cse42 .cse43) (res (= .cse44 .cse45) (res (= .cse46 .cse47) (res (= .cse48 .cse49) (let ((.cse67 (= .cse69 .cse69))) (let-proof ((.cse68 (refl .cse69))) (res (= .cse50 .cse51) (res (= .cse52 .cse53) (res (= .cse54 .cse55) (res (= .cse56 .cse56) (refl .cse56) (res (= .cse57 .cse58) (res (= .cse59 (- 1)) (let ((.cse60 (* (- 1) 1))) (res (= .cse60 (- 1)) (poly* .cse60 (- 1)) (res .cse61 .cse62 (let ((.cse63 (+ 0 .cse60)) (.cse64 (+ 0 (- 1)))) (res (= .cse63 .cse64) (cong (+ 0 .cse60) (+ 0 (- 1))) (res (= .cse59 .cse63) (-def 0 1) (res (= .cse64 (- 1)) (poly+ .cse64 (- 1)) (trans .cse59 .cse63 .cse64 (- 1))))))))) (res (= .cse65 .cse65) (refl .cse65) (cong (= .cse65 .cse59) (= .cse65 (- 1))))) (cong (=> .cse57 .cse56) (=> .cse58 .cse56)))) (res (= .cse66 .cse66) (refl .cse66) (cong (=> .cse66 .cse54) (=> .cse66 .cse55)))) (res .cse67 .cse68 (cong (=> .cse69 .cse52) (=> .cse69 .cse53)))) (res (= .cse70 .cse71) (res .cse67 .cse68 (res (= .cse72 .cse73) (res (= .cse74 (- 4)) (let ((.cse75 (* (- 1) 4))) (res (= .cse75 (- 4)) (poly* .cse75 (- 4)) (res .cse61 .cse62 (let ((.cse76 (+ 0 .cse75)) (.cse77 (+ 0 (- 4)))) (res (= .cse76 .cse77) (cong (+ 0 .cse75) (+ 0 (- 4))) (res (= .cse74 .cse76) (-def 0 4) (res (= .cse77 (- 4)) (poly+ .cse77 (- 4)) (trans .cse74 .cse76 .cse77 (- 4))))))))) (res (= .cse78 .cse78) (refl .cse78) (cong (= .cse78 .cse74) (= .cse78 (- 4))))) (cong (=> .cse72 .cse69) (=> .cse73 .cse69)))) (cong (and .cse70 .cse50) (and .cse71 .cse51)))))) (res (= .cse79 .cse79) (refl .cse79) (cong (=> .cse79 .cse48) (=> .cse79 .cse49)))) (res (= .cse80 .cse80) (refl .cse80) (cong (=> .cse80 .cse46) (=> .cse80 .cse47)))) (res (= .cse81 .cse81) (refl .cse81) (cong (=> .cse81 .cse44) (=> .cse81 .cse45)))) (res .cse82 .cse83 (cong (=> .cse7 .cse42) (=> .cse7 .cse43)))) (res (= .cse84 .cse1) (res .cse82 .cse83 (res (= .cse85 .cse2) (res (= .cse86 (- 7)) (let ((.cse87 (* (- 1) 7))) (res (= .cse87 (- 7)) (poly* .cse87 (- 7)) (res .cse61 .cse62 (let ((.cse88 (+ 0 .cse87)) (.cse89 (+ 0 (- 7)))) (res (= .cse88 .cse89) (cong (+ 0 .cse87) (+ 0 (- 7))) (res (= .cse86 .cse88) (-def 0 7) (res (= .cse89 (- 7)) (poly+ .cse89 (- 7)) (trans .cse86 .cse88 .cse89 (- 7))))))))) (res (= .cse90 .cse90) (refl .cse90) (cong (= .cse90 .cse86) (= .cse90 (- 7))))) (cong (=> .cse85 .cse7) (=> .cse2 .cse7)))) (cong (and .cse84 .cse41) (and .cse1 .cse5)))))) (res (= .cse91 .cse18) (res (= .cse92 1) (poly+ .cse92 1) (res (= inline$Increment$0$y@1 inline$Increment$0$y@1) (refl inline$Increment$0$y@1) (cong (= inline$Increment$0$y@1 .cse92) (= inline$Increment$0$y@1 1)))) (cong (=> .cse91 .cse40) (=> .cse18 .cse29)))) (res (= .cse93 .cse93) (refl .cse93) (cong (=> .cse93 .cse39) (=> .cse93 .cse19)))) (res (= .cse94 .cse94) (refl .cse94) (cong (=> .cse94 .cse38) (=> .cse94 .cse30)))) (res (= .cse95 .cse95) (refl .cse95) (cong (=> .cse95 .cse37) (=> .cse95 .cse31)))) (cong (not .cse33) (not .cse32))) (=-2 .cse36)))) (not- .cse34))) (res .cse35 (assume .cse35) (not- .cse35)))))))))))))))))))))))))))))) (res .cse5 (! (let ((.cse12 (+ inline$Increment$0$y@1 (- 2)))) (let ((.cse6 (= .cse12 0)) (.cse13 (= 0 .cse12))) (let-proof ((.cse14 (symm 0 .cse12))) (res .cse6 (! (res .cse7 (=>+ 0 .cse5) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res .cse6 (res .cse7 (=+1 .cse8) (let ((.cse9 (= 2 inline$Increment$0$y@1))) (res .cse9 (symm 2 inline$Increment$0$y@1) (let ((.cse10 (< .cse12 0))) (res .cse10 (let ((.cse11 (< 0 .cse12))) (res .cse11 (trichotomy .cse12 0) (farkas 1 .cse7 1 .cse11))) (farkas 1 .cse9 1 .cse10)))))) (res .cse7 (res .cse13 .cse14 (let ((.cse15 (< inline$Increment$0$y@1 2))) (res .cse15 (let ((.cse16 (< 2 inline$Increment$0$y@1))) (res .cse16 (trichotomy inline$Increment$0$y@1 2) (farkas 1 .cse6 1 .cse16))) (farkas 1 .cse13 1 .cse15)))) (=+2 .cse8))) (=-2 .cse8)))) :proves (+ .cse5 + .cse6) :input) (! (let ((.cse25 (+ inline$Increment$0$y@1 (- 1)))) (let ((.cse17 (= .cse25 0))) (res .cse17 (! (res .cse18 (res .cse19 (=>+ 0 .cse19) .cse20) (let ((.cse21 (= .cse18 .cse17))) (res .cse21 (res .cse17 (res .cse18 (=+1 .cse21) (let ((.cse22 (= 1 inline$Increment$0$y@1))) (res .cse22 (symm 1 inline$Increment$0$y@1) (let ((.cse23 (< .cse25 0))) (res .cse23 (let ((.cse24 (< 0 .cse25))) (res .cse24 (trichotomy .cse25 0) (farkas 1 .cse18 1 .cse24))) (farkas 1 .cse22 1 .cse23)))))) (res .cse18 (let ((.cse26 (= 0 .cse25))) (res .cse26 (symm 0 .cse25) (let ((.cse27 (< inline$Increment$0$y@1 1))) (res .cse27 (let ((.cse28 (< 1 inline$Increment$0$y@1))) (res .cse28 (trichotomy inline$Increment$0$y@1 1) (farkas 1 .cse17 1 .cse28))) (farkas 1 .cse26 1 .cse27))))) (=+2 .cse21))) (=-2 .cse21)))) :proves (+ .cse17) :input) (! (res .cse13 .cse14 (farkas 1 .cse17 1 .cse13)) :proves (- .cse17 - .cse6) :LA (1 (- 1)))))) :proves (- .cse6) :rup))))) :proves (+ .cse5) :rup) (! (res .cse29 (and+ .cse29) (res .cse19 (=>+ 1 .cse19) .cse20)) :proves (- .cse1 - .cse5) :input))))))))))))))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse97 (not .cse2))) (res .cse2 (let ((.cse96 (not .cse0))) (res .cse96 (res .cse97 (not+ .cse97) (let ((.cse98 (= .cse97 .cse96))) (res .cse98 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse98)))) (not- .cse96))) (res .cse97 (assume .cse97) (not- .cse97)))) :proves (- .cse0) :input)))))) :proves () :rup)

