unsat
(! (let ((.cse96 (+ (* (- 1) call1formal@r@0) 42)) (.cse56 (ControlFlow 0 2))) (let ((.cse1 (= call1formal@r@0 0)) (.cse47 (= .cse56 (- 1))) (.cse10 (<= .cse96 0))) (let ((.cse95 (+ call1formal@r@0 (- 41))) (.cse9 (=> .cse47 .cse10)) (.cse62 (= .cse56 (- 3))) (.cse4 (not .cse1))) (let ((.cse3 (=> .cse62 .cse4)) (.cse8 (=> .cse4 .cse9)) (.cse0 (<= .cse95 0))) (let ((.cse11 (not .cse0)) (.cse26 (=> true .cse10)) (.cse19 (and .cse3 .cse8))) (let ((.cse7 (=> .cse26 .cse19)) (.cse74 (< 0 .cse96)) (.cse23 (<= 1 .cse95)) (.cse16 (= .cse10 .cse11))) (let-proof ((.cse25 true+) (.cse12 (not+ .cse11)) (.cse75 (total .cse96 0)) (.cse24 (total-int .cse95 0)) (.cse27 (not- .cse11))) (let-proof ((.cse17 (res .cse11 (res .cse10 (=+1 .cse16) (res .cse0 .cse12 (farkas 1 .cse10 1 .cse0))) (res .cse10 (res .cse74 .cse75 (res .cse0 (res .cse23 .cse24 (farkas 1 .cse74 1 .cse23)) .cse27)) (=+2 .cse16)))) (.cse20 (! (let ((.cse28 (=> true .cse7))) (res .cse28 (! (=>+ 1 .cse28) :proves (+ .cse28 - .cse7) :input) (! (let ((.cse82 (= .cse56 (- 4)))) (let ((.cse29 (=> .cse82 true))) (res .cse29 (! (res true .cse25 (=>+ 1 .cse29)) :proves (+ .cse29) :input) (! (let ((.cse30 (and .cse29 .cse28))) (res .cse30 (and+ .cse30) (let ((.cse93 (= (ControlFlow 0 5) 2))) (let ((.cse31 (=> .cse93 .cse30))) (res .cse31 (=>+ 1 .cse31) (let ((.cse94 (= (ControlFlow 0 0) 5))) (let ((.cse32 (=> .cse94 .cse31))) (res .cse32 (=>+ 1 .cse32) (let ((.cse48 (- 0 1))) (let ((.cse63 (- 0 3)) (.cse46 (= .cse56 .cse48)) (.cse57 (<= 42 call1formal@r@0))) (let ((.cse73 (= 42 0)) (.cse43 (=> .cse46 .cse57)) (.cse61 (= .cse56 .cse63))) (let ((.cse60 (=> .cse61 .cse4)) (.cse42 (=> .cse4 .cse43)) (.cse68 (not .cse73))) (let ((.cse83 (- 0 4)) (.cse67 (=> .cse68 .cse57)) (.cse41 (and .cse60 .cse42))) (let ((.cse40 (=> .cse67 .cse41)) (.cse81 (= .cse56 .cse83)) (.cse79 (<= 0 42))) (let ((.cse80 (=> .cse81 .cse79)) (.cse39 (=> .cse79 .cse40))) (let ((.cse38 (and .cse80 .cse39))) (let ((.cse37 (=> .cse93 .cse38))) (let ((.cse33 (=> .cse94 .cse37))) (let ((.cse35 (not .cse33))) (res .cse33 (let ((.cse34 (not .cse32))) (res .cse34 (res .cse35 (not+ .cse35) (let ((.cse36 (= .cse35 .cse34))) (res .cse36 (res (= .cse33 .cse32) (res (= .cse37 .cse31) (res (= .cse38 .cse30) (let ((.cse77 (= .cse79 true)) (.cse50 (= 0 0)) (.cse54 (= .cse56 .cse56))) (let-proof ((.cse78 (let ((.cse88 (<= (- 42) 0))) (let ((.cse87 (= .cse88 true)) (.cse89 (< 0 (- 42)))) (let-proof ((.cse90 (total (- 42) 0))) (res .cse87 (res true .cse25 (res .cse88 (res .cse89 .cse90 (farkas 1 .cse89)) (=+2 .cse87))) (let ((.cse91 (= .cse79 .cse88))) (res .cse91 (res .cse88 (res .cse79 (=+1 .cse91) (res .cse89 .cse90 (farkas 1 .cse79 1 .cse89))) (res .cse79 (let ((.cse92 (< 42 0))) (res .cse92 (total 0 42) (farkas 1 .cse92 1 .cse88))) (=+2 .cse91))) (trans .cse79 .cse88 true)))))))) (.cse51 (refl 0)) (.cse55 (refl .cse56))) (res (= .cse39 .cse28) (res (= .cse40 .cse7) (let ((.cse44 (= .cse57 .cse10))) (let-proof ((.cse45 (res .cse10 (res .cse57 (=+1 .cse44) (res .cse74 .cse75 (farkas 1 .cse57 1 .cse74))) (res .cse57 (let ((.cse76 (< call1formal@r@0 42))) (res .cse76 (total 42 call1formal@r@0) (farkas 1 .cse76 1 .cse10))) (=+2 .cse44))))) (res (= .cse41 .cse19) (let ((.cse58 (= .cse4 .cse4))) (let-proof ((.cse59 (refl .cse4))) (res (= .cse42 .cse8) (res (= .cse43 .cse9) (res .cse44 .cse45 (res (= .cse46 .cse47) (res (= .cse48 (- 1)) (let ((.cse49 (* (- 1) 1))) (res (= .cse49 (- 1)) (poly* .cse49 (- 1)) (res .cse50 .cse51 (let ((.cse52 (+ 0 .cse49)) (.cse53 (+ 0 (- 1)))) (res (= .cse52 .cse53) (cong (+ 0 .cse49) (+ 0 (- 1))) (res (= .cse48 .cse52) (-def 0 1) (res (= .cse53 (- 1)) (poly+ .cse53 (- 1)) (trans .cse48 .cse52 .cse53 (- 1))))))))) (res .cse54 .cse55 (cong (= .cse56 .cse48) (= .cse56 (- 1))))) (cong (=> .cse46 .cse57) (=> .cse47 .cse10)))) (res .cse58 .cse59 (cong (=> .cse4 .cse43) (=> .cse4 .cse9)))) (res (= .cse60 .cse3) (res .cse58 .cse59 (res (= .cse61 .cse62) (res (= .cse63 (- 3)) (let ((.cse64 (* (- 1) 3))) (res (= .cse64 (- 3)) (poly* .cse64 (- 3)) (res .cse50 .cse51 (let ((.cse65 (+ 0 .cse64)) (.cse66 (+ 0 (- 3)))) (res (= .cse65 .cse66) (cong (+ 0 .cse64) (+ 0 (- 3))) (res (= .cse63 .cse65) (-def 0 3) (res (= .cse66 (- 3)) (poly+ .cse66 (- 3)) (trans .cse63 .cse65 .cse66 (- 3))))))))) (res .cse54 .cse55 (cong (= .cse56 .cse63) (= .cse56 (- 3))))) (cong (=> .cse61 .cse4) (=> .cse62 .cse4)))) (cong (and .cse60 .cse42) (and .cse3 .cse8)))))) (res (= .cse67 .cse26) (res .cse44 .cse45 (res (= .cse68 true) (let ((.cse70 (not false))) (let ((.cse69 (= .cse70 true))) (let-proof ((.cse71 false-)) (res .cse69 (res true .cse25 (res .cse70 (res false (not+ .cse70) .cse71) (=+2 .cse69))) (res (= .cse68 .cse70) (let ((.cse72 (= .cse73 false))) (res .cse72 (res false (res .cse73 (=+1 .cse72) (farkas 1 .cse73)) .cse71) (cong (not .cse73) (not false)))) (trans .cse68 .cse70 true)))))) (cong (=> .cse68 .cse57) (=> true .cse10)))) (cong (=> .cse67 .cse41) (=> .cse26 .cse19)))))) (res .cse77 .cse78 (cong (=> .cse79 .cse40) (=> true .cse7)))) (res (= .cse80 .cse29) (res .cse77 .cse78 (res (= .cse81 .cse82) (res (= .cse83 (- 4)) (let ((.cse84 (* (- 1) 4))) (res (= .cse84 (- 4)) (poly* .cse84 (- 4)) (res .cse50 .cse51 (let ((.cse85 (+ 0 .cse84)) (.cse86 (+ 0 (- 4)))) (res (= .cse85 .cse86) (cong (+ 0 .cse84) (+ 0 (- 4))) (res (= .cse83 .cse85) (-def 0 4) (res (= .cse86 (- 4)) (poly+ .cse86 (- 4)) (trans .cse83 .cse85 .cse86 (- 4))))))))) (res .cse54 .cse55 (cong (= .cse56 .cse83) (= .cse56 (- 4))))) (cong (=> .cse81 .cse79) (=> .cse82 true)))) (cong (and .cse80 .cse39) (and .cse29 .cse28)))))) (res (= .cse93 .cse93) (refl .cse93) (cong (=> .cse93 .cse38) (=> .cse93 .cse30)))) (res (= .cse94 .cse94) (refl .cse94) (cong (=> .cse94 .cse37) (=> .cse94 .cse31)))) (cong (not .cse33) (not .cse32))) (=-2 .cse36)))) (not- .cse34))) (res .cse35 (assume .cse35) (not- .cse35)))))))))))))))))))))) :proves (- .cse29 - .cse28) :input)))) :proves (- .cse28) :rup))) :proves (- .cse7) :rup))) (let-proof ((.cse18 (! (res .cse7 (! (res .cse10 (res true .cse25 (res .cse26 (=>+ 0 .cse7) (=>- .cse26))) (res .cse11 (res .cse16 .cse17 (=-2 .cse16)) .cse27)) :proves (+ .cse7 - .cse0) :input) .cse20) :proves (- .cse0) :rup))) (res .cse0 (res .cse1 (! (let ((.cse2 (= 0 call1formal@r@0))) (let-proof ((.cse6 (symm call1formal@r@0 0))) (res .cse2 (! (res .cse3 (! (res .cse1 (res .cse4 (not+ .cse4) (=>+ 1 .cse3)) (let ((.cse5 (= .cse1 .cse2))) (res .cse5 (res .cse2 (res .cse1 (=+1 .cse5) (symm 0 call1formal@r@0)) (res .cse1 .cse6 (=+2 .cse5))) (=-2 .cse5)))) :proves (+ .cse3 + .cse2) :input) (! (res .cse7 (res .cse8 (! (res .cse9 (! (res .cse0 (! (res .cse10 (res .cse11 .cse12 (let ((.cse13 (not .cse11))) (res .cse13 (let ((.cse14 (not .cse10))) (res .cse14 (not+ .cse14) (let ((.cse15 (= .cse14 .cse13))) (res .cse15 (res .cse16 .cse17 (cong (not .cse10) (not .cse11))) (=-2 .cse15))))) (not- .cse13)))) (=>+ 1 .cse9)) :proves (+ .cse9 + .cse0) :input) .cse18) :proves (+ .cse9) :rup) (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse9) :input)) :proves (+ .cse8) :rup) (! (res .cse19 (and+ .cse19) (=>+ 1 .cse7)) :proves (- .cse8 - .cse3 + .cse7) :input)) .cse20) :proves (- .cse3) :rup)) :proves (+ .cse2) :rup) (! (res .cse1 .cse6 (let ((.cse21 (< call1formal@r@0 0))) (res .cse21 (let ((.cse22 (< 0 call1formal@r@0))) (res .cse22 (trichotomy call1formal@r@0 0) (farkas 1 .cse1 1 .cse22))) (farkas 1 .cse2 1 .cse21)))) :proves (- .cse2 + .cse1) :EQ)))) :proves (+ .cse1) :rup) (! (res .cse23 .cse24 (farkas 1 .cse1 1 .cse23)) :proves (- .cse1 + .cse0) :LA (1 (- 1)))) .cse18)))))))))) :proves () :rup)

