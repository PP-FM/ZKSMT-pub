unsat
(! (let ((.cse45 (+ b a c d)) (.cse131 (ControlFlow 0 2))) (let ((.cse122 (= .cse131 (- 1))) (.cse34 (= e@0 .cse45))) (let ((.cse37 (=> .cse122 .cse34)) (.cse135 (= .cse131 (- 3)))) (let ((.cse33 (=> .cse135 .cse34)) (.cse36 (=> .cse34 .cse37)) (.cse10 (+ abc@0 d))) (let ((.cse69 (+ b a c)) (.cse7 (= e@0 .cse10)) (.cse40 (and .cse33 .cse36))) (let ((.cse6 (=> .cse7 .cse40)) (.cse150 (= .cse131 (- 4))) (.cse63 (= abc@0 .cse69))) (let ((.cse51 (=> .cse150 .cse63)) (.cse49 (=> .cse63 .cse6)) (.cse78 (+ ab@0 c))) (let ((.cse96 (+ b a)) (.cse75 (= abc@0 .cse78)) (.cse73 (and .cse51 .cse49))) (let ((.cse50 (=> .cse75 .cse73)) (.cse164 (= .cse131 (- 5))) (.cse86 (= ab@0 .cse96))) (let ((.cse99 (+ b a (* (- 1) ab@0))) (.cse85 (=> .cse164 .cse86)) (.cse84 (=> .cse86 .cse50))) (let ((.cse92 (and .cse85 .cse84)) (.cse0 (= .cse99 0))) (let ((.cse28 (= 0 .cse99)) (.cse90 (= .cse86 .cse0)) (.cse93 (=> .cse86 .cse92))) (let-proof ((.cse29 (symm 0 .cse99))) (let-proof ((.cse94 (let ((.cse169 (= (ControlFlow 0 6) 2))) (let ((.cse102 (=> .cse169 .cse93))) (res .cse102 (=>+ 1 .cse102) (let ((.cse170 (= (ControlFlow 0 0) 6))) (let ((.cse103 (=> .cse170 .cse102))) (res .cse103 (=>+ 1 .cse103) (let ((.cse158 (+ a b))) (let ((.cse144 (+ .cse158 c))) (let ((.cse140 (+ .cse144 d)) (.cse123 (- 0 1))) (let ((.cse136 (- 0 3)) (.cse121 (= .cse131 .cse123)) (.cse132 (= e@0 .cse140))) (let ((.cse118 (=> .cse121 .cse132)) (.cse134 (= .cse131 .cse136))) (let ((.cse133 (=> .cse134 .cse132)) (.cse117 (=> .cse132 .cse118))) (let ((.cse151 (- 0 4)) (.cse116 (and .cse133 .cse117))) (let ((.cse115 (=> .cse7 .cse116)) (.cse149 (= .cse131 .cse151)) (.cse147 (= abc@0 .cse144))) (let ((.cse148 (=> .cse149 .cse147)) (.cse114 (=> .cse147 .cse115))) (let ((.cse165 (- 0 5)) (.cse113 (and .cse148 .cse114))) (let ((.cse112 (=> .cse75 .cse113)) (.cse163 (= .cse131 .cse165)) (.cse161 (= ab@0 .cse158))) (let ((.cse162 (=> .cse163 .cse161)) (.cse111 (=> .cse161 .cse112))) (let ((.cse110 (and .cse162 .cse111))) (let ((.cse109 (=> .cse86 .cse110))) (let ((.cse108 (=> .cse169 .cse109))) (let ((.cse104 (=> .cse170 .cse108))) (let ((.cse106 (not .cse104))) (res .cse104 (let ((.cse105 (not .cse103))) (res .cse105 (res .cse106 (not+ .cse106) (let ((.cse107 (= .cse106 .cse105))) (res .cse107 (res (= .cse104 .cse103) (res (= .cse108 .cse102) (res (= .cse109 .cse93) (res (= .cse110 .cse92) (let ((.cse156 (= .cse158 .cse96))) (let-proof ((.cse157 (poly+ .cse158 .cse96))) (let ((.cse159 (= .cse161 .cse86)) (.cse125 (= 0 0)) (.cse129 (= .cse131 .cse131))) (let-proof ((.cse160 (res .cse156 .cse157 (res (= ab@0 ab@0) (refl ab@0) (cong (= ab@0 .cse158) (= ab@0 .cse96))))) (.cse126 (refl 0)) (.cse130 (refl .cse131))) (res (= .cse111 .cse84) (res (= .cse112 .cse50) (res (= .cse113 .cse73) (let ((.cse142 (= .cse144 .cse69))) (let-proof ((.cse143 (let ((.cse155 (+ .cse96 c))) (res (= .cse155 .cse69) (poly+ .cse155 .cse69) (res (= .cse144 .cse155) (res (= c c) (refl c) (res .cse156 .cse157 (cong (+ .cse158 c) (+ .cse96 c)))) (trans .cse144 .cse155 .cse69)))))) (let ((.cse145 (= .cse147 .cse63))) (let-proof ((.cse146 (res .cse142 .cse143 (res (= abc@0 abc@0) (refl abc@0) (cong (= abc@0 .cse144) (= abc@0 .cse69)))))) (res (= .cse114 .cse49) (res (= .cse115 .cse6) (res (= .cse116 .cse40) (let ((.cse119 (= .cse132 .cse34))) (let-proof ((.cse120 (res (= .cse140 .cse45) (let ((.cse141 (+ .cse69 d))) (res (= .cse141 .cse45) (poly+ .cse141 .cse45) (res (= .cse140 .cse141) (res (= d d) (refl d) (res .cse142 .cse143 (cong (+ .cse144 d) (+ .cse69 d)))) (trans .cse140 .cse141 .cse45)))) (res (= e@0 e@0) (refl e@0) (cong (= e@0 .cse140) (= e@0 .cse45)))))) (res (= .cse117 .cse36) (res (= .cse118 .cse37) (res .cse119 .cse120 (res (= .cse121 .cse122) (res (= .cse123 (- 1)) (let ((.cse124 (* (- 1) 1))) (res (= .cse124 (- 1)) (poly* .cse124 (- 1)) (res .cse125 .cse126 (let ((.cse127 (+ 0 .cse124)) (.cse128 (+ 0 (- 1)))) (res (= .cse127 .cse128) (cong (+ 0 .cse124) (+ 0 (- 1))) (res (= .cse123 .cse127) (-def 0 1) (res (= .cse128 (- 1)) (poly+ .cse128 (- 1)) (trans .cse123 .cse127 .cse128 (- 1))))))))) (res .cse129 .cse130 (cong (= .cse131 .cse123) (= .cse131 (- 1))))) (cong (=> .cse121 .cse132) (=> .cse122 .cse34)))) (res .cse119 .cse120 (cong (=> .cse132 .cse118) (=> .cse34 .cse37)))) (res (= .cse133 .cse33) (res .cse119 .cse120 (res (= .cse134 .cse135) (res (= .cse136 (- 3)) (let ((.cse137 (* (- 1) 3))) (res (= .cse137 (- 3)) (poly* .cse137 (- 3)) (res .cse125 .cse126 (let ((.cse138 (+ 0 .cse137)) (.cse139 (+ 0 (- 3)))) (res (= .cse138 .cse139) (cong (+ 0 .cse137) (+ 0 (- 3))) (res (= .cse136 .cse138) (-def 0 3) (res (= .cse139 (- 3)) (poly+ .cse139 (- 3)) (trans .cse136 .cse138 .cse139 (- 3))))))))) (res .cse129 .cse130 (cong (= .cse131 .cse136) (= .cse131 (- 3))))) (cong (=> .cse134 .cse132) (=> .cse135 .cse34)))) (cong (and .cse133 .cse117) (and .cse33 .cse36)))))) (res (= .cse7 .cse7) (refl .cse7) (cong (=> .cse7 .cse116) (=> .cse7 .cse40)))) (res .cse145 .cse146 (cong (=> .cse147 .cse115) (=> .cse63 .cse6)))) (res (= .cse148 .cse51) (res .cse145 .cse146 (res (= .cse149 .cse150) (res (= .cse151 (- 4)) (let ((.cse152 (* (- 1) 4))) (res (= .cse152 (- 4)) (poly* .cse152 (- 4)) (res .cse125 .cse126 (let ((.cse153 (+ 0 .cse152)) (.cse154 (+ 0 (- 4)))) (res (= .cse153 .cse154) (cong (+ 0 .cse152) (+ 0 (- 4))) (res (= .cse151 .cse153) (-def 0 4) (res (= .cse154 (- 4)) (poly+ .cse154 (- 4)) (trans .cse151 .cse153 .cse154 (- 4))))))))) (res .cse129 .cse130 (cong (= .cse131 .cse151) (= .cse131 (- 4))))) (cong (=> .cse149 .cse147) (=> .cse150 .cse63)))) (cong (and .cse148 .cse114) (and .cse51 .cse49)))))))) (res (= .cse75 .cse75) (refl .cse75) (cong (=> .cse75 .cse113) (=> .cse75 .cse73)))) (res .cse159 .cse160 (cong (=> .cse161 .cse112) (=> .cse86 .cse50)))) (res (= .cse162 .cse85) (res .cse159 .cse160 (res (= .cse163 .cse164) (res (= .cse165 (- 5)) (let ((.cse166 (* (- 1) 5))) (res (= .cse166 (- 5)) (poly* .cse166 (- 5)) (res .cse125 .cse126 (let ((.cse167 (+ 0 .cse166)) (.cse168 (+ 0 (- 5)))) (res (= .cse167 .cse168) (cong (+ 0 .cse166) (+ 0 (- 5))) (res (= .cse165 .cse167) (-def 0 5) (res (= .cse168 (- 5)) (poly+ .cse168 (- 5)) (trans .cse165 .cse167 .cse168 (- 5))))))))) (res .cse129 .cse130 (cong (= .cse131 .cse165) (= .cse131 (- 5))))) (cong (=> .cse163 .cse161) (=> .cse164 .cse86)))) (cong (and .cse162 .cse111) (and .cse85 .cse84)))))))) (res (= .cse86 .cse86) (refl .cse86) (cong (=> .cse86 .cse110) (=> .cse86 .cse92)))) (res (= .cse169 .cse169) (refl .cse169) (cong (=> .cse169 .cse109) (=> .cse169 .cse93)))) (res (= .cse170 .cse170) (refl .cse170) (cong (=> .cse170 .cse108) (=> .cse170 .cse102)))) (cong (not .cse104) (not .cse103))) (=-2 .cse107)))) (not- .cse105))) (res .cse106 (assume .cse106) (not- .cse106))))))))))))))))))))))))))) (.cse91 (res .cse0 (res .cse86 (=+1 .cse90) (let ((.cse95 (= .cse96 ab@0))) (res .cse95 (symm .cse96 ab@0) (let ((.cse97 (< .cse99 0))) (res .cse97 (let ((.cse98 (< 0 .cse99))) (res .cse98 (trichotomy .cse99 0) (farkas 1 .cse95 1 .cse98))) (farkas 1 .cse86 1 .cse97)))))) (res .cse86 (res .cse28 .cse29 (let ((.cse100 (< ab@0 .cse96))) (res .cse100 (let ((.cse101 (< .cse96 ab@0))) (res .cse101 (trichotomy ab@0 .cse96) (farkas 1 .cse28 1 .cse101))) (farkas 1 .cse0 1 .cse100)))) (=+2 .cse90))))) (let-proof ((.cse1 (! (res .cse86 (res .cse93 (=>+ 0 .cse93) .cse94) (res .cse90 .cse91 (=-2 .cse90))) :proves (+ .cse0) :input))) (res .cse0 .cse1 (let ((.cse62 (* (- 1) abc@0))) (let ((.cse81 (+ ab@0 c .cse62))) (let ((.cse30 (= 0 .cse81)) (.cse2 (= .cse81 0))) (let-proof ((.cse31 (symm 0 .cse81)) (.cse74 (! (res .cse84 (! (=>+ 1 .cse84) :proves (+ .cse84 - .cse50) :input) (! (res .cse85 (! (res .cse0 .cse1 (! (res .cse86 (let ((.cse87 (not .cse0))) (res .cse87 (let ((.cse88 (not .cse86))) (res .cse88 (not+ .cse88) (let ((.cse89 (= .cse88 .cse87))) (res .cse89 (res .cse90 .cse91 (cong (not .cse86) (not .cse0))) (=-2 .cse89))))) (not- .cse87))) (=>+ 1 .cse85)) :proves (+ .cse85 - .cse0) :input)) :proves (+ .cse85) :rup) (! (res .cse92 (and+ .cse92) (res .cse93 (=>+ 1 .cse93) .cse94)) :proves (- .cse85 - .cse84) :input)) :proves (- .cse84) :rup)) :proves (- .cse50) :rup))) (let-proof ((.cse3 (! (res .cse50 (! (res .cse75 (=>+ 0 .cse50) (let ((.cse76 (= .cse75 .cse2))) (res .cse76 (res .cse2 (res .cse75 (=+1 .cse76) (let ((.cse77 (= .cse78 abc@0))) (res .cse77 (symm .cse78 abc@0) (let ((.cse79 (< .cse81 0))) (res .cse79 (let ((.cse80 (< 0 .cse81))) (res .cse80 (trichotomy .cse81 0) (farkas 1 .cse77 1 .cse80))) (farkas 1 .cse75 1 .cse79)))))) (res .cse75 (res .cse30 .cse31 (let ((.cse82 (< abc@0 .cse78))) (res .cse82 (let ((.cse83 (< .cse78 abc@0))) (res .cse83 (trichotomy abc@0 .cse78) (farkas 1 .cse30 1 .cse83))) (farkas 1 .cse2 1 .cse82)))) (=+2 .cse76))) (=-2 .cse76)))) :proves (+ .cse50 + .cse2) :input) .cse74) :proves (+ .cse2) :rup))) (res .cse2 .cse3 (let ((.cse32 (* (- 1) e@0))) (let ((.cse22 (+ b a c d .cse32))) (let ((.cse24 (< 0 .cse22)) (.cse23 (< .cse22 0)) (.cse4 (= .cse22 0))) (let-proof ((.cse18 (! (res .cse49 (! (=>+ 1 .cse49) :proves (+ .cse49 - .cse6) :input) (! (res .cse50 (res .cse51 (! (let ((.cse55 (+ b a c .cse62))) (let ((.cse58 (< 0 .cse55)) (.cse57 (< .cse55 0)) (.cse52 (= .cse55 0))) (let-proof ((.cse59 (trichotomy .cse55 0))) (res .cse52 (! (res .cse0 .cse1 (res .cse2 .cse3 (let ((.cse53 (<= .cse55 0))) (res .cse53 (! (res .cse0 .cse1 (res .cse2 .cse3 (! (let ((.cse54 (<= 1 .cse55))) (res .cse54 (total-int .cse55 0) (farkas 1 .cse54 1 .cse2 1 .cse0))) :proves (+ .cse53 - .cse2 - .cse0) :LA ((- 1) 1 1)))) :proves (+ .cse53) :rup) (let ((.cse61 (+ b a c .cse62 1))) (let ((.cse56 (<= .cse61 0))) (res .cse56 (! (res .cse57 (res .cse58 .cse59 (farkas 1 .cse58 1 .cse53)) (let ((.cse60 (<= 1 .cse61))) (res .cse60 (total-int .cse61 0) (farkas 1 .cse60 1 .cse57)))) :proves (+ .cse56 + .cse52 - .cse53) :trichotomy) (! (res .cse28 .cse29 (res .cse30 .cse31 (farkas 1 .cse30 1 .cse28 1 .cse56))) :proves (- .cse2 - .cse0 - .cse56) :LA ((- 1) (- 1) 1))))))))) :proves (+ .cse52) :rup) (! (res .cse63 (let ((.cse64 (not .cse52))) (res .cse64 (let ((.cse65 (not .cse63))) (res .cse65 (not+ .cse65) (let ((.cse66 (= .cse65 .cse64))) (res .cse66 (let ((.cse67 (= .cse63 .cse52))) (res .cse67 (res .cse52 (res .cse63 (=+1 .cse67) (let ((.cse68 (= .cse69 abc@0))) (res .cse68 (symm .cse69 abc@0) (res .cse57 (res .cse58 .cse59 (farkas 1 .cse68 1 .cse58)) (farkas 1 .cse63 1 .cse57))))) (res .cse63 (let ((.cse70 (= 0 .cse55))) (res .cse70 (symm 0 .cse55) (let ((.cse71 (< abc@0 .cse69))) (res .cse71 (let ((.cse72 (< .cse69 abc@0))) (res .cse72 (trichotomy abc@0 .cse69) (farkas 1 .cse70 1 .cse72))) (farkas 1 .cse52 1 .cse71))))) (=+2 .cse67))) (cong (not .cse63) (not .cse52)))) (=-2 .cse66))))) (not- .cse64))) (=>+ 1 .cse51)) :proves (+ .cse51 - .cse52) :input))))) :proves (+ .cse51) :rup) (! (res .cse73 (and+ .cse73) (=>+ 1 .cse50)) :proves (- .cse49 - .cse51 + .cse50) :input)) .cse74) :proves (- .cse49) :rup)) :proves (- .cse6) :rup)) (.cse25 (trichotomy .cse22 0))) (res .cse4 (let ((.cse13 (+ abc@0 d .cse32))) (let ((.cse5 (= .cse13 0)) (.cse14 (= 0 .cse13))) (let-proof ((.cse15 (symm 0 .cse13))) (res .cse5 (! (res .cse6 (! (res .cse7 (=>+ 0 .cse6) (let ((.cse8 (= .cse7 .cse5))) (res .cse8 (res .cse5 (res .cse7 (=+1 .cse8) (let ((.cse9 (= .cse10 e@0))) (res .cse9 (symm .cse10 e@0) (let ((.cse11 (< .cse13 0))) (res .cse11 (let ((.cse12 (< 0 .cse13))) (res .cse12 (trichotomy .cse13 0) (farkas 1 .cse9 1 .cse12))) (farkas 1 .cse7 1 .cse11)))))) (res .cse7 (res .cse14 .cse15 (let ((.cse16 (< e@0 .cse10))) (res .cse16 (let ((.cse17 (< .cse10 e@0))) (res .cse17 (trichotomy e@0 .cse10) (farkas 1 .cse14 1 .cse17))) (farkas 1 .cse5 1 .cse16)))) (=+2 .cse8))) (=-2 .cse8)))) :proves (+ .cse6 + .cse5) :input) .cse18) :proves (+ .cse5) :rup) (let ((.cse27 (+ b a c d .cse32 1))) (let ((.cse19 (<= .cse27 0))) (res .cse19 (let ((.cse20 (<= .cse22 0))) (res .cse20 (! (let ((.cse21 (<= 1 .cse22))) (res .cse21 (total-int .cse22 0) (farkas 1 .cse5 1 .cse2 1 .cse0 1 .cse21))) :proves (- .cse5 - .cse2 - .cse0 + .cse20) :LA (1 1 1 (- 1))) (! (res .cse23 (res .cse24 .cse25 (farkas 1 .cse24 1 .cse20)) (let ((.cse26 (<= 1 .cse27))) (res .cse26 (total-int .cse27 0) (farkas 1 .cse26 1 .cse23)))) :proves (- .cse20 + .cse4 + .cse19) :trichotomy))) (! (res .cse28 .cse29 (res .cse30 .cse31 (res .cse14 .cse15 (farkas 1 .cse19 1 .cse14 1 .cse30 1 .cse28)))) :proves (- .cse19 - .cse5 - .cse2 - .cse0) :LA (1 (- 1) (- 1) (- 1)))))))))) (! (let ((.cse38 (= .cse34 .cse4))) (let-proof ((.cse39 (res .cse4 (res .cse34 (=+1 .cse38) (let ((.cse44 (= .cse45 e@0))) (res .cse44 (symm .cse45 e@0) (res .cse23 (res .cse24 .cse25 (farkas 1 .cse44 1 .cse24)) (farkas 1 .cse34 1 .cse23))))) (res .cse34 (let ((.cse46 (= 0 .cse22))) (res .cse46 (symm 0 .cse22) (let ((.cse47 (< e@0 .cse45))) (res .cse47 (let ((.cse48 (< .cse45 e@0))) (res .cse48 (trichotomy e@0 .cse45) (farkas 1 .cse46 1 .cse48))) (farkas 1 .cse4 1 .cse47))))) (=+2 .cse38))))) (let-proof ((.cse35 (let ((.cse41 (not .cse4))) (res .cse41 (let ((.cse42 (not .cse34))) (res .cse42 (not+ .cse42) (let ((.cse43 (= .cse42 .cse41))) (res .cse43 (res .cse38 .cse39 (cong (not .cse34) (not .cse4))) (=-2 .cse43))))) (not- .cse41))))) (res .cse33 (! (res .cse34 .cse35 (=>+ 1 .cse33)) :proves (+ .cse33 - .cse4) :input) (! (res .cse6 (res .cse36 (! (res .cse37 (res .cse4 (! (res .cse34 (=>+ 0 .cse36) (res .cse38 .cse39 (=-2 .cse38))) :proves (+ .cse36 + .cse4) :input) (! (res .cse34 .cse35 (=>+ 1 .cse37)) :proves (+ .cse37 - .cse4) :input)) (! (=>+ 1 .cse36) :proves (+ .cse36 - .cse37) :input)) :proves (+ .cse36) :rup) (! (res .cse40 (and+ .cse40) (=>+ 1 .cse6)) :proves (- .cse33 - .cse36 + .cse6) :input)) .cse18) :proves (- .cse33) :rup))))) :proves (- .cse4) :rup)))))))))))))))))))))))))))) :proves () :rup)

