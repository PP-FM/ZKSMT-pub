unsat
(! (let ((.cse18 (ControlFlow 0 2))) (let ((.cse1 (= .cse18 (- 1))) (.cse0 (= (- 1) .cse18))) (let ((.cse26 (= .cse1 .cse0))) (let-proof ((.cse27 (res .cse0 (res .cse1 (=+1 .cse26) (symm (- 1) .cse18)) (res .cse1 (symm .cse18 (- 1)) (=+2 .cse26))))) (res .cse0 (! (res .cse1 (let ((.cse22 (and ga0 true))) (let ((.cse21 (xor ga0@0 .cse22))) (let ((.cse23 (not .cse21))) (let ((.cse2 (and .cse23 .cse1))) (res .cse2 (let ((.cse3 (=> .cse2 ga0@0))) (res .cse3 (=>+ 0 .cse3) (let ((.cse24 (= (ControlFlow 0 3) 2))) (let ((.cse4 (=> .cse24 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse25 (= (ControlFlow 0 0) 3))) (let ((.cse5 (=> .cse25 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse14 (- 0 1))) (let ((.cse20 (= ga0@0 .cse22)) (.cse13 (= .cse18 .cse14))) (let ((.cse12 (and .cse20 .cse13))) (let ((.cse11 (=> .cse12 ga0@0))) (let ((.cse10 (=> .cse24 .cse11))) (let ((.cse6 (=> .cse25 .cse10))) (let ((.cse8 (not .cse6))) (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res (= .cse6 .cse5) (res (= .cse10 .cse4) (res (= .cse11 .cse3) (res (= ga0@0 ga0@0) (refl ga0@0) (res (= .cse12 .cse2) (res (= .cse13 .cse1) (res (= .cse14 (- 1)) (let ((.cse15 (* (- 1) 1))) (res (= .cse15 (- 1)) (poly* .cse15 (- 1)) (res (= 0 0) (refl 0) (let ((.cse16 (+ 0 .cse15)) (.cse17 (+ 0 (- 1)))) (res (= .cse16 .cse17) (cong (+ 0 .cse15) (+ 0 (- 1))) (res (= .cse14 .cse16) (-def 0 1) (res (= .cse17 (- 1)) (poly+ .cse17 (- 1)) (trans .cse14 .cse16 .cse17 (- 1))))))))) (res (= .cse18 .cse18) (refl .cse18) (cong (= .cse18 .cse14) (= .cse18 (- 1))))) (let ((.cse19 (= .cse20 .cse23))) (res .cse19 (res .cse20 (res .cse21 (res ga0@0 (res .cse22 (=+1 .cse20) (xor+ (ga0@0 .cse22) (ga0@0) (.cse22))) (res .cse22 (xor+ (ga0@0 .cse22) (.cse22) (ga0@0)) (=+2 .cse20))) (res .cse23 (=+1 .cse19) (not- .cse23))) (res .cse21 (res .cse23 (not+ .cse23) (=+2 .cse19)) (res ga0@0 (res .cse22 (xor+ (ga0@0) (.cse22) (ga0@0 .cse22)) (=-1 .cse20)) (res .cse22 (=-2 .cse20) (xor- (ga0@0) (.cse22) (ga0@0 .cse22)))))) (cong (and .cse20 .cse13) (and .cse23 .cse1))))) (cong (=> .cse12 ga0@0) (=> .cse2 ga0@0)))) (res (= .cse24 .cse24) (refl .cse24) (cong (=> .cse24 .cse11) (=> .cse24 .cse3)))) (res (= .cse25 .cse25) (refl .cse25) (cong (=> .cse25 .cse10) (=> .cse25 .cse4)))) (cong (not .cse6) (not .cse5))) (=-2 .cse9)))) (not- .cse7))) (res .cse8 (assume .cse8) (not- .cse8)))))))))))))))))) (and- 1 .cse2)))))) (res .cse26 .cse27 (=-2 .cse26))) :proves (+ .cse0) :input) (! (let ((.cse29 (not .cse1))) (res .cse1 (let ((.cse28 (not .cse0))) (res .cse28 (res .cse29 (not+ .cse29) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (res .cse26 .cse27 (cong (not .cse1) (not .cse0))) (=-2 .cse30)))) (not- .cse28))) (res .cse29 (assume .cse29) (not- .cse29)))) :proves (- .cse0) :input)))))) :proves () :rup)

