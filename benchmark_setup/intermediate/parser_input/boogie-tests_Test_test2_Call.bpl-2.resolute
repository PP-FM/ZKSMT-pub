unsat
(! (let ((.cse46 (ControlFlow 0 4))) (let ((.cse39 (= .cse46 (- 3))) (.cse4 (= w@0 y))) (let ((.cse0 (and .cse4 (= (ControlFlow 0 5) 4))) (.cse7 (=> .cse39 .cse4))) (let ((.cse1 (=> .cse0 .cse7))) (let-proof ((.cse2 (! (let ((.cse65 (ControlFlow 0 6))) (let ((.cse47 (= .cse65 5))) (let ((.cse18 (=> .cse47 .cse1))) (res .cse18 (! (=>+ 1 .cse18) :proves (+ .cse18 - .cse1) :input) (! (let ((.cse63 (+ x (* (- 1) y)))) (let ((.cse21 (<= .cse63 0)) (.cse58 (ControlFlow 0 2))) (let ((.cse53 (= .cse58 (- 1))) (.cse22 (not .cse21))) (let ((.cse60 (= .cse65 2)) (.cse20 (=> .cse53 .cse22))) (let ((.cse19 (=> .cse60 .cse20))) (let ((.cse27 (and .cse19 .cse18))) (let ((.cse24 (=> .cse22 .cse27))) (let-proof ((.cse23 (not+ .cse22)) (.cse25 (not- .cse22))) (let-proof ((.cse26 (let ((.cse64 (= (ControlFlow 0 0) 6))) (let ((.cse28 (=> .cse64 .cse24))) (res .cse28 (=>+ 1 .cse28) (let ((.cse40 (- 0 3))) (let ((.cse38 (= .cse46 .cse40)) (.cse54 (- 0 1))) (let ((.cse52 (= .cse58 .cse54)) (.cse59 (< y x)) (.cse37 (=> .cse38 .cse4))) (let ((.cse36 (=> .cse0 .cse37)) (.cse49 (=> .cse52 .cse59))) (let ((.cse48 (=> .cse60 .cse49)) (.cse35 (=> .cse47 .cse36))) (let ((.cse34 (and .cse48 .cse35))) (let ((.cse33 (=> .cse59 .cse34))) (let ((.cse29 (=> .cse64 .cse33))) (let ((.cse31 (not .cse29))) (res .cse29 (let ((.cse30 (not .cse28))) (res .cse30 (res .cse31 (not+ .cse31) (let ((.cse32 (= .cse31 .cse30))) (res .cse32 (res (= .cse29 .cse28) (res (= .cse33 .cse24) (let ((.cse50 (= .cse59 .cse22))) (let-proof ((.cse51 (res .cse22 (res .cse59 (=+1 .cse50) (res .cse21 .cse23 (farkas 1 .cse59 1 .cse21))) (res .cse59 (let ((.cse61 (<= x y))) (res .cse61 (total x y) (res .cse21 (let ((.cse62 (< 0 .cse63))) (res .cse62 (total .cse63 0) (farkas 1 .cse61 1 .cse62))) .cse25))) (=+2 .cse50))))) (res (= .cse34 .cse27) (let ((.cse42 (= 0 0))) (let-proof ((.cse43 (refl 0))) (res (= .cse35 .cse18) (res (= .cse36 .cse1) (res (= .cse37 .cse7) (res (= .cse4 .cse4) (refl .cse4) (res (= .cse38 .cse39) (res (= .cse40 (- 3)) (let ((.cse41 (* (- 1) 3))) (res (= .cse41 (- 3)) (poly* .cse41 (- 3)) (res .cse42 .cse43 (let ((.cse44 (+ 0 .cse41)) (.cse45 (+ 0 (- 3)))) (res (= .cse44 .cse45) (cong (+ 0 .cse41) (+ 0 (- 3))) (res (= .cse40 .cse44) (-def 0 3) (res (= .cse45 (- 3)) (poly+ .cse45 (- 3)) (trans .cse40 .cse44 .cse45 (- 3))))))))) (res (= .cse46 .cse46) (refl .cse46) (cong (= .cse46 .cse40) (= .cse46 (- 3))))) (cong (=> .cse38 .cse4) (=> .cse39 .cse4)))) (res (= .cse0 .cse0) (refl .cse0) (cong (=> .cse0 .cse37) (=> .cse0 .cse7)))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse36) (=> .cse47 .cse1)))) (res (= .cse48 .cse19) (res (= .cse49 .cse20) (res .cse50 .cse51 (res (= .cse52 .cse53) (res (= .cse54 (- 1)) (let ((.cse55 (* (- 1) 1))) (res (= .cse55 (- 1)) (poly* .cse55 (- 1)) (res .cse42 .cse43 (let ((.cse56 (+ 0 .cse55)) (.cse57 (+ 0 (- 1)))) (res (= .cse56 .cse57) (cong (+ 0 .cse55) (+ 0 (- 1))) (res (= .cse54 .cse56) (-def 0 1) (res (= .cse57 (- 1)) (poly+ .cse57 (- 1)) (trans .cse54 .cse56 .cse57 (- 1))))))))) (res (= .cse58 .cse58) (refl .cse58) (cong (= .cse58 .cse54) (= .cse58 (- 1))))) (cong (=> .cse52 .cse59) (=> .cse53 .cse22)))) (res (= .cse60 .cse60) (refl .cse60) (cong (=> .cse60 .cse49) (=> .cse60 .cse20)))) (cong (and .cse48 .cse35) (and .cse19 .cse18)))))) (res .cse50 .cse51 (cong (=> .cse59 .cse34) (=> .cse22 .cse27)))))) (res (= .cse64 .cse64) (refl .cse64) (cong (=> .cse64 .cse33) (=> .cse64 .cse24)))) (cong (not .cse29) (not .cse28))) (=-2 .cse32)))) (not- .cse30))) (res .cse31 (assume .cse31) (not- .cse31))))))))))))))))) (res .cse19 (! (res .cse20 (! (res .cse21 (! (res .cse22 .cse23 (=>+ 1 .cse20)) :proves (+ .cse20 + .cse21) :input) (! (res .cse24 (res .cse22 (=>+ 0 .cse24) .cse25) .cse26) :proves (- .cse21) :input)) :proves (+ .cse20) :rup) (! (=>+ 1 .cse19) :proves (+ .cse19 - .cse20) :input)) :proves (+ .cse19) :rup) (! (res .cse27 (and+ .cse27) (res .cse24 (=>+ 1 .cse24) .cse26)) :proves (- .cse19 - .cse18) :input))))))))))) :proves (- .cse18) :rup))))) :proves (- .cse1) :rup))) (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (let ((.cse14 (+ y (* (- 1) w@0)))) (let ((.cse3 (= .cse14 0))) (let ((.cse5 (= .cse4 .cse3))) (let-proof ((.cse6 (res .cse3 (res .cse4 (=+1 .cse5) (let ((.cse11 (= y w@0))) (res .cse11 (symm y w@0) (let ((.cse12 (< .cse14 0))) (res .cse12 (let ((.cse13 (< 0 .cse14))) (res .cse13 (trichotomy .cse14 0) (farkas 1 .cse11 1 .cse13))) (farkas 1 .cse4 1 .cse12)))))) (res .cse4 (let ((.cse15 (= 0 .cse14))) (res .cse15 (symm 0 .cse14) (let ((.cse16 (< w@0 y))) (res .cse16 (let ((.cse17 (< y w@0))) (res .cse17 (trichotomy w@0 y) (farkas 1 .cse15 1 .cse17))) (farkas 1 .cse3 1 .cse16))))) (=+2 .cse5))))) (res .cse3 (! (res .cse4 (and- 0 .cse0) (res .cse5 .cse6 (=-2 .cse5))) :proves (- .cse0 + .cse3) :input) (! (res .cse7 (! (res .cse4 (let ((.cse8 (not .cse3))) (res .cse8 (let ((.cse9 (not .cse4))) (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res .cse5 .cse6 (cong (not .cse4) (not .cse3))) (=-2 .cse10))))) (not- .cse8))) (=>+ 1 .cse7)) :proves (+ .cse7 - .cse3) :input) (! (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse7) :input) .cse2) :proves (- .cse7) :rup)) :proves (- .cse3) :rup)))))))))))) :proves () :rup)

