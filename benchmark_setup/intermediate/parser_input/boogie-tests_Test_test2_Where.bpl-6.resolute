unsat
(! (let ((.cse89 (+ call1formal@xProc@0 (* (- 1) call2formal@yProc@0))) (.cse57 (ControlFlow 0 2))) (let ((.cse102 (* (- 1) call1formal@xProc@0)) (.cse48 (= .cse57 (- 1))) (.cse3 (<= .cse89 0))) (let ((.cse2 (=> .cse48 .cse3)) (.cse64 (= .cse57 (- 3))) (.cse8 (<= .cse102 0))) (let ((.cse6 (=> .cse64 .cse8)) (.cse1 (=> .cse8 .cse2)) (.cse85 (+ call1formal@xProc (* (- 1) call2formal@yProc)))) (let ((.cse82 (<= .cse85 0)) (.cse21 (and .cse6 .cse1)) (.cse73 (= .cse57 (- 4))) (.cse25 (= call0formal@wProc@0 call1formal@xProc@0))) (let ((.cse24 (=> .cse73 .cse25)) (.cse0 (=> .cse25 .cse21)) (.cse26 (and .cse82 .cse25)) (.cse4 (and .cse8 .cse3))) (let ((.cse22 (and .cse26 .cse4)) (.cse27 (and .cse24 .cse0))) (let ((.cse17 (< 0 .cse102)) (.cse28 (=> .cse22 .cse27))) (let-proof ((.cse18 (total .cse102 0))) (let-proof ((.cse29 (let ((.cse97 (* (- 1) call1formal@xProc))) (let ((.cse99 (= call0formal@wProc call1formal@xProc)) (.cse94 (<= .cse97 0))) (let ((.cse92 (and .cse99 .cse94))) (let ((.cse30 (=> .cse92 .cse28))) (res .cse30 (=>+ 1 .cse30) (let ((.cse100 (= (ControlFlow 0 5) 2))) (let ((.cse31 (=> .cse100 .cse30))) (res .cse31 (=>+ 1 .cse31) (let ((.cse101 (= (ControlFlow 0 0) 5))) (let ((.cse32 (=> .cse101 .cse31))) (res .cse32 (=>+ 1 .cse32) (let ((.cse49 (- 0 1))) (let ((.cse65 (- 0 3)) (.cse47 (= .cse57 .cse49)) (.cse58 (<= call1formal@xProc@0 call2formal@yProc@0))) (let ((.cse44 (=> .cse47 .cse58)) (.cse63 (= .cse57 .cse65)) (.cse61 (<= 0 call1formal@xProc@0))) (let ((.cse74 (- 0 4)) (.cse62 (=> .cse63 .cse61)) (.cse43 (=> .cse61 .cse44))) (let ((.cse83 (<= call1formal@xProc call2formal@yProc)) (.cse42 (and .cse62 .cse43)) (.cse72 (= .cse57 .cse74))) (let ((.cse71 (=> .cse72 .cse25)) (.cse41 (=> .cse25 .cse42)) (.cse80 (and .cse83 .cse25)) (.cse79 (and .cse61 .cse58))) (let ((.cse78 (and .cse80 .cse79)) (.cse40 (and .cse71 .cse41)) (.cse95 (<= 0 call1formal@xProc))) (let ((.cse91 (and .cse99 .cse95)) (.cse39 (=> .cse78 .cse40))) (let ((.cse38 (=> .cse91 .cse39))) (let ((.cse37 (=> .cse100 .cse38))) (let ((.cse33 (=> .cse101 .cse37))) (let ((.cse35 (not .cse33))) (res .cse33 (let ((.cse34 (not .cse32))) (res .cse34 (res .cse35 (not+ .cse35) (let ((.cse36 (= .cse35 .cse34))) (res .cse36 (res (= .cse33 .cse32) (res (= .cse37 .cse31) (res (= .cse38 .cse30) (res (= .cse39 .cse28) (let ((.cse59 (= .cse61 .cse8)) (.cse45 (= .cse58 .cse3))) (let ((.cse69 (= .cse25 .cse25))) (let-proof ((.cse46 (res .cse3 (res .cse58 (=+1 .cse45) (let ((.cse88 (< 0 .cse89))) (res .cse88 (total .cse89 0) (farkas 1 .cse58 1 .cse88)))) (res .cse58 (let ((.cse90 (< call2formal@yProc@0 call1formal@xProc@0))) (res .cse90 (total call1formal@xProc@0 call2formal@yProc@0) (farkas 1 .cse90 1 .cse3))) (=+2 .cse45)))) (.cse60 (res .cse8 (res .cse61 (=+1 .cse59) (res .cse17 .cse18 (farkas 1 .cse61 1 .cse17))) (res .cse61 (let ((.cse87 (< call1formal@xProc@0 0))) (res .cse87 (total 0 call1formal@xProc@0) (farkas 1 .cse87 1 .cse8))) (=+2 .cse59)))) (.cse70 (refl .cse25))) (res (= .cse40 .cse27) (let ((.cse51 (= 0 0)) (.cse55 (= .cse57 .cse57))) (let-proof ((.cse52 (refl 0)) (.cse56 (refl .cse57))) (res (= .cse41 .cse0) (res (= .cse42 .cse21) (res (= .cse43 .cse1) (res (= .cse44 .cse2) (res .cse45 .cse46 (res (= .cse47 .cse48) (res (= .cse49 (- 1)) (let ((.cse50 (* (- 1) 1))) (res (= .cse50 (- 1)) (poly* .cse50 (- 1)) (res .cse51 .cse52 (let ((.cse53 (+ 0 .cse50)) (.cse54 (+ 0 (- 1)))) (res (= .cse53 .cse54) (cong (+ 0 .cse50) (+ 0 (- 1))) (res (= .cse49 .cse53) (-def 0 1) (res (= .cse54 (- 1)) (poly+ .cse54 (- 1)) (trans .cse49 .cse53 .cse54 (- 1))))))))) (res .cse55 .cse56 (cong (= .cse57 .cse49) (= .cse57 (- 1))))) (cong (=> .cse47 .cse58) (=> .cse48 .cse3)))) (res .cse59 .cse60 (cong (=> .cse61 .cse44) (=> .cse8 .cse2)))) (res (= .cse62 .cse6) (res .cse59 .cse60 (res (= .cse63 .cse64) (res (= .cse65 (- 3)) (let ((.cse66 (* (- 1) 3))) (res (= .cse66 (- 3)) (poly* .cse66 (- 3)) (res .cse51 .cse52 (let ((.cse67 (+ 0 .cse66)) (.cse68 (+ 0 (- 3)))) (res (= .cse67 .cse68) (cong (+ 0 .cse66) (+ 0 (- 3))) (res (= .cse65 .cse67) (-def 0 3) (res (= .cse68 (- 3)) (poly+ .cse68 (- 3)) (trans .cse65 .cse67 .cse68 (- 3))))))))) (res .cse55 .cse56 (cong (= .cse57 .cse65) (= .cse57 (- 3))))) (cong (=> .cse63 .cse61) (=> .cse64 .cse8)))) (cong (and .cse62 .cse43) (and .cse6 .cse1)))) (res .cse69 .cse70 (cong (=> .cse25 .cse42) (=> .cse25 .cse21)))) (res (= .cse71 .cse24) (res .cse69 .cse70 (res (= .cse72 .cse73) (res (= .cse74 (- 4)) (let ((.cse75 (* (- 1) 4))) (res (= .cse75 (- 4)) (poly* .cse75 (- 4)) (res .cse51 .cse52 (let ((.cse76 (+ 0 .cse75)) (.cse77 (+ 0 (- 4)))) (res (= .cse76 .cse77) (cong (+ 0 .cse75) (+ 0 (- 4))) (res (= .cse74 .cse76) (-def 0 4) (res (= .cse77 (- 4)) (poly+ .cse77 (- 4)) (trans .cse74 .cse76 .cse77 (- 4))))))))) (res .cse55 .cse56 (cong (= .cse57 .cse74) (= .cse57 (- 4))))) (cong (=> .cse72 .cse25) (=> .cse73 .cse25)))) (cong (and .cse71 .cse41) (and .cse24 .cse0)))))) (res (= .cse78 .cse22) (res (= .cse79 .cse4) (res .cse45 .cse46 (res .cse59 .cse60 (cong (and .cse61 .cse58) (and .cse8 .cse3)))) (res (= .cse80 .cse26) (res .cse69 .cse70 (let ((.cse81 (= .cse83 .cse82))) (res .cse81 (res .cse82 (res .cse83 (=+1 .cse81) (let ((.cse84 (< 0 .cse85))) (res .cse84 (total .cse85 0) (farkas 1 .cse83 1 .cse84)))) (res .cse83 (let ((.cse86 (< call2formal@yProc call1formal@xProc))) (res .cse86 (total call1formal@xProc call2formal@yProc) (farkas 1 .cse86 1 .cse82))) (=+2 .cse81))) (cong (and .cse83 .cse25) (and .cse82 .cse25))))) (cong (and .cse80 .cse79) (and .cse26 .cse4)))) (cong (=> .cse78 .cse40) (=> .cse22 .cse27))))))) (res (= .cse91 .cse92) (let ((.cse93 (= .cse95 .cse94))) (res .cse93 (res .cse94 (res .cse95 (=+1 .cse93) (let ((.cse96 (< 0 .cse97))) (res .cse96 (total .cse97 0) (farkas 1 .cse95 1 .cse96)))) (res .cse95 (let ((.cse98 (< call1formal@xProc 0))) (res .cse98 (total 0 call1formal@xProc) (farkas 1 .cse98 1 .cse94))) (=+2 .cse93))) (res (= .cse99 .cse99) (refl .cse99) (cong (and .cse99 .cse95) (and .cse99 .cse94))))) (cong (=> .cse91 .cse39) (=> .cse92 .cse28)))) (res (= .cse100 .cse100) (refl .cse100) (cong (=> .cse100 .cse38) (=> .cse100 .cse30)))) (res (= .cse101 .cse101) (refl .cse101) (cong (=> .cse101 .cse37) (=> .cse101 .cse31)))) (cong (not .cse33) (not .cse32))) (=-2 .cse36)))) (not- .cse34))) (res .cse35 (assume .cse35) (not- .cse35)))))))))))))))))))))))))))) (let-proof ((.cse23 (res .cse28 (=>+ 0 .cse28) .cse29))) (res .cse0 (! (let-proof ((.cse5 (res .cse22 .cse23 (and- 1 .cse22)))) (res .cse1 (! (res .cse2 (! (res .cse3 (! (res .cse4 .cse5 (and- 1 .cse4)) :proves (+ .cse3) :input) (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse3) :input)) :proves (+ .cse2) :rup) (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (res .cse6 (! (let ((.cse20 (+ call1formal@xProc@0 1))) (let ((.cse7 (<= .cse20 0))) (let ((.cse9 (not .cse7))) (let ((.cse14 (= .cse8 .cse9))) (let-proof ((.cse10 (not+ .cse9)) (.cse16 (not- .cse9))) (let-proof ((.cse15 (res .cse9 (res .cse8 (=+1 .cse14) (res .cse7 .cse10 (farkas 1 .cse8 1 .cse7))) (res .cse8 (res .cse17 .cse18 (res .cse7 (let ((.cse19 (<= 1 .cse20))) (res .cse19 (total-int .cse20 0) (farkas 1 .cse17 1 .cse19))) .cse16)) (=+2 .cse14))))) (res .cse7 (! (res .cse8 (res .cse9 .cse10 (let ((.cse11 (not .cse9))) (res .cse11 (let ((.cse12 (not .cse8))) (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res .cse14 .cse15 (cong (not .cse8) (not .cse9))) (=-2 .cse13))))) (not- .cse11)))) (=>+ 1 .cse6)) :proves (+ .cse6 + .cse7) :input) (! (res .cse8 (res .cse4 .cse5 (and- 0 .cse4)) (res .cse9 (res .cse14 .cse15 (=-2 .cse14)) .cse16)) :proves (- .cse7) :input)))))))) :proves (+ .cse6) :rup) (! (res .cse21 (and+ .cse21) (=>+ 1 .cse0)) :proves (+ .cse0 - .cse6 - .cse1) :input)))) :proves (+ .cse0) :rup) (res .cse24 (! (res .cse25 (! (res .cse26 (res .cse22 .cse23 (and- 0 .cse22)) (and- 1 .cse26)) :proves (+ .cse25) :input) (! (=>+ 1 .cse24) :proves (+ .cse24 - .cse25) :input)) :proves (+ .cse24) :rup) (! (res .cse27 (and+ .cse27) (res .cse28 (=>+ 1 .cse28) .cse29)) :proves (- .cse24 - .cse0) :input)))))))))))))) :proves () :rup)

