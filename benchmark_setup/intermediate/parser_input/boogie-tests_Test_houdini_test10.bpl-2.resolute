unsat
(! (let ((.cse13 (ControlFlow 0 2))) (let ((.cse29 (= .cse13 (- 1))) (.cse0 (= (- 1) .cse13))) (let ((.cse50 (= .cse29 .cse0))) (let-proof ((.cse51 (res .cse0 (res .cse29 (=+1 .cse50) (symm (- 1) .cse13)) (res .cse29 (symm .cse13 (- 1)) (=+2 .cse50))))) (res .cse0 (! (let ((.cse38 (=> b4 (= sdv_7@2 sdv_7@1)))) (let ((.cse1 (and .cse38 .cse29))) (res .cse1 (! (let ((.cse2 (and .cse1 b2))) (res .cse2 (! (let ((.cse25 (= sdv_7@2 sdv_7))) (let ((.cse3 (=> .cse2 .cse25))) (res .cse3 (! (=>+ 0 .cse3) :proves (+ .cse3 + .cse2) :input) (! (let ((.cse41 (=> b3 (= sdv_7@1 0)))) (let ((.cse4 (=> .cse41 .cse3))) (res .cse4 (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse3) :input) (! (let ((.cse7 (= .cse13 (- 3)))) (let ((.cse5 (=> .cse7 .cse41))) (res .cse5 (! (let ((.cse6 (= (- 3) .cse13))) (let ((.cse8 (= .cse7 .cse6))) (let-proof ((.cse9 (res .cse6 (res .cse7 (=+1 .cse8) (symm (- 3) .cse13)) (res .cse7 (symm .cse13 (- 3)) (=+2 .cse8))))) (res .cse6 (! (res .cse7 (=>+ 0 .cse5) (res .cse8 .cse9 (=-2 .cse8))) :proves (+ .cse5 + .cse6) :input) (! (let ((.cse11 (not .cse7))) (res .cse7 (let ((.cse10 (not .cse6))) (res .cse10 (res .cse11 (not+ .cse11) (let ((.cse12 (= .cse11 .cse10))) (res .cse12 (res .cse8 .cse9 (cong (not .cse7) (not .cse6))) (=-2 .cse12)))) (not- .cse10))) (res .cse11 (assume .cse11) (not- .cse11)))) :proves (- .cse6) :input))))) :proves (+ .cse5) :rup) (! (let ((.cse14 (and .cse5 .cse4))) (res .cse14 (and+ .cse14) (let ((.cse48 (and (=> b1 (= sdv_7 0)) (= (ControlFlow 0 4) 2)))) (let ((.cse15 (=> .cse48 .cse14))) (res .cse15 (=>+ 1 .cse15) (let ((.cse49 (= (ControlFlow 0 0) 4))) (let ((.cse16 (=> .cse49 .cse15))) (res .cse16 (=>+ 1 .cse16) (let ((.cse30 (- 0 1))) (let ((.cse28 (= .cse13 .cse30))) (let ((.cse27 (and .cse38 .cse28))) (let ((.cse44 (- 0 3)) (.cse26 (and .cse27 b2))) (let ((.cse24 (=> .cse26 .cse25)) (.cse43 (= .cse13 .cse44))) (let ((.cse42 (=> .cse43 .cse41)) (.cse23 (=> .cse41 .cse24))) (let ((.cse22 (and .cse42 .cse23))) (let ((.cse21 (=> .cse48 .cse22))) (let ((.cse17 (=> .cse49 .cse21))) (let ((.cse19 (not .cse17))) (res .cse17 (let ((.cse18 (not .cse16))) (res .cse18 (res .cse19 (not+ .cse19) (let ((.cse20 (= .cse19 .cse18))) (res .cse20 (res (= .cse17 .cse16) (res (= .cse21 .cse15) (res (= .cse22 .cse14) (let ((.cse39 (= .cse41 .cse41)) (.cse32 (= 0 0)) (.cse36 (= .cse13 .cse13))) (let-proof ((.cse40 (refl .cse41)) (.cse33 (refl 0)) (.cse37 (refl .cse13))) (res (= .cse23 .cse4) (res (= .cse24 .cse3) (res (= .cse25 .cse25) (refl .cse25) (res (= .cse26 .cse2) (res (= b2 b2) (refl b2) (res (= .cse27 .cse1) (res (= .cse28 .cse29) (res (= .cse30 (- 1)) (let ((.cse31 (* (- 1) 1))) (res (= .cse31 (- 1)) (poly* .cse31 (- 1)) (res .cse32 .cse33 (let ((.cse34 (+ 0 .cse31)) (.cse35 (+ 0 (- 1)))) (res (= .cse34 .cse35) (cong (+ 0 .cse31) (+ 0 (- 1))) (res (= .cse30 .cse34) (-def 0 1) (res (= .cse35 (- 1)) (poly+ .cse35 (- 1)) (trans .cse30 .cse34 .cse35 (- 1))))))))) (res .cse36 .cse37 (cong (= .cse13 .cse30) (= .cse13 (- 1))))) (res (= .cse38 .cse38) (refl .cse38) (cong (and .cse38 .cse28) (and .cse38 .cse29)))) (cong (and .cse27 b2) (and .cse1 b2)))) (cong (=> .cse26 .cse25) (=> .cse2 .cse25)))) (res .cse39 .cse40 (cong (=> .cse41 .cse24) (=> .cse41 .cse3)))) (res (= .cse42 .cse5) (res .cse39 .cse40 (res (= .cse43 .cse7) (res (= .cse44 (- 3)) (let ((.cse45 (* (- 1) 3))) (res (= .cse45 (- 3)) (poly* .cse45 (- 3)) (res .cse32 .cse33 (let ((.cse46 (+ 0 .cse45)) (.cse47 (+ 0 (- 3)))) (res (= .cse46 .cse47) (cong (+ 0 .cse45) (+ 0 (- 3))) (res (= .cse44 .cse46) (-def 0 3) (res (= .cse47 (- 3)) (poly+ .cse47 (- 3)) (trans .cse44 .cse46 .cse47 (- 3))))))))) (res .cse36 .cse37 (cong (= .cse13 .cse44) (= .cse13 (- 3))))) (cong (=> .cse43 .cse41) (=> .cse7 .cse41)))) (cong (and .cse42 .cse23) (and .cse5 .cse4)))))) (res (= .cse48 .cse48) (refl .cse48) (cong (=> .cse48 .cse22) (=> .cse48 .cse14)))) (res (= .cse49 .cse49) (refl .cse49) (cong (=> .cse49 .cse21) (=> .cse49 .cse15)))) (cong (not .cse17) (not .cse16))) (=-2 .cse20)))) (not- .cse18))) (res .cse19 (assume .cse19) (not- .cse19))))))))))))))))))))) :proves (- .cse5 - .cse4) :input)))) :proves (- .cse4) :rup)))) :proves (- .cse3) :rup)))) :proves (+ .cse2) :rup) (! (and- 0 .cse2) :proves (- .cse2 + .cse1) :input))) :proves (+ .cse1) :rup) (! (res .cse29 (and- 1 .cse1) (res .cse50 .cse51 (=-2 .cse50))) :proves (- .cse1 + .cse0) :input)))) :proves (+ .cse0) :rup) (! (let ((.cse53 (not .cse29))) (res .cse29 (let ((.cse52 (not .cse0))) (res .cse52 (res .cse53 (not+ .cse53) (let ((.cse54 (= .cse53 .cse52))) (res .cse54 (res .cse50 .cse51 (cong (not .cse29) (not .cse0))) (=-2 .cse54)))) (not- .cse52))) (res .cse53 (assume .cse53) (not- .cse53)))) :proves (- .cse0) :input)))))) :proves () :rup)

