unsat
(! (let ((.cse37 (ControlFlow 0 2))) (let ((.cse30 (= .cse37 (- 1)))) (let ((.cse28 (and b .cse30)) (.cse12 (ControlFlow 0 3))) (let ((.cse38 (= .cse12 2)) (.cse0 (=> .cse28 b))) (let ((.cse3 (=> .cse38 .cse0))) (let ((.cse1 (=> b .cse3))) (let-proof ((.cse2 (! (let ((.cse6 (= .cse12 (- 4)))) (let ((.cse4 (=> .cse6 b))) (res .cse4 (! (let ((.cse5 (= (- 4) .cse12))) (let ((.cse7 (= .cse6 .cse5))) (let-proof ((.cse8 (res .cse5 (res .cse6 (=+1 .cse7) (symm (- 4) .cse12)) (res .cse6 (symm .cse12 (- 4)) (=+2 .cse7))))) (res .cse5 (! (res .cse6 (=>+ 0 .cse4) (res .cse7 .cse8 (=-2 .cse7))) :proves (+ .cse4 + .cse5) :input) (! (let ((.cse10 (not .cse6))) (res .cse6 (let ((.cse9 (not .cse5))) (res .cse9 (res .cse10 (not+ .cse10) (let ((.cse11 (= .cse10 .cse9))) (res .cse11 (res .cse7 .cse8 (cong (not .cse6) (not .cse5))) (=-2 .cse11)))) (not- .cse9))) (res .cse10 (assume .cse10) (not- .cse10)))) :proves (- .cse5) :input))))) :proves (+ .cse4) :rup) (! (let ((.cse13 (and .cse4 .cse1))) (res .cse13 (and+ .cse13) (let ((.cse45 (= (ControlFlow 0 5) 3))) (let ((.cse14 (=> .cse45 .cse13))) (res .cse14 (=>+ 1 .cse14) (let ((.cse46 (= (ControlFlow 0 0) 5))) (let ((.cse15 (=> .cse46 .cse14))) (res .cse15 (=>+ 1 .cse15) (let ((.cse31 (- 0 1))) (let ((.cse29 (= .cse37 .cse31))) (let ((.cse27 (and b .cse29))) (let ((.cse41 (- 0 4)) (.cse24 (=> .cse27 b))) (let ((.cse23 (=> .cse38 .cse24)) (.cse40 (= .cse12 .cse41))) (let ((.cse39 (=> .cse40 b)) (.cse22 (=> b .cse23))) (let ((.cse21 (and .cse39 .cse22))) (let ((.cse20 (=> .cse45 .cse21))) (let ((.cse16 (=> .cse46 .cse20))) (let ((.cse18 (not .cse16))) (res .cse16 (let ((.cse17 (not .cse15))) (res .cse17 (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (res (= .cse16 .cse15) (res (= .cse20 .cse14) (res (= .cse21 .cse13) (let ((.cse25 (= b b)) (.cse33 (= 0 0))) (let-proof ((.cse26 (refl b)) (.cse34 (refl 0))) (res (= .cse22 .cse1) (res (= .cse23 .cse3) (res (= .cse24 .cse0) (res .cse25 .cse26 (res (= .cse27 .cse28) (res (= .cse29 .cse30) (res (= .cse31 (- 1)) (let ((.cse32 (* (- 1) 1))) (res (= .cse32 (- 1)) (poly* .cse32 (- 1)) (res .cse33 .cse34 (let ((.cse35 (+ 0 .cse32)) (.cse36 (+ 0 (- 1)))) (res (= .cse35 .cse36) (cong (+ 0 .cse32) (+ 0 (- 1))) (res (= .cse31 .cse35) (-def 0 1) (res (= .cse36 (- 1)) (poly+ .cse36 (- 1)) (trans .cse31 .cse35 .cse36 (- 1))))))))) (res (= .cse37 .cse37) (refl .cse37) (cong (= .cse37 .cse31) (= .cse37 (- 1))))) (res .cse25 .cse26 (cong (and b .cse29) (and b .cse30)))) (cong (=> .cse27 b) (=> .cse28 b)))) (res (= .cse38 .cse38) (refl .cse38) (cong (=> .cse38 .cse24) (=> .cse38 .cse0)))) (res .cse25 .cse26 (cong (=> b .cse23) (=> b .cse3)))) (res (= .cse39 .cse4) (res .cse25 .cse26 (res (= .cse40 .cse6) (res (= .cse41 (- 4)) (let ((.cse42 (* (- 1) 4))) (res (= .cse42 (- 4)) (poly* .cse42 (- 4)) (res .cse33 .cse34 (let ((.cse43 (+ 0 .cse42)) (.cse44 (+ 0 (- 4)))) (res (= .cse43 .cse44) (cong (+ 0 .cse42) (+ 0 (- 4))) (res (= .cse41 .cse43) (-def 0 4) (res (= .cse44 (- 4)) (poly+ .cse44 (- 4)) (trans .cse41 .cse43 .cse44 (- 4))))))))) (res (= .cse12 .cse12) (refl .cse12) (cong (= .cse12 .cse41) (= .cse12 (- 4))))) (cong (=> .cse40 b) (=> .cse6 b)))) (cong (and .cse39 .cse22) (and .cse4 .cse1)))))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse21) (=> .cse45 .cse13)))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse20) (=> .cse46 .cse14)))) (cong (not .cse16) (not .cse15))) (=-2 .cse19)))) (not- .cse17))) (res .cse18 (assume .cse18) (not- .cse18))))))))))))))))))))) :proves (- .cse4 - .cse1) :input)))) :proves (- .cse1) :rup))) (res .cse0 (res b (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + b) :input) .cse2) :proves (+ b) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - b) :input)) (! (res .cse3 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse0) :input) (! (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse3) :input) .cse2) :proves (- .cse3) :rup)) :proves (- .cse0) :rup))))))))) :proves () :rup)

