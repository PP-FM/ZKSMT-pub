unsat
(! (let ((.cse36 (ControlFlow 0 2))) (let ((.cse3 (=> a0@2 a0@1)) (.cse27 (= .cse36 (- 1)))) (let ((.cse0 (and .cse3 .cse27))) (let ((.cse1 (and .cse0 a0@2))) (let ((.cse4 (=> .cse1 a0@1))) (let-proof ((.cse5 (! (let ((.cse8 (=> a0@1 a0@0))) (let ((.cse6 (=> .cse8 .cse4))) (res .cse6 (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse4) :input) (! (let ((.cse49 (xor a0@0 A)) (.cse41 (= .cse36 (- 3)))) (let ((.cse7 (=> .cse41 .cse8)) (.cse50 (not .cse49))) (let ((.cse9 (and .cse50 .cse8)) (.cse12 (and .cse7 .cse6))) (let ((.cse10 (=> .cse9 .cse12))) (let-proof ((.cse11 (let ((.cse51 (= (ControlFlow 0 4) 2))) (let ((.cse13 (=> .cse51 .cse10))) (res .cse13 (=>+ 1 .cse13) (let ((.cse52 (= (ControlFlow 0 0) 4))) (let ((.cse14 (=> .cse52 .cse13))) (res .cse14 (=>+ 1 .cse14) (let ((.cse28 (- 0 1))) (let ((.cse26 (= .cse36 .cse28))) (let ((.cse25 (and .cse3 .cse26))) (let ((.cse42 (- 0 3)) (.cse24 (and .cse25 a0@2))) (let ((.cse23 (=> .cse24 a0@1)) (.cse40 (= .cse36 .cse42))) (let ((.cse39 (=> .cse40 .cse8)) (.cse22 (=> .cse8 .cse23)) (.cse48 (= a0@0 A))) (let ((.cse46 (and .cse48 .cse8)) (.cse21 (and .cse39 .cse22))) (let ((.cse20 (=> .cse46 .cse21))) (let ((.cse19 (=> .cse51 .cse20))) (let ((.cse15 (=> .cse52 .cse19))) (let ((.cse17 (not .cse15))) (res .cse15 (let ((.cse16 (not .cse14))) (res .cse16 (res .cse17 (not+ .cse17) (let ((.cse18 (= .cse17 .cse16))) (res .cse18 (res (= .cse15 .cse14) (res (= .cse19 .cse13) (res (= .cse20 .cse10) (let ((.cse37 (= .cse8 .cse8))) (let-proof ((.cse38 (refl .cse8))) (res (= .cse21 .cse12) (let ((.cse30 (= 0 0)) (.cse34 (= .cse36 .cse36))) (let-proof ((.cse31 (refl 0)) (.cse35 (refl .cse36))) (res (= .cse22 .cse6) (res (= .cse23 .cse4) (res (= a0@1 a0@1) (refl a0@1) (res (= .cse24 .cse1) (res (= a0@2 a0@2) (refl a0@2) (res (= .cse25 .cse0) (res (= .cse26 .cse27) (res (= .cse28 (- 1)) (let ((.cse29 (* (- 1) 1))) (res (= .cse29 (- 1)) (poly* .cse29 (- 1)) (res .cse30 .cse31 (let ((.cse32 (+ 0 .cse29)) (.cse33 (+ 0 (- 1)))) (res (= .cse32 .cse33) (cong (+ 0 .cse29) (+ 0 (- 1))) (res (= .cse28 .cse32) (-def 0 1) (res (= .cse33 (- 1)) (poly+ .cse33 (- 1)) (trans .cse28 .cse32 .cse33 (- 1))))))))) (res .cse34 .cse35 (cong (= .cse36 .cse28) (= .cse36 (- 1))))) (res (= .cse3 .cse3) (refl .cse3) (cong (and .cse3 .cse26) (and .cse3 .cse27)))) (cong (and .cse25 a0@2) (and .cse0 a0@2)))) (cong (=> .cse24 a0@1) (=> .cse1 a0@1)))) (res .cse37 .cse38 (cong (=> .cse8 .cse23) (=> .cse8 .cse4)))) (res (= .cse39 .cse7) (res .cse37 .cse38 (res (= .cse40 .cse41) (res (= .cse42 (- 3)) (let ((.cse43 (* (- 1) 3))) (res (= .cse43 (- 3)) (poly* .cse43 (- 3)) (res .cse30 .cse31 (let ((.cse44 (+ 0 .cse43)) (.cse45 (+ 0 (- 3)))) (res (= .cse44 .cse45) (cong (+ 0 .cse43) (+ 0 (- 3))) (res (= .cse42 .cse44) (-def 0 3) (res (= .cse45 (- 3)) (poly+ .cse45 (- 3)) (trans .cse42 .cse44 .cse45 (- 3))))))))) (res .cse34 .cse35 (cong (= .cse36 .cse42) (= .cse36 (- 3))))) (cong (=> .cse40 .cse8) (=> .cse41 .cse8)))) (cong (and .cse39 .cse22) (and .cse7 .cse6)))))) (res (= .cse46 .cse9) (res .cse37 .cse38 (let ((.cse47 (= .cse48 .cse50))) (res .cse47 (res .cse48 (res .cse49 (res a0@0 (res A (=+1 .cse48) (xor+ (a0@0 A) (a0@0) (A))) (res A (xor+ (a0@0 A) (A) (a0@0)) (=+2 .cse48))) (res .cse50 (=+1 .cse47) (not- .cse50))) (res .cse49 (res .cse50 (not+ .cse50) (=+2 .cse47)) (res a0@0 (res A (xor+ (a0@0) (A) (a0@0 A)) (=-1 .cse48)) (res A (=-2 .cse48) (xor- (a0@0) (A) (a0@0 A)))))) (cong (and .cse48 .cse8) (and .cse50 .cse8))))) (cong (=> .cse46 .cse21) (=> .cse9 .cse12)))))) (res (= .cse51 .cse51) (refl .cse51) (cong (=> .cse51 .cse20) (=> .cse51 .cse10)))) (res (= .cse52 .cse52) (refl .cse52) (cong (=> .cse52 .cse19) (=> .cse52 .cse13)))) (cong (not .cse15) (not .cse14))) (=-2 .cse18)))) (not- .cse16))) (res .cse17 (assume .cse17) (not- .cse17)))))))))))))))))))))) (res .cse7 (! (res .cse8 (! (res .cse9 (res .cse10 (=>+ 0 .cse10) .cse11) (and- 1 .cse9)) :proves (+ .cse8) :input) (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse8) :input)) :proves (+ .cse7) :rup) (! (res .cse12 (and+ .cse12) (res .cse10 (=>+ 1 .cse10) .cse11)) :proves (- .cse7 - .cse6) :input))))))) :proves (- .cse6) :rup)))) :proves (- .cse4) :rup))) (res a0@1 (let-proof ((.cse2 (! (res .cse4 (! (=>+ 0 .cse4) :proves (+ .cse4 + .cse1) :input) .cse5) :proves (+ .cse1) :rup))) (res .cse0 (! (res .cse1 .cse2 (! (and- 0 .cse1) :proves (- .cse1 + .cse0) :input)) :proves (+ .cse0) :rup) (res a0@2 (! (res .cse1 .cse2 (! (and- 1 .cse1) :proves (- .cse1 + a0@2) :input)) :proves (+ a0@2) :rup) (! (res .cse3 (and- 0 .cse0) (=>- .cse3)) :proves (- .cse0 - a0@2 + a0@1) :input)))) (! (res .cse4 (! (=>+ 1 .cse4) :proves (+ .cse4 - a0@1) :input) .cse5) :proves (- a0@1) :rup)))))))) :proves () :rup)

