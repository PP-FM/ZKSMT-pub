unsat
(! (let ((.cse51 (ControlFlow 0 2))) (let ((.cse2 (= .cse51 (- 5))) (.cse0 (= (- 5) .cse51))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 5) .cse51)) (res .cse2 (symm .cse51 (- 5)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse42 (= .cse51 (- 1)))) (let ((.cse8 (=> .cse42 true)) (.cse57 (= .cse51 (- 3)))) (let ((.cse10 (=> .cse57 true)) (.cse7 (=> true .cse8))) (let ((.cse11 (and .cse10 .cse7)) (.cse67 (= .cse51 (- 4)))) (let ((.cse12 (=> .cse67 true)) (.cse6 (=> true .cse11))) (let ((.cse13 (and .cse12 .cse6))) (let ((.cse5 (=> false .cse13))) (let-proof ((.cse9 true+)) (res .cse5 (! (res .cse6 (! (res .cse7 (! (res .cse8 (! (res true .cse9 (=>+ 1 .cse8)) :proves (+ .cse8) :input) (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse8) :input)) :proves (+ .cse7) :rup) (res .cse10 (! (res true .cse9 (=>+ 1 .cse10)) :proves (+ .cse10) :input) (! (res .cse11 (and+ .cse11) (=>+ 1 .cse6)) :proves (+ .cse6 - .cse10 - .cse7) :input))) :proves (+ .cse6) :rup) (res .cse12 (! (res true .cse9 (=>+ 1 .cse12)) :proves (+ .cse12) :input) (! (res .cse13 (and+ .cse13) (=>+ 1 .cse5)) :proves (+ .cse5 - .cse12 - .cse6) :input))) :proves (+ .cse5) :rup) (let ((.cse15 (and .cse1 .cse5))) (let ((.cse14 (=> true .cse15))) (res .cse14 (! (res .cse15 (and+ .cse15) (=>+ 1 .cse14)) :proves (+ .cse14 - .cse1 - .cse5) :input) (! (let ((.cse90 (= .cse51 (- 6)))) (let ((.cse16 (=> .cse90 true))) (res .cse16 (! (res true .cse9 (=>+ 1 .cse16)) :proves (+ .cse16) :input) (let ((.cse18 (and .cse16 .cse14))) (let ((.cse17 (=> true .cse18))) (res .cse17 (! (res .cse18 (and+ .cse18) (=>+ 1 .cse17)) :proves (+ .cse17 - .cse14 - .cse16) :input) (! (let ((.cse99 (= .cse51 (- 7)))) (let ((.cse19 (=> .cse99 true))) (res .cse19 (! (res true .cse9 (=>+ 1 .cse19)) :proves (+ .cse19) :input) (! (let ((.cse20 (and .cse19 .cse17))) (res .cse20 (and+ .cse20) (let ((.cse104 (= (ControlFlow 0 8) 2))) (let ((.cse21 (=> .cse104 .cse20))) (res .cse21 (=>+ 1 .cse21) (let ((.cse105 (= (ControlFlow 0 0) 8))) (let ((.cse22 (=> .cse105 .cse21))) (res .cse22 (=>+ 1 .cse22) (let ((.cse43 (- 0 1))) (let ((.cse58 (- 0 3)) (.cse41 (= .cse51 .cse43)) (.cse40 (= 5 5))) (let ((.cse38 (=> .cse41 .cse40)) (.cse56 (= .cse51 .cse58)) (.cse54 (= 4 4))) (let ((.cse68 (- 0 4)) (.cse55 (=> .cse56 .cse54)) (.cse37 (=> .cse54 .cse38))) (let ((.cse36 (and .cse55 .cse37)) (.cse66 (= .cse51 .cse68)) (.cse64 (= 3 3))) (let ((.cse84 (= 2 2)) (.cse77 (- 0 5)) (.cse65 (=> .cse66 .cse64)) (.cse35 (=> .cse64 .cse36))) (let ((.cse34 (and .cse65 .cse35)) (.cse76 (= .cse51 .cse77)) (.cse74 (not .cse84))) (let ((.cse91 (- 0 6)) (.cse75 (=> .cse76 .cse74)) (.cse33 (=> .cse74 .cse34))) (let ((.cse32 (and .cse75 .cse33)) (.cse89 (= .cse51 .cse91)) (.cse87 (= 1 1))) (let ((.cse100 (- 0 7)) (.cse88 (=> .cse89 .cse87)) (.cse31 (=> .cse87 .cse32))) (let ((.cse30 (and .cse88 .cse31)) (.cse98 (= .cse51 .cse100)) (.cse45 (= 0 0))) (let ((.cse97 (=> .cse98 .cse45)) (.cse29 (=> .cse45 .cse30))) (let ((.cse28 (and .cse97 .cse29))) (let ((.cse27 (=> .cse104 .cse28))) (let ((.cse23 (=> .cse105 .cse27))) (let ((.cse25 (not .cse23))) (res .cse23 (let ((.cse24 (not .cse22))) (res .cse24 (res .cse25 (not+ .cse25) (let ((.cse26 (= .cse25 .cse24))) (res .cse26 (res (= .cse23 .cse22) (res (= .cse27 .cse21) (res (= .cse28 .cse20) (let ((.cse95 (= .cse45 true))) (let-proof ((.cse46 (refl 0))) (let ((.cse49 (= .cse51 .cse51))) (let-proof ((.cse96 (res true .cse9 (res .cse45 .cse46 (=+2 .cse95)))) (.cse50 (refl .cse51))) (res (= .cse29 .cse17) (res (= .cse30 .cse18) (let ((.cse85 (= .cse87 true))) (let-proof ((.cse86 (res true .cse9 (res .cse87 (refl 1) (=+2 .cse85))))) (res (= .cse31 .cse14) (res (= .cse32 .cse15) (let ((.cse72 (= .cse74 false))) (let-proof ((.cse73 (let ((.cse82 (not true))) (let ((.cse81 (= .cse82 false))) (res .cse81 (res false (res .cse82 (=+1 .cse81) (res true .cse9 (not- .cse82))) false-) (res (= .cse74 .cse82) (let ((.cse83 (= .cse84 true))) (res .cse83 (res true .cse9 (res .cse84 (refl 2) (=+2 .cse83))) (cong (not .cse84) (not true)))) (trans .cse74 .cse82 false))))))) (res (= .cse33 .cse5) (res (= .cse34 .cse13) (let ((.cse62 (= .cse64 true))) (let-proof ((.cse63 (res true .cse9 (res .cse64 (refl 3) (=+2 .cse62))))) (res (= .cse35 .cse6) (res (= .cse36 .cse11) (let ((.cse52 (= .cse54 true))) (let-proof ((.cse53 (res true .cse9 (res .cse54 (refl 4) (=+2 .cse52))))) (res (= .cse37 .cse7) (res (= .cse38 .cse8) (let ((.cse39 (= .cse40 true))) (res .cse39 (res true .cse9 (res .cse40 (refl 5) (=+2 .cse39))) (res (= .cse41 .cse42) (res (= .cse43 (- 1)) (let ((.cse44 (* (- 1) 1))) (res (= .cse44 (- 1)) (poly* .cse44 (- 1)) (res .cse45 .cse46 (let ((.cse47 (+ 0 .cse44)) (.cse48 (+ 0 (- 1)))) (res (= .cse47 .cse48) (cong (+ 0 .cse44) (+ 0 (- 1))) (res (= .cse43 .cse47) (-def 0 1) (res (= .cse48 (- 1)) (poly+ .cse48 (- 1)) (trans .cse43 .cse47 .cse48 (- 1))))))))) (res .cse49 .cse50 (cong (= .cse51 .cse43) (= .cse51 (- 1))))) (cong (=> .cse41 .cse40) (=> .cse42 true))))) (res .cse52 .cse53 (cong (=> .cse54 .cse38) (=> true .cse8)))) (res (= .cse55 .cse10) (res .cse52 .cse53 (res (= .cse56 .cse57) (res (= .cse58 (- 3)) (let ((.cse59 (* (- 1) 3))) (res (= .cse59 (- 3)) (poly* .cse59 (- 3)) (res .cse45 .cse46 (let ((.cse60 (+ 0 .cse59)) (.cse61 (+ 0 (- 3)))) (res (= .cse60 .cse61) (cong (+ 0 .cse59) (+ 0 (- 3))) (res (= .cse58 .cse60) (-def 0 3) (res (= .cse61 (- 3)) (poly+ .cse61 (- 3)) (trans .cse58 .cse60 .cse61 (- 3))))))))) (res .cse49 .cse50 (cong (= .cse51 .cse58) (= .cse51 (- 3))))) (cong (=> .cse56 .cse54) (=> .cse57 true)))) (cong (and .cse55 .cse37) (and .cse10 .cse7)))))) (res .cse62 .cse63 (cong (=> .cse64 .cse36) (=> true .cse11)))) (res (= .cse65 .cse12) (res .cse62 .cse63 (res (= .cse66 .cse67) (res (= .cse68 (- 4)) (let ((.cse69 (* (- 1) 4))) (res (= .cse69 (- 4)) (poly* .cse69 (- 4)) (res .cse45 .cse46 (let ((.cse70 (+ 0 .cse69)) (.cse71 (+ 0 (- 4)))) (res (= .cse70 .cse71) (cong (+ 0 .cse69) (+ 0 (- 4))) (res (= .cse68 .cse70) (-def 0 4) (res (= .cse71 (- 4)) (poly+ .cse71 (- 4)) (trans .cse68 .cse70 .cse71 (- 4))))))))) (res .cse49 .cse50 (cong (= .cse51 .cse68) (= .cse51 (- 4))))) (cong (=> .cse66 .cse64) (=> .cse67 true)))) (cong (and .cse65 .cse35) (and .cse12 .cse6)))))) (res .cse72 .cse73 (cong (=> .cse74 .cse34) (=> false .cse13)))) (res (= .cse75 .cse1) (res .cse72 .cse73 (res (= .cse76 .cse2) (res (= .cse77 (- 5)) (let ((.cse78 (* (- 1) 5))) (res (= .cse78 (- 5)) (poly* .cse78 (- 5)) (res .cse45 .cse46 (let ((.cse79 (+ 0 .cse78)) (.cse80 (+ 0 (- 5)))) (res (= .cse79 .cse80) (cong (+ 0 .cse78) (+ 0 (- 5))) (res (= .cse77 .cse79) (-def 0 5) (res (= .cse80 (- 5)) (poly+ .cse80 (- 5)) (trans .cse77 .cse79 .cse80 (- 5))))))))) (res .cse49 .cse50 (cong (= .cse51 .cse77) (= .cse51 (- 5))))) (cong (=> .cse76 .cse74) (=> .cse2 false)))) (cong (and .cse75 .cse33) (and .cse1 .cse5)))))) (res .cse85 .cse86 (cong (=> .cse87 .cse32) (=> true .cse15)))) (res (= .cse88 .cse16) (res .cse85 .cse86 (res (= .cse89 .cse90) (res (= .cse91 (- 6)) (let ((.cse92 (* (- 1) 6))) (res (= .cse92 (- 6)) (poly* .cse92 (- 6)) (res .cse45 .cse46 (let ((.cse93 (+ 0 .cse92)) (.cse94 (+ 0 (- 6)))) (res (= .cse93 .cse94) (cong (+ 0 .cse92) (+ 0 (- 6))) (res (= .cse91 .cse93) (-def 0 6) (res (= .cse94 (- 6)) (poly+ .cse94 (- 6)) (trans .cse91 .cse93 .cse94 (- 6))))))))) (res .cse49 .cse50 (cong (= .cse51 .cse91) (= .cse51 (- 6))))) (cong (=> .cse89 .cse87) (=> .cse90 true)))) (cong (and .cse88 .cse31) (and .cse16 .cse14)))))) (res .cse95 .cse96 (cong (=> .cse45 .cse30) (=> true .cse18)))) (res (= .cse97 .cse19) (res .cse95 .cse96 (res (= .cse98 .cse99) (res (= .cse100 (- 7)) (let ((.cse101 (* (- 1) 7))) (res (= .cse101 (- 7)) (poly* .cse101 (- 7)) (res .cse45 .cse46 (let ((.cse102 (+ 0 .cse101)) (.cse103 (+ 0 (- 7)))) (res (= .cse102 .cse103) (cong (+ 0 .cse101) (+ 0 (- 7))) (res (= .cse100 .cse102) (-def 0 7) (res (= .cse103 (- 7)) (poly+ .cse103 (- 7)) (trans .cse100 .cse102 .cse103 (- 7))))))))) (res .cse49 .cse50 (cong (= .cse51 .cse100) (= .cse51 (- 7))))) (cong (=> .cse98 .cse45) (=> .cse99 true)))) (cong (and .cse97 .cse29) (and .cse19 .cse17)))))))) (res (= .cse104 .cse104) (refl .cse104) (cong (=> .cse104 .cse28) (=> .cse104 .cse20)))) (res (= .cse105 .cse105) (refl .cse105) (cong (=> .cse105 .cse27) (=> .cse105 .cse21)))) (cong (not .cse23) (not .cse22))) (=-2 .cse26)))) (not- .cse24))) (res .cse25 (assume .cse25) (not- .cse25))))))))))))))))))))))))))) :proves (- .cse19 - .cse17) :input)))) :proves (- .cse17) :rup))))))) :proves (- .cse14) :rup))))))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse107 (not .cse2))) (res .cse2 (let ((.cse106 (not .cse0))) (res .cse106 (res .cse107 (not+ .cse107) (let ((.cse108 (= .cse107 .cse106))) (res .cse108 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse108)))) (not- .cse106))) (res .cse107 (assume .cse107) (not- .cse107)))) :proves (- .cse0) :input)))))) :proves () :rup)

