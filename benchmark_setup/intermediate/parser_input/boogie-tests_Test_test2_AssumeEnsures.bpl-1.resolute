unsat
(! (let ((.cse34 (ControlFlow 0 2)) (.cse39 (* (- 1) g@0)) (.cse16 (+ g@0 1))) (let ((.cse0 (<= .cse16 0)) (.cse1 (<= .cse39 0)) (.cse29 (= .cse34 (- 1)))) (let ((.cse11 (and .cse1 .cse29)) (.cse2 (not .cse0))) (let ((.cse7 (= .cse1 .cse2)) (.cse13 (< 0 .cse39)) (.cse9 (=> .cse11 .cse1))) (let-proof ((.cse3 (not+ .cse2)) (.cse12 (not- .cse2)) (.cse14 (total .cse39 0))) (let-proof ((.cse10 (let ((.cse37 (= (ControlFlow 0 3) 2))) (let ((.cse17 (=> .cse37 .cse9))) (res .cse17 (=>+ 1 .cse17) (let ((.cse38 (= (ControlFlow 0 0) 3))) (let ((.cse18 (=> .cse38 .cse17))) (res .cse18 (=>+ 1 .cse18) (let ((.cse30 (- 0 1))) (let ((.cse35 (<= 0 g@0)) (.cse28 (= .cse34 .cse30))) (let ((.cse27 (and .cse35 .cse28))) (let ((.cse24 (=> .cse27 .cse35))) (let ((.cse23 (=> .cse37 .cse24))) (let ((.cse19 (=> .cse38 .cse23))) (let ((.cse21 (not .cse19))) (res .cse19 (let ((.cse20 (not .cse18))) (res .cse20 (res .cse21 (not+ .cse21) (let ((.cse22 (= .cse21 .cse20))) (res .cse22 (res (= .cse19 .cse18) (res (= .cse23 .cse17) (res (= .cse24 .cse9) (let ((.cse25 (= .cse35 .cse1))) (let-proof ((.cse26 (res .cse1 (res .cse35 (=+1 .cse25) (res .cse13 .cse14 (farkas 1 .cse35 1 .cse13))) (res .cse35 (let ((.cse36 (< g@0 0))) (res .cse36 (total 0 g@0) (farkas 1 .cse36 1 .cse1))) (=+2 .cse25))))) (res .cse25 .cse26 (res (= .cse27 .cse11) (res (= .cse28 .cse29) (res (= .cse30 (- 1)) (let ((.cse31 (* (- 1) 1))) (res (= .cse31 (- 1)) (poly* .cse31 (- 1)) (res (= 0 0) (refl 0) (let ((.cse32 (+ 0 .cse31)) (.cse33 (+ 0 (- 1)))) (res (= .cse32 .cse33) (cong (+ 0 .cse31) (+ 0 (- 1))) (res (= .cse30 .cse32) (-def 0 1) (res (= .cse33 (- 1)) (poly+ .cse33 (- 1)) (trans .cse30 .cse32 .cse33 (- 1))))))))) (res (= .cse34 .cse34) (refl .cse34) (cong (= .cse34 .cse30) (= .cse34 (- 1))))) (res .cse25 .cse26 (cong (and .cse35 .cse28) (and .cse1 .cse29)))) (cong (=> .cse27 .cse35) (=> .cse11 .cse1)))))) (res (= .cse37 .cse37) (refl .cse37) (cong (=> .cse37 .cse24) (=> .cse37 .cse9)))) (res (= .cse38 .cse38) (refl .cse38) (cong (=> .cse38 .cse23) (=> .cse38 .cse17)))) (cong (not .cse19) (not .cse18))) (=-2 .cse22)))) (not- .cse20))) (res .cse21 (assume .cse21) (not- .cse21))))))))))))))))) (.cse8 (res .cse2 (res .cse1 (=+1 .cse7) (res .cse0 .cse3 (farkas 1 .cse1 1 .cse0))) (res .cse1 (res .cse13 .cse14 (res .cse0 (let ((.cse15 (<= 1 .cse16))) (res .cse15 (total-int .cse16 0) (farkas 1 .cse13 1 .cse15))) .cse12)) (=+2 .cse7))))) (res .cse0 (! (res .cse1 (res .cse2 .cse3 (let ((.cse4 (not .cse2))) (res .cse4 (let ((.cse5 (not .cse1))) (res .cse5 (not+ .cse5) (let ((.cse6 (= .cse5 .cse4))) (res .cse6 (res .cse7 .cse8 (cong (not .cse1) (not .cse2))) (=-2 .cse6))))) (not- .cse4)))) (res .cse9 (=>+ 1 .cse9) .cse10)) :proves (+ .cse0) :input) (! (res .cse1 (res .cse11 (res .cse9 (=>+ 0 .cse9) .cse10) (and- 0 .cse11)) (res .cse2 (res .cse7 .cse8 (=-2 .cse7)) .cse12)) :proves (- .cse0) :input)))))))) :proves () :rup)

