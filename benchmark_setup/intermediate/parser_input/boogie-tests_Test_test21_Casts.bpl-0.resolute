unsat
(! (let ((.cse47 (ControlFlow 0 2))) (let ((.cse2 (= .cse47 (- 1))) (.cse0 (= (- 1) .cse47))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse47)) (res .cse2 (symm .cse47 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse14 (|Select__T@[Int]Int_| n x))) (let ((.cse37 (= (|Select__T@[Int]Int_| m .cse14) 1))) (let ((.cse1 (=> .cse2 .cse37))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse17 (|Select__T@[Int]Int_| m x))) (let ((.cse16 (|Select__T@[Int]Int_| n .cse17))) (let ((.cse20 (= .cse16 1))) (let ((.cse5 (=> .cse20 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse52 (= .cse47 (- 3)))) (let ((.cse6 (=> .cse52 .cse20)) (.cse8 (= .cse17 x)) (.cse12 (= .cse14 1))) (let ((.cse9 (and .cse8 .cse12)) (.cse25 (and .cse6 .cse5))) (let ((.cse18 (=> .cse9 .cse25))) (let-proof ((.cse19 (let ((.cse57 (= (ControlFlow 0 4) 2))) (let ((.cse26 (=> .cse57 .cse18))) (res .cse26 (=>+ 1 .cse26) (let ((.cse58 (= (ControlFlow 0 0) 4))) (let ((.cse27 (=> .cse58 .cse26))) (res .cse27 (=>+ 1 .cse27) (let ((.cse39 (- 0 1))) (let ((.cse53 (- 0 3)) (.cse38 (= .cse47 .cse39))) (let ((.cse36 (=> .cse38 .cse37)) (.cse51 (= .cse47 .cse53))) (let ((.cse50 (=> .cse51 .cse20)) (.cse35 (=> .cse20 .cse36))) (let ((.cse34 (and .cse50 .cse35))) (let ((.cse33 (=> .cse9 .cse34))) (let ((.cse32 (=> .cse57 .cse33))) (let ((.cse28 (=> .cse58 .cse32))) (let ((.cse30 (not .cse28))) (res .cse28 (let ((.cse29 (not .cse27))) (res .cse29 (res .cse30 (not+ .cse30) (let ((.cse31 (= .cse30 .cse29))) (res .cse31 (res (= .cse28 .cse27) (res (= .cse32 .cse26) (res (= .cse33 .cse18) (res (= .cse34 .cse25) (let ((.cse48 (= .cse20 .cse20)) (.cse41 (= 0 0)) (.cse45 (= .cse47 .cse47))) (let-proof ((.cse49 (refl .cse20)) (.cse42 (refl 0)) (.cse46 (refl .cse47))) (res (= .cse35 .cse5) (res (= .cse36 .cse1) (res (= .cse37 .cse37) (refl .cse37) (res (= .cse38 .cse2) (res (= .cse39 (- 1)) (let ((.cse40 (* (- 1) 1))) (res (= .cse40 (- 1)) (poly* .cse40 (- 1)) (res .cse41 .cse42 (let ((.cse43 (+ 0 .cse40)) (.cse44 (+ 0 (- 1)))) (res (= .cse43 .cse44) (cong (+ 0 .cse40) (+ 0 (- 1))) (res (= .cse39 .cse43) (-def 0 1) (res (= .cse44 (- 1)) (poly+ .cse44 (- 1)) (trans .cse39 .cse43 .cse44 (- 1))))))))) (res .cse45 .cse46 (cong (= .cse47 .cse39) (= .cse47 (- 1))))) (cong (=> .cse38 .cse37) (=> .cse2 .cse37)))) (res .cse48 .cse49 (cong (=> .cse20 .cse36) (=> .cse20 .cse1)))) (res (= .cse50 .cse6) (res .cse48 .cse49 (res (= .cse51 .cse52) (res (= .cse53 (- 3)) (let ((.cse54 (* (- 1) 3))) (res (= .cse54 (- 3)) (poly* .cse54 (- 3)) (res .cse41 .cse42 (let ((.cse55 (+ 0 .cse54)) (.cse56 (+ 0 (- 3)))) (res (= .cse55 .cse56) (cong (+ 0 .cse54) (+ 0 (- 3))) (res (= .cse53 .cse55) (-def 0 3) (res (= .cse56 (- 3)) (poly+ .cse56 (- 3)) (trans .cse53 .cse55 .cse56 (- 3))))))))) (res .cse45 .cse46 (cong (= .cse47 .cse53) (= .cse47 (- 3))))) (cong (=> .cse51 .cse20) (=> .cse52 .cse20)))) (cong (and .cse50 .cse35) (and .cse6 .cse5)))))) (res (= .cse9 .cse9) (refl .cse9) (cong (=> .cse9 .cse34) (=> .cse9 .cse25)))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse33) (=> .cse57 .cse18)))) (res (= .cse58 .cse58) (refl .cse58) (cong (=> .cse58 .cse32) (=> .cse58 .cse26)))) (cong (not .cse28) (not .cse27))) (=-2 .cse31)))) (not- .cse29))) (res .cse30 (assume .cse30) (not- .cse30)))))))))))))))))))) (res .cse6 (! (let ((.cse7 (= 1 .cse16))) (res .cse7 (! (let-proof ((.cse10 (res .cse18 (=>+ 0 .cse18) .cse19))) (res .cse8 (! (res .cse9 .cse10 (and- 0 .cse9)) :proves (+ .cse8) :input) (let ((.cse11 (= 1 .cse14))) (res .cse11 (! (res .cse12 (res .cse9 .cse10 (and- 1 .cse9)) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res .cse11 (res .cse12 (=+1 .cse13) (symm 1 .cse14)) (res .cse12 (symm .cse14 1) (=+2 .cse13))) (=-2 .cse13)))) :proves (+ .cse11) :input) (let ((.cse15 (= .cse14 .cse16))) (res .cse15 (! (res (= n n) (refl n) (res (= x .cse17) (symm x .cse17) (cong (|Select__T@[Int]Int_| n x) (|Select__T@[Int]Int_| n .cse17)))) :proves (+ .cse15 - .cse8) :cong (.cse14 .cse16)) (! (trans 1 .cse14 .cse16) :proves (+ .cse7 - .cse11 - .cse15) :trans (1 .cse14 .cse16)))))))) :proves (+ .cse7) :rup) (! (res .cse20 (let ((.cse21 (not .cse7))) (res .cse21 (let ((.cse22 (not .cse20))) (res .cse22 (not+ .cse22) (let ((.cse23 (= .cse22 .cse21))) (res .cse23 (let ((.cse24 (= .cse20 .cse7))) (res .cse24 (res .cse7 (res .cse20 (=+1 .cse24) (symm 1 .cse16)) (res .cse20 (symm .cse16 1) (=+2 .cse24))) (cong (not .cse20) (not .cse7)))) (=-2 .cse23))))) (not- .cse21))) (=>+ 1 .cse6)) :proves (+ .cse6 - .cse7) :input))) :proves (+ .cse6) :rup) (! (res .cse25 (and+ .cse25) (res .cse18 (=>+ 1 .cse18) .cse19)) :proves (- .cse6 - .cse5) :input))))))) :proves (- .cse5) :rup)))))) :proves (- .cse1) :rup))))) :proves (+ .cse0) :rup) (! (let ((.cse60 (not .cse2))) (res .cse2 (let ((.cse59 (not .cse0))) (res .cse59 (res .cse60 (not+ .cse60) (let ((.cse61 (= .cse60 .cse59))) (res .cse61 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse61)))) (not- .cse59))) (res .cse60 (assume .cse60) (not- .cse60)))) :proves (- .cse0) :input)))))) :proves () :rup)

