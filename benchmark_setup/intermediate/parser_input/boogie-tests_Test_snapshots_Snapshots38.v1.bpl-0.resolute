unsat
(! (let ((.cse59 (ControlFlow 0 2))) (let ((.cse2 (= .cse59 (- 1))) (.cse0 (= (- 1) .cse59))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse59)) (res .cse2 (symm .cse59 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse97 (* (- 1) call1formal@r@0))) (let ((.cse48 (+ .cse97 42))) (let ((.cse45 (<= .cse48 0))) (let ((.cse1 (=> .cse2 .cse45))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse9 (= call1formal@r@0 0))) (let ((.cse10 (not .cse9))) (let ((.cse5 (=> .cse10 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse96 (+ .cse97 1)) (.cse64 (= .cse59 (- 3)))) (let ((.cse7 (=> .cse64 .cse10)) (.cse18 (<= .cse96 0))) (let ((.cse20 (=> true .cse18)) (.cse27 (and .cse7 .cse5))) (let ((.cse23 (< 0 .cse96)) (.cse16 (<= 1 call1formal@r@0)) (.cse6 (=> .cse20 .cse27))) (let-proof ((.cse24 (total .cse96 0)) (.cse19 true+)) (let-proof ((.cse26 (! (let ((.cse28 (=> true .cse6))) (res .cse28 (! (=>+ 1 .cse28) :proves (+ .cse28 - .cse6) :input) (! (let ((.cse83 (= .cse59 (- 4)))) (let ((.cse29 (=> .cse83 true))) (res .cse29 (! (res true .cse19 (=>+ 1 .cse29)) :proves (+ .cse29) :input) (! (let ((.cse30 (and .cse29 .cse28))) (res .cse30 (and+ .cse30) (let ((.cse94 (= (ControlFlow 0 5) 2))) (let ((.cse31 (=> .cse94 .cse30))) (res .cse31 (=>+ 1 .cse31) (let ((.cse95 (= (ControlFlow 0 0) 5))) (let ((.cse32 (=> .cse95 .cse31))) (res .cse32 (=>+ 1 .cse32) (let ((.cse51 (- 0 1))) (let ((.cse65 (- 0 3)) (.cse50 (= .cse59 .cse51)) (.cse46 (<= 42 call1formal@r@0))) (let ((.cse77 (= 42 0)) (.cse43 (=> .cse50 .cse46)) (.cse63 (= .cse59 .cse65))) (let ((.cse62 (=> .cse63 .cse10)) (.cse42 (=> .cse10 .cse43)) (.cse72 (not .cse77))) (let ((.cse84 (- 0 4)) (.cse69 (=> .cse72 .cse16)) (.cse41 (and .cse62 .cse42))) (let ((.cse40 (=> .cse69 .cse41)) (.cse82 (= .cse59 .cse84)) (.cse80 (<= 0 42))) (let ((.cse81 (=> .cse82 .cse80)) (.cse39 (=> .cse80 .cse40))) (let ((.cse38 (and .cse81 .cse39))) (let ((.cse37 (=> .cse94 .cse38))) (let ((.cse33 (=> .cse95 .cse37))) (let ((.cse35 (not .cse33))) (res .cse33 (let ((.cse34 (not .cse32))) (res .cse34 (res .cse35 (not+ .cse35) (let ((.cse36 (= .cse35 .cse34))) (res .cse36 (res (= .cse33 .cse32) (res (= .cse37 .cse31) (res (= .cse38 .cse30) (let ((.cse78 (= .cse80 true)) (.cse53 (= 0 0)) (.cse57 (= .cse59 .cse59))) (let-proof ((.cse79 (let ((.cse89 (<= (- 42) 0))) (let ((.cse88 (= .cse89 true)) (.cse90 (< 0 (- 42)))) (let-proof ((.cse91 (total (- 42) 0))) (res .cse88 (res true .cse19 (res .cse89 (res .cse90 .cse91 (farkas 1 .cse90)) (=+2 .cse88))) (let ((.cse92 (= .cse80 .cse89))) (res .cse92 (res .cse89 (res .cse80 (=+1 .cse92) (res .cse90 .cse91 (farkas 1 .cse80 1 .cse90))) (res .cse80 (let ((.cse93 (< 42 0))) (res .cse93 (total 0 42) (farkas 1 .cse93 1 .cse89))) (=+2 .cse92))) (trans .cse80 .cse89 true)))))))) (.cse54 (refl 0)) (.cse58 (refl .cse59))) (res (= .cse39 .cse28) (res (= .cse40 .cse6) (res (= .cse41 .cse27) (let ((.cse60 (= .cse10 .cse10))) (let-proof ((.cse61 (refl .cse10))) (res (= .cse42 .cse5) (res (= .cse43 .cse1) (let ((.cse44 (= .cse46 .cse45))) (res .cse44 (res .cse45 (res .cse46 (=+1 .cse44) (let ((.cse47 (< 0 .cse48))) (res .cse47 (total .cse48 0) (farkas 1 .cse46 1 .cse47)))) (res .cse46 (let ((.cse49 (< call1formal@r@0 42))) (res .cse49 (total 42 call1formal@r@0) (farkas 1 .cse49 1 .cse45))) (=+2 .cse44))) (res (= .cse50 .cse2) (res (= .cse51 (- 1)) (let ((.cse52 (* (- 1) 1))) (res (= .cse52 (- 1)) (poly* .cse52 (- 1)) (res .cse53 .cse54 (let ((.cse55 (+ 0 .cse52)) (.cse56 (+ 0 (- 1)))) (res (= .cse55 .cse56) (cong (+ 0 .cse52) (+ 0 (- 1))) (res (= .cse51 .cse55) (-def 0 1) (res (= .cse56 (- 1)) (poly+ .cse56 (- 1)) (trans .cse51 .cse55 .cse56 (- 1))))))))) (res .cse57 .cse58 (cong (= .cse59 .cse51) (= .cse59 (- 1))))) (cong (=> .cse50 .cse46) (=> .cse2 .cse45))))) (res .cse60 .cse61 (cong (=> .cse10 .cse43) (=> .cse10 .cse1)))) (res (= .cse62 .cse7) (res .cse60 .cse61 (res (= .cse63 .cse64) (res (= .cse65 (- 3)) (let ((.cse66 (* (- 1) 3))) (res (= .cse66 (- 3)) (poly* .cse66 (- 3)) (res .cse53 .cse54 (let ((.cse67 (+ 0 .cse66)) (.cse68 (+ 0 (- 3)))) (res (= .cse67 .cse68) (cong (+ 0 .cse66) (+ 0 (- 3))) (res (= .cse65 .cse67) (-def 0 3) (res (= .cse68 (- 3)) (poly+ .cse68 (- 3)) (trans .cse65 .cse67 .cse68 (- 3))))))))) (res .cse57 .cse58 (cong (= .cse59 .cse65) (= .cse59 (- 3))))) (cong (=> .cse63 .cse10) (=> .cse64 .cse10)))) (cong (and .cse62 .cse42) (and .cse7 .cse5)))))) (res (= .cse69 .cse20) (let ((.cse70 (= .cse16 .cse18))) (res .cse70 (res .cse18 (res .cse16 (=+1 .cse70) (res .cse23 .cse24 (farkas 1 .cse16 1 .cse23))) (res .cse16 (let ((.cse71 (< call1formal@r@0 1))) (res .cse71 (total 1 call1formal@r@0) (farkas 1 .cse71 1 .cse18))) (=+2 .cse70))) (res (= .cse72 true) (let ((.cse74 (not false))) (let ((.cse73 (= .cse74 true))) (let-proof ((.cse75 false-)) (res .cse73 (res true .cse19 (res .cse74 (res false (not+ .cse74) .cse75) (=+2 .cse73))) (res (= .cse72 .cse74) (let ((.cse76 (= .cse77 false))) (res .cse76 (res false (res .cse77 (=+1 .cse76) (farkas 1 .cse77)) .cse75) (cong (not .cse77) (not false)))) (trans .cse72 .cse74 true)))))) (cong (=> .cse72 .cse16) (=> true .cse18))))) (cong (=> .cse69 .cse41) (=> .cse20 .cse27)))) (res .cse78 .cse79 (cong (=> .cse80 .cse40) (=> true .cse6)))) (res (= .cse81 .cse29) (res .cse78 .cse79 (res (= .cse82 .cse83) (res (= .cse84 (- 4)) (let ((.cse85 (* (- 1) 4))) (res (= .cse85 (- 4)) (poly* .cse85 (- 4)) (res .cse53 .cse54 (let ((.cse86 (+ 0 .cse85)) (.cse87 (+ 0 (- 4)))) (res (= .cse86 .cse87) (cong (+ 0 .cse85) (+ 0 (- 4))) (res (= .cse84 .cse86) (-def 0 4) (res (= .cse87 (- 4)) (poly+ .cse87 (- 4)) (trans .cse84 .cse86 .cse87 (- 4))))))))) (res .cse57 .cse58 (cong (= .cse59 .cse84) (= .cse59 (- 4))))) (cong (=> .cse82 .cse80) (=> .cse83 true)))) (cong (and .cse81 .cse39) (and .cse29 .cse28)))))) (res (= .cse94 .cse94) (refl .cse94) (cong (=> .cse94 .cse38) (=> .cse94 .cse30)))) (res (= .cse95 .cse95) (refl .cse95) (cong (=> .cse95 .cse37) (=> .cse95 .cse31)))) (cong (not .cse33) (not .cse32))) (=-2 .cse36)))) (not- .cse34))) (res .cse35 (assume .cse35) (not- .cse35)))))))))))))))))))))) :proves (- .cse29 - .cse28) :input)))) :proves (- .cse28) :rup))) :proves (- .cse6) :rup))) (res .cse6 (res .cse7 (! (let ((.cse8 (= 0 call1formal@r@0))) (let-proof ((.cse12 (symm call1formal@r@0 0))) (res .cse8 (! (res .cse9 (res .cse10 (not+ .cse10) (=>+ 1 .cse7)) (let ((.cse11 (= .cse9 .cse8))) (res .cse11 (res .cse8 (res .cse9 (=+1 .cse11) (symm 0 call1formal@r@0)) (res .cse9 .cse12 (=+2 .cse11))) (=-2 .cse11)))) :proves (+ .cse7 + .cse8) :input) (! (res .cse9 (! (res .cse9 .cse12 (let ((.cse13 (< call1formal@r@0 0))) (res .cse13 (let ((.cse14 (< 0 call1formal@r@0))) (res .cse14 (trichotomy call1formal@r@0 0) (farkas 1 .cse9 1 .cse14))) (farkas 1 .cse8 1 .cse13)))) :proves (- .cse8 + .cse9) :EQ) (! (let ((.cse15 (<= call1formal@r@0 0))) (let-proof ((.cse17 (total-int call1formal@r@0 0))) (res .cse15 (! (res .cse16 .cse17 (farkas 1 .cse16 1 .cse9)) :proves (+ .cse15 - .cse9) :LA ((- 1) 1)) (! (res .cse6 (! (res .cse18 (res true .cse19 (res .cse20 (=>+ 0 .cse6) (=>- .cse20))) (let ((.cse21 (not .cse15))) (let-proof ((.cse25 (not- .cse21))) (res .cse21 (let ((.cse22 (= .cse18 .cse21))) (res .cse22 (res .cse21 (res .cse18 (=+1 .cse22) (res .cse15 (not+ .cse21) (farkas 1 .cse18 1 .cse15))) (res .cse18 (res .cse23 .cse24 (res .cse15 (res .cse16 .cse17 (farkas 1 .cse23 1 .cse16)) .cse25)) (=+2 .cse22))) (=-2 .cse22))) .cse25)))) :proves (+ .cse6 - .cse15) :input) .cse26) :proves (- .cse15) :rup)))) :proves (- .cse9) :rup)) :proves (- .cse8) :rup)))) :proves (+ .cse7) :rup) (! (res .cse27 (and+ .cse27) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) .cse26))))))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse99 (not .cse2))) (res .cse2 (let ((.cse98 (not .cse0))) (res .cse98 (res .cse99 (not+ .cse99) (let ((.cse100 (= .cse99 .cse98))) (res .cse100 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse100)))) (not- .cse98))) (res .cse99 (assume .cse99) (not- .cse99)))) :proves (- .cse0) :input)))))) :proves () :rup)

