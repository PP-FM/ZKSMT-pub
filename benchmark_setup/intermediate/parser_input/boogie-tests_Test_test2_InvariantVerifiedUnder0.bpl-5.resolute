unsat
(! (let ((.cse77 (ControlFlow 0 5))) (let ((.cse2 (= .cse77 (- 7))) (.cse0 (= (- 7) .cse77))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 7) .cse77)) (res .cse2 (symm .cse77 (- 7)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse6 (or A P))) (let ((.cse1 (=> .cse2 .cse6))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse54 (ControlFlow 0 2))) (let ((.cse45 (= .cse54 (- 1))) (.cse8 (or A Q))) (let ((.cse11 (=> .cse45 .cse8)) (.cse61 (= .cse54 (- 3)))) (let ((.cse12 (=> .cse61 .cse6)) (.cse10 (=> P .cse11))) (let ((.cse66 (and Q (= (ControlFlow 0 4) 2))) (.cse14 (and .cse12 .cse10))) (let ((.cse13 (=> .cse66 .cse14))) (let ((.cse67 (= .cse77 4)) (.cse15 (=> P .cse13))) (let ((.cse17 (=> .cse67 .cse15)) (.cse70 (= .cse77 (- 6)))) (let ((.cse7 (=> .cse70 .cse8)) (.cse16 (=> Q .cse17))) (let ((.cse24 (not A)) (.cse18 (and .cse7 .cse16))) (let ((.cse5 (=> P .cse18)) (.cse20 (=> .cse24 Q))) (let ((.cse21 (and .cse20 (= (ControlFlow 0 8) 5))) (.cse25 (and .cse1 .cse5))) (let ((.cse22 (=> .cse21 .cse25))) (let-proof ((.cse23 (let ((.cse84 (= (ControlFlow 0 0) 8))) (let ((.cse26 (=> .cse84 .cse22))) (res .cse26 (=>+ 1 .cse26) (let ((.cse46 (- 0 1))) (let ((.cse62 (- 0 3)) (.cse44 (= .cse54 .cse46))) (let ((.cse41 (=> .cse44 .cse8)) (.cse60 (= .cse54 .cse62))) (let ((.cse57 (=> .cse60 .cse6)) (.cse40 (=> P .cse41))) (let ((.cse39 (and .cse57 .cse40))) (let ((.cse38 (=> .cse66 .cse39))) (let ((.cse71 (- 0 6)) (.cse37 (=> P .cse38))) (let ((.cse36 (=> .cse67 .cse37)) (.cse69 (= .cse77 .cse71))) (let ((.cse80 (- 0 7)) (.cse68 (=> .cse69 .cse8)) (.cse35 (=> Q .cse36))) (let ((.cse34 (and .cse68 .cse35)) (.cse79 (= .cse77 .cse80))) (let ((.cse78 (=> .cse79 .cse6)) (.cse33 (=> P .cse34))) (let ((.cse32 (and .cse78 .cse33))) (let ((.cse31 (=> .cse21 .cse32))) (let ((.cse27 (=> .cse84 .cse31))) (let ((.cse29 (not .cse27))) (res .cse27 (let ((.cse28 (not .cse26))) (res .cse28 (res .cse29 (not+ .cse29) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (res (= .cse27 .cse26) (res (= .cse31 .cse22) (res (= .cse32 .cse25) (let ((.cse58 (= .cse6 .cse6)) (.cse48 (= 0 0)) (.cse75 (= .cse77 .cse77))) (let-proof ((.cse59 (refl .cse6)) (.cse49 (refl 0)) (.cse76 (refl .cse77))) (res (= .cse33 .cse5) (let ((.cse55 (= P P))) (let-proof ((.cse56 (refl P))) (res (= .cse34 .cse18) (let ((.cse42 (= .cse8 .cse8))) (let-proof ((.cse43 (refl .cse8))) (res (= .cse35 .cse16) (res (= .cse36 .cse17) (res (= .cse37 .cse15) (res (= .cse38 .cse13) (res (= .cse39 .cse14) (let ((.cse52 (= .cse54 .cse54))) (let-proof ((.cse53 (refl .cse54))) (res (= .cse40 .cse10) (res (= .cse41 .cse11) (res .cse42 .cse43 (res (= .cse44 .cse45) (res (= .cse46 (- 1)) (let ((.cse47 (* (- 1) 1))) (res (= .cse47 (- 1)) (poly* .cse47 (- 1)) (res .cse48 .cse49 (let ((.cse50 (+ 0 .cse47)) (.cse51 (+ 0 (- 1)))) (res (= .cse50 .cse51) (cong (+ 0 .cse47) (+ 0 (- 1))) (res (= .cse46 .cse50) (-def 0 1) (res (= .cse51 (- 1)) (poly+ .cse51 (- 1)) (trans .cse46 .cse50 .cse51 (- 1))))))))) (res .cse52 .cse53 (cong (= .cse54 .cse46) (= .cse54 (- 1))))) (cong (=> .cse44 .cse8) (=> .cse45 .cse8)))) (res .cse55 .cse56 (cong (=> P .cse41) (=> P .cse11)))) (res (= .cse57 .cse12) (res .cse58 .cse59 (res (= .cse60 .cse61) (res (= .cse62 (- 3)) (let ((.cse63 (* (- 1) 3))) (res (= .cse63 (- 3)) (poly* .cse63 (- 3)) (res .cse48 .cse49 (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 3)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 3))) (res (= .cse62 .cse64) (-def 0 3) (res (= .cse65 (- 3)) (poly+ .cse65 (- 3)) (trans .cse62 .cse64 .cse65 (- 3))))))))) (res .cse52 .cse53 (cong (= .cse54 .cse62) (= .cse54 (- 3))))) (cong (=> .cse60 .cse6) (=> .cse61 .cse6)))) (cong (and .cse57 .cse40) (and .cse12 .cse10)))))) (res (= .cse66 .cse66) (refl .cse66) (cong (=> .cse66 .cse39) (=> .cse66 .cse14)))) (res .cse55 .cse56 (cong (=> P .cse38) (=> P .cse13)))) (res (= .cse67 .cse67) (refl .cse67) (cong (=> .cse67 .cse37) (=> .cse67 .cse15)))) (res (= Q Q) (refl Q) (cong (=> Q .cse36) (=> Q .cse17)))) (res (= .cse68 .cse7) (res .cse42 .cse43 (res (= .cse69 .cse70) (res (= .cse71 (- 6)) (let ((.cse72 (* (- 1) 6))) (res (= .cse72 (- 6)) (poly* .cse72 (- 6)) (res .cse48 .cse49 (let ((.cse73 (+ 0 .cse72)) (.cse74 (+ 0 (- 6)))) (res (= .cse73 .cse74) (cong (+ 0 .cse72) (+ 0 (- 6))) (res (= .cse71 .cse73) (-def 0 6) (res (= .cse74 (- 6)) (poly+ .cse74 (- 6)) (trans .cse71 .cse73 .cse74 (- 6))))))))) (res .cse75 .cse76 (cong (= .cse77 .cse71) (= .cse77 (- 6))))) (cong (=> .cse69 .cse8) (=> .cse70 .cse8)))) (cong (and .cse68 .cse35) (and .cse7 .cse16)))))) (res .cse55 .cse56 (cong (=> P .cse34) (=> P .cse18)))))) (res (= .cse78 .cse1) (res .cse58 .cse59 (res (= .cse79 .cse2) (res (= .cse80 (- 7)) (let ((.cse81 (* (- 1) 7))) (res (= .cse81 (- 7)) (poly* .cse81 (- 7)) (res .cse48 .cse49 (let ((.cse82 (+ 0 .cse81)) (.cse83 (+ 0 (- 7)))) (res (= .cse82 .cse83) (cong (+ 0 .cse81) (+ 0 (- 7))) (res (= .cse80 .cse82) (-def 0 7) (res (= .cse83 (- 7)) (poly+ .cse83 (- 7)) (trans .cse80 .cse82 .cse83 (- 7))))))))) (res .cse75 .cse76 (cong (= .cse77 .cse80) (= .cse77 (- 7))))) (cong (=> .cse79 .cse6) (=> .cse2 .cse6)))) (cong (and .cse78 .cse33) (and .cse1 .cse5)))))) (res (= .cse21 .cse21) (refl .cse21) (cong (=> .cse21 .cse32) (=> .cse21 .cse25)))) (res (= .cse84 .cse84) (refl .cse84) (cong (=> .cse84 .cse31) (=> .cse84 .cse22)))) (cong (not .cse27) (not .cse26))) (=-2 .cse30)))) (not- .cse28))) (res .cse29 (assume .cse29) (not- .cse29))))))))))))))))))))))) (let-proof ((.cse19 (! (res .cse25 (and+ .cse25) (res .cse22 (=>+ 1 .cse22) .cse23)) :proves (- .cse1 - .cse5) :input))) (res .cse5 (! (res P (! (=>+ 0 .cse5) :proves (+ .cse5 + P) :input) (! (res .cse6 (! (or+ 1 .cse6) :proves (+ .cse6 - P) :input) (! (let-proof ((.cse9 (! (res Q (res A (! (res .cse20 (res .cse21 (res .cse22 (=>+ 0 .cse22) .cse23) (and- 0 .cse21)) (res .cse24 (not+ .cse24) (=>- .cse20))) :proves (+ A + Q) :input) (! (or+ 0 .cse8) :proves (+ .cse8 - A) :input)) (! (or+ 1 .cse8) :proves (+ .cse8 - Q) :input)) :proves (+ .cse8) :rup))) (res .cse7 (! (res .cse8 .cse9 (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse8) :input)) :proves (+ .cse7) :rup) (res .cse10 (! (res .cse11 (! (res .cse8 .cse9 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse8) :input)) :proves (+ .cse11) :rup) (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse11) :input)) :proves (+ .cse10) :rup) (res .cse12 (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse6) :input) (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse6) :input) (res .cse13 (! (res .cse14 (and+ .cse14) (=>+ 1 .cse13)) :proves (+ .cse13 - .cse12 - .cse10) :input) (res .cse5 (res .cse15 (! (=>+ 1 .cse15) :proves (+ .cse15 - .cse13) :input) (res .cse16 (res .cse17 (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse15) :input) (! (=>+ 1 .cse16) :proves (+ .cse16 - .cse17) :input)) (! (res .cse18 (and+ .cse18) (=>+ 1 .cse5)) :proves (- .cse16 + .cse5 - .cse7) :input))) .cse19))))))) :proves (- .cse6) :rup)) :proves (- P) :rup)) :proves (+ .cse5) :rup) .cse19)))))))))))))))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse86 (not .cse2))) (res .cse2 (let ((.cse85 (not .cse0))) (res .cse85 (res .cse86 (not+ .cse86) (let ((.cse87 (= .cse86 .cse85))) (res .cse87 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse87)))) (not- .cse85))) (res .cse86 (assume .cse86) (not- .cse86)))) :proves (- .cse0) :input)))))) :proves () :rup)

