unsat
(! (let ((.cse21 (ControlFlow 0 2))) (let ((.cse1 (= .cse21 (- 1))) (.cse0 (= (- 1) .cse21))) (let ((.cse47 (= .cse1 .cse0))) (let-proof ((.cse48 (res .cse0 (res .cse1 (=+1 .cse47) (symm (- 1) .cse21)) (res .cse1 (symm .cse21 (- 1)) (=+2 .cse47))))) (res .cse0 (! (res .cse1 (let ((.cse28 (+ (* (- 1) n) 42))) (let ((.cse25 (<= .cse28 0))) (let ((.cse23 (=> assume$$s3 .cse25))) (let ((.cse2 (and .cse23 .cse1))) (res .cse2 (let ((.cse38 (+ n (- 42)))) (let ((.cse35 (<= .cse38 0)) (.cse43 (<= n 0))) (let ((.cse41 (not .cse43)) (.cse33 (=> assume$$s2 .cse35))) (let ((.cse31 (and .cse41 .cse33))) (let ((.cse3 (and .cse31 .cse2))) (res .cse3 (let ((.cse13 (= n 42))) (let ((.cse4 (=> .cse3 .cse13))) (res .cse4 (=>+ 0 .cse4) (let ((.cse45 (= (ControlFlow 0 3) 2))) (let ((.cse5 (=> .cse45 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse46 (= (ControlFlow 0 0) 3))) (let ((.cse6 (=> .cse46 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse36 (<= n 42)) (.cse17 (- 0 1)) (.cse26 (<= 42 n))) (let ((.cse22 (=> assume$$s3 .cse26)) (.cse16 (= .cse21 .cse17)) (.cse42 (< 0 n)) (.cse32 (=> assume$$s2 .cse36))) (let ((.cse30 (and .cse42 .cse32)) (.cse15 (and .cse22 .cse16))) (let ((.cse14 (and .cse30 .cse15))) (let ((.cse12 (=> .cse14 .cse13))) (let ((.cse11 (=> .cse45 .cse12))) (let ((.cse7 (=> .cse46 .cse11))) (let ((.cse9 (not .cse7))) (res .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res (= .cse7 .cse6) (res (= .cse11 .cse5) (res (= .cse12 .cse4) (res (= .cse13 .cse13) (refl .cse13) (res (= .cse14 .cse3) (res (= .cse15 .cse2) (res (= .cse16 .cse1) (res (= .cse17 (- 1)) (let ((.cse18 (* (- 1) 1))) (res (= .cse18 (- 1)) (poly* .cse18 (- 1)) (res (= 0 0) (refl 0) (let ((.cse19 (+ 0 .cse18)) (.cse20 (+ 0 (- 1)))) (res (= .cse19 .cse20) (cong (+ 0 .cse18) (+ 0 (- 1))) (res (= .cse17 .cse19) (-def 0 1) (res (= .cse20 (- 1)) (poly+ .cse20 (- 1)) (trans .cse17 .cse19 .cse20 (- 1))))))))) (res (= .cse21 .cse21) (refl .cse21) (cong (= .cse21 .cse17) (= .cse21 (- 1))))) (res (= .cse22 .cse23) (let ((.cse24 (= .cse26 .cse25))) (res .cse24 (res .cse25 (res .cse26 (=+1 .cse24) (let ((.cse27 (< 0 .cse28))) (res .cse27 (total .cse28 0) (farkas 1 .cse26 1 .cse27)))) (res .cse26 (let ((.cse29 (< n 42))) (res .cse29 (total 42 n) (farkas 1 .cse29 1 .cse25))) (=+2 .cse24))) (res (= assume$$s3 assume$$s3) (refl assume$$s3) (cong (=> assume$$s3 .cse26) (=> assume$$s3 .cse25))))) (cong (and .cse22 .cse16) (and .cse23 .cse1)))) (res (= .cse30 .cse31) (res (= .cse32 .cse33) (let ((.cse34 (= .cse36 .cse35))) (res .cse34 (res .cse35 (res .cse36 (=+1 .cse34) (let ((.cse37 (< 0 .cse38))) (res .cse37 (total .cse38 0) (farkas 1 .cse36 1 .cse37)))) (res .cse36 (let ((.cse39 (< 42 n))) (res .cse39 (total n 42) (farkas 1 .cse39 1 .cse35))) (=+2 .cse34))) (res (= assume$$s2 assume$$s2) (refl assume$$s2) (cong (=> assume$$s2 .cse36) (=> assume$$s2 .cse35))))) (let ((.cse40 (= .cse42 .cse41))) (res .cse40 (res .cse41 (res .cse42 (=+1 .cse40) (res .cse43 (not+ .cse41) (farkas 1 .cse42 1 .cse43))) (res .cse42 (let-proof ((.cse44 (total n 0))) (res .cse43 .cse44 (res .cse43 (res .cse42 .cse44 (farkas 1 .cse43 1 .cse42)) (not- .cse41)))) (=+2 .cse40))) (cong (and .cse42 .cse32) (and .cse41 .cse33))))) (cong (and .cse30 .cse15) (and .cse31 .cse2)))) (cong (=> .cse14 .cse13) (=> .cse3 .cse13)))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse12) (=> .cse45 .cse4)))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse11) (=> .cse46 .cse5)))) (cong (not .cse7) (not .cse6))) (=-2 .cse10)))) (not- .cse8))) (res .cse9 (assume .cse9) (not- .cse9)))))))))))))))))))) (and- 1 .cse3))))))) (and- 1 .cse2)))))) (res .cse47 .cse48 (=-2 .cse47))) :proves (+ .cse0) :input) (! (let ((.cse50 (not .cse1))) (res .cse1 (let ((.cse49 (not .cse0))) (res .cse49 (res .cse50 (not+ .cse50) (let ((.cse51 (= .cse50 .cse49))) (res .cse51 (res .cse47 .cse48 (cong (not .cse1) (not .cse0))) (=-2 .cse51)))) (not- .cse49))) (res .cse50 (assume .cse50) (not- .cse50)))) :proves (- .cse0) :input)))))) :proves () :rup)

