unsat
(! (let ((.cse61 (<= r@1 0)) (.cse69 (ControlFlow 0 2)) (.cse49 (* 2 x@@1))) (let ((.cse52 (<= .cse49 0)) (.cse64 (= .cse69 (- 1))) (.cse58 (not .cse61))) (let ((.cse19 (and (= r@1 1) (= (ControlFlow 0 4) 2))) (.cse2 (=> .cse64 .cse58)) (.cse26 (not .cse52))) (let ((.cse22 (not .cse26)) (.cse1 (=> .cse19 .cse2))) (let ((.cse0 (=> .cse22 .cse1))) (let-proof ((.cse3 (! (let ((.cse72 (= (- 1) .cse69))) (let ((.cse73 (= .cse64 .cse72))) (let-proof ((.cse74 (res .cse72 (res .cse64 (=+1 .cse73) (symm (- 1) .cse69)) (res .cse64 (symm .cse69 (- 1)) (=+2 .cse73))))) (res .cse72 (! (res .cse64 (=>+ 0 .cse2) (res .cse73 .cse74 (=-2 .cse73))) :proves (+ .cse2 + .cse72) :input) (! (let ((.cse76 (not .cse64))) (res .cse64 (let ((.cse75 (not .cse72))) (res .cse75 (res .cse76 (not+ .cse76) (let ((.cse77 (= .cse76 .cse75))) (res .cse77 (res .cse73 .cse74 (cong (not .cse64) (not .cse72))) (=-2 .cse77)))) (not- .cse75))) (res .cse76 (assume .cse76) (not- .cse76)))) :proves (- .cse72) :input))))) :proves (+ .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 .cse3 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse71 (ControlFlow 0 5))) (let ((.cse27 (= .cse71 4))) (let ((.cse4 (=> .cse27 .cse0))) (res .cse4 (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse0) :input) (! (let ((.cse36 (= r@0 0))) (let ((.cse34 (and .cse26 .cse36)) (.cse32 (and (= r@1 r@0) (= (ControlFlow 0 3) 2)))) (let ((.cse31 (and .cse34 .cse32))) (let ((.cse45 (= .cse71 3)) (.cse6 (=> .cse31 .cse2))) (let ((.cse5 (=> .cse45 .cse6))) (res .cse5 (! (res .cse6 (! (res .cse2 .cse3 (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse2) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (! (let ((.cse7 (and .cse5 .cse4))) (res .cse7 (and+ .cse7) (let ((.cse70 (= (ControlFlow 0 0) 5))) (let ((.cse8 (=> .cse70 .cse7))) (res .cse8 (=>+ 1 .cse8) (let ((.cse41 (- 0 x@@1))) (let ((.cse65 (- 0 1)) (.cse37 (foo2 x@@1 .cse41))) (let ((.cse25 (foo x@@1)) (.cse35 (= r@0 .cse37)) (.cse63 (= .cse69 .cse65)) (.cse59 (> r@1 0))) (let ((.cse20 (=> .cse63 .cse59)) (.cse33 (and .cse25 .cse35))) (let ((.cse30 (and .cse33 .cse32)) (.cse21 (not .cse25)) (.cse16 (=> .cse19 .cse20))) (let ((.cse15 (=> .cse21 .cse16)) (.cse29 (=> .cse30 .cse20))) (let ((.cse28 (=> .cse45 .cse29)) (.cse14 (=> .cse27 .cse15))) (let ((.cse13 (and .cse28 .cse14))) (let ((.cse9 (=> .cse70 .cse13))) (let ((.cse11 (not .cse9))) (res .cse9 (let ((.cse10 (not .cse8))) (res .cse10 (res .cse11 (not+ .cse11) (let ((.cse12 (= .cse11 .cse10))) (res .cse12 (res (= .cse9 .cse8) (res (= .cse13 .cse7) (let ((.cse42 (= 0 0))) (let-proof ((.cse43 (refl 0))) (let ((.cse17 (= .cse20 .cse2)) (.cse23 (= .cse25 .cse26))) (let-proof ((.cse18 (let ((.cse56 (= .cse59 .cse58))) (res .cse56 (let ((.cse60 (< 0 r@1))) (let ((.cse57 (= .cse59 .cse60))) (res .cse57 (>def r@1 0) (res .cse58 (res .cse59 (=+1 .cse56) (res .cse60 (=-2 .cse57) (res .cse61 (not+ .cse58) (farkas 1 .cse60 1 .cse61)))) (res .cse59 (res .cse60 (let-proof ((.cse62 (total r@1 0))) (res .cse61 .cse62 (res .cse61 (res .cse60 .cse62 (farkas 1 .cse61 1 .cse60)) (not- .cse58)))) (=-1 .cse57)) (=+2 .cse56)))))) (res (= .cse63 .cse64) (res (= .cse65 (- 1)) (let ((.cse66 (* (- 1) 1))) (res (= .cse66 (- 1)) (poly* .cse66 (- 1)) (res .cse42 .cse43 (let ((.cse67 (+ 0 .cse66)) (.cse68 (+ 0 (- 1)))) (res (= .cse67 .cse68) (cong (+ 0 .cse66) (+ 0 (- 1))) (res (= .cse65 .cse67) (-def 0 1) (res (= .cse68 (- 1)) (poly+ .cse68 (- 1)) (trans .cse65 .cse67 .cse68 (- 1))))))))) (res (= .cse69 .cse69) (refl .cse69) (cong (= .cse69 .cse65) (= .cse69 (- 1))))) (cong (=> .cse63 .cse59) (=> .cse64 .cse58)))))) (.cse24 (let ((.cse54 (foo2 x@@1 x@@1))) (let ((.cse46 (> .cse54 0))) (res (= .cse46 .cse26) (let ((.cse50 (> .cse49 0))) (let ((.cse47 (= .cse50 .cse26))) (res .cse47 (let ((.cse51 (< 0 .cse49))) (let ((.cse48 (= .cse50 .cse51))) (res .cse48 (>def .cse49 0) (res .cse26 (res .cse50 (=+1 .cse47) (res .cse51 (=-2 .cse48) (res .cse52 (not+ .cse26) (farkas 1 .cse51 1 .cse52)))) (res .cse50 (res .cse51 (let-proof ((.cse53 (total .cse49 0))) (res .cse52 .cse53 (res .cse52 (res .cse51 .cse53 (farkas 1 .cse52 1 .cse51)) (not- .cse26)))) (=-1 .cse48)) (=+2 .cse47)))))) (res (= .cse46 .cse50) (res .cse42 .cse43 (res (= .cse54 .cse49) (let ((.cse55 (+ x@@1 x@@1))) (res (= .cse55 .cse49) (poly+ .cse55 .cse49) (res (= .cse54 .cse55) (expand (foo2 x@@1 x@@1)) (trans .cse54 .cse55 .cse49)))) (cong (> .cse54 0) (> .cse49 0)))) (trans .cse46 .cse50 .cse26))))) (res (= .cse25 .cse46) (expand (foo x@@1)) (trans .cse25 .cse46 .cse26))))))) (res (= .cse14 .cse4) (res (= .cse15 .cse0) (res (= .cse16 .cse1) (res .cse17 .cse18 (res (= .cse19 .cse19) (refl .cse19) (cong (=> .cse19 .cse20) (=> .cse19 .cse2)))) (res (= .cse21 .cse22) (res .cse23 .cse24 (cong (not .cse25) (not .cse26))) (cong (=> .cse21 .cse16) (=> .cse22 .cse1)))) (res (= .cse27 .cse27) (refl .cse27) (cong (=> .cse27 .cse15) (=> .cse27 .cse0)))) (res (= .cse28 .cse5) (res (= .cse29 .cse6) (res .cse17 .cse18 (res (= .cse30 .cse31) (res (= .cse32 .cse32) (refl .cse32) (res (= .cse33 .cse34) (res (= .cse35 .cse36) (res (= .cse37 0) (let ((.cse40 (* (- 1) x@@1))) (let ((.cse38 (+ x@@1 .cse40))) (res (= .cse38 0) (poly+ .cse38 0) (res (= .cse37 .cse38) (let ((.cse39 (foo2 x@@1 .cse40))) (res (= .cse39 .cse38) (expand (foo2 x@@1 .cse40)) (res (= .cse37 .cse39) (res (= .cse41 .cse40) (res (= .cse40 .cse40) (refl .cse40) (res .cse42 .cse43 (let ((.cse44 (+ 0 .cse40))) (res (= .cse44 .cse44) (cong (+ 0 .cse40) (+ 0 .cse40)) (res (= .cse41 .cse44) (-def 0 x@@1) (res (= .cse44 .cse40) (poly+ .cse44 .cse40) (trans .cse41 .cse44 .cse44 .cse40))))))) (res (= x@@1 x@@1) (refl x@@1) (cong (foo2 x@@1 .cse41) (foo2 x@@1 .cse40)))) (trans .cse37 .cse39 .cse38)))) (trans .cse37 .cse38 0))))) (res (= r@0 r@0) (refl r@0) (cong (= r@0 .cse37) (= r@0 0)))) (res .cse23 .cse24 (cong (and .cse25 .cse35) (and .cse26 .cse36)))) (cong (and .cse33 .cse32) (and .cse34 .cse32)))) (cong (=> .cse30 .cse20) (=> .cse31 .cse2)))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse29) (=> .cse45 .cse6)))) (cong (and .cse28 .cse14) (and .cse5 .cse4)))))))) (res (= .cse70 .cse70) (refl .cse70) (cong (=> .cse70 .cse13) (=> .cse70 .cse7)))) (cong (not .cse9) (not .cse8))) (=-2 .cse12)))) (not- .cse10))) (res .cse11 (assume .cse11) (not- .cse11)))))))))))))))))) :proves (- .cse5 - .cse4) :input))))))) :proves (- .cse4) :rup)))))))))))) :proves () :rup)

