unsat
(! (let ((.cse35 (ControlFlow 0 2))) (let ((.cse2 (= .cse35 (- 3))) (.cse0 (= (- 3) .cse35))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 3) .cse35)) (res .cse2 (symm .cse35 (- 3)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse39 (=> b3 false))) (let ((.cse1 (=> .cse2 .cse39))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse26 (= .cse35 (- 1))) (.cse7 (=> b4 true))) (let ((.cse6 (=> .cse26 .cse7))) (let ((.cse5 (=> .cse39 .cse6))) (let-proof ((.cse8 true+)) (res .cse5 (! (res .cse6 (! (res .cse7 (! (res true .cse8 (=>+ 1 .cse7)) :proves (+ .cse7) :input) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (! (let ((.cse9 (and .cse1 .cse5))) (res .cse9 (and+ .cse9) (let ((.cse48 (and (=> b2 (= v1 1)) (= (ControlFlow 0 4) 2)))) (let ((.cse10 (=> .cse48 .cse9))) (res .cse10 (=>+ 1 .cse10) (let ((.cse49 (=> b1 (= v1 0)))) (let ((.cse11 (=> .cse49 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse50 (= (ControlFlow 0 0) 4))) (let ((.cse12 (=> .cse50 .cse11))) (res .cse12 (=>+ 1 .cse12) (let ((.cse24 (= 1 1)) (.cse27 (- 0 1))) (let ((.cse47 (= 1 0)) (.cse42 (- 0 3)) (.cse25 (= .cse35 .cse27)) (.cse22 (=> b4 .cse24))) (let ((.cse21 (=> .cse25 .cse22)) (.cse41 (= .cse35 .cse42)) (.cse38 (=> b3 .cse47))) (let ((.cse40 (=> .cse41 .cse38)) (.cse20 (=> .cse38 .cse21))) (let ((.cse19 (and .cse40 .cse20))) (let ((.cse18 (=> .cse48 .cse19))) (let ((.cse17 (=> .cse49 .cse18))) (let ((.cse13 (=> .cse50 .cse17))) (let ((.cse15 (not .cse13))) (res .cse13 (let ((.cse14 (not .cse12))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res (= .cse13 .cse12) (res (= .cse17 .cse11) (res (= .cse18 .cse10) (res (= .cse19 .cse9) (let ((.cse36 (= .cse38 .cse39)) (.cse29 (= 0 0)) (.cse33 (= .cse35 .cse35))) (let-proof ((.cse37 (let ((.cse46 (= .cse47 false))) (res .cse46 (res false (res .cse47 (=+1 .cse46) (farkas 1 .cse47)) false-) (res (= b3 b3) (refl b3) (cong (=> b3 .cse47) (=> b3 false)))))) (.cse30 (refl 0)) (.cse34 (refl .cse35))) (res (= .cse20 .cse5) (res (= .cse21 .cse6) (res (= .cse22 .cse7) (let ((.cse23 (= .cse24 true))) (res .cse23 (res true .cse8 (res .cse24 (refl 1) (=+2 .cse23))) (res (= b4 b4) (refl b4) (cong (=> b4 .cse24) (=> b4 true))))) (res (= .cse25 .cse26) (res (= .cse27 (- 1)) (let ((.cse28 (* (- 1) 1))) (res (= .cse28 (- 1)) (poly* .cse28 (- 1)) (res .cse29 .cse30 (let ((.cse31 (+ 0 .cse28)) (.cse32 (+ 0 (- 1)))) (res (= .cse31 .cse32) (cong (+ 0 .cse28) (+ 0 (- 1))) (res (= .cse27 .cse31) (-def 0 1) (res (= .cse32 (- 1)) (poly+ .cse32 (- 1)) (trans .cse27 .cse31 .cse32 (- 1))))))))) (res .cse33 .cse34 (cong (= .cse35 .cse27) (= .cse35 (- 1))))) (cong (=> .cse25 .cse22) (=> .cse26 .cse7)))) (res .cse36 .cse37 (cong (=> .cse38 .cse21) (=> .cse39 .cse6)))) (res (= .cse40 .cse1) (res .cse36 .cse37 (res (= .cse41 .cse2) (res (= .cse42 (- 3)) (let ((.cse43 (* (- 1) 3))) (res (= .cse43 (- 3)) (poly* .cse43 (- 3)) (res .cse29 .cse30 (let ((.cse44 (+ 0 .cse43)) (.cse45 (+ 0 (- 3)))) (res (= .cse44 .cse45) (cong (+ 0 .cse43) (+ 0 (- 3))) (res (= .cse42 .cse44) (-def 0 3) (res (= .cse45 (- 3)) (poly+ .cse45 (- 3)) (trans .cse42 .cse44 .cse45 (- 3))))))))) (res .cse33 .cse34 (cong (= .cse35 .cse42) (= .cse35 (- 3))))) (cong (=> .cse41 .cse38) (=> .cse2 .cse39)))) (cong (and .cse40 .cse20) (and .cse1 .cse5)))))) (res (= .cse48 .cse48) (refl .cse48) (cong (=> .cse48 .cse19) (=> .cse48 .cse9)))) (res (= .cse49 .cse49) (refl .cse49) (cong (=> .cse49 .cse18) (=> .cse49 .cse10)))) (res (= .cse50 .cse50) (refl .cse50) (cong (=> .cse50 .cse17) (=> .cse50 .cse11)))) (cong (not .cse13) (not .cse12))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (assume .cse15) (not- .cse15))))))))))))))))))))))) :proves (- .cse1 - .cse5) :input)))))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse52 (not .cse2))) (res .cse2 (let ((.cse51 (not .cse0))) (res .cse51 (res .cse52 (not+ .cse52) (let ((.cse53 (= .cse52 .cse51))) (res .cse53 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse53)))) (not- .cse51))) (res .cse52 (assume .cse52) (not- .cse52)))) :proves (- .cse0) :input)))))) :proves () :rup)

