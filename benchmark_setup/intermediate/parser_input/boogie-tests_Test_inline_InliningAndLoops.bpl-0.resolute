unsat
(! (let ((.cse50 (ControlFlow 0 4))) (let ((.cse45 (= .cse50 (- 3))) (.cse0 (= (- 3) .cse50))) (let ((.cse61 (= .cse45 .cse0))) (let-proof ((.cse62 (res .cse0 (res .cse45 (=+1 .cse61) (symm (- 3) .cse50)) (res .cse45 (symm .cse50 (- 3)) (=+2 .cse61))))) (res .cse0 (! (let ((.cse51 (= n@0 2))) (let ((.cse1 (and .cse51 .cse45))) (res .cse1 (! (let ((.cse42 (* 2 recent@0))) (let ((.cse40 (= sum@0 .cse42))) (let ((.cse2 (=> .cse1 .cse40))) (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + .cse1) :input) (! (let ((.cse60 (ControlFlow 0 6))) (let ((.cse52 (= .cse60 4))) (let ((.cse3 (=> .cse52 .cse2))) (res .cse3 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse2) :input) (! (let ((.cse4 (=> (= .cse60 5) true))) (let-proof ((.cse5 true+)) (res .cse4 (! (res true .cse5 (=>+ 1 .cse4)) :proves (+ .cse4) :input) (let ((.cse56 (+ N (* (- 1) n@0)))) (let ((.cse28 (<= .cse56 0)) (.cse7 (and .cse3 .cse4))) (let ((.cse6 (=> .cse28 .cse7))) (res .cse6 (! (res .cse7 (and+ .cse7) (=>+ 1 .cse6)) :proves (+ .cse6 - .cse3 - .cse4) :input) (! (let ((.cse59 (ControlFlow 0 7))) (let ((.cse54 (= .cse59 6))) (let ((.cse8 (=> .cse54 .cse6))) (res .cse8 (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse6) :input) (! (let ((.cse26 (not .cse28)) (.cse24 (= (ControlFlow 0 2) 1))) (let ((.cse23 (and .cse26 .cse24))) (let ((.cse33 (= .cse59 2)) (.cse10 (=> .cse23 true))) (let ((.cse9 (=> .cse33 .cse10))) (res .cse9 (! (res .cse10 (! (res true .cse5 (=>+ 1 .cse10)) :proves (+ .cse10) :input) (! (=>+ 1 .cse9) :proves (+ .cse9 - .cse10) :input)) :proves (+ .cse9) :rup) (! (let ((.cse11 (and .cse8 .cse9))) (res .cse11 (and+ .cse11) (let ((.cse57 (= N 2))) (let ((.cse12 (=> .cse57 .cse11))) (res .cse12 (=>+ 1 .cse12) (let ((.cse58 (= (ControlFlow 0 0) 7))) (let ((.cse13 (=> .cse58 .cse12))) (res .cse13 (=>+ 1 .cse13) (let ((.cse46 (- 0 3))) (let ((.cse41 (+ recent@0 recent@0)) (.cse44 (= .cse50 .cse46))) (let ((.cse43 (and .cse51 .cse44)) (.cse39 (= sum@0 .cse41))) (let ((.cse38 (=> .cse43 .cse39))) (let ((.cse27 (< n@0 N)) (.cse37 (=> .cse52 .cse38))) (let ((.cse30 (<= N n@0)) (.cse36 (and .cse37 .cse4)) (.cse22 (and .cse27 .cse24))) (let ((.cse21 (=> .cse22 true)) (.cse35 (=> .cse30 .cse36))) (let ((.cse34 (=> .cse54 .cse35)) (.cse20 (=> .cse33 .cse21))) (let ((.cse19 (and .cse34 .cse20))) (let ((.cse18 (=> .cse57 .cse19))) (let ((.cse14 (=> .cse58 .cse18))) (let ((.cse16 (not .cse14))) (res .cse14 (let ((.cse15 (not .cse13))) (res .cse15 (res .cse16 (not+ .cse16) (let ((.cse17 (= .cse16 .cse15))) (res .cse17 (res (= .cse14 .cse13) (res (= .cse18 .cse12) (res (= .cse19 .cse11) (let-proof ((.cse32 (let ((.cse55 (< 0 .cse56))) (res .cse55 (total .cse56 0) (farkas 1 .cse30 1 .cse55)))) (.cse31 (total N n@0)) (.cse29 (farkas 1 .cse27 1 .cse28))) (res (= .cse20 .cse9) (res (= .cse21 .cse10) (res (= true true) (refl true) (res (= .cse22 .cse23) (res (= .cse24 .cse24) (refl .cse24) (let ((.cse25 (= .cse27 .cse26))) (res .cse25 (res .cse26 (res .cse27 (=+1 .cse25) (res .cse28 (not+ .cse26) .cse29)) (res .cse27 (res .cse30 .cse31 (res .cse28 .cse32 (not- .cse26))) (=+2 .cse25))) (cong (and .cse27 .cse24) (and .cse26 .cse24))))) (cong (=> .cse22 true) (=> .cse23 true)))) (res (= .cse33 .cse33) (refl .cse33) (cong (=> .cse33 .cse21) (=> .cse33 .cse10)))) (res (= .cse34 .cse8) (res (= .cse35 .cse6) (res (= .cse36 .cse7) (res (= .cse4 .cse4) (refl .cse4) (res (= .cse37 .cse3) (res (= .cse38 .cse2) (res (= .cse39 .cse40) (res (= .cse41 .cse42) (poly+ .cse41 .cse42) (res (= sum@0 sum@0) (refl sum@0) (cong (= sum@0 .cse41) (= sum@0 .cse42)))) (res (= .cse43 .cse1) (res (= .cse44 .cse45) (res (= .cse46 (- 3)) (let ((.cse47 (* (- 1) 3))) (res (= .cse47 (- 3)) (poly* .cse47 (- 3)) (res (= 0 0) (refl 0) (let ((.cse48 (+ 0 .cse47)) (.cse49 (+ 0 (- 3)))) (res (= .cse48 .cse49) (cong (+ 0 .cse47) (+ 0 (- 3))) (res (= .cse46 .cse48) (-def 0 3) (res (= .cse49 (- 3)) (poly+ .cse49 (- 3)) (trans .cse46 .cse48 .cse49 (- 3))))))))) (res (= .cse50 .cse50) (refl .cse50) (cong (= .cse50 .cse46) (= .cse50 (- 3))))) (res (= .cse51 .cse51) (refl .cse51) (cong (and .cse51 .cse44) (and .cse51 .cse45)))) (cong (=> .cse43 .cse39) (=> .cse1 .cse40)))) (res (= .cse52 .cse52) (refl .cse52) (cong (=> .cse52 .cse38) (=> .cse52 .cse2)))) (cong (and .cse37 .cse4) (and .cse3 .cse4)))) (let ((.cse53 (= .cse30 .cse28))) (res .cse53 (res .cse28 (res .cse30 (=+1 .cse53) .cse32) (res .cse30 (res .cse27 .cse31 .cse29) (=+2 .cse53))) (cong (=> .cse30 .cse36) (=> .cse28 .cse7))))) (res (= .cse54 .cse54) (refl .cse54) (cong (=> .cse54 .cse35) (=> .cse54 .cse6)))) (cong (and .cse34 .cse20) (and .cse8 .cse9))))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse19) (=> .cse57 .cse11)))) (res (= .cse58 .cse58) (refl .cse58) (cong (=> .cse58 .cse18) (=> .cse58 .cse12)))) (cong (not .cse14) (not .cse13))) (=-2 .cse17)))) (not- .cse15))) (res .cse16 (assume .cse16) (not- .cse16))))))))))))))))))))))) :proves (- .cse8 - .cse9) :input)))))) :proves (- .cse8) :rup))))) :proves (- .cse6) :rup)))))))) :proves (- .cse3) :rup))))) :proves (- .cse2) :rup))))) :proves (+ .cse1) :rup) (! (res .cse45 (and- 1 .cse1) (res .cse61 .cse62 (=-2 .cse61))) :proves (- .cse1 + .cse0) :input)))) :proves (+ .cse0) :rup) (! (let ((.cse64 (not .cse45))) (res .cse45 (let ((.cse63 (not .cse0))) (res .cse63 (res .cse64 (not+ .cse64) (let ((.cse65 (= .cse64 .cse63))) (res .cse65 (res .cse61 .cse62 (cong (not .cse45) (not .cse0))) (=-2 .cse65)))) (not- .cse63))) (res .cse64 (assume .cse64) (not- .cse64)))) :proves (- .cse0) :input)))))) :proves () :rup)

