unsat
(! (let ((.cse112 (+ y (* (- 1) x))) (.cse105 (+ x (* (- 1) y)))) (let ((.cse102 (<= .cse105 0)) (.cse109 (<= .cse112 0))) (let ((.cse107 (not .cse109)) (.cse99 (not .cse102))) (let ((.cse96 (or .cse107 .cse99)) (.cse0 (= x y))) (let ((.cse4 (or .cse96 .cse0)) (.cse2 (not .cse0))) (let ((.cse1 (or .cse4 .cse2))) (let-proof ((.cse3 (! (let ((.cse41 (* (- 1) a))) (let ((.cse9 (+ b .cse41))) (let ((.cse72 (ControlFlow 0 2)) (.cse114 (+ a (* (- 1) b))) (.cse5 (<= .cse9 0))) (let ((.cse14 (and .cse1 .cse5)) (.cse12 (<= .cse114 0)) (.cse63 (= .cse72 (- 1)))) (let ((.cse25 (=> .cse63 t@0)) (.cse78 (= .cse72 (- 3))) (.cse16 (and .cse14 .cse12))) (let ((.cse11 (=> .cse78 .cse16)) (.cse24 (=> .cse16 .cse25)) (.cse18 (xor t@0 .cse16))) (let ((.cse21 (not .cse18)) (.cse26 (and .cse11 .cse24)) (.cse42 (= a b))) (let ((.cse43 (and .cse42 (= (ControlFlow 0 4) 2))) (.cse20 (=> .cse21 .cse26))) (let ((.cse35 (< 0 .cse114)) (.cse49 (< b a)) (.cse47 (< 0 .cse9)) (.cse48 (< a b)) (.cse27 (=> .cse43 .cse20))) (let-proof ((.cse19 (xor+ (t@0 .cse16) (t@0) (.cse16))) (.cse22 (not- .cse21)) (.cse36 (total .cse114 0))) (let ((.cse39 (= 0 .cse9)) (.cse6 (= .cse9 0))) (let-proof ((.cse28 (let ((.cse113 (= (ControlFlow 0 0) 4))) (let ((.cse50 (=> .cse113 .cse27))) (res .cse50 (=>+ 1 .cse50) (let ((.cse108 (< x y)) (.cse100 (> x y))) (let ((.cse95 (or .cse108 .cse100))) (let ((.cse94 (or .cse95 .cse0))) (let ((.cse64 (- 0 1)) (.cse93 (or .cse94 .cse2)) (.cse91 (>= a b))) (let ((.cse88 (and .cse93 .cse91)) (.cse87 (<= a b)) (.cse79 (- 0 3)) (.cse62 (= .cse72 .cse64))) (let ((.cse59 (=> .cse62 t@0)) (.cse77 (= .cse72 .cse79)) (.cse75 (and .cse88 .cse87))) (let ((.cse76 (=> .cse77 .cse75)) (.cse58 (=> .cse75 .cse59))) (let ((.cse83 (= t@0 .cse75)) (.cse57 (and .cse76 .cse58))) (let ((.cse56 (=> .cse83 .cse57))) (let ((.cse55 (=> .cse43 .cse56))) (let ((.cse51 (=> .cse113 .cse55))) (let ((.cse53 (not .cse51))) (res .cse51 (let ((.cse52 (not .cse50))) (res .cse52 (res .cse53 (not+ .cse53) (let ((.cse54 (= .cse53 .cse52))) (res .cse54 (res (= .cse51 .cse50) (res (= .cse55 .cse27) (res (= .cse56 .cse20) (let ((.cse73 (= .cse75 .cse16)) (.cse60 (= t@0 t@0))) (let-proof ((.cse74 (let ((.cse86 (= .cse87 .cse12))) (res .cse86 (res .cse12 (res .cse87 (=+1 .cse86) (res .cse35 .cse36 (farkas 1 .cse87 1 .cse35))) (res .cse87 (res .cse49 (total a b) (farkas 1 .cse49 1 .cse12)) (=+2 .cse86))) (res (= .cse88 .cse14) (let ((.cse89 (= .cse91 .cse5))) (res .cse89 (let ((.cse92 (<= b a))) (let ((.cse90 (= .cse91 .cse92))) (res .cse90 (>=def a b) (res .cse5 (res .cse91 (=+1 .cse89) (res .cse92 (=-2 .cse90) (res .cse47 (total .cse9 0) (farkas 1 .cse92 1 .cse47)))) (res .cse91 (res .cse92 (res .cse48 (total b a) (farkas 1 .cse48 1 .cse5)) (=-1 .cse90)) (=+2 .cse89)))))) (res (= .cse93 .cse1) (res (= .cse2 .cse2) (refl .cse2) (res (= .cse94 .cse4) (res (= .cse0 .cse0) (refl .cse0) (res (= .cse95 .cse96) (let ((.cse97 (= .cse100 .cse99))) (res .cse97 (let ((.cse101 (< y x))) (let ((.cse98 (= .cse100 .cse101))) (res .cse98 (>def x y) (res .cse99 (res .cse100 (=+1 .cse97) (res .cse101 (=-2 .cse98) (res .cse102 (not+ .cse99) (farkas 1 .cse101 1 .cse102)))) (res .cse100 (res .cse101 (let ((.cse103 (<= x y))) (res .cse103 (total x y) (res .cse102 (let ((.cse104 (< 0 .cse105))) (res .cse104 (total .cse105 0) (farkas 1 .cse103 1 .cse104))) (not- .cse99)))) (=-1 .cse98)) (=+2 .cse97)))))) (let ((.cse106 (= .cse108 .cse107))) (res .cse106 (res .cse107 (res .cse108 (=+1 .cse106) (res .cse109 (not+ .cse107) (farkas 1 .cse108 1 .cse109))) (res .cse108 (let ((.cse110 (<= y x))) (res .cse110 (total y x) (res .cse109 (let ((.cse111 (< 0 .cse112))) (res .cse111 (total .cse112 0) (farkas 1 .cse110 1 .cse111))) (not- .cse107)))) (=+2 .cse106))) (cong (or .cse108 .cse100) (or .cse107 .cse99)))))) (cong (or .cse95 .cse0) (or .cse96 .cse0)))) (cong (or .cse94 .cse2) (or .cse4 .cse2)))) (cong (and .cse93 .cse91) (and .cse1 .cse5))))) (cong (and .cse88 .cse87) (and .cse14 .cse12)))))) (.cse61 (refl t@0))) (res (= .cse57 .cse26) (let ((.cse66 (= 0 0)) (.cse70 (= .cse72 .cse72))) (let-proof ((.cse67 (refl 0)) (.cse71 (refl .cse72))) (res (= .cse58 .cse24) (res (= .cse59 .cse25) (res .cse60 .cse61 (res (= .cse62 .cse63) (res (= .cse64 (- 1)) (let ((.cse65 (* (- 1) 1))) (res (= .cse65 (- 1)) (poly* .cse65 (- 1)) (res .cse66 .cse67 (let ((.cse68 (+ 0 .cse65)) (.cse69 (+ 0 (- 1)))) (res (= .cse68 .cse69) (cong (+ 0 .cse65) (+ 0 (- 1))) (res (= .cse64 .cse68) (-def 0 1) (res (= .cse69 (- 1)) (poly+ .cse69 (- 1)) (trans .cse64 .cse68 .cse69 (- 1))))))))) (res .cse70 .cse71 (cong (= .cse72 .cse64) (= .cse72 (- 1))))) (cong (=> .cse62 t@0) (=> .cse63 t@0)))) (res .cse73 .cse74 (cong (=> .cse75 .cse59) (=> .cse16 .cse25)))) (res (= .cse76 .cse11) (res .cse73 .cse74 (res (= .cse77 .cse78) (res (= .cse79 (- 3)) (let ((.cse80 (* (- 1) 3))) (res (= .cse80 (- 3)) (poly* .cse80 (- 3)) (res .cse66 .cse67 (let ((.cse81 (+ 0 .cse80)) (.cse82 (+ 0 (- 3)))) (res (= .cse81 .cse82) (cong (+ 0 .cse80) (+ 0 (- 3))) (res (= .cse79 .cse81) (-def 0 3) (res (= .cse82 (- 3)) (poly+ .cse82 (- 3)) (trans .cse79 .cse81 .cse82 (- 3))))))))) (res .cse70 .cse71 (cong (= .cse72 .cse79) (= .cse72 (- 3))))) (cong (=> .cse77 .cse75) (=> .cse78 .cse16)))) (cong (and .cse76 .cse58) (and .cse11 .cse24)))))) (res (= .cse83 .cse21) (let ((.cse85 (= t@0 .cse16))) (let ((.cse84 (= .cse85 .cse21))) (res .cse84 (res .cse85 (res .cse18 (res t@0 (res .cse16 (=+1 .cse85) .cse19) (res .cse16 (xor+ (t@0 .cse16) (.cse16) (t@0)) (=+2 .cse85))) (res .cse21 (=+1 .cse84) .cse22)) (res .cse18 (res .cse21 (not+ .cse21) (=+2 .cse84)) (res t@0 (res .cse16 (xor+ (t@0) (.cse16) (t@0 .cse16)) (=-1 .cse85)) (res .cse16 (=-2 .cse85) (xor- (t@0) (.cse16) (t@0 .cse16)))))) (res (= .cse83 .cse85) (res .cse73 .cse74 (res .cse60 .cse61 (cong (= t@0 .cse75) (= t@0 .cse16)))) (trans .cse83 .cse85 .cse21))))) (cong (=> .cse83 .cse57) (=> .cse21 .cse26)))))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse56) (=> .cse43 .cse20)))) (res (= .cse113 .cse113) (refl .cse113) (cong (=> .cse113 .cse55) (=> .cse113 .cse27)))) (cong (not .cse51) (not .cse50))) (=-2 .cse54)))) (not- .cse52))) (res .cse53 (assume .cse53) (not- .cse53))))))))))))))))))) (.cse40 (symm 0 .cse9))) (let-proof ((.cse7 (! (res .cse42 (res .cse43 (res .cse27 (=>+ 0 .cse27) .cse28) (and- 0 .cse43)) (let ((.cse44 (= .cse42 .cse6))) (res .cse44 (res .cse6 (res .cse42 (=+1 .cse44) (let ((.cse45 (= b a))) (res .cse45 (symm b a) (let ((.cse46 (< .cse9 0))) (res .cse46 (res .cse47 (trichotomy .cse9 0) (farkas 1 .cse45 1 .cse47)) (farkas 1 .cse42 1 .cse46)))))) (res .cse42 (res .cse39 .cse40 (res .cse48 (res .cse49 (trichotomy a b) (farkas 1 .cse39 1 .cse49)) (farkas 1 .cse6 1 .cse48))) (=+2 .cse44))) (=-2 .cse44)))) :proves (+ .cse6) :input))) (res .cse5 (! (res .cse6 .cse7 (! (let ((.cse8 (<= 1 .cse9))) (res .cse8 (total-int .cse9 0) (farkas 1 .cse6 1 .cse8))) :proves (- .cse6 + .cse5) :LA (1 (- 1)))) :proves (+ .cse5) :rup) (let ((.cse38 (+ b .cse41 1))) (let ((.cse10 (<= .cse38 0))) (res .cse10 (let-proof ((.cse13 (let ((.cse29 (not .cse10))) (let-proof ((.cse30 (not+ .cse29))) (res .cse29 .cse30 (let ((.cse31 (not .cse29))) (res .cse31 (let ((.cse32 (not .cse12))) (res .cse32 (not+ .cse32) (let ((.cse33 (= .cse32 .cse31))) (res .cse33 (let ((.cse34 (= .cse12 .cse29))) (res .cse34 (res .cse29 (res .cse12 (=+1 .cse34) (res .cse10 .cse30 (farkas 1 .cse12 1 .cse10))) (res .cse12 (res .cse35 .cse36 (res .cse10 (let ((.cse37 (<= 1 .cse38))) (res .cse37 (total-int .cse38 0) (farkas 1 .cse35 1 .cse37))) (not- .cse29))) (=+2 .cse34))) (cong (not .cse12) (not .cse29)))) (=-2 .cse33))))) (not- .cse31))))))) (.cse15 (and+ .cse14)) (.cse17 (and+ .cse16))) (res .cse11 (! (res .cse12 .cse13 (res .cse14 .cse15 (res .cse16 .cse17 (=>+ 1 .cse11)))) :proves (+ .cse11 - .cse1 - .cse5 + .cse10) :input) (let-proof ((.cse23 (res .cse27 (=>+ 1 .cse27) .cse28))) (res t@0 (! (res .cse12 .cse13 (res .cse14 .cse15 (res .cse16 .cse17 (res .cse18 .cse19 (res .cse20 (res .cse21 (=>+ 0 .cse20) .cse22) .cse23))))) :proves (- .cse1 + t@0 - .cse5 + .cse10) :input) (res .cse24 (res .cse25 (! (=>+ 1 .cse25) :proves (+ .cse25 - t@0) :input) (! (=>+ 1 .cse24) :proves (+ .cse24 - .cse25) :input)) (! (res .cse26 (and+ .cse26) (res .cse20 (=>+ 1 .cse20) .cse23)) :proves (- .cse11 - .cse24) :input)))))) (! (res .cse6 .cse7 (! (res .cse39 .cse40 (farkas 1 .cse10 1 .cse39)) :proves (- .cse10 - .cse6) :LA (1 (- 1)))) :proves (- .cse10) :rup)))))))))))))))))) :proves (- .cse1) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 (not+ .cse2) (or+ 1 .cse1)) :proves (+ .cse1 + .cse0) :input) .cse3) :proves (+ .cse0) :rup) (res .cse4 (! (or+ 1 .cse4) :proves (+ .cse4 - .cse0) :input) (! (res .cse1 (! (or+ 0 .cse1) :proves (+ .cse1 - .cse4) :input) .cse3) :proves (- .cse4) :rup)))))))))) :proves () :rup)

