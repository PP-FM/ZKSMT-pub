unsat
(! (let ((.cse52 (ControlFlow 0 2)) (.cse3 (<= call1formal@r@0 0))) (let ((.cse70 (* (- 1) call1formal@r@0)) (.cse17 (not .cse3)) (.cse43 (= .cse52 (- 1)))) (let ((.cse0 (and .cse17 .cse43)) (.cse5 (<= .cse70 0))) (let ((.cse12 (< 0 .cse70)) (.cse1 (=> .cse0 .cse5))) (let-proof ((.cse13 (total .cse70 0)) (.cse18 (not- .cse17))) (let-proof ((.cse2 (! (let ((.cse21 (<= n 0))) (let ((.cse22 (not .cse21))) (let ((.cse19 (=> .cse22 .cse1))) (res .cse19 (! (=>+ 1 .cse19) :proves (+ .cse19 - .cse1) :input) (! (let ((.cse61 (= .cse52 (- 3)))) (let ((.cse20 (=> .cse61 .cse22)) (.cse67 (= (ControlFlow 0 4) 2))) (let ((.cse24 (and .cse22 .cse67)) (.cse28 (and .cse20 .cse19))) (let ((.cse25 (=> .cse24 .cse28))) (let-proof ((.cse23 (not+ .cse22)) (.cse27 (not- .cse22))) (let-proof ((.cse26 (let ((.cse69 (= (ControlFlow 0 0) 4))) (let ((.cse29 (=> .cse69 .cse25))) (res .cse29 (=>+ 1 .cse29) (let ((.cse44 (- 0 1))) (let ((.cse54 (< 0 call1formal@r@0)) (.cse42 (= .cse52 .cse44))) (let ((.cse62 (- 0 3)) (.cse41 (and .cse54 .cse42)) (.cse39 (<= 0 call1formal@r@0))) (let ((.cse37 (=> .cse41 .cse39)) (.cse60 (= .cse52 .cse62)) (.cse58 (< 0 n))) (let ((.cse59 (=> .cse60 .cse58)) (.cse36 (=> .cse58 .cse37))) (let ((.cse66 (and .cse58 .cse67)) (.cse35 (and .cse59 .cse36))) (let ((.cse34 (=> .cse66 .cse35))) (let ((.cse30 (=> .cse69 .cse34))) (let ((.cse32 (not .cse30))) (res .cse30 (let ((.cse31 (not .cse29))) (res .cse31 (res .cse32 (not+ .cse32) (let ((.cse33 (= .cse32 .cse31))) (res .cse33 (res (= .cse30 .cse29) (res (= .cse34 .cse25) (let ((.cse56 (= .cse58 .cse22))) (let-proof ((.cse57 (res .cse22 (res .cse58 (=+1 .cse56) (res .cse21 .cse23 (farkas 1 .cse58 1 .cse21))) (res .cse58 (let-proof ((.cse68 (total n 0))) (res .cse21 .cse68 (res .cse21 (res .cse58 .cse68 (farkas 1 .cse21 1 .cse58)) .cse27))) (=+2 .cse56))))) (res (= .cse35 .cse28) (let ((.cse46 (= 0 0)) (.cse50 (= .cse52 .cse52))) (let-proof ((.cse47 (refl 0)) (.cse51 (refl .cse52))) (res (= .cse36 .cse19) (res (= .cse37 .cse1) (let ((.cse38 (= .cse39 .cse5))) (res .cse38 (res .cse5 (res .cse39 (=+1 .cse38) (res .cse12 .cse13 (farkas 1 .cse39 1 .cse12))) (res .cse39 (let ((.cse40 (< call1formal@r@0 0))) (res .cse40 (total 0 call1formal@r@0) (farkas 1 .cse40 1 .cse5))) (=+2 .cse38))) (res (= .cse41 .cse0) (res (= .cse42 .cse43) (res (= .cse44 (- 1)) (let ((.cse45 (* (- 1) 1))) (res (= .cse45 (- 1)) (poly* .cse45 (- 1)) (res .cse46 .cse47 (let ((.cse48 (+ 0 .cse45)) (.cse49 (+ 0 (- 1)))) (res (= .cse48 .cse49) (cong (+ 0 .cse45) (+ 0 (- 1))) (res (= .cse44 .cse48) (-def 0 1) (res (= .cse49 (- 1)) (poly+ .cse49 (- 1)) (trans .cse44 .cse48 .cse49 (- 1))))))))) (res .cse50 .cse51 (cong (= .cse52 .cse44) (= .cse52 (- 1))))) (let ((.cse53 (= .cse54 .cse17))) (res .cse53 (res .cse17 (res .cse54 (=+1 .cse53) (res .cse3 (not+ .cse17) (farkas 1 .cse54 1 .cse3))) (res .cse54 (let-proof ((.cse55 (total call1formal@r@0 0))) (res .cse3 .cse55 (res .cse3 (res .cse54 .cse55 (farkas 1 .cse3 1 .cse54)) .cse18))) (=+2 .cse53))) (cong (and .cse54 .cse42) (and .cse17 .cse43))))) (cong (=> .cse41 .cse39) (=> .cse0 .cse5))))) (res .cse56 .cse57 (cong (=> .cse58 .cse37) (=> .cse22 .cse1)))) (res (= .cse59 .cse20) (res .cse56 .cse57 (res (= .cse60 .cse61) (res (= .cse62 (- 3)) (let ((.cse63 (* (- 1) 3))) (res (= .cse63 (- 3)) (poly* .cse63 (- 3)) (res .cse46 .cse47 (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 3)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 3))) (res (= .cse62 .cse64) (-def 0 3) (res (= .cse65 (- 3)) (poly+ .cse65 (- 3)) (trans .cse62 .cse64 .cse65 (- 3))))))))) (res .cse50 .cse51 (cong (= .cse52 .cse62) (= .cse52 (- 3))))) (cong (=> .cse60 .cse58) (=> .cse61 .cse22)))) (cong (and .cse59 .cse36) (and .cse20 .cse19)))))) (res (= .cse66 .cse24) (res (= .cse67 .cse67) (refl .cse67) (res .cse56 .cse57 (cong (and .cse58 .cse67) (and .cse22 .cse67)))) (cong (=> .cse66 .cse35) (=> .cse24 .cse28)))))) (res (= .cse69 .cse69) (refl .cse69) (cong (=> .cse69 .cse34) (=> .cse69 .cse25)))) (cong (not .cse30) (not .cse29))) (=-2 .cse33)))) (not- .cse31))) (res .cse32 (assume .cse32) (not- .cse32))))))))))))))))) (res .cse20 (! (res .cse21 (! (res .cse22 .cse23 (=>+ 1 .cse20)) :proves (+ .cse20 + .cse21) :input) (! (res .cse24 (res .cse25 (=>+ 0 .cse25) .cse26) (res .cse22 (and- 0 .cse24) .cse27)) :proves (- .cse21) :input)) :proves (+ .cse20) :rup) (! (res .cse28 (and+ .cse28) (res .cse25 (=>+ 1 .cse25) .cse26)) :proves (- .cse20 - .cse19) :input)))))))) :proves (- .cse19) :rup))))) :proves (- .cse1) :rup))) (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (res .cse3 (! (let ((.cse15 (+ call1formal@r@0 1))) (let ((.cse4 (<= .cse15 0))) (res .cse4 (! (res .cse1 (! (res .cse5 (let ((.cse6 (not .cse4))) (let-proof ((.cse7 (not+ .cse6))) (res .cse6 .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (let ((.cse9 (not .cse5))) (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (let ((.cse11 (= .cse5 .cse6))) (res .cse11 (res .cse6 (res .cse5 (=+1 .cse11) (res .cse4 .cse7 (farkas 1 .cse5 1 .cse4))) (res .cse5 (res .cse12 .cse13 (res .cse4 (let ((.cse14 (<= 1 .cse15))) (res .cse14 (total-int .cse15 0) (farkas 1 .cse12 1 .cse14))) (not- .cse6))) (=+2 .cse11))) (cong (not .cse5) (not .cse6)))) (=-2 .cse10))))) (not- .cse8)))))) (=>+ 1 .cse1)) :proves (+ .cse1 + .cse4) :input) .cse2) :proves (+ .cse4) :rup) (! (let ((.cse16 (<= 1 call1formal@r@0))) (res .cse16 (total-int call1formal@r@0 0) (farkas 1 .cse4 1 .cse16))) :proves (- .cse4 + .cse3) :LA (1 (- 1)))))) :proves (+ .cse3) :rup) (! (res .cse17 (and- 0 .cse0) .cse18) :proves (- .cse0 - .cse3) :input))))))))) :proves () :rup)

