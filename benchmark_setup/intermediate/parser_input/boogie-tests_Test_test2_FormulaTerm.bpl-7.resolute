unsat
(! (let ((.cse73 (+ y (* (- 1) x)))) (let ((.cse4 (<= .cse73 0))) (let ((.cse3 (xor z@0 .cse4))) (let ((.cse7 (not .cse3)) (.cse71 (ControlFlow 0 2))) (let ((.cse66 (= .cse71 (- 1))) (.cse8 (not .cse7)) (.cse52 (= (ControlFlow 0 3) 2)) (.cse36 (not z@0)) (.cse34 (= (ControlFlow 0 4) 2))) (let ((.cse33 (and .cse36 .cse34)) (.cse0 (and z@0 .cse52)) (.cse6 (=> .cse66 .cse8))) (let ((.cse17 (not .cse4)) (.cse1 (=> .cse0 .cse6)) (.cse29 (=> .cse33 .cse6)) (.cse75 (ControlFlow 0 5))) (let ((.cse47 (= .cse75 4)) (.cse13 (=> .cse4 .cse29)) (.cse57 (= .cse75 3)) (.cse10 (=> .cse17 .cse1))) (let ((.cse11 (=> .cse57 .cse10)) (.cse12 (=> .cse47 .cse13))) (let ((.cse14 (and .cse11 .cse12))) (let ((.cse15 (=> .cse17 .cse14))) (let-proof ((.cse9 (not- .cse7)) (.cse18 (not- .cse17))) (let-proof ((.cse16 (let ((.cse74 (= (ControlFlow 0 0) 5))) (let ((.cse19 (=> .cse74 .cse15))) (res .cse19 (=>+ 1 .cse19) (let ((.cse44 (< x y)) (.cse67 (- 0 1))) (let ((.cse65 (= .cse71 .cse67)) (.cse58 (= z@0 .cse44)) (.cse54 (= z@0 true)) (.cse37 (= z@0 false))) (let ((.cse32 (and .cse37 .cse34)) (.cse51 (and .cse54 .cse52)) (.cse38 (=> .cse65 .cse58))) (let ((.cse50 (=> .cse51 .cse38)) (.cse41 (>= x y)) (.cse28 (=> .cse32 .cse38))) (let ((.cse27 (=> .cse41 .cse28)) (.cse49 (=> .cse44 .cse50))) (let ((.cse48 (=> .cse57 .cse49)) (.cse26 (=> .cse47 .cse27))) (let ((.cse25 (and .cse48 .cse26))) (let ((.cse24 (=> .cse44 .cse25))) (let ((.cse20 (=> .cse74 .cse24))) (let ((.cse22 (not .cse20))) (res .cse20 (let ((.cse21 (not .cse19))) (res .cse21 (res .cse22 (not+ .cse22) (let ((.cse23 (= .cse22 .cse21))) (res .cse23 (res (= .cse20 .cse19) (res (= .cse24 .cse15) (let ((.cse42 (<= y x))) (let ((.cse55 (= .cse44 .cse17))) (let-proof ((.cse62 (not+ .cse17)) (.cse46 (farkas 1 .cse44 1 .cse4)) (.cse45 (total y x)) (.cse43 (let ((.cse72 (< 0 .cse73))) (res .cse72 (total .cse73 0) (farkas 1 .cse42 1 .cse72))))) (let-proof ((.cse56 (res .cse17 (res .cse44 (=+1 .cse55) (res .cse4 .cse62 .cse46)) (res .cse44 (res .cse42 .cse45 (res .cse4 .cse43 .cse18)) (=+2 .cse55))))) (res (= .cse25 .cse14) (let ((.cse30 (= .cse38 .cse6))) (let-proof ((.cse31 (res (= .cse58 .cse8) (let ((.cse59 (= z@0 .cse17))) (res (= .cse59 .cse8) (let ((.cse63 (xor z@0 .cse17))) (let ((.cse60 (not .cse63))) (res (= .cse60 .cse8) (let ((.cse61 (= .cse63 .cse7))) (res .cse61 (res (xor .cse17 .cse4) (res .cse4 (res .cse17 .cse62 (xor+ (.cse17 .cse4) (.cse4) (.cse17))) (res .cse17 (xor+ (.cse17 .cse4) (.cse17) (.cse4)) .cse18)) (res .cse63 (res .cse7 (=+1 .cse61) (res .cse3 (xor+ (z@0 .cse17) (z@0 .cse4) (.cse17 .cse4)) .cse9)) (res .cse7 (res .cse3 (not+ .cse7) (xor- (z@0 .cse4) (.cse17 .cse4) (z@0 .cse17))) (=+2 .cse61)))) (cong (not .cse63) (not .cse7)))) (let ((.cse64 (= .cse59 .cse60))) (res .cse64 (res .cse59 (res .cse63 (res z@0 (res .cse17 (=+1 .cse59) (xor+ (z@0 .cse17) (z@0) (.cse17))) (res .cse17 (xor+ (z@0 .cse17) (.cse17) (z@0)) (=+2 .cse59))) (res .cse60 (=+1 .cse64) (not- .cse60))) (res .cse63 (res .cse60 (not+ .cse60) (=+2 .cse64)) (res z@0 (res .cse17 (xor+ (z@0) (.cse17) (z@0 .cse17)) (=-1 .cse59)) (res .cse17 (=-2 .cse59) (xor- (z@0) (.cse17) (z@0 .cse17)))))) (trans .cse59 .cse60 .cse8)))))) (res (= .cse58 .cse59) (res .cse55 .cse56 (res (= z@0 z@0) (refl z@0) (cong (= z@0 .cse44) (= z@0 .cse17)))) (trans .cse58 .cse59 .cse8)))) (res (= .cse65 .cse66) (res (= .cse67 (- 1)) (let ((.cse68 (* (- 1) 1))) (res (= .cse68 (- 1)) (poly* .cse68 (- 1)) (res (= 0 0) (refl 0) (let ((.cse69 (+ 0 .cse68)) (.cse70 (+ 0 (- 1)))) (res (= .cse69 .cse70) (cong (+ 0 .cse68) (+ 0 (- 1))) (res (= .cse67 .cse69) (-def 0 1) (res (= .cse70 (- 1)) (poly+ .cse70 (- 1)) (trans .cse67 .cse69 .cse70 (- 1))))))))) (res (= .cse71 .cse71) (refl .cse71) (cong (= .cse71 .cse67) (= .cse71 (- 1))))) (cong (=> .cse65 .cse58) (=> .cse66 .cse8)))))) (res (= .cse26 .cse12) (res (= .cse27 .cse13) (res (= .cse28 .cse29) (res .cse30 .cse31 (res (= .cse32 .cse33) (res (= .cse34 .cse34) (refl .cse34) (let ((.cse35 (= .cse37 .cse36))) (res .cse35 (res false (res .cse36 (res .cse37 (=+1 .cse35) (res z@0 (not+ .cse36) (=-2 .cse37))) (res .cse37 (res z@0 (=+1 .cse37) (not- .cse36)) (=+2 .cse35))) false-) (cong (and .cse37 .cse34) (and .cse36 .cse34))))) (cong (=> .cse32 .cse38) (=> .cse33 .cse6)))) (let ((.cse39 (= .cse41 .cse4))) (res .cse39 (let ((.cse40 (= .cse41 .cse42))) (res .cse40 (>=def x y) (res .cse4 (res .cse41 (=+1 .cse39) (res .cse42 (=-2 .cse40) .cse43)) (res .cse41 (res .cse42 (res .cse44 .cse45 .cse46) (=-1 .cse40)) (=+2 .cse39))))) (cong (=> .cse41 .cse28) (=> .cse4 .cse29))))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse27) (=> .cse47 .cse13)))) (res (= .cse48 .cse11) (res (= .cse49 .cse10) (res (= .cse50 .cse1) (res .cse30 .cse31 (res (= .cse51 .cse0) (res (= .cse52 .cse52) (refl .cse52) (let ((.cse53 (= .cse54 z@0))) (res .cse53 (res true true+ (res z@0 (res .cse54 (=+1 .cse53) (=-1 .cse54)) (res .cse54 (=+2 .cse54) (=+2 .cse53)))) (cong (and .cse54 .cse52) (and z@0 .cse52))))) (cong (=> .cse51 .cse38) (=> .cse0 .cse6)))) (res .cse55 .cse56 (cong (=> .cse44 .cse50) (=> .cse17 .cse1)))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse49) (=> .cse57 .cse10)))) (cong (and .cse48 .cse26) (and .cse11 .cse12)))))) (res .cse55 .cse56 (cong (=> .cse44 .cse25) (=> .cse17 .cse14)))))))) (res (= .cse74 .cse74) (refl .cse74) (cong (=> .cse74 .cse24) (=> .cse74 .cse15)))) (cong (not .cse20) (not .cse19))) (=-2 .cse23)))) (not- .cse21))) (res .cse22 (assume .cse22) (not- .cse22)))))))))))))))))) (let-proof ((.cse5 (! (res .cse15 (res .cse17 (=>+ 0 .cse15) .cse18) .cse16) :proves (- .cse4) :input))) (let-proof ((.cse2 (! (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse1) :input) (! (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse10) :input) (! (res .cse12 (! (res .cse13 (! (res .cse4 (! (=>+ 0 .cse13) :proves (+ .cse13 + .cse4) :input) .cse5) :proves (+ .cse13) :rup) (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse13) :input)) :proves (+ .cse12) :rup) (! (res .cse14 (and+ .cse14) (res .cse15 (=>+ 1 .cse15) .cse16)) :proves (- .cse11 - .cse12) :input)) :proves (- .cse11) :rup)) :proves (- .cse10) :rup)) :proves (- .cse1) :rup))) (res z@0 (! (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (! (and- 0 .cse0) :proves (- .cse0 + z@0) :input)) :proves (+ z@0) :rup) (res .cse3 (res .cse4 (! (xor+ (z@0 .cse4) (.cse4) (z@0)) :proves (+ .cse3 - z@0 + .cse4) :input) .cse5) (! (res .cse6 (! (res .cse7 (res .cse8 (not+ .cse8) (=>+ 1 .cse6)) .cse9) :proves (+ .cse6 - .cse3) :input) (! (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse6) :input) .cse2) :proves (- .cse6) :rup)) :proves (- .cse3) :rup)))))))))))))))))) :proves () :rup)

