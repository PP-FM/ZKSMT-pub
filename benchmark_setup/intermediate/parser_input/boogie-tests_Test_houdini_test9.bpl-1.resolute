unsat
(! (let ((.cse14 (ControlFlow 0 2))) (let ((.cse2 (= .cse14 (- 1))) (.cse0 (= (- 1) .cse14))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse14)) (res .cse2 (symm .cse14 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse28 (=> b8 (= v2 1)))) (let ((.cse1 (=> .cse2 .cse28))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse40 (=> b7 (= v2 0)))) (let ((.cse5 (=> .cse40 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse8 (= .cse14 (- 3)))) (let ((.cse6 (=> .cse8 .cse40))) (res .cse6 (! (let ((.cse7 (= (- 3) .cse14))) (let ((.cse9 (= .cse8 .cse7))) (let-proof ((.cse10 (res .cse7 (res .cse8 (=+1 .cse9) (symm (- 3) .cse14)) (res .cse8 (symm .cse14 (- 3)) (=+2 .cse9))))) (res .cse7 (! (res .cse8 (=>+ 0 .cse6) (res .cse9 .cse10 (=-2 .cse9))) :proves (+ .cse6 + .cse7) :input) (! (let ((.cse12 (not .cse8))) (res .cse8 (let ((.cse11 (not .cse7))) (res .cse11 (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res .cse9 .cse10 (cong (not .cse8) (not .cse7))) (=-2 .cse13)))) (not- .cse11))) (res .cse12 (assume .cse12) (not- .cse12)))) :proves (- .cse7) :input))))) :proves (+ .cse6) :rup) (! (let ((.cse15 (and .cse6 .cse5))) (res .cse15 (and+ .cse15) (let ((.cse47 (and (=> b6 (= v1 1)) (= (ControlFlow 0 4) 2)))) (let ((.cse16 (=> .cse47 .cse15))) (res .cse16 (=>+ 1 .cse16) (let ((.cse48 (=> b5 (= v1 0)))) (let ((.cse17 (=> .cse48 .cse16))) (res .cse17 (=>+ 1 .cse17) (let ((.cse49 (= (ControlFlow 0 0) 4))) (let ((.cse18 (=> .cse49 .cse17))) (res .cse18 (=>+ 1 .cse18) (let ((.cse30 (- 0 1))) (let ((.cse43 (- 0 3)) (.cse29 (= .cse14 .cse30))) (let ((.cse27 (=> .cse29 .cse28)) (.cse42 (= .cse14 .cse43))) (let ((.cse41 (=> .cse42 .cse40)) (.cse26 (=> .cse40 .cse27))) (let ((.cse25 (and .cse41 .cse26))) (let ((.cse24 (=> .cse47 .cse25))) (let ((.cse23 (=> .cse48 .cse24))) (let ((.cse19 (=> .cse49 .cse23))) (let ((.cse21 (not .cse19))) (res .cse19 (let ((.cse20 (not .cse18))) (res .cse20 (res .cse21 (not+ .cse21) (let ((.cse22 (= .cse21 .cse20))) (res .cse22 (res (= .cse19 .cse18) (res (= .cse23 .cse17) (res (= .cse24 .cse16) (res (= .cse25 .cse15) (let ((.cse38 (= .cse40 .cse40)) (.cse32 (= 0 0)) (.cse36 (= .cse14 .cse14))) (let-proof ((.cse39 (refl .cse40)) (.cse33 (refl 0)) (.cse37 (refl .cse14))) (res (= .cse26 .cse5) (res (= .cse27 .cse1) (res (= .cse28 .cse28) (refl .cse28) (res (= .cse29 .cse2) (res (= .cse30 (- 1)) (let ((.cse31 (* (- 1) 1))) (res (= .cse31 (- 1)) (poly* .cse31 (- 1)) (res .cse32 .cse33 (let ((.cse34 (+ 0 .cse31)) (.cse35 (+ 0 (- 1)))) (res (= .cse34 .cse35) (cong (+ 0 .cse31) (+ 0 (- 1))) (res (= .cse30 .cse34) (-def 0 1) (res (= .cse35 (- 1)) (poly+ .cse35 (- 1)) (trans .cse30 .cse34 .cse35 (- 1))))))))) (res .cse36 .cse37 (cong (= .cse14 .cse30) (= .cse14 (- 1))))) (cong (=> .cse29 .cse28) (=> .cse2 .cse28)))) (res .cse38 .cse39 (cong (=> .cse40 .cse27) (=> .cse40 .cse1)))) (res (= .cse41 .cse6) (res .cse38 .cse39 (res (= .cse42 .cse8) (res (= .cse43 (- 3)) (let ((.cse44 (* (- 1) 3))) (res (= .cse44 (- 3)) (poly* .cse44 (- 3)) (res .cse32 .cse33 (let ((.cse45 (+ 0 .cse44)) (.cse46 (+ 0 (- 3)))) (res (= .cse45 .cse46) (cong (+ 0 .cse44) (+ 0 (- 3))) (res (= .cse43 .cse45) (-def 0 3) (res (= .cse46 (- 3)) (poly+ .cse46 (- 3)) (trans .cse43 .cse45 .cse46 (- 3))))))))) (res .cse36 .cse37 (cong (= .cse14 .cse43) (= .cse14 (- 3))))) (cong (=> .cse42 .cse40) (=> .cse8 .cse40)))) (cong (and .cse41 .cse26) (and .cse6 .cse5)))))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse25) (=> .cse47 .cse15)))) (res (= .cse48 .cse48) (refl .cse48) (cong (=> .cse48 .cse24) (=> .cse48 .cse16)))) (res (= .cse49 .cse49) (refl .cse49) (cong (=> .cse49 .cse23) (=> .cse49 .cse17)))) (cong (not .cse19) (not .cse18))) (=-2 .cse22)))) (not- .cse20))) (res .cse21 (assume .cse21) (not- .cse21))))))))))))))))))))))) :proves (- .cse6 - .cse5) :input)))) :proves (- .cse5) :rup)))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse51 (not .cse2))) (res .cse2 (let ((.cse50 (not .cse0))) (res .cse50 (res .cse51 (not+ .cse51) (let ((.cse52 (= .cse51 .cse50))) (res .cse52 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse52)))) (not- .cse50))) (res .cse51 (assume .cse51) (not- .cse51)))) :proves (- .cse0) :input)))))) :proves () :rup)

