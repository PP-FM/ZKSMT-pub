unsat
(! (let ((.cse198 (ControlFlow 0 4))) (let ((.cse193 (= .cse198 (- 3))) (.cse2 (IsHeld mutex@2)) (.cse20 (= mutex@2 mutex@1)) (.cse172 (ControlFlow 0 2)) (.cse34 (= x@2 x@0))) (let ((.cse61 (IsHeld mutex@1)) (.cse35 (not .cse34)) (.cse167 (= .cse172 (- 1))) (.cse21 (and .cse20 (= (ControlFlow 0 6) 4))) (.cse6 (=> .cse193 .cse2))) (let ((.cse10 (=> .cse21 .cse6)) (.cse33 (and .cse35 .cse167)) (.cse62 (not .cse61)) (.cse159 (ControlFlow 0 7)) (.cse67 (+ x@0 1)) (.cse57 (IsHeld call1formal@post@0@@0))) (let ((.cse53 (= x@2 x@1)) (.cse52 (= mutex@1 call1formal@post@0@@0)) (.cse72 (not .cse57)) (.cse54 (= x@1 .cse67)) (.cse145 (= .cse159 2)) (.cse32 (=> .cse33 .cse62)) (.cse147 (= .cse159 6)) (.cse28 (=> .cse34 .cse10))) (let ((.cse213 (ControlFlow 0 9)) (.cse65 (=> .cse147 .cse28)) (.cse64 (=> .cse145 .cse32)) (.cse51 (and .cse72 .cse54)) (.cse50 (and .cse53 .cse52))) (let ((.cse49 (and .cse51 .cse50)) (.cse69 (and .cse65 .cse64)) (.cse131 (= .cse213 2)) (.cse136 (= .cse213 6))) (let ((.cse29 (=> .cse136 .cse28)) (.cse31 (=> .cse131 .cse32)) (.cse17 (= mutex@1 call1formal@post@0)) (.cse48 (=> .cse49 .cse69)) (.cse152 (= .cse159 (- 8))) (.cse25 (IsHeld call1formal@post@0))) (let ((.cse41 (=> .cse152 .cse25)) (.cse47 (=> .cse25 .cse48)) (.cse18 (and .cse34 .cse17)) (.cse36 (and .cse29 .cse31)) (.cse182 (ControlFlow 0 10))) (let ((.cse138 (= .cse182 9)) (.cse30 (=> .cse18 .cse36)) (.cse160 (= .cse182 7)) (.cse74 (and .cse41 .cse47))) (let ((.cse40 (=> .cse160 .cse74)) (.cse38 (=> .cse138 .cse30))) (let ((.cse82 (IsHeld mutex@0)) (.cse75 (and .cse40 .cse38))) (let ((.cse39 (=> .cse25 .cse75)) (.cse177 (= .cse182 (- 11))) (.cse83 (not .cse82)) (.cse188 (and (= mutex@2 mutex@0) (= (ControlFlow 0 5) 4)))) (let ((.cse187 (=> .cse188 .cse6)) (.cse80 (=> .cse177 .cse83)) (.cse78 (=> .cse83 .cse39)) (.cse212 (ControlFlow 0 12))) (let ((.cse183 (= .cse212 10)) (.cse91 (and .cse80 .cse78)) (.cse191 (= .cse212 5)) (.cse93 (=> false .cse187))) (let ((.cse92 (=> .cse191 .cse93)) (.cse79 (=> .cse183 .cse91))) (let ((.cse94 (and .cse92 .cse79)) (.cse209 (ControlFlow 0 13))) (let ((.cse26 (IsHeld call0formal@post@0)) (.cse199 (= .cse209 12)) (.cse87 (=> .cse83 .cse94))) (let ((.cse95 (=> .cse199 .cse87)) (.cse204 (= .cse209 (- 14))) (.cse98 (not .cse26))) (let ((.cse97 (=> .cse204 .cse98)) (.cse96 (=> .cse98 .cse95))) (let ((.cse100 (and .cse97 .cse96)) (.cse22 (= .cse26 true))) (let ((.cse105 (= .cse26 .cse22)) (.cse101 (=> .cse98 .cse100))) (let-proof ((.cse12 true+) (.cse3 false-)) (let ((.cse13 (= .cse25 true))) (let-proof ((.cse99 (not+ .cse98)) (.cse102 (let ((.cse210 (= (ControlFlow 0 15) 13))) (let ((.cse107 (=> .cse210 .cse101))) (res .cse107 (=>+ 1 .cse107) (let ((.cse211 (= (ControlFlow 0 0) 15))) (let ((.cse108 (=> .cse211 .cse107))) (res .cse108 (=>+ 1 .cse108) (let ((.cse194 (- 0 3))) (let ((.cse192 (= .cse198 .cse194)) (.cse168 (- 0 1))) (let ((.cse166 (= .cse172 .cse168)) (.cse164 (=> .cse192 .cse2))) (let ((.cse161 (=> .cse21 .cse164)) (.cse165 (and .cse35 .cse166))) (let ((.cse132 (=> .cse165 .cse62)) (.cse137 (=> .cse34 .cse161))) (let ((.cse146 (=> .cse147 .cse137)) (.cse144 (=> .cse145 .cse132))) (let ((.cse153 (- 0 8)) (.cse143 (and .cse146 .cse144))) (let ((.cse133 (=> .cse136 .cse137)) (.cse128 (=> .cse131 .cse132)) (.cse142 (=> .cse49 .cse143)) (.cse151 (= .cse159 .cse153))) (let ((.cse150 (=> .cse151 .cse25)) (.cse141 (=> .cse25 .cse142)) (.cse127 (and .cse133 .cse128))) (let ((.cse126 (=> .cse18 .cse127)) (.cse140 (and .cse150 .cse141))) (let ((.cse139 (=> .cse160 .cse140)) (.cse125 (=> .cse138 .cse126))) (let ((.cse178 (- 0 11)) (.cse124 (and .cse139 .cse125))) (let ((.cse123 (=> .cse25 .cse124)) (.cse176 (= .cse182 .cse178))) (let ((.cse190 (not true)) (.cse186 (=> .cse188 .cse164)) (.cse175 (=> .cse176 .cse83)) (.cse122 (=> .cse83 .cse123))) (let ((.cse121 (and .cse175 .cse122)) (.cse185 (=> .cse190 .cse186))) (let ((.cse184 (=> .cse191 .cse185)) (.cse120 (=> .cse183 .cse121))) (let ((.cse119 (and .cse184 .cse120))) (let ((.cse205 (- 0 14)) (.cse118 (=> .cse83 .cse119))) (let ((.cse117 (=> .cse199 .cse118)) (.cse203 (= .cse209 .cse205))) (let ((.cse202 (=> .cse203 .cse98)) (.cse116 (=> .cse98 .cse117))) (let ((.cse115 (and .cse202 .cse116))) (let ((.cse114 (=> .cse98 .cse115))) (let ((.cse113 (=> .cse210 .cse114))) (let ((.cse109 (=> .cse211 .cse113))) (let ((.cse111 (not .cse109))) (res .cse109 (let ((.cse110 (not .cse108))) (res .cse110 (res .cse111 (not+ .cse111) (let ((.cse112 (= .cse111 .cse110))) (res .cse112 (res (= .cse109 .cse108) (res (= .cse113 .cse107) (res (= .cse114 .cse101) (let ((.cse200 (= .cse98 .cse98))) (let-proof ((.cse201 (refl .cse98))) (res (= .cse115 .cse100) (let ((.cse155 (= 0 0))) (let-proof ((.cse156 (refl 0))) (res (= .cse116 .cse96) (res (= .cse117 .cse95) (res (= .cse118 .cse87) (let ((.cse173 (= .cse83 .cse83))) (let-proof ((.cse174 (refl .cse83))) (res (= .cse119 .cse94) (let ((.cse162 (= .cse164 .cse6))) (let-proof ((.cse163 (res (= .cse2 .cse2) (refl .cse2) (res (= .cse192 .cse193) (res (= .cse194 (- 3)) (let ((.cse195 (* (- 1) 3))) (res (= .cse195 (- 3)) (poly* .cse195 (- 3)) (res .cse155 .cse156 (let ((.cse196 (+ 0 .cse195)) (.cse197 (+ 0 (- 3)))) (res (= .cse196 .cse197) (cong (+ 0 .cse195) (+ 0 (- 3))) (res (= .cse194 .cse196) (-def 0 3) (res (= .cse197 (- 3)) (poly+ .cse197 (- 3)) (trans .cse194 .cse196 .cse197 (- 3))))))))) (res (= .cse198 .cse198) (refl .cse198) (cong (= .cse198 .cse194) (= .cse198 (- 3))))) (cong (=> .cse192 .cse2) (=> .cse193 .cse2)))))) (res (= .cse120 .cse79) (res (= .cse121 .cse91) (res (= .cse122 .cse78) (res (= .cse123 .cse39) (let ((.cse148 (= .cse25 .cse25))) (let-proof ((.cse149 (refl .cse25))) (res (= .cse124 .cse75) (let ((.cse129 (= .cse132 .cse32)) (.cse134 (= .cse137 .cse28))) (let-proof ((.cse130 (res (= .cse62 .cse62) (refl .cse62) (res (= .cse165 .cse33) (res (= .cse166 .cse167) (res (= .cse168 (- 1)) (let ((.cse169 (* (- 1) 1))) (res (= .cse169 (- 1)) (poly* .cse169 (- 1)) (res .cse155 .cse156 (let ((.cse170 (+ 0 .cse169)) (.cse171 (+ 0 (- 1)))) (res (= .cse170 .cse171) (cong (+ 0 .cse169) (+ 0 (- 1))) (res (= .cse168 .cse170) (-def 0 1) (res (= .cse171 (- 1)) (poly+ .cse171 (- 1)) (trans .cse168 .cse170 .cse171 (- 1))))))))) (res (= .cse172 .cse172) (refl .cse172) (cong (= .cse172 .cse168) (= .cse172 (- 1))))) (res (= .cse35 .cse35) (refl .cse35) (cong (and .cse35 .cse166) (and .cse35 .cse167)))) (cong (=> .cse165 .cse62) (=> .cse33 .cse62))))) (.cse135 (res (= .cse161 .cse10) (res .cse162 .cse163 (res (= .cse21 .cse21) (refl .cse21) (cong (=> .cse21 .cse164) (=> .cse21 .cse6)))) (res (= .cse34 .cse34) (refl .cse34) (cong (=> .cse34 .cse161) (=> .cse34 .cse10)))))) (res (= .cse125 .cse38) (res (= .cse126 .cse30) (res (= .cse127 .cse36) (res (= .cse128 .cse31) (res .cse129 .cse130 (res (= .cse131 .cse131) (refl .cse131) (cong (=> .cse131 .cse132) (=> .cse131 .cse32)))) (res (= .cse133 .cse29) (res .cse134 .cse135 (res (= .cse136 .cse136) (refl .cse136) (cong (=> .cse136 .cse137) (=> .cse136 .cse28)))) (cong (and .cse133 .cse128) (and .cse29 .cse31)))) (res (= .cse18 .cse18) (refl .cse18) (cong (=> .cse18 .cse127) (=> .cse18 .cse36)))) (res (= .cse138 .cse138) (refl .cse138) (cong (=> .cse138 .cse126) (=> .cse138 .cse30)))) (res (= .cse139 .cse40) (res (= .cse140 .cse74) (res (= .cse141 .cse47) (res (= .cse142 .cse48) (res (= .cse143 .cse69) (res (= .cse144 .cse64) (res .cse129 .cse130 (res (= .cse145 .cse145) (refl .cse145) (cong (=> .cse145 .cse132) (=> .cse145 .cse32)))) (res (= .cse146 .cse65) (res .cse134 .cse135 (res (= .cse147 .cse147) (refl .cse147) (cong (=> .cse147 .cse137) (=> .cse147 .cse28)))) (cong (and .cse146 .cse144) (and .cse65 .cse64)))) (res (= .cse49 .cse49) (refl .cse49) (cong (=> .cse49 .cse143) (=> .cse49 .cse69)))) (res .cse148 .cse149 (cong (=> .cse25 .cse142) (=> .cse25 .cse48)))) (res (= .cse150 .cse41) (res .cse148 .cse149 (res (= .cse151 .cse152) (res (= .cse153 (- 8)) (let ((.cse154 (* (- 1) 8))) (res (= .cse154 (- 8)) (poly* .cse154 (- 8)) (res .cse155 .cse156 (let ((.cse157 (+ 0 .cse154)) (.cse158 (+ 0 (- 8)))) (res (= .cse157 .cse158) (cong (+ 0 .cse154) (+ 0 (- 8))) (res (= .cse153 .cse157) (-def 0 8) (res (= .cse158 (- 8)) (poly+ .cse158 (- 8)) (trans .cse153 .cse157 .cse158 (- 8))))))))) (res (= .cse159 .cse159) (refl .cse159) (cong (= .cse159 .cse153) (= .cse159 (- 8))))) (cong (=> .cse151 .cse25) (=> .cse152 .cse25)))) (cong (and .cse150 .cse141) (and .cse41 .cse47)))) (res (= .cse160 .cse160) (refl .cse160) (cong (=> .cse160 .cse140) (=> .cse160 .cse74)))) (cong (and .cse139 .cse125) (and .cse40 .cse38)))))) (res .cse148 .cse149 (cong (=> .cse25 .cse124) (=> .cse25 .cse75)))))) (res .cse173 .cse174 (cong (=> .cse83 .cse123) (=> .cse83 .cse39)))) (res (= .cse175 .cse80) (res .cse173 .cse174 (res (= .cse176 .cse177) (res (= .cse178 (- 11)) (let ((.cse179 (* (- 1) 11))) (res (= .cse179 (- 11)) (poly* .cse179 (- 11)) (res .cse155 .cse156 (let ((.cse180 (+ 0 .cse179)) (.cse181 (+ 0 (- 11)))) (res (= .cse180 .cse181) (cong (+ 0 .cse179) (+ 0 (- 11))) (res (= .cse178 .cse180) (-def 0 11) (res (= .cse181 (- 11)) (poly+ .cse181 (- 11)) (trans .cse178 .cse180 .cse181 (- 11))))))))) (res (= .cse182 .cse182) (refl .cse182) (cong (= .cse182 .cse178) (= .cse182 (- 11))))) (cong (=> .cse176 .cse83) (=> .cse177 .cse83)))) (cong (and .cse175 .cse122) (and .cse80 .cse78)))) (res (= .cse183 .cse183) (refl .cse183) (cong (=> .cse183 .cse121) (=> .cse183 .cse91)))) (res (= .cse184 .cse92) (res (= .cse185 .cse93) (res (= .cse186 .cse187) (res .cse162 .cse163 (res (= .cse188 .cse188) (refl .cse188) (cong (=> .cse188 .cse164) (=> .cse188 .cse6)))) (let ((.cse189 (= .cse190 false))) (res .cse189 (res false (res .cse190 (=+1 .cse189) (res true .cse12 (not- .cse190))) .cse3) (cong (=> .cse190 .cse186) (=> false .cse187))))) (res (= .cse191 .cse191) (refl .cse191) (cong (=> .cse191 .cse185) (=> .cse191 .cse93)))) (cong (and .cse184 .cse120) (and .cse92 .cse79)))))) (res .cse173 .cse174 (cong (=> .cse83 .cse119) (=> .cse83 .cse94)))))) (res (= .cse199 .cse199) (refl .cse199) (cong (=> .cse199 .cse118) (=> .cse199 .cse87)))) (res .cse200 .cse201 (cong (=> .cse98 .cse117) (=> .cse98 .cse95)))) (res (= .cse202 .cse97) (res .cse200 .cse201 (res (= .cse203 .cse204) (res (= .cse205 (- 14)) (let ((.cse206 (* (- 1) 14))) (res (= .cse206 (- 14)) (poly* .cse206 (- 14)) (res .cse155 .cse156 (let ((.cse207 (+ 0 .cse206)) (.cse208 (+ 0 (- 14)))) (res (= .cse207 .cse208) (cong (+ 0 .cse206) (+ 0 (- 14))) (res (= .cse205 .cse207) (-def 0 14) (res (= .cse208 (- 14)) (poly+ .cse208 (- 14)) (trans .cse205 .cse207 .cse208 (- 14))))))))) (res (= .cse209 .cse209) (refl .cse209) (cong (= .cse209 .cse205) (= .cse209 (- 14))))) (cong (=> .cse203 .cse98) (=> .cse204 .cse98)))) (cong (and .cse202 .cse116) (and .cse97 .cse96)))))) (res .cse200 .cse201 (cong (=> .cse98 .cse115) (=> .cse98 .cse100)))))) (res (= .cse210 .cse210) (refl .cse210) (cong (=> .cse210 .cse114) (=> .cse210 .cse101)))) (res (= .cse211 .cse211) (refl .cse211) (cong (=> .cse211 .cse113) (=> .cse211 .cse107)))) (cong (not .cse109) (not .cse108))) (=-2 .cse112)))) (not- .cse110))) (res .cse111 (assume .cse111) (not- .cse111))))))))))))))))))))))))))))))))))) (.cse106 (res true .cse12 (res .cse22 (res .cse26 (=+1 .cse105) (=+2 .cse22)) (res .cse26 (=-1 .cse22) (=+2 .cse105)))))) (let ((.cse45 (= .cse25 .cse13))) (let-proof ((.cse77 (res .cse105 .cse106 (=-2 .cse105))) (.cse27 (! (res .cse26 (let ((.cse103 (not .cse22))) (res .cse103 (res .cse98 .cse99 (let ((.cse104 (= .cse98 .cse103))) (res .cse104 (res .cse105 .cse106 (cong (not .cse26) (not .cse22))) (=-2 .cse104)))) (not- .cse103))) (res .cse101 (res .cse98 (=>+ 0 .cse101) (not- .cse98)) .cse102)) :proves (- .cse22) :input))) (let ((.cse15 (= .cse26 false))) (let-proof ((.cse46 (res true .cse12 (res .cse13 (res .cse25 (=+1 .cse45) (=+2 .cse13)) (res .cse25 (=-1 .cse13) (=+2 .cse45))))) (.cse76 (! (res .cse78 (! (=>+ 1 .cse78) :proves (+ .cse78 - .cse39) :input) (! (let-proof ((.cse90 (! (res .cse95 (! (=>+ 1 .cse95) :proves (+ .cse95 - .cse87) :input) (! (res .cse96 (! (=>+ 1 .cse96) :proves (+ .cse96 - .cse95) :input) (! (res .cse97 (! (res .cse22 (! (res .cse26 (res .cse98 .cse99 (=>+ 1 .cse97)) .cse77) :proves (+ .cse97 + .cse22) :input) .cse27) :proves (+ .cse97) :rup) (! (res .cse100 (and+ .cse100) (res .cse101 (=>+ 1 .cse101) .cse102)) :proves (- .cse97 - .cse96) :input)) :proves (- .cse96) :rup)) :proves (- .cse95) :rup)) :proves (- .cse87) :rup))) (res .cse79 (res .cse80 (! (let ((.cse81 (= .cse82 true))) (let ((.cse85 (= .cse82 .cse81))) (let-proof ((.cse84 (not+ .cse83)) (.cse86 (res true .cse12 (res .cse81 (res .cse82 (=+1 .cse85) (=+2 .cse81)) (res .cse82 (=-1 .cse81) (=+2 .cse85)))))) (res .cse81 (! (res .cse82 (res .cse83 .cse84 (=>+ 1 .cse80)) (res .cse85 .cse86 (=-2 .cse85))) :proves (+ .cse80 + .cse81) :input) (! (res .cse87 (! (res .cse82 (let ((.cse88 (not .cse81))) (res .cse88 (res .cse83 .cse84 (let ((.cse89 (= .cse83 .cse88))) (res .cse89 (res .cse85 .cse86 (cong (not .cse82) (not .cse81))) (=-2 .cse89)))) (not- .cse88))) (res .cse83 (=>+ 0 .cse87) (not- .cse83))) :proves (+ .cse87 - .cse81) :input) .cse90) :proves (- .cse81) :rup))))) :proves (+ .cse80) :rup) (! (res .cse91 (and+ .cse91) (=>+ 1 .cse79)) :proves (- .cse78 - .cse80 + .cse79) :input)) (! (res .cse92 (! (res .cse93 (! (res false (=>+ 0 .cse93) .cse3) :proves (+ .cse93) :input) (! (=>+ 1 .cse92) :proves (+ .cse92 - .cse93) :input)) :proves (+ .cse92) :rup) (res .cse87 (! (res .cse94 (and+ .cse94) (=>+ 1 .cse87)) :proves (+ .cse87 - .cse79 - .cse92) :input) .cse90)) :proves (- .cse79) :rup))) :proves (- .cse78) :rup)) :proves (- .cse39) :rup))) (let-proof ((.cse14 (! (res .cse39 (! (res .cse25 (=>+ 0 .cse39) (res .cse45 .cse46 (=-2 .cse45))) :proves (+ .cse39 + .cse13) :input) .cse76) :proves (+ .cse13) :rup)) (.cse16 (! (res .cse22 (! (res .cse26 (res false (=+1 .cse15) .cse3) .cse77) :proves (+ .cse15 + .cse22) :input) .cse27) :proves (+ .cse15) :rup))) (let-proof ((.cse37 (! (res .cse38 (! (=>+ 1 .cse38) :proves (+ .cse38 - .cse30) :input) (! (res .cse39 (res .cse40 (! (res .cse41 (! (res .cse13 .cse14 (! (res .cse25 (let ((.cse42 (not .cse13))) (res .cse42 (let ((.cse43 (not .cse25))) (res .cse43 (not+ .cse43) (let ((.cse44 (= .cse43 .cse42))) (res .cse44 (res .cse45 .cse46 (cong (not .cse25) (not .cse13))) (=-2 .cse44))))) (not- .cse42))) (=>+ 1 .cse41)) :proves (+ .cse41 - .cse13) :input)) :proves (+ .cse41) :rup) (res .cse47 (! (res .cse48 (! (res .cse15 .cse16 (res .cse22 (res .cse49 (! (=>+ 0 .cse48) :proves (+ .cse48 + .cse49) :input) (res .cse50 (! (and- 1 .cse49) :proves (- .cse49 + .cse50) :input) (res .cse51 (! (and- 0 .cse49) :proves (- .cse49 + .cse51) :input) (res .cse52 (! (and- 1 .cse50) :proves (- .cse50 + .cse52) :input) (res .cse53 (! (and- 0 .cse50) :proves (- .cse50 + .cse53) :input) (res .cse54 (! (and- 1 .cse51) :proves (- .cse51 + .cse54) :input) (let ((.cse55 (= .cse57 true))) (let ((.cse58 (= .cse57 .cse55))) (let-proof ((.cse59 (res true .cse12 (res .cse55 (res .cse57 (=+1 .cse58) (=+2 .cse55)) (res .cse57 (=-1 .cse55) (=+2 .cse58)))))) (res .cse55 (let ((.cse56 (= .cse57 false))) (res .cse56 (! (res .cse57 (res false (=+1 .cse56) .cse3) (res .cse58 .cse59 (=-2 .cse58))) :proves (+ .cse56 + .cse55) :input) (let ((.cse60 (= .cse61 true))) (res .cse60 (res .cse32 (! (res .cse61 (res .cse62 (not+ .cse62) (=>+ 1 .cse32)) (let ((.cse63 (= .cse61 .cse60))) (res .cse63 (res true .cse12 (res .cse60 (res .cse61 (=+1 .cse63) (=+2 .cse60)) (res .cse61 (=-1 .cse60) (=+2 .cse63)))) (=-2 .cse63)))) :proves (+ .cse32 + .cse60) :input) (res .cse64 (! (=>+ 1 .cse64) :proves (+ .cse64 - .cse32) :input) (res .cse65 (res .cse28 (res .cse34 (! (=>+ 0 .cse28) :proves (+ .cse28 + .cse34) :input) (let ((.cse66 (= x@0 .cse67))) (res .cse66 (! (res (= x@0 x@2) (symm x@0 x@2) (trans x@0 x@2 x@1 .cse67)) :proves (+ .cse66 - .cse34 - .cse53 - .cse54) :trans (x@0 x@2 x@1 .cse67)) (! (let ((.cse68 (= .cse67 x@0))) (res .cse68 (symm .cse67 x@0) (farkas 1 .cse68))) :proves (- .cse66) :EQ)))) (! (=>+ 1 .cse65) :proves (+ .cse65 - .cse28) :input)) (! (res .cse69 (and+ .cse69) (=>+ 1 .cse48)) :proves (+ .cse48 - .cse65 - .cse64) :input)))) (let ((.cse70 (= .cse57 .cse61))) (res .cse70 (! (res (= call1formal@post@0@@0 mutex@1) (symm call1formal@post@0@@0 mutex@1) (cong (IsHeld call1formal@post@0@@0) (IsHeld mutex@1))) :proves (+ .cse70 - .cse52) :cong (.cse57 .cse61)) (! (res (= false .cse57) (symm false .cse57) (trans .cse26 false .cse57 .cse61 true)) :proves (+ .cse22 - .cse15 - .cse56 - .cse70 - .cse60) :trans (.cse26 false .cse57 .cse61 true)))))))) (! (res .cse57 (let ((.cse71 (not .cse55))) (res .cse71 (res .cse72 (not+ .cse72) (let ((.cse73 (= .cse72 .cse71))) (res .cse73 (res .cse58 .cse59 (cong (not .cse57) (not .cse55))) (=-2 .cse73)))) (not- .cse71))) (res .cse72 (and- 0 .cse51) (not- .cse72))) :proves (- .cse51 - .cse55) :input))))))))))) .cse27)) :proves (+ .cse48) :rup) (! (=>+ 1 .cse47) :proves (+ .cse47 - .cse48) :input)) :proves (+ .cse47) :rup) (! (res .cse74 (and+ .cse74) (=>+ 1 .cse40)) :proves (+ .cse40 - .cse47 - .cse41) :input))) :proves (+ .cse40) :rup) (! (res .cse75 (and+ .cse75) (=>+ 1 .cse39)) :proves (- .cse38 - .cse40 + .cse39) :input)) .cse76) :proves (- .cse38) :rup)) :proves (- .cse30) :rup))) (let-proof ((.cse19 (! (res .cse30 (! (=>+ 0 .cse30) :proves (+ .cse30 + .cse18) :input) .cse37) :proves (+ .cse18) :rup))) (let ((.cse0 (= .cse2 false))) (let-proof ((.cse11 (! (res .cse28 (! (=>+ 1 .cse28) :proves (+ .cse28 - .cse10) :input) (! (res .cse29 (! (=>+ 1 .cse29) :proves (+ .cse29 - .cse28) :input) (! (res .cse30 (res .cse31 (! (res .cse32 (! (res .cse33 (! (=>+ 0 .cse32) :proves (+ .cse32 + .cse33) :input) (! (res .cse34 (! (res .cse18 .cse19 (! (and- 0 .cse18) :proves (- .cse18 + .cse34) :input)) :proves (+ .cse34) :rup) (! (res .cse35 (and- 0 .cse33) (not- .cse35)) :proves (- .cse33 - .cse34) :input)) :proves (- .cse33) :rup)) :proves (+ .cse32) :rup) (! (=>+ 1 .cse31) :proves (+ .cse31 - .cse32) :input)) :proves (+ .cse31) :rup) (! (res .cse36 (and+ .cse36) (=>+ 1 .cse30)) :proves (- .cse29 - .cse31 + .cse30) :input)) .cse37) :proves (- .cse29) :rup)) :proves (- .cse28) :rup)) :proves (- .cse10) :rup))) (res .cse0 (! (let ((.cse1 (= .cse2 true))) (let ((.cse4 (= .cse2 .cse1))) (let-proof ((.cse5 (res true .cse12 (res .cse1 (res .cse2 (=+1 .cse4) (=+2 .cse1)) (res .cse2 (=-1 .cse1) (=+2 .cse4)))))) (res .cse1 (! (res .cse2 (res false (=+1 .cse0) .cse3) (res .cse4 .cse5 (=-2 .cse4))) :proves (+ .cse0 + .cse1) :input) (! (res .cse6 (! (res .cse2 (let ((.cse7 (not .cse1))) (res .cse7 (let ((.cse8 (not .cse2))) (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res .cse4 .cse5 (cong (not .cse2) (not .cse1))) (=-2 .cse9))))) (not- .cse7))) (=>+ 1 .cse6)) :proves (+ .cse6 - .cse1) :input) (! (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse6) :input) .cse11) :proves (- .cse6) :rup)) :proves (- .cse1) :rup))))) :proves (+ .cse0) :rup) (res .cse13 .cse14 (res .cse15 .cse16 (res .cse17 (! (res .cse18 .cse19 (! (and- 1 .cse18) :proves (- .cse18 + .cse17) :input)) :proves (+ .cse17) :rup) (res .cse20 (! (res .cse21 (! (res .cse10 (! (=>+ 0 .cse10) :proves (+ .cse10 + .cse21) :input) .cse11) :proves (+ .cse21) :rup) (! (and- 0 .cse21) :proves (- .cse21 + .cse20) :input)) :proves (+ .cse20) :rup) (res .cse22 (let ((.cse23 (= mutex@2 call1formal@post@0))) (res .cse23 (! (trans mutex@2 mutex@1 call1formal@post@0) :proves (+ .cse23 - .cse20 - .cse17) :trans (mutex@2 mutex@1 call1formal@post@0)) (let ((.cse24 (= .cse2 .cse25))) (res .cse24 (! (cong (IsHeld mutex@2) (IsHeld call1formal@post@0)) :proves (+ .cse24 - .cse23) :cong (.cse2 .cse25)) (! (res (= false .cse2) (symm false .cse2) (trans .cse26 false .cse2 .cse25 true)) :proves (+ .cse22 - .cse15 - .cse0 - .cse24 - .cse13) :trans (.cse26 false .cse2 .cse25 true)))))) .cse27)))))))))))))))))))))))))))))))))))))))) :proves () :rup)

