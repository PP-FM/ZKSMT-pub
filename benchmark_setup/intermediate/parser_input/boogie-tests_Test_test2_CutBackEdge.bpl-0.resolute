unsat
(! (let ((.cse29 (ControlFlow 0 2))) (let ((.cse22 (= .cse29 (- 1))) (.cse0 (= (- 1) .cse29))) (let ((.cse44 (= .cse22 .cse0))) (let-proof ((.cse45 (res .cse0 (res .cse22 (=+1 .cse44) (symm (- 1) .cse29)) (res .cse22 (symm .cse29 (- 1)) (=+2 .cse44))))) (res .cse0 (! (let ((.cse30 (= i@0 0))) (let ((.cse1 (and .cse30 .cse22))) (res .cse1 (! (let ((.cse19 (= i@1 0))) (let ((.cse2 (=> .cse1 .cse19))) (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + .cse1) :input) (! (let ((.cse41 (ControlFlow 0 3))) (let ((.cse31 (= .cse41 2))) (let ((.cse3 (=> .cse31 .cse2))) (res .cse3 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse2) :input) (! (let ((.cse4 (=> true .cse3))) (res .cse4 (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse3) :input) (! (let ((.cse36 (= .cse41 (- 4)))) (let ((.cse5 (=> .cse36 true))) (let-proof ((.cse6 true+)) (res .cse5 (! (res true .cse6 (=>+ 1 .cse5)) :proves (+ .cse5) :input) (! (let ((.cse7 (and .cse5 .cse4))) (res .cse7 (and+ .cse7) (let ((.cse42 (= (ControlFlow 0 5) 3))) (let ((.cse8 (=> .cse42 .cse7))) (res .cse8 (=>+ 1 .cse8) (let ((.cse43 (= (ControlFlow 0 0) 5))) (let ((.cse9 (=> .cse43 .cse8))) (res .cse9 (=>+ 1 .cse9) (let ((.cse23 (- 0 1))) (let ((.cse21 (= .cse29 .cse23))) (let ((.cse20 (and .cse30 .cse21))) (let ((.cse37 (- 0 4)) (.cse18 (=> .cse20 .cse19))) (let ((.cse17 (=> .cse31 .cse18)) (.cse35 (= .cse41 .cse37)) (.cse25 (= 0 0))) (let ((.cse34 (=> .cse35 .cse25)) (.cse16 (=> .cse25 .cse17))) (let ((.cse15 (and .cse34 .cse16))) (let ((.cse14 (=> .cse42 .cse15))) (let ((.cse10 (=> .cse43 .cse14))) (let ((.cse12 (not .cse10))) (res .cse10 (let ((.cse11 (not .cse9))) (res .cse11 (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res (= .cse10 .cse9) (res (= .cse14 .cse8) (res (= .cse15 .cse7) (let ((.cse32 (= .cse25 true))) (let-proof ((.cse26 (refl 0))) (let-proof ((.cse33 (res true .cse6 (res .cse25 .cse26 (=+2 .cse32))))) (res (= .cse16 .cse4) (res (= .cse17 .cse3) (res (= .cse18 .cse2) (res (= .cse19 .cse19) (refl .cse19) (res (= .cse20 .cse1) (res (= .cse21 .cse22) (res (= .cse23 (- 1)) (let ((.cse24 (* (- 1) 1))) (res (= .cse24 (- 1)) (poly* .cse24 (- 1)) (res .cse25 .cse26 (let ((.cse27 (+ 0 .cse24)) (.cse28 (+ 0 (- 1)))) (res (= .cse27 .cse28) (cong (+ 0 .cse24) (+ 0 (- 1))) (res (= .cse23 .cse27) (-def 0 1) (res (= .cse28 (- 1)) (poly+ .cse28 (- 1)) (trans .cse23 .cse27 .cse28 (- 1))))))))) (res (= .cse29 .cse29) (refl .cse29) (cong (= .cse29 .cse23) (= .cse29 (- 1))))) (res (= .cse30 .cse30) (refl .cse30) (cong (and .cse30 .cse21) (and .cse30 .cse22)))) (cong (=> .cse20 .cse19) (=> .cse1 .cse19)))) (res (= .cse31 .cse31) (refl .cse31) (cong (=> .cse31 .cse18) (=> .cse31 .cse2)))) (res .cse32 .cse33 (cong (=> .cse25 .cse17) (=> true .cse3)))) (res (= .cse34 .cse5) (res .cse32 .cse33 (res (= .cse35 .cse36) (res (= .cse37 (- 4)) (let ((.cse38 (* (- 1) 4))) (res (= .cse38 (- 4)) (poly* .cse38 (- 4)) (res .cse25 .cse26 (let ((.cse39 (+ 0 .cse38)) (.cse40 (+ 0 (- 4)))) (res (= .cse39 .cse40) (cong (+ 0 .cse38) (+ 0 (- 4))) (res (= .cse37 .cse39) (-def 0 4) (res (= .cse40 (- 4)) (poly+ .cse40 (- 4)) (trans .cse37 .cse39 .cse40 (- 4))))))))) (res (= .cse41 .cse41) (refl .cse41) (cong (= .cse41 .cse37) (= .cse41 (- 4))))) (cong (=> .cse35 .cse25) (=> .cse36 true)))) (cong (and .cse34 .cse16) (and .cse5 .cse4))))))) (res (= .cse42 .cse42) (refl .cse42) (cong (=> .cse42 .cse15) (=> .cse42 .cse7)))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse14) (=> .cse43 .cse8)))) (cong (not .cse10) (not .cse9))) (=-2 .cse13)))) (not- .cse11))) (res .cse12 (assume .cse12) (not- .cse12))))))))))))))))))))) :proves (- .cse5 - .cse4) :input))))) :proves (- .cse4) :rup))) :proves (- .cse3) :rup))))) :proves (- .cse2) :rup)))) :proves (+ .cse1) :rup) (! (res .cse22 (and- 1 .cse1) (res .cse44 .cse45 (=-2 .cse44))) :proves (- .cse1 + .cse0) :input)))) :proves (+ .cse0) :rup) (! (let ((.cse47 (not .cse22))) (res .cse22 (let ((.cse46 (not .cse0))) (res .cse46 (res .cse47 (not+ .cse47) (let ((.cse48 (= .cse47 .cse46))) (res .cse48 (res .cse44 .cse45 (cong (not .cse22) (not .cse0))) (=-2 .cse48)))) (not- .cse46))) (res .cse47 (assume .cse47) (not- .cse47)))) :proves (- .cse0) :input)))))) :proves () :rup)

