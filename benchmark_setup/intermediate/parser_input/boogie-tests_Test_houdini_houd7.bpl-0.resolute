unsat
(! (let-proof ((.cse0 true+)) (res true .cse0 (let ((.cse27 (ControlFlow 0 2))) (let ((.cse22 (= .cse27 (- 1)))) (let ((.cse1 (=> .cse22 true))) (res .cse1 (=>+ 1 .cse1) (let ((.cse41 (* (- 1) i))) (let ((.cse38 (<= .cse41 0)) (.cse52 (<= i 0))) (let ((.cse49 (not .cse52)) (.cse36 (not .cse38))) (let ((.cse34 (=> b3 .cse36)) (.cse32 (= (ControlFlow 0 3) 2)) (.cse46 (=> b1 .cse49)) (.cse44 (=> b2 (= i 0)))) (let ((.cse43 (and .cse46 .cse44)) (.cse31 (and .cse34 .cse32))) (let ((.cse29 (and .cse43 .cse31))) (let ((.cse2 (=> .cse29 .cse1))) (res .cse2 (=>+ 1 .cse2) (let ((.cse54 (= (ControlFlow 0 0) 3))) (let ((.cse3 (=> .cse54 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse50 (> i 0)) (.cse37 (< i 0))) (let ((.cse33 (=> b3 .cse37)) (.cse45 (=> b1 .cse50)) (.cse23 (- 0 1))) (let ((.cse21 (= .cse27 .cse23)) (.cse10 (> 5 0)) (.cse42 (and .cse45 .cse44)) (.cse30 (and .cse33 .cse32))) (let ((.cse28 (and .cse42 .cse30)) (.cse9 (=> .cse21 .cse10))) (let ((.cse8 (=> .cse28 .cse9))) (let ((.cse4 (=> .cse54 .cse8))) (let ((.cse6 (not .cse4))) (res .cse4 (let ((.cse5 (not .cse3))) (res .cse5 (res .cse6 (not+ .cse6) (let ((.cse7 (= .cse6 .cse5))) (res .cse7 (res (= .cse4 .cse3) (res (= .cse8 .cse2) (res (= .cse9 .cse1) (res (= .cse10 true) (let ((.cse12 (not false))) (let ((.cse11 (= .cse12 true))) (let-proof ((.cse13 false-)) (res .cse11 (res true .cse0 (res .cse12 (res false (not+ .cse12) .cse13) (=+2 .cse11))) (res (= .cse10 .cse12) (let ((.cse16 (<= 5 0))) (let ((.cse14 (not .cse16))) (res (= .cse14 .cse12) (let ((.cse15 (= .cse16 false))) (res .cse15 (res false (res .cse16 (=+1 .cse15) (farkas 1 .cse16)) .cse13) (cong (not .cse16) (not false)))) (let ((.cse17 (= .cse10 .cse14))) (res .cse17 (let ((.cse19 (< 0 5))) (let ((.cse18 (= .cse10 .cse19))) (res .cse18 (>def 5 0) (res .cse14 (res .cse10 (=+1 .cse17) (res .cse19 (=-2 .cse18) (res .cse16 (not+ .cse14) (farkas 1 .cse19 1 .cse16)))) (res .cse10 (res .cse19 (let-proof ((.cse20 (total 5 0))) (res .cse16 .cse20 (res .cse16 (res .cse19 .cse20 (farkas 1 .cse16 1 .cse19)) (not- .cse14)))) (=-1 .cse18)) (=+2 .cse17)))))) (trans .cse10 .cse14 .cse12)))))) (trans .cse10 .cse12 true)))))) (res (= .cse21 .cse22) (res (= .cse23 (- 1)) (let ((.cse24 (* (- 1) 1))) (res (= .cse24 (- 1)) (poly* .cse24 (- 1)) (res (= 0 0) (refl 0) (let ((.cse25 (+ 0 .cse24)) (.cse26 (+ 0 (- 1)))) (res (= .cse25 .cse26) (cong (+ 0 .cse24) (+ 0 (- 1))) (res (= .cse23 .cse25) (-def 0 1) (res (= .cse26 (- 1)) (poly+ .cse26 (- 1)) (trans .cse23 .cse25 .cse26 (- 1))))))))) (res (= .cse27 .cse27) (refl .cse27) (cong (= .cse27 .cse23) (= .cse27 (- 1))))) (cong (=> .cse21 .cse10) (=> .cse22 true)))) (res (= .cse28 .cse29) (res (= .cse30 .cse31) (res (= .cse32 .cse32) (refl .cse32) (res (= .cse33 .cse34) (let ((.cse35 (= .cse37 .cse36))) (res .cse35 (res .cse36 (res .cse37 (=+1 .cse35) (res .cse38 (not+ .cse36) (farkas 1 .cse37 1 .cse38))) (res .cse37 (let ((.cse39 (<= 0 i))) (res .cse39 (total 0 i) (res .cse38 (let ((.cse40 (< 0 .cse41))) (res .cse40 (total .cse41 0) (farkas 1 .cse39 1 .cse40))) (not- .cse36)))) (=+2 .cse35))) (res (= b3 b3) (refl b3) (cong (=> b3 .cse37) (=> b3 .cse36))))) (cong (and .cse33 .cse32) (and .cse34 .cse32)))) (res (= .cse42 .cse43) (res (= .cse44 .cse44) (refl .cse44) (res (= .cse45 .cse46) (let ((.cse47 (= .cse50 .cse49))) (res .cse47 (let ((.cse51 (< 0 i))) (let ((.cse48 (= .cse50 .cse51))) (res .cse48 (>def i 0) (res .cse49 (res .cse50 (=+1 .cse47) (res .cse51 (=-2 .cse48) (res .cse52 (not+ .cse49) (farkas 1 .cse51 1 .cse52)))) (res .cse50 (res .cse51 (let-proof ((.cse53 (total i 0))) (res .cse52 .cse53 (res .cse52 (res .cse51 .cse53 (farkas 1 .cse52 1 .cse51)) (not- .cse49)))) (=-1 .cse48)) (=+2 .cse47)))))) (res (= b1 b1) (refl b1) (cong (=> b1 .cse50) (=> b1 .cse49))))) (cong (and .cse45 .cse44) (and .cse46 .cse44)))) (cong (and .cse42 .cse30) (and .cse43 .cse31)))) (cong (=> .cse28 .cse9) (=> .cse29 .cse1)))) (res (= .cse54 .cse54) (refl .cse54) (cong (=> .cse54 .cse8) (=> .cse54 .cse2)))) (cong (not .cse4) (not .cse3))) (=-2 .cse7)))) (not- .cse5))) (res .cse6 (assume .cse6) (not- .cse6))))))))))))))))))))))))))) :proves () :input)

