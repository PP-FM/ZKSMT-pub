unsat
(! (let ((.cse31 (ControlFlow 0 2))) (let ((.cse22 (= .cse31 (- 1)))) (let ((.cse1 (=> .cse22 true))) (let ((.cse0 (=> true .cse1))) (let-proof ((.cse2 true+)) (res .cse0 (! (res .cse1 (! (res true .cse2 (=>+ 1 .cse1)) :proves (+ .cse1) :input) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse37 (= .cse31 (- 3)))) (let ((.cse3 (=> .cse37 true))) (res .cse3 (! (res true .cse2 (=>+ 1 .cse3)) :proves (+ .cse3) :input) (! (let ((.cse4 (and .cse3 .cse0))) (res .cse4 (and+ .cse4) (let ((.cse43 (= (ControlFlow 0 4) 2))) (let ((.cse5 (=> .cse43 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse44 (= (ControlFlow 0 0) 4))) (let ((.cse6 (=> .cse44 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse19 (ite true x y)) (.cse23 (- 0 1))) (let ((.cse42 (ite b x x)) (.cse38 (- 0 3)) (.cse21 (= .cse31 .cse23)) (.cse15 (= x .cse19))) (let ((.cse14 (=> .cse21 .cse15)) (.cse36 (= .cse31 .cse38)) (.cse34 (= x .cse42))) (let ((.cse35 (=> .cse36 .cse34)) (.cse13 (=> .cse34 .cse14))) (let ((.cse12 (and .cse35 .cse13))) (let ((.cse11 (=> .cse43 .cse12))) (let ((.cse7 (=> .cse44 .cse11))) (let ((.cse9 (not .cse7))) (res .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res (= .cse7 .cse6) (res (= .cse11 .cse5) (res (= .cse12 .cse4) (let ((.cse18 (= x x))) (let ((.cse16 (= .cse18 true))) (let-proof ((.cse20 (refl x))) (let-proof ((.cse17 (res true .cse2 (res .cse18 .cse20 (=+2 .cse16))))) (let ((.cse32 (= .cse34 true)) (.cse25 (= 0 0)) (.cse29 (= .cse31 .cse31))) (let-proof ((.cse33 (res .cse16 .cse17 (res (= .cse34 .cse18) (res (= .cse42 x) (res b (ite2 .cse42) (ite1 .cse42)) (res .cse18 .cse20 (cong (= x .cse42) (= x x)))) (trans .cse34 .cse18 true)))) (.cse26 (refl 0)) (.cse30 (refl .cse31))) (res (= .cse13 .cse0) (res (= .cse14 .cse1) (res (= .cse15 true) (res .cse16 .cse17 (res (= .cse15 .cse18) (res (= .cse19 x) (res true .cse2 (ite1 .cse19)) (res .cse18 .cse20 (cong (= x .cse19) (= x x)))) (trans .cse15 .cse18 true))) (res (= .cse21 .cse22) (res (= .cse23 (- 1)) (let ((.cse24 (* (- 1) 1))) (res (= .cse24 (- 1)) (poly* .cse24 (- 1)) (res .cse25 .cse26 (let ((.cse27 (+ 0 .cse24)) (.cse28 (+ 0 (- 1)))) (res (= .cse27 .cse28) (cong (+ 0 .cse24) (+ 0 (- 1))) (res (= .cse23 .cse27) (-def 0 1) (res (= .cse28 (- 1)) (poly+ .cse28 (- 1)) (trans .cse23 .cse27 .cse28 (- 1))))))))) (res .cse29 .cse30 (cong (= .cse31 .cse23) (= .cse31 (- 1))))) (cong (=> .cse21 .cse15) (=> .cse22 true)))) (res .cse32 .cse33 (cong (=> .cse34 .cse14) (=> true .cse1)))) (res (= .cse35 .cse3) (res .cse32 .cse33 (res (= .cse36 .cse37) (res (= .cse38 (- 3)) (let ((.cse39 (* (- 1) 3))) (res (= .cse39 (- 3)) (poly* .cse39 (- 3)) (res .cse25 .cse26 (let ((.cse40 (+ 0 .cse39)) (.cse41 (+ 0 (- 3)))) (res (= .cse40 .cse41) (cong (+ 0 .cse39) (+ 0 (- 3))) (res (= .cse38 .cse40) (-def 0 3) (res (= .cse41 (- 3)) (poly+ .cse41 (- 3)) (trans .cse38 .cse40 .cse41 (- 3))))))))) (res .cse29 .cse30 (cong (= .cse31 .cse38) (= .cse31 (- 3))))) (cong (=> .cse36 .cse34) (=> .cse37 true)))) (cong (and .cse35 .cse13) (and .cse3 .cse0)))))))))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse12) (=> .cse43 .cse4)))) (res (= .cse44 .cse44) (refl .cse44) (cong (=> .cse44 .cse11) (=> .cse44 .cse5)))) (cong (not .cse7) (not .cse6))) (=-2 .cse10)))) (not- .cse8))) (res .cse9 (assume .cse9) (not- .cse9))))))))))))))))))) :proves (- .cse3 - .cse0) :input)))))))))) :proves () :rup)

