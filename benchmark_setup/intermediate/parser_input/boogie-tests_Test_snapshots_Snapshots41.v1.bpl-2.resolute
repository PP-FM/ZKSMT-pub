unsat
(! (let ((.cse77 (ControlFlow 0 2))) (let ((.cse2 (= .cse77 (- 1))) (.cse0 (= (- 1) .cse77))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse77)) (res .cse2 (symm .cse77 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse79 (+ (* (- 1) z) 2))) (let ((.cse13 (<= .cse79 0))) (let ((.cse1 (=> .cse2 .cse13))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse25 (+ z (- 20)))) (let ((.cse11 (<= .cse25 0)) (.cse42 (= (ControlFlow 0 5) 2))) (let ((.cse41 (and .cse11 .cse42))) (let ((.cse5 (=> .cse41 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse80 (ControlFlow 0 6))) (let ((.cse50 (= .cse80 5))) (let ((.cse6 (=> .cse50 .cse5))) (res .cse6 (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse5) :input) (! (let ((.cse65 (ControlFlow 0 3))) (let ((.cse55 (= .cse65 2)) (.cse58 (= .cse65 (- 4)))) (let ((.cse9 (=> .cse58 true)) (.cse10 (=> .cse55 .cse1))) (let ((.cse26 (not .cse11)) (.cse28 (and .cse9 .cse10))) (let ((.cse67 (= .cse80 3)) (.cse8 (=> .cse26 .cse28))) (let ((.cse20 (< 0 .cse79)) (.cse7 (=> .cse67 .cse8))) (let-proof ((.cse27 (not- .cse26)) (.cse21 (total .cse79 0))) (res .cse7 (! (res .cse8 (! (res .cse9 (! (res true true+ (=>+ 1 .cse9)) :proves (+ .cse9) :input) (res .cse10 (res .cse11 (let ((.cse23 (+ z (- 1)))) (let ((.cse12 (<= .cse23 0))) (res .cse12 (res .cse1 (! (res .cse13 (let ((.cse14 (not .cse12))) (let-proof ((.cse15 (not+ .cse14))) (res .cse14 .cse15 (let ((.cse16 (not .cse14))) (res .cse16 (let ((.cse17 (not .cse13))) (res .cse17 (not+ .cse17) (let ((.cse18 (= .cse17 .cse16))) (res .cse18 (let ((.cse19 (= .cse13 .cse14))) (res .cse19 (res .cse14 (res .cse13 (=+1 .cse19) (res .cse12 .cse15 (farkas 1 .cse13 1 .cse12))) (res .cse13 (res .cse20 .cse21 (res .cse12 (let ((.cse22 (<= 1 .cse23))) (res .cse22 (total-int .cse23 0) (farkas 1 .cse20 1 .cse22))) (not- .cse14))) (=+2 .cse19))) (cong (not .cse13) (not .cse14)))) (=-2 .cse18))))) (not- .cse16)))))) (=>+ 1 .cse1)) :proves (+ .cse1 + .cse12) :input) (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse1) :input)) (! (let ((.cse24 (<= 1 .cse25))) (res .cse24 (total-int .cse25 0) (farkas 1 .cse12 1 .cse24))) :proves (- .cse12 + .cse11) :LA (1 (- 1)))))) (! (res .cse26 (=>+ 0 .cse8) .cse27) :proves (+ .cse8 - .cse11) :input)) (! (res .cse28 (and+ .cse28) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse10 - .cse9) :input))) :proves (+ .cse8) :rup) (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse8) :input)) :proves (+ .cse7) :rup) (! (let ((.cse29 (and .cse7 .cse6))) (res .cse29 (and+ .cse29) (let ((.cse78 (= (ControlFlow 0 0) 6))) (let ((.cse30 (=> .cse78 .cse29))) (res .cse30 (=>+ 1 .cse30) (let ((.cse73 (- 0 1))) (let ((.cse59 (- 0 4)) (.cse72 (= .cse77 .cse73)) (.cse70 (<= 2 z))) (let ((.cse49 (=> .cse72 .cse70)) (.cse57 (= .cse65 .cse59))) (let ((.cse44 (<= z 20)) (.cse56 (=> .cse57 true)) (.cse54 (=> .cse55 .cse49))) (let ((.cse46 (< 20 z)) (.cse53 (and .cse56 .cse54)) (.cse40 (and .cse44 .cse42))) (let ((.cse37 (=> .cse40 .cse49)) (.cse52 (=> .cse46 .cse53))) (let ((.cse51 (=> .cse67 .cse52)) (.cse36 (=> .cse50 .cse37))) (let ((.cse35 (and .cse51 .cse36))) (let ((.cse31 (=> .cse78 .cse35))) (let ((.cse33 (not .cse31))) (res .cse31 (let ((.cse32 (not .cse30))) (res .cse32 (res .cse33 (not+ .cse33) (let ((.cse34 (= .cse33 .cse32))) (res .cse34 (res (= .cse31 .cse30) (res (= .cse35 .cse29) (let ((.cse61 (= 0 0))) (let-proof ((.cse62 (refl 0))) (let ((.cse38 (= .cse49 .cse1))) (let-proof ((.cse39 (let ((.cse69 (= .cse70 .cse13))) (res .cse69 (res .cse13 (res .cse70 (=+1 .cse69) (res .cse20 .cse21 (farkas 1 .cse70 1 .cse20))) (res .cse70 (let ((.cse71 (< z 2))) (res .cse71 (total 2 z) (farkas 1 .cse71 1 .cse13))) (=+2 .cse69))) (res (= .cse72 .cse2) (res (= .cse73 (- 1)) (let ((.cse74 (* (- 1) 1))) (res (= .cse74 (- 1)) (poly* .cse74 (- 1)) (res .cse61 .cse62 (let ((.cse75 (+ 0 .cse74)) (.cse76 (+ 0 (- 1)))) (res (= .cse75 .cse76) (cong (+ 0 .cse74) (+ 0 (- 1))) (res (= .cse73 .cse75) (-def 0 1) (res (= .cse76 (- 1)) (poly+ .cse76 (- 1)) (trans .cse73 .cse75 .cse76 (- 1))))))))) (res (= .cse77 .cse77) (refl .cse77) (cong (= .cse77 .cse73) (= .cse77 (- 1))))) (cong (=> .cse72 .cse70) (=> .cse2 .cse13)))))) (.cse48 (farkas 1 .cse46 1 .cse11)) (.cse47 (total z 20)) (.cse45 (let ((.cse68 (< 0 .cse25))) (res .cse68 (total .cse25 0) (farkas 1 .cse44 1 .cse68))))) (res (= .cse36 .cse6) (res (= .cse37 .cse5) (res .cse38 .cse39 (res (= .cse40 .cse41) (res (= .cse42 .cse42) (refl .cse42) (let ((.cse43 (= .cse44 .cse11))) (res .cse43 (res .cse11 (res .cse44 (=+1 .cse43) .cse45) (res .cse44 (res .cse46 .cse47 .cse48) (=+2 .cse43))) (cong (and .cse44 .cse42) (and .cse11 .cse42))))) (cong (=> .cse40 .cse49) (=> .cse41 .cse1)))) (res (= .cse50 .cse50) (refl .cse50) (cong (=> .cse50 .cse37) (=> .cse50 .cse5)))) (res (= .cse51 .cse7) (res (= .cse52 .cse8) (res (= .cse53 .cse28) (res (= .cse54 .cse10) (res .cse38 .cse39 (res (= .cse55 .cse55) (refl .cse55) (cong (=> .cse55 .cse49) (=> .cse55 .cse1)))) (res (= .cse56 .cse9) (res (= true true) (refl true) (res (= .cse57 .cse58) (res (= .cse59 (- 4)) (let ((.cse60 (* (- 1) 4))) (res (= .cse60 (- 4)) (poly* .cse60 (- 4)) (res .cse61 .cse62 (let ((.cse63 (+ 0 .cse60)) (.cse64 (+ 0 (- 4)))) (res (= .cse63 .cse64) (cong (+ 0 .cse60) (+ 0 (- 4))) (res (= .cse59 .cse63) (-def 0 4) (res (= .cse64 (- 4)) (poly+ .cse64 (- 4)) (trans .cse59 .cse63 .cse64 (- 4))))))))) (res (= .cse65 .cse65) (refl .cse65) (cong (= .cse65 .cse59) (= .cse65 (- 4))))) (cong (=> .cse57 true) (=> .cse58 true)))) (cong (and .cse56 .cse54) (and .cse9 .cse10)))) (let ((.cse66 (= .cse46 .cse26))) (res .cse66 (res .cse26 (res .cse46 (=+1 .cse66) (res .cse11 (not+ .cse26) .cse48)) (res .cse46 (res .cse44 .cse47 (res .cse11 .cse45 .cse27)) (=+2 .cse66))) (cong (=> .cse46 .cse53) (=> .cse26 .cse28))))) (res (= .cse67 .cse67) (refl .cse67) (cong (=> .cse67 .cse52) (=> .cse67 .cse8)))) (cong (and .cse51 .cse36) (and .cse7 .cse6)))))))) (res (= .cse78 .cse78) (refl .cse78) (cong (=> .cse78 .cse35) (=> .cse78 .cse29)))) (cong (not .cse31) (not .cse30))) (=-2 .cse34)))) (not- .cse32))) (res .cse33 (assume .cse33) (not- .cse33)))))))))))))))))) :proves (- .cse7 - .cse6) :input))))))))) :proves (- .cse6) :rup))))) :proves (- .cse5) :rup)))))) :proves (- .cse1) :rup))))) :proves (+ .cse0) :rup) (! (let ((.cse82 (not .cse2))) (res .cse2 (let ((.cse81 (not .cse0))) (res .cse81 (res .cse82 (not+ .cse82) (let ((.cse83 (= .cse82 .cse81))) (res .cse83 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse83)))) (not- .cse81))) (res .cse82 (assume .cse82) (not- .cse82)))) :proves (- .cse0) :input)))))) :proves () :rup)

