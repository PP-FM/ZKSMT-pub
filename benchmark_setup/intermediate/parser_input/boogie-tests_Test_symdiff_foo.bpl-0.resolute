unsat
(! (let ((.cse86 (ControlFlow 0 2))) (let ((.cse2 (= .cse86 (- 1))) (.cse0 (= (- 1) .cse86))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse86)) (res .cse2 (symm .cse86 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 ok@0))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse43 (= (ControlFlow 0 6) 2))) (let ((.cse8 (and ok@0 .cse43)) (.cse59 (= x 3))) (let ((.cse47 (not .cse59)) (.cse7 (=> .cse8 .cse1)) (.cse90 (ControlFlow 0 7))) (let ((.cse48 (= .cse90 6)) (.cse6 (=> .cse47 .cse7))) (let ((.cse5 (=> .cse48 .cse6))) (res .cse5 (! (res .cse6 (! (res .cse7 (! (res .cse1 (res .cse8 (! (=>+ 0 .cse7) :proves (+ .cse7 + .cse8) :input) (res ok@0 (! (and- 0 .cse8) :proves (- .cse8 + ok@0) :input) (! (=>+ 1 .cse1) :proves (+ .cse1 - ok@0) :input))) (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse1) :input)) :proves (+ .cse7) :rup) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (let ((.cse58 (not ok@0)) (.cse78 (= (ControlFlow 0 3) 2))) (let ((.cse77 (and .cse58 .cse78))) (let ((.cse9 (=> .cse77 .cse1))) (res .cse9 (! (=>+ 1 .cse9) :proves (+ .cse9 - .cse1) :input) (let ((.cse68 (= (ControlFlow 0 4) 2))) (let ((.cse67 (and .cse58 .cse68))) (let ((.cse10 (=> .cse67 .cse1))) (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse1) :input) (let ((.cse54 (= (ControlFlow 0 5) 2))) (let ((.cse53 (and .cse58 .cse54))) (let ((.cse11 (=> .cse53 .cse1))) (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse1) :input) (let ((.cse79 (= x 1))) (let ((.cse12 (=> .cse79 .cse9))) (res .cse12 (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse9) :input) (let ((.cse69 (= x 2))) (let ((.cse13 (=> .cse69 .cse10))) (res .cse13 (! (=>+ 1 .cse13) :proves (+ .cse13 - .cse10) :input) (let ((.cse14 (=> .cse59 .cse11))) (res .cse14 (! (=>+ 1 .cse14) :proves (+ .cse14 - .cse11) :input) (let ((.cse88 (ControlFlow 0 9))) (let ((.cse80 (= .cse88 3))) (let ((.cse15 (=> .cse80 .cse12))) (res .cse15 (! (=>+ 1 .cse15) :proves (+ .cse15 - .cse12) :input) (let ((.cse89 (ControlFlow 0 8))) (let ((.cse70 (= .cse89 4))) (let ((.cse16 (=> .cse70 .cse13))) (res .cse16 (! (=>+ 1 .cse16) :proves (+ .cse16 - .cse13) :input) (let ((.cse60 (= .cse90 5))) (let ((.cse17 (=> .cse60 .cse14))) (res .cse17 (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse14) :input) (let ((.cse61 (not .cse69)) (.cse20 (and .cse17 .cse5))) (let ((.cse62 (= .cse89 7)) (.cse19 (=> .cse61 .cse20))) (let ((.cse22 (=> .cse62 .cse19))) (let ((.cse71 (not .cse79)) (.cse23 (and .cse16 .cse22))) (let ((.cse72 (= .cse88 8)) (.cse21 (=> .cse71 .cse23))) (let ((.cse18 (=> .cse72 .cse21))) (res .cse18 (res .cse19 (! (res .cse20 (and+ .cse20) (=>+ 1 .cse19)) :proves (+ .cse19 - .cse17 - .cse5) :input) (res .cse21 (res .cse22 (! (=>+ 1 .cse22) :proves (+ .cse22 - .cse19) :input) (! (res .cse23 (and+ .cse23) (=>+ 1 .cse21)) :proves (- .cse16 + .cse21 - .cse22) :input)) (! (=>+ 1 .cse18) :proves (+ .cse18 - .cse21) :input))) (! (let ((.cse24 (and .cse15 .cse18))) (res .cse24 (and+ .cse24) (let ((.cse87 (= (ControlFlow 0 0) 9))) (let ((.cse25 (=> .cse87 .cse24))) (res .cse25 (=>+ 1 .cse25) (let ((.cse82 (- 0 1))) (let ((.cse81 (= .cse86 .cse82)) (.cse57 (= ok@0 false)) (.cse45 (= ok@0 true))) (let ((.cse42 (and .cse45 .cse43)) (.cse52 (and .cse57 .cse54)) (.cse46 (=> .cse81 ok@0))) (let ((.cse51 (=> .cse52 .cse46)) (.cse39 (=> .cse42 .cse46))) (let ((.cse38 (=> .cse47 .cse39)) (.cse50 (=> .cse59 .cse51))) (let ((.cse49 (=> .cse60 .cse50)) (.cse37 (=> .cse48 .cse38)) (.cse66 (and .cse57 .cse68))) (let ((.cse65 (=> .cse66 .cse46)) (.cse36 (and .cse49 .cse37))) (let ((.cse35 (=> .cse61 .cse36)) (.cse64 (=> .cse69 .cse65))) (let ((.cse63 (=> .cse70 .cse64)) (.cse34 (=> .cse62 .cse35)) (.cse76 (and .cse57 .cse78))) (let ((.cse75 (=> .cse76 .cse46)) (.cse33 (and .cse63 .cse34))) (let ((.cse32 (=> .cse71 .cse33)) (.cse74 (=> .cse79 .cse75))) (let ((.cse73 (=> .cse80 .cse74)) (.cse31 (=> .cse72 .cse32))) (let ((.cse30 (and .cse73 .cse31))) (let ((.cse26 (=> .cse87 .cse30))) (let ((.cse28 (not .cse26))) (res .cse26 (let ((.cse27 (not .cse25))) (res .cse27 (res .cse28 (not+ .cse28) (let ((.cse29 (= .cse28 .cse27))) (res .cse29 (res (= .cse26 .cse25) (res (= .cse30 .cse24) (let ((.cse55 (= .cse57 .cse58))) (let ((.cse40 (= .cse46 .cse1))) (let-proof ((.cse41 (res (= ok@0 ok@0) (refl ok@0) (res (= .cse81 .cse2) (res (= .cse82 (- 1)) (let ((.cse83 (* (- 1) 1))) (res (= .cse83 (- 1)) (poly* .cse83 (- 1)) (res (= 0 0) (refl 0) (let ((.cse84 (+ 0 .cse83)) (.cse85 (+ 0 (- 1)))) (res (= .cse84 .cse85) (cong (+ 0 .cse83) (+ 0 (- 1))) (res (= .cse82 .cse84) (-def 0 1) (res (= .cse85 (- 1)) (poly+ .cse85 (- 1)) (trans .cse82 .cse84 .cse85 (- 1))))))))) (res (= .cse86 .cse86) (refl .cse86) (cong (= .cse86 .cse82) (= .cse86 (- 1))))) (cong (=> .cse81 ok@0) (=> .cse2 ok@0))))) (.cse56 (res false (res .cse58 (res .cse57 (=+1 .cse55) (res ok@0 (not+ .cse58) (=-2 .cse57))) (res .cse57 (res ok@0 (=+1 .cse57) (not- .cse58)) (=+2 .cse55))) false-))) (res (= .cse31 .cse18) (res (= .cse32 .cse21) (res (= .cse33 .cse23) (res (= .cse34 .cse22) (res (= .cse35 .cse19) (res (= .cse36 .cse20) (res (= .cse37 .cse5) (res (= .cse38 .cse6) (res (= .cse39 .cse7) (res .cse40 .cse41 (res (= .cse42 .cse8) (res (= .cse43 .cse43) (refl .cse43) (let ((.cse44 (= .cse45 ok@0))) (res .cse44 (res true true+ (res ok@0 (res .cse45 (=+1 .cse44) (=-1 .cse45)) (res .cse45 (=+2 .cse45) (=+2 .cse44)))) (cong (and .cse45 .cse43) (and ok@0 .cse43))))) (cong (=> .cse42 .cse46) (=> .cse8 .cse1)))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse39) (=> .cse47 .cse7)))) (res (= .cse48 .cse48) (refl .cse48) (cong (=> .cse48 .cse38) (=> .cse48 .cse6)))) (res (= .cse49 .cse17) (res (= .cse50 .cse14) (res (= .cse51 .cse11) (res .cse40 .cse41 (res (= .cse52 .cse53) (res (= .cse54 .cse54) (refl .cse54) (res .cse55 .cse56 (cong (and .cse57 .cse54) (and .cse58 .cse54)))) (cong (=> .cse52 .cse46) (=> .cse53 .cse1)))) (res (= .cse59 .cse59) (refl .cse59) (cong (=> .cse59 .cse51) (=> .cse59 .cse11)))) (res (= .cse60 .cse60) (refl .cse60) (cong (=> .cse60 .cse50) (=> .cse60 .cse14)))) (cong (and .cse49 .cse37) (and .cse17 .cse5)))) (res (= .cse61 .cse61) (refl .cse61) (cong (=> .cse61 .cse36) (=> .cse61 .cse20)))) (res (= .cse62 .cse62) (refl .cse62) (cong (=> .cse62 .cse35) (=> .cse62 .cse19)))) (res (= .cse63 .cse16) (res (= .cse64 .cse13) (res (= .cse65 .cse10) (res .cse40 .cse41 (res (= .cse66 .cse67) (res (= .cse68 .cse68) (refl .cse68) (res .cse55 .cse56 (cong (and .cse57 .cse68) (and .cse58 .cse68)))) (cong (=> .cse66 .cse46) (=> .cse67 .cse1)))) (res (= .cse69 .cse69) (refl .cse69) (cong (=> .cse69 .cse65) (=> .cse69 .cse10)))) (res (= .cse70 .cse70) (refl .cse70) (cong (=> .cse70 .cse64) (=> .cse70 .cse13)))) (cong (and .cse63 .cse34) (and .cse16 .cse22)))) (res (= .cse71 .cse71) (refl .cse71) (cong (=> .cse71 .cse33) (=> .cse71 .cse23)))) (res (= .cse72 .cse72) (refl .cse72) (cong (=> .cse72 .cse32) (=> .cse72 .cse21)))) (res (= .cse73 .cse15) (res (= .cse74 .cse12) (res (= .cse75 .cse9) (res .cse40 .cse41 (res (= .cse76 .cse77) (res (= .cse78 .cse78) (refl .cse78) (res .cse55 .cse56 (cong (and .cse57 .cse78) (and .cse58 .cse78)))) (cong (=> .cse76 .cse46) (=> .cse77 .cse1)))) (res (= .cse79 .cse79) (refl .cse79) (cong (=> .cse79 .cse75) (=> .cse79 .cse9)))) (res (= .cse80 .cse80) (refl .cse80) (cong (=> .cse80 .cse74) (=> .cse80 .cse12)))) (cong (and .cse73 .cse31) (and .cse15 .cse18))))))) (res (= .cse87 .cse87) (refl .cse87) (cong (=> .cse87 .cse30) (=> .cse87 .cse24)))) (cong (not .cse26) (not .cse25))) (=-2 .cse29)))) (not- .cse27))) (res .cse28 (assume .cse28) (not- .cse28))))))))))))))))))))))) :proves (- .cse15 - .cse18) :input))))))))))))))))))))))))))))))))))))))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse92 (not .cse2))) (res .cse2 (let ((.cse91 (not .cse0))) (res .cse91 (res .cse92 (not+ .cse92) (let ((.cse93 (= .cse92 .cse91))) (res .cse93 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse93)))) (not- .cse91))) (res .cse92 (assume .cse92) (not- .cse92)))) :proves (- .cse0) :input)))))) :proves () :rup)

