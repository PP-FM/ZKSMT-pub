unsat
(! (let ((.cse62 (ControlFlow 0 2))) (let ((.cse2 (= .cse62 (- 1))) (.cse0 (= (- 1) .cse62))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse62)) (res .cse2 (symm .cse62 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse225 (* (- 1) x))) (let ((.cse136 (+ .cse225 4))) (let ((.cse133 (<= .cse136 0))) (let ((.cse131 (not .cse133))) (let ((.cse1 (=> .cse2 .cse131))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse224 (+ .cse225 9))) (let ((.cse27 (<= .cse224 0))) (let ((.cse28 (not .cse27))) (let ((.cse5 (=> .cse28 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse151 (= .cse62 (- 3))) (.cse223 (+ .cse225 12))) (let ((.cse43 (<= .cse223 0)) (.cse7 (=> .cse151 .cse28))) (let ((.cse36 (and .cse7 .cse5)) (.cse162 (= .cse62 (- 4))) (.cse44 (not .cse43)) (.cse222 (+ .cse225 8))) (let ((.cse11 (<= .cse222 0)) (.cse37 (=> .cse162 .cse44)) (.cse6 (=> .cse44 .cse36))) (let ((.cse52 (and .cse37 .cse6)) (.cse56 (= .cse62 (- 5))) (.cse15 (not .cse11)) (.cse221 (+ .cse225 20))) (let ((.cse68 (<= .cse221 0)) (.cse54 (=> .cse56 .cse15)) (.cse10 (=> .cse15 .cse52))) (let ((.cse63 (and .cse54 .cse10)) (.cse183 (= .cse62 (- 6))) (.cse69 (not .cse68)) (.cse220 (+ .cse225 100))) (let ((.cse83 (<= .cse220 0)) (.cse64 (=> .cse183 .cse69)) (.cse53 (=> .cse69 .cse63))) (let ((.cse78 (and .cse64 .cse53)) (.cse194 (= .cse62 (- 7))) (.cse84 (not .cse83)) (.cse219 (+ .cse225 1000))) (let ((.cse98 (<= .cse219 0)) (.cse79 (=> .cse194 .cse84)) (.cse77 (=> .cse84 .cse78))) (let ((.cse216 (+ x (- 10))) (.cse93 (and .cse79 .cse77)) (.cse205 (= .cse62 (- 8))) (.cse99 (not .cse98))) (let ((.cse94 (=> .cse205 .cse99)) (.cse92 (=> .cse99 .cse93)) (.cse39 (<= .cse216 0)) (.cse212 (= (ControlFlow 0 9) 2))) (let ((.cse110 (and .cse39 .cse212)) (.cse107 (and .cse94 .cse92))) (let ((.cse32 (< 0 .cse224)) (.cse48 (< 0 .cse223)) (.cse19 (< 0 .cse222)) (.cse73 (< 0 .cse221)) (.cse88 (< 0 .cse220)) (.cse103 (< 0 .cse219)) (.cse108 (=> .cse110 .cse107))) (let-proof ((.cse29 (not+ .cse28)) (.cse33 (total .cse224 0)) (.cse45 (not+ .cse44)) (.cse49 (total .cse223 0)) (.cse16 (not+ .cse15)) (.cse20 (total .cse222 0)) (.cse23 (not- .cse15)) (.cse70 (not+ .cse69)) (.cse74 (total .cse221 0)) (.cse85 (not+ .cse84)) (.cse89 (total .cse220 0)) (.cse100 (not+ .cse99)) (.cse104 (total .cse219 0))) (let-proof ((.cse109 (let ((.cse218 (= (ControlFlow 0 0) 9))) (let ((.cse111 (=> .cse218 .cse108))) (res .cse111 (=>+ 1 .cse111) (let ((.cse138 (- 0 1))) (let ((.cse152 (- 0 3)) (.cse137 (= .cse62 .cse138)) (.cse132 (< x 4))) (let ((.cse129 (=> .cse137 .cse132)) (.cse150 (= .cse62 .cse152)) (.cse148 (< x 9))) (let ((.cse163 (- 0 4)) (.cse149 (=> .cse150 .cse148)) (.cse128 (=> .cse148 .cse129))) (let ((.cse127 (and .cse149 .cse128)) (.cse161 (= .cse62 .cse163)) (.cse159 (< x 12))) (let ((.cse173 (- 0 5)) (.cse160 (=> .cse161 .cse159)) (.cse126 (=> .cse159 .cse127))) (let ((.cse125 (and .cse160 .cse126)) (.cse172 (= .cse62 .cse173)) (.cse170 (< x 8))) (let ((.cse184 (- 0 6)) (.cse171 (=> .cse172 .cse170)) (.cse124 (=> .cse170 .cse125))) (let ((.cse123 (and .cse171 .cse124)) (.cse182 (= .cse62 .cse184)) (.cse180 (< x 20))) (let ((.cse195 (- 0 7)) (.cse181 (=> .cse182 .cse180)) (.cse122 (=> .cse180 .cse123))) (let ((.cse121 (and .cse181 .cse122)) (.cse193 (= .cse62 .cse195)) (.cse191 (< x 100))) (let ((.cse206 (- 0 8)) (.cse192 (=> .cse193 .cse191)) (.cse120 (=> .cse191 .cse121))) (let ((.cse119 (and .cse192 .cse120)) (.cse204 (= .cse62 .cse206)) (.cse202 (< x 1000))) (let ((.cse203 (=> .cse204 .cse202)) (.cse118 (=> .cse202 .cse119)) (.cse214 (<= x 10))) (let ((.cse211 (and .cse214 .cse212)) (.cse117 (and .cse203 .cse118))) (let ((.cse116 (=> .cse211 .cse117))) (let ((.cse112 (=> .cse218 .cse116))) (let ((.cse114 (not .cse112))) (res .cse112 (let ((.cse113 (not .cse111))) (res .cse113 (res .cse114 (not+ .cse114) (let ((.cse115 (= .cse114 .cse113))) (res .cse115 (res (= .cse112 .cse111) (res (= .cse116 .cse108) (res (= .cse117 .cse107) (let ((.cse200 (= .cse202 .cse99))) (let ((.cse140 (= 0 0)) (.cse144 (= .cse62 .cse62))) (let-proof ((.cse201 (res .cse99 (res .cse202 (=+1 .cse200) (res .cse98 .cse100 (farkas 1 .cse202 1 .cse98))) (res .cse202 (let ((.cse210 (<= 1000 x))) (res .cse210 (total 1000 x) (res .cse98 (res .cse103 .cse104 (farkas 1 .cse210 1 .cse103)) (not- .cse99)))) (=+2 .cse200)))) (.cse141 (refl 0)) (.cse145 (refl .cse62))) (res (= .cse118 .cse92) (res (= .cse119 .cse93) (let ((.cse189 (= .cse191 .cse84))) (let-proof ((.cse190 (res .cse84 (res .cse191 (=+1 .cse189) (res .cse83 .cse85 (farkas 1 .cse191 1 .cse83))) (res .cse191 (let ((.cse199 (<= 100 x))) (res .cse199 (total 100 x) (res .cse83 (res .cse88 .cse89 (farkas 1 .cse199 1 .cse88)) (not- .cse84)))) (=+2 .cse189))))) (res (= .cse120 .cse77) (res (= .cse121 .cse78) (let ((.cse178 (= .cse180 .cse69))) (let-proof ((.cse179 (res .cse69 (res .cse180 (=+1 .cse178) (res .cse68 .cse70 (farkas 1 .cse180 1 .cse68))) (res .cse180 (let ((.cse188 (<= 20 x))) (res .cse188 (total 20 x) (res .cse68 (res .cse73 .cse74 (farkas 1 .cse188 1 .cse73)) (not- .cse69)))) (=+2 .cse178))))) (res (= .cse122 .cse53) (res (= .cse123 .cse63) (let ((.cse168 (= .cse170 .cse15))) (let-proof ((.cse169 (res .cse15 (res .cse170 (=+1 .cse168) (res .cse11 .cse16 (farkas 1 .cse170 1 .cse11))) (res .cse170 (let ((.cse177 (<= 8 x))) (res .cse177 (total 8 x) (res .cse11 (res .cse19 .cse20 (farkas 1 .cse177 1 .cse19)) .cse23))) (=+2 .cse168))))) (res (= .cse124 .cse10) (res (= .cse125 .cse52) (let ((.cse157 (= .cse159 .cse44))) (let-proof ((.cse158 (res .cse44 (res .cse159 (=+1 .cse157) (res .cse43 .cse45 (farkas 1 .cse159 1 .cse43))) (res .cse159 (let ((.cse167 (<= 12 x))) (res .cse167 (total 12 x) (res .cse43 (res .cse48 .cse49 (farkas 1 .cse167 1 .cse48)) (not- .cse44)))) (=+2 .cse157))))) (res (= .cse126 .cse6) (res (= .cse127 .cse36) (let ((.cse146 (= .cse148 .cse28))) (let-proof ((.cse147 (res .cse28 (res .cse148 (=+1 .cse146) (res .cse27 .cse29 (farkas 1 .cse148 1 .cse27))) (res .cse148 (let ((.cse156 (<= 9 x))) (res .cse156 (total 9 x) (res .cse27 (res .cse32 .cse33 (farkas 1 .cse156 1 .cse32)) (not- .cse28)))) (=+2 .cse146))))) (res (= .cse128 .cse5) (res (= .cse129 .cse1) (let ((.cse130 (= .cse132 .cse131))) (res .cse130 (res .cse131 (res .cse132 (=+1 .cse130) (res .cse133 (not+ .cse131) (farkas 1 .cse132 1 .cse133))) (res .cse132 (let ((.cse134 (<= 4 x))) (res .cse134 (total 4 x) (res .cse133 (let ((.cse135 (< 0 .cse136))) (res .cse135 (total .cse136 0) (farkas 1 .cse134 1 .cse135))) (not- .cse131)))) (=+2 .cse130))) (res (= .cse137 .cse2) (res (= .cse138 (- 1)) (let ((.cse139 (* (- 1) 1))) (res (= .cse139 (- 1)) (poly* .cse139 (- 1)) (res .cse140 .cse141 (let ((.cse142 (+ 0 .cse139)) (.cse143 (+ 0 (- 1)))) (res (= .cse142 .cse143) (cong (+ 0 .cse139) (+ 0 (- 1))) (res (= .cse138 .cse142) (-def 0 1) (res (= .cse143 (- 1)) (poly+ .cse143 (- 1)) (trans .cse138 .cse142 .cse143 (- 1))))))))) (res .cse144 .cse145 (cong (= .cse62 .cse138) (= .cse62 (- 1))))) (cong (=> .cse137 .cse132) (=> .cse2 .cse131))))) (res .cse146 .cse147 (cong (=> .cse148 .cse129) (=> .cse28 .cse1)))) (res (= .cse149 .cse7) (res .cse146 .cse147 (res (= .cse150 .cse151) (res (= .cse152 (- 3)) (let ((.cse153 (* (- 1) 3))) (res (= .cse153 (- 3)) (poly* .cse153 (- 3)) (res .cse140 .cse141 (let ((.cse154 (+ 0 .cse153)) (.cse155 (+ 0 (- 3)))) (res (= .cse154 .cse155) (cong (+ 0 .cse153) (+ 0 (- 3))) (res (= .cse152 .cse154) (-def 0 3) (res (= .cse155 (- 3)) (poly+ .cse155 (- 3)) (trans .cse152 .cse154 .cse155 (- 3))))))))) (res .cse144 .cse145 (cong (= .cse62 .cse152) (= .cse62 (- 3))))) (cong (=> .cse150 .cse148) (=> .cse151 .cse28)))) (cong (and .cse149 .cse128) (and .cse7 .cse5)))))) (res .cse157 .cse158 (cong (=> .cse159 .cse127) (=> .cse44 .cse36)))) (res (= .cse160 .cse37) (res .cse157 .cse158 (res (= .cse161 .cse162) (res (= .cse163 (- 4)) (let ((.cse164 (* (- 1) 4))) (res (= .cse164 (- 4)) (poly* .cse164 (- 4)) (res .cse140 .cse141 (let ((.cse165 (+ 0 .cse164)) (.cse166 (+ 0 (- 4)))) (res (= .cse165 .cse166) (cong (+ 0 .cse164) (+ 0 (- 4))) (res (= .cse163 .cse165) (-def 0 4) (res (= .cse166 (- 4)) (poly+ .cse166 (- 4)) (trans .cse163 .cse165 .cse166 (- 4))))))))) (res .cse144 .cse145 (cong (= .cse62 .cse163) (= .cse62 (- 4))))) (cong (=> .cse161 .cse159) (=> .cse162 .cse44)))) (cong (and .cse160 .cse126) (and .cse37 .cse6)))))) (res .cse168 .cse169 (cong (=> .cse170 .cse125) (=> .cse15 .cse52)))) (res (= .cse171 .cse54) (res .cse168 .cse169 (res (= .cse172 .cse56) (res (= .cse173 (- 5)) (let ((.cse174 (* (- 1) 5))) (res (= .cse174 (- 5)) (poly* .cse174 (- 5)) (res .cse140 .cse141 (let ((.cse175 (+ 0 .cse174)) (.cse176 (+ 0 (- 5)))) (res (= .cse175 .cse176) (cong (+ 0 .cse174) (+ 0 (- 5))) (res (= .cse173 .cse175) (-def 0 5) (res (= .cse176 (- 5)) (poly+ .cse176 (- 5)) (trans .cse173 .cse175 .cse176 (- 5))))))))) (res .cse144 .cse145 (cong (= .cse62 .cse173) (= .cse62 (- 5))))) (cong (=> .cse172 .cse170) (=> .cse56 .cse15)))) (cong (and .cse171 .cse124) (and .cse54 .cse10)))))) (res .cse178 .cse179 (cong (=> .cse180 .cse123) (=> .cse69 .cse63)))) (res (= .cse181 .cse64) (res .cse178 .cse179 (res (= .cse182 .cse183) (res (= .cse184 (- 6)) (let ((.cse185 (* (- 1) 6))) (res (= .cse185 (- 6)) (poly* .cse185 (- 6)) (res .cse140 .cse141 (let ((.cse186 (+ 0 .cse185)) (.cse187 (+ 0 (- 6)))) (res (= .cse186 .cse187) (cong (+ 0 .cse185) (+ 0 (- 6))) (res (= .cse184 .cse186) (-def 0 6) (res (= .cse187 (- 6)) (poly+ .cse187 (- 6)) (trans .cse184 .cse186 .cse187 (- 6))))))))) (res .cse144 .cse145 (cong (= .cse62 .cse184) (= .cse62 (- 6))))) (cong (=> .cse182 .cse180) (=> .cse183 .cse69)))) (cong (and .cse181 .cse122) (and .cse64 .cse53)))))) (res .cse189 .cse190 (cong (=> .cse191 .cse121) (=> .cse84 .cse78)))) (res (= .cse192 .cse79) (res .cse189 .cse190 (res (= .cse193 .cse194) (res (= .cse195 (- 7)) (let ((.cse196 (* (- 1) 7))) (res (= .cse196 (- 7)) (poly* .cse196 (- 7)) (res .cse140 .cse141 (let ((.cse197 (+ 0 .cse196)) (.cse198 (+ 0 (- 7)))) (res (= .cse197 .cse198) (cong (+ 0 .cse196) (+ 0 (- 7))) (res (= .cse195 .cse197) (-def 0 7) (res (= .cse198 (- 7)) (poly+ .cse198 (- 7)) (trans .cse195 .cse197 .cse198 (- 7))))))))) (res .cse144 .cse145 (cong (= .cse62 .cse195) (= .cse62 (- 7))))) (cong (=> .cse193 .cse191) (=> .cse194 .cse84)))) (cong (and .cse192 .cse120) (and .cse79 .cse77)))))) (res .cse200 .cse201 (cong (=> .cse202 .cse119) (=> .cse99 .cse93)))) (res (= .cse203 .cse94) (res .cse200 .cse201 (res (= .cse204 .cse205) (res (= .cse206 (- 8)) (let ((.cse207 (* (- 1) 8))) (res (= .cse207 (- 8)) (poly* .cse207 (- 8)) (res .cse140 .cse141 (let ((.cse208 (+ 0 .cse207)) (.cse209 (+ 0 (- 8)))) (res (= .cse208 .cse209) (cong (+ 0 .cse207) (+ 0 (- 8))) (res (= .cse206 .cse208) (-def 0 8) (res (= .cse209 (- 8)) (poly+ .cse209 (- 8)) (trans .cse206 .cse208 .cse209 (- 8))))))))) (res .cse144 .cse145 (cong (= .cse62 .cse206) (= .cse62 (- 8))))) (cong (=> .cse204 .cse202) (=> .cse205 .cse99)))) (cong (and .cse203 .cse118) (and .cse94 .cse92))))))) (res (= .cse211 .cse110) (res (= .cse212 .cse212) (refl .cse212) (let ((.cse213 (= .cse214 .cse39))) (res .cse213 (res .cse39 (res .cse214 (=+1 .cse213) (let ((.cse215 (< 0 .cse216))) (res .cse215 (total .cse216 0) (farkas 1 .cse214 1 .cse215)))) (res .cse214 (let ((.cse217 (< 10 x))) (res .cse217 (total x 10) (farkas 1 .cse217 1 .cse39))) (=+2 .cse213))) (cong (and .cse214 .cse212) (and .cse39 .cse212))))) (cong (=> .cse211 .cse117) (=> .cse110 .cse107)))) (res (= .cse218 .cse218) (refl .cse218) (cong (=> .cse218 .cse116) (=> .cse218 .cse108)))) (cong (not .cse112) (not .cse111))) (=-2 .cse115)))) (not- .cse113))) (res .cse114 (assume .cse114) (not- .cse114)))))))))))))))))))))))))) (let-proof ((.cse40 (! (res .cse110 (res .cse108 (=>+ 0 .cse108) .cse109) (and- 0 .cse110)) :proves (+ .cse39) :input))) (let-proof ((.cse24 (! (res .cse53 (res .cse54 (! (let ((.cse55 (= (- 5) .cse62))) (let ((.cse57 (= .cse56 .cse55))) (let-proof ((.cse58 (res .cse55 (res .cse56 (=+1 .cse57) (symm (- 5) .cse62)) (res .cse56 (symm .cse62 (- 5)) (=+2 .cse57))))) (res .cse55 (! (res .cse56 (=>+ 0 .cse54) (res .cse57 .cse58 (=-2 .cse57))) :proves (+ .cse54 + .cse55) :input) (! (let ((.cse60 (not .cse56))) (res .cse56 (let ((.cse59 (not .cse55))) (res .cse59 (res .cse60 (not+ .cse60) (let ((.cse61 (= .cse60 .cse59))) (res .cse61 (res .cse57 .cse58 (cong (not .cse56) (not .cse55))) (=-2 .cse61)))) (not- .cse59))) (res .cse60 (assume .cse60) (not- .cse60)))) :proves (- .cse55) :input))))) :proves (+ .cse54) :rup) (! (res .cse63 (and+ .cse63) (=>+ 1 .cse53)) :proves (- .cse10 - .cse54 + .cse53) :input)) (! (res .cse64 (! (let ((.cse76 (+ x (- 19)))) (let ((.cse66 (<= 1 .cse76)) (.cse65 (<= .cse76 0))) (let-proof ((.cse67 (total-int .cse76 0))) (res .cse65 (! (res .cse39 .cse40 (! (res .cse66 .cse67 (farkas 1 .cse66 1 .cse39)) :proves (+ .cse65 - .cse39) :LA ((- 1) 1))) :proves (+ .cse65) :rup) (! (res .cse68 (res .cse69 .cse70 (=>+ 1 .cse64)) (let ((.cse71 (not .cse65))) (let-proof ((.cse75 (not- .cse71))) (res .cse71 (let ((.cse72 (= .cse68 .cse71))) (res .cse72 (res .cse71 (res .cse68 (=+1 .cse72) (res .cse65 (not+ .cse71) (farkas 1 .cse68 1 .cse65))) (res .cse68 (res .cse73 .cse74 (res .cse65 (res .cse66 .cse67 (farkas 1 .cse73 1 .cse66)) .cse75)) (=+2 .cse72))) (=-2 .cse72))) .cse75)))) :proves (+ .cse64 - .cse65) :input))))) :proves (+ .cse64) :rup) (res .cse77 (! (res .cse78 (and+ .cse78) (=>+ 1 .cse77)) :proves (+ .cse77 - .cse53 - .cse64) :input) (! (res .cse79 (! (let ((.cse91 (+ x (- 99)))) (let ((.cse81 (<= 1 .cse91)) (.cse80 (<= .cse91 0))) (let-proof ((.cse82 (total-int .cse91 0))) (res .cse80 (! (res .cse39 .cse40 (! (res .cse81 .cse82 (farkas 1 .cse81 1 .cse39)) :proves (+ .cse80 - .cse39) :LA ((- 1) 1))) :proves (+ .cse80) :rup) (! (res .cse83 (res .cse84 .cse85 (=>+ 1 .cse79)) (let ((.cse86 (not .cse80))) (let-proof ((.cse90 (not- .cse86))) (res .cse86 (let ((.cse87 (= .cse83 .cse86))) (res .cse87 (res .cse86 (res .cse83 (=+1 .cse87) (res .cse80 (not+ .cse86) (farkas 1 .cse83 1 .cse80))) (res .cse83 (res .cse88 .cse89 (res .cse80 (res .cse81 .cse82 (farkas 1 .cse88 1 .cse81)) .cse90)) (=+2 .cse87))) (=-2 .cse87))) .cse90)))) :proves (+ .cse79 - .cse80) :input))))) :proves (+ .cse79) :rup) (res .cse92 (! (res .cse93 (and+ .cse93) (=>+ 1 .cse92)) :proves (+ .cse92 - .cse77 - .cse79) :input) (! (res .cse94 (! (let ((.cse106 (+ x (- 999)))) (let ((.cse96 (<= 1 .cse106)) (.cse95 (<= .cse106 0))) (let-proof ((.cse97 (total-int .cse106 0))) (res .cse95 (! (res .cse39 .cse40 (! (res .cse96 .cse97 (farkas 1 .cse96 1 .cse39)) :proves (+ .cse95 - .cse39) :LA ((- 1) 1))) :proves (+ .cse95) :rup) (! (res .cse98 (res .cse99 .cse100 (=>+ 1 .cse94)) (let ((.cse101 (not .cse95))) (let-proof ((.cse105 (not- .cse101))) (res .cse101 (let ((.cse102 (= .cse98 .cse101))) (res .cse102 (res .cse101 (res .cse98 (=+1 .cse102) (res .cse95 (not+ .cse101) (farkas 1 .cse98 1 .cse95))) (res .cse98 (res .cse103 .cse104 (res .cse95 (res .cse96 .cse97 (farkas 1 .cse103 1 .cse96)) .cse105)) (=+2 .cse102))) (=-2 .cse102))) .cse105)))) :proves (+ .cse94 - .cse95) :input))))) :proves (+ .cse94) :rup) (! (res .cse107 (and+ .cse107) (res .cse108 (=>+ 1 .cse108) .cse109)) :proves (- .cse94 - .cse92) :input)) :proves (- .cse92) :rup))) :proves (- .cse77) :rup))) :proves (- .cse53) :rup)) :proves (- .cse10) :rup))) (res .cse6 (res .cse7 (! (let ((.cse35 (+ x (- 8)))) (let ((.cse25 (<= 1 .cse35)) (.cse8 (<= .cse35 0))) (let-proof ((.cse26 (total-int .cse35 0))) (res .cse8 (! (let ((.cse22 (+ x (- 7)))) (let ((.cse9 (<= .cse22 0))) (res .cse9 (! (res .cse10 (! (res .cse11 (let ((.cse12 (not .cse9))) (let-proof ((.cse13 (not+ .cse12))) (res .cse12 .cse13 (let ((.cse14 (not .cse12))) (res .cse14 (res .cse15 .cse16 (let ((.cse17 (= .cse15 .cse14))) (res .cse17 (let ((.cse18 (= .cse11 .cse12))) (res .cse18 (res .cse12 (res .cse11 (=+1 .cse18) (res .cse9 .cse13 (farkas 1 .cse11 1 .cse9))) (res .cse11 (res .cse19 .cse20 (res .cse9 (let ((.cse21 (<= 1 .cse22))) (res .cse21 (total-int .cse22 0) (farkas 1 .cse19 1 .cse21))) (not- .cse12))) (=+2 .cse18))) (cong (not .cse11) (not .cse12)))) (=-2 .cse17)))) (not- .cse14)))))) (res .cse15 (=>+ 0 .cse10) .cse23)) :proves (+ .cse10 + .cse9) :input) .cse24) :proves (+ .cse9) :rup) (! (res .cse25 .cse26 (farkas 1 .cse9 1 .cse25)) :proves (- .cse9 + .cse8) :LA (1 (- 1)))))) :proves (+ .cse8) :rup) (! (res .cse27 (res .cse28 .cse29 (=>+ 1 .cse7)) (let ((.cse30 (not .cse8))) (let-proof ((.cse34 (not- .cse30))) (res .cse30 (let ((.cse31 (= .cse27 .cse30))) (res .cse31 (res .cse30 (res .cse27 (=+1 .cse31) (res .cse8 (not+ .cse30) (farkas 1 .cse27 1 .cse8))) (res .cse27 (res .cse32 .cse33 (res .cse8 (res .cse25 .cse26 (farkas 1 .cse32 1 .cse25)) .cse34)) (=+2 .cse31))) (=-2 .cse31))) .cse34)))) :proves (+ .cse7 - .cse8) :input))))) :proves (+ .cse7) :rup) (! (res .cse36 (and+ .cse36) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) (! (res .cse37 (! (let ((.cse51 (+ x (- 11)))) (let ((.cse41 (<= 1 .cse51)) (.cse38 (<= .cse51 0))) (let-proof ((.cse42 (total-int .cse51 0))) (res .cse38 (! (res .cse39 .cse40 (! (res .cse41 .cse42 (farkas 1 .cse41 1 .cse39)) :proves (+ .cse38 - .cse39) :LA ((- 1) 1))) :proves (+ .cse38) :rup) (! (res .cse43 (res .cse44 .cse45 (=>+ 1 .cse37)) (let ((.cse46 (not .cse38))) (let-proof ((.cse50 (not- .cse46))) (res .cse46 (let ((.cse47 (= .cse43 .cse46))) (res .cse47 (res .cse46 (res .cse43 (=+1 .cse47) (res .cse38 (not+ .cse46) (farkas 1 .cse43 1 .cse38))) (res .cse43 (res .cse48 .cse49 (res .cse38 (res .cse41 .cse42 (farkas 1 .cse48 1 .cse41)) .cse50)) (=+2 .cse47))) (=-2 .cse47))) .cse50)))) :proves (+ .cse37 - .cse38) :input))))) :proves (+ .cse37) :rup) (res .cse10 (! (res .cse52 (and+ .cse52) (=>+ 1 .cse10)) :proves (+ .cse10 - .cse6 - .cse37) :input) .cse24)) :proves (- .cse6) :rup)))))))))))))))))))) :proves (- .cse5) :rup)))))) :proves (- .cse1) :rup))))))) :proves (+ .cse0) :rup) (! (let ((.cse227 (not .cse2))) (res .cse2 (let ((.cse226 (not .cse0))) (res .cse226 (res .cse227 (not+ .cse227) (let ((.cse228 (= .cse227 .cse226))) (res .cse228 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse228)))) (not- .cse226))) (res .cse227 (assume .cse227) (not- .cse227)))) :proves (- .cse0) :input)))))) :proves () :rup)

