unsat
(! (let ((.cse21 (ControlFlow 0 2))) (let ((.cse1 (= .cse21 (- 1))) (.cse0 (= (- 1) .cse21))) (let ((.cse29 (= .cse1 .cse0))) (let-proof ((.cse30 (res .cse0 (res .cse1 (=+1 .cse29) (symm (- 1) .cse21)) (res .cse1 (symm .cse21 (- 1)) (=+2 .cse29))))) (res .cse0 (! (res .cse1 (let ((.cse25 (= a b))) (let ((.cse24 (xor t@0 .cse25))) (let ((.cse26 (not .cse24))) (let ((.cse2 (and .cse26 .cse1))) (res .cse2 (let ((.cse14 (not t@0))) (let ((.cse3 (=> .cse2 .cse14))) (res .cse3 (=>+ 0 .cse3) (let ((.cse4 (=> .cse25 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse27 (= (ControlFlow 0 3) 2))) (let ((.cse5 (=> .cse27 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse28 (= (ControlFlow 0 0) 3))) (let ((.cse6 (=> .cse28 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse17 (- 0 1))) (let ((.cse23 (= t@0 .cse25)) (.cse16 (= .cse21 .cse17))) (let ((.cse15 (and .cse23 .cse16))) (let ((.cse13 (=> .cse15 .cse14))) (let ((.cse12 (=> .cse25 .cse13))) (let ((.cse11 (=> .cse27 .cse12))) (let ((.cse7 (=> .cse28 .cse11))) (let ((.cse9 (not .cse7))) (res .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res (= .cse7 .cse6) (res (= .cse11 .cse5) (res (= .cse12 .cse4) (res (= .cse13 .cse3) (res (= .cse14 .cse14) (refl .cse14) (res (= .cse15 .cse2) (res (= .cse16 .cse1) (res (= .cse17 (- 1)) (let ((.cse18 (* (- 1) 1))) (res (= .cse18 (- 1)) (poly* .cse18 (- 1)) (res (= 0 0) (refl 0) (let ((.cse19 (+ 0 .cse18)) (.cse20 (+ 0 (- 1)))) (res (= .cse19 .cse20) (cong (+ 0 .cse18) (+ 0 (- 1))) (res (= .cse17 .cse19) (-def 0 1) (res (= .cse20 (- 1)) (poly+ .cse20 (- 1)) (trans .cse17 .cse19 .cse20 (- 1))))))))) (res (= .cse21 .cse21) (refl .cse21) (cong (= .cse21 .cse17) (= .cse21 (- 1))))) (let ((.cse22 (= .cse23 .cse26))) (res .cse22 (res .cse23 (res .cse24 (res t@0 (res .cse25 (=+1 .cse23) (xor+ (t@0 .cse25) (t@0) (.cse25))) (res .cse25 (xor+ (t@0 .cse25) (.cse25) (t@0)) (=+2 .cse23))) (res .cse26 (=+1 .cse22) (not- .cse26))) (res .cse24 (res .cse26 (not+ .cse26) (=+2 .cse22)) (res t@0 (res .cse25 (xor+ (t@0) (.cse25) (t@0 .cse25)) (=-1 .cse23)) (res .cse25 (=-2 .cse23) (xor- (t@0) (.cse25) (t@0 .cse25)))))) (cong (and .cse23 .cse16) (and .cse26 .cse1))))) (cong (=> .cse15 .cse14) (=> .cse2 .cse14)))) (res (= .cse25 .cse25) (refl .cse25) (cong (=> .cse25 .cse13) (=> .cse25 .cse3)))) (res (= .cse27 .cse27) (refl .cse27) (cong (=> .cse27 .cse12) (=> .cse27 .cse4)))) (res (= .cse28 .cse28) (refl .cse28) (cong (=> .cse28 .cse11) (=> .cse28 .cse5)))) (cong (not .cse7) (not .cse6))) (=-2 .cse10)))) (not- .cse8))) (res .cse9 (assume .cse9) (not- .cse9)))))))))))))))))))))) (and- 1 .cse2)))))) (res .cse29 .cse30 (=-2 .cse29))) :proves (+ .cse0) :input) (! (let ((.cse32 (not .cse1))) (res .cse1 (let ((.cse31 (not .cse0))) (res .cse31 (res .cse32 (not+ .cse32) (let ((.cse33 (= .cse32 .cse31))) (res .cse33 (res .cse29 .cse30 (cong (not .cse1) (not .cse0))) (=-2 .cse33)))) (not- .cse31))) (res .cse32 (assume .cse32) (not- .cse32)))) :proves (- .cse0) :input)))))) :proves () :rup)

