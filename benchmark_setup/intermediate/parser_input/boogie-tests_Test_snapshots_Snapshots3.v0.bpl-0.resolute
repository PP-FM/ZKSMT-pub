unsat
(! (res G (! (res F (! (let ((.cse0 (= F true))) (res .cse0 (assume .cse0) (let ((.cse1 (= .cse0 F))) (res .cse1 (res true true+ (res F (res .cse0 (=+1 .cse1) (=-1 .cse0)) (res .cse0 (=+2 .cse0) (=+2 .cse1)))) (=-2 .cse1))))) :proves (+ F) :input) (! (let ((.cse2 (xor G F))) (let-proof ((.cse3 (xor+ (G F) (G) (F)))) (res .cse2 .cse3 (let ((.cse4 (= G F))) (res .cse4 (assume .cse4) (let ((.cse5 (not .cse2))) (let-proof ((.cse7 (not- .cse5))) (res .cse5 (let ((.cse6 (= .cse4 .cse5))) (res .cse6 (res .cse4 (res .cse2 (res G (res F (=+1 .cse4) .cse3) (res F (xor+ (G F) (F) (G)) (=+2 .cse4))) (res .cse5 (=+1 .cse6) .cse7)) (res .cse2 (res .cse5 (not+ .cse5) (=+2 .cse6)) (res G (res F (xor+ (G) (F) (G F)) (=-1 .cse4)) (res F (=-2 .cse4) (xor- (G) (F) (G F)))))) (=-2 .cse6))) .cse7)))))))) :proves (- F + G) :input)) :proves (+ G) :rup) (! (let ((.cse23 (ControlFlow 0 2))) (let ((.cse18 (= .cse23 (- 1)))) (let ((.cse8 (=> .cse18 G))) (res .cse8 (=>+ 1 .cse8) (let ((.cse24 (= (ControlFlow 0 3) 2))) (let ((.cse9 (=> .cse24 .cse8))) (res .cse9 (=>+ 1 .cse9) (let ((.cse25 (= (ControlFlow 0 0) 3))) (let ((.cse10 (=> .cse25 .cse9))) (res .cse10 (=>+ 1 .cse10) (let ((.cse19 (- 0 1))) (let ((.cse17 (= .cse23 .cse19))) (let ((.cse16 (=> .cse17 G))) (let ((.cse15 (=> .cse24 .cse16))) (let ((.cse11 (=> .cse25 .cse15))) (let ((.cse13 (not .cse11))) (res .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res (= .cse11 .cse10) (res (= .cse15 .cse9) (res (= .cse16 .cse8) (res (= G G) (refl G) (res (= .cse17 .cse18) (res (= .cse19 (- 1)) (let ((.cse20 (* (- 1) 1))) (res (= .cse20 (- 1)) (poly* .cse20 (- 1)) (res (= 0 0) (refl 0) (let ((.cse21 (+ 0 .cse20)) (.cse22 (+ 0 (- 1)))) (res (= .cse21 .cse22) (cong (+ 0 .cse20) (+ 0 (- 1))) (res (= .cse19 .cse21) (-def 0 1) (res (= .cse22 (- 1)) (poly+ .cse22 (- 1)) (trans .cse19 .cse21 .cse22 (- 1))))))))) (res (= .cse23 .cse23) (refl .cse23) (cong (= .cse23 .cse19) (= .cse23 (- 1))))) (cong (=> .cse17 G) (=> .cse18 G)))) (res (= .cse24 .cse24) (refl .cse24) (cong (=> .cse24 .cse16) (=> .cse24 .cse8)))) (res (= .cse25 .cse25) (refl .cse25) (cong (=> .cse25 .cse15) (=> .cse25 .cse9)))) (cong (not .cse11) (not .cse10))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13))))))))))))))))))) :proves (- G) :input)) :proves () :rup)

