unsat
(! (let ((.cse24 (ControlFlow 0 2))) (let ((.cse1 (= .cse24 (- 1))) (.cse0 (= (- 1) .cse24))) (let ((.cse34 (= .cse1 .cse0))) (let-proof ((.cse35 (res .cse0 (res .cse1 (=+1 .cse34) (symm (- 1) .cse24)) (res .cse1 (symm .cse24 (- 1)) (=+2 .cse34))))) (res .cse0 (! (res .cse1 (let ((.cse30 (<= n 0))) (let ((.cse28 (not .cse30))) (let ((.cse26 (=> assume$$s0 .cse28))) (let ((.cse2 (and .cse26 .cse1))) (res .cse2 (let ((.cse16 (* (- 1) n))) (let ((.cse13 (<= .cse16 0))) (let ((.cse3 (=> .cse2 .cse13))) (res .cse3 (=>+ 0 .cse3) (let ((.cse32 (= (ControlFlow 0 3) 2))) (let ((.cse4 (=> .cse32 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse33 (= (ControlFlow 0 0) 3))) (let ((.cse5 (=> .cse33 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse20 (- 0 1)) (.cse29 (< 0 n))) (let ((.cse25 (=> assume$$s0 .cse29)) (.cse19 (= .cse24 .cse20))) (let ((.cse18 (and .cse25 .cse19)) (.cse14 (<= 0 n))) (let ((.cse11 (=> .cse18 .cse14))) (let ((.cse10 (=> .cse32 .cse11))) (let ((.cse6 (=> .cse33 .cse10))) (let ((.cse8 (not .cse6))) (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res (= .cse6 .cse5) (res (= .cse10 .cse4) (res (= .cse11 .cse3) (let ((.cse12 (= .cse14 .cse13))) (res .cse12 (res .cse13 (res .cse14 (=+1 .cse12) (let ((.cse15 (< 0 .cse16))) (res .cse15 (total .cse16 0) (farkas 1 .cse14 1 .cse15)))) (res .cse14 (let ((.cse17 (< n 0))) (res .cse17 (total 0 n) (farkas 1 .cse17 1 .cse13))) (=+2 .cse12))) (res (= .cse18 .cse2) (res (= .cse19 .cse1) (res (= .cse20 (- 1)) (let ((.cse21 (* (- 1) 1))) (res (= .cse21 (- 1)) (poly* .cse21 (- 1)) (res (= 0 0) (refl 0) (let ((.cse22 (+ 0 .cse21)) (.cse23 (+ 0 (- 1)))) (res (= .cse22 .cse23) (cong (+ 0 .cse21) (+ 0 (- 1))) (res (= .cse20 .cse22) (-def 0 1) (res (= .cse23 (- 1)) (poly+ .cse23 (- 1)) (trans .cse20 .cse22 .cse23 (- 1))))))))) (res (= .cse24 .cse24) (refl .cse24) (cong (= .cse24 .cse20) (= .cse24 (- 1))))) (res (= .cse25 .cse26) (let ((.cse27 (= .cse29 .cse28))) (res .cse27 (res .cse28 (res .cse29 (=+1 .cse27) (res .cse30 (not+ .cse28) (farkas 1 .cse29 1 .cse30))) (res .cse29 (let-proof ((.cse31 (total n 0))) (res .cse30 .cse31 (res .cse30 (res .cse29 .cse31 (farkas 1 .cse30 1 .cse29)) (not- .cse28)))) (=+2 .cse27))) (res (= assume$$s0 assume$$s0) (refl assume$$s0) (cong (=> assume$$s0 .cse29) (=> assume$$s0 .cse28))))) (cong (and .cse25 .cse19) (and .cse26 .cse1)))) (cong (=> .cse18 .cse14) (=> .cse2 .cse13))))) (res (= .cse32 .cse32) (refl .cse32) (cong (=> .cse32 .cse11) (=> .cse32 .cse3)))) (res (= .cse33 .cse33) (refl .cse33) (cong (=> .cse33 .cse10) (=> .cse33 .cse4)))) (cong (not .cse6) (not .cse5))) (=-2 .cse9)))) (not- .cse7))) (res .cse8 (assume .cse8) (not- .cse8)))))))))))))))))))) (and- 1 .cse2)))))) (res .cse34 .cse35 (=-2 .cse34))) :proves (+ .cse0) :input) (! (let ((.cse37 (not .cse1))) (res .cse1 (let ((.cse36 (not .cse0))) (res .cse36 (res .cse37 (not+ .cse37) (let ((.cse38 (= .cse37 .cse36))) (res .cse38 (res .cse34 .cse35 (cong (not .cse1) (not .cse0))) (=-2 .cse38)))) (not- .cse36))) (res .cse37 (assume .cse37) (not- .cse37)))) :proves (- .cse0) :input)))))) :proves () :rup)

