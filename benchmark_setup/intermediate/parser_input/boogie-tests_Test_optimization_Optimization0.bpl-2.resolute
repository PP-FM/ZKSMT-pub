unsat
(! (let ((.cse28 (ControlFlow 0 2))) (let ((.cse2 (= .cse28 (- 1))) (.cse0 (= (- 1) .cse28))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse28)) (res .cse2 (symm .cse28 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse22 (+ (* (- 1) x@0) 10))) (let ((.cse19 (<= .cse22 0))) (let ((.cse17 (not .cse19))) (let ((.cse1 (=> .cse2 .cse17))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse31 (ControlFlow 0 4))) (let ((.cse29 (= .cse31 2))) (let ((.cse5 (=> .cse29 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse6 (=> (= .cse31 3) true))) (res .cse6 (! (res true true+ (=>+ 1 .cse6)) :proves (+ .cse6) :input) (! (let ((.cse7 (and .cse5 .cse6))) (res .cse7 (and+ .cse7) (let ((.cse30 (= (ControlFlow 0 0) 4))) (let ((.cse8 (=> .cse30 .cse7))) (res .cse8 (=>+ 1 .cse8) (let ((.cse24 (- 0 1))) (let ((.cse23 (= .cse28 .cse24)) (.cse18 (< x@0 10))) (let ((.cse15 (=> .cse23 .cse18))) (let ((.cse14 (=> .cse29 .cse15))) (let ((.cse13 (and .cse14 .cse6))) (let ((.cse9 (=> .cse30 .cse13))) (let ((.cse11 (not .cse9))) (res .cse9 (let ((.cse10 (not .cse8))) (res .cse10 (res .cse11 (not+ .cse11) (let ((.cse12 (= .cse11 .cse10))) (res .cse12 (res (= .cse9 .cse8) (res (= .cse13 .cse7) (res (= .cse6 .cse6) (refl .cse6) (res (= .cse14 .cse5) (res (= .cse15 .cse1) (let ((.cse16 (= .cse18 .cse17))) (res .cse16 (res .cse17 (res .cse18 (=+1 .cse16) (res .cse19 (not+ .cse17) (farkas 1 .cse18 1 .cse19))) (res .cse18 (let ((.cse20 (<= 10 x@0))) (res .cse20 (total 10 x@0) (res .cse19 (let ((.cse21 (< 0 .cse22))) (res .cse21 (total .cse22 0) (farkas 1 .cse20 1 .cse21))) (not- .cse17)))) (=+2 .cse16))) (res (= .cse23 .cse2) (res (= .cse24 (- 1)) (let ((.cse25 (* (- 1) 1))) (res (= .cse25 (- 1)) (poly* .cse25 (- 1)) (res (= 0 0) (refl 0) (let ((.cse26 (+ 0 .cse25)) (.cse27 (+ 0 (- 1)))) (res (= .cse26 .cse27) (cong (+ 0 .cse25) (+ 0 (- 1))) (res (= .cse24 .cse26) (-def 0 1) (res (= .cse27 (- 1)) (poly+ .cse27 (- 1)) (trans .cse24 .cse26 .cse27 (- 1))))))))) (res (= .cse28 .cse28) (refl .cse28) (cong (= .cse28 .cse24) (= .cse28 (- 1))))) (cong (=> .cse23 .cse18) (=> .cse2 .cse17))))) (res (= .cse29 .cse29) (refl .cse29) (cong (=> .cse29 .cse15) (=> .cse29 .cse1)))) (cong (and .cse14 .cse6) (and .cse5 .cse6)))) (res (= .cse30 .cse30) (refl .cse30) (cong (=> .cse30 .cse13) (=> .cse30 .cse7)))) (cong (not .cse9) (not .cse8))) (=-2 .cse12)))) (not- .cse10))) (res .cse11 (assume .cse11) (not- .cse11))))))))))))))) :proves (- .cse5 - .cse6) :input))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse33 (not .cse2))) (res .cse2 (let ((.cse32 (not .cse0))) (res .cse32 (res .cse33 (not+ .cse33) (let ((.cse34 (= .cse33 .cse32))) (res .cse34 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse34)))) (not- .cse32))) (res .cse33 (assume .cse33) (not- .cse33)))) :proves (- .cse0) :input)))))) :proves () :rup)

