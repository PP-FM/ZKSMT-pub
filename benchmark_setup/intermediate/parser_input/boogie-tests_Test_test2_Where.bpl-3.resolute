unsat
(! (let ((.cse40 (ControlFlow 0 2))) (let ((.cse2 (= .cse40 (- 1))) (.cse0 (= (- 1) .cse40))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse40)) (res .cse2 (symm .cse40 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse83 (* (- 1) y@0))) (let ((.cse29 (+ .cse83 5))) (let ((.cse26 (<= .cse29 0))) (let ((.cse1 (=> .cse2 .cse26))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse59 (+ x@0 .cse83))) (let ((.cse7 (<= .cse59 0))) (let ((.cse5 (=> .cse7 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse56 (* (- 1) x@0)) (.cse46 (= .cse40 (- 3)))) (let ((.cse6 (=> .cse46 .cse7)) (.cse53 (<= .cse56 0))) (let ((.cse8 (and .cse53 .cse7)) (.cse11 (and .cse6 .cse5))) (let ((.cse9 (=> .cse8 .cse11))) (let-proof ((.cse10 (let ((.cse72 (+ x (* (- 1) y)))) (let ((.cse69 (<= .cse72 0))) (let ((.cse65 (and .cse69 true)) (.cse63 (= (ControlFlow 0 4) 2))) (let ((.cse62 (and .cse65 .cse63))) (let ((.cse12 (=> .cse62 .cse9))) (res .cse12 (=>+ 1 .cse12) (let ((.cse80 (* (- 1) x))) (let ((.cse77 (<= .cse80 0))) (let ((.cse75 (and .cse77 true))) (let ((.cse13 (=> .cse75 .cse12))) (res .cse13 (=>+ 1 .cse13) (let ((.cse82 (= (ControlFlow 0 0) 4))) (let ((.cse14 (=> .cse82 .cse13))) (res .cse14 (=>+ 1 .cse14) (let ((.cse32 (- 0 1))) (let ((.cse47 (- 0 3)) (.cse31 (= .cse40 .cse32)) (.cse27 (<= 5 y@0))) (let ((.cse24 (=> .cse31 .cse27)) (.cse45 (= .cse40 .cse47)) (.cse43 (<= x@0 y@0))) (let ((.cse70 (<= x y)) (.cse44 (=> .cse45 .cse43)) (.cse23 (=> .cse43 .cse24)) (.cse54 (<= 0 x@0))) (let ((.cse51 (and .cse54 .cse43)) (.cse22 (and .cse44 .cse23)) (.cse64 (and .cse70 true))) (let ((.cse61 (and .cse64 .cse63)) (.cse21 (=> .cse51 .cse22)) (.cse78 (<= 0 x))) (let ((.cse74 (and .cse78 true)) (.cse20 (=> .cse61 .cse21))) (let ((.cse19 (=> .cse74 .cse20))) (let ((.cse15 (=> .cse82 .cse19))) (let ((.cse17 (not .cse15))) (res .cse15 (let ((.cse16 (not .cse14))) (res .cse16 (res .cse17 (not+ .cse17) (let ((.cse18 (= .cse17 .cse16))) (res .cse18 (res (= .cse15 .cse14) (res (= .cse19 .cse13) (let ((.cse66 (= true true))) (let-proof ((.cse67 (refl true))) (res (= .cse20 .cse12) (res (= .cse21 .cse9) (let ((.cse41 (= .cse43 .cse7))) (let-proof ((.cse42 (res .cse7 (res .cse43 (=+1 .cse41) (let ((.cse58 (< 0 .cse59))) (res .cse58 (total .cse59 0) (farkas 1 .cse43 1 .cse58)))) (res .cse43 (let ((.cse60 (< y@0 x@0))) (res .cse60 (total x@0 y@0) (farkas 1 .cse60 1 .cse7))) (=+2 .cse41))))) (res (= .cse22 .cse11) (let ((.cse34 (= 0 0)) (.cse38 (= .cse40 .cse40))) (let-proof ((.cse35 (refl 0)) (.cse39 (refl .cse40))) (res (= .cse23 .cse5) (res (= .cse24 .cse1) (let ((.cse25 (= .cse27 .cse26))) (res .cse25 (res .cse26 (res .cse27 (=+1 .cse25) (let ((.cse28 (< 0 .cse29))) (res .cse28 (total .cse29 0) (farkas 1 .cse27 1 .cse28)))) (res .cse27 (let ((.cse30 (< y@0 5))) (res .cse30 (total 5 y@0) (farkas 1 .cse30 1 .cse26))) (=+2 .cse25))) (res (= .cse31 .cse2) (res (= .cse32 (- 1)) (let ((.cse33 (* (- 1) 1))) (res (= .cse33 (- 1)) (poly* .cse33 (- 1)) (res .cse34 .cse35 (let ((.cse36 (+ 0 .cse33)) (.cse37 (+ 0 (- 1)))) (res (= .cse36 .cse37) (cong (+ 0 .cse33) (+ 0 (- 1))) (res (= .cse32 .cse36) (-def 0 1) (res (= .cse37 (- 1)) (poly+ .cse37 (- 1)) (trans .cse32 .cse36 .cse37 (- 1))))))))) (res .cse38 .cse39 (cong (= .cse40 .cse32) (= .cse40 (- 1))))) (cong (=> .cse31 .cse27) (=> .cse2 .cse26))))) (res .cse41 .cse42 (cong (=> .cse43 .cse24) (=> .cse7 .cse1)))) (res (= .cse44 .cse6) (res .cse41 .cse42 (res (= .cse45 .cse46) (res (= .cse47 (- 3)) (let ((.cse48 (* (- 1) 3))) (res (= .cse48 (- 3)) (poly* .cse48 (- 3)) (res .cse34 .cse35 (let ((.cse49 (+ 0 .cse48)) (.cse50 (+ 0 (- 3)))) (res (= .cse49 .cse50) (cong (+ 0 .cse48) (+ 0 (- 3))) (res (= .cse47 .cse49) (-def 0 3) (res (= .cse50 (- 3)) (poly+ .cse50 (- 3)) (trans .cse47 .cse49 .cse50 (- 3))))))))) (res .cse38 .cse39 (cong (= .cse40 .cse47) (= .cse40 (- 3))))) (cong (=> .cse45 .cse43) (=> .cse46 .cse7)))) (cong (and .cse44 .cse23) (and .cse6 .cse5)))))) (res (= .cse51 .cse8) (res .cse41 .cse42 (let ((.cse52 (= .cse54 .cse53))) (res .cse52 (res .cse53 (res .cse54 (=+1 .cse52) (let ((.cse55 (< 0 .cse56))) (res .cse55 (total .cse56 0) (farkas 1 .cse54 1 .cse55)))) (res .cse54 (let ((.cse57 (< x@0 0))) (res .cse57 (total 0 x@0) (farkas 1 .cse57 1 .cse53))) (=+2 .cse52))) (cong (and .cse54 .cse43) (and .cse53 .cse7))))) (cong (=> .cse51 .cse22) (=> .cse8 .cse11)))))) (res (= .cse61 .cse62) (res (= .cse63 .cse63) (refl .cse63) (res (= .cse64 .cse65) (res .cse66 .cse67 (let ((.cse68 (= .cse70 .cse69))) (res .cse68 (res .cse69 (res .cse70 (=+1 .cse68) (let ((.cse71 (< 0 .cse72))) (res .cse71 (total .cse72 0) (farkas 1 .cse70 1 .cse71)))) (res .cse70 (let ((.cse73 (< y x))) (res .cse73 (total x y) (farkas 1 .cse73 1 .cse69))) (=+2 .cse68))) (cong (and .cse70 true) (and .cse69 true))))) (cong (and .cse64 .cse63) (and .cse65 .cse63)))) (cong (=> .cse61 .cse21) (=> .cse62 .cse9)))) (res (= .cse74 .cse75) (res .cse66 .cse67 (let ((.cse76 (= .cse78 .cse77))) (res .cse76 (res .cse77 (res .cse78 (=+1 .cse76) (let ((.cse79 (< 0 .cse80))) (res .cse79 (total .cse80 0) (farkas 1 .cse78 1 .cse79)))) (res .cse78 (let ((.cse81 (< x 0))) (res .cse81 (total 0 x) (farkas 1 .cse81 1 .cse77))) (=+2 .cse76))) (cong (and .cse78 true) (and .cse77 true))))) (cong (=> .cse74 .cse20) (=> .cse75 .cse12)))))) (res (= .cse82 .cse82) (refl .cse82) (cong (=> .cse82 .cse19) (=> .cse82 .cse13)))) (cong (not .cse15) (not .cse14))) (=-2 .cse18)))) (not- .cse16))) (res .cse17 (assume .cse17) (not- .cse17))))))))))))))))))))))))))))) (res .cse6 (! (res .cse7 (! (res .cse8 (res .cse9 (=>+ 0 .cse9) .cse10) (and- 1 .cse8)) :proves (+ .cse7) :input) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (res .cse11 (and+ .cse11) (res .cse9 (=>+ 1 .cse9) .cse10)) :proves (- .cse6 - .cse5) :input))))))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse85 (not .cse2))) (res .cse2 (let ((.cse84 (not .cse0))) (res .cse84 (res .cse85 (not+ .cse85) (let ((.cse86 (= .cse85 .cse84))) (res .cse86 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse86)))) (not- .cse84))) (res .cse85 (assume .cse85) (not- .cse85)))) :proves (- .cse0) :input)))))) :proves () :rup)

