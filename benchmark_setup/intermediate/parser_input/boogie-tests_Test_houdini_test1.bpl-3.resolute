unsat
(! (let ((.cse19 (ControlFlow 0 2))) (let ((.cse1 (= .cse19 (- 1))) (.cse0 (= (- 1) .cse19))) (let ((.cse32 (= .cse1 .cse0))) (let-proof ((.cse33 (res .cse0 (res .cse1 (=+1 .cse32) (symm (- 1) .cse19)) (res .cse1 (symm .cse19 (- 1)) (=+2 .cse32))))) (res .cse0 (! (res .cse1 (let ((.cse12 (not g@0))) (let ((.cse23 (=> true .cse12))) (let ((.cse21 (=> b0 .cse23))) (let ((.cse2 (and .cse21 .cse1))) (res .cse2 (let ((.cse3 (=> .cse2 .cse12))) (res .cse3 (=>+ 0 .cse3) (let ((.cse30 (= (ControlFlow 0 3) 2))) (let ((.cse4 (=> .cse30 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse31 (= (ControlFlow 0 0) 3))) (let ((.cse5 (=> .cse31 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse29 (not false)) (.cse25 (= false g@0))) (let ((.cse15 (- 0 1)) (.cse22 (=> .cse29 .cse25))) (let ((.cse20 (=> b0 .cse22)) (.cse14 (= .cse19 .cse15))) (let ((.cse13 (and .cse20 .cse14))) (let ((.cse11 (=> .cse13 .cse12))) (let ((.cse10 (=> .cse30 .cse11))) (let ((.cse6 (=> .cse31 .cse10))) (let ((.cse8 (not .cse6))) (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res (= .cse6 .cse5) (res (= .cse10 .cse4) (res (= .cse11 .cse3) (res (= .cse12 .cse12) (refl .cse12) (res (= .cse13 .cse2) (res (= .cse14 .cse1) (res (= .cse15 (- 1)) (let ((.cse16 (* (- 1) 1))) (res (= .cse16 (- 1)) (poly* .cse16 (- 1)) (res (= 0 0) (refl 0) (let ((.cse17 (+ 0 .cse16)) (.cse18 (+ 0 (- 1)))) (res (= .cse17 .cse18) (cong (+ 0 .cse16) (+ 0 (- 1))) (res (= .cse15 .cse17) (-def 0 1) (res (= .cse18 (- 1)) (poly+ .cse18 (- 1)) (trans .cse15 .cse17 .cse18 (- 1))))))))) (res (= .cse19 .cse19) (refl .cse19) (cong (= .cse19 .cse15) (= .cse19 (- 1))))) (res (= .cse20 .cse21) (res (= .cse22 .cse23) (let ((.cse24 (= .cse25 .cse12))) (let-proof ((.cse27 false-)) (res .cse24 (res false (res .cse12 (res .cse25 (=+1 .cse24) (let ((.cse26 (= g@0 false))) (res .cse26 (symm g@0 false) (res g@0 (not+ .cse12) (=-2 .cse26))))) (res .cse25 (res g@0 (=+1 .cse25) (not- .cse12)) (=+2 .cse24))) .cse27) (let ((.cse28 (= .cse29 true))) (res .cse28 (res true true+ (res .cse29 (res false (not+ .cse29) .cse27) (=+2 .cse28))) (cong (=> .cse29 .cse25) (=> true .cse12))))))) (res (= b0 b0) (refl b0) (cong (=> b0 .cse22) (=> b0 .cse23)))) (cong (and .cse20 .cse14) (and .cse21 .cse1)))) (cong (=> .cse13 .cse12) (=> .cse2 .cse12)))) (res (= .cse30 .cse30) (refl .cse30) (cong (=> .cse30 .cse11) (=> .cse30 .cse3)))) (res (= .cse31 .cse31) (refl .cse31) (cong (=> .cse31 .cse10) (=> .cse31 .cse4)))) (cong (not .cse6) (not .cse5))) (=-2 .cse9)))) (not- .cse7))) (res .cse8 (assume .cse8) (not- .cse8))))))))))))))))))) (and- 1 .cse2)))))) (res .cse32 .cse33 (=-2 .cse32))) :proves (+ .cse0) :input) (! (let ((.cse35 (not .cse1))) (res .cse1 (let ((.cse34 (not .cse0))) (res .cse34 (res .cse35 (not+ .cse35) (let ((.cse36 (= .cse35 .cse34))) (res .cse36 (res .cse32 .cse33 (cong (not .cse1) (not .cse0))) (=-2 .cse36)))) (not- .cse34))) (res .cse35 (assume .cse35) (not- .cse35)))) :proves (- .cse0) :input)))))) :proves () :rup)

