unsat
(! (let ((.cse160 (+ x@0 (* (- 1) y@0))) (.cse105 (ControlFlow 0 10)) (.cse141 (ControlFlow 0 6))) (let ((.cse209 (* (- 1) x@0)) (.cse134 (= .cse141 (- 5))) (.cse96 (= .cse105 (- 9))) (.cse7 (<= .cse160 0))) (let ((.cse21 (=> .cse96 .cse7)) (.cse112 (= .cse105 (- 11))) (.cse6 (=> .cse134 .cse7)) (.cse144 (= .cse141 (- 7))) (.cse11 (<= .cse209 0))) (let ((.cse9 (=> .cse144 .cse11)) (.cse5 (=> .cse11 .cse6)) (.cse22 (=> .cse112 .cse11)) (.cse20 (=> .cse11 .cse21))) (let ((.cse23 (and .cse22 .cse20)) (.cse121 (= .cse105 (- 12))) (.cse14 (and .cse9 .cse5)) (.cse151 (= .cse141 (- 8))) (.cse2 (= w@0 x@0))) (let ((.cse1 (=> .cse151 .cse2)) (.cse4 (=> .cse2 .cse14)) (.cse18 (=> .cse121 .cse2)) (.cse19 (=> .cse2 .cse23)) (.cse210 (ControlFlow 0 13))) (let ((.cse126 (= .cse210 10)) (.cse24 (and .cse18 .cse19)) (.cse156 (= .cse210 6)) (.cse15 (and .cse1 .cse4))) (let ((.cse0 (=> .cse156 .cse15)) (.cse17 (=> .cse126 .cse24))) (let ((.cse27 (and .cse11 .cse7)) (.cse25 (and .cse0 .cse17))) (let ((.cse42 (+ x@0 1)) (.cse16 (=> .cse27 .cse25))) (let ((.cse39 (< 0 .cse209)) (.cse37 (=> .cse2 .cse16)) (.cse10 (<= .cse42 0))) (let-proof ((.cse40 (total .cse209 0))) (let ((.cse29 (not .cse10))) (let-proof ((.cse38 (! (let ((.cse208 (ControlFlow 0 14))) (let ((.cse162 (= .cse208 13))) (let ((.cse43 (=> .cse162 .cse37))) (res .cse43 (! (=>+ 1 .cse43) :proves (+ .cse43 - .cse37) :input) (! (let ((.cse204 (+ x (* (- 1) y))) (.cse179 (ControlFlow 0 2))) (let ((.cse207 (* (- 1) x)) (.cse172 (= .cse179 (- 1))) (.cse48 (<= .cse204 0))) (let ((.cse47 (=> .cse172 .cse48)) (.cse186 (= .cse179 (- 3))) (.cse53 (<= .cse207 0))) (let ((.cse51 (=> .cse186 .cse53)) (.cse46 (=> .cse53 .cse47))) (let ((.cse66 (and .cse51 .cse46)) (.cse195 (= .cse179 (- 4))) (.cse70 (= w x))) (let ((.cse69 (=> .cse195 .cse70)) (.cse45 (=> .cse70 .cse66))) (let ((.cse200 (= .cse208 2)) (.cse73 (and .cse69 .cse45))) (let ((.cse44 (=> .cse200 .cse73))) (let ((.cse49 (and .cse53 .cse48)) (.cse74 (and .cse44 .cse43))) (let ((.cse67 (=> .cse49 .cse74))) (let ((.cse62 (< 0 .cse207)) (.cse71 (=> .cse70 .cse67))) (let-proof ((.cse63 (total .cse207 0))) (let-proof ((.cse72 (let ((.cse206 (= (ControlFlow 0 0) 14))) (let ((.cse75 (=> .cse206 .cse71))) (res .cse75 (=>+ 1 .cse75) (let ((.cse97 (- 0 9)) (.cse135 (- 0 5))) (let ((.cse145 (- 0 7)) (.cse133 (= .cse141 .cse135)) (.cse113 (- 0 11)) (.cse95 (= .cse105 .cse97)) (.cse106 (<= x@0 y@0))) (let ((.cse92 (=> .cse95 .cse106)) (.cse111 (= .cse105 .cse113)) (.cse132 (=> .cse133 .cse106)) (.cse143 (= .cse141 .cse145)) (.cse109 (<= 0 x@0))) (let ((.cse152 (- 0 8)) (.cse142 (=> .cse143 .cse109)) (.cse131 (=> .cse109 .cse132)) (.cse122 (- 0 12)) (.cse110 (=> .cse111 .cse109)) (.cse91 (=> .cse109 .cse92))) (let ((.cse90 (and .cse110 .cse91)) (.cse120 (= .cse105 .cse122)) (.cse130 (and .cse142 .cse131)) (.cse150 (= .cse141 .cse152)) (.cse173 (- 0 1))) (let ((.cse187 (- 0 3)) (.cse171 (= .cse179 .cse173)) (.cse180 (<= x y)) (.cse149 (=> .cse150 .cse2)) (.cse129 (=> .cse2 .cse130)) (.cse119 (=> .cse120 .cse2)) (.cse89 (=> .cse2 .cse90))) (let ((.cse88 (and .cse119 .cse89)) (.cse128 (and .cse149 .cse129)) (.cse168 (=> .cse171 .cse180)) (.cse185 (= .cse179 .cse187)) (.cse183 (<= 0 x))) (let ((.cse196 (- 0 4)) (.cse184 (=> .cse185 .cse183)) (.cse167 (=> .cse183 .cse168)) (.cse127 (=> .cse156 .cse128)) (.cse87 (=> .cse126 .cse88))) (let ((.cse157 (and .cse109 .cse106)) (.cse86 (and .cse127 .cse87)) (.cse166 (and .cse184 .cse167)) (.cse194 (= .cse179 .cse196))) (let ((.cse193 (=> .cse194 .cse70)) (.cse165 (=> .cse70 .cse166)) (.cse85 (=> .cse157 .cse86))) (let ((.cse84 (=> .cse2 .cse85)) (.cse164 (and .cse193 .cse165))) (let ((.cse163 (=> .cse200 .cse164)) (.cse83 (=> .cse162 .cse84))) (let ((.cse201 (and .cse183 .cse180)) (.cse82 (and .cse163 .cse83))) (let ((.cse81 (=> .cse201 .cse82))) (let ((.cse80 (=> .cse70 .cse81))) (let ((.cse76 (=> .cse206 .cse80))) (let ((.cse78 (not .cse76))) (res .cse76 (let ((.cse77 (not .cse75))) (res .cse77 (res .cse78 (not+ .cse78) (let ((.cse79 (= .cse78 .cse77))) (res .cse79 (res (= .cse76 .cse75) (res (= .cse80 .cse71) (let ((.cse191 (= .cse70 .cse70))) (let-proof ((.cse192 (refl .cse70))) (res (= .cse81 .cse67) (let ((.cse181 (= .cse183 .cse53)) (.cse169 (= .cse180 .cse48))) (let-proof ((.cse170 (res .cse48 (res .cse180 (=+1 .cse169) (let ((.cse203 (< 0 .cse204))) (res .cse203 (total .cse204 0) (farkas 1 .cse180 1 .cse203)))) (res .cse180 (let ((.cse205 (< y x))) (res .cse205 (total x y) (farkas 1 .cse205 1 .cse48))) (=+2 .cse169)))) (.cse182 (res .cse53 (res .cse183 (=+1 .cse181) (res .cse62 .cse63 (farkas 1 .cse183 1 .cse62))) (res .cse183 (let ((.cse202 (< x 0))) (res .cse202 (total 0 x) (farkas 1 .cse202 1 .cse53))) (=+2 .cse181))))) (res (= .cse82 .cse74) (let ((.cse99 (= 0 0))) (let-proof ((.cse100 (refl 0))) (res (= .cse83 .cse43) (res (= .cse84 .cse37) (let ((.cse117 (= .cse2 .cse2))) (let-proof ((.cse118 (refl .cse2))) (res (= .cse85 .cse16) (let ((.cse107 (= .cse109 .cse11)) (.cse93 (= .cse106 .cse7))) (let-proof ((.cse94 (res .cse7 (res .cse106 (=+1 .cse93) (let ((.cse159 (< 0 .cse160))) (res .cse159 (total .cse160 0) (farkas 1 .cse106 1 .cse159)))) (res .cse106 (let ((.cse161 (< y@0 x@0))) (res .cse161 (total x@0 y@0) (farkas 1 .cse161 1 .cse7))) (=+2 .cse93)))) (.cse108 (res .cse11 (res .cse109 (=+1 .cse107) (res .cse39 .cse40 (farkas 1 .cse109 1 .cse39))) (res .cse109 (let ((.cse158 (< x@0 0))) (res .cse158 (total 0 x@0) (farkas 1 .cse158 1 .cse11))) (=+2 .cse107))))) (res (= .cse86 .cse25) (res (= .cse87 .cse17) (res (= .cse88 .cse24) (let ((.cse103 (= .cse105 .cse105))) (let-proof ((.cse104 (refl .cse105))) (res (= .cse89 .cse19) (res (= .cse90 .cse23) (res (= .cse91 .cse20) (res (= .cse92 .cse21) (res .cse93 .cse94 (res (= .cse95 .cse96) (res (= .cse97 (- 9)) (let ((.cse98 (* (- 1) 9))) (res (= .cse98 (- 9)) (poly* .cse98 (- 9)) (res .cse99 .cse100 (let ((.cse101 (+ 0 .cse98)) (.cse102 (+ 0 (- 9)))) (res (= .cse101 .cse102) (cong (+ 0 .cse98) (+ 0 (- 9))) (res (= .cse97 .cse101) (-def 0 9) (res (= .cse102 (- 9)) (poly+ .cse102 (- 9)) (trans .cse97 .cse101 .cse102 (- 9))))))))) (res .cse103 .cse104 (cong (= .cse105 .cse97) (= .cse105 (- 9))))) (cong (=> .cse95 .cse106) (=> .cse96 .cse7)))) (res .cse107 .cse108 (cong (=> .cse109 .cse92) (=> .cse11 .cse21)))) (res (= .cse110 .cse22) (res .cse107 .cse108 (res (= .cse111 .cse112) (res (= .cse113 (- 11)) (let ((.cse114 (* (- 1) 11))) (res (= .cse114 (- 11)) (poly* .cse114 (- 11)) (res .cse99 .cse100 (let ((.cse115 (+ 0 .cse114)) (.cse116 (+ 0 (- 11)))) (res (= .cse115 .cse116) (cong (+ 0 .cse114) (+ 0 (- 11))) (res (= .cse113 .cse115) (-def 0 11) (res (= .cse116 (- 11)) (poly+ .cse116 (- 11)) (trans .cse113 .cse115 .cse116 (- 11))))))))) (res .cse103 .cse104 (cong (= .cse105 .cse113) (= .cse105 (- 11))))) (cong (=> .cse111 .cse109) (=> .cse112 .cse11)))) (cong (and .cse110 .cse91) (and .cse22 .cse20)))) (res .cse117 .cse118 (cong (=> .cse2 .cse90) (=> .cse2 .cse23)))) (res (= .cse119 .cse18) (res .cse117 .cse118 (res (= .cse120 .cse121) (res (= .cse122 (- 12)) (let ((.cse123 (* (- 1) 12))) (res (= .cse123 (- 12)) (poly* .cse123 (- 12)) (res .cse99 .cse100 (let ((.cse124 (+ 0 .cse123)) (.cse125 (+ 0 (- 12)))) (res (= .cse124 .cse125) (cong (+ 0 .cse123) (+ 0 (- 12))) (res (= .cse122 .cse124) (-def 0 12) (res (= .cse125 (- 12)) (poly+ .cse125 (- 12)) (trans .cse122 .cse124 .cse125 (- 12))))))))) (res .cse103 .cse104 (cong (= .cse105 .cse122) (= .cse105 (- 12))))) (cong (=> .cse120 .cse2) (=> .cse121 .cse2)))) (cong (and .cse119 .cse89) (and .cse18 .cse19)))))) (res (= .cse126 .cse126) (refl .cse126) (cong (=> .cse126 .cse88) (=> .cse126 .cse24)))) (res (= .cse127 .cse0) (res (= .cse128 .cse15) (let ((.cse139 (= .cse141 .cse141))) (let-proof ((.cse140 (refl .cse141))) (res (= .cse129 .cse4) (res (= .cse130 .cse14) (res (= .cse131 .cse5) (res (= .cse132 .cse6) (res .cse93 .cse94 (res (= .cse133 .cse134) (res (= .cse135 (- 5)) (let ((.cse136 (* (- 1) 5))) (res (= .cse136 (- 5)) (poly* .cse136 (- 5)) (res .cse99 .cse100 (let ((.cse137 (+ 0 .cse136)) (.cse138 (+ 0 (- 5)))) (res (= .cse137 .cse138) (cong (+ 0 .cse136) (+ 0 (- 5))) (res (= .cse135 .cse137) (-def 0 5) (res (= .cse138 (- 5)) (poly+ .cse138 (- 5)) (trans .cse135 .cse137 .cse138 (- 5))))))))) (res .cse139 .cse140 (cong (= .cse141 .cse135) (= .cse141 (- 5))))) (cong (=> .cse133 .cse106) (=> .cse134 .cse7)))) (res .cse107 .cse108 (cong (=> .cse109 .cse132) (=> .cse11 .cse6)))) (res (= .cse142 .cse9) (res .cse107 .cse108 (res (= .cse143 .cse144) (res (= .cse145 (- 7)) (let ((.cse146 (* (- 1) 7))) (res (= .cse146 (- 7)) (poly* .cse146 (- 7)) (res .cse99 .cse100 (let ((.cse147 (+ 0 .cse146)) (.cse148 (+ 0 (- 7)))) (res (= .cse147 .cse148) (cong (+ 0 .cse146) (+ 0 (- 7))) (res (= .cse145 .cse147) (-def 0 7) (res (= .cse148 (- 7)) (poly+ .cse148 (- 7)) (trans .cse145 .cse147 .cse148 (- 7))))))))) (res .cse139 .cse140 (cong (= .cse141 .cse145) (= .cse141 (- 7))))) (cong (=> .cse143 .cse109) (=> .cse144 .cse11)))) (cong (and .cse142 .cse131) (and .cse9 .cse5)))) (res .cse117 .cse118 (cong (=> .cse2 .cse130) (=> .cse2 .cse14)))) (res (= .cse149 .cse1) (res .cse117 .cse118 (res (= .cse150 .cse151) (res (= .cse152 (- 8)) (let ((.cse153 (* (- 1) 8))) (res (= .cse153 (- 8)) (poly* .cse153 (- 8)) (res .cse99 .cse100 (let ((.cse154 (+ 0 .cse153)) (.cse155 (+ 0 (- 8)))) (res (= .cse154 .cse155) (cong (+ 0 .cse153) (+ 0 (- 8))) (res (= .cse152 .cse154) (-def 0 8) (res (= .cse155 (- 8)) (poly+ .cse155 (- 8)) (trans .cse152 .cse154 .cse155 (- 8))))))))) (res .cse139 .cse140 (cong (= .cse141 .cse152) (= .cse141 (- 8))))) (cong (=> .cse150 .cse2) (=> .cse151 .cse2)))) (cong (and .cse149 .cse129) (and .cse1 .cse4)))))) (res (= .cse156 .cse156) (refl .cse156) (cong (=> .cse156 .cse128) (=> .cse156 .cse15)))) (cong (and .cse127 .cse87) (and .cse0 .cse17)))) (res (= .cse157 .cse27) (res .cse93 .cse94 (res .cse107 .cse108 (cong (and .cse109 .cse106) (and .cse11 .cse7)))) (cong (=> .cse157 .cse86) (=> .cse27 .cse25)))))) (res .cse117 .cse118 (cong (=> .cse2 .cse85) (=> .cse2 .cse16)))))) (res (= .cse162 .cse162) (refl .cse162) (cong (=> .cse162 .cse84) (=> .cse162 .cse37)))) (res (= .cse163 .cse44) (res (= .cse164 .cse73) (let ((.cse177 (= .cse179 .cse179))) (let-proof ((.cse178 (refl .cse179))) (res (= .cse165 .cse45) (res (= .cse166 .cse66) (res (= .cse167 .cse46) (res (= .cse168 .cse47) (res .cse169 .cse170 (res (= .cse171 .cse172) (res (= .cse173 (- 1)) (let ((.cse174 (* (- 1) 1))) (res (= .cse174 (- 1)) (poly* .cse174 (- 1)) (res .cse99 .cse100 (let ((.cse175 (+ 0 .cse174)) (.cse176 (+ 0 (- 1)))) (res (= .cse175 .cse176) (cong (+ 0 .cse174) (+ 0 (- 1))) (res (= .cse173 .cse175) (-def 0 1) (res (= .cse176 (- 1)) (poly+ .cse176 (- 1)) (trans .cse173 .cse175 .cse176 (- 1))))))))) (res .cse177 .cse178 (cong (= .cse179 .cse173) (= .cse179 (- 1))))) (cong (=> .cse171 .cse180) (=> .cse172 .cse48)))) (res .cse181 .cse182 (cong (=> .cse183 .cse168) (=> .cse53 .cse47)))) (res (= .cse184 .cse51) (res .cse181 .cse182 (res (= .cse185 .cse186) (res (= .cse187 (- 3)) (let ((.cse188 (* (- 1) 3))) (res (= .cse188 (- 3)) (poly* .cse188 (- 3)) (res .cse99 .cse100 (let ((.cse189 (+ 0 .cse188)) (.cse190 (+ 0 (- 3)))) (res (= .cse189 .cse190) (cong (+ 0 .cse188) (+ 0 (- 3))) (res (= .cse187 .cse189) (-def 0 3) (res (= .cse190 (- 3)) (poly+ .cse190 (- 3)) (trans .cse187 .cse189 .cse190 (- 3))))))))) (res .cse177 .cse178 (cong (= .cse179 .cse187) (= .cse179 (- 3))))) (cong (=> .cse185 .cse183) (=> .cse186 .cse53)))) (cong (and .cse184 .cse167) (and .cse51 .cse46)))) (res .cse191 .cse192 (cong (=> .cse70 .cse166) (=> .cse70 .cse66)))) (res (= .cse193 .cse69) (res .cse191 .cse192 (res (= .cse194 .cse195) (res (= .cse196 (- 4)) (let ((.cse197 (* (- 1) 4))) (res (= .cse197 (- 4)) (poly* .cse197 (- 4)) (res .cse99 .cse100 (let ((.cse198 (+ 0 .cse197)) (.cse199 (+ 0 (- 4)))) (res (= .cse198 .cse199) (cong (+ 0 .cse197) (+ 0 (- 4))) (res (= .cse196 .cse198) (-def 0 4) (res (= .cse199 (- 4)) (poly+ .cse199 (- 4)) (trans .cse196 .cse198 .cse199 (- 4))))))))) (res .cse177 .cse178 (cong (= .cse179 .cse196) (= .cse179 (- 4))))) (cong (=> .cse194 .cse70) (=> .cse195 .cse70)))) (cong (and .cse193 .cse165) (and .cse69 .cse45)))))) (res (= .cse200 .cse200) (refl .cse200) (cong (=> .cse200 .cse164) (=> .cse200 .cse73)))) (cong (and .cse163 .cse83) (and .cse44 .cse43)))))) (res (= .cse201 .cse49) (res .cse169 .cse170 (res .cse181 .cse182 (cong (and .cse183 .cse180) (and .cse53 .cse48)))) (cong (=> .cse201 .cse82) (=> .cse49 .cse74)))))) (res .cse191 .cse192 (cong (=> .cse70 .cse81) (=> .cse70 .cse67)))))) (res (= .cse206 .cse206) (refl .cse206) (cong (=> .cse206 .cse80) (=> .cse206 .cse71)))) (cong (not .cse76) (not .cse75))) (=-2 .cse79)))) (not- .cse77))) (res .cse78 (assume .cse78) (not- .cse78))))))))))))))))))))))))) (let-proof ((.cse68 (res .cse71 (=>+ 1 .cse71) .cse72))) (res .cse44 (! (res .cse45 (! (let-proof ((.cse50 (res .cse67 (=>+ 0 .cse67) .cse68))) (res .cse46 (! (res .cse47 (! (res .cse48 (! (res .cse49 .cse50 (and- 1 .cse49)) :proves (+ .cse48) :input) (! (=>+ 1 .cse47) :proves (+ .cse47 - .cse48) :input)) :proves (+ .cse47) :rup) (! (=>+ 1 .cse46) :proves (+ .cse46 - .cse47) :input)) :proves (+ .cse46) :rup) (res .cse51 (! (let ((.cse65 (+ x 1))) (let ((.cse52 (<= .cse65 0))) (let ((.cse54 (not .cse52))) (let ((.cse59 (= .cse53 .cse54))) (let-proof ((.cse55 (not+ .cse54)) (.cse61 (not- .cse54))) (let-proof ((.cse60 (res .cse54 (res .cse53 (=+1 .cse59) (res .cse52 .cse55 (farkas 1 .cse53 1 .cse52))) (res .cse53 (res .cse62 .cse63 (res .cse52 (let ((.cse64 (<= 1 .cse65))) (res .cse64 (total-int .cse65 0) (farkas 1 .cse62 1 .cse64))) .cse61)) (=+2 .cse59))))) (res .cse52 (! (res .cse53 (res .cse54 .cse55 (let ((.cse56 (not .cse54))) (res .cse56 (let ((.cse57 (not .cse53))) (res .cse57 (not+ .cse57) (let ((.cse58 (= .cse57 .cse56))) (res .cse58 (res .cse59 .cse60 (cong (not .cse53) (not .cse54))) (=-2 .cse58))))) (not- .cse56)))) (=>+ 1 .cse51)) :proves (+ .cse51 + .cse52) :input) (! (res .cse53 (res .cse49 .cse50 (and- 0 .cse49)) (res .cse54 (res .cse59 .cse60 (=-2 .cse59)) .cse61)) :proves (- .cse52) :input)))))))) :proves (+ .cse51) :rup) (! (res .cse66 (and+ .cse66) (=>+ 1 .cse45)) :proves (+ .cse45 - .cse51 - .cse46) :input)))) :proves (+ .cse45) :rup) (res .cse69 (! (res .cse70 (! (res .cse71 (=>+ 0 .cse71) .cse72) :proves (+ .cse70) :input) (! (=>+ 1 .cse69) :proves (+ .cse69 - .cse70) :input)) :proves (+ .cse69) :rup) (! (res .cse73 (and+ .cse73) (=>+ 1 .cse44)) :proves (+ .cse44 - .cse69 - .cse45) :input))) :proves (+ .cse44) :rup) (! (res .cse74 (and+ .cse74) (res .cse67 (=>+ 1 .cse67) .cse68)) :proves (- .cse44 - .cse43) :input)))))))))))))))) :proves (- .cse43) :rup))))) :proves (- .cse37) :rup))) (let ((.cse30 (= .cse11 .cse29))) (let-proof ((.cse26 (! (res .cse37 (! (=>+ 1 .cse37) :proves (+ .cse37 - .cse16) :input) .cse38) :proves (- .cse16) :rup)) (.cse33 (not+ .cse29)) (.cse32 (not- .cse29))) (let-proof ((.cse31 (res .cse29 (res .cse11 (=+1 .cse30) (res .cse10 .cse33 (farkas 1 .cse11 1 .cse10))) (res .cse11 (res .cse39 .cse40 (res .cse10 (let ((.cse41 (<= 1 .cse42))) (res .cse41 (total-int .cse42 0) (farkas 1 .cse39 1 .cse41))) .cse32)) (=+2 .cse30)))) (.cse28 (! (res .cse16 (! (=>+ 0 .cse16) :proves (+ .cse16 + .cse27) :input) .cse26) :proves (+ .cse27) :rup))) (let-proof ((.cse3 (! (res .cse37 (! (=>+ 0 .cse37) :proves (+ .cse37 + .cse2) :input) .cse38) :proves (+ .cse2) :rup)) (.cse8 (! (res .cse27 .cse28 (! (and- 1 .cse27) :proves (- .cse27 + .cse7) :input)) :proves (+ .cse7) :rup)) (.cse12 (res .cse29 .cse33 (let ((.cse34 (not .cse29))) (res .cse34 (let ((.cse35 (not .cse11))) (res .cse35 (not+ .cse35) (let ((.cse36 (= .cse35 .cse34))) (res .cse36 (res .cse30 .cse31 (cong (not .cse11) (not .cse29))) (=-2 .cse36))))) (not- .cse34))))) (.cse13 (! (res .cse27 .cse28 (! (res .cse11 (and- 0 .cse27) (res .cse29 (res .cse30 .cse31 (=-2 .cse30)) .cse32)) :proves (- .cse27 - .cse10) :input)) :proves (- .cse10) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 .cse3 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (res .cse4 (! (res .cse5 (! (res .cse6 (! (res .cse7 .cse8 (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (res .cse9 (! (res .cse10 (! (res .cse11 .cse12 (=>+ 1 .cse9)) :proves (+ .cse9 + .cse10) :input) .cse13) :proves (+ .cse9) :rup) (! (res .cse14 (and+ .cse14) (=>+ 1 .cse4)) :proves (+ .cse4 - .cse9 - .cse5) :input))) :proves (+ .cse4) :rup) (! (res .cse15 (and+ .cse15) (=>+ 1 .cse0)) :proves (+ .cse0 - .cse4 - .cse1) :input))) :proves (+ .cse0) :rup) (res .cse16 (res .cse17 (! (res .cse18 (! (res .cse2 .cse3 (! (=>+ 1 .cse18) :proves (+ .cse18 - .cse2) :input)) :proves (+ .cse18) :rup) (res .cse19 (! (res .cse20 (! (res .cse21 (! (res .cse7 .cse8 (! (=>+ 1 .cse21) :proves (+ .cse21 - .cse7) :input)) :proves (+ .cse21) :rup) (! (=>+ 1 .cse20) :proves (+ .cse20 - .cse21) :input)) :proves (+ .cse20) :rup) (res .cse22 (! (res .cse10 (! (res .cse11 .cse12 (=>+ 1 .cse22)) :proves (+ .cse22 + .cse10) :input) .cse13) :proves (+ .cse22) :rup) (! (res .cse23 (and+ .cse23) (=>+ 1 .cse19)) :proves (+ .cse19 - .cse22 - .cse20) :input))) :proves (+ .cse19) :rup) (! (res .cse24 (and+ .cse24) (=>+ 1 .cse17)) :proves (+ .cse17 - .cse19 - .cse18) :input))) :proves (+ .cse17) :rup) (! (res .cse25 (and+ .cse25) (=>+ 1 .cse16)) :proves (- .cse17 - .cse0 + .cse16) :input)) .cse26)))))))))))))))))))) :proves () :rup)

