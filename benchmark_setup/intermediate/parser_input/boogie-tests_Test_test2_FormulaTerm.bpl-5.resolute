unsat
(! (let ((.cse46 (+ y (* (- 1) x)))) (let ((.cse0 (<= .cse46 0))) (let ((.cse1 (xor z@0 .cse0))) (let ((.cse31 (ControlFlow 0 2)) (.cse5 (not .cse1))) (let ((.cse7 (not .cse5)) (.cse26 (= .cse31 (- 1)))) (let ((.cse2 (and .cse7 .cse26)) (.cse13 (not .cse0)) (.cse43 (= (ControlFlow 0 3) 2))) (let ((.cse10 (and .cse13 .cse43)) (.cse3 (=> .cse2 .cse7))) (let ((.cse11 (=> .cse10 .cse3))) (let-proof ((.cse9 (not- .cse5)) (.cse6 (not+ .cse5)) (.cse14 (not- .cse13))) (let-proof ((.cse12 (let ((.cse47 (= (ControlFlow 0 0) 3))) (let ((.cse15 (=> .cse47 .cse11))) (res .cse15 (=>+ 1 .cse15) (let ((.cse27 (- 0 1)) (.cse41 (< x y))) (let ((.cse32 (= z@0 .cse41)) (.cse25 (= .cse31 .cse27))) (let ((.cse24 (and .cse32 .cse25))) (let ((.cse42 (and .cse41 .cse43)) (.cse21 (=> .cse24 .cse32))) (let ((.cse20 (=> .cse42 .cse21))) (let ((.cse16 (=> .cse47 .cse20))) (let ((.cse18 (not .cse16))) (res .cse16 (let ((.cse17 (not .cse15))) (res .cse17 (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (res (= .cse16 .cse15) (res (= .cse20 .cse11) (let ((.cse39 (= .cse41 .cse13))) (let-proof ((.cse36 (not+ .cse13))) (let-proof ((.cse40 (res .cse13 (res .cse41 (=+1 .cse39) (res .cse0 .cse36 (farkas 1 .cse41 1 .cse0))) (res .cse41 (let ((.cse44 (<= y x))) (res .cse44 (total y x) (res .cse0 (let ((.cse45 (< 0 .cse46))) (res .cse45 (total .cse46 0) (farkas 1 .cse44 1 .cse45))) .cse14))) (=+2 .cse39))))) (res (= .cse21 .cse3) (let ((.cse22 (= .cse32 .cse7))) (let-proof ((.cse23 (let ((.cse33 (= z@0 .cse13))) (res (= .cse33 .cse7) (let ((.cse37 (xor z@0 .cse13))) (let ((.cse34 (not .cse37))) (res (= .cse34 .cse7) (let ((.cse35 (= .cse37 .cse5))) (res .cse35 (res (xor .cse13 .cse0) (res .cse0 (res .cse13 .cse36 (xor+ (.cse13 .cse0) (.cse0) (.cse13))) (res .cse13 (xor+ (.cse13 .cse0) (.cse13) (.cse0)) .cse14)) (res .cse37 (res .cse5 (=+1 .cse35) (res .cse1 (xor+ (z@0 .cse13) (z@0 .cse0) (.cse13 .cse0)) .cse9)) (res .cse5 (res .cse1 .cse6 (xor- (z@0 .cse0) (.cse13 .cse0) (z@0 .cse13))) (=+2 .cse35)))) (cong (not .cse37) (not .cse5)))) (let ((.cse38 (= .cse33 .cse34))) (res .cse38 (res .cse33 (res .cse37 (res z@0 (res .cse13 (=+1 .cse33) (xor+ (z@0 .cse13) (z@0) (.cse13))) (res .cse13 (xor+ (z@0 .cse13) (.cse13) (z@0)) (=+2 .cse33))) (res .cse34 (=+1 .cse38) (not- .cse34))) (res .cse37 (res .cse34 (not+ .cse34) (=+2 .cse38)) (res z@0 (res .cse13 (xor+ (z@0) (.cse13) (z@0 .cse13)) (=-1 .cse33)) (res .cse13 (=-2 .cse33) (xor- (z@0) (.cse13) (z@0 .cse13)))))) (trans .cse33 .cse34 .cse7)))))) (res (= .cse32 .cse33) (res .cse39 .cse40 (res (= z@0 z@0) (refl z@0) (cong (= z@0 .cse41) (= z@0 .cse13)))) (trans .cse32 .cse33 .cse7)))))) (res .cse22 .cse23 (res (= .cse24 .cse2) (res (= .cse25 .cse26) (res (= .cse27 (- 1)) (let ((.cse28 (* (- 1) 1))) (res (= .cse28 (- 1)) (poly* .cse28 (- 1)) (res (= 0 0) (refl 0) (let ((.cse29 (+ 0 .cse28)) (.cse30 (+ 0 (- 1)))) (res (= .cse29 .cse30) (cong (+ 0 .cse28) (+ 0 (- 1))) (res (= .cse27 .cse29) (-def 0 1) (res (= .cse30 (- 1)) (poly+ .cse30 (- 1)) (trans .cse27 .cse29 .cse30 (- 1))))))))) (res (= .cse31 .cse31) (refl .cse31) (cong (= .cse31 .cse27) (= .cse31 (- 1))))) (res .cse22 .cse23 (cong (and .cse32 .cse25) (and .cse7 .cse26)))) (cong (=> .cse24 .cse32) (=> .cse2 .cse7)))))) (res (= .cse42 .cse10) (res (= .cse43 .cse43) (refl .cse43) (res .cse39 .cse40 (cong (and .cse41 .cse43) (and .cse13 .cse43)))) (cong (=> .cse42 .cse21) (=> .cse10 .cse3))))))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse20) (=> .cse47 .cse11)))) (cong (not .cse16) (not .cse15))) (=-2 .cse19)))) (not- .cse17))) (res .cse18 (assume .cse18) (not- .cse18))))))))))))))) (let-proof ((.cse4 (res .cse11 (=>+ 1 .cse11) .cse12)) (.cse8 (! (res .cse10 (res .cse11 (=>+ 0 .cse11) .cse12) (res .cse13 (and- 0 .cse10) .cse14)) :proves (- .cse0) :input))) (res z@0 (res .cse0 (! (res .cse1 (res .cse2 (res .cse3 (=>+ 0 .cse3) .cse4) (res .cse5 .cse6 (res .cse7 (and- 0 .cse2) (not- .cse7)))) (xor+ (z@0) (.cse0) (z@0 .cse0))) :proves (+ .cse0 + z@0) :input) .cse8) (! (res .cse0 (! (res .cse1 (xor+ (z@0 .cse0) (.cse0) (z@0)) (res .cse3 (res .cse5 (res .cse7 (not+ .cse7) (=>+ 1 .cse3)) .cse9) .cse4)) :proves (+ .cse0 - z@0) :input) .cse8) :proves (- z@0) :rup))))))))))))) :proves () :rup)

