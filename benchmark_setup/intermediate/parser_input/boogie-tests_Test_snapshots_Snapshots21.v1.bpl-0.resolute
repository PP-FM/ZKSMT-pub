unsat
(! (let ((.cse51 (ControlFlow 0 5))) (let ((.cse2 (= .cse51 (- 6))) (.cse0 (= (- 6) .cse51))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 6) .cse51)) (res .cse2 (symm .cse51 (- 6)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse22 (ControlFlow 0 2))) (let ((.cse16 (= .cse22 (- 1)))) (let ((.cse38 (= .cse51 2)) (.cse14 (=> .cse16 false))) (let ((.cse35 (=> .cse38 .cse14))) (let ((.cse5 (=> false .cse35))) (let-proof ((.cse6 false-)) (res .cse5 (! (res false (=>+ 0 .cse5) .cse6) :proves (+ .cse5) :input) (let ((.cse84 (ControlFlow 0 7))) (let ((.cse57 (= .cse84 5)) (.cse8 (and .cse1 .cse5))) (let ((.cse7 (=> .cse57 .cse8))) (res .cse7 (! (res .cse8 (and+ .cse8) (=>+ 1 .cse7)) :proves (+ .cse7 - .cse1 - .cse5) :input) (! (let ((.cse73 (ControlFlow 0 3))) (let ((.cse62 (= .cse73 2))) (let ((.cse13 (=> .cse62 .cse14)) (.cse68 (= .cse73 (- 4)))) (let ((.cse10 (=> .cse68 true)) (.cse12 (=> true .cse13))) (let ((.cse74 (= .cse84 3)) (.cse23 (and .cse10 .cse12))) (let ((.cse9 (=> .cse74 .cse23))) (let-proof ((.cse11 true+)) (res .cse9 (! (res .cse10 (! (res true .cse11 (=>+ 1 .cse10)) :proves (+ .cse10) :input) (res .cse12 (! (res .cse13 (! (res .cse14 (! (let ((.cse15 (= (- 1) .cse22))) (let ((.cse17 (= .cse16 .cse15))) (let-proof ((.cse18 (res .cse15 (res .cse16 (=+1 .cse17) (symm (- 1) .cse22)) (res .cse16 (symm .cse22 (- 1)) (=+2 .cse17))))) (res .cse15 (! (res .cse16 (=>+ 0 .cse14) (res .cse17 .cse18 (=-2 .cse17))) :proves (+ .cse14 + .cse15) :input) (! (let ((.cse20 (not .cse16))) (res .cse16 (let ((.cse19 (not .cse15))) (res .cse19 (res .cse20 (not+ .cse20) (let ((.cse21 (= .cse20 .cse19))) (res .cse21 (res .cse17 .cse18 (cong (not .cse16) (not .cse15))) (=-2 .cse21)))) (not- .cse19))) (res .cse20 (assume .cse20) (not- .cse20)))) :proves (- .cse15) :input))))) :proves (+ .cse14) :rup) (! (=>+ 1 .cse13) :proves (+ .cse13 - .cse14) :input)) :proves (+ .cse13) :rup) (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse13) :input)) :proves (+ .cse12) :rup) (! (res .cse23 (and+ .cse23) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse12 - .cse10) :input))) :proves (+ .cse9) :rup) (! (let ((.cse24 (and .cse9 .cse7))) (res .cse24 (and+ .cse24) (let ((.cse83 (= (ControlFlow 0 0) 7))) (let ((.cse25 (=> .cse83 .cse24))) (res .cse25 (=>+ 1 .cse25) (let ((.cse77 (= 3 3)) (.cse79 (- 0 1))) (let ((.cse78 (= .cse22 .cse79)) (.cse75 (not .cse77))) (let ((.cse69 (- 0 4)) (.cse56 (= 2 2)) (.cse45 (- 0 6)) (.cse39 (=> .cse78 .cse75))) (let ((.cse34 (=> .cse38 .cse39)) (.cse44 (= .cse51 .cse45)) (.cse42 (not .cse56)) (.cse61 (=> .cse62 .cse39)) (.cse67 (= .cse73 .cse69)) (.cse65 (= 1 1))) (let ((.cse66 (=> .cse67 .cse65)) (.cse60 (=> .cse65 .cse61)) (.cse43 (=> .cse44 .cse42)) (.cse33 (=> .cse42 .cse34))) (let ((.cse32 (and .cse43 .cse33)) (.cse59 (and .cse66 .cse60))) (let ((.cse58 (=> .cse74 .cse59)) (.cse31 (=> .cse57 .cse32))) (let ((.cse30 (and .cse58 .cse31))) (let ((.cse26 (=> .cse83 .cse30))) (let ((.cse28 (not .cse26))) (res .cse26 (let ((.cse27 (not .cse25))) (res .cse27 (res .cse28 (not+ .cse28) (let ((.cse29 (= .cse28 .cse27))) (res .cse29 (res (= .cse26 .cse25) (res (= .cse30 .cse24) (let ((.cse54 (not true))) (let ((.cse52 (= .cse54 false))) (let ((.cse47 (= 0 0))) (let-proof ((.cse53 (res false (res .cse54 (=+1 .cse52) (res true .cse11 (not- .cse54))) .cse6)) (.cse48 (refl 0))) (let ((.cse36 (= .cse39 .cse14))) (let-proof ((.cse37 (res (= .cse75 false) (res .cse52 .cse53 (res (= .cse75 .cse54) (let ((.cse76 (= .cse77 true))) (res .cse76 (res true .cse11 (res .cse77 (refl 3) (=+2 .cse76))) (cong (not .cse77) (not true)))) (trans .cse75 .cse54 false))) (res (= .cse78 .cse16) (res (= .cse79 (- 1)) (let ((.cse80 (* (- 1) 1))) (res (= .cse80 (- 1)) (poly* .cse80 (- 1)) (res .cse47 .cse48 (let ((.cse81 (+ 0 .cse80)) (.cse82 (+ 0 (- 1)))) (res (= .cse81 .cse82) (cong (+ 0 .cse80) (+ 0 (- 1))) (res (= .cse79 .cse81) (-def 0 1) (res (= .cse82 (- 1)) (poly+ .cse82 (- 1)) (trans .cse79 .cse81 .cse82 (- 1))))))))) (res (= .cse22 .cse22) (refl .cse22) (cong (= .cse22 .cse79) (= .cse22 (- 1))))) (cong (=> .cse78 .cse75) (=> .cse16 false)))))) (res (= .cse31 .cse7) (res (= .cse32 .cse8) (let ((.cse40 (= .cse42 false))) (let-proof ((.cse41 (res .cse52 .cse53 (res (= .cse42 .cse54) (let ((.cse55 (= .cse56 true))) (res .cse55 (res true .cse11 (res .cse56 (refl 2) (=+2 .cse55))) (cong (not .cse56) (not true)))) (trans .cse42 .cse54 false))))) (res (= .cse33 .cse5) (res (= .cse34 .cse35) (res .cse36 .cse37 (res (= .cse38 .cse38) (refl .cse38) (cong (=> .cse38 .cse39) (=> .cse38 .cse14)))) (res .cse40 .cse41 (cong (=> .cse42 .cse34) (=> false .cse35)))) (res (= .cse43 .cse1) (res .cse40 .cse41 (res (= .cse44 .cse2) (res (= .cse45 (- 6)) (let ((.cse46 (* (- 1) 6))) (res (= .cse46 (- 6)) (poly* .cse46 (- 6)) (res .cse47 .cse48 (let ((.cse49 (+ 0 .cse46)) (.cse50 (+ 0 (- 6)))) (res (= .cse49 .cse50) (cong (+ 0 .cse46) (+ 0 (- 6))) (res (= .cse45 .cse49) (-def 0 6) (res (= .cse50 (- 6)) (poly+ .cse50 (- 6)) (trans .cse45 .cse49 .cse50 (- 6))))))))) (res (= .cse51 .cse51) (refl .cse51) (cong (= .cse51 .cse45) (= .cse51 (- 6))))) (cong (=> .cse44 .cse42) (=> .cse2 false)))) (cong (and .cse43 .cse33) (and .cse1 .cse5)))))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse32) (=> .cse57 .cse8)))) (res (= .cse58 .cse9) (res (= .cse59 .cse23) (let ((.cse63 (= .cse65 true))) (let-proof ((.cse64 (res true .cse11 (res .cse65 (refl 1) (=+2 .cse63))))) (res (= .cse60 .cse12) (res (= .cse61 .cse13) (res .cse36 .cse37 (res (= .cse62 .cse62) (refl .cse62) (cong (=> .cse62 .cse39) (=> .cse62 .cse14)))) (res .cse63 .cse64 (cong (=> .cse65 .cse61) (=> true .cse13)))) (res (= .cse66 .cse10) (res .cse63 .cse64 (res (= .cse67 .cse68) (res (= .cse69 (- 4)) (let ((.cse70 (* (- 1) 4))) (res (= .cse70 (- 4)) (poly* .cse70 (- 4)) (res .cse47 .cse48 (let ((.cse71 (+ 0 .cse70)) (.cse72 (+ 0 (- 4)))) (res (= .cse71 .cse72) (cong (+ 0 .cse70) (+ 0 (- 4))) (res (= .cse69 .cse71) (-def 0 4) (res (= .cse72 (- 4)) (poly+ .cse72 (- 4)) (trans .cse69 .cse71 .cse72 (- 4))))))))) (res (= .cse73 .cse73) (refl .cse73) (cong (= .cse73 .cse69) (= .cse73 (- 4))))) (cong (=> .cse67 .cse65) (=> .cse68 true)))) (cong (and .cse66 .cse60) (and .cse10 .cse12)))))) (res (= .cse74 .cse74) (refl .cse74) (cong (=> .cse74 .cse59) (=> .cse74 .cse23)))) (cong (and .cse58 .cse31) (and .cse9 .cse7)))))))))) (res (= .cse83 .cse83) (refl .cse83) (cong (=> .cse83 .cse30) (=> .cse83 .cse24)))) (cong (not .cse26) (not .cse25))) (=-2 .cse29)))) (not- .cse27))) (res .cse28 (assume .cse28) (not- .cse28)))))))))))))))))) :proves (- .cse9 - .cse7) :input))))))))) :proves (- .cse7) :rup)))))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse86 (not .cse2))) (res .cse2 (let ((.cse85 (not .cse0))) (res .cse85 (res .cse86 (not+ .cse86) (let ((.cse87 (= .cse86 .cse85))) (res .cse87 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse87)))) (not- .cse85))) (res .cse86 (assume .cse86) (not- .cse86)))) :proves (- .cse0) :input)))))) :proves () :rup)

