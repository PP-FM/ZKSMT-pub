unsat
(! (let ((.cse94 (* (- 1) x))) (let ((.cse126 (+ .cse94 20)) (.cse125 (+ .cse94 10))) (let ((.cse3 (<= .cse125 0)) (.cse18 (<= .cse126 0))) (let ((.cse19 (not .cse18)) (.cse7 (not .cse3))) (let ((.cse23 (< 0 .cse126)) (.cse11 (< 0 .cse125)) (.cse0 (or .cse19 .cse3))) (let-proof ((.cse8 (not+ .cse7)) (.cse20 (not+ .cse19)) (.cse24 (total .cse126 0)) (.cse12 (total .cse125 0))) (let-proof ((.cse15 (! (let ((.cse39 (ControlFlow 0 2))) (let ((.cse114 (= .cse39 (- 5)))) (let ((.cse27 (=> .cse114 .cse0))) (res .cse27 (! (=>+ 1 .cse27) :proves (+ .cse27 - .cse0) :input) (! (let ((.cse33 (= .cse39 (- 1))) (.cse73 (= x 7))) (let ((.cse31 (=> .cse33 .cse73)) (.cse42 (= .cse39 (- 3))) (.cse86 (<= .cse94 0))) (let ((.cse40 (=> .cse42 .cse86)) (.cse30 (=> .cse86 .cse31))) (let ((.cse48 (and .cse40 .cse30)) (.cse51 (= .cse39 (- 4)))) (let ((.cse49 (=> .cse51 .cse7)) (.cse29 (=> .cse7 .cse48))) (let ((.cse57 (and .cse49 .cse29))) (let ((.cse28 (=> .cse0 .cse57))) (res .cse28 (! (res .cse29 (! (res .cse30 (! (res .cse31 (! (let ((.cse32 (= (- 1) .cse39))) (let ((.cse34 (= .cse33 .cse32))) (let-proof ((.cse35 (res .cse32 (res .cse33 (=+1 .cse34) (symm (- 1) .cse39)) (res .cse33 (symm .cse39 (- 1)) (=+2 .cse34))))) (res .cse32 (! (res .cse33 (=>+ 0 .cse31) (res .cse34 .cse35 (=-2 .cse34))) :proves (+ .cse31 + .cse32) :input) (! (let ((.cse37 (not .cse33))) (res .cse33 (let ((.cse36 (not .cse32))) (res .cse36 (res .cse37 (not+ .cse37) (let ((.cse38 (= .cse37 .cse36))) (res .cse38 (res .cse34 .cse35 (cong (not .cse33) (not .cse32))) (=-2 .cse38)))) (not- .cse36))) (res .cse37 (assume .cse37) (not- .cse37)))) :proves (- .cse32) :input))))) :proves (+ .cse31) :rup) (! (=>+ 1 .cse30) :proves (+ .cse30 - .cse31) :input)) :proves (+ .cse30) :rup) (res .cse40 (! (let ((.cse41 (= (- 3) .cse39))) (let ((.cse43 (= .cse42 .cse41))) (let-proof ((.cse44 (res .cse41 (res .cse42 (=+1 .cse43) (symm (- 3) .cse39)) (res .cse42 (symm .cse39 (- 3)) (=+2 .cse43))))) (res .cse41 (! (res .cse42 (=>+ 0 .cse40) (res .cse43 .cse44 (=-2 .cse43))) :proves (+ .cse40 + .cse41) :input) (! (let ((.cse46 (not .cse42))) (res .cse42 (let ((.cse45 (not .cse41))) (res .cse45 (res .cse46 (not+ .cse46) (let ((.cse47 (= .cse46 .cse45))) (res .cse47 (res .cse43 .cse44 (cong (not .cse42) (not .cse41))) (=-2 .cse47)))) (not- .cse45))) (res .cse46 (assume .cse46) (not- .cse46)))) :proves (- .cse41) :input))))) :proves (+ .cse40) :rup) (! (res .cse48 (and+ .cse48) (=>+ 1 .cse29)) :proves (+ .cse29 - .cse40 - .cse30) :input))) :proves (+ .cse29) :rup) (res .cse49 (! (let ((.cse50 (= (- 4) .cse39))) (let ((.cse52 (= .cse51 .cse50))) (let-proof ((.cse53 (res .cse50 (res .cse51 (=+1 .cse52) (symm (- 4) .cse39)) (res .cse51 (symm .cse39 (- 4)) (=+2 .cse52))))) (res .cse50 (! (res .cse51 (=>+ 0 .cse49) (res .cse52 .cse53 (=-2 .cse52))) :proves (+ .cse49 + .cse50) :input) (! (let ((.cse55 (not .cse51))) (res .cse51 (let ((.cse54 (not .cse50))) (res .cse54 (res .cse55 (not+ .cse55) (let ((.cse56 (= .cse55 .cse54))) (res .cse56 (res .cse52 .cse53 (cong (not .cse51) (not .cse50))) (=-2 .cse56)))) (not- .cse54))) (res .cse55 (assume .cse55) (not- .cse55)))) :proves (- .cse50) :input))))) :proves (+ .cse49) :rup) (! (res .cse57 (and+ .cse57) (=>+ 1 .cse28)) :proves (- .cse49 + .cse28 - .cse29) :input))) :proves (+ .cse28) :rup) (! (let ((.cse58 (and .cse27 .cse28))) (res .cse58 (and+ .cse58) (let ((.cse123 (= (ControlFlow 0 6) 2))) (let ((.cse59 (=> .cse123 .cse58))) (res .cse59 (=>+ 1 .cse59) (let ((.cse124 (= (ControlFlow 0 0) 6))) (let ((.cse60 (=> .cse124 .cse59))) (res .cse60 (=>+ 1 .cse60) (let ((.cse75 (- 0 1))) (let ((.cse89 (- 0 3)) (.cse74 (= .cse39 .cse75))) (let ((.cse72 (=> .cse74 .cse73)) (.cse88 (= .cse39 .cse89)) (.cse85 (<= 0 x))) (let ((.cse101 (- 0 4)) (.cse87 (=> .cse88 .cse85)) (.cse71 (=> .cse85 .cse72))) (let ((.cse70 (and .cse87 .cse71)) (.cse100 (= .cse39 .cse101)) (.cse98 (< x 10))) (let ((.cse121 (< x 20)) (.cse106 (<= 10 x)) (.cse115 (- 0 5)) (.cse99 (=> .cse100 .cse98)) (.cse69 (=> .cse98 .cse70))) (let ((.cse68 (and .cse99 .cse69)) (.cse113 (= .cse39 .cse115)) (.cse111 (or .cse121 .cse106))) (let ((.cse112 (=> .cse113 .cse111)) (.cse67 (=> .cse111 .cse68))) (let ((.cse66 (and .cse112 .cse67))) (let ((.cse65 (=> .cse123 .cse66))) (let ((.cse61 (=> .cse124 .cse65))) (let ((.cse63 (not .cse61))) (res .cse61 (let ((.cse62 (not .cse60))) (res .cse62 (res .cse63 (not+ .cse63) (let ((.cse64 (= .cse63 .cse62))) (res .cse64 (res (= .cse61 .cse60) (res (= .cse65 .cse59) (res (= .cse66 .cse58) (let-proof ((.cse108 (res .cse11 .cse12 (farkas 1 .cse106 1 .cse11))) (.cse107 (total 10 x)) (.cse105 (farkas 1 .cse98 1 .cse3))) (let ((.cse109 (= .cse111 .cse0)) (.cse77 (= 0 0)) (.cse81 (= .cse39 .cse39))) (let-proof ((.cse110 (let ((.cse119 (= .cse106 .cse3))) (res .cse119 (res .cse3 (res .cse106 (=+1 .cse119) .cse108) (res .cse106 (res .cse98 .cse107 .cse105) (=+2 .cse119))) (let ((.cse120 (= .cse121 .cse19))) (res .cse120 (res .cse19 (res .cse121 (=+1 .cse120) (res .cse18 .cse20 (farkas 1 .cse121 1 .cse18))) (res .cse121 (let ((.cse122 (<= 20 x))) (res .cse122 (total 20 x) (res .cse18 (res .cse23 .cse24 (farkas 1 .cse122 1 .cse23)) (not- .cse19)))) (=+2 .cse120))) (cong (or .cse121 .cse106) (or .cse19 .cse3))))))) (.cse78 (refl 0)) (.cse82 (refl .cse39))) (res (= .cse67 .cse28) (res (= .cse68 .cse57) (let ((.cse96 (= .cse98 .cse7))) (let-proof ((.cse97 (res .cse7 (res .cse98 (=+1 .cse96) (res .cse3 .cse8 .cse105)) (res .cse98 (res .cse106 .cse107 (res .cse3 .cse108 (not- .cse7))) (=+2 .cse96))))) (res (= .cse69 .cse29) (res (= .cse70 .cse48) (let ((.cse83 (= .cse85 .cse86))) (let-proof ((.cse84 (res .cse86 (res .cse85 (=+1 .cse83) (let ((.cse93 (< 0 .cse94))) (res .cse93 (total .cse94 0) (farkas 1 .cse85 1 .cse93)))) (res .cse85 (let ((.cse95 (< x 0))) (res .cse95 (total 0 x) (farkas 1 .cse95 1 .cse86))) (=+2 .cse83))))) (res (= .cse71 .cse30) (res (= .cse72 .cse31) (res (= .cse73 .cse73) (refl .cse73) (res (= .cse74 .cse33) (res (= .cse75 (- 1)) (let ((.cse76 (* (- 1) 1))) (res (= .cse76 (- 1)) (poly* .cse76 (- 1)) (res .cse77 .cse78 (let ((.cse79 (+ 0 .cse76)) (.cse80 (+ 0 (- 1)))) (res (= .cse79 .cse80) (cong (+ 0 .cse76) (+ 0 (- 1))) (res (= .cse75 .cse79) (-def 0 1) (res (= .cse80 (- 1)) (poly+ .cse80 (- 1)) (trans .cse75 .cse79 .cse80 (- 1))))))))) (res .cse81 .cse82 (cong (= .cse39 .cse75) (= .cse39 (- 1))))) (cong (=> .cse74 .cse73) (=> .cse33 .cse73)))) (res .cse83 .cse84 (cong (=> .cse85 .cse72) (=> .cse86 .cse31)))) (res (= .cse87 .cse40) (res .cse83 .cse84 (res (= .cse88 .cse42) (res (= .cse89 (- 3)) (let ((.cse90 (* (- 1) 3))) (res (= .cse90 (- 3)) (poly* .cse90 (- 3)) (res .cse77 .cse78 (let ((.cse91 (+ 0 .cse90)) (.cse92 (+ 0 (- 3)))) (res (= .cse91 .cse92) (cong (+ 0 .cse90) (+ 0 (- 3))) (res (= .cse89 .cse91) (-def 0 3) (res (= .cse92 (- 3)) (poly+ .cse92 (- 3)) (trans .cse89 .cse91 .cse92 (- 3))))))))) (res .cse81 .cse82 (cong (= .cse39 .cse89) (= .cse39 (- 3))))) (cong (=> .cse88 .cse85) (=> .cse42 .cse86)))) (cong (and .cse87 .cse71) (and .cse40 .cse30)))))) (res .cse96 .cse97 (cong (=> .cse98 .cse70) (=> .cse7 .cse48)))) (res (= .cse99 .cse49) (res .cse96 .cse97 (res (= .cse100 .cse51) (res (= .cse101 (- 4)) (let ((.cse102 (* (- 1) 4))) (res (= .cse102 (- 4)) (poly* .cse102 (- 4)) (res .cse77 .cse78 (let ((.cse103 (+ 0 .cse102)) (.cse104 (+ 0 (- 4)))) (res (= .cse103 .cse104) (cong (+ 0 .cse102) (+ 0 (- 4))) (res (= .cse101 .cse103) (-def 0 4) (res (= .cse104 (- 4)) (poly+ .cse104 (- 4)) (trans .cse101 .cse103 .cse104 (- 4))))))))) (res .cse81 .cse82 (cong (= .cse39 .cse101) (= .cse39 (- 4))))) (cong (=> .cse100 .cse98) (=> .cse51 .cse7)))) (cong (and .cse99 .cse69) (and .cse49 .cse29)))))) (res .cse109 .cse110 (cong (=> .cse111 .cse68) (=> .cse0 .cse57)))) (res (= .cse112 .cse27) (res .cse109 .cse110 (res (= .cse113 .cse114) (res (= .cse115 (- 5)) (let ((.cse116 (* (- 1) 5))) (res (= .cse116 (- 5)) (poly* .cse116 (- 5)) (res .cse77 .cse78 (let ((.cse117 (+ 0 .cse116)) (.cse118 (+ 0 (- 5)))) (res (= .cse117 .cse118) (cong (+ 0 .cse116) (+ 0 (- 5))) (res (= .cse115 .cse117) (-def 0 5) (res (= .cse118 (- 5)) (poly+ .cse118 (- 5)) (trans .cse115 .cse117 .cse118 (- 5))))))))) (res .cse81 .cse82 (cong (= .cse39 .cse115) (= .cse39 (- 5))))) (cong (=> .cse113 .cse111) (=> .cse114 .cse0)))) (cong (and .cse112 .cse67) (and .cse27 .cse28))))))) (res (= .cse123 .cse123) (refl .cse123) (cong (=> .cse123 .cse66) (=> .cse123 .cse58)))) (res (= .cse124 .cse124) (refl .cse124) (cong (=> .cse124 .cse65) (=> .cse124 .cse59)))) (cong (not .cse61) (not .cse60))) (=-2 .cse64)))) (not- .cse62))) (res .cse63 (assume .cse63) (not- .cse63))))))))))))))))))))))) :proves (- .cse27 - .cse28) :input))))))))) :proves (- .cse27) :rup))))) :proves (- .cse0) :rup))) (res .cse0 (let ((.cse26 (+ x (- 19)))) (let ((.cse16 (<= 1 .cse26)) (.cse1 (<= .cse26 0))) (let-proof ((.cse17 (total-int .cse26 0))) (res .cse1 (! (let ((.cse14 (+ x (- 9)))) (let ((.cse2 (<= .cse14 0))) (res .cse2 (! (res .cse0 (! (res .cse3 (let ((.cse4 (not .cse2))) (let-proof ((.cse5 (not+ .cse4))) (res .cse4 .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 .cse8 (let ((.cse9 (= .cse7 .cse6))) (res .cse9 (let ((.cse10 (= .cse3 .cse4))) (res .cse10 (res .cse4 (res .cse3 (=+1 .cse10) (res .cse2 .cse5 (farkas 1 .cse3 1 .cse2))) (res .cse3 (res .cse11 .cse12 (res .cse2 (let ((.cse13 (<= 1 .cse14))) (res .cse13 (total-int .cse14 0) (farkas 1 .cse11 1 .cse13))) (not- .cse4))) (=+2 .cse10))) (cong (not .cse3) (not .cse4)))) (=-2 .cse9)))) (not- .cse6)))))) (or+ 1 .cse0)) :proves (+ .cse0 + .cse2) :input) .cse15) :proves (+ .cse2) :rup) (! (res .cse16 .cse17 (farkas 1 .cse16 1 .cse2)) :proves (+ .cse1 - .cse2) :LA ((- 1) 1))))) :proves (+ .cse1) :rup) (! (res .cse18 (res .cse19 .cse20 (or+ 0 .cse0)) (let ((.cse21 (not .cse1))) (let-proof ((.cse25 (not- .cse21))) (res .cse21 (let ((.cse22 (= .cse18 .cse21))) (res .cse22 (res .cse21 (res .cse18 (=+1 .cse22) (res .cse1 (not+ .cse21) (farkas 1 .cse18 1 .cse1))) (res .cse18 (res .cse23 .cse24 (res .cse1 (res .cse16 .cse17 (farkas 1 .cse23 1 .cse16)) .cse25)) (=+2 .cse22))) (=-2 .cse22))) .cse25)))) :proves (+ .cse0 - .cse1) :input))))) .cse15)))))))) :proves () :rup)

