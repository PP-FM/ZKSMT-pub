unsat
(! (let ((.cse36 (ControlFlow 0 2))) (let ((.cse2 (= .cse36 (- 1))) (.cse0 (= (- 1) .cse36))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse36)) (res .cse2 (symm .cse36 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse26 (= x@0 0))) (let ((.cse1 (=> .cse2 .cse26))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse5 (=> true .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse41 (= .cse36 (- 3)))) (let ((.cse6 (=> .cse41 true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (let ((.cse50 (ControlFlow 0 5))) (let ((.cse46 (= .cse50 2)) (.cse9 (and .cse6 .cse5))) (let ((.cse8 (=> .cse46 .cse9))) (res .cse8 (! (res .cse9 (and+ .cse9) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse5 - .cse6) :input) (! (let ((.cse10 (=> (= .cse50 4) true))) (res .cse10 (! (res true .cse7 (=>+ 1 .cse10)) :proves (+ .cse10) :input) (! (let ((.cse11 (and .cse8 .cse10))) (res .cse11 (and+ .cse11) (let ((.cse47 (= x 0))) (let ((.cse12 (=> .cse47 .cse11))) (res .cse12 (=>+ 1 .cse12) (let ((.cse48 (= (ControlFlow 0 6) 5))) (let ((.cse13 (=> .cse48 .cse12))) (res .cse13 (=>+ 1 .cse13) (let ((.cse49 (= (ControlFlow 0 0) 6))) (let ((.cse14 (=> .cse49 .cse13))) (res .cse14 (=>+ 1 .cse14) (let ((.cse28 (- 0 1))) (let ((.cse42 (- 0 3)) (.cse27 (= .cse36 .cse28))) (let ((.cse25 (=> .cse27 .cse26)) (.cse40 (= .cse36 .cse42)) (.cse30 (= 0 0))) (let ((.cse39 (=> .cse40 .cse30)) (.cse24 (=> .cse30 .cse25))) (let ((.cse23 (and .cse39 .cse24))) (let ((.cse22 (=> .cse46 .cse23))) (let ((.cse21 (and .cse22 .cse10))) (let ((.cse20 (=> .cse47 .cse21))) (let ((.cse19 (=> .cse48 .cse20))) (let ((.cse15 (=> .cse49 .cse19))) (let ((.cse17 (not .cse15))) (res .cse15 (let ((.cse16 (not .cse14))) (res .cse16 (res .cse17 (not+ .cse17) (let ((.cse18 (= .cse17 .cse16))) (res .cse18 (res (= .cse15 .cse14) (res (= .cse19 .cse13) (res (= .cse20 .cse12) (res (= .cse21 .cse11) (res (= .cse10 .cse10) (refl .cse10) (res (= .cse22 .cse8) (res (= .cse23 .cse9) (let ((.cse37 (= .cse30 true))) (let-proof ((.cse31 (refl 0))) (let ((.cse34 (= .cse36 .cse36))) (let-proof ((.cse38 (res true .cse7 (res .cse30 .cse31 (=+2 .cse37)))) (.cse35 (refl .cse36))) (res (= .cse24 .cse5) (res (= .cse25 .cse1) (res (= .cse26 .cse26) (refl .cse26) (res (= .cse27 .cse2) (res (= .cse28 (- 1)) (let ((.cse29 (* (- 1) 1))) (res (= .cse29 (- 1)) (poly* .cse29 (- 1)) (res .cse30 .cse31 (let ((.cse32 (+ 0 .cse29)) (.cse33 (+ 0 (- 1)))) (res (= .cse32 .cse33) (cong (+ 0 .cse29) (+ 0 (- 1))) (res (= .cse28 .cse32) (-def 0 1) (res (= .cse33 (- 1)) (poly+ .cse33 (- 1)) (trans .cse28 .cse32 .cse33 (- 1))))))))) (res .cse34 .cse35 (cong (= .cse36 .cse28) (= .cse36 (- 1))))) (cong (=> .cse27 .cse26) (=> .cse2 .cse26)))) (res .cse37 .cse38 (cong (=> .cse30 .cse25) (=> true .cse1)))) (res (= .cse39 .cse6) (res .cse37 .cse38 (res (= .cse40 .cse41) (res (= .cse42 (- 3)) (let ((.cse43 (* (- 1) 3))) (res (= .cse43 (- 3)) (poly* .cse43 (- 3)) (res .cse30 .cse31 (let ((.cse44 (+ 0 .cse43)) (.cse45 (+ 0 (- 3)))) (res (= .cse44 .cse45) (cong (+ 0 .cse43) (+ 0 (- 3))) (res (= .cse42 .cse44) (-def 0 3) (res (= .cse45 (- 3)) (poly+ .cse45 (- 3)) (trans .cse42 .cse44 .cse45 (- 3))))))))) (res .cse34 .cse35 (cong (= .cse36 .cse42) (= .cse36 (- 3))))) (cong (=> .cse40 .cse30) (=> .cse41 true)))) (cong (and .cse39 .cse24) (and .cse6 .cse5)))))))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse23) (=> .cse46 .cse9)))) (cong (and .cse22 .cse10) (and .cse8 .cse10)))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse21) (=> .cse47 .cse11)))) (res (= .cse48 .cse48) (refl .cse48) (cong (=> .cse48 .cse20) (=> .cse48 .cse12)))) (res (= .cse49 .cse49) (refl .cse49) (cong (=> .cse49 .cse19) (=> .cse49 .cse13)))) (cong (not .cse15) (not .cse14))) (=-2 .cse18)))) (not- .cse16))) (res .cse17 (assume .cse17) (not- .cse17))))))))))))))))))))))))) :proves (- .cse8 - .cse10) :input))) :proves (- .cse8) :rup))))))))) :proves (- .cse5) :rup))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse52 (not .cse2))) (res .cse2 (let ((.cse51 (not .cse0))) (res .cse51 (res .cse52 (not+ .cse52) (let ((.cse53 (= .cse52 .cse51))) (res .cse53 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse53)))) (not- .cse51))) (res .cse52 (assume .cse52) (not- .cse52)))) :proves (- .cse0) :input)))))) :proves () :rup)

