unsat
(! (let ((.cse61 (* (- 1) y@3)) (.cse69 (ControlFlow 0 2))) (let ((.cse64 (= .cse69 (- 1))) (.cse57 (<= .cse61 0))) (let ((.cse50 (and (= y@3 x) (= (ControlFlow 0 3) 2))) (.cse3 (=> .cse64 .cse57)) (.cse54 (* (- 1) x))) (let ((.cse41 (<= .cse54 0)) (.cse2 (=> .cse50 .cse3)) (.cse72 (ControlFlow 0 5))) (let ((.cse52 (= .cse72 3)) (.cse1 (=> .cse41 .cse2))) (let ((.cse0 (=> .cse52 .cse1))) (let-proof ((.cse4 (! (let ((.cse73 (= (- 1) .cse69))) (let ((.cse74 (= .cse64 .cse73))) (let-proof ((.cse75 (res .cse73 (res .cse64 (=+1 .cse74) (symm (- 1) .cse69)) (res .cse64 (symm .cse69 (- 1)) (=+2 .cse74))))) (res .cse73 (! (res .cse64 (=>+ 0 .cse3) (res .cse74 .cse75 (=-2 .cse74))) :proves (+ .cse3 + .cse73) :input) (! (let ((.cse77 (not .cse64))) (res .cse64 (let ((.cse76 (not .cse73))) (res .cse76 (res .cse77 (not+ .cse77) (let ((.cse78 (= .cse77 .cse76))) (res .cse78 (res .cse74 .cse75 (cong (not .cse64) (not .cse73))) (=-2 .cse78)))) (not- .cse76))) (res .cse77 (assume .cse77) (not- .cse77)))) :proves (- .cse73) :input))))) :proves (+ .cse3) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 (! (res .cse3 .cse4 (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse3) :input)) :proves (+ .cse2) :rup) (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse30 (+ y@1 (- 5)))) (let ((.cse33 (= y@1 (+ y@0 3))) (.cse28 (= y@2 .cse30))) (let ((.cse26 (and .cse33 .cse28)) (.cse24 (and (= y@3 y@2) (= (ControlFlow 0 4) 2)))) (let ((.cse23 (and .cse26 .cse24)) (.cse39 (not .cse41)) (.cse37 (= y@0 (+ x 2)))) (let ((.cse36 (and .cse39 .cse37)) (.cse7 (=> .cse23 .cse3))) (let ((.cse46 (= .cse72 4)) (.cse6 (=> .cse36 .cse7))) (let ((.cse5 (=> .cse46 .cse6))) (res .cse5 (! (res .cse6 (! (res .cse7 (! (res .cse3 .cse4 (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse3) :input)) :proves (+ .cse7) :rup) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (! (let ((.cse8 (and .cse0 .cse5))) (res .cse8 (and+ .cse8) (let ((.cse70 (= (ControlFlow 0 6) 5))) (let ((.cse9 (=> .cse70 .cse8))) (res .cse9 (=>+ 1 .cse9) (let ((.cse71 (= (ControlFlow 0 0) 6))) (let ((.cse10 (=> .cse71 .cse9))) (res .cse10 (=>+ 1 .cse10) (let ((.cse29 (- y@1 5))) (let ((.cse27 (= y@2 .cse29)) (.cse65 (- 0 1))) (let ((.cse63 (= .cse69 .cse65)) (.cse58 (>= y@3 0)) (.cse25 (and .cse33 .cse27))) (let ((.cse22 (and .cse25 .cse24)) (.cse40 (< x 0)) (.cse34 (=> .cse63 .cse58))) (let ((.cse43 (<= 0 x)) (.cse49 (=> .cse50 .cse34)) (.cse35 (and .cse40 .cse37)) (.cse19 (=> .cse22 .cse34))) (let ((.cse18 (=> .cse35 .cse19)) (.cse48 (=> .cse43 .cse49))) (let ((.cse47 (=> .cse52 .cse48)) (.cse17 (=> .cse46 .cse18))) (let ((.cse16 (and .cse47 .cse17))) (let ((.cse15 (=> .cse70 .cse16))) (let ((.cse11 (=> .cse71 .cse15))) (let ((.cse13 (not .cse11))) (res .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res (= .cse11 .cse10) (res (= .cse15 .cse9) (res (= .cse16 .cse8) (let ((.cse20 (= .cse34 .cse3))) (let-proof ((.cse21 (let ((.cse55 (= .cse58 .cse57))) (res .cse55 (let ((.cse59 (<= 0 y@3))) (let ((.cse56 (= .cse58 .cse59))) (res .cse56 (>=def y@3 0) (res .cse57 (res .cse58 (=+1 .cse55) (res .cse59 (=-2 .cse56) (let ((.cse60 (< 0 .cse61))) (res .cse60 (total .cse61 0) (farkas 1 .cse59 1 .cse60))))) (res .cse58 (res .cse59 (let ((.cse62 (< y@3 0))) (res .cse62 (total 0 y@3) (farkas 1 .cse62 1 .cse57))) (=-1 .cse56)) (=+2 .cse55)))))) (res (= .cse63 .cse64) (res (= .cse65 (- 1)) (let ((.cse66 (* (- 1) 1))) (res (= .cse66 (- 1)) (poly* .cse66 (- 1)) (res (= 0 0) (refl 0) (let ((.cse67 (+ 0 .cse66)) (.cse68 (+ 0 (- 1)))) (res (= .cse67 .cse68) (cong (+ 0 .cse66) (+ 0 (- 1))) (res (= .cse65 .cse67) (-def 0 1) (res (= .cse68 (- 1)) (poly+ .cse68 (- 1)) (trans .cse65 .cse67 .cse68 (- 1))))))))) (res (= .cse69 .cse69) (refl .cse69) (cong (= .cse69 .cse65) (= .cse69 (- 1))))) (cong (=> .cse63 .cse58) (=> .cse64 .cse57)))))) (.cse45 (let ((.cse53 (< 0 .cse54))) (res .cse53 (total .cse54 0) (farkas 1 .cse43 1 .cse53)))) (.cse44 (total 0 x)) (.cse42 (farkas 1 .cse40 1 .cse41))) (res (= .cse17 .cse5) (res (= .cse18 .cse6) (res (= .cse19 .cse7) (res .cse20 .cse21 (res (= .cse22 .cse23) (res (= .cse24 .cse24) (refl .cse24) (res (= .cse25 .cse26) (res (= .cse27 .cse28) (res (= .cse29 .cse30) (let ((.cse31 (* (- 1) 5))) (res (= .cse31 (- 5)) (poly* .cse31 (- 5)) (res (= y@1 y@1) (refl y@1) (let ((.cse32 (+ y@1 .cse31))) (res (= .cse32 .cse30) (cong (+ y@1 .cse31) (+ y@1 (- 5))) (res (= .cse29 .cse32) (-def y@1 5) (trans .cse29 .cse32 .cse30))))))) (res (= y@2 y@2) (refl y@2) (cong (= y@2 .cse29) (= y@2 .cse30)))) (res (= .cse33 .cse33) (refl .cse33) (cong (and .cse33 .cse27) (and .cse33 .cse28)))) (cong (and .cse25 .cse24) (and .cse26 .cse24)))) (cong (=> .cse22 .cse34) (=> .cse23 .cse3)))) (res (= .cse35 .cse36) (res (= .cse37 .cse37) (refl .cse37) (let ((.cse38 (= .cse40 .cse39))) (res .cse38 (res .cse39 (res .cse40 (=+1 .cse38) (res .cse41 (not+ .cse39) .cse42)) (res .cse40 (res .cse43 .cse44 (res .cse41 .cse45 (not- .cse39))) (=+2 .cse38))) (cong (and .cse40 .cse37) (and .cse39 .cse37))))) (cong (=> .cse35 .cse19) (=> .cse36 .cse7)))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse18) (=> .cse46 .cse6)))) (res (= .cse47 .cse0) (res (= .cse48 .cse1) (res (= .cse49 .cse2) (res .cse20 .cse21 (res (= .cse50 .cse50) (refl .cse50) (cong (=> .cse50 .cse34) (=> .cse50 .cse3)))) (let ((.cse51 (= .cse43 .cse41))) (res .cse51 (res .cse41 (res .cse43 (=+1 .cse51) .cse45) (res .cse43 (res .cse40 .cse44 .cse42) (=+2 .cse51))) (cong (=> .cse43 .cse49) (=> .cse41 .cse2))))) (res (= .cse52 .cse52) (refl .cse52) (cong (=> .cse52 .cse48) (=> .cse52 .cse1)))) (cong (and .cse47 .cse17) (and .cse0 .cse5)))))) (res (= .cse70 .cse70) (refl .cse70) (cong (=> .cse70 .cse16) (=> .cse70 .cse8)))) (res (= .cse71 .cse71) (refl .cse71) (cong (=> .cse71 .cse15) (=> .cse71 .cse9)))) (cong (not .cse11) (not .cse10))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13)))))))))))))))))))))) :proves (- .cse0 - .cse5) :input))))))))))))))))) :proves () :rup)

