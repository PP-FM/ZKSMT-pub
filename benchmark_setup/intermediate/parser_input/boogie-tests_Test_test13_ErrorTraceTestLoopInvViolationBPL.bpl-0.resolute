unsat
(! (let ((.cse19 (ControlFlow 0 2))) (let ((.cse1 (= .cse19 (- 1))) (.cse0 (= (- 1) .cse19))) (let ((.cse22 (= .cse1 .cse0))) (let-proof ((.cse23 (res .cse0 (res .cse1 (=+1 .cse22) (symm (- 1) .cse19)) (res .cse1 (symm .cse19 (- 1)) (=+2 .cse22))))) (res .cse0 (! (res .cse1 (let ((.cse2 (=> .cse1 false))) (res .cse2 (=>+ 0 .cse2) (let ((.cse20 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse20 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse21 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse21 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse15 (- 0 1))) (let ((.cse14 (= .cse19 .cse15)) (.cse12 (= 0 1))) (let ((.cse10 (=> .cse14 .cse12))) (let ((.cse9 (=> .cse20 .cse10))) (let ((.cse5 (=> .cse21 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (let ((.cse11 (= .cse12 false))) (res .cse11 (res false (res .cse12 (=+1 .cse11) (let ((.cse13 (= 1 0))) (res .cse13 (symm 1 0) (farkas 1 .cse13)))) false-) (res (= .cse14 .cse1) (res (= .cse15 (- 1)) (let ((.cse16 (* (- 1) 1))) (res (= .cse16 (- 1)) (poly* .cse16 (- 1)) (res (= 0 0) (refl 0) (let ((.cse17 (+ 0 .cse16)) (.cse18 (+ 0 (- 1)))) (res (= .cse17 .cse18) (cong (+ 0 .cse16) (+ 0 (- 1))) (res (= .cse15 .cse17) (-def 0 1) (res (= .cse18 (- 1)) (poly+ .cse18 (- 1)) (trans .cse15 .cse17 .cse18 (- 1))))))))) (res (= .cse19 .cse19) (refl .cse19) (cong (= .cse19 .cse15) (= .cse19 (- 1))))) (cong (=> .cse14 .cse12) (=> .cse1 false))))) (res (= .cse20 .cse20) (refl .cse20) (cong (=> .cse20 .cse10) (=> .cse20 .cse2)))) (res (= .cse21 .cse21) (refl .cse21) (cong (=> .cse21 .cse9) (=> .cse21 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7))))))))))))))))) (res .cse22 .cse23 (=-2 .cse22))) :proves (+ .cse0) :input) (! (let ((.cse25 (not .cse1))) (res .cse1 (let ((.cse24 (not .cse0))) (res .cse24 (res .cse25 (not+ .cse25) (let ((.cse26 (= .cse25 .cse24))) (res .cse26 (res .cse22 .cse23 (cong (not .cse1) (not .cse0))) (=-2 .cse26)))) (not- .cse24))) (res .cse25 (assume .cse25) (not- .cse25)))) :proves (- .cse0) :input)))))) :proves () :rup)

