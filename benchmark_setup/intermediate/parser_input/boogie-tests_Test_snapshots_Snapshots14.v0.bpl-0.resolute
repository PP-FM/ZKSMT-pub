unsat
(! (res G (! (let ((.cse0 (and F G))) (res .cse0 (let ((.cse18 (ControlFlow 0 2))) (let ((.cse13 (= .cse18 (- 1)))) (let ((.cse1 (and .cse0 .cse13))) (res .cse1 (let ((.cse2 (=> .cse1 false))) (res .cse2 (=>+ 0 .cse2) (let ((.cse19 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse19 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse20 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse20 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse14 (- 0 1))) (let ((.cse12 (= .cse18 .cse14))) (let ((.cse11 (and .cse0 .cse12))) (let ((.cse10 (=> .cse11 false))) (let ((.cse9 (=> .cse19 .cse10))) (let ((.cse5 (=> .cse20 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (res (= false false) (refl false) (res (= .cse11 .cse1) (res (= .cse12 .cse13) (res (= .cse14 (- 1)) (let ((.cse15 (* (- 1) 1))) (res (= .cse15 (- 1)) (poly* .cse15 (- 1)) (res (= 0 0) (refl 0) (let ((.cse16 (+ 0 .cse15)) (.cse17 (+ 0 (- 1)))) (res (= .cse16 .cse17) (cong (+ 0 .cse15) (+ 0 (- 1))) (res (= .cse14 .cse16) (-def 0 1) (res (= .cse17 (- 1)) (poly+ .cse17 (- 1)) (trans .cse14 .cse16 .cse17 (- 1))))))))) (res (= .cse18 .cse18) (refl .cse18) (cong (= .cse18 .cse14) (= .cse18 (- 1))))) (res (= .cse0 .cse0) (refl .cse0) (cong (and .cse0 .cse12) (and .cse0 .cse13)))) (cong (=> .cse11 false) (=> .cse1 false)))) (res (= .cse19 .cse19) (refl .cse19) (cong (=> .cse19 .cse10) (=> .cse19 .cse2)))) (res (= .cse20 .cse20) (refl .cse20) (cong (=> .cse20 .cse9) (=> .cse20 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7)))))))))))))))))) (and- 0 .cse1))))) (and- 1 .cse0))) :proves (+ G) :input) (! (let ((.cse21 (= G false))) (res .cse21 (assume .cse21) (let ((.cse22 (not G))) (let-proof ((.cse24 (not- .cse22))) (res .cse22 (let ((.cse23 (= .cse21 .cse22))) (res .cse23 (res false (res .cse22 (res .cse21 (=+1 .cse23) (res G (not+ .cse22) (=-2 .cse21))) (res .cse21 (res G (=+1 .cse21) .cse24) (=+2 .cse23))) false-) (=-2 .cse23))) .cse24))))) :proves (- G) :input)) :proves () :rup)

