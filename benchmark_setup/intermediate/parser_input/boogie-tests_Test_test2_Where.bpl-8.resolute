unsat
(! (let ((.cse69 (ControlFlow 0 2))) (let ((.cse2 (= .cse69 (- 1))) (.cse0 (= (- 1) .cse69))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse69)) (res .cse2 (symm .cse69 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse58 (+ w@0 (- 10)))) (let ((.cse55 (<= .cse58 0))) (let ((.cse1 (=> .cse2 .cse55))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse5 (=> true .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse75 (= .cse69 (- 3)))) (let ((.cse6 (=> .cse75 true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (let ((.cse129 (* (- 1) x@0))) (let ((.cse12 (<= .cse129 0)) (.cse9 (and .cse6 .cse5))) (let ((.cse8 (=> .cse12 .cse9))) (res .cse8 (! (res .cse9 (and+ .cse9) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse5 - .cse6) :input) (! (let ((.cse85 (= .cse69 (- 4)))) (let ((.cse10 (=> .cse85 .cse12))) (let ((.cse28 (and .cse10 .cse8)) (.cse94 (= .cse69 (- 5))) (.cse31 (= w@0 x@0))) (let ((.cse30 (=> .cse94 .cse31)) (.cse27 (=> .cse31 .cse28)) (.cse130 (ControlFlow 0 7))) (let ((.cse99 (= .cse130 2)) (.cse32 (and .cse30 .cse27))) (let ((.cse29 (=> .cse99 .cse32)) (.cse33 (=> (= .cse130 6) true))) (let ((.cse20 (and .cse31 .cse12)) (.cse34 (and .cse29 .cse33))) (let ((.cse23 (< 0 .cse129)) (.cse35 (=> .cse20 .cse34))) (let-proof ((.cse24 (total .cse129 0))) (let-proof ((.cse36 (let ((.cse115 (+ x (* (- 1) y))) (.cse125 (* (- 1) x))) (let ((.cse122 (<= .cse125 0)) (.cse112 (<= .cse115 0))) (let ((.cse108 (and .cse112 true)) (.cse106 (= (ControlFlow 0 8) 7)) (.cse127 (and (= w x) true)) (.cse120 (and .cse122 true))) (let ((.cse118 (and .cse127 .cse120)) (.cse105 (and .cse108 .cse106))) (let ((.cse103 (and .cse118 .cse105))) (let ((.cse37 (=> .cse103 .cse35))) (res .cse37 (=>+ 1 .cse37) (let ((.cse128 (= (ControlFlow 0 0) 8))) (let ((.cse38 (=> .cse128 .cse37))) (res .cse38 (=>+ 1 .cse38) (let ((.cse61 (- 0 1))) (let ((.cse76 (- 0 3)) (.cse60 (= .cse69 .cse61)) (.cse56 (<= w@0 10))) (let ((.cse53 (=> .cse60 .cse56)) (.cse74 (= .cse69 .cse76)) (.cse72 (= 10 10))) (let ((.cse86 (- 0 4)) (.cse73 (=> .cse74 .cse72)) (.cse52 (=> .cse72 .cse53))) (let ((.cse51 (and .cse73 .cse52)) (.cse84 (= .cse69 .cse86)) (.cse82 (<= 0 x@0))) (let ((.cse95 (- 0 5)) (.cse83 (=> .cse84 .cse82)) (.cse50 (=> .cse82 .cse51))) (let ((.cse49 (and .cse83 .cse50)) (.cse93 (= .cse69 .cse95))) (let ((.cse92 (=> .cse93 .cse31)) (.cse48 (=> .cse31 .cse49))) (let ((.cse47 (and .cse92 .cse48)) (.cse123 (<= 0 x)) (.cse113 (<= x y))) (let ((.cse107 (and .cse113 true)) (.cse119 (and .cse123 true)) (.cse46 (=> .cse99 .cse47))) (let ((.cse100 (and .cse31 .cse82)) (.cse45 (and .cse46 .cse33)) (.cse117 (and .cse127 .cse119)) (.cse104 (and .cse107 .cse106))) (let ((.cse102 (and .cse117 .cse104)) (.cse44 (=> .cse100 .cse45))) (let ((.cse43 (=> .cse102 .cse44))) (let ((.cse39 (=> .cse128 .cse43))) (let ((.cse41 (not .cse39))) (res .cse39 (let ((.cse40 (not .cse38))) (res .cse40 (res .cse41 (not+ .cse41) (let ((.cse42 (= .cse41 .cse40))) (res .cse42 (res (= .cse39 .cse38) (res (= .cse43 .cse37) (res (= .cse44 .cse35) (let ((.cse80 (= .cse82 .cse12))) (let ((.cse90 (= .cse31 .cse31))) (let-proof ((.cse81 (res .cse12 (res .cse82 (=+1 .cse80) (res .cse23 .cse24 (farkas 1 .cse82 1 .cse23))) (res .cse82 (let ((.cse101 (< x@0 0))) (res .cse101 (total 0 x@0) (farkas 1 .cse101 1 .cse12))) (=+2 .cse80)))) (.cse91 (refl .cse31))) (res (= .cse45 .cse34) (res (= .cse33 .cse33) (refl .cse33) (res (= .cse46 .cse29) (res (= .cse47 .cse32) (let ((.cse63 (= 0 0)) (.cse67 (= .cse69 .cse69))) (let-proof ((.cse64 (refl 0)) (.cse68 (refl .cse69))) (res (= .cse48 .cse27) (res (= .cse49 .cse28) (res (= .cse50 .cse8) (res (= .cse51 .cse9) (let ((.cse70 (= .cse72 true))) (let-proof ((.cse71 (res true .cse7 (res .cse72 (refl 10) (=+2 .cse70))))) (res (= .cse52 .cse5) (res (= .cse53 .cse1) (let ((.cse54 (= .cse56 .cse55))) (res .cse54 (res .cse55 (res .cse56 (=+1 .cse54) (let ((.cse57 (< 0 .cse58))) (res .cse57 (total .cse58 0) (farkas 1 .cse56 1 .cse57)))) (res .cse56 (let ((.cse59 (< 10 w@0))) (res .cse59 (total w@0 10) (farkas 1 .cse59 1 .cse55))) (=+2 .cse54))) (res (= .cse60 .cse2) (res (= .cse61 (- 1)) (let ((.cse62 (* (- 1) 1))) (res (= .cse62 (- 1)) (poly* .cse62 (- 1)) (res .cse63 .cse64 (let ((.cse65 (+ 0 .cse62)) (.cse66 (+ 0 (- 1)))) (res (= .cse65 .cse66) (cong (+ 0 .cse62) (+ 0 (- 1))) (res (= .cse61 .cse65) (-def 0 1) (res (= .cse66 (- 1)) (poly+ .cse66 (- 1)) (trans .cse61 .cse65 .cse66 (- 1))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse61) (= .cse69 (- 1))))) (cong (=> .cse60 .cse56) (=> .cse2 .cse55))))) (res .cse70 .cse71 (cong (=> .cse72 .cse53) (=> true .cse1)))) (res (= .cse73 .cse6) (res .cse70 .cse71 (res (= .cse74 .cse75) (res (= .cse76 (- 3)) (let ((.cse77 (* (- 1) 3))) (res (= .cse77 (- 3)) (poly* .cse77 (- 3)) (res .cse63 .cse64 (let ((.cse78 (+ 0 .cse77)) (.cse79 (+ 0 (- 3)))) (res (= .cse78 .cse79) (cong (+ 0 .cse77) (+ 0 (- 3))) (res (= .cse76 .cse78) (-def 0 3) (res (= .cse79 (- 3)) (poly+ .cse79 (- 3)) (trans .cse76 .cse78 .cse79 (- 3))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse76) (= .cse69 (- 3))))) (cong (=> .cse74 .cse72) (=> .cse75 true)))) (cong (and .cse73 .cse52) (and .cse6 .cse5)))))) (res .cse80 .cse81 (cong (=> .cse82 .cse51) (=> .cse12 .cse9)))) (res (= .cse83 .cse10) (res .cse80 .cse81 (res (= .cse84 .cse85) (res (= .cse86 (- 4)) (let ((.cse87 (* (- 1) 4))) (res (= .cse87 (- 4)) (poly* .cse87 (- 4)) (res .cse63 .cse64 (let ((.cse88 (+ 0 .cse87)) (.cse89 (+ 0 (- 4)))) (res (= .cse88 .cse89) (cong (+ 0 .cse87) (+ 0 (- 4))) (res (= .cse86 .cse88) (-def 0 4) (res (= .cse89 (- 4)) (poly+ .cse89 (- 4)) (trans .cse86 .cse88 .cse89 (- 4))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse86) (= .cse69 (- 4))))) (cong (=> .cse84 .cse82) (=> .cse85 .cse12)))) (cong (and .cse83 .cse50) (and .cse10 .cse8)))) (res .cse90 .cse91 (cong (=> .cse31 .cse49) (=> .cse31 .cse28)))) (res (= .cse92 .cse30) (res .cse90 .cse91 (res (= .cse93 .cse94) (res (= .cse95 (- 5)) (let ((.cse96 (* (- 1) 5))) (res (= .cse96 (- 5)) (poly* .cse96 (- 5)) (res .cse63 .cse64 (let ((.cse97 (+ 0 .cse96)) (.cse98 (+ 0 (- 5)))) (res (= .cse97 .cse98) (cong (+ 0 .cse96) (+ 0 (- 5))) (res (= .cse95 .cse97) (-def 0 5) (res (= .cse98 (- 5)) (poly+ .cse98 (- 5)) (trans .cse95 .cse97 .cse98 (- 5))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse95) (= .cse69 (- 5))))) (cong (=> .cse93 .cse31) (=> .cse94 .cse31)))) (cong (and .cse92 .cse48) (and .cse30 .cse27)))))) (res (= .cse99 .cse99) (refl .cse99) (cong (=> .cse99 .cse47) (=> .cse99 .cse32)))) (cong (and .cse46 .cse33) (and .cse29 .cse33)))) (res (= .cse100 .cse20) (res .cse80 .cse81 (res .cse90 .cse91 (cong (and .cse31 .cse82) (and .cse31 .cse12)))) (cong (=> .cse100 .cse45) (=> .cse20 .cse34))))))) (res (= .cse102 .cse103) (let ((.cse109 (= true true))) (let-proof ((.cse110 (refl true))) (res (= .cse104 .cse105) (res (= .cse106 .cse106) (refl .cse106) (res (= .cse107 .cse108) (res .cse109 .cse110 (let ((.cse111 (= .cse113 .cse112))) (res .cse111 (res .cse112 (res .cse113 (=+1 .cse111) (let ((.cse114 (< 0 .cse115))) (res .cse114 (total .cse115 0) (farkas 1 .cse113 1 .cse114)))) (res .cse113 (let ((.cse116 (< y x))) (res .cse116 (total x y) (farkas 1 .cse116 1 .cse112))) (=+2 .cse111))) (cong (and .cse113 true) (and .cse112 true))))) (cong (and .cse107 .cse106) (and .cse108 .cse106)))) (res (= .cse117 .cse118) (res (= .cse119 .cse120) (res .cse109 .cse110 (let ((.cse121 (= .cse123 .cse122))) (res .cse121 (res .cse122 (res .cse123 (=+1 .cse121) (let ((.cse124 (< 0 .cse125))) (res .cse124 (total .cse125 0) (farkas 1 .cse123 1 .cse124)))) (res .cse123 (let ((.cse126 (< x 0))) (res .cse126 (total 0 x) (farkas 1 .cse126 1 .cse122))) (=+2 .cse121))) (cong (and .cse123 true) (and .cse122 true))))) (res (= .cse127 .cse127) (refl .cse127) (cong (and .cse127 .cse119) (and .cse127 .cse120)))) (cong (and .cse117 .cse104) (and .cse118 .cse105)))))) (cong (=> .cse102 .cse44) (=> .cse103 .cse35)))) (res (= .cse128 .cse128) (refl .cse128) (cong (=> .cse128 .cse43) (=> .cse128 .cse37)))) (cong (not .cse39) (not .cse38))) (=-2 .cse42)))) (not- .cse40))) (res .cse41 (assume .cse41) (not- .cse41)))))))))))))))))))))))))))))) (let-proof ((.cse21 (res .cse35 (=>+ 0 .cse35) .cse36))) (res .cse10 (! (let ((.cse26 (+ x@0 1))) (let ((.cse11 (<= .cse26 0))) (let ((.cse13 (not .cse11))) (let ((.cse18 (= .cse12 .cse13))) (let-proof ((.cse14 (not+ .cse13)) (.cse22 (not- .cse13))) (let-proof ((.cse19 (res .cse13 (res .cse12 (=+1 .cse18) (res .cse11 .cse14 (farkas 1 .cse12 1 .cse11))) (res .cse12 (res .cse23 .cse24 (res .cse11 (let ((.cse25 (<= 1 .cse26))) (res .cse25 (total-int .cse26 0) (farkas 1 .cse23 1 .cse25))) .cse22)) (=+2 .cse18))))) (res .cse11 (! (res .cse12 (res .cse13 .cse14 (let ((.cse15 (not .cse13))) (res .cse15 (let ((.cse16 (not .cse12))) (res .cse16 (not+ .cse16) (let ((.cse17 (= .cse16 .cse15))) (res .cse17 (res .cse18 .cse19 (cong (not .cse12) (not .cse13))) (=-2 .cse17))))) (not- .cse15)))) (=>+ 1 .cse10)) :proves (+ .cse10 + .cse11) :input) (! (res .cse12 (res .cse20 .cse21 (and- 1 .cse20)) (res .cse13 (res .cse18 .cse19 (=-2 .cse18)) .cse22)) :proves (- .cse11) :input)))))))) :proves (+ .cse10) :rup) (res .cse27 (! (res .cse28 (and+ .cse28) (=>+ 1 .cse27)) :proves (+ .cse27 - .cse8 - .cse10) :input) (! (res .cse29 (res .cse30 (! (res .cse31 (! (res .cse20 .cse21 (and- 0 .cse20)) :proves (+ .cse31) :input) (! (=>+ 1 .cse30) :proves (+ .cse30 - .cse31) :input)) :proves (+ .cse30) :rup) (! (res .cse32 (and+ .cse32) (=>+ 1 .cse29)) :proves (- .cse27 - .cse30 + .cse29) :input)) (! (res .cse33 (! (res true .cse7 (=>+ 1 .cse33)) :proves (+ .cse33) :input) (! (res .cse34 (and+ .cse34) (res .cse35 (=>+ 1 .cse35) .cse36)) :proves (- .cse29 - .cse33) :input)) :proves (- .cse29) :rup)) :proves (- .cse27) :rup)))))))))))))) :proves (- .cse8) :rup))))))))) :proves (- .cse5) :rup))) :proves (- .cse1) :rup))))) :proves (+ .cse0) :rup) (! (let ((.cse132 (not .cse2))) (res .cse2 (let ((.cse131 (not .cse0))) (res .cse131 (res .cse132 (not+ .cse132) (let ((.cse133 (= .cse132 .cse131))) (res .cse133 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse133)))) (not- .cse131))) (res .cse132 (assume .cse132) (not- .cse132)))) :proves (- .cse0) :input)))))) :proves () :rup)

