unsat
(! (let ((.cse76 (ControlFlow 0 2))) (let ((.cse2 (= .cse76 (- 1))) (.cse0 (= (- 1) .cse76))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse76)) (res .cse2 (symm .cse76 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse66 (= x@1 7))) (let ((.cse1 (=> .cse2 .cse66))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse95 (+ x@1 (* (- 1) y@1))) (.cse139 (* (- 1) x@1))) (let ((.cse12 (<= .cse139 0)) (.cse8 (<= .cse95 0))) (let ((.cse20 (and .cse12 .cse8))) (let ((.cse5 (=> .cse20 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse82 (= .cse76 (- 3)))) (let ((.cse7 (=> .cse82 .cse20))) (let ((.cse9 (and .cse8 .cse12)) (.cse27 (and .cse7 .cse5))) (let ((.cse22 (< 0 .cse139)) (.cse6 (=> .cse9 .cse27))) (let-proof ((.cse23 (total .cse139 0))) (let-proof ((.cse26 (! (let ((.cse111 (+ x@0 (* (- 1) y@0))) (.cse138 (* (- 1) x@0))) (let ((.cse34 (<= .cse138 0)) (.cse30 (<= .cse111 0))) (let ((.cse31 (and .cse34 .cse30))) (let ((.cse28 (=> .cse31 .cse6))) (res .cse28 (! (=>+ 1 .cse28) :proves (+ .cse28 - .cse6) :input) (! (let ((.cse103 (= .cse76 (- 4)))) (let ((.cse29 (=> .cse103 .cse31))) (let ((.cse49 (and .cse29 .cse28))) (let ((.cse43 (< 0 .cse138)) (.cse47 (=> .cse31 .cse49))) (let-proof ((.cse44 (total .cse138 0))) (let-proof ((.cse48 (let ((.cse127 (+ x (* (- 1) y)))) (let ((.cse124 (<= .cse127 0))) (let ((.cse120 (and .cse124 true)) (.cse118 (= (ControlFlow 0 5) 2))) (let ((.cse117 (and .cse120 .cse118))) (let ((.cse50 (=> .cse117 .cse47))) (res .cse50 (=>+ 1 .cse50) (let ((.cse135 (* (- 1) x))) (let ((.cse132 (<= .cse135 0))) (let ((.cse130 (and .cse132 true))) (let ((.cse51 (=> .cse130 .cse50))) (res .cse51 (=>+ 1 .cse51) (let ((.cse137 (= (ControlFlow 0 0) 5))) (let ((.cse52 (=> .cse137 .cse51))) (res .cse52 (=>+ 1 .cse52) (let ((.cse68 (- 0 1))) (let ((.cse91 (<= 0 x@1)) (.cse92 (<= x@1 y@1)) (.cse83 (- 0 3)) (.cse67 (= .cse76 .cse68))) (let ((.cse65 (=> .cse67 .cse66)) (.cse81 (= .cse76 .cse83)) (.cse79 (and .cse91 .cse92))) (let ((.cse80 (=> .cse81 .cse79)) (.cse64 (=> .cse79 .cse65))) (let ((.cse114 (<= 0 x@0)) (.cse109 (<= x@0 y@0)) (.cse104 (- 0 4)) (.cse93 (and .cse92 .cse91)) (.cse63 (and .cse80 .cse64))) (let ((.cse62 (=> .cse93 .cse63)) (.cse102 (= .cse76 .cse104)) (.cse100 (and .cse114 .cse109))) (let ((.cse125 (<= x y)) (.cse101 (=> .cse102 .cse100)) (.cse61 (=> .cse100 .cse62))) (let ((.cse60 (and .cse101 .cse61)) (.cse119 (and .cse125 true))) (let ((.cse116 (and .cse119 .cse118)) (.cse59 (=> .cse100 .cse60)) (.cse133 (<= 0 x))) (let ((.cse129 (and .cse133 true)) (.cse58 (=> .cse116 .cse59))) (let ((.cse57 (=> .cse129 .cse58))) (let ((.cse53 (=> .cse137 .cse57))) (let ((.cse55 (not .cse53))) (res .cse53 (let ((.cse54 (not .cse52))) (res .cse54 (res .cse55 (not+ .cse55) (let ((.cse56 (= .cse55 .cse54))) (res .cse56 (res (= .cse53 .cse52) (res (= .cse57 .cse51) (let ((.cse121 (= true true))) (let-proof ((.cse122 (refl true))) (res (= .cse58 .cse50) (res (= .cse59 .cse47) (let ((.cse98 (= .cse100 .cse31))) (let-proof ((.cse99 (let ((.cse108 (= .cse109 .cse30))) (res .cse108 (res .cse30 (res .cse109 (=+1 .cse108) (let ((.cse110 (< 0 .cse111))) (res .cse110 (total .cse111 0) (farkas 1 .cse109 1 .cse110)))) (res .cse109 (let ((.cse112 (< y@0 x@0))) (res .cse112 (total x@0 y@0) (farkas 1 .cse112 1 .cse30))) (=+2 .cse108))) (let ((.cse113 (= .cse114 .cse34))) (res .cse113 (res .cse34 (res .cse114 (=+1 .cse113) (res .cse43 .cse44 (farkas 1 .cse114 1 .cse43))) (res .cse114 (let ((.cse115 (< x@0 0))) (res .cse115 (total 0 x@0) (farkas 1 .cse115 1 .cse34))) (=+2 .cse113))) (cong (and .cse114 .cse109) (and .cse34 .cse30)))))))) (res (= .cse60 .cse49) (let ((.cse70 (= 0 0)) (.cse74 (= .cse76 .cse76))) (let-proof ((.cse71 (refl 0)) (.cse75 (refl .cse76))) (res (= .cse61 .cse28) (res (= .cse62 .cse6) (let ((.cse87 (= .cse92 .cse8)) (.cse89 (= .cse91 .cse12))) (let-proof ((.cse90 (res .cse12 (res .cse91 (=+1 .cse89) (res .cse22 .cse23 (farkas 1 .cse91 1 .cse22))) (res .cse91 (let ((.cse97 (< x@1 0))) (res .cse97 (total 0 x@1) (farkas 1 .cse97 1 .cse12))) (=+2 .cse89)))) (.cse88 (res .cse8 (res .cse92 (=+1 .cse87) (let ((.cse94 (< 0 .cse95))) (res .cse94 (total .cse95 0) (farkas 1 .cse92 1 .cse94)))) (res .cse92 (let ((.cse96 (< y@1 x@1))) (res .cse96 (total x@1 y@1) (farkas 1 .cse96 1 .cse8))) (=+2 .cse87))))) (res (= .cse63 .cse27) (let ((.cse77 (= .cse79 .cse20))) (let-proof ((.cse78 (res .cse87 .cse88 (res .cse89 .cse90 (cong (and .cse91 .cse92) (and .cse12 .cse8)))))) (res (= .cse64 .cse5) (res (= .cse65 .cse1) (res (= .cse66 .cse66) (refl .cse66) (res (= .cse67 .cse2) (res (= .cse68 (- 1)) (let ((.cse69 (* (- 1) 1))) (res (= .cse69 (- 1)) (poly* .cse69 (- 1)) (res .cse70 .cse71 (let ((.cse72 (+ 0 .cse69)) (.cse73 (+ 0 (- 1)))) (res (= .cse72 .cse73) (cong (+ 0 .cse69) (+ 0 (- 1))) (res (= .cse68 .cse72) (-def 0 1) (res (= .cse73 (- 1)) (poly+ .cse73 (- 1)) (trans .cse68 .cse72 .cse73 (- 1))))))))) (res .cse74 .cse75 (cong (= .cse76 .cse68) (= .cse76 (- 1))))) (cong (=> .cse67 .cse66) (=> .cse2 .cse66)))) (res .cse77 .cse78 (cong (=> .cse79 .cse65) (=> .cse20 .cse1)))) (res (= .cse80 .cse7) (res .cse77 .cse78 (res (= .cse81 .cse82) (res (= .cse83 (- 3)) (let ((.cse84 (* (- 1) 3))) (res (= .cse84 (- 3)) (poly* .cse84 (- 3)) (res .cse70 .cse71 (let ((.cse85 (+ 0 .cse84)) (.cse86 (+ 0 (- 3)))) (res (= .cse85 .cse86) (cong (+ 0 .cse84) (+ 0 (- 3))) (res (= .cse83 .cse85) (-def 0 3) (res (= .cse86 (- 3)) (poly+ .cse86 (- 3)) (trans .cse83 .cse85 .cse86 (- 3))))))))) (res .cse74 .cse75 (cong (= .cse76 .cse83) (= .cse76 (- 3))))) (cong (=> .cse81 .cse79) (=> .cse82 .cse20)))) (cong (and .cse80 .cse64) (and .cse7 .cse5)))))) (res (= .cse93 .cse9) (res .cse89 .cse90 (res .cse87 .cse88 (cong (and .cse92 .cse91) (and .cse8 .cse12)))) (cong (=> .cse93 .cse63) (=> .cse9 .cse27)))))) (res .cse98 .cse99 (cong (=> .cse100 .cse62) (=> .cse31 .cse6)))) (res (= .cse101 .cse29) (res .cse98 .cse99 (res (= .cse102 .cse103) (res (= .cse104 (- 4)) (let ((.cse105 (* (- 1) 4))) (res (= .cse105 (- 4)) (poly* .cse105 (- 4)) (res .cse70 .cse71 (let ((.cse106 (+ 0 .cse105)) (.cse107 (+ 0 (- 4)))) (res (= .cse106 .cse107) (cong (+ 0 .cse105) (+ 0 (- 4))) (res (= .cse104 .cse106) (-def 0 4) (res (= .cse107 (- 4)) (poly+ .cse107 (- 4)) (trans .cse104 .cse106 .cse107 (- 4))))))))) (res .cse74 .cse75 (cong (= .cse76 .cse104) (= .cse76 (- 4))))) (cong (=> .cse102 .cse100) (=> .cse103 .cse31)))) (cong (and .cse101 .cse61) (and .cse29 .cse28)))))) (res .cse98 .cse99 (cong (=> .cse100 .cse60) (=> .cse31 .cse49)))))) (res (= .cse116 .cse117) (res (= .cse118 .cse118) (refl .cse118) (res (= .cse119 .cse120) (res .cse121 .cse122 (let ((.cse123 (= .cse125 .cse124))) (res .cse123 (res .cse124 (res .cse125 (=+1 .cse123) (let ((.cse126 (< 0 .cse127))) (res .cse126 (total .cse127 0) (farkas 1 .cse125 1 .cse126)))) (res .cse125 (let ((.cse128 (< y x))) (res .cse128 (total x y) (farkas 1 .cse128 1 .cse124))) (=+2 .cse123))) (cong (and .cse125 true) (and .cse124 true))))) (cong (and .cse119 .cse118) (and .cse120 .cse118)))) (cong (=> .cse116 .cse59) (=> .cse117 .cse47)))) (res (= .cse129 .cse130) (res .cse121 .cse122 (let ((.cse131 (= .cse133 .cse132))) (res .cse131 (res .cse132 (res .cse133 (=+1 .cse131) (let ((.cse134 (< 0 .cse135))) (res .cse134 (total .cse135 0) (farkas 1 .cse133 1 .cse134)))) (res .cse133 (let ((.cse136 (< x 0))) (res .cse136 (total 0 x) (farkas 1 .cse136 1 .cse132))) (=+2 .cse131))) (cong (and .cse133 true) (and .cse132 true))))) (cong (=> .cse129 .cse58) (=> .cse130 .cse50)))))) (res (= .cse137 .cse137) (refl .cse137) (cong (=> .cse137 .cse57) (=> .cse137 .cse51)))) (cong (not .cse53) (not .cse52))) (=-2 .cse56)))) (not- .cse54))) (res .cse55 (assume .cse55) (not- .cse55)))))))))))))))))))))))))))))))) (res .cse29 (! (let-proof ((.cse32 (! (res .cse47 (=>+ 0 .cse47) .cse48) :proves (+ .cse31) :input))) (res .cse30 (! (res .cse31 .cse32 (! (and- 1 .cse31) :proves (- .cse31 + .cse30) :input)) :proves (+ .cse30) :rup) (let ((.cse46 (+ x@0 1))) (let ((.cse33 (<= .cse46 0))) (let ((.cse35 (not .cse33))) (let ((.cse40 (= .cse34 .cse35))) (let-proof ((.cse36 (not+ .cse35)) (.cse42 (not- .cse35))) (let-proof ((.cse41 (res .cse35 (res .cse34 (=+1 .cse40) (res .cse33 .cse36 (farkas 1 .cse34 1 .cse33))) (res .cse34 (res .cse43 .cse44 (res .cse33 (let ((.cse45 (<= 1 .cse46))) (res .cse45 (total-int .cse46 0) (farkas 1 .cse43 1 .cse45))) .cse42)) (=+2 .cse40))))) (res .cse33 (! (res .cse34 (res .cse35 .cse36 (let ((.cse37 (not .cse35))) (res .cse37 (let ((.cse38 (not .cse34))) (res .cse38 (not+ .cse38) (let ((.cse39 (= .cse38 .cse37))) (res .cse39 (res .cse40 .cse41 (cong (not .cse34) (not .cse35))) (=-2 .cse39))))) (not- .cse37)))) (res .cse31 (and+ .cse31) (=>+ 1 .cse29))) :proves (+ .cse29 + .cse33 - .cse30) :input) (! (res .cse31 .cse32 (! (res .cse34 (and- 0 .cse31) (res .cse35 (res .cse40 .cse41 (=-2 .cse40)) .cse42)) :proves (- .cse31 - .cse33) :input)) :proves (- .cse33) :rup)))))))))) :proves (+ .cse29) :rup) (! (res .cse49 (and+ .cse49) (res .cse47 (=>+ 1 .cse47) .cse48)) :proves (- .cse29 - .cse28) :input)))))))) :proves (- .cse28) :rup)))))) :proves (- .cse6) :rup))) (res .cse6 (res .cse7 (! (let-proof ((.cse10 (! (res .cse6 (! (=>+ 0 .cse6) :proves (+ .cse6 + .cse9) :input) .cse26) :proves (+ .cse9) :rup))) (res .cse8 (! (res .cse9 .cse10 (! (and- 0 .cse9) :proves (- .cse9 + .cse8) :input)) :proves (+ .cse8) :rup) (let ((.cse25 (+ x@1 1))) (let ((.cse11 (<= .cse25 0))) (let ((.cse13 (not .cse11))) (let ((.cse18 (= .cse12 .cse13))) (let-proof ((.cse14 (not+ .cse13)) (.cse21 (not- .cse13))) (let-proof ((.cse19 (res .cse13 (res .cse12 (=+1 .cse18) (res .cse11 .cse14 (farkas 1 .cse12 1 .cse11))) (res .cse12 (res .cse22 .cse23 (res .cse11 (let ((.cse24 (<= 1 .cse25))) (res .cse24 (total-int .cse25 0) (farkas 1 .cse22 1 .cse24))) .cse21)) (=+2 .cse18))))) (res .cse11 (! (res .cse12 (res .cse13 .cse14 (let ((.cse15 (not .cse13))) (res .cse15 (let ((.cse16 (not .cse12))) (res .cse16 (not+ .cse16) (let ((.cse17 (= .cse16 .cse15))) (res .cse17 (res .cse18 .cse19 (cong (not .cse12) (not .cse13))) (=-2 .cse17))))) (not- .cse15)))) (res .cse20 (and+ .cse20) (=>+ 1 .cse7))) :proves (+ .cse7 + .cse11 - .cse8) :input) (! (res .cse9 .cse10 (! (res .cse12 (and- 1 .cse9) (res .cse13 (res .cse18 .cse19 (=-2 .cse18)) .cse21)) :proves (- .cse9 - .cse11) :input)) :proves (- .cse11) :rup)))))))))) :proves (+ .cse7) :rup) (! (res .cse27 (and+ .cse27) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) .cse26))))))) :proves (- .cse5) :rup)))))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse141 (not .cse2))) (res .cse2 (let ((.cse140 (not .cse0))) (res .cse140 (res .cse141 (not+ .cse141) (let ((.cse142 (= .cse141 .cse140))) (res .cse142 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse142)))) (not- .cse140))) (res .cse141 (assume .cse141) (not- .cse141)))) :proves (- .cse0) :input)))))) :proves () :rup)

