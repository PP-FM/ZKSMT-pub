unsat
(! (let ((.cse0 (=> c d))) (let ((.cse2 (xor c d)) (.cse41 (ControlFlow 0 2)) (.cse13 (xor y@0 .cse0))) (let ((.cse16 (not .cse13)) (.cse36 (= .cse41 (- 1))) (.cse59 (and c d)) (.cse6 (xor x@0 .cse2))) (let ((.cse10 (not .cse6)) (.cse58 (xor b@1 .cse59)) (.cse15 (and .cse16 .cse36))) (let ((.cse4 (and .cse15 x@0)) (.cse60 (not .cse58)) (.cse12 (not .cse10))) (let ((.cse7 (and .cse60 .cse12)) (.cse18 (=> .cse4 y@0))) (let ((.cse8 (=> .cse7 .cse18))) (let-proof ((.cse14 (xor+ (y@0 .cse0) (y@0) (.cse0))) (.cse17 (not- .cse16)) (.cse11 (not+ .cse10)) (.cse3 (xor+ (c d) (d) (c)))) (let-proof ((.cse9 (let ((.cse64 (or c d))) (let ((.cse63 (xor b@0 .cse64))) (let ((.cse65 (not .cse63))) (let ((.cse20 (=> .cse65 .cse8))) (res .cse20 (=>+ 1 .cse20) (let ((.cse66 (= (ControlFlow 0 3) 2))) (let ((.cse21 (=> .cse66 .cse20))) (res .cse21 (=>+ 1 .cse21) (let ((.cse67 (= (ControlFlow 0 0) 3))) (let ((.cse22 (=> .cse67 .cse21))) (res .cse22 (=>+ 1 .cse22) (let ((.cse37 (- 0 1))) (let ((.cse43 (= y@0 .cse0)) (.cse35 (= .cse41 .cse37))) (let ((.cse55 (= c d)) (.cse34 (and .cse43 .cse35))) (let ((.cse31 (and .cse34 x@0)) (.cse57 (= b@1 .cse59)) (.cse45 (= x@0 .cse55))) (let ((.cse44 (and .cse57 .cse45)) (.cse30 (=> .cse31 y@0))) (let ((.cse62 (= b@0 .cse64)) (.cse29 (=> .cse44 .cse30))) (let ((.cse28 (=> .cse62 .cse29))) (let ((.cse27 (=> .cse66 .cse28))) (let ((.cse23 (=> .cse67 .cse27))) (let ((.cse25 (not .cse23))) (res .cse23 (let ((.cse24 (not .cse22))) (res .cse24 (res .cse25 (not+ .cse25) (let ((.cse26 (= .cse25 .cse24))) (res .cse26 (res (= .cse23 .cse22) (res (= .cse27 .cse21) (res (= .cse28 .cse20) (res (= .cse29 .cse8) (let ((.cse32 (= x@0 x@0))) (let-proof ((.cse33 (refl x@0))) (res (= .cse30 .cse18) (res (= y@0 y@0) (refl y@0) (res (= .cse31 .cse4) (res .cse32 .cse33 (res (= .cse34 .cse15) (res (= .cse35 .cse36) (res (= .cse37 (- 1)) (let ((.cse38 (* (- 1) 1))) (res (= .cse38 (- 1)) (poly* .cse38 (- 1)) (res (= 0 0) (refl 0) (let ((.cse39 (+ 0 .cse38)) (.cse40 (+ 0 (- 1)))) (res (= .cse39 .cse40) (cong (+ 0 .cse38) (+ 0 (- 1))) (res (= .cse37 .cse39) (-def 0 1) (res (= .cse40 (- 1)) (poly+ .cse40 (- 1)) (trans .cse37 .cse39 .cse40 (- 1))))))))) (res (= .cse41 .cse41) (refl .cse41) (cong (= .cse41 .cse37) (= .cse41 (- 1))))) (let ((.cse42 (= .cse43 .cse16))) (res .cse42 (res .cse43 (res .cse13 (res y@0 (res .cse0 (=+1 .cse43) .cse14) (res .cse0 (xor+ (y@0 .cse0) (.cse0) (y@0)) (=+2 .cse43))) (res .cse16 (=+1 .cse42) .cse17)) (res .cse13 (res .cse16 (not+ .cse16) (=+2 .cse42)) (res y@0 (res .cse0 (xor+ (y@0) (.cse0) (y@0 .cse0)) (=-1 .cse43)) (res .cse0 (=-2 .cse43) (xor- (y@0) (.cse0) (y@0 .cse0)))))) (cong (and .cse43 .cse35) (and .cse16 .cse36))))) (cong (and .cse34 x@0) (and .cse15 x@0)))) (cong (=> .cse31 y@0) (=> .cse4 y@0)))) (res (= .cse44 .cse7) (res (= .cse45 .cse12) (let ((.cse49 (not .cse2))) (let ((.cse46 (= x@0 .cse49))) (let-proof ((.cse51 (not- .cse49)) (.cse50 (not+ .cse49))) (res (= .cse46 .cse12) (let ((.cse52 (xor x@0 .cse49))) (let ((.cse47 (not .cse52))) (res (= .cse47 .cse12) (let ((.cse48 (= .cse52 .cse10))) (res .cse48 (res (xor .cse49 .cse2) (res .cse2 (res .cse49 .cse50 (xor+ (.cse49 .cse2) (.cse2) (.cse49))) (res .cse49 (xor+ (.cse49 .cse2) (.cse49) (.cse2)) .cse51)) (res .cse52 (res .cse10 (=+1 .cse48) (res .cse6 (xor+ (x@0 .cse49) (x@0 .cse2) (.cse49 .cse2)) (not- .cse10))) (res .cse10 (res .cse6 .cse11 (xor- (x@0 .cse2) (.cse49 .cse2) (x@0 .cse49))) (=+2 .cse48)))) (cong (not .cse52) (not .cse10)))) (let ((.cse53 (= .cse46 .cse47))) (res .cse53 (res .cse46 (res .cse52 (res x@0 (res .cse49 (=+1 .cse46) (xor+ (x@0 .cse49) (x@0) (.cse49))) (res .cse49 (xor+ (x@0 .cse49) (.cse49) (x@0)) (=+2 .cse46))) (res .cse47 (=+1 .cse53) (not- .cse47))) (res .cse52 (res .cse47 (not+ .cse47) (=+2 .cse53)) (res x@0 (res .cse49 (xor+ (x@0) (.cse49) (x@0 .cse49)) (=-1 .cse46)) (res .cse49 (=-2 .cse46) (xor- (x@0) (.cse49) (x@0 .cse49)))))) (trans .cse46 .cse47 .cse12)))))) (res (= .cse45 .cse46) (let ((.cse54 (= .cse55 .cse49))) (res .cse54 (res .cse55 (res .cse2 (res c (res d (=+1 .cse55) (xor+ (c d) (c) (d))) (res d .cse3 (=+2 .cse55))) (res .cse49 (=+1 .cse54) .cse51)) (res .cse2 (res .cse49 .cse50 (=+2 .cse54)) (res c (res d (xor+ (c) (d) (c d)) (=-1 .cse55)) (res d (=-2 .cse55) (xor- (c) (d) (c d)))))) (res .cse32 .cse33 (cong (= x@0 .cse55) (= x@0 .cse49))))) (trans .cse45 .cse46 .cse12)))))) (let ((.cse56 (= .cse57 .cse60))) (res .cse56 (res .cse57 (res .cse58 (res b@1 (res .cse59 (=+1 .cse57) (xor+ (b@1 .cse59) (b@1) (.cse59))) (res .cse59 (xor+ (b@1 .cse59) (.cse59) (b@1)) (=+2 .cse57))) (res .cse60 (=+1 .cse56) (not- .cse60))) (res .cse58 (res .cse60 (not+ .cse60) (=+2 .cse56)) (res b@1 (res .cse59 (xor+ (b@1) (.cse59) (b@1 .cse59)) (=-1 .cse57)) (res .cse59 (=-2 .cse57) (xor- (b@1) (.cse59) (b@1 .cse59)))))) (cong (and .cse57 .cse45) (and .cse60 .cse12))))) (cong (=> .cse44 .cse30) (=> .cse7 .cse18)))))) (let ((.cse61 (= .cse62 .cse65))) (res .cse61 (res .cse62 (res .cse63 (res b@0 (res .cse64 (=+1 .cse62) (xor+ (b@0 .cse64) (b@0) (.cse64))) (res .cse64 (xor+ (b@0 .cse64) (.cse64) (b@0)) (=+2 .cse62))) (res .cse65 (=+1 .cse61) (not- .cse65))) (res .cse63 (res .cse65 (not+ .cse65) (=+2 .cse61)) (res b@0 (res .cse64 (xor+ (b@0) (.cse64) (b@0 .cse64)) (=-1 .cse62)) (res .cse64 (=-2 .cse62) (xor- (b@0) (.cse64) (b@0 .cse64)))))) (cong (=> .cse62 .cse29) (=> .cse65 .cse8))))) (res (= .cse66 .cse66) (refl .cse66) (cong (=> .cse66 .cse28) (=> .cse66 .cse20)))) (res (= .cse67 .cse67) (refl .cse67) (cong (=> .cse67 .cse27) (=> .cse67 .cse21)))) (cong (not .cse23) (not .cse22))) (=-2 .cse26)))) (not- .cse24))) (res .cse25 (assume .cse25) (not- .cse25)))))))))))))))))))))))))) (let-proof ((.cse19 (res .cse8 (=>+ 1 .cse8) .cse9))) (let-proof ((.cse5 (res .cse18 (=>+ 0 .cse18) .cse19))) (let-proof ((.cse1 (! (res y@0 (! (res .cse13 .cse14 (res .cse15 (res .cse4 .cse5 (and- 0 .cse4)) (res .cse16 (and- 0 .cse15) .cse17))) :proves (- .cse0 + y@0) :input) (! (res .cse18 (=>+ 1 .cse18) .cse19) :proves (- y@0) :input)) :proves (- .cse0) :rup))) (res c (! (res .cse0 (! (=>+ 0 .cse0) :proves (+ .cse0 + c) :input) .cse1) :proves (+ c) :rup) (res d (res .cse2 (! .cse3 :proves (+ .cse2 - c + d) :input) (! (res x@0 (! (res .cse4 .cse5 (and- 1 .cse4)) :proves (+ x@0) :input) (! (res .cse6 (res .cse7 (res .cse8 (=>+ 0 .cse8) .cse9) (res .cse10 .cse11 (res .cse12 (and- 1 .cse7) (not- .cse12)))) (xor- (x@0 .cse2) (x@0) (.cse2))) :proves (- .cse2 - x@0) :input)) :proves (- .cse2) :rup)) (! (res .cse0 (! (=>+ 1 .cse0) :proves (+ .cse0 - d) :input) .cse1) :proves (- d) :rup))))))))))))))) :proves () :rup)

