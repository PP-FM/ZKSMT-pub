unsat
(! (let ((.cse101 (ControlFlow 0 2))) (let ((.cse92 (= .cse101 (- 1)))) (let ((.cse34 (=> .cse92 true)) (.cse106 (= .cse101 (- 3))) (.cse38 (= z@0 7))) (let ((.cse36 (=> .cse106 .cse38)) (.cse33 (=> .cse38 .cse34))) (let ((.cse53 (and .cse36 .cse33)) (.cse115 (= .cse101 (- 4))) (.cse19 (= y@0 4))) (let ((.cse80 (= x@0 4)) (.cse5 (=> .cse115 .cse19)) (.cse3 (=> .cse19 .cse53))) (let ((.cse17 (and .cse19 (= (ControlFlow 0 6) 2))) (.cse7 (and .cse5 .cse3)) (.cse78 (and b .cse80)) (.cse16 (and .cse19 (= (ControlFlow 0 5) 2)))) (let ((.cse18 (and .cse78 .cse16)) (.cse71 (not b)) (.cse2 (=> .cse17 .cse7)) (.cse124 (ControlFlow 0 7))) (let ((.cse73 (= .cse124 6)) (.cse1 (=> .cse71 .cse2)) (.cse84 (= .cse124 5)) (.cse12 (=> .cse18 .cse7))) (let ((.cse11 (=> .cse84 .cse12)) (.cse0 (=> .cse73 .cse1))) (let ((.cse54 (and .cse11 .cse0))) (let ((.cse39 (=> .cse38 .cse54))) (let-proof ((.cse35 true+)) (let-proof ((.cse40 (let ((.cse122 (= (ControlFlow 0 8) 7))) (let ((.cse55 (=> .cse122 .cse39))) (res .cse55 (=>+ 1 .cse55) (let ((.cse123 (= (ControlFlow 0 0) 8))) (let ((.cse56 (=> .cse123 .cse55))) (res .cse56 (=>+ 1 .cse56) (let ((.cse93 (- 0 1))) (let ((.cse107 (- 0 3)) (.cse91 (= .cse101 .cse93)) (.cse90 (= true true))) (let ((.cse88 (=> .cse91 .cse90)) (.cse105 (= .cse101 .cse107))) (let ((.cse116 (- 0 4)) (.cse104 (=> .cse105 .cse38)) (.cse87 (=> .cse38 .cse88))) (let ((.cse86 (and .cse104 .cse87)) (.cse114 (= .cse101 .cse116)) (.cse81 (+ 3 1))) (let ((.cse83 (= b true)) (.cse79 (= x@0 .cse81)) (.cse113 (=> .cse114 .cse19)) (.cse85 (=> .cse19 .cse86))) (let ((.cse69 (and .cse113 .cse85)) (.cse77 (and .cse83 .cse79))) (let ((.cse76 (and .cse77 .cse16)) (.cse72 (= b false)) (.cse66 (=> .cse17 .cse69))) (let ((.cse65 (=> .cse72 .cse66)) (.cse75 (=> .cse76 .cse69))) (let ((.cse74 (=> .cse84 .cse75)) (.cse64 (=> .cse73 .cse65)) (.cse121 (+ 3 4))) (let ((.cse120 (= z@0 .cse121)) (.cse63 (and .cse74 .cse64))) (let ((.cse62 (=> .cse120 .cse63))) (let ((.cse61 (=> .cse122 .cse62))) (let ((.cse57 (=> .cse123 .cse61))) (let ((.cse59 (not .cse57))) (res .cse57 (let ((.cse58 (not .cse56))) (res .cse58 (res .cse59 (not+ .cse59) (let ((.cse60 (= .cse59 .cse58))) (res .cse60 (res (= .cse57 .cse56) (res (= .cse61 .cse55) (res (= .cse62 .cse39) (res (= .cse63 .cse54) (let ((.cse67 (= .cse69 .cse7))) (let-proof ((.cse68 (let ((.cse111 (= .cse19 .cse19)) (.cse95 (= 0 0)) (.cse99 (= .cse101 .cse101))) (let-proof ((.cse112 (refl .cse19)) (.cse96 (refl 0)) (.cse100 (refl .cse101))) (res (= .cse85 .cse3) (res (= .cse86 .cse53) (let ((.cse102 (= .cse38 .cse38))) (let-proof ((.cse103 (refl .cse38))) (res (= .cse87 .cse33) (res (= .cse88 .cse34) (let ((.cse89 (= .cse90 true))) (res .cse89 (res true .cse35 (res .cse90 (refl true) (=+2 .cse89))) (res (= .cse91 .cse92) (res (= .cse93 (- 1)) (let ((.cse94 (* (- 1) 1))) (res (= .cse94 (- 1)) (poly* .cse94 (- 1)) (res .cse95 .cse96 (let ((.cse97 (+ 0 .cse94)) (.cse98 (+ 0 (- 1)))) (res (= .cse97 .cse98) (cong (+ 0 .cse94) (+ 0 (- 1))) (res (= .cse93 .cse97) (-def 0 1) (res (= .cse98 (- 1)) (poly+ .cse98 (- 1)) (trans .cse93 .cse97 .cse98 (- 1))))))))) (res .cse99 .cse100 (cong (= .cse101 .cse93) (= .cse101 (- 1))))) (cong (=> .cse91 .cse90) (=> .cse92 true))))) (res .cse102 .cse103 (cong (=> .cse38 .cse88) (=> .cse38 .cse34)))) (res (= .cse104 .cse36) (res .cse102 .cse103 (res (= .cse105 .cse106) (res (= .cse107 (- 3)) (let ((.cse108 (* (- 1) 3))) (res (= .cse108 (- 3)) (poly* .cse108 (- 3)) (res .cse95 .cse96 (let ((.cse109 (+ 0 .cse108)) (.cse110 (+ 0 (- 3)))) (res (= .cse109 .cse110) (cong (+ 0 .cse108) (+ 0 (- 3))) (res (= .cse107 .cse109) (-def 0 3) (res (= .cse110 (- 3)) (poly+ .cse110 (- 3)) (trans .cse107 .cse109 .cse110 (- 3))))))))) (res .cse99 .cse100 (cong (= .cse101 .cse107) (= .cse101 (- 3))))) (cong (=> .cse105 .cse38) (=> .cse106 .cse38)))) (cong (and .cse104 .cse87) (and .cse36 .cse33)))))) (res .cse111 .cse112 (cong (=> .cse19 .cse86) (=> .cse19 .cse53)))) (res (= .cse113 .cse5) (res .cse111 .cse112 (res (= .cse114 .cse115) (res (= .cse116 (- 4)) (let ((.cse117 (* (- 1) 4))) (res (= .cse117 (- 4)) (poly* .cse117 (- 4)) (res .cse95 .cse96 (let ((.cse118 (+ 0 .cse117)) (.cse119 (+ 0 (- 4)))) (res (= .cse118 .cse119) (cong (+ 0 .cse117) (+ 0 (- 4))) (res (= .cse116 .cse118) (-def 0 4) (res (= .cse119 (- 4)) (poly+ .cse119 (- 4)) (trans .cse116 .cse118 .cse119 (- 4))))))))) (res .cse99 .cse100 (cong (= .cse101 .cse116) (= .cse101 (- 4))))) (cong (=> .cse114 .cse19) (=> .cse115 .cse19)))) (cong (and .cse113 .cse85) (and .cse5 .cse3)))))))) (res (= .cse64 .cse0) (res (= .cse65 .cse1) (res (= .cse66 .cse2) (res .cse67 .cse68 (res (= .cse17 .cse17) (refl .cse17) (cong (=> .cse17 .cse69) (=> .cse17 .cse7)))) (let ((.cse70 (= .cse72 .cse71))) (res .cse70 (res false (res .cse71 (res .cse72 (=+1 .cse70) (res b (not+ .cse71) (=-2 .cse72))) (res .cse72 (res b (=+1 .cse72) (not- .cse71)) (=+2 .cse70))) false-) (cong (=> .cse72 .cse66) (=> .cse71 .cse2))))) (res (= .cse73 .cse73) (refl .cse73) (cong (=> .cse73 .cse65) (=> .cse73 .cse1)))) (res (= .cse74 .cse11) (res (= .cse75 .cse12) (res .cse67 .cse68 (res (= .cse76 .cse18) (res (= .cse16 .cse16) (refl .cse16) (res (= .cse77 .cse78) (res (= .cse79 .cse80) (res (= .cse81 4) (poly+ .cse81 4) (res (= x@0 x@0) (refl x@0) (cong (= x@0 .cse81) (= x@0 4)))) (let ((.cse82 (= .cse83 b))) (res .cse82 (res true .cse35 (res b (res .cse83 (=+1 .cse82) (=-1 .cse83)) (res .cse83 (=+2 .cse83) (=+2 .cse82)))) (cong (and .cse83 .cse79) (and b .cse80))))) (cong (and .cse77 .cse16) (and .cse78 .cse16)))) (cong (=> .cse76 .cse69) (=> .cse18 .cse7)))) (res (= .cse84 .cse84) (refl .cse84) (cong (=> .cse84 .cse75) (=> .cse84 .cse12)))) (cong (and .cse74 .cse64) (and .cse11 .cse0)))))) (res (= .cse120 .cse38) (res (= .cse121 7) (poly+ .cse121 7) (res (= z@0 z@0) (refl z@0) (cong (= z@0 .cse121) (= z@0 7)))) (cong (=> .cse120 .cse63) (=> .cse38 .cse54)))) (res (= .cse122 .cse122) (refl .cse122) (cong (=> .cse122 .cse62) (=> .cse122 .cse39)))) (res (= .cse123 .cse123) (refl .cse123) (cong (=> .cse123 .cse61) (=> .cse123 .cse55)))) (cong (not .cse57) (not .cse56))) (=-2 .cse60)))) (not- .cse58))) (res .cse59 (assume .cse59) (not- .cse59)))))))))))))))))))))))))) (let-proof ((.cse9 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) (.cse13 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse12) :input)) (.cse10 (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) (.cse14 (! (res .cse54 (and+ .cse54) (res .cse39 (=>+ 1 .cse39) .cse40)) :proves (- .cse11 - .cse0) :input))) (let-proof ((.cse4 (! (res .cse33 (! (res .cse34 (! (res true .cse35 (=>+ 1 .cse34)) :proves (+ .cse34) :input) (! (=>+ 1 .cse33) :proves (+ .cse33 - .cse34) :input)) :proves (+ .cse33) :rup) (res .cse36 (! (let ((.cse49 (+ z@0 (- 7)))) (let ((.cse37 (= .cse49 0))) (let ((.cse41 (= .cse38 .cse37))) (let-proof ((.cse42 (res .cse37 (res .cse38 (=+1 .cse41) (let ((.cse46 (= 7 z@0))) (res .cse46 (symm 7 z@0) (let ((.cse47 (< .cse49 0))) (res .cse47 (let ((.cse48 (< 0 .cse49))) (res .cse48 (trichotomy .cse49 0) (farkas 1 .cse38 1 .cse48))) (farkas 1 .cse46 1 .cse47)))))) (res .cse38 (let ((.cse50 (= 0 .cse49))) (res .cse50 (symm 0 .cse49) (let ((.cse51 (< z@0 7))) (res .cse51 (let ((.cse52 (< 7 z@0))) (res .cse52 (trichotomy z@0 7) (farkas 1 .cse37 1 .cse52))) (farkas 1 .cse50 1 .cse51))))) (=+2 .cse41))))) (res .cse37 (! (res .cse38 (res .cse39 (=>+ 0 .cse39) .cse40) (res .cse41 .cse42 (=-2 .cse41))) :proves (+ .cse37) :input) (! (res .cse38 (let ((.cse43 (not .cse37))) (res .cse43 (let ((.cse44 (not .cse38))) (res .cse44 (not+ .cse44) (let ((.cse45 (= .cse44 .cse43))) (res .cse45 (res .cse41 .cse42 (cong (not .cse38) (not .cse37))) (=-2 .cse45))))) (not- .cse43))) (=>+ 1 .cse36)) :proves (+ .cse36 - .cse37) :input)))))) :proves (+ .cse36) :rup) (! (res .cse53 (and+ .cse53) (=>+ 1 .cse3)) :proves (+ .cse3 - .cse36 - .cse33) :input))) :proves (+ .cse3) :rup)) (.cse6 (! (let ((.cse29 (+ y@0 (- 4)))) (let ((.cse15 (= .cse29 0))) (let ((.cse21 (= .cse19 .cse15))) (let-proof ((.cse22 (res .cse15 (res .cse19 (=+1 .cse21) (let ((.cse26 (= 4 y@0))) (res .cse26 (symm 4 y@0) (let ((.cse27 (< .cse29 0))) (res .cse27 (let ((.cse28 (< 0 .cse29))) (res .cse28 (trichotomy .cse29 0) (farkas 1 .cse19 1 .cse28))) (farkas 1 .cse26 1 .cse27)))))) (res .cse19 (let ((.cse30 (= 0 .cse29))) (res .cse30 (symm 0 .cse29) (let ((.cse31 (< y@0 4))) (res .cse31 (let ((.cse32 (< 4 y@0))) (res .cse32 (trichotomy y@0 4) (farkas 1 .cse15 1 .cse32))) (farkas 1 .cse30 1 .cse31))))) (=+2 .cse21))))) (res .cse15 (! (let-proof ((.cse20 (res .cse21 .cse22 (=-2 .cse21)))) (res .cse16 (res .cse17 (res .cse18 (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + .cse17) :input) (res .cse12 (! (=>+ 0 .cse12) :proves (+ .cse12 + .cse18) :input) (res .cse1 .cse9 (res .cse11 .cse13 (res .cse0 .cse10 .cse14))))) (! (and- 1 .cse18) :proves (- .cse18 + .cse16) :input)) (! (res .cse19 (and- 0 .cse17) .cse20) :proves (- .cse17 + .cse15) :input)) (! (res .cse19 (and- 0 .cse16) .cse20) :proves (- .cse16 + .cse15) :input))) :proves (+ .cse15) :rup) (! (res .cse19 (let ((.cse23 (not .cse15))) (res .cse23 (let ((.cse24 (not .cse19))) (res .cse24 (not+ .cse24) (let ((.cse25 (= .cse24 .cse23))) (res .cse25 (res .cse21 .cse22 (cong (not .cse19) (not .cse15))) (=-2 .cse25))))) (not- .cse23))) (=>+ 1 .cse5)) :proves (+ .cse5 - .cse15) :input)))))) :proves (+ .cse5) :rup)) (.cse8 (and+ .cse7))) (res .cse0 (res .cse1 (! (res .cse2 (! (res .cse3 .cse4 (res .cse5 .cse6 (! (res .cse7 .cse8 (=>+ 1 .cse2)) :proves (+ .cse2 - .cse5 - .cse3) :input))) :proves (+ .cse2) :rup) .cse9) :proves (+ .cse1) :rup) .cse10) (! (res .cse11 (! (res .cse12 (! (res .cse3 .cse4 (res .cse5 .cse6 (! (res .cse7 .cse8 (=>+ 1 .cse12)) :proves (+ .cse12 - .cse5 - .cse3) :input))) :proves (+ .cse12) :rup) .cse13) :proves (+ .cse11) :rup) .cse14) :proves (- .cse0) :rup)))))))))))))))))) :proves () :rup)

