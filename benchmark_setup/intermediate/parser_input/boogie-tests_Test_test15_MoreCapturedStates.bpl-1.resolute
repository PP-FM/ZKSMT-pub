unsat
(! (let ((.cse36 (ControlFlow 0 3))) (let ((.cse2 (= .cse36 (- 4))) (.cse0 (= (- 4) .cse36))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 4) .cse36)) (res .cse2 (symm .cse36 (- 4)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse45 (* (- 1) x))) (let ((.cse40 (+ .cse45 20))) (let ((.cse37 (<= .cse40 0))) (let ((.cse29 (not .cse37))) (let ((.cse1 (=> .cse2 .cse29))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse6 (=> (= .cse36 1) true))) (let ((.cse5 (=> .cse29 .cse6))) (let-proof ((.cse7 true+)) (res .cse5 (! (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (let ((.cse42 (<= .cse45 0)) (.cse9 (and .cse1 .cse5))) (let ((.cse8 (=> .cse42 .cse9))) (res .cse8 (! (res .cse9 (and+ .cse9) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse1 - .cse5) :input) (! (let ((.cse63 (ControlFlow 0 5))) (let ((.cse47 (= .cse63 3))) (let ((.cse10 (=> .cse47 .cse8))) (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse8) :input) (! (let ((.cse59 (+ .cse45 50))) (let ((.cse56 (<= .cse59 0))) (let ((.cse54 (not .cse56)) (.cse52 (= (ControlFlow 0 2) 1))) (let ((.cse51 (and .cse54 .cse52))) (let ((.cse60 (= .cse63 2)) (.cse12 (=> .cse51 true))) (let ((.cse11 (=> .cse60 .cse12))) (res .cse11 (! (res .cse12 (! (res true .cse7 (=>+ 1 .cse12)) :proves (+ .cse12) :input) (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse12) :input)) :proves (+ .cse11) :rup) (! (let ((.cse13 (and .cse11 .cse10))) (res .cse13 (and+ .cse13) (let ((.cse61 (= (ControlFlow 0 6) 5))) (let ((.cse14 (=> .cse61 .cse13))) (res .cse14 (=>+ 1 .cse14) (let ((.cse62 (= (ControlFlow 0 0) 6))) (let ((.cse15 (=> .cse62 .cse14))) (res .cse15 (=>+ 1 .cse15) (let ((.cse32 (- 0 4))) (let ((.cse31 (= .cse36 .cse32)) (.cse28 (< x 20))) (let ((.cse30 (=> .cse31 .cse28)) (.cse25 (=> .cse28 .cse6)) (.cse55 (< x 50))) (let ((.cse50 (and .cse55 .cse52)) (.cse43 (<= 0 x)) (.cse24 (and .cse30 .cse25))) (let ((.cse23 (=> .cse43 .cse24)) (.cse49 (=> .cse50 true))) (let ((.cse48 (=> .cse60 .cse49)) (.cse22 (=> .cse47 .cse23))) (let ((.cse21 (and .cse48 .cse22))) (let ((.cse20 (=> .cse61 .cse21))) (let ((.cse16 (=> .cse62 .cse20))) (let ((.cse18 (not .cse16))) (res .cse16 (let ((.cse17 (not .cse15))) (res .cse17 (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (res (= .cse16 .cse15) (res (= .cse20 .cse14) (res (= .cse21 .cse13) (res (= .cse22 .cse10) (res (= .cse23 .cse8) (res (= .cse24 .cse9) (let ((.cse26 (= .cse28 .cse29))) (let-proof ((.cse27 (res .cse29 (res .cse28 (=+1 .cse26) (res .cse37 (not+ .cse29) (farkas 1 .cse28 1 .cse37))) (res .cse28 (let ((.cse38 (<= 20 x))) (res .cse38 (total 20 x) (res .cse37 (let ((.cse39 (< 0 .cse40))) (res .cse39 (total .cse40 0) (farkas 1 .cse38 1 .cse39))) (not- .cse29)))) (=+2 .cse26))))) (res (= .cse25 .cse5) (res (= .cse6 .cse6) (refl .cse6) (res .cse26 .cse27 (cong (=> .cse28 .cse6) (=> .cse29 .cse6)))) (res (= .cse30 .cse1) (res .cse26 .cse27 (res (= .cse31 .cse2) (res (= .cse32 (- 4)) (let ((.cse33 (* (- 1) 4))) (res (= .cse33 (- 4)) (poly* .cse33 (- 4)) (res (= 0 0) (refl 0) (let ((.cse34 (+ 0 .cse33)) (.cse35 (+ 0 (- 4)))) (res (= .cse34 .cse35) (cong (+ 0 .cse33) (+ 0 (- 4))) (res (= .cse32 .cse34) (-def 0 4) (res (= .cse35 (- 4)) (poly+ .cse35 (- 4)) (trans .cse32 .cse34 .cse35 (- 4))))))))) (res (= .cse36 .cse36) (refl .cse36) (cong (= .cse36 .cse32) (= .cse36 (- 4))))) (cong (=> .cse31 .cse28) (=> .cse2 .cse29)))) (cong (and .cse30 .cse25) (and .cse1 .cse5)))))) (let ((.cse41 (= .cse43 .cse42))) (res .cse41 (res .cse42 (res .cse43 (=+1 .cse41) (let ((.cse44 (< 0 .cse45))) (res .cse44 (total .cse45 0) (farkas 1 .cse43 1 .cse44)))) (res .cse43 (let ((.cse46 (< x 0))) (res .cse46 (total 0 x) (farkas 1 .cse46 1 .cse42))) (=+2 .cse41))) (cong (=> .cse43 .cse24) (=> .cse42 .cse9))))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse23) (=> .cse47 .cse8)))) (res (= .cse48 .cse11) (res (= .cse49 .cse12) (res (= true true) (refl true) (res (= .cse50 .cse51) (res (= .cse52 .cse52) (refl .cse52) (let ((.cse53 (= .cse55 .cse54))) (res .cse53 (res .cse54 (res .cse55 (=+1 .cse53) (res .cse56 (not+ .cse54) (farkas 1 .cse55 1 .cse56))) (res .cse55 (let ((.cse57 (<= 50 x))) (res .cse57 (total 50 x) (res .cse56 (let ((.cse58 (< 0 .cse59))) (res .cse58 (total .cse59 0) (farkas 1 .cse57 1 .cse58))) (not- .cse54)))) (=+2 .cse53))) (cong (and .cse55 .cse52) (and .cse54 .cse52))))) (cong (=> .cse50 true) (=> .cse51 true)))) (res (= .cse60 .cse60) (refl .cse60) (cong (=> .cse60 .cse49) (=> .cse60 .cse12)))) (cong (and .cse48 .cse22) (and .cse11 .cse10)))) (res (= .cse61 .cse61) (refl .cse61) (cong (=> .cse61 .cse21) (=> .cse61 .cse13)))) (res (= .cse62 .cse62) (refl .cse62) (cong (=> .cse62 .cse20) (=> .cse62 .cse14)))) (cong (not .cse16) (not .cse15))) (=-2 .cse19)))) (not- .cse17))) (res .cse18 (assume .cse18) (not- .cse18))))))))))))))))))))) :proves (- .cse11 - .cse10) :input)))))))) :proves (- .cse10) :rup))))) :proves (- .cse8) :rup)))))))) :proves (- .cse1) :rup))))))) :proves (+ .cse0) :rup) (! (let ((.cse65 (not .cse2))) (res .cse2 (let ((.cse64 (not .cse0))) (res .cse64 (res .cse65 (not+ .cse65) (let ((.cse66 (= .cse65 .cse64))) (res .cse66 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse66)))) (not- .cse64))) (res .cse65 (assume .cse65) (not- .cse65)))) :proves (- .cse0) :input)))))) :proves () :rup)

