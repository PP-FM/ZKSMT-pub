unsat
(! (let ((.cse34 (* 2 x@@1))) (let ((.cse11 (<= r@1 0)) (.cse109 (ControlFlow 0 2)) (.cse44 (<= .cse34 0))) (let ((.cse20 (= r@1 r@0)) (.cse46 (not .cse44)) (.cse31 (= r@0 .cse34)) (.cse104 (= .cse109 (- 1))) (.cse12 (not .cse11)) (.cse54 (= r@1 1))) (let ((.cse15 (and .cse54 (= (ControlFlow 0 4) 2))) (.cse2 (=> .cse104 .cse12)) (.cse18 (and .cse46 .cse31)) (.cse17 (and .cse20 (= (ControlFlow 0 3) 2)))) (let ((.cse16 (and .cse18 .cse17)) (.cse78 (not .cse46)) (.cse1 (=> .cse15 .cse2)) (.cse112 (ControlFlow 0 5))) (let ((.cse82 (= .cse112 4)) (.cse0 (=> .cse78 .cse1)) (.cse91 (= .cse112 3)) (.cse8 (=> .cse16 .cse2))) (let ((.cse51 (< 0 .cse34)) (.cse7 (=> .cse91 .cse8)) (.cse5 (=> .cse82 .cse0))) (let-proof ((.cse47 (not+ .cse46)) (.cse52 (total .cse34 0)) (.cse53 (not- .cse46)) (.cse13 (not+ .cse12))) (let-proof ((.cse4 (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) (.cse6 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse0) :input)) (.cse9 (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse8) :input)) (.cse10 (! (let ((.cse64 (and .cse7 .cse5))) (res .cse64 (and+ .cse64) (let ((.cse111 (= (ControlFlow 0 0) 5))) (let ((.cse65 (=> .cse111 .cse64))) (res .cse65 (=>+ 1 .cse65) (let ((.cse105 (- 0 1)) (.cse90 (foo2 x@@1 x@@1))) (let ((.cse81 (foo x@@1)) (.cse87 (= r@0 .cse90)) (.cse103 (= .cse109 .cse105)) (.cse100 (> r@1 0))) (let ((.cse76 (=> .cse103 .cse100)) (.cse86 (and .cse81 .cse87))) (let ((.cse85 (and .cse86 .cse17)) (.cse77 (not .cse81)) (.cse73 (=> .cse15 .cse76))) (let ((.cse72 (=> .cse77 .cse73)) (.cse84 (=> .cse85 .cse76))) (let ((.cse83 (=> .cse91 .cse84)) (.cse71 (=> .cse82 .cse72))) (let ((.cse70 (and .cse83 .cse71))) (let ((.cse66 (=> .cse111 .cse70))) (let ((.cse68 (not .cse66))) (res .cse66 (let ((.cse67 (not .cse65))) (res .cse67 (res .cse68 (not+ .cse68) (let ((.cse69 (= .cse68 .cse67))) (res .cse69 (res (= .cse66 .cse65) (res (= .cse70 .cse64) (let ((.cse88 (= .cse90 .cse34)) (.cse96 (= 0 0))) (let-proof ((.cse89 (let ((.cse110 (+ x@@1 x@@1))) (res (= .cse110 .cse34) (poly+ .cse110 .cse34) (res (= .cse90 .cse110) (expand (foo2 x@@1 x@@1)) (trans .cse90 .cse110 .cse34))))) (.cse97 (refl 0))) (let ((.cse74 (= .cse76 .cse2)) (.cse79 (= .cse81 .cse46))) (let-proof ((.cse75 (let ((.cse98 (= .cse100 .cse12))) (res .cse98 (let ((.cse101 (< 0 r@1))) (let ((.cse99 (= .cse100 .cse101))) (res .cse99 (>def r@1 0) (res .cse12 (res .cse100 (=+1 .cse98) (res .cse101 (=-2 .cse99) (res .cse11 .cse13 (farkas 1 .cse101 1 .cse11)))) (res .cse100 (res .cse101 (let-proof ((.cse102 (total r@1 0))) (res .cse11 .cse102 (res .cse11 (res .cse101 .cse102 (farkas 1 .cse11 1 .cse101)) (not- .cse12)))) (=-1 .cse99)) (=+2 .cse98)))))) (res (= .cse103 .cse104) (res (= .cse105 (- 1)) (let ((.cse106 (* (- 1) 1))) (res (= .cse106 (- 1)) (poly* .cse106 (- 1)) (res .cse96 .cse97 (let ((.cse107 (+ 0 .cse106)) (.cse108 (+ 0 (- 1)))) (res (= .cse107 .cse108) (cong (+ 0 .cse106) (+ 0 (- 1))) (res (= .cse105 .cse107) (-def 0 1) (res (= .cse108 (- 1)) (poly+ .cse108 (- 1)) (trans .cse105 .cse107 .cse108 (- 1))))))))) (res (= .cse109 .cse109) (refl .cse109) (cong (= .cse109 .cse105) (= .cse109 (- 1))))) (cong (=> .cse103 .cse100) (=> .cse104 .cse12)))))) (.cse80 (let ((.cse92 (> .cse90 0))) (res (= .cse92 .cse46) (let ((.cse95 (> .cse34 0))) (let ((.cse93 (= .cse95 .cse46))) (res .cse93 (let ((.cse94 (= .cse95 .cse51))) (res .cse94 (>def .cse34 0) (res .cse46 (res .cse95 (=+1 .cse93) (res .cse51 (=-2 .cse94) (res .cse44 .cse47 (farkas 1 .cse51 1 .cse44)))) (res .cse95 (res .cse51 (res .cse44 .cse52 (res .cse44 (res .cse51 .cse52 (farkas 1 .cse44 1 .cse51)) .cse53)) (=-1 .cse94)) (=+2 .cse93))))) (res (= .cse92 .cse95) (res .cse96 .cse97 (res .cse88 .cse89 (cong (> .cse90 0) (> .cse34 0)))) (trans .cse92 .cse95 .cse46))))) (res (= .cse81 .cse92) (expand (foo x@@1)) (trans .cse81 .cse92 .cse46)))))) (res (= .cse71 .cse5) (res (= .cse72 .cse0) (res (= .cse73 .cse1) (res .cse74 .cse75 (res (= .cse15 .cse15) (refl .cse15) (cong (=> .cse15 .cse76) (=> .cse15 .cse2)))) (res (= .cse77 .cse78) (res .cse79 .cse80 (cong (not .cse81) (not .cse46))) (cong (=> .cse77 .cse73) (=> .cse78 .cse1)))) (res (= .cse82 .cse82) (refl .cse82) (cong (=> .cse82 .cse72) (=> .cse82 .cse0)))) (res (= .cse83 .cse7) (res (= .cse84 .cse8) (res .cse74 .cse75 (res (= .cse85 .cse16) (res (= .cse17 .cse17) (refl .cse17) (res (= .cse86 .cse18) (res (= .cse87 .cse31) (res .cse88 .cse89 (res (= r@0 r@0) (refl r@0) (cong (= r@0 .cse90) (= r@0 .cse34)))) (res .cse79 .cse80 (cong (and .cse81 .cse87) (and .cse46 .cse31)))) (cong (and .cse86 .cse17) (and .cse18 .cse17)))) (cong (=> .cse85 .cse76) (=> .cse16 .cse2)))) (res (= .cse91 .cse91) (refl .cse91) (cong (=> .cse91 .cse84) (=> .cse91 .cse8)))) (cong (and .cse83 .cse71) (and .cse7 .cse5)))))))) (res (= .cse111 .cse111) (refl .cse111) (cong (=> .cse111 .cse70) (=> .cse111 .cse64)))) (cong (not .cse66) (not .cse65))) (=-2 .cse69)))) (not- .cse67))) (res .cse68 (assume .cse68) (not- .cse68))))))))))))))))) :proves (- .cse7 - .cse5) :input))) (let-proof ((.cse3 (! (res .cse11 (! (res .cse12 .cse13 (=>+ 1 .cse2)) :proves (+ .cse2 + .cse11) :input) (! (let ((.cse59 (+ r@1 (- 1)))) (let ((.cse14 (= .cse59 0)) (.cse60 (= 0 .cse59))) (let-proof ((.cse61 (symm 0 .cse59))) (res .cse14 (res .cse15 (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse15) :input) (res .cse0 .cse4 (res .cse5 .cse6 (res .cse7 (res .cse8 (res .cse16 (! (=>+ 0 .cse8) :proves (+ .cse8 + .cse16) :input) (res .cse17 (! (and- 1 .cse16) :proves (- .cse16 + .cse17) :input) (res .cse18 (! (and- 0 .cse16) :proves (- .cse16 + .cse18) :input) (let ((.cse25 (+ r@1 (* (- 1) r@0)))) (let ((.cse19 (= .cse25 0)) (.cse26 (= 0 .cse25))) (let-proof ((.cse27 (symm 0 .cse25))) (res .cse19 (! (res .cse20 (and- 0 .cse17) (let ((.cse21 (= .cse20 .cse19))) (res .cse21 (res .cse19 (res .cse20 (=+1 .cse21) (let ((.cse22 (= r@0 r@1))) (res .cse22 (symm r@0 r@1) (let ((.cse23 (< .cse25 0))) (res .cse23 (let ((.cse24 (< 0 .cse25))) (res .cse24 (trichotomy .cse25 0) (farkas 1 .cse20 1 .cse24))) (farkas 1 .cse22 1 .cse23)))))) (res .cse20 (res .cse26 .cse27 (let ((.cse28 (< r@1 r@0))) (res .cse28 (let ((.cse29 (< r@0 r@1))) (res .cse29 (trichotomy r@1 r@0) (farkas 1 .cse19 1 .cse29))) (farkas 1 .cse26 1 .cse28)))) (=+2 .cse21))) (=-2 .cse21)))) :proves (- .cse17 + .cse19) :input) (let ((.cse37 (+ r@0 (* (- 2) x@@1)))) (let ((.cse30 (= .cse37 0)) (.cse38 (= 0 .cse37))) (let-proof ((.cse39 (symm 0 .cse37))) (res .cse30 (! (res .cse31 (and- 1 .cse18) (let ((.cse32 (= .cse31 .cse30))) (res .cse32 (res .cse30 (res .cse31 (=+1 .cse32) (let ((.cse33 (= .cse34 r@0))) (res .cse33 (symm .cse34 r@0) (let ((.cse35 (< .cse37 0))) (res .cse35 (let ((.cse36 (< 0 .cse37))) (res .cse36 (trichotomy .cse37 0) (farkas 1 .cse31 1 .cse36))) (farkas 1 .cse33 1 .cse35)))))) (res .cse31 (res .cse38 .cse39 (let ((.cse40 (< r@0 .cse34))) (res .cse40 (let ((.cse41 (< .cse34 r@0))) (res .cse41 (trichotomy r@0 .cse34) (farkas 1 .cse30 1 .cse41))) (farkas 1 .cse38 1 .cse40)))) (=+2 .cse32))) (=-2 .cse32)))) :proves (- .cse18 + .cse30) :input) (let ((.cse42 (<= x@@1 0))) (res .cse42 (! (res .cse38 .cse39 (let ((.cse43 (<= 1 x@@1))) (res .cse43 (total-int x@@1 0) (res .cse26 .cse27 (farkas 1 .cse11 1 .cse26 2 .cse43 1 .cse38))))) :proves (- .cse11 - .cse19 + .cse42 - .cse30) :LA (1 (- 1) (- 2) (- 1))) (! (res .cse44 (let ((.cse45 (not .cse42))) (res .cse45 (res .cse46 .cse47 (let ((.cse48 (= .cse46 .cse45))) (res .cse48 (let ((.cse49 (= .cse44 .cse42))) (res .cse49 (res .cse42 (res .cse44 (=+1 .cse49) (let ((.cse50 (< 0 x@@1))) (res .cse50 (total x@@1 0) (farkas 1 .cse44 2 .cse50)))) (res .cse44 (res .cse51 .cse52 (farkas 1 .cse51 2 .cse42)) (=+2 .cse49))) (cong (not .cse44) (not .cse42)))) (=-2 .cse48)))) (not- .cse45))) (res .cse46 (and- 0 .cse18) .cse53)) :proves (- .cse18 - .cse42) :input)))))))))))))) .cse9) .cse10)))) (! (res .cse54 (and- 0 .cse15) (let ((.cse55 (= .cse54 .cse14))) (res .cse55 (res .cse14 (res .cse54 (=+1 .cse55) (let ((.cse56 (= 1 r@1))) (res .cse56 (symm 1 r@1) (let ((.cse57 (< .cse59 0))) (res .cse57 (let ((.cse58 (< 0 .cse59))) (res .cse58 (trichotomy .cse59 0) (farkas 1 .cse54 1 .cse58))) (farkas 1 .cse56 1 .cse57)))))) (res .cse54 (res .cse60 .cse61 (let ((.cse62 (< r@1 1))) (res .cse62 (let ((.cse63 (< 1 r@1))) (res .cse63 (trichotomy r@1 1) (farkas 1 .cse14 1 .cse63))) (farkas 1 .cse60 1 .cse62)))) (=+2 .cse55))) (=-2 .cse55)))) :proves (- .cse15 + .cse14) :input)) (! (res .cse60 .cse61 (farkas 1 .cse11 1 .cse60)) :proves (- .cse11 - .cse14) :LA (1 (- 1))))))) :proves (- .cse11) :rup)) :proves (+ .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 .cse3 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) .cse4) :proves (+ .cse0) :rup) (res .cse5 .cse6 (! (res .cse7 (! (res .cse8 (! (res .cse2 .cse3 (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse2) :input)) :proves (+ .cse8) :rup) .cse9) :proves (+ .cse7) :rup) .cse10) :proves (- .cse5) :rup))))))))))))) :proves () :rup)

