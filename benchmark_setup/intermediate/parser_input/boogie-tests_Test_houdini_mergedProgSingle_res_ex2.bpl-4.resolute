unsat
(! (let ((.cse17 (ControlFlow 0 4))) (let ((.cse2 (= .cse17 (- 3))) (.cse0 (= (- 3) .cse17))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 3) .cse17)) (res .cse2 (symm .cse17 (- 3)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse86 (= _v1.x _v2.x))) (let ((.cse96 (=> _houdini_Eval_result_1 (=> .cse86 (= _v1.result@0 _v2.result@0))))) (let ((.cse1 (=> .cse2 .cse96))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse106 (=> _houdini_Eval_control_flag_0 (=> (and (= _v1.control_flag _v2.control_flag) .cse86) (= _v1.control_flag@4 _v2.control_flag@4))))) (let ((.cse5 (=> .cse106 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse115 (= .cse17 (- 6)))) (let ((.cse6 (=> .cse115 true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (let ((.cse11 (= .cse17 (- 5)))) (let ((.cse9 (=> .cse11 .cse106))) (let ((.cse18 (and .cse9 .cse5))) (let ((.cse120 (and (and (= _v1.result@0 call3formal@out_result@0) (= _v2.control_flag@4 _v2.control_flag@1)) (and (= _v2.result@0 call3formal@out_result@0@@0) (= (ControlFlow 0 7) 4)))) (.cse19 (and .cse6 .cse18))) (let ((.cse8 (=> .cse120 .cse19))) (res .cse8 (res .cse9 (! (let ((.cse10 (= (- 5) .cse17))) (let ((.cse12 (= .cse11 .cse10))) (let-proof ((.cse13 (res .cse10 (res .cse11 (=+1 .cse12) (symm (- 5) .cse17)) (res .cse11 (symm .cse17 (- 5)) (=+2 .cse12))))) (res .cse10 (! (res .cse11 (=>+ 0 .cse9) (res .cse12 .cse13 (=-2 .cse12))) :proves (+ .cse9 + .cse10) :input) (! (let ((.cse15 (not .cse11))) (res .cse11 (let ((.cse14 (not .cse10))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res .cse12 .cse13 (cong (not .cse11) (not .cse10))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (assume .cse15) (not- .cse15)))) :proves (- .cse10) :input))))) :proves (+ .cse9) :rup) (! (res .cse18 (and+ .cse18) (res .cse19 (and+ .cse19) (=>+ 1 .cse8))) :proves (- .cse5 - .cse9 + .cse8 - .cse6) :input)) (! (let ((.cse121 (= _v1.control_flag@4 _v1.control_flag@1))) (let ((.cse20 (=> .cse121 .cse8))) (res .cse20 (! (=>+ 1 .cse20) :proves (+ .cse20 - .cse8) :input) (! (let ((.cse61 (and (and (and (and (= call3formal@out_result@0 call6formal@_v1.out_result@0) (= call4formal@out_x@0 call7formal@_v1.out_x@0)) (= call3formal@out_result@0@@0 call8formal@_v2.out_result@0)) (= call4formal@out_x@0@@0 call9formal@_v2.out_x@0)) (= (ControlFlow 0 8) 7)))) (let ((.cse21 (=> .cse61 .cse20))) (res .cse21 (! (=>+ 1 .cse21) :proves (+ .cse21 - .cse20) :input) (! (let ((.cse78 (and true .cse86)) (.cse74 (= call6formal@_v1.out_result@0 call8formal@_v2.out_result@0))) (let ((.cse73 (=> .cse78 .cse74)) (.cse85 (= _v1.control_flag@3 _v2.control_flag@3))) (let ((.cse84 (=> .cse78 .cse85)) (.cse71 (=> _houdini_Eval_loop_anon3_LoopHead_out_result_3 .cse73)) (.cse69 (=> _houdini_Eval_loop_anon3_LoopHead_out_x_4 (=> .cse86 (= call7formal@_v1.out_x@0 call9formal@_v2.out_x@0))))) (let ((.cse68 (and .cse71 .cse69)) (.cse66 (and (= _v1.control_flag@3 _v1.control_flag@0) (= _v2.control_flag@3 _v2.control_flag@0))) (.cse27 (and true true)) (.cse82 (=> _houdini_Eval_loop_anon3_LoopHead_control_flag_2 .cse84))) (let ((.cse80 (and .cse27 .cse82)) (.cse65 (and .cse68 .cse66))) (let ((.cse63 (and .cse80 .cse65))) (let ((.cse22 (=> .cse63 .cse21))) (res .cse22 (! (=>+ 1 .cse22) :proves (+ .cse22 - .cse21) :input) (! (let ((.cse144 (ControlFlow 0 10))) (let ((.cse90 (= .cse144 8))) (let ((.cse23 (=> .cse90 .cse22))) (res .cse23 (! (=>+ 1 .cse23) :proves (+ .cse23 - .cse22) :input) (! (let ((.cse28 (not .cse27))) (let ((.cse26 (and .cse28 (= (ControlFlow 0 9) 7)))) (let ((.cse57 (= .cse144 9)) (.cse25 (=> .cse26 .cse20))) (let ((.cse24 (=> .cse57 .cse25))) (res .cse24 (! (res .cse25 (! (res .cse26 (! (=>+ 0 .cse25) :proves (+ .cse25 + .cse26) :input) (! (res true .cse7 (res .cse27 (and+ .cse27) (res .cse28 (and- 0 .cse26) (not- .cse28)))) :proves (- .cse26) :input)) :proves (+ .cse25) :rup) (! (=>+ 1 .cse24) :proves (+ .cse24 - .cse25) :input)) :proves (+ .cse24) :rup) (let ((.cse126 (<= call4formal@out_x@0@@0 0)) (.cse124 (= _v2.control_flag@1 (_v2.control_UIF _v2.control_flag@0 2)))) (let ((.cse123 (and .cse126 .cse124)) (.cse30 (and .cse23 .cse24))) (let ((.cse29 (=> .cse123 .cse30))) (res .cse29 (! (res .cse30 (and+ .cse30) (=>+ 1 .cse29)) :proves (+ .cse29 - .cse23 - .cse24) :input) (! (let ((.cse143 (ControlFlow 0 11))) (let ((.cse130 (= .cse143 10))) (let ((.cse31 (=> .cse130 .cse29))) (res .cse31 (! (=>+ 1 .cse31) :proves (+ .cse31 - .cse29) :input) (! (let ((.cse32 (=> (= .cse143 2) true))) (res .cse32 (! (res true .cse7 (=>+ 1 .cse32)) :proves (+ .cse32) :input) (let ((.cse135 (<= call4formal@out_x@0 0)) (.cse133 (= _v1.control_flag@1 (_v2.control_UIF _v1.control_flag@0 2)))) (let ((.cse132 (and .cse135 .cse133)) (.cse34 (and .cse31 .cse32))) (let ((.cse33 (=> .cse132 .cse34))) (res .cse33 (! (res .cse34 (and+ .cse34) (=>+ 1 .cse33)) :proves (+ .cse33 - .cse31 - .cse32) :input) (! (let ((.cse142 (ControlFlow 0 12))) (let ((.cse139 (= .cse142 11))) (let ((.cse35 (=> .cse139 .cse33))) (res .cse35 (! (=>+ 1 .cse35) :proves (+ .cse35 - .cse33) :input) (! (let ((.cse36 (=> (= .cse142 1) true))) (res .cse36 (! (res true .cse7 (=>+ 1 .cse36)) :proves (+ .cse36) :input) (! (let ((.cse37 (and .cse35 .cse36))) (res .cse37 (and+ .cse37) (let ((.cse140 (= (ControlFlow 0 13) 12))) (let ((.cse38 (=> .cse140 .cse37))) (res .cse38 (=>+ 1 .cse38) (let ((.cse141 (= (ControlFlow 0 0) 13))) (let ((.cse39 (=> .cse141 .cse38))) (res .cse39 (=>+ 1 .cse39) (let ((.cse98 (- 0 3))) (let ((.cse109 (- 0 5)) (.cse97 (= .cse17 .cse98))) (let ((.cse88 (= 0 0)) (.cse116 (- 0 6)) (.cse95 (=> .cse97 .cse96)) (.cse108 (= .cse17 .cse109))) (let ((.cse107 (=> .cse108 .cse106)) (.cse94 (=> .cse106 .cse95)) (.cse114 (= .cse17 .cse116)) (.cse77 (and .cse88 .cse86))) (let ((.cse72 (=> .cse77 .cse74)) (.cse113 (=> .cse114 true)) (.cse93 (and .cse107 .cse94))) (let ((.cse92 (and .cse113 .cse93)) (.cse83 (=> .cse77 .cse85)) (.cse70 (=> _houdini_Eval_loop_anon3_LoopHead_out_result_3 .cse72))) (let ((.cse67 (and .cse70 .cse69)) (.cse81 (=> _houdini_Eval_loop_anon3_LoopHead_control_flag_2 .cse83)) (.cse91 (=> .cse120 .cse92))) (let ((.cse56 (=> .cse121 .cse91)) (.cse79 (and .cse27 .cse81)) (.cse64 (and .cse67 .cse66))) (let ((.cse62 (and .cse79 .cse64)) (.cse60 (=> .cse61 .cse56))) (let ((.cse53 (=> .cse26 .cse56)) (.cse59 (=> .cse62 .cse60))) (let ((.cse58 (=> .cse90 .cse59)) (.cse52 (=> .cse57 .cse53)) (.cse127 (>= 0 call4formal@out_x@0@@0))) (let ((.cse122 (and .cse127 .cse124)) (.cse51 (and .cse58 .cse52))) (let ((.cse50 (=> .cse122 .cse51))) (let ((.cse49 (=> .cse130 .cse50)) (.cse136 (>= 0 call4formal@out_x@0))) (let ((.cse131 (and .cse136 .cse133)) (.cse48 (and .cse49 .cse32))) (let ((.cse47 (=> .cse131 .cse48))) (let ((.cse46 (=> .cse139 .cse47))) (let ((.cse45 (and .cse46 .cse36))) (let ((.cse44 (=> .cse140 .cse45))) (let ((.cse40 (=> .cse141 .cse44))) (let ((.cse42 (not .cse40))) (res .cse40 (let ((.cse41 (not .cse39))) (res .cse41 (res .cse42 (not+ .cse42) (let ((.cse43 (= .cse42 .cse41))) (res .cse43 (res (= .cse40 .cse39) (res (= .cse44 .cse38) (res (= .cse45 .cse37) (res (= .cse36 .cse36) (refl .cse36) (res (= .cse46 .cse35) (res (= .cse47 .cse33) (res (= .cse48 .cse34) (res (= .cse32 .cse32) (refl .cse32) (res (= .cse49 .cse31) (res (= .cse50 .cse29) (res (= .cse51 .cse30) (let-proof ((.cse89 (refl 0))) (let ((.cse54 (= .cse56 .cse20))) (let-proof ((.cse55 (res (= .cse91 .cse8) (res (= .cse92 .cse19) (let ((.cse102 (= .cse17 .cse17))) (let-proof ((.cse103 (refl .cse17))) (res (= .cse93 .cse18) (let ((.cse104 (= .cse106 .cse106))) (let-proof ((.cse105 (refl .cse106))) (res (= .cse94 .cse5) (res (= .cse95 .cse1) (res (= .cse96 .cse96) (refl .cse96) (res (= .cse97 .cse2) (res (= .cse98 (- 3)) (let ((.cse99 (* (- 1) 3))) (res (= .cse99 (- 3)) (poly* .cse99 (- 3)) (res .cse88 .cse89 (let ((.cse100 (+ 0 .cse99)) (.cse101 (+ 0 (- 3)))) (res (= .cse100 .cse101) (cong (+ 0 .cse99) (+ 0 (- 3))) (res (= .cse98 .cse100) (-def 0 3) (res (= .cse101 (- 3)) (poly+ .cse101 (- 3)) (trans .cse98 .cse100 .cse101 (- 3))))))))) (res .cse102 .cse103 (cong (= .cse17 .cse98) (= .cse17 (- 3))))) (cong (=> .cse97 .cse96) (=> .cse2 .cse96)))) (res .cse104 .cse105 (cong (=> .cse106 .cse95) (=> .cse106 .cse1)))) (res (= .cse107 .cse9) (res .cse104 .cse105 (res (= .cse108 .cse11) (res (= .cse109 (- 5)) (let ((.cse110 (* (- 1) 5))) (res (= .cse110 (- 5)) (poly* .cse110 (- 5)) (res .cse88 .cse89 (let ((.cse111 (+ 0 .cse110)) (.cse112 (+ 0 (- 5)))) (res (= .cse111 .cse112) (cong (+ 0 .cse110) (+ 0 (- 5))) (res (= .cse109 .cse111) (-def 0 5) (res (= .cse112 (- 5)) (poly+ .cse112 (- 5)) (trans .cse109 .cse111 .cse112 (- 5))))))))) (res .cse102 .cse103 (cong (= .cse17 .cse109) (= .cse17 (- 5))))) (cong (=> .cse108 .cse106) (=> .cse11 .cse106)))) (cong (and .cse107 .cse94) (and .cse9 .cse5)))))) (res (= .cse113 .cse6) (res (= true true) (refl true) (res (= .cse114 .cse115) (res (= .cse116 (- 6)) (let ((.cse117 (* (- 1) 6))) (res (= .cse117 (- 6)) (poly* .cse117 (- 6)) (res .cse88 .cse89 (let ((.cse118 (+ 0 .cse117)) (.cse119 (+ 0 (- 6)))) (res (= .cse118 .cse119) (cong (+ 0 .cse117) (+ 0 (- 6))) (res (= .cse116 .cse118) (-def 0 6) (res (= .cse119 (- 6)) (poly+ .cse119 (- 6)) (trans .cse116 .cse118 .cse119 (- 6))))))))) (res .cse102 .cse103 (cong (= .cse17 .cse116) (= .cse17 (- 6))))) (cong (=> .cse114 true) (=> .cse115 true)))) (cong (and .cse113 .cse93) (and .cse6 .cse18)))))) (res (= .cse120 .cse120) (refl .cse120) (cong (=> .cse120 .cse92) (=> .cse120 .cse19)))) (res (= .cse121 .cse121) (refl .cse121) (cong (=> .cse121 .cse91) (=> .cse121 .cse8)))))) (res (= .cse52 .cse24) (res (= .cse53 .cse25) (res .cse54 .cse55 (res (= .cse26 .cse26) (refl .cse26) (cong (=> .cse26 .cse56) (=> .cse26 .cse20)))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse53) (=> .cse57 .cse25)))) (res (= .cse58 .cse23) (res (= .cse59 .cse22) (res (= .cse60 .cse21) (res .cse54 .cse55 (res (= .cse61 .cse61) (refl .cse61) (cong (=> .cse61 .cse56) (=> .cse61 .cse20)))) (res (= .cse62 .cse63) (let ((.cse75 (= .cse77 .cse78))) (let-proof ((.cse76 (res (= .cse86 .cse86) (refl .cse86) (let ((.cse87 (= .cse88 true))) (res .cse87 (res true .cse7 (res .cse88 .cse89 (=+2 .cse87))) (cong (and .cse88 .cse86) (and true .cse86))))))) (res (= .cse64 .cse65) (res (= .cse66 .cse66) (refl .cse66) (res (= .cse67 .cse68) (res (= .cse69 .cse69) (refl .cse69) (res (= .cse70 .cse71) (res (= .cse72 .cse73) (res (= .cse74 .cse74) (refl .cse74) (res .cse75 .cse76 (cong (=> .cse77 .cse74) (=> .cse78 .cse74)))) (res (= _houdini_Eval_loop_anon3_LoopHead_out_result_3 _houdini_Eval_loop_anon3_LoopHead_out_result_3) (refl _houdini_Eval_loop_anon3_LoopHead_out_result_3) (cong (=> _houdini_Eval_loop_anon3_LoopHead_out_result_3 .cse72) (=> _houdini_Eval_loop_anon3_LoopHead_out_result_3 .cse73)))) (cong (and .cse70 .cse69) (and .cse71 .cse69)))) (cong (and .cse67 .cse66) (and .cse68 .cse66)))) (res (= .cse79 .cse80) (res (= .cse81 .cse82) (res (= .cse83 .cse84) (res (= .cse85 .cse85) (refl .cse85) (res .cse75 .cse76 (cong (=> .cse77 .cse85) (=> .cse78 .cse85)))) (res (= _houdini_Eval_loop_anon3_LoopHead_control_flag_2 _houdini_Eval_loop_anon3_LoopHead_control_flag_2) (refl _houdini_Eval_loop_anon3_LoopHead_control_flag_2) (cong (=> _houdini_Eval_loop_anon3_LoopHead_control_flag_2 .cse83) (=> _houdini_Eval_loop_anon3_LoopHead_control_flag_2 .cse84)))) (res (= .cse27 .cse27) (refl .cse27) (cong (and .cse27 .cse81) (and .cse27 .cse82)))) (cong (and .cse79 .cse64) (and .cse80 .cse65)))))) (cong (=> .cse62 .cse60) (=> .cse63 .cse21)))) (res (= .cse90 .cse90) (refl .cse90) (cong (=> .cse90 .cse59) (=> .cse90 .cse22)))) (cong (and .cse58 .cse52) (and .cse23 .cse24))))))) (res (= .cse122 .cse123) (res (= .cse124 .cse124) (refl .cse124) (let ((.cse125 (= .cse127 .cse126))) (res .cse125 (res .cse125 (>=def 0 call4formal@out_x@0@@0) (let ((.cse128 (< 0 call4formal@out_x@0@@0))) (let-proof ((.cse129 (total call4formal@out_x@0@@0 0))) (res .cse126 (res .cse127 (=+1 .cse125) (res .cse126 (=-2 .cse125) (res .cse128 .cse129 (farkas 1 .cse126 1 .cse128)))) (res .cse127 (res .cse126 (res .cse128 .cse129 (farkas 1 .cse128 1 .cse126)) (=-1 .cse125)) (=+2 .cse125)))))) (cong (and .cse127 .cse124) (and .cse126 .cse124))))) (cong (=> .cse122 .cse51) (=> .cse123 .cse30)))) (res (= .cse130 .cse130) (refl .cse130) (cong (=> .cse130 .cse50) (=> .cse130 .cse29)))) (cong (and .cse49 .cse32) (and .cse31 .cse32)))) (res (= .cse131 .cse132) (res (= .cse133 .cse133) (refl .cse133) (let ((.cse134 (= .cse136 .cse135))) (res .cse134 (res .cse134 (>=def 0 call4formal@out_x@0) (let ((.cse137 (< 0 call4formal@out_x@0))) (let-proof ((.cse138 (total call4formal@out_x@0 0))) (res .cse135 (res .cse136 (=+1 .cse134) (res .cse135 (=-2 .cse134) (res .cse137 .cse138 (farkas 1 .cse135 1 .cse137)))) (res .cse136 (res .cse135 (res .cse137 .cse138 (farkas 1 .cse137 1 .cse135)) (=-1 .cse134)) (=+2 .cse134)))))) (cong (and .cse136 .cse133) (and .cse135 .cse133))))) (cong (=> .cse131 .cse48) (=> .cse132 .cse34)))) (res (= .cse139 .cse139) (refl .cse139) (cong (=> .cse139 .cse47) (=> .cse139 .cse33)))) (cong (and .cse46 .cse36) (and .cse35 .cse36)))) (res (= .cse140 .cse140) (refl .cse140) (cong (=> .cse140 .cse45) (=> .cse140 .cse37)))) (res (= .cse141 .cse141) (refl .cse141) (cong (=> .cse141 .cse44) (=> .cse141 .cse38)))) (cong (not .cse40) (not .cse39))) (=-2 .cse43)))) (not- .cse41))) (res .cse42 (assume .cse42) (not- .cse42)))))))))))))))))))))))))))))))) :proves (- .cse35 - .cse36) :input))) :proves (- .cse35) :rup))))) :proves (- .cse33) :rup))))))) :proves (- .cse31) :rup))))) :proves (- .cse29) :rup)))))))))) :proves (- .cse23) :rup))))) :proves (- .cse22) :rup))))))))) :proves (- .cse21) :rup)))) :proves (- .cse20) :rup)))) :proves (- .cse8) :rup))))))))))) :proves (- .cse5) :rup)))) :proves (- .cse1) :rup))))) :proves (+ .cse0) :rup) (! (let ((.cse146 (not .cse2))) (res .cse2 (let ((.cse145 (not .cse0))) (res .cse145 (res .cse146 (not+ .cse146) (let ((.cse147 (= .cse146 .cse145))) (res .cse147 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse147)))) (not- .cse145))) (res .cse146 (assume .cse146) (not- .cse146)))) :proves (- .cse0) :input)))))) :proves () :rup)

