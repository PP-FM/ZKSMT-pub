unsat
(! (let ((.cse55 (* (- 1) x@1))) (let ((.cse48 (ControlFlow 0 3)) (.cse52 (<= .cse55 0))) (let ((.cse50 (not .cse52)) (.cse43 (= .cse48 (- 2)))) (let ((.cse41 (and .cse50 .cse43))) (let ((.cse24 (and (= x@1 0) (= (ControlFlow 0 5) 3))) (.cse4 (=> .cse41 false)) (.cse64 (ControlFlow 0 6))) (let ((.cse26 (= .cse64 5)) (.cse3 (=> .cse24 .cse4))) (let ((.cse1 (=> (= .cse64 1) true)) (.cse2 (=> .cse26 .cse3)) (.cse33 (* (- 1) x@0))) (let ((.cse29 (<= .cse33 0)) (.cse6 (and .cse1 .cse2))) (let ((.cse0 (=> .cse29 .cse6))) (let-proof ((.cse5 (! (res .cse41 (! (=>+ 0 .cse4) :proves (+ .cse4 + .cse41) :input) (! (let ((.cse58 (= (- 2) .cse48))) (let ((.cse59 (= .cse43 .cse58))) (let-proof ((.cse60 (res .cse58 (res .cse43 (=+1 .cse59) (symm (- 2) .cse48)) (res .cse43 (symm .cse48 (- 2)) (=+2 .cse59))))) (res .cse58 (! (res .cse43 (and- 1 .cse41) (res .cse59 .cse60 (=-2 .cse59))) :proves (- .cse41 + .cse58) :input) (! (let ((.cse62 (not .cse43))) (res .cse43 (let ((.cse61 (not .cse58))) (res .cse61 (res .cse62 (not+ .cse62) (let ((.cse63 (= .cse62 .cse61))) (res .cse63 (res .cse59 .cse60 (cong (not .cse43) (not .cse58))) (=-2 .cse63)))) (not- .cse61))) (res .cse62 (assume .cse62) (not- .cse62)))) :proves (- .cse58) :input))))) :proves (- .cse41) :rup)) :proves (+ .cse4) :rup))) (res .cse0 (! (res .cse1 (! (res true true+ (=>+ 1 .cse1)) :proves (+ .cse1) :input) (res .cse2 (! (res .cse3 (! (res .cse4 .cse5 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse4) :input)) :proves (+ .cse3) :rup) (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse3) :input)) :proves (+ .cse2) :rup) (! (res .cse6 (and+ .cse6) (=>+ 1 .cse0)) :proves (+ .cse0 - .cse2 - .cse1) :input))) :proves (+ .cse0) :rup) (let ((.cse57 (ControlFlow 0 7))) (let ((.cse35 (= .cse57 6))) (let ((.cse7 (=> .cse35 .cse0))) (res .cse7 (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse0) :input) (! (let ((.cse38 (and (= x@1 x) (= (ControlFlow 0 4) 3)))) (let ((.cse39 (= .cse57 4)) (.cse9 (=> .cse38 .cse4))) (let ((.cse8 (=> .cse39 .cse9))) (res .cse8 (! (res .cse9 (! (res .cse4 .cse5 (! (=>+ 1 .cse9) :proves (+ .cse9 - .cse4) :input)) :proves (+ .cse9) :rup) (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse9) :input)) :proves (+ .cse8) :rup) (! (let ((.cse10 (and .cse8 .cse7))) (res .cse10 (and+ .cse10) (let ((.cse56 (= (ControlFlow 0 0) 7))) (let ((.cse11 (=> .cse56 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse44 (- 0 2))) (let ((.cse51 (< x@1 0)) (.cse42 (= .cse48 .cse44))) (let ((.cse40 (and .cse51 .cse42))) (let ((.cse25 (=> .cse40 false))) (let ((.cse21 (=> .cse24 .cse25))) (let ((.cse20 (=> .cse26 .cse21))) (let ((.cse30 (>= x@0 0)) (.cse19 (and .cse1 .cse20))) (let ((.cse18 (=> .cse30 .cse19)) (.cse37 (=> .cse38 .cse25))) (let ((.cse36 (=> .cse39 .cse37)) (.cse17 (=> .cse35 .cse18))) (let ((.cse16 (and .cse36 .cse17))) (let ((.cse12 (=> .cse56 .cse16))) (let ((.cse14 (not .cse12))) (res .cse12 (let ((.cse13 (not .cse11))) (res .cse13 (res .cse14 (not+ .cse14) (let ((.cse15 (= .cse14 .cse13))) (res .cse15 (res (= .cse12 .cse11) (res (= .cse16 .cse10) (let ((.cse22 (= .cse25 .cse4))) (let-proof ((.cse23 (res (= false false) (refl false) (res (= .cse40 .cse41) (res (= .cse42 .cse43) (res (= .cse44 (- 2)) (let ((.cse45 (* (- 1) 2))) (res (= .cse45 (- 2)) (poly* .cse45 (- 2)) (res (= 0 0) (refl 0) (let ((.cse46 (+ 0 .cse45)) (.cse47 (+ 0 (- 2)))) (res (= .cse46 .cse47) (cong (+ 0 .cse45) (+ 0 (- 2))) (res (= .cse44 .cse46) (-def 0 2) (res (= .cse47 (- 2)) (poly+ .cse47 (- 2)) (trans .cse44 .cse46 .cse47 (- 2))))))))) (res (= .cse48 .cse48) (refl .cse48) (cong (= .cse48 .cse44) (= .cse48 (- 2))))) (let ((.cse49 (= .cse51 .cse50))) (res .cse49 (res .cse50 (res .cse51 (=+1 .cse49) (res .cse52 (not+ .cse50) (farkas 1 .cse51 1 .cse52))) (res .cse51 (let ((.cse53 (<= 0 x@1))) (res .cse53 (total 0 x@1) (res .cse52 (let ((.cse54 (< 0 .cse55))) (res .cse54 (total .cse55 0) (farkas 1 .cse53 1 .cse54))) (not- .cse50)))) (=+2 .cse49))) (cong (and .cse51 .cse42) (and .cse50 .cse43))))) (cong (=> .cse40 false) (=> .cse41 false)))))) (res (= .cse17 .cse7) (res (= .cse18 .cse0) (res (= .cse19 .cse6) (res (= .cse20 .cse2) (res (= .cse21 .cse3) (res .cse22 .cse23 (res (= .cse24 .cse24) (refl .cse24) (cong (=> .cse24 .cse25) (=> .cse24 .cse4)))) (res (= .cse26 .cse26) (refl .cse26) (cong (=> .cse26 .cse21) (=> .cse26 .cse3)))) (res (= .cse1 .cse1) (refl .cse1) (cong (and .cse1 .cse20) (and .cse1 .cse2)))) (let ((.cse27 (= .cse30 .cse29))) (res .cse27 (let ((.cse31 (<= 0 x@0))) (let ((.cse28 (= .cse30 .cse31))) (res .cse28 (>=def x@0 0) (res .cse29 (res .cse30 (=+1 .cse27) (res .cse31 (=-2 .cse28) (let ((.cse32 (< 0 .cse33))) (res .cse32 (total .cse33 0) (farkas 1 .cse31 1 .cse32))))) (res .cse30 (res .cse31 (let ((.cse34 (< x@0 0))) (res .cse34 (total 0 x@0) (farkas 1 .cse34 1 .cse29))) (=-1 .cse28)) (=+2 .cse27)))))) (cong (=> .cse30 .cse19) (=> .cse29 .cse6))))) (res (= .cse35 .cse35) (refl .cse35) (cong (=> .cse35 .cse18) (=> .cse35 .cse0)))) (res (= .cse36 .cse8) (res (= .cse37 .cse9) (res .cse22 .cse23 (res (= .cse38 .cse38) (refl .cse38) (cong (=> .cse38 .cse25) (=> .cse38 .cse4)))) (res (= .cse39 .cse39) (refl .cse39) (cong (=> .cse39 .cse37) (=> .cse39 .cse9)))) (cong (and .cse36 .cse17) (and .cse8 .cse7)))))) (res (= .cse56 .cse56) (refl .cse56) (cong (=> .cse56 .cse16) (=> .cse56 .cse10)))) (cong (not .cse12) (not .cse11))) (=-2 .cse15)))) (not- .cse13))) (res .cse14 (assume .cse14) (not- .cse14)))))))))))))))))))) :proves (- .cse8 - .cse7) :input))))) :proves (- .cse7) :rup)))))))))))))))) :proves () :rup)

