unsat
(! (let-proof ((.cse30 false-)) (res false (let ((.cse27 (= (ControlFlow 0 3) 2))) (let ((.cse0 (and false .cse27))) (res .cse0 (let ((.cse25 (ControlFlow 0 2))) (let ((.cse18 (= .cse25 (- 1)))) (let ((.cse9 (=> .cse18 false))) (let ((.cse1 (=> .cse0 .cse9))) (res .cse1 (=>+ 0 .cse1) (let ((.cse31 (= (ControlFlow 0 0) 3))) (let ((.cse2 (=> .cse31 .cse1))) (res .cse2 (=>+ 1 .cse2) (let ((.cse21 (= 0 0)) (.cse16 (= 1 1)) (.cse19 (- 0 1))) (let ((.cse17 (= .cse25 .cse19)) (.cse10 (not .cse16)) (.cse28 (not .cse21))) (let ((.cse26 (and .cse28 .cse27)) (.cse8 (=> .cse17 .cse10))) (let ((.cse7 (=> .cse26 .cse8))) (let ((.cse3 (=> .cse31 .cse7))) (let ((.cse5 (not .cse3))) (res .cse3 (let ((.cse4 (not .cse2))) (res .cse4 (res .cse5 (not+ .cse5) (let ((.cse6 (= .cse5 .cse4))) (res .cse6 (res (= .cse3 .cse2) (res (= .cse7 .cse1) (let ((.cse13 (not true))) (let ((.cse11 (= .cse13 false))) (let-proof ((.cse15 true+)) (let-proof ((.cse12 (res false (res .cse13 (=+1 .cse11) (res true .cse15 (not- .cse13))) .cse30)) (.cse22 (refl 0))) (res (= .cse8 .cse9) (res (= .cse10 false) (res .cse11 .cse12 (res (= .cse10 .cse13) (let ((.cse14 (= .cse16 true))) (res .cse14 (res true .cse15 (res .cse16 (refl 1) (=+2 .cse14))) (cong (not .cse16) (not true)))) (trans .cse10 .cse13 false))) (res (= .cse17 .cse18) (res (= .cse19 (- 1)) (let ((.cse20 (* (- 1) 1))) (res (= .cse20 (- 1)) (poly* .cse20 (- 1)) (res .cse21 .cse22 (let ((.cse23 (+ 0 .cse20)) (.cse24 (+ 0 (- 1)))) (res (= .cse23 .cse24) (cong (+ 0 .cse20) (+ 0 (- 1))) (res (= .cse19 .cse23) (-def 0 1) (res (= .cse24 (- 1)) (poly+ .cse24 (- 1)) (trans .cse19 .cse23 .cse24 (- 1))))))))) (res (= .cse25 .cse25) (refl .cse25) (cong (= .cse25 .cse19) (= .cse25 (- 1))))) (cong (=> .cse17 .cse10) (=> .cse18 false)))) (res (= .cse26 .cse0) (res (= .cse27 .cse27) (refl .cse27) (res (= .cse28 false) (res .cse11 .cse12 (res (= .cse28 .cse13) (let ((.cse29 (= .cse21 true))) (res .cse29 (res true .cse15 (res .cse21 .cse22 (=+2 .cse29))) (cong (not .cse21) (not true)))) (trans .cse28 .cse13 false))) (cong (and .cse28 .cse27) (and false .cse27)))) (cong (=> .cse26 .cse8) (=> .cse0 .cse9)))))))) (res (= .cse31 .cse31) (refl .cse31) (cong (=> .cse31 .cse7) (=> .cse31 .cse1)))) (cong (not .cse3) (not .cse2))) (=-2 .cse6)))) (not- .cse4))) (res .cse5 (assume .cse5) (not- .cse5))))))))))))))))) (and- 0 .cse0)))) .cse30)) :proves () :input)

