unsat
(! (let ((.cse16 (+ call1formal@r@0 (- 42)))) (let ((.cse53 (ControlFlow 0 2)) (.cse0 (<= .cse16 0))) (let ((.cse72 (* (- 1) call1formal@r@0)) (.cse18 (not .cse0)) (.cse44 (= .cse53 (- 1)))) (let ((.cse17 (and .cse18 .cse44)) (.cse3 (<= .cse72 0))) (let ((.cse10 (< 0 .cse72)) (.cse2 (=> .cse17 .cse3))) (let-proof ((.cse11 (total .cse72 0)) (.cse19 (not- .cse18))) (let-proof ((.cse14 (! (let ((.cse22 (<= n 0))) (let ((.cse23 (not .cse22))) (let ((.cse20 (=> .cse23 .cse2))) (res .cse20 (! (=>+ 1 .cse20) :proves (+ .cse20 - .cse2) :input) (! (let ((.cse63 (= .cse53 (- 3)))) (let ((.cse21 (=> .cse63 .cse23)) (.cse69 (= (ControlFlow 0 4) 2))) (let ((.cse25 (and .cse23 .cse69)) (.cse29 (and .cse21 .cse20))) (let ((.cse26 (=> .cse25 .cse29))) (let-proof ((.cse24 (not+ .cse23)) (.cse28 (not- .cse23))) (let-proof ((.cse27 (let ((.cse71 (= (ControlFlow 0 0) 4))) (let ((.cse30 (=> .cse71 .cse26))) (res .cse30 (=>+ 1 .cse30) (let ((.cse45 (- 0 1))) (let ((.cse55 (< 42 call1formal@r@0)) (.cse43 (= .cse53 .cse45))) (let ((.cse64 (- 0 3)) (.cse42 (and .cse55 .cse43)) (.cse40 (<= 0 call1formal@r@0))) (let ((.cse38 (=> .cse42 .cse40)) (.cse62 (= .cse53 .cse64)) (.cse60 (< 0 n))) (let ((.cse61 (=> .cse62 .cse60)) (.cse37 (=> .cse60 .cse38))) (let ((.cse68 (and .cse60 .cse69)) (.cse36 (and .cse61 .cse37))) (let ((.cse35 (=> .cse68 .cse36))) (let ((.cse31 (=> .cse71 .cse35))) (let ((.cse33 (not .cse31))) (res .cse31 (let ((.cse32 (not .cse30))) (res .cse32 (res .cse33 (not+ .cse33) (let ((.cse34 (= .cse33 .cse32))) (res .cse34 (res (= .cse31 .cse30) (res (= .cse35 .cse26) (let ((.cse58 (= .cse60 .cse23))) (let-proof ((.cse59 (res .cse23 (res .cse60 (=+1 .cse58) (res .cse22 .cse24 (farkas 1 .cse60 1 .cse22))) (res .cse60 (let-proof ((.cse70 (total n 0))) (res .cse22 .cse70 (res .cse22 (res .cse60 .cse70 (farkas 1 .cse22 1 .cse60)) .cse28))) (=+2 .cse58))))) (res (= .cse36 .cse29) (let ((.cse47 (= 0 0)) (.cse51 (= .cse53 .cse53))) (let-proof ((.cse48 (refl 0)) (.cse52 (refl .cse53))) (res (= .cse37 .cse20) (res (= .cse38 .cse2) (let ((.cse39 (= .cse40 .cse3))) (res .cse39 (res .cse3 (res .cse40 (=+1 .cse39) (res .cse10 .cse11 (farkas 1 .cse40 1 .cse10))) (res .cse40 (let ((.cse41 (< call1formal@r@0 0))) (res .cse41 (total 0 call1formal@r@0) (farkas 1 .cse41 1 .cse3))) (=+2 .cse39))) (res (= .cse42 .cse17) (res (= .cse43 .cse44) (res (= .cse45 (- 1)) (let ((.cse46 (* (- 1) 1))) (res (= .cse46 (- 1)) (poly* .cse46 (- 1)) (res .cse47 .cse48 (let ((.cse49 (+ 0 .cse46)) (.cse50 (+ 0 (- 1)))) (res (= .cse49 .cse50) (cong (+ 0 .cse46) (+ 0 (- 1))) (res (= .cse45 .cse49) (-def 0 1) (res (= .cse50 (- 1)) (poly+ .cse50 (- 1)) (trans .cse45 .cse49 .cse50 (- 1))))))))) (res .cse51 .cse52 (cong (= .cse53 .cse45) (= .cse53 (- 1))))) (let ((.cse54 (= .cse55 .cse18))) (res .cse54 (res .cse18 (res .cse55 (=+1 .cse54) (res .cse0 (not+ .cse18) (farkas 1 .cse55 1 .cse0))) (res .cse55 (let ((.cse56 (<= call1formal@r@0 42))) (res .cse56 (total call1formal@r@0 42) (res .cse0 (let ((.cse57 (< 0 .cse16))) (res .cse57 (total .cse16 0) (farkas 1 .cse56 1 .cse57))) .cse19))) (=+2 .cse54))) (cong (and .cse55 .cse43) (and .cse18 .cse44))))) (cong (=> .cse42 .cse40) (=> .cse17 .cse3))))) (res .cse58 .cse59 (cong (=> .cse60 .cse38) (=> .cse23 .cse2)))) (res (= .cse61 .cse21) (res .cse58 .cse59 (res (= .cse62 .cse63) (res (= .cse64 (- 3)) (let ((.cse65 (* (- 1) 3))) (res (= .cse65 (- 3)) (poly* .cse65 (- 3)) (res .cse47 .cse48 (let ((.cse66 (+ 0 .cse65)) (.cse67 (+ 0 (- 3)))) (res (= .cse66 .cse67) (cong (+ 0 .cse65) (+ 0 (- 3))) (res (= .cse64 .cse66) (-def 0 3) (res (= .cse67 (- 3)) (poly+ .cse67 (- 3)) (trans .cse64 .cse66 .cse67 (- 3))))))))) (res .cse51 .cse52 (cong (= .cse53 .cse64) (= .cse53 (- 3))))) (cong (=> .cse62 .cse60) (=> .cse63 .cse23)))) (cong (and .cse61 .cse37) (and .cse21 .cse20)))))) (res (= .cse68 .cse25) (res (= .cse69 .cse69) (refl .cse69) (res .cse58 .cse59 (cong (and .cse60 .cse69) (and .cse23 .cse69)))) (cong (=> .cse68 .cse36) (=> .cse25 .cse29)))))) (res (= .cse71 .cse71) (refl .cse71) (cong (=> .cse71 .cse35) (=> .cse71 .cse26)))) (cong (not .cse31) (not .cse30))) (=-2 .cse34)))) (not- .cse32))) (res .cse33 (assume .cse33) (not- .cse33))))))))))))))))) (res .cse21 (! (res .cse22 (! (res .cse23 .cse24 (=>+ 1 .cse21)) :proves (+ .cse21 + .cse22) :input) (! (res .cse25 (res .cse26 (=>+ 0 .cse26) .cse27) (res .cse23 (and- 0 .cse25) .cse28)) :proves (- .cse22) :input)) :proves (+ .cse21) :rup) (! (res .cse29 (and+ .cse29) (res .cse26 (=>+ 1 .cse26) .cse27)) :proves (- .cse21 - .cse20) :input)))))))) :proves (- .cse20) :rup))))) :proves (- .cse2) :rup))) (res .cse0 (! (let ((.cse13 (+ call1formal@r@0 1))) (let ((.cse1 (<= .cse13 0))) (res .cse1 (! (res .cse2 (! (res .cse3 (let ((.cse4 (not .cse1))) (let-proof ((.cse5 (not+ .cse4))) (res .cse4 .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (let ((.cse7 (not .cse3))) (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (let ((.cse9 (= .cse3 .cse4))) (res .cse9 (res .cse4 (res .cse3 (=+1 .cse9) (res .cse1 .cse5 (farkas 1 .cse3 1 .cse1))) (res .cse3 (res .cse10 .cse11 (res .cse1 (let ((.cse12 (<= 1 .cse13))) (res .cse12 (total-int .cse13 0) (farkas 1 .cse10 1 .cse12))) (not- .cse4))) (=+2 .cse9))) (cong (not .cse3) (not .cse4)))) (=-2 .cse8))))) (not- .cse6)))))) (=>+ 1 .cse2)) :proves (+ .cse2 + .cse1) :input) .cse14) :proves (+ .cse1) :rup) (! (let ((.cse15 (<= 1 .cse16))) (res .cse15 (total-int .cse16 0) (farkas 1 .cse1 1 .cse15))) :proves (- .cse1 + .cse0) :LA (1 (- 1)))))) :proves (+ .cse0) :rup) (res .cse17 (! (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + .cse17) :input) .cse14) :proves (+ .cse17) :rup) (! (res .cse18 (and- 0 .cse17) .cse19) :proves (- .cse17 - .cse0) :input)))))))))) :proves () :rup)

