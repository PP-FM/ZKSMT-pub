unsat
(! (let ((.cse39 (ControlFlow 0 2))) (let ((.cse46 (* (- 1) n)) (.cse40 (=> assume$$s1 (= n 3))) (.cse34 (= .cse39 (- 1)))) (let ((.cse0 (<= n 0)) (.cse32 (and .cse40 .cse34)) (.cse2 (<= .cse46 0))) (let ((.cse13 (=> .cse32 .cse2)) (.cse17 (not .cse0))) (let ((.cse9 (< 0 .cse46)) (.cse14 (=> .cse17 .cse13))) (let-proof ((.cse10 (total .cse46 0)) (.cse18 (not- .cse17))) (let-proof ((.cse15 (let ((.cse44 (= (ControlFlow 0 3) 2))) (let ((.cse19 (=> .cse44 .cse14))) (res .cse19 (=>+ 1 .cse19) (let ((.cse45 (= (ControlFlow 0 0) 3))) (let ((.cse20 (=> .cse45 .cse19))) (res .cse20 (=>+ 1 .cse20) (let ((.cse35 (- 0 1))) (let ((.cse33 (= .cse39 .cse35))) (let ((.cse31 (and .cse40 .cse33)) (.cse29 (<= 0 n))) (let ((.cse42 (< 0 n)) (.cse27 (=> .cse31 .cse29))) (let ((.cse26 (=> .cse42 .cse27))) (let ((.cse25 (=> .cse44 .cse26))) (let ((.cse21 (=> .cse45 .cse25))) (let ((.cse23 (not .cse21))) (res .cse21 (let ((.cse22 (not .cse20))) (res .cse22 (res .cse23 (not+ .cse23) (let ((.cse24 (= .cse23 .cse22))) (res .cse24 (res (= .cse21 .cse20) (res (= .cse25 .cse19) (res (= .cse26 .cse14) (res (= .cse27 .cse13) (let ((.cse28 (= .cse29 .cse2))) (res .cse28 (res .cse2 (res .cse29 (=+1 .cse28) (res .cse9 .cse10 (farkas 1 .cse29 1 .cse9))) (res .cse29 (let ((.cse30 (< n 0))) (res .cse30 (total 0 n) (farkas 1 .cse30 1 .cse2))) (=+2 .cse28))) (res (= .cse31 .cse32) (res (= .cse33 .cse34) (res (= .cse35 (- 1)) (let ((.cse36 (* (- 1) 1))) (res (= .cse36 (- 1)) (poly* .cse36 (- 1)) (res (= 0 0) (refl 0) (let ((.cse37 (+ 0 .cse36)) (.cse38 (+ 0 (- 1)))) (res (= .cse37 .cse38) (cong (+ 0 .cse36) (+ 0 (- 1))) (res (= .cse35 .cse37) (-def 0 1) (res (= .cse38 (- 1)) (poly+ .cse38 (- 1)) (trans .cse35 .cse37 .cse38 (- 1))))))))) (res (= .cse39 .cse39) (refl .cse39) (cong (= .cse39 .cse35) (= .cse39 (- 1))))) (res (= .cse40 .cse40) (refl .cse40) (cong (and .cse40 .cse33) (and .cse40 .cse34)))) (cong (=> .cse31 .cse29) (=> .cse32 .cse2))))) (let ((.cse41 (= .cse42 .cse17))) (res .cse41 (res .cse17 (res .cse42 (=+1 .cse41) (res .cse0 (not+ .cse17) (farkas 1 .cse42 1 .cse0))) (res .cse42 (let-proof ((.cse43 (total n 0))) (res .cse0 .cse43 (res .cse0 (res .cse42 .cse43 (farkas 1 .cse0 1 .cse42)) .cse18))) (=+2 .cse41))) (cong (=> .cse42 .cse27) (=> .cse17 .cse13))))) (res (= .cse44 .cse44) (refl .cse44) (cong (=> .cse44 .cse26) (=> .cse44 .cse14)))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse25) (=> .cse45 .cse19)))) (cong (not .cse21) (not .cse20))) (=-2 .cse24)))) (not- .cse22))) (res .cse23 (assume .cse23) (not- .cse23))))))))))))))))))) (res .cse0 (! (let ((.cse12 (+ n 1))) (let ((.cse1 (<= .cse12 0))) (res .cse1 (! (res .cse2 (let ((.cse3 (not .cse1))) (let-proof ((.cse4 (not+ .cse3))) (res .cse3 .cse4 (let ((.cse5 (not .cse3))) (res .cse5 (let ((.cse6 (not .cse2))) (res .cse6 (not+ .cse6) (let ((.cse7 (= .cse6 .cse5))) (res .cse7 (let ((.cse8 (= .cse2 .cse3))) (res .cse8 (res .cse3 (res .cse2 (=+1 .cse8) (res .cse1 .cse4 (farkas 1 .cse2 1 .cse1))) (res .cse2 (res .cse9 .cse10 (res .cse1 (let ((.cse11 (<= 1 .cse12))) (res .cse11 (total-int .cse12 0) (farkas 1 .cse9 1 .cse11))) (not- .cse3))) (=+2 .cse8))) (cong (not .cse2) (not .cse3)))) (=-2 .cse7))))) (not- .cse5)))))) (res .cse13 (=>+ 1 .cse13) (res .cse14 (=>+ 1 .cse14) .cse15))) :proves (+ .cse1) :input) (! (let ((.cse16 (<= 1 n))) (res .cse16 (total-int n 0) (farkas 1 .cse16 1 .cse1))) :proves (+ .cse0 - .cse1) :LA ((- 1) 1))))) :proves (+ .cse0) :rup) (! (res .cse14 (res .cse17 (=>+ 0 .cse14) .cse18) .cse15) :proves (- .cse0) :input))))))))) :proves () :rup)

