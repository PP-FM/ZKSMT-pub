unsat
(! (let ((.cse23 (ControlFlow 0 2))) (let ((.cse1 (= .cse23 (- 1))) (.cse0 (= (- 1) .cse23))) (let ((.cse32 (= .cse1 .cse0))) (let-proof ((.cse33 (res .cse0 (res .cse1 (=+1 .cse32) (symm (- 1) .cse23)) (res .cse1 (symm .cse23 (- 1)) (=+2 .cse32))))) (res .cse0 (! (res .cse1 (let ((.cse28 (* (- 1) g@0))) (let ((.cse25 (<= .cse28 0))) (let ((.cse2 (and .cse25 .cse1))) (res .cse2 (let ((.cse15 (<= g@0 0))) (let ((.cse13 (not .cse15))) (let ((.cse3 (=> .cse2 .cse13))) (res .cse3 (=>+ 0 .cse3) (let ((.cse30 (= (ControlFlow 0 3) 2))) (let ((.cse4 (=> .cse30 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse31 (= (ControlFlow 0 0) 3))) (let ((.cse5 (=> .cse31 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse19 (- 0 1))) (let ((.cse26 (<= 0 g@0)) (.cse18 (= .cse23 .cse19))) (let ((.cse17 (and .cse26 .cse18)) (.cse14 (< 0 g@0))) (let ((.cse11 (=> .cse17 .cse14))) (let ((.cse10 (=> .cse30 .cse11))) (let ((.cse6 (=> .cse31 .cse10))) (let ((.cse8 (not .cse6))) (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res (= .cse6 .cse5) (res (= .cse10 .cse4) (res (= .cse11 .cse3) (let ((.cse12 (= .cse14 .cse13))) (res .cse12 (res .cse13 (res .cse14 (=+1 .cse12) (res .cse15 (not+ .cse13) (farkas 1 .cse14 1 .cse15))) (res .cse14 (let-proof ((.cse16 (total g@0 0))) (res .cse15 .cse16 (res .cse15 (res .cse14 .cse16 (farkas 1 .cse15 1 .cse14)) (not- .cse13)))) (=+2 .cse12))) (res (= .cse17 .cse2) (res (= .cse18 .cse1) (res (= .cse19 (- 1)) (let ((.cse20 (* (- 1) 1))) (res (= .cse20 (- 1)) (poly* .cse20 (- 1)) (res (= 0 0) (refl 0) (let ((.cse21 (+ 0 .cse20)) (.cse22 (+ 0 (- 1)))) (res (= .cse21 .cse22) (cong (+ 0 .cse20) (+ 0 (- 1))) (res (= .cse19 .cse21) (-def 0 1) (res (= .cse22 (- 1)) (poly+ .cse22 (- 1)) (trans .cse19 .cse21 .cse22 (- 1))))))))) (res (= .cse23 .cse23) (refl .cse23) (cong (= .cse23 .cse19) (= .cse23 (- 1))))) (let ((.cse24 (= .cse26 .cse25))) (res .cse24 (res .cse25 (res .cse26 (=+1 .cse24) (let ((.cse27 (< 0 .cse28))) (res .cse27 (total .cse28 0) (farkas 1 .cse26 1 .cse27)))) (res .cse26 (let ((.cse29 (< g@0 0))) (res .cse29 (total 0 g@0) (farkas 1 .cse29 1 .cse25))) (=+2 .cse24))) (cong (and .cse26 .cse18) (and .cse25 .cse1))))) (cong (=> .cse17 .cse14) (=> .cse2 .cse13))))) (res (= .cse30 .cse30) (refl .cse30) (cong (=> .cse30 .cse11) (=> .cse30 .cse3)))) (res (= .cse31 .cse31) (refl .cse31) (cong (=> .cse31 .cse10) (=> .cse31 .cse4)))) (cong (not .cse6) (not .cse5))) (=-2 .cse9)))) (not- .cse7))) (res .cse8 (assume .cse8) (not- .cse8)))))))))))))))))))) (and- 1 .cse2))))) (res .cse32 .cse33 (=-2 .cse32))) :proves (+ .cse0) :input) (! (let ((.cse35 (not .cse1))) (res .cse1 (let ((.cse34 (not .cse0))) (res .cse34 (res .cse35 (not+ .cse35) (let ((.cse36 (= .cse35 .cse34))) (res .cse36 (res .cse32 .cse33 (cong (not .cse1) (not .cse0))) (=-2 .cse36)))) (not- .cse34))) (res .cse35 (assume .cse35) (not- .cse35)))) :proves (- .cse0) :input)))))) :proves () :rup)

