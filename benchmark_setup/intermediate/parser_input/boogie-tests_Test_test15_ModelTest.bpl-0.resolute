unsat
(! (let ((.cse15 (ControlFlow 0 2))) (let ((.cse66 (= .cse15 (- 1))) (.cse64 (= s r)) (.cse43 (+ i@0 1)) (.cse19 (+ j@1 1)) (.cse28 (+ j@0 1))) (let ((.cse25 (= j@1 .cse28)) (.cse2 (= j@2 .cse19)) (.cse86 (= i@0 1)) (.cse37 (= j@0 .cse43)) (.cse63 (=> .cse66 .cse64)) (.cse9 (= .cse15 (- 3))) (.cse5 (= i@0 j@2))) (let ((.cse7 (=> .cse9 .cse5)) (.cse6 (=> .cse5 .cse63)) (.cse38 (and .cse86 .cse37)) (.cse3 (and .cse25 .cse2))) (let ((.cse39 (and .cse38 .cse3)) (.cse16 (and .cse7 .cse6))) (let ((.cse17 (=> .cse39 .cse16))) (let ((.cse51 (* (- 1) i@0))) (let-proof ((.cse18 (let ((.cse88 (= (ControlFlow 0 4) 2))) (let ((.cse52 (=> .cse88 .cse17))) (res .cse52 (=>+ 1 .cse52) (let ((.cse89 (= (ControlFlow 0 0) 4))) (let ((.cse53 (=> .cse89 .cse52))) (res .cse53 (=>+ 1 .cse53) (let ((.cse67 (- 0 1))) (let ((.cse79 (- 0 3)) (.cse65 (= .cse15 .cse67)) (.cse87 (+ 0 1))) (let ((.cse85 (= i@0 .cse87)) (.cse62 (=> .cse65 .cse64)) (.cse78 (= .cse15 .cse79))) (let ((.cse77 (=> .cse78 .cse5)) (.cse61 (=> .cse5 .cse62)) (.cse84 (and .cse85 .cse37))) (let ((.cse83 (and .cse84 .cse3)) (.cse60 (and .cse77 .cse61))) (let ((.cse59 (=> .cse83 .cse60))) (let ((.cse58 (=> .cse88 .cse59))) (let ((.cse54 (=> .cse89 .cse58))) (let ((.cse56 (not .cse54))) (res .cse54 (let ((.cse55 (not .cse53))) (res .cse55 (res .cse56 (not+ .cse56) (let ((.cse57 (= .cse56 .cse55))) (res .cse57 (res (= .cse54 .cse53) (res (= .cse58 .cse52) (res (= .cse59 .cse17) (res (= .cse60 .cse16) (let ((.cse75 (= .cse5 .cse5)) (.cse69 (= 0 0)) (.cse73 (= .cse15 .cse15))) (let-proof ((.cse76 (refl .cse5)) (.cse70 (refl 0)) (.cse74 (refl .cse15))) (res (= .cse61 .cse6) (res (= .cse62 .cse63) (res (= .cse64 .cse64) (refl .cse64) (res (= .cse65 .cse66) (res (= .cse67 (- 1)) (let ((.cse68 (* (- 1) 1))) (res (= .cse68 (- 1)) (poly* .cse68 (- 1)) (res .cse69 .cse70 (let ((.cse71 (+ 0 .cse68)) (.cse72 (+ 0 (- 1)))) (res (= .cse71 .cse72) (cong (+ 0 .cse68) (+ 0 (- 1))) (res (= .cse67 .cse71) (-def 0 1) (res (= .cse72 (- 1)) (poly+ .cse72 (- 1)) (trans .cse67 .cse71 .cse72 (- 1))))))))) (res .cse73 .cse74 (cong (= .cse15 .cse67) (= .cse15 (- 1))))) (cong (=> .cse65 .cse64) (=> .cse66 .cse64)))) (res .cse75 .cse76 (cong (=> .cse5 .cse62) (=> .cse5 .cse63)))) (res (= .cse77 .cse7) (res .cse75 .cse76 (res (= .cse78 .cse9) (res (= .cse79 (- 3)) (let ((.cse80 (* (- 1) 3))) (res (= .cse80 (- 3)) (poly* .cse80 (- 3)) (res .cse69 .cse70 (let ((.cse81 (+ 0 .cse80)) (.cse82 (+ 0 (- 3)))) (res (= .cse81 .cse82) (cong (+ 0 .cse80) (+ 0 (- 3))) (res (= .cse79 .cse81) (-def 0 3) (res (= .cse82 (- 3)) (poly+ .cse82 (- 3)) (trans .cse79 .cse81 .cse82 (- 3))))))))) (res .cse73 .cse74 (cong (= .cse15 .cse79) (= .cse15 (- 3))))) (cong (=> .cse78 .cse5) (=> .cse9 .cse5)))) (cong (and .cse77 .cse61) (and .cse7 .cse6)))))) (res (= .cse83 .cse39) (res (= .cse3 .cse3) (refl .cse3) (res (= .cse84 .cse38) (res (= .cse37 .cse37) (refl .cse37) (res (= .cse85 .cse86) (res (= .cse87 1) (poly+ .cse87 1) (res (= i@0 i@0) (refl i@0) (cong (= i@0 .cse87) (= i@0 1)))) (cong (and .cse85 .cse37) (and .cse86 .cse37)))) (cong (and .cse84 .cse3) (and .cse38 .cse3)))) (cong (=> .cse83 .cse60) (=> .cse39 .cse16)))) (res (= .cse88 .cse88) (refl .cse88) (cong (=> .cse88 .cse59) (=> .cse88 .cse17)))) (res (= .cse89 .cse89) (refl .cse89) (cong (=> .cse89 .cse58) (=> .cse89 .cse52)))) (cong (not .cse54) (not .cse53))) (=-2 .cse57)))) (not- .cse55))) (res .cse56 (assume .cse56) (not- .cse56)))))))))))))))))))) (let ((.cse23 (+ j@1 .cse51 1))) (let-proof ((.cse40 (res .cse17 (=>+ 0 .cse17) .cse18))) (let ((.cse0 (= .cse23 0))) (let-proof ((.cse4 (res .cse39 .cse40 (and- 1 .cse39)))) (res .cse0 (! (let ((.cse1 (= i@0 .cse19))) (res .cse1 (! (res .cse2 (! (res .cse3 .cse4 (and- 1 .cse3)) :proves (+ .cse2) :input) (res .cse5 (! (res .cse6 (! (=>+ 0 .cse6) :proves (+ .cse6 + .cse5) :input) (! (res .cse7 (! (let ((.cse8 (= (- 3) .cse15))) (let ((.cse10 (= .cse9 .cse8))) (let-proof ((.cse11 (res .cse8 (res .cse9 (=+1 .cse10) (symm (- 3) .cse15)) (res .cse9 (symm .cse15 (- 3)) (=+2 .cse10))))) (res .cse8 (! (res .cse9 (=>+ 0 .cse7) (res .cse10 .cse11 (=-2 .cse10))) :proves (+ .cse7 + .cse8) :input) (! (let ((.cse13 (not .cse9))) (res .cse9 (let ((.cse12 (not .cse8))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res .cse10 .cse11 (cong (not .cse9) (not .cse8))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13)))) :proves (- .cse8) :input))))) :proves (+ .cse7) :rup) (! (res .cse16 (and+ .cse16) (res .cse17 (=>+ 1 .cse17) .cse18)) :proves (- .cse7 - .cse6) :input)) :proves (- .cse6) :rup)) :proves (+ .cse5) :rup) (! (trans i@0 j@2 .cse19) :proves (+ .cse1 - .cse5 - .cse2) :trans (i@0 j@2 .cse19)))) :proves (+ .cse1) :rup) (! (let ((.cse20 (= .cse19 i@0))) (res .cse20 (symm .cse19 i@0) (let ((.cse21 (< .cse23 0))) (res .cse21 (let ((.cse22 (< 0 .cse23))) (res .cse22 (trichotomy .cse23 0) (farkas 1 .cse20 1 .cse22))) (farkas 1 .cse1 1 .cse21))))) :proves (- .cse1 + .cse0) :EQ))) :proves (+ .cse0) :rup) (let ((.cse31 (+ j@1 (* (- 1) j@0) (- 1)))) (let ((.cse24 (= .cse31 0)) (.cse32 (= 0 .cse31))) (let-proof ((.cse33 (symm 0 .cse31))) (res .cse24 (! (res .cse25 (res .cse3 .cse4 (and- 0 .cse3)) (let ((.cse26 (= .cse25 .cse24))) (res .cse26 (res .cse24 (res .cse25 (=+1 .cse26) (let ((.cse27 (= .cse28 j@1))) (res .cse27 (symm .cse28 j@1) (let ((.cse29 (< .cse31 0))) (res .cse29 (let ((.cse30 (< 0 .cse31))) (res .cse30 (trichotomy .cse31 0) (farkas 1 .cse25 1 .cse30))) (farkas 1 .cse27 1 .cse29)))))) (res .cse25 (res .cse32 .cse33 (let ((.cse34 (< j@1 .cse28))) (res .cse34 (let ((.cse35 (< .cse28 j@1))) (res .cse35 (trichotomy j@1 .cse28) (farkas 1 .cse24 1 .cse35))) (farkas 1 .cse32 1 .cse34)))) (=+2 .cse26))) (=-2 .cse26)))) :proves (+ .cse24) :input) (let ((.cse46 (+ j@0 .cse51 (- 1)))) (let ((.cse36 (= .cse46 0)) (.cse47 (= 0 .cse46))) (let-proof ((.cse48 (symm 0 .cse46))) (res .cse36 (! (res .cse37 (res .cse38 (res .cse39 .cse40 (and- 0 .cse39)) (and- 1 .cse38)) (let ((.cse41 (= .cse37 .cse36))) (res .cse41 (res .cse36 (res .cse37 (=+1 .cse41) (let ((.cse42 (= .cse43 j@0))) (res .cse42 (symm .cse43 j@0) (let ((.cse44 (< .cse46 0))) (res .cse44 (let ((.cse45 (< 0 .cse46))) (res .cse45 (trichotomy .cse46 0) (farkas 1 .cse37 1 .cse45))) (farkas 1 .cse42 1 .cse44)))))) (res .cse37 (res .cse47 .cse48 (let ((.cse49 (< j@0 .cse43))) (res .cse49 (let ((.cse50 (< .cse43 j@0))) (res .cse50 (trichotomy j@0 .cse43) (farkas 1 .cse36 1 .cse50))) (farkas 1 .cse47 1 .cse49)))) (=+2 .cse41))) (=-2 .cse41)))) :proves (+ .cse36) :input) (! (res .cse32 .cse33 (res .cse47 .cse48 (farkas 1 .cse47 1 .cse32 1 .cse0))) :proves (- .cse36 - .cse24 - .cse0) :LA ((- 1) (- 1) 1))))))))))))))))))))))) :proves () :rup)

