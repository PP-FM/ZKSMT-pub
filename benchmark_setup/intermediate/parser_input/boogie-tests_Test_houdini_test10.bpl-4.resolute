unsat
(! (let-proof ((.cse0 true+)) (res true .cse0 (let ((.cse1 (=> b1 true))) (res .cse1 (=>+ 1 .cse1) (let ((.cse21 (ControlFlow 0 2))) (let ((.cse16 (= .cse21 (- 1)))) (let ((.cse2 (=> .cse16 .cse1))) (res .cse2 (=>+ 1 .cse2) (let ((.cse22 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse22 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse23 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse23 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse13 (= 0 0)) (.cse17 (- 0 1))) (let ((.cse15 (= .cse21 .cse17)) (.cse11 (=> b1 .cse13))) (let ((.cse10 (=> .cse15 .cse11))) (let ((.cse9 (=> .cse22 .cse10))) (let ((.cse5 (=> .cse23 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (let-proof ((.cse14 (refl 0))) (res (= .cse11 .cse1) (let ((.cse12 (= .cse13 true))) (res .cse12 (res true .cse0 (res .cse13 .cse14 (=+2 .cse12))) (res (= b1 b1) (refl b1) (cong (=> b1 .cse13) (=> b1 true))))) (res (= .cse15 .cse16) (res (= .cse17 (- 1)) (let ((.cse18 (* (- 1) 1))) (res (= .cse18 (- 1)) (poly* .cse18 (- 1)) (res .cse13 .cse14 (let ((.cse19 (+ 0 .cse18)) (.cse20 (+ 0 (- 1)))) (res (= .cse19 .cse20) (cong (+ 0 .cse18) (+ 0 (- 1))) (res (= .cse17 .cse19) (-def 0 1) (res (= .cse20 (- 1)) (poly+ .cse20 (- 1)) (trans .cse17 .cse19 .cse20 (- 1))))))))) (res (= .cse21 .cse21) (refl .cse21) (cong (= .cse21 .cse17) (= .cse21 (- 1))))) (cong (=> .cse15 .cse11) (=> .cse16 .cse1))))) (res (= .cse22 .cse22) (refl .cse22) (cong (=> .cse22 .cse10) (=> .cse22 .cse2)))) (res (= .cse23 .cse23) (refl .cse23) (cong (=> .cse23 .cse9) (=> .cse23 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7))))))))))))))))))))))) :proves () :input)

