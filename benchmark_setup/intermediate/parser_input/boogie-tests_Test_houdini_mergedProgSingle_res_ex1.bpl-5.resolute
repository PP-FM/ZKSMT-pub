unsat
(! (let ((.cse4 (= _v1.in_x _v2.in_x)) (.cse26 (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@2 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@2))) (let ((.cse3 (=> .cse4 .cse26)) (.cse238 (ControlFlow 0 2)) (.cse210 (and (= _v1.in_result _v2.in_result) .cse4))) (let ((.cse160 (= _v1.control_flag _v2.control_flag)) (.cse211 (=> .cse210 (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_result@2 inline$_v2.Eval_loop_anon3_LoopHead$0$out_result@3))) (.cse364 (= .cse238 (- 1))) (.cse2 (=> _houdini_Eval_loop_anon3_LoopHead_out_x_4 .cse3))) (let ((.cse1 (=> .cse364 .cse2)) (.cse232 (= .cse238 (- 3))) (.cse212 (=> _houdini_Eval_loop_anon3_LoopHead_out_result_3 .cse211)) (.cse17 (and .cse160 .cse4)) (.cse159 (= _v1.control_flag@2 _v2.control_flag@2))) (let ((.cse116 (= _v1.Eval_loop_anon3_LoopHead_out_1_1@0 call7formal@_v1.out_x@0)) (.cse16 (=> .cse17 .cse159)) (.cse10 (=> .cse232 .cse212)) (.cse0 (=> .cse212 .cse1)) (.cse174 (= _v1.Eval_loop_anon3_LoopHead_in_1_2@0 _v2.Eval_loop_anon3_LoopHead_in_2_2@0)) (.cse86 (= _v1.Eval_loop_anon3_LoopHead_in_1_1@0 _v2.Eval_loop_anon3_LoopHead_in_2_1@0)) (.cse113 (= call7formal@_v1.out_x@0 call9formal@_v2.out_x@0))) (let ((.cse114 (=> .cse86 .cse113)) (.cse184 (and .cse174 .cse86)) (.cse183 (= _v1.control_flag@3 _v2.control_flag@3)) (.cse226 (and .cse10 .cse0)) (.cse384 (= .cse238 (- 4))) (.cse15 (=> _houdini_Eval_loop_anon3_LoopHead_control_flag_2 .cse16)) (.cse117 (and (= _v1.Eval_loop_anon3_LoopHead_out_1_0@0 call6formal@_v1.out_result@0) .cse116))) (let ((.cse111 (and .cse117 (= _v2.Eval_loop_anon3_LoopHead_out_2_0@0 call8formal@_v2.out_result@0))) (.cse112 (= _v2.Eval_loop_anon3_LoopHead_out_2_1@0 call9formal@_v2.out_x@0)) (.cse14 (=> .cse384 .cse15)) (.cse12 (=> .cse15 .cse226)) (.cse391 (= .cse238 (- 5))) (.cse185 (=> .cse184 .cse183)) (.cse188 (= _v1.control_flag@3 _v1.Eval_loop_anon3_LoopHead_out_1_2@0)) (.cse189 (= _v2.control_flag@3 _v2.Eval_loop_anon3_LoopHead_out_2_2@0)) (.cse115 (=> _houdini_Eval_loop_anon3_LoopHead_out_x_4 .cse114))) (let ((.cse110 (and (=> _houdini_Eval_loop_anon3_LoopHead_out_result_3 (=> (and (= _v1.Eval_loop_anon3_LoopHead_in_1_0@0 _v2.Eval_loop_anon3_LoopHead_in_2_0@0) .cse86) (= call6formal@_v1.out_result@0 call8formal@_v2.out_result@0))) .cse115)) (.cse187 (and .cse188 .cse189)) (.cse186 (=> _houdini_Eval_loop_anon3_LoopHead_control_flag_2 .cse185)) (.cse200 (=> .cse391 true)) (.cse227 (and .cse14 .cse12)) (.cse109 (and .cse111 .cse112)) (.cse194 (and _v1.Eval_loop_anon3_LoopHead_1_done@0 _v2.Eval_loop_anon3_LoopHead_2_done@0))) (let ((.cse195 (not .cse194)) (.cse106 (and .cse109 (= (ControlFlow 0 6) 2))) (.cse229 (and .cse200 .cse227)) (.cse181 (and .cse194 .cse186)) (.cse107 (and .cse110 .cse187))) (let ((.cse104 (and .cse181 .cse107)) (.cse103 (=> .cse106 .cse229)) (.cse96 (and .cse195 (= (ControlFlow 0 7) 2))) (.cse399 (ControlFlow 0 8)) (.cse315 (= _v2.Eval_loop_anon3_LoopHead_out_2_0@0 call3formal@out_result@0)) (.cse169 (= _v2.Eval_loop_anon3_LoopHead_out_2_2@0 _v2.control_flag@1)) (.cse65 (= _v2.Eval_loop_anon3_LoopHead_out_2_1@0 call4formal@out_x@0)) (.cse170 (= _v2.control_flag@2 _v2.control_flag@1)) (.cse63 (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@2 call4formal@out_x@0))) (let ((.cse57 (and (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_result@3 call3formal@out_result@0) .cse63)) (.cse168 (and .cse170 (= (ControlFlow 0 10) 8))) (.cse60 (and .cse169 .cse65)) (.cse58 (and .cse315 _v2.Eval_loop_anon3_LoopHead_2_done@0)) (.cse353 (= .cse399 7)) (.cse97 (=> .cse96 .cse229)) (.cse357 (= .cse399 6)) (.cse102 (=> .cse104 .cse103)) (.cse197 (+ _v2.in_x (- 1)))) (let ((.cse339 (= _v2.Eval_loop_anon3_LoopHead_out_2_0@0 _v2.Eval_loop_anon3_LoopHead_out_2_0)) (.cse218 (not _v2.Eval_loop_anon3_LoopHead_2_done@0)) (.cse162 (= _v2.control_flag@2 _v2.control_flag)) (.cse147 (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@2 _v2.in_x)) (.cse51 (= _v2.Eval_loop_anon3_LoopHead_in_2_1@0 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1)) (.cse167 (= _v2.Eval_loop_anon3_LoopHead_in_2_2@0 _v2.control_flag@0)) (.cse53 (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 .cse197)) (.cse319 (= _v2.Eval_loop_anon3_LoopHead_in_2_0@0 inline$_v2.Eval_loop_anon3_LoopHead$0$out_result@2)) (.cse101 (=> .cse357 .cse102)) (.cse99 (=> .cse353 .cse97)) (.cse49 (and .cse60 .cse58)) (.cse47 (and .cse57 .cse168))) (let ((.cse177 (_v2.control_UIF _v2.control_flag 1)) (.cse39 (and .cse49 .cse47)) (.cse241 (and .cse101 .cse99)) (.cse43 (and .cse53 .cse319)) (.cse41 (and .cse51 .cse167)) (.cse146 (and (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_result@3 _v2.in_result) .cse147)) (.cse161 (and .cse162 (= (ControlFlow 0 9) 8))) (.cse340 (and (= _v2.Eval_loop_anon3_LoopHead_out_2_2@0 _v2.Eval_loop_anon3_LoopHead_out_2_2) (= _v2.Eval_loop_anon3_LoopHead_out_2_1@0 _v2.Eval_loop_anon3_LoopHead_out_2_1))) (.cse205 (and .cse339 .cse218))) (let ((.cse31 (<= _v2.in_x 0)) (.cse344 (= _v2.Eval_loop_anon3_LoopHead_in_2_0@0 _v2.Eval_loop_anon3_LoopHead_in_2_0)) (.cse204 (and .cse340 .cse205)) (.cse144 (and .cse146 .cse161)) (.cse36 (and .cse43 .cse41)) (.cse35 (=> .cse39 .cse241)) (.cse166 (= _v2.control_flag@0 .cse177))) (let ((.cse165 (and .cse166 (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_result@1 (+ _v2.in_result _v2.in_x)))) (.cse33 (=> .cse36 .cse35)) (.cse142 (and .cse204 .cse144)) (.cse203 (and .cse31 .cse344)) (.cse342 (and (= _v2.Eval_loop_anon3_LoopHead_in_2_1@0 _v2.Eval_loop_anon3_LoopHead_in_2_1) (= _v2.Eval_loop_anon3_LoopHead_in_2_2@0 _v2.Eval_loop_anon3_LoopHead_in_2_2)))) (let ((.cse202 (and .cse203 .cse342)) (.cse140 (=> .cse142 .cse241)) (.cse191 (not .cse31)) (.cse30 (=> .cse165 .cse33)) (.cse398 (ControlFlow 0 11)) (.cse263 (= _v1.Eval_loop_anon3_LoopHead_out_1_0@0 call3formal@out_result@0@@0)) (.cse179 (= _v1.Eval_loop_anon3_LoopHead_out_1_2@0 _v1.control_flag@1)) (.cse95 (= _v1.Eval_loop_anon3_LoopHead_out_1_1@0 call4formal@out_x@0@@0)) (.cse180 (= _v1.control_flag@2 _v1.control_flag@1)) (.cse93 (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@2 call4formal@out_x@0@@0))) (let ((.cse88 (and (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_result@2 call3formal@out_result@0@@0) .cse93)) (.cse178 (and .cse180 (= (ControlFlow 0 13) 11))) (.cse91 (and .cse179 .cse95)) (.cse89 (and .cse263 _v1.Eval_loop_anon3_LoopHead_1_done@0)) (.cse330 (= .cse398 10)) (.cse27 (=> .cse191 .cse30)) (.cse347 (= .cse398 9)) (.cse138 (=> .cse202 .cse140)) (.cse196 (+ _v1.in_x (- 1)))) (let ((.cse82 (= _v1.Eval_loop_anon3_LoopHead_in_1_1@0 inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1)) (.cse173 (= _v1.Eval_loop_anon3_LoopHead_in_1_2@0 _v1.control_flag@0)) (.cse84 (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1 .cse196)) (.cse267 (= _v1.Eval_loop_anon3_LoopHead_in_1_0@0 inline$_v1.Eval_loop_anon3_LoopHead$0$out_result@1)) (.cse137 (=> .cse347 .cse138)) (.cse135 (=> .cse330 .cse27)) (.cse80 (and .cse91 .cse89)) (.cse78 (and .cse88 .cse178)) (.cse294 (= _v1.Eval_loop_anon3_LoopHead_out_1_0@0 _v1.Eval_loop_anon3_LoopHead_out_1_0)) (.cse291 (not _v1.Eval_loop_anon3_LoopHead_1_done@0)) (.cse163 (= _v1.control_flag@2 _v1.control_flag)) (.cse148 (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@2 _v1.in_x))) (let ((.cse150 (and (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_result@2 _v1.in_result) .cse148)) (.cse164 (and .cse163 (= (ControlFlow 0 12) 11))) (.cse295 (and (= _v1.Eval_loop_anon3_LoopHead_out_1_2@0 _v1.Eval_loop_anon3_LoopHead_out_1_2) (= _v1.Eval_loop_anon3_LoopHead_out_1_1@0 _v1.Eval_loop_anon3_LoopHead_out_1_1))) (.cse289 (and .cse294 .cse291)) (.cse176 (_v2.control_UIF _v1.control_flag 1)) (.cse72 (and .cse80 .cse78)) (.cse239 (and .cse137 .cse135)) (.cse76 (and .cse84 .cse267)) (.cse74 (and .cse82 .cse173))) (let ((.cse70 (and .cse76 .cse74)) (.cse69 (=> .cse72 .cse239)) (.cse172 (= _v1.control_flag@0 .cse176)) (.cse32 (<= _v1.in_x 0)) (.cse299 (= _v1.Eval_loop_anon3_LoopHead_in_1_0@0 _v1.Eval_loop_anon3_LoopHead_in_1_0)) (.cse287 (and .cse295 .cse289)) (.cse153 (and .cse150 .cse164))) (let ((.cse151 (and .cse287 .cse153)) (.cse34 (and .cse32 .cse299)) (.cse297 (and (= _v1.Eval_loop_anon3_LoopHead_in_1_1@0 _v1.Eval_loop_anon3_LoopHead_in_1_1) (= _v1.Eval_loop_anon3_LoopHead_in_1_2@0 _v1.Eval_loop_anon3_LoopHead_in_1_2))) (.cse171 (and .cse172 (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_result@1 (+ _v1.in_result _v1.in_x)))) (.cse68 (=> .cse70 .cse69))) (let ((.cse198 (not .cse32)) (.cse67 (=> .cse171 .cse68)) (.cse38 (and .cse34 .cse297)) (.cse149 (=> .cse151 .cse239)) (.cse397 (ControlFlow 0 14))) (let ((.cse302 (= .cse397 12)) (.cse45 (=> .cse38 .cse149)) (.cse281 (= .cse397 13)) (.cse66 (=> .cse198 .cse67))) (let ((.cse62 (=> .cse281 .cse66)) (.cse55 (=> .cse302 .cse45))) (let-proof ((.cse199 (not- .cse198)) (.cse243 true+) (.cse192 (not- .cse191)) (.cse219 (not- .cse218))) (let-proof ((.cse122 (! (=>+ 1 .cse68) :proves (+ .cse68 - .cse69) :input)) (.cse155 (! (=>+ 1 .cse45) :proves (+ .cse45 - .cse149) :input)) (.cse123 (! (=>+ 1 .cse67) :proves (+ .cse67 - .cse68) :input)) (.cse56 (! (=>+ 1 .cse55) :proves (+ .cse55 - .cse45) :input)) (.cse124 (! (=>+ 1 .cse66) :proves (+ .cse66 - .cse67) :input)) (.cse125 (! (=>+ 1 .cse62) :proves (+ .cse62 - .cse66) :input)) (.cse126 (! (let ((.cse244 (and .cse55 .cse62))) (res .cse244 (and+ .cse244) (let ((.cse396 (= (ControlFlow 0 0) 14))) (let ((.cse245 (=> .cse396 .cse244))) (res .cse245 (=>+ 1 .cse245) (let ((.cse365 (- 0 1))) (let ((.cse376 (- 0 3)) (.cse363 (= .cse238 .cse365))) (let ((.cse362 (=> .cse363 .cse2)) (.cse375 (= .cse238 .cse376))) (let ((.cse385 (- 0 4)) (.cse374 (=> .cse375 .cse212)) (.cse361 (=> .cse212 .cse362))) (let ((.cse392 (- 0 5)) (.cse360 (and .cse374 .cse361)) (.cse383 (= .cse238 .cse385))) (let ((.cse382 (=> .cse383 .cse15)) (.cse359 (=> .cse15 .cse360)) (.cse390 (= .cse238 .cse392))) (let ((.cse389 (=> .cse390 true)) (.cse358 (and .cse382 .cse359))) (let ((.cse352 (and .cse389 .cse358))) (let ((.cse356 (=> .cse106 .cse352)) (.cse314 (= _v2.Eval_loop_anon3_LoopHead_2_done@0 true))) (let ((.cse312 (and .cse315 .cse314)) (.cse349 (=> .cse96 .cse352)) (.cse355 (=> .cse104 .cse356)) (.cse321 (- _v2.in_x 1))) (let ((.cse338 (= _v2.Eval_loop_anon3_LoopHead_2_done@0 false)) (.cse320 (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 .cse321)) (.cse354 (=> .cse357 .cse355)) (.cse348 (=> .cse353 .cse349)) (.cse311 (and .cse60 .cse312))) (let ((.cse310 (and .cse311 .cse47)) (.cse316 (and .cse354 .cse348)) (.cse318 (and .cse320 .cse319)) (.cse336 (and .cse339 .cse338))) (let ((.cse346 (>= 0 _v2.in_x)) (.cse335 (and .cse340 .cse336)) (.cse317 (and .cse318 .cse41)) (.cse307 (=> .cse310 .cse316))) (let ((.cse306 (=> .cse317 .cse307)) (.cse334 (and .cse335 .cse144)) (.cse343 (and .cse346 .cse344))) (let ((.cse341 (and .cse343 .cse342)) (.cse333 (=> .cse334 .cse316)) (.cse325 (> _v2.in_x 0)) (.cse305 (=> .cse165 .cse306)) (.cse262 (= _v1.Eval_loop_anon3_LoopHead_1_done@0 true))) (let ((.cse260 (and .cse263 .cse262)) (.cse304 (=> .cse325 .cse305)) (.cse332 (=> .cse341 .cse333)) (.cse269 (- _v1.in_x 1))) (let ((.cse292 (= _v1.Eval_loop_anon3_LoopHead_1_done@0 false)) (.cse268 (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1 .cse269)) (.cse331 (=> .cse347 .cse332)) (.cse303 (=> .cse330 .cse304)) (.cse259 (and .cse91 .cse260))) (let ((.cse258 (and .cse259 .cse78)) (.cse264 (and .cse331 .cse303)) (.cse266 (and .cse268 .cse267)) (.cse288 (and .cse294 .cse292))) (let ((.cse301 (>= 0 _v1.in_x)) (.cse286 (and .cse295 .cse288)) (.cse265 (and .cse266 .cse74)) (.cse255 (=> .cse258 .cse264))) (let ((.cse254 (=> .cse265 .cse255)) (.cse285 (and .cse286 .cse153)) (.cse298 (and .cse301 .cse299))) (let ((.cse296 (and .cse298 .cse297)) (.cse284 (=> .cse285 .cse264)) (.cse276 (> _v1.in_x 0)) (.cse253 (=> .cse171 .cse254))) (let ((.cse252 (=> .cse276 .cse253)) (.cse283 (=> .cse296 .cse284))) (let ((.cse282 (=> .cse302 .cse283)) (.cse251 (=> .cse281 .cse252))) (let ((.cse250 (and .cse282 .cse251))) (let ((.cse246 (=> .cse396 .cse250))) (let ((.cse248 (not .cse246))) (res .cse246 (let ((.cse247 (not .cse245))) (res .cse247 (res .cse248 (not+ .cse248) (let ((.cse249 (= .cse248 .cse247))) (res .cse249 (res (= .cse246 .cse245) (res (= .cse250 .cse244) (let ((.cse273 (* (- 1) 1))) (let ((.cse277 (< 0 _v1.in_x)) (.cse270 (= .cse273 (- 1)))) (let-proof ((.cse279 (total _v1.in_x 0)) (.cse293 false-) (.cse271 (poly* .cse273 (- 1)))) (let ((.cse256 (= .cse264 .cse239))) (let-proof ((.cse257 (let ((.cse326 (< 0 _v2.in_x))) (let-proof ((.cse328 (total _v2.in_x 0))) (let ((.cse308 (= .cse316 .cse241))) (let-proof ((.cse309 (let ((.cse350 (= .cse352 .cse229))) (let-proof ((.cse351 (let ((.cse366 (= 0 0)) (.cse370 (= .cse238 .cse238))) (let-proof ((.cse367 (refl 0)) (.cse371 (refl .cse238))) (res (= .cse358 .cse227) (let ((.cse380 (= .cse15 .cse15))) (let-proof ((.cse381 (refl .cse15))) (res (= .cse359 .cse12) (res (= .cse360 .cse226) (let ((.cse372 (= .cse212 .cse212))) (let-proof ((.cse373 (refl .cse212))) (res (= .cse361 .cse0) (res (= .cse362 .cse1) (res (= .cse2 .cse2) (refl .cse2) (res (= .cse363 .cse364) (res (= .cse365 (- 1)) (res .cse270 .cse271 (res .cse366 .cse367 (let ((.cse368 (+ 0 .cse273)) (.cse369 (+ 0 (- 1)))) (res (= .cse368 .cse369) (cong (+ 0 .cse273) (+ 0 (- 1))) (res (= .cse365 .cse368) (-def 0 1) (res (= .cse369 (- 1)) (poly+ .cse369 (- 1)) (trans .cse365 .cse368 .cse369 (- 1)))))))) (res .cse370 .cse371 (cong (= .cse238 .cse365) (= .cse238 (- 1))))) (cong (=> .cse363 .cse2) (=> .cse364 .cse2)))) (res .cse372 .cse373 (cong (=> .cse212 .cse362) (=> .cse212 .cse1)))) (res (= .cse374 .cse10) (res .cse372 .cse373 (res (= .cse375 .cse232) (res (= .cse376 (- 3)) (let ((.cse377 (* (- 1) 3))) (res (= .cse377 (- 3)) (poly* .cse377 (- 3)) (res .cse366 .cse367 (let ((.cse378 (+ 0 .cse377)) (.cse379 (+ 0 (- 3)))) (res (= .cse378 .cse379) (cong (+ 0 .cse377) (+ 0 (- 3))) (res (= .cse376 .cse378) (-def 0 3) (res (= .cse379 (- 3)) (poly+ .cse379 (- 3)) (trans .cse376 .cse378 .cse379 (- 3))))))))) (res .cse370 .cse371 (cong (= .cse238 .cse376) (= .cse238 (- 3))))) (cong (=> .cse375 .cse212) (=> .cse232 .cse212)))) (cong (and .cse374 .cse361) (and .cse10 .cse0)))))) (res .cse380 .cse381 (cong (=> .cse15 .cse360) (=> .cse15 .cse226)))) (res (= .cse382 .cse14) (res .cse380 .cse381 (res (= .cse383 .cse384) (res (= .cse385 (- 4)) (let ((.cse386 (* (- 1) 4))) (res (= .cse386 (- 4)) (poly* .cse386 (- 4)) (res .cse366 .cse367 (let ((.cse387 (+ 0 .cse386)) (.cse388 (+ 0 (- 4)))) (res (= .cse387 .cse388) (cong (+ 0 .cse386) (+ 0 (- 4))) (res (= .cse385 .cse387) (-def 0 4) (res (= .cse388 (- 4)) (poly+ .cse388 (- 4)) (trans .cse385 .cse387 .cse388 (- 4))))))))) (res .cse370 .cse371 (cong (= .cse238 .cse385) (= .cse238 (- 4))))) (cong (=> .cse383 .cse15) (=> .cse384 .cse15)))) (cong (and .cse382 .cse359) (and .cse14 .cse12)))))) (res (= .cse389 .cse200) (res (= true true) (refl true) (res (= .cse390 .cse391) (res (= .cse392 (- 5)) (let ((.cse393 (* (- 1) 5))) (res (= .cse393 (- 5)) (poly* .cse393 (- 5)) (res .cse366 .cse367 (let ((.cse394 (+ 0 .cse393)) (.cse395 (+ 0 (- 5)))) (res (= .cse394 .cse395) (cong (+ 0 .cse393) (+ 0 (- 5))) (res (= .cse392 .cse394) (-def 0 5) (res (= .cse395 (- 5)) (poly+ .cse395 (- 5)) (trans .cse392 .cse394 .cse395 (- 5))))))))) (res .cse370 .cse371 (cong (= .cse238 .cse392) (= .cse238 (- 5))))) (cong (=> .cse390 true) (=> .cse391 true)))) (cong (and .cse389 .cse358) (and .cse200 .cse227)))))))) (res (= .cse348 .cse99) (res (= .cse349 .cse97) (res .cse350 .cse351 (res (= .cse96 .cse96) (refl .cse96) (cong (=> .cse96 .cse352) (=> .cse96 .cse229)))) (res (= .cse353 .cse353) (refl .cse353) (cong (=> .cse353 .cse349) (=> .cse353 .cse97)))) (res (= .cse354 .cse101) (res (= .cse355 .cse102) (res (= .cse356 .cse103) (res .cse350 .cse351 (res (= .cse106 .cse106) (refl .cse106) (cong (=> .cse106 .cse352) (=> .cse106 .cse229)))) (res (= .cse104 .cse104) (refl .cse104) (cong (=> .cse104 .cse356) (=> .cse104 .cse103)))) (res (= .cse357 .cse357) (refl .cse357) (cong (=> .cse357 .cse355) (=> .cse357 .cse102)))) (cong (and .cse354 .cse348) (and .cse101 .cse99))))))) (.cse329 (res .cse326 .cse328 (farkas 1 .cse31 1 .cse326))) (.cse327 (farkas 1 .cse326 1 .cse31))) (res (= .cse303 .cse135) (res (= .cse304 .cse27) (res (= .cse305 .cse30) (res (= .cse306 .cse33) (res (= .cse307 .cse35) (res .cse308 .cse309 (res (= .cse310 .cse39) (res (= .cse47 .cse47) (refl .cse47) (res (= .cse311 .cse49) (res (= .cse312 .cse58) (let ((.cse313 (= .cse314 _v2.Eval_loop_anon3_LoopHead_2_done@0))) (res .cse313 (res true .cse243 (res _v2.Eval_loop_anon3_LoopHead_2_done@0 (res .cse314 (=+1 .cse313) (=-1 .cse314)) (res .cse314 (=+2 .cse314) (=+2 .cse313)))) (res (= .cse315 .cse315) (refl .cse315) (cong (and .cse315 .cse314) (and .cse315 _v2.Eval_loop_anon3_LoopHead_2_done@0))))) (res (= .cse60 .cse60) (refl .cse60) (cong (and .cse60 .cse312) (and .cse60 .cse58)))) (cong (and .cse311 .cse47) (and .cse49 .cse47)))) (cong (=> .cse310 .cse316) (=> .cse39 .cse241)))) (res (= .cse317 .cse36) (res (= .cse41 .cse41) (refl .cse41) (res (= .cse318 .cse43) (res (= .cse319 .cse319) (refl .cse319) (res (= .cse320 .cse53) (res (= .cse321 .cse197) (res .cse270 .cse271 (res (= _v2.in_x _v2.in_x) (refl _v2.in_x) (let ((.cse322 (+ _v2.in_x .cse273))) (res (= .cse322 .cse197) (cong (+ _v2.in_x .cse273) (+ _v2.in_x (- 1))) (res (= .cse321 .cse322) (-def _v2.in_x 1) (trans .cse321 .cse322 .cse197)))))) (res (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1) (refl inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1) (cong (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 .cse321) (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 .cse197)))) (cong (and .cse320 .cse319) (and .cse53 .cse319)))) (cong (and .cse318 .cse41) (and .cse43 .cse41)))) (cong (=> .cse317 .cse307) (=> .cse36 .cse35)))) (res (= .cse165 .cse165) (refl .cse165) (cong (=> .cse165 .cse306) (=> .cse165 .cse33)))) (let ((.cse323 (= .cse325 .cse191))) (res .cse323 (let ((.cse324 (= .cse325 .cse326))) (res .cse324 (>def _v2.in_x 0) (res .cse191 (res .cse325 (=+1 .cse323) (res .cse326 (=-2 .cse324) (res .cse31 (not+ .cse191) .cse327))) (res .cse325 (res .cse326 (res .cse31 .cse328 (res .cse31 .cse329 .cse192)) (=-1 .cse324)) (=+2 .cse323))))) (cong (=> .cse325 .cse305) (=> .cse191 .cse30))))) (res (= .cse330 .cse330) (refl .cse330) (cong (=> .cse330 .cse304) (=> .cse330 .cse27)))) (res (= .cse331 .cse137) (res (= .cse332 .cse138) (res (= .cse333 .cse140) (res .cse308 .cse309 (res (= .cse334 .cse142) (res (= .cse144 .cse144) (refl .cse144) (res (= .cse335 .cse204) (res (= .cse336 .cse205) (let ((.cse337 (= .cse338 .cse218))) (res .cse337 (res false (res .cse218 (res .cse338 (=+1 .cse337) (res _v2.Eval_loop_anon3_LoopHead_2_done@0 (not+ .cse218) (=-2 .cse338))) (res .cse338 (res _v2.Eval_loop_anon3_LoopHead_2_done@0 (=+1 .cse338) .cse219) (=+2 .cse337))) .cse293) (res (= .cse339 .cse339) (refl .cse339) (cong (and .cse339 .cse338) (and .cse339 .cse218))))) (res (= .cse340 .cse340) (refl .cse340) (cong (and .cse340 .cse336) (and .cse340 .cse205)))) (cong (and .cse335 .cse144) (and .cse204 .cse144)))) (cong (=> .cse334 .cse316) (=> .cse142 .cse241)))) (res (= .cse341 .cse202) (res (= .cse342 .cse342) (refl .cse342) (res (= .cse343 .cse203) (res (= .cse344 .cse344) (refl .cse344) (let ((.cse345 (= .cse346 .cse31))) (res .cse345 (res .cse345 (>=def 0 _v2.in_x) (res .cse31 (res .cse346 (=+1 .cse345) (res .cse31 (=-2 .cse345) .cse329)) (res .cse346 (res .cse31 (res .cse326 .cse328 .cse327) (=-1 .cse345)) (=+2 .cse345)))) (cong (and .cse346 .cse344) (and .cse31 .cse344))))) (cong (and .cse343 .cse342) (and .cse203 .cse342)))) (cong (=> .cse341 .cse333) (=> .cse202 .cse140)))) (res (= .cse347 .cse347) (refl .cse347) (cong (=> .cse347 .cse332) (=> .cse347 .cse138)))) (cong (and .cse331 .cse303) (and .cse137 .cse135))))))))) (.cse280 (res .cse277 .cse279 (farkas 1 .cse32 1 .cse277))) (.cse278 (farkas 1 .cse277 1 .cse32))) (res (= .cse251 .cse62) (res (= .cse252 .cse66) (res (= .cse253 .cse67) (res (= .cse254 .cse68) (res (= .cse255 .cse69) (res .cse256 .cse257 (res (= .cse258 .cse72) (res (= .cse78 .cse78) (refl .cse78) (res (= .cse259 .cse80) (res (= .cse260 .cse89) (let ((.cse261 (= .cse262 _v1.Eval_loop_anon3_LoopHead_1_done@0))) (res .cse261 (res true .cse243 (res _v1.Eval_loop_anon3_LoopHead_1_done@0 (res .cse262 (=+1 .cse261) (=-1 .cse262)) (res .cse262 (=+2 .cse262) (=+2 .cse261)))) (res (= .cse263 .cse263) (refl .cse263) (cong (and .cse263 .cse262) (and .cse263 _v1.Eval_loop_anon3_LoopHead_1_done@0))))) (res (= .cse91 .cse91) (refl .cse91) (cong (and .cse91 .cse260) (and .cse91 .cse89)))) (cong (and .cse259 .cse78) (and .cse80 .cse78)))) (cong (=> .cse258 .cse264) (=> .cse72 .cse239)))) (res (= .cse265 .cse70) (res (= .cse74 .cse74) (refl .cse74) (res (= .cse266 .cse76) (res (= .cse267 .cse267) (refl .cse267) (res (= .cse268 .cse84) (res (= .cse269 .cse196) (res .cse270 .cse271 (res (= _v1.in_x _v1.in_x) (refl _v1.in_x) (let ((.cse272 (+ _v1.in_x .cse273))) (res (= .cse272 .cse196) (cong (+ _v1.in_x .cse273) (+ _v1.in_x (- 1))) (res (= .cse269 .cse272) (-def _v1.in_x 1) (trans .cse269 .cse272 .cse196)))))) (res (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1 inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1) (refl inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1) (cong (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1 .cse269) (= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1 .cse196)))) (cong (and .cse268 .cse267) (and .cse84 .cse267)))) (cong (and .cse266 .cse74) (and .cse76 .cse74)))) (cong (=> .cse265 .cse255) (=> .cse70 .cse69)))) (res (= .cse171 .cse171) (refl .cse171) (cong (=> .cse171 .cse254) (=> .cse171 .cse68)))) (let ((.cse274 (= .cse276 .cse198))) (res .cse274 (let ((.cse275 (= .cse276 .cse277))) (res .cse275 (>def _v1.in_x 0) (res .cse198 (res .cse276 (=+1 .cse274) (res .cse277 (=-2 .cse275) (res .cse32 (not+ .cse198) .cse278))) (res .cse276 (res .cse277 (res .cse32 .cse279 (res .cse32 .cse280 .cse199)) (=-1 .cse275)) (=+2 .cse274))))) (cong (=> .cse276 .cse253) (=> .cse198 .cse67))))) (res (= .cse281 .cse281) (refl .cse281) (cong (=> .cse281 .cse252) (=> .cse281 .cse66)))) (res (= .cse282 .cse55) (res (= .cse283 .cse45) (res (= .cse284 .cse149) (res .cse256 .cse257 (res (= .cse285 .cse151) (res (= .cse153 .cse153) (refl .cse153) (res (= .cse286 .cse287) (res (= .cse288 .cse289) (let ((.cse290 (= .cse292 .cse291))) (res .cse290 (res false (res .cse291 (res .cse292 (=+1 .cse290) (res _v1.Eval_loop_anon3_LoopHead_1_done@0 (not+ .cse291) (=-2 .cse292))) (res .cse292 (res _v1.Eval_loop_anon3_LoopHead_1_done@0 (=+1 .cse292) (not- .cse291)) (=+2 .cse290))) .cse293) (res (= .cse294 .cse294) (refl .cse294) (cong (and .cse294 .cse292) (and .cse294 .cse291))))) (res (= .cse295 .cse295) (refl .cse295) (cong (and .cse295 .cse288) (and .cse295 .cse289)))) (cong (and .cse286 .cse153) (and .cse287 .cse153)))) (cong (=> .cse285 .cse264) (=> .cse151 .cse239)))) (res (= .cse296 .cse38) (res (= .cse297 .cse297) (refl .cse297) (res (= .cse298 .cse34) (res (= .cse299 .cse299) (refl .cse299) (let ((.cse300 (= .cse301 .cse32))) (res .cse300 (res .cse300 (>=def 0 _v1.in_x) (res .cse32 (res .cse301 (=+1 .cse300) (res .cse32 (=-2 .cse300) .cse280)) (res .cse301 (res .cse32 (res .cse277 .cse279 .cse278) (=-1 .cse300)) (=+2 .cse300)))) (cong (and .cse301 .cse299) (and .cse32 .cse299))))) (cong (and .cse298 .cse297) (and .cse34 .cse297)))) (cong (=> .cse296 .cse284) (=> .cse38 .cse149)))) (res (= .cse302 .cse302) (refl .cse302) (cong (=> .cse302 .cse283) (=> .cse302 .cse45)))) (cong (and .cse282 .cse251) (and .cse55 .cse62))))))))) (res (= .cse396 .cse396) (refl .cse396) (cong (=> .cse396 .cse250) (=> .cse396 .cse244)))) (cong (not .cse246) (not .cse245))) (=-2 .cse249)))) (not- .cse247))) (res .cse248 (assume .cse248) (not- .cse248)))))))))))))))))))))))))))))))))) :proves (- .cse55 - .cse62) :input)) (.cse242 (and+ .cse241)) (.cse228 (and+ .cse227)) (.cse230 (and+ .cse229))) (let-proof ((.cse201 (! (res true .cse243 (=>+ 1 .cse200)) :proves (+ .cse200) :input)) (.cse213 (! (res .cse227 .cse228 (res .cse229 .cse230 (=>+ 1 .cse97))) :proves (- .cse12 + .cse97 - .cse14 - .cse200) :input)) (.cse118 (! (=>+ 1 .cse102) :proves (+ .cse102 - .cse103) :input)) (.cse100 (! (=>+ 1 .cse99) :proves (+ .cse99 - .cse97) :input)) (.cse119 (! (=>+ 1 .cse101) :proves (+ .cse101 - .cse102) :input)) (.cse217 (! (res .cse241 .cse242 (=>+ 1 .cse140)) :proves (- .cse99 - .cse101 + .cse140) :input)) (.cse120 (! (res .cse241 .cse242 (=>+ 1 .cse35)) :proves (- .cse99 - .cse101 + .cse35) :input)) (.cse156 (! (=>+ 1 .cse138) :proves (+ .cse138 - .cse140) :input)) (.cse128 (! (=>+ 1 .cse33) :proves (+ .cse33 - .cse35) :input)) (.cse157 (! (=>+ 1 .cse137) :proves (+ .cse137 - .cse138) :input)) (.cse130 (! (=>+ 1 .cse30) :proves (+ .cse30 - .cse33) :input)) (.cse133 (! (=>+ 1 .cse27) :proves (+ .cse27 - .cse30) :input)) (.cse136 (! (=>+ 1 .cse135) :proves (+ .cse135 - .cse27) :input)) (.cse190 (let-proof ((.cse240 (and+ .cse239))) (res .cse69 (! (res .cse239 .cse240 (=>+ 1 .cse69)) :proves (- .cse137 + .cse69 - .cse135) :input) (res .cse149 (! (res .cse239 .cse240 (=>+ 1 .cse149)) :proves (+ .cse149 - .cse137 - .cse135) :input) (res .cse68 .cse122 (res .cse45 .cse155 (res .cse67 .cse123 (res .cse55 .cse56 (res .cse66 .cse124 (res .cse62 .cse125 .cse126))))))))))) (let-proof ((.cse11 (! (let ((.cse231 (= (- 3) .cse238))) (let ((.cse233 (= .cse232 .cse231))) (let-proof ((.cse234 (res .cse231 (res .cse232 (=+1 .cse233) (symm (- 3) .cse238)) (res .cse232 (symm .cse238 (- 3)) (=+2 .cse233))))) (res .cse231 (! (res .cse232 (=>+ 0 .cse10) (res .cse233 .cse234 (=-2 .cse233))) :proves (+ .cse10 + .cse231) :input) (! (let ((.cse236 (not .cse232))) (res .cse232 (let ((.cse235 (not .cse231))) (res .cse235 (res .cse236 (not+ .cse236) (let ((.cse237 (= .cse236 .cse235))) (res .cse237 (res .cse233 .cse234 (cong (not .cse232) (not .cse231))) (=-2 .cse237)))) (not- .cse235))) (res .cse236 (assume .cse236) (not- .cse236)))) :proves (- .cse231) :input))))) :proves (+ .cse10) :rup)) (.cse22 (! (res .cse200 .cse201 (res .cse103 (! (res .cse227 .cse228 (res .cse229 .cse230 (=>+ 1 .cse103))) :proves (- .cse12 + .cse103 - .cse14 - .cse200) :input) (res .cse97 .cse213 (res .cse102 .cse118 (res .cse99 .cse100 (res .cse101 .cse119 (res .cse140 .cse217 (res .cse35 .cse120 (res .cse138 .cse156 (res .cse33 .cse128 (res .cse137 .cse157 (res .cse30 .cse130 (res .cse27 .cse133 (res .cse135 .cse136 .cse190)))))))))))))) :proves (- .cse14 - .cse12) :rup)) (.cse5 (! (=>+ 0 .cse3) :proves (+ .cse3 + .cse4) :input)) (.cse18 (! (=>+ 0 .cse16) :proves (+ .cse16 + .cse17) :input)) (.cse7 (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse3) :input)) (.cse20 (! (=>+ 1 .cse15) :proves (+ .cse15 - .cse16) :input)) (.cse8 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) (.cse21 (! (=>+ 1 .cse14) :proves (+ .cse14 - .cse15) :input)) (.cse9 (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) (.cse13 (! (res .cse226 (and+ .cse226) (=>+ 1 .cse12)) :proves (- .cse0 + .cse12 - .cse10) :input)) (.cse19 (! (and- 1 .cse17) :proves (- .cse17 + .cse4) :input))) (let-proof ((.cse6 (! (res .cse10 .cse11 (let ((.cse216 (* (- 1) _v1.in_x))) (let ((.cse222 (+ _v2.in_x .cse216))) (let ((.cse23 (= .cse222 0))) (let-proof ((.cse24 (! (let ((.cse223 (= _v2.in_x _v1.in_x))) (res .cse223 (symm _v2.in_x _v1.in_x) (let ((.cse224 (< .cse222 0))) (res .cse224 (let ((.cse225 (< 0 .cse222))) (res .cse225 (trichotomy .cse222 0) (farkas 1 .cse223 1 .cse225))) (farkas 1 .cse4 1 .cse224))))) :proves (- .cse4 + .cse23) :EQ))) (res .cse23 .cse24 (let ((.cse28 (= .cse197 .cse196)) (.cse214 (= 0 .cse222))) (let-proof ((.cse143 (! (=>+ 0 .cse140) :proves (+ .cse140 + .cse142) :input)) (.cse105 (! (=>+ 0 .cse102) :proves (+ .cse102 + .cse104) :input)) (.cse182 (! (and- 0 .cse104) :proves (- .cse104 + .cse181) :input)) (.cse215 (symm 0 .cse222))) (let-proof ((.cse29 (! (res .cse214 .cse215 (let ((.cse220 (< .cse197 .cse196))) (res .cse220 (let ((.cse221 (< .cse196 .cse197))) (res .cse221 (trichotomy .cse197 .cse196) (farkas 1 .cse23 1 .cse221))) (farkas 1 .cse214 1 .cse220)))) :proves (+ .cse28 - .cse23) :EQ)) (.cse139 (! (res .cse200 .cse201 (res .cse202 (! (=>+ 0 .cse138) :proves (+ .cse138 + .cse202) :input) (res .cse140 (res .cse203 (! (and- 0 .cse202) :proves (- .cse202 + .cse203) :input) (res .cse142 .cse143 (res .cse31 (! (and- 0 .cse203) :proves (- .cse203 + .cse31) :input) (res .cse204 (! (and- 0 .cse142) :proves (- .cse142 + .cse204) :input) (res .cse205 (! (and- 1 .cse204) :proves (- .cse204 + .cse205) :input) (res _v2.Eval_loop_anon3_LoopHead_2_done@0 (res .cse194 (res .cse181 (res .cse104 (res .cse102 .cse105 (res .cse101 .cse119 (res .cse99 (res .cse97 (let ((.cse209 (+ _v2.in_x .cse216 1))) (let ((.cse206 (<= .cse209 0))) (res .cse206 (! (let ((.cse207 (<= 1 _v1.in_x))) (res .cse207 (total-int _v1.in_x 0) (let ((.cse208 (<= 1 .cse209))) (res .cse208 (total-int .cse209 0) (farkas 1 .cse31 1 .cse208 1 .cse207))))) :proves (- .cse31 + .cse206 + .cse32) :LA (1 (- 1) (- 1))) (res .cse23 (res .cse4 (res .cse17 (res .cse210 (res .cse3 .cse5 (res .cse16 .cse18 (res .cse211 (! (=>+ 0 .cse211) :proves (+ .cse211 + .cse210) :input) (res .cse2 .cse7 (res .cse15 .cse20 (res .cse212 (! (=>+ 1 .cse212) :proves (+ .cse212 - .cse211) :input) (res .cse1 .cse8 (res .cse14 .cse21 (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse212) :input) (res .cse0 .cse9 (res .cse12 .cse13 .cse213))))))))))) (! (and- 1 .cse210) :proves (- .cse210 + .cse4) :input)) .cse19) .cse24) (! (res .cse214 .cse215 (farkas 1 .cse206 1 .cse214)) :proves (- .cse206 - .cse23) :LA (1 (- 1))))))) .cse100) .cse217))) .cse182) (! (and- 0 .cse181) :proves (- .cse181 + .cse194) :input)) (! (and- 1 .cse194) :proves (- .cse194 + _v2.Eval_loop_anon3_LoopHead_2_done@0) :input)) (! (res .cse218 (and- 1 .cse205) .cse219) :proves (- .cse205 - _v2.Eval_loop_anon3_LoopHead_2_done@0) :input))))))) .cse156))) :proves (+ .cse32 + .cse138) :rup)) (.cse141 (! (res .cse198 (=>+ 0 .cse66) .cse199) :proves (+ .cse66 - .cse32) :input)) (.cse145 (! (and- 1 .cse142) :proves (- .cse142 + .cse144) :input)) (.cse152 (! (=>+ 0 .cse149) :proves (+ .cse149 + .cse151) :input)) (.cse154 (! (and- 1 .cse151) :proves (- .cse151 + .cse153) :input)) (.cse37 (! (=>+ 0 .cse33) :proves (+ .cse33 + .cse36) :input)) (.cse44 (! (and- 0 .cse36) :proves (- .cse36 + .cse43) :input)) (.cse42 (! (and- 1 .cse36) :proves (- .cse36 + .cse41) :input)) (.cse40 (! (=>+ 0 .cse35) :proves (+ .cse35 + .cse39) :input)) (.cse54 (! (and- 0 .cse43) :proves (- .cse43 + .cse53) :input)) (.cse52 (! (and- 0 .cse41) :proves (- .cse41 + .cse51) :input)) (.cse50 (! (and- 0 .cse39) :proves (- .cse39 + .cse49) :input)) (.cse48 (! (and- 1 .cse39) :proves (- .cse39 + .cse47) :input)) (.cse61 (! (and- 0 .cse49) :proves (- .cse49 + .cse60) :input)) (.cse59 (! (and- 1 .cse49) :proves (- .cse49 + .cse58) :input)) (.cse64 (! (and- 1 .cse58) :proves (- .cse58 + _v2.Eval_loop_anon3_LoopHead_2_done@0) :input)) (.cse46 (! (=>+ 0 .cse45) :proves (+ .cse45 + .cse38) :input)) (.cse71 (! (=>+ 0 .cse68) :proves (+ .cse68 + .cse70) :input)) (.cse77 (! (and- 0 .cse70) :proves (- .cse70 + .cse76) :input)) (.cse75 (! (and- 1 .cse70) :proves (- .cse70 + .cse74) :input)) (.cse73 (! (=>+ 0 .cse69) :proves (+ .cse69 + .cse72) :input)) (.cse85 (! (and- 0 .cse76) :proves (- .cse76 + .cse84) :input)) (.cse83 (! (and- 0 .cse74) :proves (- .cse74 + .cse82) :input)) (.cse87 (! (res (= .cse197 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1) (symm .cse197 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1) (res (= .cse196 .cse197) (symm .cse196 .cse197) (res (= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 _v2.Eval_loop_anon3_LoopHead_in_2_1@0) (symm inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 _v2.Eval_loop_anon3_LoopHead_in_2_1@0) (trans _v1.Eval_loop_anon3_LoopHead_in_1_1@0 inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1 .cse196 .cse197 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 _v2.Eval_loop_anon3_LoopHead_in_2_1@0)))) :proves (+ .cse86 - .cse82 - .cse84 - .cse28 - .cse53 - .cse51) :trans (_v1.Eval_loop_anon3_LoopHead_in_1_1@0 inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@1 .cse196 .cse197 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@1 _v2.Eval_loop_anon3_LoopHead_in_2_1@0))) (.cse81 (! (and- 0 .cse72) :proves (- .cse72 + .cse80) :input)) (.cse79 (! (and- 1 .cse72) :proves (- .cse72 + .cse78) :input)) (.cse92 (! (and- 0 .cse80) :proves (- .cse80 + .cse91) :input)) (.cse90 (! (and- 1 .cse80) :proves (- .cse80 + .cse89) :input)) (.cse94 (! (and- 1 .cse89) :proves (- .cse89 + _v1.Eval_loop_anon3_LoopHead_1_done@0) :input)) (.cse98 (! (=>+ 0 .cse97) :proves (+ .cse97 + .cse96) :input)) (.cse108 (! (and- 1 .cse104) :proves (- .cse104 + .cse107) :input)) (.cse121 (! (res .cse194 (and+ .cse194) (res .cse195 (and- 0 .cse96) (not- .cse195))) :proves (- _v1.Eval_loop_anon3_LoopHead_1_done@0 - .cse96 - _v2.Eval_loop_anon3_LoopHead_2_done@0) :input)) (.cse127 (! (and- 0 .cse38) :proves (- .cse38 + .cse34) :input)) (.cse129 (! (and- 0 .cse34) :proves (- .cse34 + .cse32) :input)) (.cse131 (! (let ((.cse193 (<= 1 _v2.in_x))) (res .cse193 (total-int _v2.in_x 0) (farkas 1 .cse193 1 .cse32 1 .cse23))) :proves (+ .cse31 - .cse32 - .cse23) :LA ((- 1) 1 1))) (.cse132 (! (res .cse191 (=>+ 0 .cse27) .cse192) :proves (+ .cse27 - .cse31) :input)) (.cse158 (! .cse190 :proves (- .cse137 - .cse135) :rup))) (let-proof ((.cse25 (! (res .cse28 .cse29 (res .cse16 (res _houdini_Eval_loop_anon3_LoopHead_control_flag_2 (! (=>+ 0 .cse15) :proves (+ .cse15 + _houdini_Eval_loop_anon3_LoopHead_control_flag_2) :input) (res .cse159 (res .cse17 .cse18 (res .cse160 (! (and- 0 .cse17) :proves (- .cse17 + .cse160) :input) (res .cse138 (! (res .cse140 (res .cse32 .cse139 (res .cse142 .cse143 (res .cse66 .cse141 (res .cse144 .cse145 (res .cse62 .cse125 (res .cse161 (! (and- 1 .cse144) :proves (- .cse144 + .cse161) :input) (res .cse55 (res .cse162 (! (and- 0 .cse161) :proves (- .cse161 + .cse162) :input) (res .cse163 (res .cse45 (res .cse164 (res .cse149 (res .cse153 (res .cse151 .cse152 .cse154) (! (and- 1 .cse153) :proves (- .cse153 + .cse164) :input)) .cse155) (! (and- 0 .cse164) :proves (- .cse164 + .cse163) :input)) .cse56) (! (res (= _v2.control_flag _v2.control_flag@2) (symm _v2.control_flag _v2.control_flag@2) (trans _v1.control_flag@2 _v1.control_flag _v2.control_flag _v2.control_flag@2)) :proves (+ .cse159 - .cse163 - .cse160 - .cse162) :trans (_v1.control_flag@2 _v1.control_flag _v2.control_flag _v2.control_flag@2)))) .cse126))))))) .cse156) :proves (- .cse160 + .cse159 + .cse138) :rup) (res .cse137 .cse157 (res .cse135 (res .cse27 (res .cse31 (res .cse30 (res .cse165 (! (=>+ 0 .cse30) :proves (+ .cse30 + .cse165) :input) (res .cse33 (res .cse166 (! (and- 0 .cse165) :proves (- .cse165 + .cse166) :input) (res .cse36 .cse37 (res .cse35 (res .cse43 .cse44 (res .cse41 .cse42 (res .cse39 .cse40 (res .cse53 .cse54 (res .cse51 .cse52 (res .cse167 (! (and- 1 .cse41) :proves (- .cse41 + .cse167) :input) (res .cse49 .cse50 (res .cse47 .cse48 (res .cse60 .cse61 (res .cse58 .cse59 (res .cse168 (! (and- 1 .cse47) :proves (- .cse47 + .cse168) :input) (res .cse169 (! (and- 0 .cse60) :proves (- .cse60 + .cse169) :input) (res _v2.Eval_loop_anon3_LoopHead_2_done@0 .cse64 (res .cse170 (! (and- 0 .cse168) :proves (- .cse168 + .cse170) :input) (res .cse32 (res .cse34 (res .cse38 (res .cse45 .cse46 (res .cse55 .cse56 (res .cse62 (res .cse66 (res .cse67 (res .cse171 (! (=>+ 0 .cse67) :proves (+ .cse67 + .cse171) :input) (res .cse68 (res .cse172 (! (and- 0 .cse171) :proves (- .cse171 + .cse172) :input) (res .cse70 .cse71 (res .cse69 (res .cse76 .cse77 (res .cse74 .cse75 (res .cse72 .cse73 (res .cse84 .cse85 (res .cse82 .cse83 (res .cse86 .cse87 (res .cse173 (! (and- 1 .cse74) :proves (- .cse74 + .cse173) :input) (res .cse174 (let ((.cse175 (= .cse176 .cse177))) (res .cse175 (! (res (= 1 1) (refl 1) (cong (_v2.control_UIF _v1.control_flag 1) (_v2.control_UIF _v2.control_flag 1))) :proves (+ .cse175 - .cse160) :cong (.cse176 .cse177)) (! (res (= _v2.control_flag@0 _v2.Eval_loop_anon3_LoopHead_in_2_2@0) (symm _v2.control_flag@0 _v2.Eval_loop_anon3_LoopHead_in_2_2@0) (res (= .cse177 _v2.control_flag@0) (symm .cse177 _v2.control_flag@0) (trans _v1.Eval_loop_anon3_LoopHead_in_1_2@0 _v1.control_flag@0 .cse176 .cse177 _v2.control_flag@0 _v2.Eval_loop_anon3_LoopHead_in_2_2@0))) :proves (+ .cse174 - .cse173 - .cse172 - .cse175 - .cse166 - .cse167) :trans (_v1.Eval_loop_anon3_LoopHead_in_1_2@0 _v1.control_flag@0 .cse176 .cse177 _v2.control_flag@0 _v2.Eval_loop_anon3_LoopHead_in_2_2@0)))) (res .cse80 .cse81 (res .cse78 .cse79 (res .cse91 .cse92 (res .cse89 .cse90 (res .cse178 (! (and- 1 .cse78) :proves (- .cse78 + .cse178) :input) (res .cse179 (! (and- 0 .cse91) :proves (- .cse91 + .cse179) :input) (res _v1.Eval_loop_anon3_LoopHead_1_done@0 .cse94 (res .cse180 (! (and- 0 .cse178) :proves (- .cse178 + .cse180) :input) (res .cse96 (res .cse97 .cse98 (res .cse99 .cse100 (res .cse101 (res .cse102 (res .cse104 .cse105 (res .cse181 .cse182 (res .cse107 .cse108 (res .cse183 (! (res .cse184 (and+ .cse184) (res .cse185 (res .cse186 (and- 1 .cse181) (=>- .cse186)) (=>- .cse185))) :proves (- .cse174 + .cse183 - .cse181 - _houdini_Eval_loop_anon3_LoopHead_control_flag_2 - .cse86) :input) (res .cse187 (! (and- 1 .cse107) :proves (- .cse107 + .cse187) :input) (res .cse188 (! (and- 0 .cse187) :proves (- .cse187 + .cse188) :input) (res .cse189 (! (and- 1 .cse187) :proves (- .cse187 + .cse189) :input) (! (res (= _v2.control_flag@1 _v2.control_flag@2) (symm _v2.control_flag@1 _v2.control_flag@2) (res (= _v1.Eval_loop_anon3_LoopHead_out_1_2@0 _v1.control_flag@3) (symm _v1.Eval_loop_anon3_LoopHead_out_1_2@0 _v1.control_flag@3) (res (= _v1.control_flag@1 _v1.Eval_loop_anon3_LoopHead_out_1_2@0) (symm _v1.control_flag@1 _v1.Eval_loop_anon3_LoopHead_out_1_2@0) (trans _v1.control_flag@2 _v1.control_flag@1 _v1.Eval_loop_anon3_LoopHead_out_1_2@0 _v1.control_flag@3 _v2.control_flag@3 _v2.Eval_loop_anon3_LoopHead_out_2_2@0 _v2.control_flag@1 _v2.control_flag@2)))) :proves (+ .cse159 - .cse180 - .cse179 - .cse188 - .cse183 - .cse189 - .cse169 - .cse170) :trans (_v1.control_flag@2 _v1.control_flag@1 _v1.Eval_loop_anon3_LoopHead_out_1_2@0 _v1.control_flag@3 _v2.control_flag@3 _v2.Eval_loop_anon3_LoopHead_out_2_2@0 _v2.control_flag@1 _v2.control_flag@2))))))))) .cse119) .cse120))) .cse121))))))))))))))))) .cse122))) .cse123)) .cse124) .cse125) .cse126))) .cse127) .cse129) .cse131))))))))))))))) .cse128))) .cse130)) .cse133) .cse132) .cse136) .cse158))))) (! (=>+ 1 .cse16) :proves (+ .cse16 - .cse159) :input))) .cse20)) :proves (+ .cse15 - .cse23) :rup))) (res .cse15 .cse25 (res .cse14 .cse21 (res .cse12 (res .cse0 (res .cse1 (res .cse2 (res .cse3 (let-proof ((.cse134 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse26) :input))) (res .cse26 (res .cse27 (! (res .cse10 .cse11 (res .cse28 .cse29 (res .cse15 .cse25 (res .cse14 .cse21 (res .cse12 (res .cse0 (res .cse1 (res .cse2 (res _houdini_Eval_loop_anon3_LoopHead_out_x_4 (! (=>+ 0 .cse2) :proves (+ .cse2 + _houdini_Eval_loop_anon3_LoopHead_out_x_4) :input) (res .cse3 (res .cse26 (res .cse30 (res .cse31 (res .cse32 (res .cse33 (res .cse34 (res .cse35 (res .cse36 .cse37 (res .cse38 (res .cse39 .cse40 (res .cse41 .cse42 (res .cse43 .cse44 (res .cse45 .cse46 (res .cse47 .cse48 (res .cse49 .cse50 (res .cse51 .cse52 (res .cse53 .cse54 (res .cse55 .cse56 (res .cse57 (! (and- 0 .cse47) :proves (- .cse47 + .cse57) :input) (res .cse58 .cse59 (res .cse60 .cse61 (res .cse62 (res .cse63 (! (and- 1 .cse57) :proves (- .cse57 + .cse63) :input) (res _v2.Eval_loop_anon3_LoopHead_2_done@0 .cse64 (res .cse65 (! (and- 1 .cse60) :proves (- .cse60 + .cse65) :input) (res .cse66 (res .cse67 (res .cse68 (res .cse69 (res .cse70 .cse71 (res .cse72 .cse73 (res .cse74 .cse75 (res .cse76 .cse77 (res .cse78 .cse79 (res .cse80 .cse81 (res .cse82 .cse83 (res .cse84 .cse85 (res .cse86 .cse87 (res .cse88 (! (and- 0 .cse78) :proves (- .cse78 + .cse88) :input) (res .cse89 .cse90 (res .cse91 .cse92 (res .cse93 (! (and- 1 .cse88) :proves (- .cse88 + .cse93) :input) (res _v1.Eval_loop_anon3_LoopHead_1_done@0 .cse94 (res .cse95 (! (and- 1 .cse91) :proves (- .cse91 + .cse95) :input) (res .cse96 (res .cse97 .cse98 (res .cse99 .cse100 (res .cse101 (res .cse102 (res .cse103 (res .cse104 .cse105 (res .cse106 (! (=>+ 0 .cse103) :proves (+ .cse103 + .cse106) :input) (res .cse107 .cse108 (res .cse109 (! (and- 0 .cse106) :proves (- .cse106 + .cse109) :input) (res .cse110 (! (and- 0 .cse107) :proves (- .cse107 + .cse110) :input) (res .cse111 (! (and- 0 .cse109) :proves (- .cse109 + .cse111) :input) (res .cse112 (! (and- 1 .cse109) :proves (- .cse109 + .cse112) :input) (res .cse113 (! (res .cse114 (res .cse115 (and- 1 .cse110) (=>- .cse115)) (=>- .cse114)) :proves (+ .cse113 - .cse110 - .cse86 - _houdini_Eval_loop_anon3_LoopHead_out_x_4) :input) (res .cse116 (res .cse117 (! (and- 0 .cse111) :proves (- .cse111 + .cse117) :input) (! (and- 1 .cse117) :proves (- .cse117 + .cse116) :input)) (! (res (= call9formal@_v2.out_x@0 _v2.Eval_loop_anon3_LoopHead_out_2_1@0) (symm call9formal@_v2.out_x@0 _v2.Eval_loop_anon3_LoopHead_out_2_1@0) (res (= call4formal@out_x@0 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@2) (symm call4formal@out_x@0 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@2) (res (= call4formal@out_x@0@@0 _v1.Eval_loop_anon3_LoopHead_out_1_1@0) (symm call4formal@out_x@0@@0 _v1.Eval_loop_anon3_LoopHead_out_1_1@0) (trans inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@2 call4formal@out_x@0@@0 _v1.Eval_loop_anon3_LoopHead_out_1_1@0 call7formal@_v1.out_x@0 call9formal@_v2.out_x@0 _v2.Eval_loop_anon3_LoopHead_out_2_1@0 call4formal@out_x@0 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@2)))) :proves (+ .cse26 - .cse93 - .cse95 - .cse116 - .cse113 - .cse112 - .cse65 - .cse63) :trans (inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@2 call4formal@out_x@0@@0 _v1.Eval_loop_anon3_LoopHead_out_1_1@0 call7formal@_v1.out_x@0 call9formal@_v2.out_x@0 _v2.Eval_loop_anon3_LoopHead_out_2_1@0 call4formal@out_x@0 inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@2))))))))))) .cse118) .cse119) .cse120))) .cse121)))))))))))))))) .cse122) .cse123) .cse124) .cse125)))) .cse126))))))))))))) .cse127)) .cse128) .cse129) .cse130) .cse131) .cse132) .cse133) .cse134) .cse7)) .cse8) .cse9) .cse13) .cse22))))) :proves (+ .cse27 - .cse23) :rup) (res .cse135 .cse136 (res .cse137 (res .cse138 (res .cse32 .cse139 (res .cse140 (res .cse66 .cse141 (res .cse142 .cse143 (res .cse62 .cse125 (res .cse144 .cse145 (res .cse55 (res .cse146 (! (and- 0 .cse144) :proves (- .cse144 + .cse146) :input) (res .cse45 (res .cse147 (! (and- 1 .cse146) :proves (- .cse146 + .cse147) :input) (res .cse148 (res .cse149 (res .cse150 (res .cse151 .cse152 (res .cse153 .cse154 (! (and- 0 .cse153) :proves (- .cse153 + .cse150) :input))) (! (and- 1 .cse150) :proves (- .cse150 + .cse148) :input)) .cse155) (! (res (= _v2.in_x inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@2) (symm _v2.in_x inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@2) (trans inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@2 _v1.in_x _v2.in_x inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@2)) :proves (+ .cse26 - .cse148 - .cse4 - .cse147) :trans (inline$_v1.Eval_loop_anon3_LoopHead$0$out_x@2 _v1.in_x _v2.in_x inline$_v2.Eval_loop_anon3_LoopHead$0$out_x@2)))) .cse56)) .cse126))))) .cse156)) .cse157) .cse158))) .cse134)) .cse7) .cse8) .cse9) .cse13) .cse22))))))))))))) :proves (- .cse4) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 (! (res .cse3 (! (res .cse4 .cse5 .cse6) :proves (+ .cse3) :rup) .cse7) :proves (+ .cse2) :rup) .cse8) :proves (+ .cse1) :rup) .cse9) :proves (+ .cse0) :rup) (res .cse10 .cse11 (res .cse12 .cse13 (! (res .cse14 (! (res .cse15 (! (res .cse16 (! (res .cse17 .cse18 (! (res .cse4 .cse19 .cse6) :proves (- .cse17) :rup)) :proves (+ .cse16) :rup) .cse20) :proves (+ .cse15) :rup) .cse21) :proves (+ .cse14) :rup) .cse22) :proves (- .cse12) :rup))))))))))))))))))))))))))))))))) :proves () :rup)

