unsat
(! (let ((.cse39 (ControlFlow 0 5))) (let ((.cse2 (= .cse39 (- 6))) (.cse0 (= (- 6) .cse39))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 6) .cse39)) (res .cse2 (symm .cse39 (- 6)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse82 (ControlFlow 0 2))) (let ((.cse77 (= .cse82 (- 1)))) (let ((.cse25 (= .cse39 2)) (.cse27 (=> .cse77 false))) (let ((.cse22 (=> .cse25 .cse27))) (let ((.cse5 (=> false .cse22))) (let-proof ((.cse6 false-)) (res .cse5 (! (res false (=>+ 0 .cse5) .cse6) :proves (+ .cse5) :input) (let ((.cse84 (ControlFlow 0 7))) (let ((.cse46 (= .cse84 5)) (.cse8 (and .cse1 .cse5))) (let ((.cse7 (=> .cse46 .cse8))) (res .cse7 (! (res .cse8 (and+ .cse8) (=>+ 1 .cse7)) :proves (+ .cse7 - .cse1 - .cse5) :input) (! (let ((.cse67 (ControlFlow 0 3))) (let ((.cse55 (= .cse67 2))) (let ((.cse54 (=> .cse55 .cse27)) (.cse62 (= .cse67 (- 4)))) (let ((.cse60 (=> .cse62 false)) (.cse52 (=> false .cse54))) (let ((.cse50 (and .cse60 .cse52))) (let ((.cse72 (= .cse84 3)) (.cse10 (=> false .cse50))) (let ((.cse9 (=> .cse72 .cse10))) (res .cse9 (! (res .cse10 (! (res false (=>+ 0 .cse10) .cse6) :proves (+ .cse10) :input) (! (=>+ 1 .cse9) :proves (+ .cse9 - .cse10) :input)) :proves (+ .cse9) :rup) (! (let ((.cse11 (and .cse9 .cse7))) (res .cse11 (and+ .cse11) (let ((.cse83 (= (ControlFlow 0 0) 7))) (let ((.cse12 (=> .cse83 .cse11))) (res .cse12 (=>+ 1 .cse12) (let ((.cse75 (= 3 3)) (.cse78 (- 0 1))) (let ((.cse76 (= .cse82 .cse78)) (.cse73 (not .cse75))) (let ((.cse69 (= 1 1)) (.cse63 (- 0 4)) (.cse26 (=> .cse76 .cse73))) (let ((.cse53 (=> .cse55 .cse26)) (.cse61 (= .cse67 .cse63)) (.cse58 (not .cse69)) (.cse45 (= 2 2)) (.cse33 (- 0 6))) (let ((.cse21 (=> .cse25 .cse26)) (.cse32 (= .cse39 .cse33)) (.cse30 (not .cse45)) (.cse59 (=> .cse61 .cse58)) (.cse51 (=> .cse58 .cse53)) (.cse35 (= 0 0))) (let ((.cse70 (not .cse35)) (.cse49 (and .cse59 .cse51)) (.cse31 (=> .cse32 .cse30)) (.cse20 (=> .cse30 .cse21))) (let ((.cse19 (and .cse31 .cse20)) (.cse48 (=> .cse70 .cse49))) (let ((.cse47 (=> .cse72 .cse48)) (.cse18 (=> .cse46 .cse19))) (let ((.cse17 (and .cse47 .cse18))) (let ((.cse13 (=> .cse83 .cse17))) (let ((.cse15 (not .cse13))) (res .cse13 (let ((.cse14 (not .cse12))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res (= .cse13 .cse12) (res (= .cse17 .cse11) (let ((.cse42 (not true))) (let ((.cse40 (= .cse42 false))) (let-proof ((.cse44 true+)) (let-proof ((.cse41 (res false (res .cse42 (=+1 .cse40) (res true .cse44 (not- .cse42))) .cse6)) (.cse36 (refl 0))) (let ((.cse23 (= .cse26 .cse27))) (let-proof ((.cse24 (res (= .cse73 false) (res .cse40 .cse41 (res (= .cse73 .cse42) (let ((.cse74 (= .cse75 true))) (res .cse74 (res true .cse44 (res .cse75 (refl 3) (=+2 .cse74))) (cong (not .cse75) (not true)))) (trans .cse73 .cse42 false))) (res (= .cse76 .cse77) (res (= .cse78 (- 1)) (let ((.cse79 (* (- 1) 1))) (res (= .cse79 (- 1)) (poly* .cse79 (- 1)) (res .cse35 .cse36 (let ((.cse80 (+ 0 .cse79)) (.cse81 (+ 0 (- 1)))) (res (= .cse80 .cse81) (cong (+ 0 .cse79) (+ 0 (- 1))) (res (= .cse78 .cse80) (-def 0 1) (res (= .cse81 (- 1)) (poly+ .cse81 (- 1)) (trans .cse78 .cse80 .cse81 (- 1))))))))) (res (= .cse82 .cse82) (refl .cse82) (cong (= .cse82 .cse78) (= .cse82 (- 1))))) (cong (=> .cse76 .cse73) (=> .cse77 false)))))) (res (= .cse18 .cse7) (res (= .cse19 .cse8) (let ((.cse28 (= .cse30 false))) (let-proof ((.cse29 (res .cse40 .cse41 (res (= .cse30 .cse42) (let ((.cse43 (= .cse45 true))) (res .cse43 (res true .cse44 (res .cse45 (refl 2) (=+2 .cse43))) (cong (not .cse45) (not true)))) (trans .cse30 .cse42 false))))) (res (= .cse20 .cse5) (res (= .cse21 .cse22) (res .cse23 .cse24 (res (= .cse25 .cse25) (refl .cse25) (cong (=> .cse25 .cse26) (=> .cse25 .cse27)))) (res .cse28 .cse29 (cong (=> .cse30 .cse21) (=> false .cse22)))) (res (= .cse31 .cse1) (res .cse28 .cse29 (res (= .cse32 .cse2) (res (= .cse33 (- 6)) (let ((.cse34 (* (- 1) 6))) (res (= .cse34 (- 6)) (poly* .cse34 (- 6)) (res .cse35 .cse36 (let ((.cse37 (+ 0 .cse34)) (.cse38 (+ 0 (- 6)))) (res (= .cse37 .cse38) (cong (+ 0 .cse34) (+ 0 (- 6))) (res (= .cse33 .cse37) (-def 0 6) (res (= .cse38 (- 6)) (poly+ .cse38 (- 6)) (trans .cse33 .cse37 .cse38 (- 6))))))))) (res (= .cse39 .cse39) (refl .cse39) (cong (= .cse39 .cse33) (= .cse39 (- 6))))) (cong (=> .cse32 .cse30) (=> .cse2 false)))) (cong (and .cse31 .cse20) (and .cse1 .cse5)))))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse19) (=> .cse46 .cse8)))) (res (= .cse47 .cse9) (res (= .cse48 .cse10) (res (= .cse49 .cse50) (let ((.cse56 (= .cse58 false))) (let-proof ((.cse57 (res .cse40 .cse41 (res (= .cse58 .cse42) (let ((.cse68 (= .cse69 true))) (res .cse68 (res true .cse44 (res .cse69 (refl 1) (=+2 .cse68))) (cong (not .cse69) (not true)))) (trans .cse58 .cse42 false))))) (res (= .cse51 .cse52) (res (= .cse53 .cse54) (res .cse23 .cse24 (res (= .cse55 .cse55) (refl .cse55) (cong (=> .cse55 .cse26) (=> .cse55 .cse27)))) (res .cse56 .cse57 (cong (=> .cse58 .cse53) (=> false .cse54)))) (res (= .cse59 .cse60) (res .cse56 .cse57 (res (= .cse61 .cse62) (res (= .cse63 (- 4)) (let ((.cse64 (* (- 1) 4))) (res (= .cse64 (- 4)) (poly* .cse64 (- 4)) (res .cse35 .cse36 (let ((.cse65 (+ 0 .cse64)) (.cse66 (+ 0 (- 4)))) (res (= .cse65 .cse66) (cong (+ 0 .cse64) (+ 0 (- 4))) (res (= .cse63 .cse65) (-def 0 4) (res (= .cse66 (- 4)) (poly+ .cse66 (- 4)) (trans .cse63 .cse65 .cse66 (- 4))))))))) (res (= .cse67 .cse67) (refl .cse67) (cong (= .cse67 .cse63) (= .cse67 (- 4))))) (cong (=> .cse61 .cse58) (=> .cse62 false)))) (cong (and .cse59 .cse51) (and .cse60 .cse52)))))) (res (= .cse70 false) (res .cse40 .cse41 (res (= .cse70 .cse42) (let ((.cse71 (= .cse35 true))) (res .cse71 (res true .cse44 (res .cse35 .cse36 (=+2 .cse71))) (cong (not .cse35) (not true)))) (trans .cse70 .cse42 false))) (cong (=> .cse70 .cse49) (=> false .cse50)))) (res (= .cse72 .cse72) (refl .cse72) (cong (=> .cse72 .cse48) (=> .cse72 .cse10)))) (cong (and .cse47 .cse18) (and .cse9 .cse7)))))))))) (res (= .cse83 .cse83) (refl .cse83) (cong (=> .cse83 .cse17) (=> .cse83 .cse11)))) (cong (not .cse13) (not .cse12))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (assume .cse15) (not- .cse15))))))))))))))))))) :proves (- .cse9 - .cse7) :input))))))))) :proves (- .cse7) :rup)))))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse86 (not .cse2))) (res .cse2 (let ((.cse85 (not .cse0))) (res .cse85 (res .cse86 (not+ .cse86) (let ((.cse87 (= .cse86 .cse85))) (res .cse87 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse87)))) (not- .cse85))) (res .cse86 (assume .cse86) (not- .cse86)))) :proves (- .cse0) :input)))))) :proves () :rup)

