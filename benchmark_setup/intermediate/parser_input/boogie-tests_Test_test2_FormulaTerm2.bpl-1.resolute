unsat
(! (let ((.cse46 (+ B (* (- 1) A)))) (let ((.cse41 (ControlFlow 0 2)) (.cse13 (<= .cse46 0))) (let ((.cse9 (< A B)) (.cse20 (f true)) (.cse10 (not .cse13)) (.cse36 (= .cse41 (- 1)))) (let ((.cse15 (and .cse10 .cse36)) (.cse21 (= .cse20 5)) (.cse7 (= .cse9 .cse10))) (let-proof ((.cse14 (not+ .cse10)) (.cse18 (not- .cse10))) (let ((.cse16 (=> .cse15 .cse21))) (let-proof ((.cse8 (res .cse10 (res .cse9 (=+1 .cse7) (res .cse13 .cse14 (farkas 1 .cse9 1 .cse13))) (res .cse9 (let ((.cse44 (<= B A))) (res .cse44 (total B A) (res .cse13 (let ((.cse45 (< 0 .cse46))) (res .cse45 (total .cse46 0) (farkas 1 .cse44 1 .cse45))) .cse18))) (=+2 .cse7))))) (let ((.cse0 (= 5 .cse20))) (let-proof ((.cse17 (let ((.cse42 (= (ControlFlow 0 3) 2))) (let ((.cse26 (=> .cse42 .cse16))) (res .cse26 (=>+ 1 .cse26) (let ((.cse43 (= (ControlFlow 0 0) 3))) (let ((.cse27 (=> .cse43 .cse26))) (res .cse27 (=>+ 1 .cse27) (let ((.cse37 (- 0 1))) (let ((.cse35 (= .cse41 .cse37))) (let ((.cse34 (and .cse9 .cse35))) (let ((.cse33 (=> .cse34 .cse21))) (let ((.cse32 (=> .cse42 .cse33))) (let ((.cse28 (=> .cse43 .cse32))) (let ((.cse30 (not .cse28))) (res .cse28 (let ((.cse29 (not .cse27))) (res .cse29 (res .cse30 (not+ .cse30) (let ((.cse31 (= .cse30 .cse29))) (res .cse31 (res (= .cse28 .cse27) (res (= .cse32 .cse26) (res (= .cse33 .cse16) (res (= .cse21 .cse21) (refl .cse21) (res (= .cse34 .cse15) (res (= .cse35 .cse36) (res (= .cse37 (- 1)) (let ((.cse38 (* (- 1) 1))) (res (= .cse38 (- 1)) (poly* .cse38 (- 1)) (res (= 0 0) (refl 0) (let ((.cse39 (+ 0 .cse38)) (.cse40 (+ 0 (- 1)))) (res (= .cse39 .cse40) (cong (+ 0 .cse38) (+ 0 (- 1))) (res (= .cse37 .cse39) (-def 0 1) (res (= .cse40 (- 1)) (poly+ .cse40 (- 1)) (trans .cse37 .cse39 .cse40 (- 1))))))))) (res (= .cse41 .cse41) (refl .cse41) (cong (= .cse41 .cse37) (= .cse41 (- 1))))) (res .cse7 .cse8 (cong (and .cse9 .cse35) (and .cse10 .cse36)))) (cong (=> .cse34 .cse21) (=> .cse15 .cse21)))) (res (= .cse42 .cse42) (refl .cse42) (cong (=> .cse42 .cse33) (=> .cse42 .cse16)))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse32) (=> .cse43 .cse26)))) (cong (not .cse28) (not .cse27))) (=-2 .cse31)))) (not- .cse29))) (res .cse30 (assume .cse30) (not- .cse30)))))))))))))))))) (res .cse0 (let ((.cse6 (f .cse10))) (let ((.cse1 (= 5 .cse6))) (res .cse1 (! (let ((.cse2 (= .cse6 5))) (res .cse2 (let ((.cse5 (f .cse9))) (let ((.cse3 (= .cse5 5))) (res .cse3 (assume .cse3) (let ((.cse4 (= .cse3 .cse2))) (res .cse4 (res (= 5 5) (refl 5) (res (= .cse5 .cse6) (res .cse7 .cse8 (cong (f .cse9) (f .cse10))) (cong (= .cse5 5) (= .cse6 5)))) (=-2 .cse4)))))) (let ((.cse11 (= .cse2 .cse1))) (res .cse11 (res .cse1 (res .cse2 (=+1 .cse11) (symm 5 .cse6)) (res .cse2 (symm .cse6 5) (=+2 .cse11))) (=-2 .cse11))))) :proves (+ .cse1) :input) (let ((.cse12 (= .cse10 true))) (res .cse12 (! (res .cse13 (! (res .cse10 .cse14 (res true true+ (=+2 .cse12))) :proves (+ .cse12 + .cse13) :input) (! (res .cse15 (res .cse16 (=>+ 0 .cse16) .cse17) (res .cse10 (and- 0 .cse15) .cse18)) :proves (- .cse13) :input)) :proves (+ .cse12) :rup) (let ((.cse19 (= .cse6 .cse20))) (res .cse19 (! (cong (f .cse10) (f true)) :proves (+ .cse19 - .cse12) :cong (.cse6 .cse20)) (! (trans 5 .cse6 .cse20) :proves (+ .cse0 - .cse1 - .cse19) :trans (5 .cse6 .cse20))))))))) (! (res .cse21 (let ((.cse22 (not .cse0))) (res .cse22 (let ((.cse23 (not .cse21))) (res .cse23 (not+ .cse23) (let ((.cse24 (= .cse23 .cse22))) (res .cse24 (let ((.cse25 (= .cse21 .cse0))) (res .cse25 (res .cse0 (res .cse21 (=+1 .cse25) (symm 5 .cse20)) (res .cse21 (symm .cse20 5) (=+2 .cse25))) (cong (not .cse21) (not .cse0)))) (=-2 .cse24))))) (not- .cse22))) (res .cse16 (=>+ 1 .cse16) .cse17)) :proves (- .cse0) :input))))))))))) :proves () :rup)

