unsat
(! (let ((.cse26 (ControlFlow 0 2))) (let ((.cse1 (= .cse26 (- 1))) (.cse0 (= (- 1) .cse26))) (let ((.cse36 (= .cse1 .cse0))) (let-proof ((.cse37 (res .cse0 (res .cse1 (=+1 .cse36) (symm (- 1) .cse26)) (res .cse1 (symm .cse26 (- 1)) (=+2 .cse36))))) (res .cse0 (! (res .cse1 (let ((.cse33 (+ B (* (- 1) A)))) (let ((.cse30 (<= .cse33 0))) (let ((.cse28 (not .cse30))) (let ((.cse2 (and .cse28 .cse1))) (res .cse2 (let ((.cse17 (f true))) (let ((.cse19 (+ (* (- 1) .cse17) 2))) (let ((.cse15 (<= .cse19 0))) (let ((.cse13 (not .cse15))) (let ((.cse3 (=> .cse2 .cse13))) (res .cse3 (=>+ 0 .cse3) (let ((.cse34 (= (ControlFlow 0 3) 2))) (let ((.cse4 (=> .cse34 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse35 (= (ControlFlow 0 0) 3))) (let ((.cse5 (=> .cse35 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse22 (- 0 1))) (let ((.cse29 (< A B)) (.cse21 (= .cse26 .cse22))) (let ((.cse20 (and .cse29 .cse21)) (.cse14 (< .cse17 2))) (let ((.cse11 (=> .cse20 .cse14))) (let ((.cse10 (=> .cse34 .cse11))) (let ((.cse6 (=> .cse35 .cse10))) (let ((.cse8 (not .cse6))) (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res (= .cse6 .cse5) (res (= .cse10 .cse4) (res (= .cse11 .cse3) (let ((.cse12 (= .cse14 .cse13))) (res .cse12 (res .cse13 (res .cse14 (=+1 .cse12) (res .cse15 (not+ .cse13) (farkas 1 .cse14 1 .cse15))) (res .cse14 (let ((.cse16 (<= 2 .cse17))) (res .cse16 (total 2 .cse17) (res .cse15 (let ((.cse18 (< 0 .cse19))) (res .cse18 (total .cse19 0) (farkas 1 .cse16 1 .cse18))) (not- .cse13)))) (=+2 .cse12))) (res (= .cse20 .cse2) (res (= .cse21 .cse1) (res (= .cse22 (- 1)) (let ((.cse23 (* (- 1) 1))) (res (= .cse23 (- 1)) (poly* .cse23 (- 1)) (res (= 0 0) (refl 0) (let ((.cse24 (+ 0 .cse23)) (.cse25 (+ 0 (- 1)))) (res (= .cse24 .cse25) (cong (+ 0 .cse23) (+ 0 (- 1))) (res (= .cse22 .cse24) (-def 0 1) (res (= .cse25 (- 1)) (poly+ .cse25 (- 1)) (trans .cse22 .cse24 .cse25 (- 1))))))))) (res (= .cse26 .cse26) (refl .cse26) (cong (= .cse26 .cse22) (= .cse26 (- 1))))) (let ((.cse27 (= .cse29 .cse28))) (res .cse27 (res .cse28 (res .cse29 (=+1 .cse27) (res .cse30 (not+ .cse28) (farkas 1 .cse29 1 .cse30))) (res .cse29 (let ((.cse31 (<= B A))) (res .cse31 (total B A) (res .cse30 (let ((.cse32 (< 0 .cse33))) (res .cse32 (total .cse33 0) (farkas 1 .cse31 1 .cse32))) (not- .cse28)))) (=+2 .cse27))) (cong (and .cse29 .cse21) (and .cse28 .cse1))))) (cong (=> .cse20 .cse14) (=> .cse2 .cse13))))) (res (= .cse34 .cse34) (refl .cse34) (cong (=> .cse34 .cse11) (=> .cse34 .cse3)))) (res (= .cse35 .cse35) (refl .cse35) (cong (=> .cse35 .cse10) (=> .cse35 .cse4)))) (cong (not .cse6) (not .cse5))) (=-2 .cse9)))) (not- .cse7))) (res .cse8 (assume .cse8) (not- .cse8)))))))))))))))))))))) (and- 1 .cse2)))))) (res .cse36 .cse37 (=-2 .cse36))) :proves (+ .cse0) :input) (! (let ((.cse39 (not .cse1))) (res .cse1 (let ((.cse38 (not .cse0))) (res .cse38 (res .cse39 (not+ .cse39) (let ((.cse40 (= .cse39 .cse38))) (res .cse40 (res .cse36 .cse37 (cong (not .cse1) (not .cse0))) (=-2 .cse40)))) (not- .cse38))) (res .cse39 (assume .cse39) (not- .cse39)))) :proves (- .cse0) :input)))))) :proves () :rup)

