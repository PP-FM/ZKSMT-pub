unsat
(! (let ((.cse22 (ControlFlow 0 2))) (let ((.cse1 (= .cse22 (- 1))) (.cse0 (= (- 1) .cse22))) (let ((.cse41 (= .cse1 .cse0))) (let-proof ((.cse42 (res .cse0 (res .cse1 (=+1 .cse41) (symm (- 1) .cse22)) (res .cse1 (symm .cse22 (- 1)) (=+2 .cse41))))) (res .cse0 (! (res .cse1 (let ((.cse27 (= myVar@0 (- 1)))) (let ((.cse25 (not .cse27))) (let ((.cse2 (and .cse25 .cse1))) (res .cse2 (let ((.cse3 (and .cse2 b2))) (res .cse3 (let ((.cse37 (<= myVar@0 0))) (let ((.cse32 (not .cse37))) (let ((.cse4 (=> .cse3 .cse32))) (res .cse4 (=>+ 0 .cse4) (let ((.cse34 (=> b1 .cse32))) (let ((.cse5 (=> .cse34 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse39 (= (ControlFlow 0 3) 2))) (let ((.cse6 (=> .cse39 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse40 (= (ControlFlow 0 0) 3))) (let ((.cse7 (=> .cse40 .cse6))) (res .cse7 (=>+ 1 .cse7) (let ((.cse23 (- 0 1))) (let ((.cse26 (= myVar@0 .cse23))) (let ((.cse24 (not .cse26)) (.cse19 (= .cse22 .cse23))) (let ((.cse18 (and .cse24 .cse19))) (let ((.cse17 (and .cse18 b2)) (.cse31 (> myVar@0 0))) (let ((.cse33 (=> b1 .cse31)) (.cse14 (=> .cse17 .cse31))) (let ((.cse13 (=> .cse33 .cse14))) (let ((.cse12 (=> .cse39 .cse13))) (let ((.cse8 (=> .cse40 .cse12))) (let ((.cse10 (not .cse8))) (res .cse8 (let ((.cse9 (not .cse7))) (res .cse9 (res .cse10 (not+ .cse10) (let ((.cse11 (= .cse10 .cse9))) (res .cse11 (res (= .cse8 .cse7) (res (= .cse12 .cse6) (res (= .cse13 .cse5) (let ((.cse15 (= .cse31 .cse32))) (let-proof ((.cse16 (let ((.cse36 (< 0 myVar@0))) (let ((.cse35 (= .cse31 .cse36))) (res .cse35 (>def myVar@0 0) (res .cse32 (res .cse31 (=+1 .cse15) (res .cse36 (=-2 .cse35) (res .cse37 (not+ .cse32) (farkas 1 .cse36 1 .cse37)))) (res .cse31 (res .cse36 (let-proof ((.cse38 (total myVar@0 0))) (res .cse37 .cse38 (res .cse37 (res .cse36 .cse38 (farkas 1 .cse37 1 .cse36)) (not- .cse32)))) (=-1 .cse35)) (=+2 .cse15)))))))) (res (= .cse14 .cse4) (res .cse15 .cse16 (res (= .cse17 .cse3) (res (= b2 b2) (refl b2) (res (= .cse18 .cse2) (let ((.cse20 (= .cse23 (- 1)))) (let-proof ((.cse21 (let ((.cse28 (* (- 1) 1))) (res (= .cse28 (- 1)) (poly* .cse28 (- 1)) (res (= 0 0) (refl 0) (let ((.cse29 (+ 0 .cse28)) (.cse30 (+ 0 (- 1)))) (res (= .cse29 .cse30) (cong (+ 0 .cse28) (+ 0 (- 1))) (res (= .cse23 .cse29) (-def 0 1) (res (= .cse30 (- 1)) (poly+ .cse30 (- 1)) (trans .cse23 .cse29 .cse30 (- 1))))))))))) (res (= .cse19 .cse1) (res .cse20 .cse21 (res (= .cse22 .cse22) (refl .cse22) (cong (= .cse22 .cse23) (= .cse22 (- 1))))) (res (= .cse24 .cse25) (res (= .cse26 .cse27) (res .cse20 .cse21 (res (= myVar@0 myVar@0) (refl myVar@0) (cong (= myVar@0 .cse23) (= myVar@0 (- 1))))) (cong (not .cse26) (not .cse27))) (cong (and .cse24 .cse19) (and .cse25 .cse1)))))) (cong (and .cse18 b2) (and .cse2 b2)))) (cong (=> .cse17 .cse31) (=> .cse3 .cse32)))) (res (= .cse33 .cse34) (res .cse15 .cse16 (res (= b1 b1) (refl b1) (cong (=> b1 .cse31) (=> b1 .cse32)))) (cong (=> .cse33 .cse14) (=> .cse34 .cse4)))))) (res (= .cse39 .cse39) (refl .cse39) (cong (=> .cse39 .cse13) (=> .cse39 .cse5)))) (res (= .cse40 .cse40) (refl .cse40) (cong (=> .cse40 .cse12) (=> .cse40 .cse6)))) (cong (not .cse8) (not .cse7))) (=-2 .cse11)))) (not- .cse9))) (res .cse10 (assume .cse10) (not- .cse10)))))))))))))))))))))))))) (and- 0 .cse3))) (and- 1 .cse2))))) (res .cse41 .cse42 (=-2 .cse41))) :proves (+ .cse0) :input) (! (let ((.cse44 (not .cse1))) (res .cse1 (let ((.cse43 (not .cse0))) (res .cse43 (res .cse44 (not+ .cse44) (let ((.cse45 (= .cse44 .cse43))) (res .cse45 (res .cse41 .cse42 (cong (not .cse1) (not .cse0))) (=-2 .cse45)))) (not- .cse43))) (res .cse44 (assume .cse44) (not- .cse44)))) :proves (- .cse0) :input)))))) :proves () :rup)

