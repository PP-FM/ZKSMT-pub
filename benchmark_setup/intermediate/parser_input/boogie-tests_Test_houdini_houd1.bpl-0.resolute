unsat
(! (let ((.cse65 (= myVar@0 (- 1))) (.cse73 (ControlFlow 0 2)) (.cse95 (<= myVar@0 0))) (let ((.cse92 (not .cse95)) (.cse70 (= .cse73 (- 1))) (.cse63 (not .cse65))) (let ((.cse1 (=> .cse70 .cse63)) (.cse85 (= .cse73 (- 3))) (.cse82 (=> b1 .cse92))) (let ((.cse103 (+ myVar@0 1)) (.cse5 (=> .cse85 .cse82)) (.cse3 (=> .cse82 .cse1)) (.cse11 (= myVar@0 0))) (let ((.cse12 (and .cse11 (= (ControlFlow 0 5) 2))) (.cse8 (and .cse5 .cse3)) (.cse0 (= .cse103 0))) (let ((.cse7 (=> .cse12 .cse8))) (let-proof ((.cse6 (! (let ((.cse107 (= (- 3) .cse73))) (let ((.cse108 (= .cse85 .cse107))) (let-proof ((.cse109 (res .cse107 (res .cse85 (=+1 .cse108) (symm (- 3) .cse73)) (res .cse85 (symm .cse73 (- 3)) (=+2 .cse108))))) (res .cse107 (! (res .cse85 (=>+ 0 .cse5) (res .cse108 .cse109 (=-2 .cse108))) :proves (+ .cse5 + .cse107) :input) (! (let ((.cse111 (not .cse85))) (res .cse85 (let ((.cse110 (not .cse107))) (res .cse110 (res .cse111 (not+ .cse111) (let ((.cse112 (= .cse111 .cse110))) (res .cse112 (res .cse108 .cse109 (cong (not .cse85) (not .cse107))) (=-2 .cse112)))) (not- .cse110))) (res .cse111 (assume .cse111) (not- .cse111)))) :proves (- .cse107) :input))))) :proves (+ .cse5) :rup)) (.cse2 (! (res .cse65 (res .cse63 (not+ .cse63) (=>+ 1 .cse1)) (let ((.cse99 (= .cse65 .cse0))) (res .cse99 (res .cse0 (res .cse65 (=+1 .cse99) (let ((.cse100 (= (- 1) myVar@0))) (res .cse100 (symm (- 1) myVar@0) (let ((.cse101 (< .cse103 0))) (res .cse101 (let ((.cse102 (< 0 .cse103))) (res .cse102 (trichotomy .cse103 0) (farkas 1 .cse65 1 .cse102))) (farkas 1 .cse100 1 .cse101)))))) (res .cse65 (let ((.cse104 (= 0 .cse103))) (res .cse104 (symm 0 .cse103) (let ((.cse105 (< myVar@0 (- 1)))) (res .cse105 (let ((.cse106 (< (- 1) myVar@0))) (res .cse106 (trichotomy myVar@0 (- 1)) (farkas 1 .cse0 1 .cse106))) (farkas 1 .cse104 1 .cse105))))) (=+2 .cse99))) (=-2 .cse99)))) :proves (+ .cse1 + .cse0) :input)) (.cse4 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse1) :input)) (.cse9 (and+ .cse8))) (let-proof ((.cse10 (! (let ((.cse45 (<= i 0))) (let ((.cse14 (=> .cse45 .cse7))) (res .cse14 (! (=>+ 1 .cse14) :proves (+ .cse14 - .cse7) :input) (! (let ((.cse98 (ControlFlow 0 6))) (let ((.cse51 (= .cse98 5))) (let ((.cse15 (=> .cse51 .cse14))) (res .cse15 (! (=>+ 1 .cse15) :proves (+ .cse15 - .cse14) :input) (! (let ((.cse21 (= myVar@0 5))) (let ((.cse19 (and .cse21 (= (ControlFlow 0 4) 2)))) (let ((.cse57 (not .cse45)) (.cse18 (=> .cse19 .cse8))) (let ((.cse59 (= .cse98 4)) (.cse17 (=> .cse57 .cse18))) (let ((.cse16 (=> .cse59 .cse17))) (res .cse16 (! (res .cse17 (! (res .cse18 (! (res .cse5 .cse6 (res .cse3 (res .cse19 (! (=>+ 0 .cse18) :proves (+ .cse18 + .cse19) :input) (res .cse1 (let ((.cse26 (+ myVar@0 (- 5)))) (let ((.cse20 (= .cse26 0)) (.cse27 (= 0 .cse26))) (let-proof ((.cse28 (symm 0 .cse26))) (res .cse20 (! (res .cse21 (and- 0 .cse19) (let ((.cse22 (= .cse21 .cse20))) (res .cse22 (res .cse20 (res .cse21 (=+1 .cse22) (let ((.cse23 (= 5 myVar@0))) (res .cse23 (symm 5 myVar@0) (let ((.cse24 (< .cse26 0))) (res .cse24 (let ((.cse25 (< 0 .cse26))) (res .cse25 (trichotomy .cse26 0) (farkas 1 .cse21 1 .cse25))) (farkas 1 .cse23 1 .cse24)))))) (res .cse21 (res .cse27 .cse28 (let ((.cse29 (< myVar@0 5))) (res .cse29 (let ((.cse30 (< 5 myVar@0))) (res .cse30 (trichotomy myVar@0 5) (farkas 1 .cse20 1 .cse30))) (farkas 1 .cse27 1 .cse29)))) (=+2 .cse22))) (=-2 .cse22)))) :proves (- .cse19 + .cse20) :input) (res .cse0 .cse2 (! (res .cse27 .cse28 (farkas 1 .cse0 1 .cse27)) :proves (- .cse0 - .cse20) :LA (1 (- 1)))))))) .cse4)) (! (res .cse8 .cse9 (=>+ 1 .cse18)) :proves (+ .cse18 - .cse3 - .cse5) :input))) :proves (+ .cse18) :rup) (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse18) :input)) :proves (+ .cse17) :rup) (! (=>+ 1 .cse16) :proves (+ .cse16 - .cse17) :input)) :proves (+ .cse16) :rup) (! (let ((.cse31 (and .cse16 .cse15))) (res .cse31 (and+ .cse31) (let ((.cse97 (= (ControlFlow 0 0) 6))) (let ((.cse32 (=> .cse97 .cse31))) (res .cse32 (=>+ 1 .cse32) (let ((.cse68 (- 0 1))) (let ((.cse64 (= myVar@0 .cse68))) (let ((.cse93 (> myVar@0 0)) (.cse86 (- 0 3)) (.cse69 (= .cse73 .cse68)) (.cse62 (not .cse64))) (let ((.cse61 (=> .cse69 .cse62)) (.cse84 (= .cse73 .cse86)) (.cse81 (=> b1 .cse93))) (let ((.cse83 (=> .cse84 .cse81)) (.cse60 (=> .cse81 .cse61))) (let ((.cse43 (and .cse83 .cse60))) (let ((.cse58 (> i 0)) (.cse54 (=> .cse19 .cse43)) (.cse46 (>= 0 i)) (.cse40 (=> .cse12 .cse43))) (let ((.cse39 (=> .cse46 .cse40)) (.cse53 (=> .cse58 .cse54))) (let ((.cse52 (=> .cse59 .cse53)) (.cse38 (=> .cse51 .cse39))) (let ((.cse37 (and .cse52 .cse38))) (let ((.cse33 (=> .cse97 .cse37))) (let ((.cse35 (not .cse33))) (res .cse33 (let ((.cse34 (not .cse32))) (res .cse34 (res .cse35 (not+ .cse35) (let ((.cse36 (= .cse35 .cse34))) (res .cse36 (res (= .cse33 .cse32) (res (= .cse37 .cse31) (let ((.cse48 (< 0 i))) (let-proof ((.cse49 (total i 0))) (let ((.cse41 (= .cse43 .cse8))) (let-proof ((.cse42 (let ((.cse79 (= .cse81 .cse82)) (.cse75 (= 0 0)) (.cse71 (= .cse73 .cse73))) (let-proof ((.cse80 (let ((.cse90 (= .cse93 .cse92))) (res .cse90 (let ((.cse94 (< 0 myVar@0))) (let ((.cse91 (= .cse93 .cse94))) (res .cse91 (>def myVar@0 0) (res .cse92 (res .cse93 (=+1 .cse90) (res .cse94 (=-2 .cse91) (res .cse95 (not+ .cse92) (farkas 1 .cse94 1 .cse95)))) (res .cse93 (res .cse94 (let-proof ((.cse96 (total myVar@0 0))) (res .cse95 .cse96 (res .cse95 (res .cse94 .cse96 (farkas 1 .cse95 1 .cse94)) (not- .cse92)))) (=-1 .cse91)) (=+2 .cse90)))))) (res (= b1 b1) (refl b1) (cong (=> b1 .cse93) (=> b1 .cse92)))))) (.cse76 (refl 0)) (.cse72 (refl .cse73))) (res (= .cse60 .cse3) (res (= .cse61 .cse1) (let ((.cse66 (= .cse68 (- 1)))) (let-proof ((.cse67 (let ((.cse74 (* (- 1) 1))) (res (= .cse74 (- 1)) (poly* .cse74 (- 1)) (res .cse75 .cse76 (let ((.cse77 (+ 0 .cse74)) (.cse78 (+ 0 (- 1)))) (res (= .cse77 .cse78) (cong (+ 0 .cse74) (+ 0 (- 1))) (res (= .cse68 .cse77) (-def 0 1) (res (= .cse78 (- 1)) (poly+ .cse78 (- 1)) (trans .cse68 .cse77 .cse78 (- 1))))))))))) (res (= .cse62 .cse63) (res (= .cse64 .cse65) (res .cse66 .cse67 (res (= myVar@0 myVar@0) (refl myVar@0) (cong (= myVar@0 .cse68) (= myVar@0 (- 1))))) (cong (not .cse64) (not .cse65))) (res (= .cse69 .cse70) (res .cse66 .cse67 (res .cse71 .cse72 (cong (= .cse73 .cse68) (= .cse73 (- 1))))) (cong (=> .cse69 .cse62) (=> .cse70 .cse63)))))) (res .cse79 .cse80 (cong (=> .cse81 .cse61) (=> .cse82 .cse1)))) (res (= .cse83 .cse5) (res .cse79 .cse80 (res (= .cse84 .cse85) (res (= .cse86 (- 3)) (let ((.cse87 (* (- 1) 3))) (res (= .cse87 (- 3)) (poly* .cse87 (- 3)) (res .cse75 .cse76 (let ((.cse88 (+ 0 .cse87)) (.cse89 (+ 0 (- 3)))) (res (= .cse88 .cse89) (cong (+ 0 .cse87) (+ 0 (- 3))) (res (= .cse86 .cse88) (-def 0 3) (res (= .cse89 (- 3)) (poly+ .cse89 (- 3)) (trans .cse86 .cse88 .cse89 (- 3))))))))) (res .cse71 .cse72 (cong (= .cse73 .cse86) (= .cse73 (- 3))))) (cong (=> .cse84 .cse81) (=> .cse85 .cse82)))) (cong (and .cse83 .cse60) (and .cse5 .cse3))))))) (.cse50 (farkas 1 .cse48 1 .cse45)) (.cse47 (res .cse48 .cse49 (farkas 1 .cse45 1 .cse48)))) (res (= .cse38 .cse15) (res (= .cse39 .cse14) (res (= .cse40 .cse7) (res .cse41 .cse42 (res (= .cse12 .cse12) (refl .cse12) (cong (=> .cse12 .cse43) (=> .cse12 .cse8)))) (let ((.cse44 (= .cse46 .cse45))) (res .cse44 (res .cse44 (>=def 0 i) (res .cse45 (res .cse46 (=+1 .cse44) (res .cse45 (=-2 .cse44) .cse47)) (res .cse46 (res .cse45 (res .cse48 .cse49 .cse50) (=-1 .cse44)) (=+2 .cse44)))) (cong (=> .cse46 .cse40) (=> .cse45 .cse7))))) (res (= .cse51 .cse51) (refl .cse51) (cong (=> .cse51 .cse39) (=> .cse51 .cse14)))) (res (= .cse52 .cse16) (res (= .cse53 .cse17) (res (= .cse54 .cse18) (res .cse41 .cse42 (res (= .cse19 .cse19) (refl .cse19) (cong (=> .cse19 .cse43) (=> .cse19 .cse8)))) (let ((.cse55 (= .cse58 .cse57))) (res .cse55 (let ((.cse56 (= .cse58 .cse48))) (res .cse56 (>def i 0) (res .cse57 (res .cse58 (=+1 .cse55) (res .cse48 (=-2 .cse56) (res .cse45 (not+ .cse57) .cse50))) (res .cse58 (res .cse48 (res .cse45 .cse49 (res .cse45 .cse47 (not- .cse57))) (=-1 .cse56)) (=+2 .cse55))))) (cong (=> .cse58 .cse54) (=> .cse57 .cse18))))) (res (= .cse59 .cse59) (refl .cse59) (cong (=> .cse59 .cse53) (=> .cse59 .cse17)))) (cong (and .cse52 .cse38) (and .cse16 .cse15)))))))) (res (= .cse97 .cse97) (refl .cse97) (cong (=> .cse97 .cse37) (=> .cse97 .cse31)))) (cong (not .cse33) (not .cse32))) (=-2 .cse36)))) (not- .cse34))) (res .cse35 (assume .cse35) (not- .cse35)))))))))))))))))))) :proves (- .cse16 - .cse15) :input))))))) :proves (- .cse15) :rup))))) :proves (- .cse14) :rup)))) :proves (- .cse7) :rup))) (res .cse0 (res .cse1 .cse2 (! (res .cse3 .cse4 (! (res .cse5 .cse6 (res .cse7 (! (res .cse8 .cse9 (=>+ 1 .cse7)) :proves (- .cse3 + .cse7 - .cse5) :input) .cse10)) :proves (- .cse3) :rup)) :proves (- .cse1) :rup)) (! (res .cse11 (! (res .cse12 (! (res .cse7 (! (=>+ 0 .cse7) :proves (+ .cse7 + .cse12) :input) .cse10) :proves (+ .cse12) :rup) (! (and- 0 .cse12) :proves (- .cse12 + .cse11) :input)) :proves (+ .cse11) :rup) (! (let ((.cse13 (= 0 myVar@0))) (res .cse13 (symm 0 myVar@0) (farkas 1 .cse0 1 .cse13))) :proves (- .cse0 - .cse11) :LA (1 (- 1)))) :proves (- .cse0) :rup)))))))))) :proves () :rup)

