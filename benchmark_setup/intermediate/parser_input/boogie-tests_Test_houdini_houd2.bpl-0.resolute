unsat
(! (let ((.cse20 (ControlFlow 0 2))) (let ((.cse1 (= .cse20 (- 1))) (.cse0 (= (- 1) .cse20))) (let ((.cse39 (= .cse1 .cse0))) (let-proof ((.cse40 (res .cse0 (res .cse1 (=+1 .cse39) (symm (- 1) .cse20)) (res .cse1 (symm .cse20 (- 1)) (=+2 .cse39))))) (res .cse0 (! (res .cse1 (let ((.cse25 (= myVar@0 (- 1)))) (let ((.cse23 (not .cse25))) (let ((.cse2 (and .cse23 .cse1))) (res .cse2 (let ((.cse35 (<= myVar@0 0))) (let ((.cse30 (not .cse35))) (let ((.cse3 (=> .cse2 .cse30))) (res .cse3 (=>+ 0 .cse3) (let ((.cse32 (=> b1 .cse30))) (let ((.cse4 (=> .cse32 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse37 (= (ControlFlow 0 3) 2))) (let ((.cse5 (=> .cse37 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse38 (= (ControlFlow 0 0) 3))) (let ((.cse6 (=> .cse38 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse21 (- 0 1))) (let ((.cse24 (= myVar@0 .cse21))) (let ((.cse22 (not .cse24)) (.cse17 (= .cse20 .cse21))) (let ((.cse16 (and .cse22 .cse17)) (.cse29 (> myVar@0 0))) (let ((.cse31 (=> b1 .cse29)) (.cse13 (=> .cse16 .cse29))) (let ((.cse12 (=> .cse31 .cse13))) (let ((.cse11 (=> .cse37 .cse12))) (let ((.cse7 (=> .cse38 .cse11))) (let ((.cse9 (not .cse7))) (res .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res (= .cse7 .cse6) (res (= .cse11 .cse5) (res (= .cse12 .cse4) (let ((.cse14 (= .cse29 .cse30))) (let-proof ((.cse15 (let ((.cse34 (< 0 myVar@0))) (let ((.cse33 (= .cse29 .cse34))) (res .cse33 (>def myVar@0 0) (res .cse30 (res .cse29 (=+1 .cse14) (res .cse34 (=-2 .cse33) (res .cse35 (not+ .cse30) (farkas 1 .cse34 1 .cse35)))) (res .cse29 (res .cse34 (let-proof ((.cse36 (total myVar@0 0))) (res .cse35 .cse36 (res .cse35 (res .cse34 .cse36 (farkas 1 .cse35 1 .cse34)) (not- .cse30)))) (=-1 .cse33)) (=+2 .cse14)))))))) (res (= .cse13 .cse3) (res .cse14 .cse15 (res (= .cse16 .cse2) (let ((.cse18 (= .cse21 (- 1)))) (let-proof ((.cse19 (let ((.cse26 (* (- 1) 1))) (res (= .cse26 (- 1)) (poly* .cse26 (- 1)) (res (= 0 0) (refl 0) (let ((.cse27 (+ 0 .cse26)) (.cse28 (+ 0 (- 1)))) (res (= .cse27 .cse28) (cong (+ 0 .cse26) (+ 0 (- 1))) (res (= .cse21 .cse27) (-def 0 1) (res (= .cse28 (- 1)) (poly+ .cse28 (- 1)) (trans .cse21 .cse27 .cse28 (- 1))))))))))) (res (= .cse17 .cse1) (res .cse18 .cse19 (res (= .cse20 .cse20) (refl .cse20) (cong (= .cse20 .cse21) (= .cse20 (- 1))))) (res (= .cse22 .cse23) (res (= .cse24 .cse25) (res .cse18 .cse19 (res (= myVar@0 myVar@0) (refl myVar@0) (cong (= myVar@0 .cse21) (= myVar@0 (- 1))))) (cong (not .cse24) (not .cse25))) (cong (and .cse22 .cse17) (and .cse23 .cse1)))))) (cong (=> .cse16 .cse29) (=> .cse2 .cse30)))) (res (= .cse31 .cse32) (res .cse14 .cse15 (res (= b1 b1) (refl b1) (cong (=> b1 .cse29) (=> b1 .cse30)))) (cong (=> .cse31 .cse13) (=> .cse32 .cse3)))))) (res (= .cse37 .cse37) (refl .cse37) (cong (=> .cse37 .cse12) (=> .cse37 .cse4)))) (res (= .cse38 .cse38) (refl .cse38) (cong (=> .cse38 .cse11) (=> .cse38 .cse5)))) (cong (not .cse7) (not .cse6))) (=-2 .cse10)))) (not- .cse8))) (res .cse9 (assume .cse9) (not- .cse9))))))))))))))))))))))))) (and- 1 .cse2))))) (res .cse39 .cse40 (=-2 .cse39))) :proves (+ .cse0) :input) (! (let ((.cse42 (not .cse1))) (res .cse1 (let ((.cse41 (not .cse0))) (res .cse41 (res .cse42 (not+ .cse42) (let ((.cse43 (= .cse42 .cse41))) (res .cse43 (res .cse39 .cse40 (cong (not .cse1) (not .cse0))) (=-2 .cse43)))) (not- .cse41))) (res .cse42 (assume .cse42) (not- .cse42)))) :proves (- .cse0) :input)))))) :proves () :rup)

