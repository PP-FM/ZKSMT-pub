unsat
(! (let ((.cse69 (+ y (* (- 1) x)))) (let ((.cse4 (<= .cse69 0))) (let ((.cse3 (xor z@0 .cse4))) (let ((.cse7 (not .cse3)) (.cse66 (ControlFlow 0 2))) (let ((.cse61 (= .cse66 (- 1))) (.cse8 (not .cse7)) (.cse50 (= (ControlFlow 0 3) 2)) (.cse38 (not z@0)) (.cse36 (= (ControlFlow 0 4) 2))) (let ((.cse35 (and .cse38 .cse36)) (.cse14 (not .cse4)) (.cse0 (and z@0 .cse50)) (.cse6 (=> .cse61 .cse8))) (let ((.cse1 (=> .cse0 .cse6)) (.cse16 (not .cse14)) (.cse31 (=> .cse35 .cse6)) (.cse71 (ControlFlow 0 5))) (let ((.cse45 (= .cse71 4)) (.cse13 (=> .cse16 .cse31)) (.cse53 (= .cse71 3)) (.cse10 (=> .cse14 .cse1))) (let ((.cse11 (=> .cse53 .cse10)) (.cse12 (=> .cse45 .cse13))) (let ((.cse17 (and .cse11 .cse12))) (let ((.cse18 (=> .cse14 .cse17))) (let-proof ((.cse9 (not- .cse7)) (.cse15 (not+ .cse14)) (.cse20 (not- .cse14))) (let-proof ((.cse19 (let ((.cse70 (= (ControlFlow 0 0) 5))) (let ((.cse21 (=> .cse70 .cse18))) (res .cse21 (=>+ 1 .cse21) (let ((.cse44 (< x y)) (.cse62 (- 0 1))) (let ((.cse60 (= .cse66 .cse62)) (.cse54 (= z@0 .cse44)) (.cse52 (= z@0 true)) (.cse39 (= z@0 false))) (let ((.cse34 (and .cse39 .cse36)) (.cse49 (and .cse52 .cse50)) (.cse40 (=> .cse60 .cse54))) (let ((.cse48 (=> .cse49 .cse40)) (.cse41 (not .cse44)) (.cse30 (=> .cse34 .cse40))) (let ((.cse29 (=> .cse41 .cse30)) (.cse47 (=> .cse44 .cse48))) (let ((.cse46 (=> .cse53 .cse47)) (.cse28 (=> .cse45 .cse29))) (let ((.cse27 (and .cse46 .cse28))) (let ((.cse26 (=> .cse44 .cse27))) (let ((.cse22 (=> .cse70 .cse26))) (let ((.cse24 (not .cse22))) (res .cse22 (let ((.cse23 (not .cse21))) (res .cse23 (res .cse24 (not+ .cse24) (let ((.cse25 (= .cse24 .cse23))) (res .cse25 (res (= .cse22 .cse21) (res (= .cse26 .cse18) (let ((.cse42 (= .cse44 .cse14))) (let-proof ((.cse43 (res .cse14 (res .cse44 (=+1 .cse42) (res .cse4 .cse15 (farkas 1 .cse44 1 .cse4))) (res .cse44 (let ((.cse67 (<= y x))) (res .cse67 (total y x) (res .cse4 (let ((.cse68 (< 0 .cse69))) (res .cse68 (total .cse69 0) (farkas 1 .cse67 1 .cse68))) .cse20))) (=+2 .cse42))))) (res (= .cse27 .cse17) (let ((.cse32 (= .cse40 .cse6))) (let-proof ((.cse33 (res (= .cse54 .cse8) (let ((.cse55 (= z@0 .cse14))) (res (= .cse55 .cse8) (let ((.cse58 (xor z@0 .cse14))) (let ((.cse56 (not .cse58))) (res (= .cse56 .cse8) (let ((.cse57 (= .cse58 .cse7))) (res .cse57 (res (xor .cse14 .cse4) (res .cse4 (res .cse14 .cse15 (xor+ (.cse14 .cse4) (.cse4) (.cse14))) (res .cse14 (xor+ (.cse14 .cse4) (.cse14) (.cse4)) .cse20)) (res .cse58 (res .cse7 (=+1 .cse57) (res .cse3 (xor+ (z@0 .cse14) (z@0 .cse4) (.cse14 .cse4)) .cse9)) (res .cse7 (res .cse3 (not+ .cse7) (xor- (z@0 .cse4) (.cse14 .cse4) (z@0 .cse14))) (=+2 .cse57)))) (cong (not .cse58) (not .cse7)))) (let ((.cse59 (= .cse55 .cse56))) (res .cse59 (res .cse55 (res .cse58 (res z@0 (res .cse14 (=+1 .cse55) (xor+ (z@0 .cse14) (z@0) (.cse14))) (res .cse14 (xor+ (z@0 .cse14) (.cse14) (z@0)) (=+2 .cse55))) (res .cse56 (=+1 .cse59) (not- .cse56))) (res .cse58 (res .cse56 (not+ .cse56) (=+2 .cse59)) (res z@0 (res .cse14 (xor+ (z@0) (.cse14) (z@0 .cse14)) (=-1 .cse55)) (res .cse14 (=-2 .cse55) (xor- (z@0) (.cse14) (z@0 .cse14)))))) (trans .cse55 .cse56 .cse8)))))) (res (= .cse54 .cse55) (res .cse42 .cse43 (res (= z@0 z@0) (refl z@0) (cong (= z@0 .cse44) (= z@0 .cse14)))) (trans .cse54 .cse55 .cse8)))) (res (= .cse60 .cse61) (res (= .cse62 (- 1)) (let ((.cse63 (* (- 1) 1))) (res (= .cse63 (- 1)) (poly* .cse63 (- 1)) (res (= 0 0) (refl 0) (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 1)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 1))) (res (= .cse62 .cse64) (-def 0 1) (res (= .cse65 (- 1)) (poly+ .cse65 (- 1)) (trans .cse62 .cse64 .cse65 (- 1))))))))) (res (= .cse66 .cse66) (refl .cse66) (cong (= .cse66 .cse62) (= .cse66 (- 1))))) (cong (=> .cse60 .cse54) (=> .cse61 .cse8)))))) (res (= .cse28 .cse12) (res (= .cse29 .cse13) (res (= .cse30 .cse31) (res .cse32 .cse33 (res (= .cse34 .cse35) (res (= .cse36 .cse36) (refl .cse36) (let ((.cse37 (= .cse39 .cse38))) (res .cse37 (res false (res .cse38 (res .cse39 (=+1 .cse37) (res z@0 (not+ .cse38) (=-2 .cse39))) (res .cse39 (res z@0 (=+1 .cse39) (not- .cse38)) (=+2 .cse37))) false-) (cong (and .cse39 .cse36) (and .cse38 .cse36))))) (cong (=> .cse34 .cse40) (=> .cse35 .cse6)))) (res (= .cse41 .cse16) (res .cse42 .cse43 (cong (not .cse44) (not .cse14))) (cong (=> .cse41 .cse30) (=> .cse16 .cse31)))) (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse29) (=> .cse45 .cse13)))) (res (= .cse46 .cse11) (res (= .cse47 .cse10) (res (= .cse48 .cse1) (res .cse32 .cse33 (res (= .cse49 .cse0) (res (= .cse50 .cse50) (refl .cse50) (let ((.cse51 (= .cse52 z@0))) (res .cse51 (res true true+ (res z@0 (res .cse52 (=+1 .cse51) (=-1 .cse52)) (res .cse52 (=+2 .cse52) (=+2 .cse51)))) (cong (and .cse52 .cse50) (and z@0 .cse50))))) (cong (=> .cse49 .cse40) (=> .cse0 .cse6)))) (res .cse42 .cse43 (cong (=> .cse44 .cse48) (=> .cse14 .cse1)))) (res (= .cse53 .cse53) (refl .cse53) (cong (=> .cse53 .cse47) (=> .cse53 .cse10)))) (cong (and .cse46 .cse28) (and .cse11 .cse12)))))) (res .cse42 .cse43 (cong (=> .cse44 .cse27) (=> .cse14 .cse17)))))) (res (= .cse70 .cse70) (refl .cse70) (cong (=> .cse70 .cse26) (=> .cse70 .cse18)))) (cong (not .cse22) (not .cse21))) (=-2 .cse25)))) (not- .cse23))) (res .cse24 (assume .cse24) (not- .cse24)))))))))))))))))) (let-proof ((.cse5 (! (res .cse18 (res .cse14 (=>+ 0 .cse18) .cse20) .cse19) :proves (- .cse4) :input))) (let-proof ((.cse2 (! (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse1) :input) (! (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse10) :input) (! (res .cse12 (! (res .cse13 (! (res .cse4 (! (res .cse14 .cse15 (res .cse16 (=>+ 0 .cse13) (not- .cse16))) :proves (+ .cse13 + .cse4) :input) .cse5) :proves (+ .cse13) :rup) (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse13) :input)) :proves (+ .cse12) :rup) (! (res .cse17 (and+ .cse17) (res .cse18 (=>+ 1 .cse18) .cse19)) :proves (- .cse11 - .cse12) :input)) :proves (- .cse11) :rup)) :proves (- .cse10) :rup)) :proves (- .cse1) :rup))) (res z@0 (! (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (! (and- 0 .cse0) :proves (- .cse0 + z@0) :input)) :proves (+ z@0) :rup) (res .cse3 (res .cse4 (! (xor+ (z@0 .cse4) (.cse4) (z@0)) :proves (+ .cse3 - z@0 + .cse4) :input) .cse5) (! (res .cse6 (! (res .cse7 (res .cse8 (not+ .cse8) (=>+ 1 .cse6)) .cse9) :proves (+ .cse6 - .cse3) :input) (! (res .cse1 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse6) :input) .cse2) :proves (- .cse6) :rup)) :proves (- .cse3) :rup)))))))))))))))))) :proves () :rup)

