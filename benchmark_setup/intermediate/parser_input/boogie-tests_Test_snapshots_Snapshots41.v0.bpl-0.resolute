unsat
(! (let ((.cse14 (ControlFlow 0 2))) (let ((.cse2 (= .cse14 (- 3))) (.cse0 (= (- 3) .cse14))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 3) .cse14)) (res .cse2 (symm .cse14 (- 3)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse61 (* (- 1) x))) (let ((.cse101 (+ .cse61 10))) (let ((.cse20 (<= .cse101 0))) (let ((.cse24 (not .cse20))) (let ((.cse1 (=> .cse2 .cse24))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse8 (= .cse14 (- 1))) (.cse58 (<= .cse61 0))) (let ((.cse6 (=> .cse8 .cse58))) (let ((.cse5 (=> .cse24 .cse6))) (res .cse5 (! (res .cse6 (! (let ((.cse7 (= (- 1) .cse14))) (let ((.cse9 (= .cse8 .cse7))) (let-proof ((.cse10 (res .cse7 (res .cse8 (=+1 .cse9) (symm (- 1) .cse14)) (res .cse8 (symm .cse14 (- 1)) (=+2 .cse9))))) (res .cse7 (! (res .cse8 (=>+ 0 .cse6) (res .cse9 .cse10 (=-2 .cse9))) :proves (+ .cse6 + .cse7) :input) (! (let ((.cse12 (not .cse8))) (res .cse8 (let ((.cse11 (not .cse7))) (res .cse11 (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res .cse9 .cse10 (cong (not .cse8) (not .cse7))) (=-2 .cse13)))) (not- .cse11))) (res .cse12 (assume .cse12) (not- .cse12)))) :proves (- .cse7) :input))))) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (let ((.cse102 (+ .cse61 20))) (let ((.cse35 (<= .cse102 0))) (let ((.cse36 (not .cse35))) (let ((.cse18 (or .cse36 .cse20)) (.cse16 (and .cse1 .cse5))) (let ((.cse15 (=> .cse18 .cse16))) (res .cse15 (! (res .cse16 (and+ .cse16) (=>+ 1 .cse15)) :proves (+ .cse15 - .cse1 - .cse5) :input) (! (let ((.cse90 (= .cse14 (- 4)))) (let ((.cse40 (< 0 .cse102)) (.cse28 (< 0 .cse101)) (.cse17 (=> .cse90 .cse18))) (let-proof ((.cse25 (not+ .cse24)) (.cse37 (not+ .cse36)) (.cse41 (total .cse102 0)) (.cse29 (total .cse101 0))) (res .cse17 (! (res .cse18 (! (let ((.cse31 (+ x (- 9)))) (let ((.cse19 (<= .cse31 0))) (res .cse19 (! (res .cse20 (let ((.cse21 (not .cse19))) (let-proof ((.cse22 (not+ .cse21))) (res .cse21 .cse22 (let ((.cse23 (not .cse21))) (res .cse23 (res .cse24 .cse25 (let ((.cse26 (= .cse24 .cse23))) (res .cse26 (let ((.cse27 (= .cse20 .cse21))) (res .cse27 (res .cse21 (res .cse20 (=+1 .cse27) (res .cse19 .cse22 (farkas 1 .cse20 1 .cse19))) (res .cse20 (res .cse28 .cse29 (res .cse19 (let ((.cse30 (<= 1 .cse31))) (res .cse30 (total-int .cse31 0) (farkas 1 .cse28 1 .cse30))) (not- .cse21))) (=+2 .cse27))) (cong (not .cse20) (not .cse21)))) (=-2 .cse26)))) (not- .cse23)))))) (or+ 1 .cse18)) :proves (+ .cse18 + .cse19) :input) (let ((.cse43 (+ x (- 19)))) (let ((.cse33 (<= 1 .cse43)) (.cse32 (<= .cse43 0))) (let-proof ((.cse34 (total-int .cse43 0))) (res .cse32 (! (res .cse33 .cse34 (farkas 1 .cse33 1 .cse19)) :proves (+ .cse32 - .cse19) :LA ((- 1) 1)) (! (res .cse35 (res .cse36 .cse37 (or+ 0 .cse18)) (let ((.cse38 (not .cse32))) (let-proof ((.cse42 (not- .cse38))) (res .cse38 (let ((.cse39 (= .cse35 .cse38))) (res .cse39 (res .cse38 (res .cse35 (=+1 .cse39) (res .cse32 (not+ .cse38) (farkas 1 .cse35 1 .cse32))) (res .cse35 (res .cse40 .cse41 (res .cse32 (res .cse33 .cse34 (farkas 1 .cse40 1 .cse33)) .cse42)) (=+2 .cse39))) (=-2 .cse39))) .cse42)))) :proves (+ .cse18 - .cse32) :input)))))))) :proves (+ .cse18) :rup) (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse18) :input)) :proves (+ .cse17) :rup) (! (let ((.cse44 (and .cse17 .cse15))) (res .cse44 (and+ .cse44) (let ((.cse99 (= (ControlFlow 0 5) 2))) (let ((.cse45 (=> .cse99 .cse44))) (res .cse45 (=>+ 1 .cse45) (let ((.cse100 (= (ControlFlow 0 0) 5))) (let ((.cse46 (=> .cse100 .cse45))) (res .cse46 (=>+ 1 .cse46) (let ((.cse64 (- 0 1))) (let ((.cse77 (- 0 3)) (.cse63 (= .cse14 .cse64)) (.cse59 (<= 0 x))) (let ((.cse56 (=> .cse63 .cse59)) (.cse76 (= .cse14 .cse77)) (.cse74 (< x 10))) (let ((.cse97 (< x 20)) (.cse82 (<= 10 x)) (.cse91 (- 0 4)) (.cse75 (=> .cse76 .cse74)) (.cse55 (=> .cse74 .cse56))) (let ((.cse54 (and .cse75 .cse55)) (.cse89 (= .cse14 .cse91)) (.cse87 (or .cse97 .cse82))) (let ((.cse88 (=> .cse89 .cse87)) (.cse53 (=> .cse87 .cse54))) (let ((.cse52 (and .cse88 .cse53))) (let ((.cse51 (=> .cse99 .cse52))) (let ((.cse47 (=> .cse100 .cse51))) (let ((.cse49 (not .cse47))) (res .cse47 (let ((.cse48 (not .cse46))) (res .cse48 (res .cse49 (not+ .cse49) (let ((.cse50 (= .cse49 .cse48))) (res .cse50 (res (= .cse47 .cse46) (res (= .cse51 .cse45) (res (= .cse52 .cse44) (let-proof ((.cse84 (res .cse28 .cse29 (farkas 1 .cse82 1 .cse28))) (.cse83 (total 10 x)) (.cse81 (farkas 1 .cse74 1 .cse20))) (let ((.cse85 (= .cse87 .cse18)) (.cse66 (= 0 0)) (.cse70 (= .cse14 .cse14))) (let-proof ((.cse86 (let ((.cse95 (= .cse82 .cse20))) (res .cse95 (res .cse20 (res .cse82 (=+1 .cse95) .cse84) (res .cse82 (res .cse74 .cse83 .cse81) (=+2 .cse95))) (let ((.cse96 (= .cse97 .cse36))) (res .cse96 (res .cse36 (res .cse97 (=+1 .cse96) (res .cse35 .cse37 (farkas 1 .cse97 1 .cse35))) (res .cse97 (let ((.cse98 (<= 20 x))) (res .cse98 (total 20 x) (res .cse35 (res .cse40 .cse41 (farkas 1 .cse98 1 .cse40)) (not- .cse36)))) (=+2 .cse96))) (cong (or .cse97 .cse82) (or .cse36 .cse20))))))) (.cse67 (refl 0)) (.cse71 (refl .cse14))) (res (= .cse53 .cse15) (res (= .cse54 .cse16) (let ((.cse72 (= .cse74 .cse24))) (let-proof ((.cse73 (res .cse24 (res .cse74 (=+1 .cse72) (res .cse20 .cse25 .cse81)) (res .cse74 (res .cse82 .cse83 (res .cse20 .cse84 (not- .cse24))) (=+2 .cse72))))) (res (= .cse55 .cse5) (res (= .cse56 .cse6) (let ((.cse57 (= .cse59 .cse58))) (res .cse57 (res .cse58 (res .cse59 (=+1 .cse57) (let ((.cse60 (< 0 .cse61))) (res .cse60 (total .cse61 0) (farkas 1 .cse59 1 .cse60)))) (res .cse59 (let ((.cse62 (< x 0))) (res .cse62 (total 0 x) (farkas 1 .cse62 1 .cse58))) (=+2 .cse57))) (res (= .cse63 .cse8) (res (= .cse64 (- 1)) (let ((.cse65 (* (- 1) 1))) (res (= .cse65 (- 1)) (poly* .cse65 (- 1)) (res .cse66 .cse67 (let ((.cse68 (+ 0 .cse65)) (.cse69 (+ 0 (- 1)))) (res (= .cse68 .cse69) (cong (+ 0 .cse65) (+ 0 (- 1))) (res (= .cse64 .cse68) (-def 0 1) (res (= .cse69 (- 1)) (poly+ .cse69 (- 1)) (trans .cse64 .cse68 .cse69 (- 1))))))))) (res .cse70 .cse71 (cong (= .cse14 .cse64) (= .cse14 (- 1))))) (cong (=> .cse63 .cse59) (=> .cse8 .cse58))))) (res .cse72 .cse73 (cong (=> .cse74 .cse56) (=> .cse24 .cse6)))) (res (= .cse75 .cse1) (res .cse72 .cse73 (res (= .cse76 .cse2) (res (= .cse77 (- 3)) (let ((.cse78 (* (- 1) 3))) (res (= .cse78 (- 3)) (poly* .cse78 (- 3)) (res .cse66 .cse67 (let ((.cse79 (+ 0 .cse78)) (.cse80 (+ 0 (- 3)))) (res (= .cse79 .cse80) (cong (+ 0 .cse78) (+ 0 (- 3))) (res (= .cse77 .cse79) (-def 0 3) (res (= .cse80 (- 3)) (poly+ .cse80 (- 3)) (trans .cse77 .cse79 .cse80 (- 3))))))))) (res .cse70 .cse71 (cong (= .cse14 .cse77) (= .cse14 (- 3))))) (cong (=> .cse76 .cse74) (=> .cse2 .cse24)))) (cong (and .cse75 .cse55) (and .cse1 .cse5)))))) (res .cse85 .cse86 (cong (=> .cse87 .cse54) (=> .cse18 .cse16)))) (res (= .cse88 .cse17) (res .cse85 .cse86 (res (= .cse89 .cse90) (res (= .cse91 (- 4)) (let ((.cse92 (* (- 1) 4))) (res (= .cse92 (- 4)) (poly* .cse92 (- 4)) (res .cse66 .cse67 (let ((.cse93 (+ 0 .cse92)) (.cse94 (+ 0 (- 4)))) (res (= .cse93 .cse94) (cong (+ 0 .cse92) (+ 0 (- 4))) (res (= .cse91 .cse93) (-def 0 4) (res (= .cse94 (- 4)) (poly+ .cse94 (- 4)) (trans .cse91 .cse93 .cse94 (- 4))))))))) (res .cse70 .cse71 (cong (= .cse14 .cse91) (= .cse14 (- 4))))) (cong (=> .cse89 .cse87) (=> .cse90 .cse18)))) (cong (and .cse88 .cse53) (and .cse17 .cse15))))))) (res (= .cse99 .cse99) (refl .cse99) (cong (=> .cse99 .cse52) (=> .cse99 .cse44)))) (res (= .cse100 .cse100) (refl .cse100) (cong (=> .cse100 .cse51) (=> .cse100 .cse45)))) (cong (not .cse47) (not .cse46))) (=-2 .cse50)))) (not- .cse48))) (res .cse49 (assume .cse49) (not- .cse49))))))))))))))))))))) :proves (- .cse17 - .cse15) :input))))) :proves (- .cse15) :rup))))))))))) :proves (- .cse1) :rup))))))) :proves (+ .cse0) :rup) (! (let ((.cse104 (not .cse2))) (res .cse2 (let ((.cse103 (not .cse0))) (res .cse103 (res .cse104 (not+ .cse104) (let ((.cse105 (= .cse104 .cse103))) (res .cse105 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse105)))) (not- .cse103))) (res .cse104 (assume .cse104) (not- .cse104)))) :proves (- .cse0) :input)))))) :proves () :rup)

