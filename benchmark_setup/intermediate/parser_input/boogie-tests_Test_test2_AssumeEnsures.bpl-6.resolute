unsat
(! (let ((.cse25 (ControlFlow 0 2))) (let ((.cse1 (= .cse25 (- 1))) (.cse0 (= (- 1) .cse25))) (let ((.cse28 (= .cse1 .cse0))) (let-proof ((.cse29 (res .cse0 (res .cse1 (=+1 .cse28) (symm (- 1) .cse25)) (res .cse1 (symm .cse25 (- 1)) (=+2 .cse28))))) (res .cse0 (! (res .cse1 (let ((.cse19 (+ g (- 10)))) (let ((.cse16 (<= .cse19 0))) (let ((.cse13 (not .cse16))) (let ((.cse2 (=> .cse1 .cse13))) (res .cse2 (=>+ 0 .cse2) (let ((.cse26 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse26 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse27 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse27 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse21 (- 0 1))) (let ((.cse20 (= .cse25 .cse21)) (.cse14 (> g 10))) (let ((.cse10 (=> .cse20 .cse14))) (let ((.cse9 (=> .cse26 .cse10))) (let ((.cse5 (=> .cse27 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (let ((.cse11 (= .cse14 .cse13))) (res .cse11 (let ((.cse15 (< 10 g))) (let ((.cse12 (= .cse14 .cse15))) (res .cse12 (>def g 10) (res .cse13 (res .cse14 (=+1 .cse11) (res .cse15 (=-2 .cse12) (res .cse16 (not+ .cse13) (farkas 1 .cse15 1 .cse16)))) (res .cse14 (res .cse15 (let ((.cse17 (<= g 10))) (res .cse17 (total g 10) (res .cse16 (let ((.cse18 (< 0 .cse19))) (res .cse18 (total .cse19 0) (farkas 1 .cse17 1 .cse18))) (not- .cse13)))) (=-1 .cse12)) (=+2 .cse11)))))) (res (= .cse20 .cse1) (res (= .cse21 (- 1)) (let ((.cse22 (* (- 1) 1))) (res (= .cse22 (- 1)) (poly* .cse22 (- 1)) (res (= 0 0) (refl 0) (let ((.cse23 (+ 0 .cse22)) (.cse24 (+ 0 (- 1)))) (res (= .cse23 .cse24) (cong (+ 0 .cse22) (+ 0 (- 1))) (res (= .cse21 .cse23) (-def 0 1) (res (= .cse24 (- 1)) (poly+ .cse24 (- 1)) (trans .cse21 .cse23 .cse24 (- 1))))))))) (res (= .cse25 .cse25) (refl .cse25) (cong (= .cse25 .cse21) (= .cse25 (- 1))))) (cong (=> .cse20 .cse14) (=> .cse1 .cse13))))) (res (= .cse26 .cse26) (refl .cse26) (cong (=> .cse26 .cse10) (=> .cse26 .cse2)))) (res (= .cse27 .cse27) (refl .cse27) (cong (=> .cse27 .cse9) (=> .cse27 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7)))))))))))))))))))) (res .cse28 .cse29 (=-2 .cse28))) :proves (+ .cse0) :input) (! (let ((.cse31 (not .cse1))) (res .cse1 (let ((.cse30 (not .cse0))) (res .cse30 (res .cse31 (not+ .cse31) (let ((.cse32 (= .cse31 .cse30))) (res .cse32 (res .cse28 .cse29 (cong (not .cse1) (not .cse0))) (=-2 .cse32)))) (not- .cse30))) (res .cse31 (assume .cse31) (not- .cse31)))) :proves (- .cse0) :input)))))) :proves () :rup)

