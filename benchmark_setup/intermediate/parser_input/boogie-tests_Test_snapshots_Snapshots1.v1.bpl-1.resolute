unsat
(! (let ((.cse22 (ControlFlow 0 2))) (let ((.cse1 (= .cse22 (- 1))) (.cse0 (= (- 1) .cse22))) (let ((.cse25 (= .cse1 .cse0))) (let-proof ((.cse26 (res .cse0 (res .cse1 (=+1 .cse25) (symm (- 1) .cse22)) (res .cse1 (symm .cse22 (- 1)) (=+2 .cse25))))) (res .cse0 (! (res .cse1 (let ((.cse2 (=> .cse1 false))) (res .cse2 (=>+ 0 .cse2) (let ((.cse23 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse23 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse24 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse24 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse16 (= 2 2)) (.cse18 (- 0 1))) (let ((.cse17 (= .cse22 .cse18)) (.cse11 (not .cse16))) (let ((.cse10 (=> .cse17 .cse11))) (let ((.cse9 (=> .cse23 .cse10))) (let ((.cse5 (=> .cse24 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (res (= .cse11 false) (let ((.cse13 (not true))) (let ((.cse12 (= .cse13 false))) (let-proof ((.cse14 true+)) (res .cse12 (res false (res .cse13 (=+1 .cse12) (res true .cse14 (not- .cse13))) false-) (res (= .cse11 .cse13) (let ((.cse15 (= .cse16 true))) (res .cse15 (res true .cse14 (res .cse16 (refl 2) (=+2 .cse15))) (cong (not .cse16) (not true)))) (trans .cse11 .cse13 false)))))) (res (= .cse17 .cse1) (res (= .cse18 (- 1)) (let ((.cse19 (* (- 1) 1))) (res (= .cse19 (- 1)) (poly* .cse19 (- 1)) (res (= 0 0) (refl 0) (let ((.cse20 (+ 0 .cse19)) (.cse21 (+ 0 (- 1)))) (res (= .cse20 .cse21) (cong (+ 0 .cse19) (+ 0 (- 1))) (res (= .cse18 .cse20) (-def 0 1) (res (= .cse21 (- 1)) (poly+ .cse21 (- 1)) (trans .cse18 .cse20 .cse21 (- 1))))))))) (res (= .cse22 .cse22) (refl .cse22) (cong (= .cse22 .cse18) (= .cse22 (- 1))))) (cong (=> .cse17 .cse11) (=> .cse1 false)))) (res (= .cse23 .cse23) (refl .cse23) (cong (=> .cse23 .cse10) (=> .cse23 .cse2)))) (res (= .cse24 .cse24) (refl .cse24) (cong (=> .cse24 .cse9) (=> .cse24 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7))))))))))))))))) (res .cse25 .cse26 (=-2 .cse25))) :proves (+ .cse0) :input) (! (let ((.cse28 (not .cse1))) (res .cse1 (let ((.cse27 (not .cse0))) (res .cse27 (res .cse28 (not+ .cse28) (let ((.cse29 (= .cse28 .cse27))) (res .cse29 (res .cse25 .cse26 (cong (not .cse1) (not .cse0))) (=-2 .cse29)))) (not- .cse27))) (res .cse28 (assume .cse28) (not- .cse28)))) :proves (- .cse0) :input)))))) :proves () :rup)

