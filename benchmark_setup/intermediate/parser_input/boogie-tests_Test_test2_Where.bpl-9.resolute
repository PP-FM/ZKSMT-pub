unsat
(! (let ((.cse69 (ControlFlow 0 2))) (let ((.cse2 (= .cse69 (- 1))) (.cse0 (= (- 1) .cse69))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse69)) (res .cse2 (symm .cse69 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse135 (* (- 1) y@0))) (let ((.cse58 (+ .cse135 8))) (let ((.cse55 (<= .cse58 0))) (let ((.cse1 (=> .cse2 .cse55))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse5 (=> true .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse75 (= .cse69 (- 3)))) (let ((.cse6 (=> .cse75 true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (let ((.cse104 (+ x@0 .cse135))) (let ((.cse11 (<= .cse104 0)) (.cse9 (and .cse6 .cse5))) (let ((.cse8 (=> .cse11 .cse9))) (res .cse8 (! (res .cse9 (and+ .cse9) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse5 - .cse6) :input) (! (let ((.cse85 (= .cse69 (- 4)))) (let ((.cse133 (* (- 1) x@0)) (.cse10 (=> .cse85 .cse11))) (let ((.cse15 (and .cse10 .cse8)) (.cse95 (= .cse69 (- 5))) (.cse19 (<= .cse133 0))) (let ((.cse17 (=> .cse95 .cse19)) (.cse14 (=> .cse19 .cse15)) (.cse134 (ControlFlow 0 7))) (let ((.cse100 (= .cse134 2)) (.cse32 (and .cse17 .cse14))) (let ((.cse16 (=> .cse100 .cse32)) (.cse33 (=> (= .cse134 6) true))) (let ((.cse12 (and .cse19 .cse11)) (.cse34 (and .cse16 .cse33))) (let ((.cse28 (< 0 .cse133)) (.cse35 (=> .cse12 .cse34))) (let-proof ((.cse29 (total .cse133 0))) (let-proof ((.cse36 (let ((.cse119 (+ x (* (- 1) y))) (.cse129 (* (- 1) x))) (let ((.cse126 (<= .cse129 0)) (.cse116 (<= .cse119 0))) (let ((.cse112 (and .cse116 true)) (.cse110 (= (ControlFlow 0 8) 7)) (.cse131 (and (= w x) true)) (.cse124 (and .cse126 true))) (let ((.cse122 (and .cse131 .cse124)) (.cse109 (and .cse112 .cse110))) (let ((.cse107 (and .cse122 .cse109))) (let ((.cse37 (=> .cse107 .cse35))) (res .cse37 (=>+ 1 .cse37) (let ((.cse132 (= (ControlFlow 0 0) 8))) (let ((.cse38 (=> .cse132 .cse37))) (res .cse38 (=>+ 1 .cse38) (let ((.cse61 (- 0 1))) (let ((.cse76 (- 0 3)) (.cse60 (= .cse69 .cse61)) (.cse56 (<= 8 y@0))) (let ((.cse53 (=> .cse60 .cse56)) (.cse74 (= .cse69 .cse76)) (.cse72 (= 12 12))) (let ((.cse86 (- 0 4)) (.cse73 (=> .cse74 .cse72)) (.cse52 (=> .cse72 .cse53))) (let ((.cse51 (and .cse73 .cse52)) (.cse84 (= .cse69 .cse86)) (.cse82 (<= x@0 y@0))) (let ((.cse96 (- 0 5)) (.cse83 (=> .cse84 .cse82)) (.cse50 (=> .cse82 .cse51))) (let ((.cse49 (and .cse83 .cse50)) (.cse94 (= .cse69 .cse96)) (.cse92 (<= 0 x@0))) (let ((.cse93 (=> .cse94 .cse92)) (.cse48 (=> .cse92 .cse49))) (let ((.cse47 (and .cse93 .cse48)) (.cse127 (<= 0 x)) (.cse117 (<= x y))) (let ((.cse111 (and .cse117 true)) (.cse123 (and .cse127 true)) (.cse46 (=> .cse100 .cse47))) (let ((.cse101 (and .cse92 .cse82)) (.cse45 (and .cse46 .cse33)) (.cse121 (and .cse131 .cse123)) (.cse108 (and .cse111 .cse110))) (let ((.cse106 (and .cse121 .cse108)) (.cse44 (=> .cse101 .cse45))) (let ((.cse43 (=> .cse106 .cse44))) (let ((.cse39 (=> .cse132 .cse43))) (let ((.cse41 (not .cse39))) (res .cse39 (let ((.cse40 (not .cse38))) (res .cse40 (res .cse41 (not+ .cse41) (let ((.cse42 (= .cse41 .cse40))) (res .cse42 (res (= .cse39 .cse38) (res (= .cse43 .cse37) (res (= .cse44 .cse35) (let ((.cse90 (= .cse92 .cse19)) (.cse80 (= .cse82 .cse11))) (let-proof ((.cse81 (res .cse11 (res .cse82 (=+1 .cse80) (let ((.cse103 (< 0 .cse104))) (res .cse103 (total .cse104 0) (farkas 1 .cse82 1 .cse103)))) (res .cse82 (let ((.cse105 (< y@0 x@0))) (res .cse105 (total x@0 y@0) (farkas 1 .cse105 1 .cse11))) (=+2 .cse80)))) (.cse91 (res .cse19 (res .cse92 (=+1 .cse90) (res .cse28 .cse29 (farkas 1 .cse92 1 .cse28))) (res .cse92 (let ((.cse102 (< x@0 0))) (res .cse102 (total 0 x@0) (farkas 1 .cse102 1 .cse19))) (=+2 .cse90))))) (res (= .cse45 .cse34) (res (= .cse33 .cse33) (refl .cse33) (res (= .cse46 .cse16) (res (= .cse47 .cse32) (let ((.cse63 (= 0 0)) (.cse67 (= .cse69 .cse69))) (let-proof ((.cse64 (refl 0)) (.cse68 (refl .cse69))) (res (= .cse48 .cse14) (res (= .cse49 .cse15) (res (= .cse50 .cse8) (res (= .cse51 .cse9) (let ((.cse70 (= .cse72 true))) (let-proof ((.cse71 (res true .cse7 (res .cse72 (refl 12) (=+2 .cse70))))) (res (= .cse52 .cse5) (res (= .cse53 .cse1) (let ((.cse54 (= .cse56 .cse55))) (res .cse54 (res .cse55 (res .cse56 (=+1 .cse54) (let ((.cse57 (< 0 .cse58))) (res .cse57 (total .cse58 0) (farkas 1 .cse56 1 .cse57)))) (res .cse56 (let ((.cse59 (< y@0 8))) (res .cse59 (total 8 y@0) (farkas 1 .cse59 1 .cse55))) (=+2 .cse54))) (res (= .cse60 .cse2) (res (= .cse61 (- 1)) (let ((.cse62 (* (- 1) 1))) (res (= .cse62 (- 1)) (poly* .cse62 (- 1)) (res .cse63 .cse64 (let ((.cse65 (+ 0 .cse62)) (.cse66 (+ 0 (- 1)))) (res (= .cse65 .cse66) (cong (+ 0 .cse62) (+ 0 (- 1))) (res (= .cse61 .cse65) (-def 0 1) (res (= .cse66 (- 1)) (poly+ .cse66 (- 1)) (trans .cse61 .cse65 .cse66 (- 1))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse61) (= .cse69 (- 1))))) (cong (=> .cse60 .cse56) (=> .cse2 .cse55))))) (res .cse70 .cse71 (cong (=> .cse72 .cse53) (=> true .cse1)))) (res (= .cse73 .cse6) (res .cse70 .cse71 (res (= .cse74 .cse75) (res (= .cse76 (- 3)) (let ((.cse77 (* (- 1) 3))) (res (= .cse77 (- 3)) (poly* .cse77 (- 3)) (res .cse63 .cse64 (let ((.cse78 (+ 0 .cse77)) (.cse79 (+ 0 (- 3)))) (res (= .cse78 .cse79) (cong (+ 0 .cse77) (+ 0 (- 3))) (res (= .cse76 .cse78) (-def 0 3) (res (= .cse79 (- 3)) (poly+ .cse79 (- 3)) (trans .cse76 .cse78 .cse79 (- 3))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse76) (= .cse69 (- 3))))) (cong (=> .cse74 .cse72) (=> .cse75 true)))) (cong (and .cse73 .cse52) (and .cse6 .cse5)))))) (res .cse80 .cse81 (cong (=> .cse82 .cse51) (=> .cse11 .cse9)))) (res (= .cse83 .cse10) (res .cse80 .cse81 (res (= .cse84 .cse85) (res (= .cse86 (- 4)) (let ((.cse87 (* (- 1) 4))) (res (= .cse87 (- 4)) (poly* .cse87 (- 4)) (res .cse63 .cse64 (let ((.cse88 (+ 0 .cse87)) (.cse89 (+ 0 (- 4)))) (res (= .cse88 .cse89) (cong (+ 0 .cse87) (+ 0 (- 4))) (res (= .cse86 .cse88) (-def 0 4) (res (= .cse89 (- 4)) (poly+ .cse89 (- 4)) (trans .cse86 .cse88 .cse89 (- 4))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse86) (= .cse69 (- 4))))) (cong (=> .cse84 .cse82) (=> .cse85 .cse11)))) (cong (and .cse83 .cse50) (and .cse10 .cse8)))) (res .cse90 .cse91 (cong (=> .cse92 .cse49) (=> .cse19 .cse15)))) (res (= .cse93 .cse17) (res .cse90 .cse91 (res (= .cse94 .cse95) (res (= .cse96 (- 5)) (let ((.cse97 (* (- 1) 5))) (res (= .cse97 (- 5)) (poly* .cse97 (- 5)) (res .cse63 .cse64 (let ((.cse98 (+ 0 .cse97)) (.cse99 (+ 0 (- 5)))) (res (= .cse98 .cse99) (cong (+ 0 .cse97) (+ 0 (- 5))) (res (= .cse96 .cse98) (-def 0 5) (res (= .cse99 (- 5)) (poly+ .cse99 (- 5)) (trans .cse96 .cse98 .cse99 (- 5))))))))) (res .cse67 .cse68 (cong (= .cse69 .cse96) (= .cse69 (- 5))))) (cong (=> .cse94 .cse92) (=> .cse95 .cse19)))) (cong (and .cse93 .cse48) (and .cse17 .cse14)))))) (res (= .cse100 .cse100) (refl .cse100) (cong (=> .cse100 .cse47) (=> .cse100 .cse32)))) (cong (and .cse46 .cse33) (and .cse16 .cse33)))) (res (= .cse101 .cse12) (res .cse80 .cse81 (res .cse90 .cse91 (cong (and .cse92 .cse82) (and .cse19 .cse11)))) (cong (=> .cse101 .cse45) (=> .cse12 .cse34)))))) (res (= .cse106 .cse107) (let ((.cse113 (= true true))) (let-proof ((.cse114 (refl true))) (res (= .cse108 .cse109) (res (= .cse110 .cse110) (refl .cse110) (res (= .cse111 .cse112) (res .cse113 .cse114 (let ((.cse115 (= .cse117 .cse116))) (res .cse115 (res .cse116 (res .cse117 (=+1 .cse115) (let ((.cse118 (< 0 .cse119))) (res .cse118 (total .cse119 0) (farkas 1 .cse117 1 .cse118)))) (res .cse117 (let ((.cse120 (< y x))) (res .cse120 (total x y) (farkas 1 .cse120 1 .cse116))) (=+2 .cse115))) (cong (and .cse117 true) (and .cse116 true))))) (cong (and .cse111 .cse110) (and .cse112 .cse110)))) (res (= .cse121 .cse122) (res (= .cse123 .cse124) (res .cse113 .cse114 (let ((.cse125 (= .cse127 .cse126))) (res .cse125 (res .cse126 (res .cse127 (=+1 .cse125) (let ((.cse128 (< 0 .cse129))) (res .cse128 (total .cse129 0) (farkas 1 .cse127 1 .cse128)))) (res .cse127 (let ((.cse130 (< x 0))) (res .cse130 (total 0 x) (farkas 1 .cse130 1 .cse126))) (=+2 .cse125))) (cong (and .cse127 true) (and .cse126 true))))) (res (= .cse131 .cse131) (refl .cse131) (cong (and .cse131 .cse123) (and .cse131 .cse124)))) (cong (and .cse121 .cse108) (and .cse122 .cse109)))))) (cong (=> .cse106 .cse44) (=> .cse107 .cse35)))) (res (= .cse132 .cse132) (refl .cse132) (cong (=> .cse132 .cse43) (=> .cse132 .cse37)))) (cong (not .cse39) (not .cse38))) (=-2 .cse42)))) (not- .cse40))) (res .cse41 (assume .cse41) (not- .cse41)))))))))))))))))))))))))))))) (let-proof ((.cse13 (res .cse35 (=>+ 0 .cse35) .cse36))) (res .cse10 (! (res .cse11 (! (res .cse12 .cse13 (and- 1 .cse12)) :proves (+ .cse11) :input) (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse11) :input)) :proves (+ .cse10) :rup) (res .cse14 (! (res .cse15 (and+ .cse15) (=>+ 1 .cse14)) :proves (+ .cse14 - .cse8 - .cse10) :input) (! (res .cse16 (res .cse17 (! (let ((.cse31 (+ x@0 1))) (let ((.cse18 (<= .cse31 0))) (let ((.cse20 (not .cse18))) (let ((.cse25 (= .cse19 .cse20))) (let-proof ((.cse21 (not+ .cse20)) (.cse27 (not- .cse20))) (let-proof ((.cse26 (res .cse20 (res .cse19 (=+1 .cse25) (res .cse18 .cse21 (farkas 1 .cse19 1 .cse18))) (res .cse19 (res .cse28 .cse29 (res .cse18 (let ((.cse30 (<= 1 .cse31))) (res .cse30 (total-int .cse31 0) (farkas 1 .cse28 1 .cse30))) .cse27)) (=+2 .cse25))))) (res .cse18 (! (res .cse19 (res .cse20 .cse21 (let ((.cse22 (not .cse20))) (res .cse22 (let ((.cse23 (not .cse19))) (res .cse23 (not+ .cse23) (let ((.cse24 (= .cse23 .cse22))) (res .cse24 (res .cse25 .cse26 (cong (not .cse19) (not .cse20))) (=-2 .cse24))))) (not- .cse22)))) (=>+ 1 .cse17)) :proves (+ .cse17 + .cse18) :input) (! (res .cse19 (res .cse12 .cse13 (and- 0 .cse12)) (res .cse20 (res .cse25 .cse26 (=-2 .cse25)) .cse27)) :proves (- .cse18) :input)))))))) :proves (+ .cse17) :rup) (! (res .cse32 (and+ .cse32) (=>+ 1 .cse16)) :proves (- .cse14 - .cse17 + .cse16) :input)) (! (res .cse33 (! (res true .cse7 (=>+ 1 .cse33)) :proves (+ .cse33) :input) (! (res .cse34 (and+ .cse34) (res .cse35 (=>+ 1 .cse35) .cse36)) :proves (- .cse16 - .cse33) :input)) :proves (- .cse16) :rup)) :proves (- .cse14) :rup)))))))))))))) :proves (- .cse8) :rup))))))))) :proves (- .cse5) :rup))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse137 (not .cse2))) (res .cse2 (let ((.cse136 (not .cse0))) (res .cse136 (res .cse137 (not+ .cse137) (let ((.cse138 (= .cse137 .cse136))) (res .cse138 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse138)))) (not- .cse136))) (res .cse137 (assume .cse137) (not- .cse137)))) :proves (- .cse0) :input)))))) :proves () :rup)

