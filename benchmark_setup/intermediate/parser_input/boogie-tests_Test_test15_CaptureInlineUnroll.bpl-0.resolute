unsat
(! (let ((.cse24 (ControlFlow 0 3))) (let ((.cse19 (= .cse24 (- 2))) (.cse0 (= (- 2) .cse24))) (let ((.cse36 (= .cse19 .cse0))) (let-proof ((.cse37 (res .cse0 (res .cse19 (=+1 .cse36) (symm (- 2) .cse24)) (res .cse19 (symm .cse24 (- 2)) (=+2 .cse36))))) (res .cse0 (! (let ((.cse31 (+ n (* (- 1) i@0)))) (let ((.cse28 (<= .cse31 0))) (let ((.cse26 (not .cse28))) (let ((.cse1 (and .cse26 .cse19))) (res .cse1 (! (let ((.cse16 (not (= i@0 2)))) (let ((.cse2 (=> .cse1 .cse16))) (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + .cse1) :input) (! (let ((.cse35 (ControlFlow 0 4))) (let ((.cse32 (= .cse35 3))) (let ((.cse3 (=> .cse32 .cse2))) (res .cse3 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse2) :input) (! (let ((.cse4 (=> (= .cse35 1) true))) (res .cse4 (! (res true true+ (=>+ 1 .cse4)) :proves (+ .cse4) :input) (! (let ((.cse5 (and .cse4 .cse3))) (res .cse5 (and+ .cse5) (let ((.cse33 (= (ControlFlow 0 5) 4))) (let ((.cse6 (=> .cse33 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse34 (= (ControlFlow 0 0) 5))) (let ((.cse7 (=> .cse34 .cse6))) (res .cse7 (=>+ 1 .cse7) (let ((.cse20 (- 0 2))) (let ((.cse27 (< i@0 n)) (.cse18 (= .cse24 .cse20))) (let ((.cse17 (and .cse27 .cse18))) (let ((.cse15 (=> .cse17 .cse16))) (let ((.cse14 (=> .cse32 .cse15))) (let ((.cse13 (and .cse4 .cse14))) (let ((.cse12 (=> .cse33 .cse13))) (let ((.cse8 (=> .cse34 .cse12))) (let ((.cse10 (not .cse8))) (res .cse8 (let ((.cse9 (not .cse7))) (res .cse9 (res .cse10 (not+ .cse10) (let ((.cse11 (= .cse10 .cse9))) (res .cse11 (res (= .cse8 .cse7) (res (= .cse12 .cse6) (res (= .cse13 .cse5) (res (= .cse14 .cse3) (res (= .cse15 .cse2) (res (= .cse16 .cse16) (refl .cse16) (res (= .cse17 .cse1) (res (= .cse18 .cse19) (res (= .cse20 (- 2)) (let ((.cse21 (* (- 1) 2))) (res (= .cse21 (- 2)) (poly* .cse21 (- 2)) (res (= 0 0) (refl 0) (let ((.cse22 (+ 0 .cse21)) (.cse23 (+ 0 (- 2)))) (res (= .cse22 .cse23) (cong (+ 0 .cse21) (+ 0 (- 2))) (res (= .cse20 .cse22) (-def 0 2) (res (= .cse23 (- 2)) (poly+ .cse23 (- 2)) (trans .cse20 .cse22 .cse23 (- 2))))))))) (res (= .cse24 .cse24) (refl .cse24) (cong (= .cse24 .cse20) (= .cse24 (- 2))))) (let ((.cse25 (= .cse27 .cse26))) (res .cse25 (res .cse26 (res .cse27 (=+1 .cse25) (res .cse28 (not+ .cse26) (farkas 1 .cse27 1 .cse28))) (res .cse27 (let ((.cse29 (<= n i@0))) (res .cse29 (total n i@0) (res .cse28 (let ((.cse30 (< 0 .cse31))) (res .cse30 (total .cse31 0) (farkas 1 .cse29 1 .cse30))) (not- .cse26)))) (=+2 .cse25))) (cong (and .cse27 .cse18) (and .cse26 .cse19))))) (cong (=> .cse17 .cse16) (=> .cse1 .cse16)))) (res (= .cse32 .cse32) (refl .cse32) (cong (=> .cse32 .cse15) (=> .cse32 .cse2)))) (res (= .cse4 .cse4) (refl .cse4) (cong (and .cse4 .cse14) (and .cse4 .cse3)))) (res (= .cse33 .cse33) (refl .cse33) (cong (=> .cse33 .cse13) (=> .cse33 .cse5)))) (res (= .cse34 .cse34) (refl .cse34) (cong (=> .cse34 .cse12) (=> .cse34 .cse6)))) (cong (not .cse8) (not .cse7))) (=-2 .cse11)))) (not- .cse9))) (res .cse10 (assume .cse10) (not- .cse10)))))))))))))))))))) :proves (- .cse4 - .cse3) :input))) :proves (- .cse3) :rup))))) :proves (- .cse2) :rup)))) :proves (+ .cse1) :rup) (! (res .cse19 (and- 1 .cse1) (res .cse36 .cse37 (=-2 .cse36))) :proves (- .cse1 + .cse0) :input)))))) :proves (+ .cse0) :rup) (! (let ((.cse39 (not .cse19))) (res .cse19 (let ((.cse38 (not .cse0))) (res .cse38 (res .cse39 (not+ .cse39) (let ((.cse40 (= .cse39 .cse38))) (res .cse40 (res .cse36 .cse37 (cong (not .cse19) (not .cse0))) (=-2 .cse40)))) (not- .cse38))) (res .cse39 (assume .cse39) (not- .cse39)))) :proves (- .cse0) :input)))))) :proves () :rup)

