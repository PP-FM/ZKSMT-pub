unsat
(! (let ((.cse27 (ControlFlow 0 2)) (.cse31 (+ x y))) (let ((.cse1 (= z@0 .cse31)) (.cse22 (= .cse27 (- 1))) (.cse34 (+ x y (* (- 1) z@0)))) (let ((.cse0 (= .cse34 0)) (.cse2 (and .cse1 .cse22))) (let ((.cse3 (=> .cse2 .cse1)) (.cse5 (= .cse1 .cse0))) (let-proof ((.cse6 (res .cse0 (res .cse1 (=+1 .cse5) (let ((.cse30 (= .cse31 z@0))) (res .cse30 (symm .cse31 z@0) (let ((.cse32 (< .cse34 0))) (res .cse32 (let ((.cse33 (< 0 .cse34))) (res .cse33 (trichotomy .cse34 0) (farkas 1 .cse30 1 .cse33))) (farkas 1 .cse1 1 .cse32)))))) (res .cse1 (let ((.cse35 (= 0 .cse34))) (res .cse35 (symm 0 .cse34) (let ((.cse36 (< z@0 .cse31))) (res .cse36 (let ((.cse37 (< .cse31 z@0))) (res .cse37 (trichotomy z@0 .cse31) (farkas 1 .cse35 1 .cse37))) (farkas 1 .cse0 1 .cse36))))) (=+2 .cse5)))) (.cse4 (let ((.cse28 (= (ControlFlow 0 3) 2))) (let ((.cse10 (=> .cse28 .cse3))) (res .cse10 (=>+ 1 .cse10) (let ((.cse29 (= (ControlFlow 0 0) 3))) (let ((.cse11 (=> .cse29 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse23 (- 0 1))) (let ((.cse21 (= .cse27 .cse23))) (let ((.cse20 (and .cse1 .cse21))) (let ((.cse17 (=> .cse20 .cse1))) (let ((.cse16 (=> .cse28 .cse17))) (let ((.cse12 (=> .cse29 .cse16))) (let ((.cse14 (not .cse12))) (res .cse12 (let ((.cse13 (not .cse11))) (res .cse13 (res .cse14 (not+ .cse14) (let ((.cse15 (= .cse14 .cse13))) (res .cse15 (res (= .cse12 .cse11) (res (= .cse16 .cse10) (res (= .cse17 .cse3) (let ((.cse18 (= .cse1 .cse1))) (let-proof ((.cse19 (refl .cse1))) (res .cse18 .cse19 (res (= .cse20 .cse2) (res (= .cse21 .cse22) (res (= .cse23 (- 1)) (let ((.cse24 (* (- 1) 1))) (res (= .cse24 (- 1)) (poly* .cse24 (- 1)) (res (= 0 0) (refl 0) (let ((.cse25 (+ 0 .cse24)) (.cse26 (+ 0 (- 1)))) (res (= .cse25 .cse26) (cong (+ 0 .cse24) (+ 0 (- 1))) (res (= .cse23 .cse25) (-def 0 1) (res (= .cse26 (- 1)) (poly+ .cse26 (- 1)) (trans .cse23 .cse25 .cse26 (- 1))))))))) (res (= .cse27 .cse27) (refl .cse27) (cong (= .cse27 .cse23) (= .cse27 (- 1))))) (res .cse18 .cse19 (cong (and .cse1 .cse21) (and .cse1 .cse22)))) (cong (=> .cse20 .cse1) (=> .cse2 .cse1)))))) (res (= .cse28 .cse28) (refl .cse28) (cong (=> .cse28 .cse17) (=> .cse28 .cse3)))) (res (= .cse29 .cse29) (refl .cse29) (cong (=> .cse29 .cse16) (=> .cse29 .cse10)))) (cong (not .cse12) (not .cse11))) (=-2 .cse15)))) (not- .cse13))) (res .cse14 (assume .cse14) (not- .cse14)))))))))))))))))) (res .cse0 (! (res .cse1 (res .cse2 (res .cse3 (=>+ 0 .cse3) .cse4) (and- 0 .cse2)) (res .cse5 .cse6 (=-2 .cse5))) :proves (+ .cse0) :input) (! (res .cse1 (let ((.cse7 (not .cse0))) (res .cse7 (let ((.cse8 (not .cse1))) (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res .cse5 .cse6 (cong (not .cse1) (not .cse0))) (=-2 .cse9))))) (not- .cse7))) (res .cse3 (=>+ 1 .cse3) .cse4)) :proves (- .cse0) :input))))))) :proves () :rup)

