unsat
(! (let ((.cse42 (ControlFlow 0 2))) (let ((.cse2 (= .cse42 (- 1))) (.cse0 (= (- 1) .cse42))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse42)) (res .cse2 (symm .cse42 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse45 (ControlFlow 0 5))) (let ((.cse43 (= .cse45 2))) (let ((.cse5 (=> .cse43 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse28 (ControlFlow 0 4))) (let ((.cse21 (= .cse28 (- 3)))) (let ((.cse29 (= .cse45 4)) (.cse7 (=> .cse21 true))) (let ((.cse6 (=> .cse29 .cse7))) (let-proof ((.cse8 true+)) (res .cse6 (! (res .cse7 (! (res true .cse8 (=>+ 1 .cse7)) :proves (+ .cse7) :input) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (let ((.cse9 (and .cse5 .cse6))) (res .cse9 (and+ .cse9) (let ((.cse44 (= (ControlFlow 0 0) 5))) (let ((.cse10 (=> .cse44 .cse9))) (res .cse10 (=>+ 1 .cse10) (let ((.cse22 (- 0 3)) (.cse36 (= 1 1)) (.cse38 (- 0 1))) (let ((.cse37 (= .cse42 .cse38)) (.cse32 (not .cse36)) (.cse20 (= .cse28 .cse22)) (.cse19 (= 2 2))) (let ((.cse17 (=> .cse20 .cse19)) (.cse31 (=> .cse37 .cse32))) (let ((.cse30 (=> .cse43 .cse31)) (.cse16 (=> .cse29 .cse17))) (let ((.cse15 (and .cse30 .cse16))) (let ((.cse11 (=> .cse44 .cse15))) (let ((.cse13 (not .cse11))) (res .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res (= .cse11 .cse10) (res (= .cse15 .cse9) (let ((.cse24 (= 0 0))) (let-proof ((.cse25 (refl 0))) (res (= .cse16 .cse6) (res (= .cse17 .cse7) (let ((.cse18 (= .cse19 true))) (res .cse18 (res true .cse8 (res .cse19 (refl 2) (=+2 .cse18))) (res (= .cse20 .cse21) (res (= .cse22 (- 3)) (let ((.cse23 (* (- 1) 3))) (res (= .cse23 (- 3)) (poly* .cse23 (- 3)) (res .cse24 .cse25 (let ((.cse26 (+ 0 .cse23)) (.cse27 (+ 0 (- 3)))) (res (= .cse26 .cse27) (cong (+ 0 .cse23) (+ 0 (- 3))) (res (= .cse22 .cse26) (-def 0 3) (res (= .cse27 (- 3)) (poly+ .cse27 (- 3)) (trans .cse22 .cse26 .cse27 (- 3))))))))) (res (= .cse28 .cse28) (refl .cse28) (cong (= .cse28 .cse22) (= .cse28 (- 3))))) (cong (=> .cse20 .cse19) (=> .cse21 true))))) (res (= .cse29 .cse29) (refl .cse29) (cong (=> .cse29 .cse17) (=> .cse29 .cse7)))) (res (= .cse30 .cse5) (res (= .cse31 .cse1) (res (= .cse32 false) (let ((.cse34 (not true))) (let ((.cse33 (= .cse34 false))) (res .cse33 (res false (res .cse34 (=+1 .cse33) (res true .cse8 (not- .cse34))) false-) (res (= .cse32 .cse34) (let ((.cse35 (= .cse36 true))) (res .cse35 (res true .cse8 (res .cse36 (refl 1) (=+2 .cse35))) (cong (not .cse36) (not true)))) (trans .cse32 .cse34 false))))) (res (= .cse37 .cse2) (res (= .cse38 (- 1)) (let ((.cse39 (* (- 1) 1))) (res (= .cse39 (- 1)) (poly* .cse39 (- 1)) (res .cse24 .cse25 (let ((.cse40 (+ 0 .cse39)) (.cse41 (+ 0 (- 1)))) (res (= .cse40 .cse41) (cong (+ 0 .cse39) (+ 0 (- 1))) (res (= .cse38 .cse40) (-def 0 1) (res (= .cse41 (- 1)) (poly+ .cse41 (- 1)) (trans .cse38 .cse40 .cse41 (- 1))))))))) (res (= .cse42 .cse42) (refl .cse42) (cong (= .cse42 .cse38) (= .cse42 (- 1))))) (cong (=> .cse37 .cse32) (=> .cse2 false)))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse31) (=> .cse43 .cse1)))) (cong (and .cse30 .cse16) (and .cse5 .cse6)))))) (res (= .cse44 .cse44) (refl .cse44) (cong (=> .cse44 .cse15) (=> .cse44 .cse9)))) (cong (not .cse11) (not .cse10))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13))))))))))))))) :proves (- .cse5 - .cse6) :input))))))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse47 (not .cse2))) (res .cse2 (let ((.cse46 (not .cse0))) (res .cse46 (res .cse47 (not+ .cse47) (let ((.cse48 (= .cse47 .cse46))) (res .cse48 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse48)))) (not- .cse46))) (res .cse47 (assume .cse47) (not- .cse47)))) :proves (- .cse0) :input)))))) :proves () :rup)

