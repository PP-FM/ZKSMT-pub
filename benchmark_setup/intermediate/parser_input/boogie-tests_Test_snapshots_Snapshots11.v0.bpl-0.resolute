unsat
(! (let ((.cse28 (ControlFlow 0 2)) (.cse3 (<= call1formal@r@0 0))) (let ((.cse71 (* (- 1) call1formal@r@0)) (.cse17 (not .cse3)) (.cse45 (= .cse28 (- 1)))) (let ((.cse0 (and .cse17 .cse45)) (.cse5 (<= .cse71 0))) (let ((.cse12 (< 0 .cse71)) (.cse1 (=> .cse0 .cse5))) (let-proof ((.cse13 (total .cse71 0)) (.cse18 (not- .cse17))) (let-proof ((.cse2 (! (let ((.cse67 (<= n 0))) (let ((.cse60 (not .cse67))) (let ((.cse19 (=> .cse60 .cse1))) (res .cse19 (! (=>+ 1 .cse19) :proves (+ .cse19 - .cse1) :input) (! (let ((.cse22 (= .cse28 (- 3)))) (let ((.cse20 (=> .cse22 .cse60))) (res .cse20 (! (let ((.cse21 (= (- 3) .cse28))) (let ((.cse23 (= .cse22 .cse21))) (let-proof ((.cse24 (res .cse21 (res .cse22 (=+1 .cse23) (symm (- 3) .cse28)) (res .cse22 (symm .cse28 (- 3)) (=+2 .cse23))))) (res .cse21 (! (res .cse22 (=>+ 0 .cse20) (res .cse23 .cse24 (=-2 .cse23))) :proves (+ .cse20 + .cse21) :input) (! (let ((.cse26 (not .cse22))) (res .cse22 (let ((.cse25 (not .cse21))) (res .cse25 (res .cse26 (not+ .cse26) (let ((.cse27 (= .cse26 .cse25))) (res .cse27 (res .cse23 .cse24 (cong (not .cse22) (not .cse21))) (=-2 .cse27)))) (not- .cse25))) (res .cse26 (assume .cse26) (not- .cse26)))) :proves (- .cse21) :input))))) :proves (+ .cse20) :rup) (! (let ((.cse29 (and .cse20 .cse19))) (res .cse29 (and+ .cse29) (let ((.cse69 (= (ControlFlow 0 4) 2))) (let ((.cse30 (=> .cse69 .cse29))) (res .cse30 (=>+ 1 .cse30) (let ((.cse70 (= (ControlFlow 0 0) 4))) (let ((.cse31 (=> .cse70 .cse30))) (res .cse31 (=>+ 1 .cse31) (let ((.cse46 (- 0 1))) (let ((.cse55 (< 0 call1formal@r@0)) (.cse44 (= .cse28 .cse46))) (let ((.cse63 (- 0 3)) (.cse43 (and .cse55 .cse44)) (.cse41 (<= 0 call1formal@r@0))) (let ((.cse39 (=> .cse43 .cse41)) (.cse62 (= .cse28 .cse63)) (.cse59 (< 0 n))) (let ((.cse61 (=> .cse62 .cse59)) (.cse38 (=> .cse59 .cse39))) (let ((.cse37 (and .cse61 .cse38))) (let ((.cse36 (=> .cse69 .cse37))) (let ((.cse32 (=> .cse70 .cse36))) (let ((.cse34 (not .cse32))) (res .cse32 (let ((.cse33 (not .cse31))) (res .cse33 (res .cse34 (not+ .cse34) (let ((.cse35 (= .cse34 .cse33))) (res .cse35 (res (= .cse32 .cse31) (res (= .cse36 .cse30) (res (= .cse37 .cse29) (let ((.cse57 (= .cse59 .cse60))) (let ((.cse48 (= 0 0)) (.cse52 (= .cse28 .cse28))) (let-proof ((.cse58 (res .cse60 (res .cse59 (=+1 .cse57) (res .cse67 (not+ .cse60) (farkas 1 .cse59 1 .cse67))) (res .cse59 (let-proof ((.cse68 (total n 0))) (res .cse67 .cse68 (res .cse67 (res .cse59 .cse68 (farkas 1 .cse67 1 .cse59)) (not- .cse60)))) (=+2 .cse57)))) (.cse49 (refl 0)) (.cse53 (refl .cse28))) (res (= .cse38 .cse19) (res (= .cse39 .cse1) (let ((.cse40 (= .cse41 .cse5))) (res .cse40 (res .cse5 (res .cse41 (=+1 .cse40) (res .cse12 .cse13 (farkas 1 .cse41 1 .cse12))) (res .cse41 (let ((.cse42 (< call1formal@r@0 0))) (res .cse42 (total 0 call1formal@r@0) (farkas 1 .cse42 1 .cse5))) (=+2 .cse40))) (res (= .cse43 .cse0) (res (= .cse44 .cse45) (res (= .cse46 (- 1)) (let ((.cse47 (* (- 1) 1))) (res (= .cse47 (- 1)) (poly* .cse47 (- 1)) (res .cse48 .cse49 (let ((.cse50 (+ 0 .cse47)) (.cse51 (+ 0 (- 1)))) (res (= .cse50 .cse51) (cong (+ 0 .cse47) (+ 0 (- 1))) (res (= .cse46 .cse50) (-def 0 1) (res (= .cse51 (- 1)) (poly+ .cse51 (- 1)) (trans .cse46 .cse50 .cse51 (- 1))))))))) (res .cse52 .cse53 (cong (= .cse28 .cse46) (= .cse28 (- 1))))) (let ((.cse54 (= .cse55 .cse17))) (res .cse54 (res .cse17 (res .cse55 (=+1 .cse54) (res .cse3 (not+ .cse17) (farkas 1 .cse55 1 .cse3))) (res .cse55 (let-proof ((.cse56 (total call1formal@r@0 0))) (res .cse3 .cse56 (res .cse3 (res .cse55 .cse56 (farkas 1 .cse3 1 .cse55)) .cse18))) (=+2 .cse54))) (cong (and .cse55 .cse44) (and .cse17 .cse45))))) (cong (=> .cse43 .cse41) (=> .cse0 .cse5))))) (res .cse57 .cse58 (cong (=> .cse59 .cse39) (=> .cse60 .cse1)))) (res (= .cse61 .cse20) (res .cse57 .cse58 (res (= .cse62 .cse22) (res (= .cse63 (- 3)) (let ((.cse64 (* (- 1) 3))) (res (= .cse64 (- 3)) (poly* .cse64 (- 3)) (res .cse48 .cse49 (let ((.cse65 (+ 0 .cse64)) (.cse66 (+ 0 (- 3)))) (res (= .cse65 .cse66) (cong (+ 0 .cse64) (+ 0 (- 3))) (res (= .cse63 .cse65) (-def 0 3) (res (= .cse66 (- 3)) (poly+ .cse66 (- 3)) (trans .cse63 .cse65 .cse66 (- 3))))))))) (res .cse52 .cse53 (cong (= .cse28 .cse63) (= .cse28 (- 3))))) (cong (=> .cse62 .cse59) (=> .cse22 .cse60)))) (cong (and .cse61 .cse38) (and .cse20 .cse19))))))) (res (= .cse69 .cse69) (refl .cse69) (cong (=> .cse69 .cse37) (=> .cse69 .cse29)))) (res (= .cse70 .cse70) (refl .cse70) (cong (=> .cse70 .cse36) (=> .cse70 .cse30)))) (cong (not .cse32) (not .cse31))) (=-2 .cse35)))) (not- .cse33))) (res .cse34 (assume .cse34) (not- .cse34)))))))))))))))))))) :proves (- .cse20 - .cse19) :input)))) :proves (- .cse19) :rup))))) :proves (- .cse1) :rup))) (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (res .cse3 (! (let ((.cse15 (+ call1formal@r@0 1))) (let ((.cse4 (<= .cse15 0))) (res .cse4 (! (res .cse1 (! (res .cse5 (let ((.cse6 (not .cse4))) (let-proof ((.cse7 (not+ .cse6))) (res .cse6 .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (let ((.cse9 (not .cse5))) (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (let ((.cse11 (= .cse5 .cse6))) (res .cse11 (res .cse6 (res .cse5 (=+1 .cse11) (res .cse4 .cse7 (farkas 1 .cse5 1 .cse4))) (res .cse5 (res .cse12 .cse13 (res .cse4 (let ((.cse14 (<= 1 .cse15))) (res .cse14 (total-int .cse15 0) (farkas 1 .cse12 1 .cse14))) (not- .cse6))) (=+2 .cse11))) (cong (not .cse5) (not .cse6)))) (=-2 .cse10))))) (not- .cse8)))))) (=>+ 1 .cse1)) :proves (+ .cse1 + .cse4) :input) .cse2) :proves (+ .cse4) :rup) (! (let ((.cse16 (<= 1 call1formal@r@0))) (res .cse16 (total-int call1formal@r@0 0) (farkas 1 .cse4 1 .cse16))) :proves (- .cse4 + .cse3) :LA (1 (- 1)))))) :proves (+ .cse3) :rup) (! (res .cse17 (and- 0 .cse0) .cse18) :proves (- .cse0 - .cse3) :input))))))))) :proves () :rup)

