unsat
(! (let ((.cse42 (ControlFlow 0 3))) (let ((.cse2 (= .cse42 (- 4))) (.cse0 (= (- 4) .cse42))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 4) .cse42)) (res .cse2 (symm .cse42 (- 4)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse33 (ControlFlow 0 2))) (let ((.cse26 (= .cse33 (- 1)))) (let ((.cse8 (and false .cse26))) (let ((.cse35 (= .cse42 2)) (.cse7 (=> .cse8 false))) (let ((.cse6 (=> .cse35 .cse7))) (let ((.cse5 (=> false .cse6))) (let-proof ((.cse9 false-)) (res .cse5 (! (res .cse6 (! (res .cse7 (! (res .cse8 (! (=>+ 0 .cse7) :proves (+ .cse7 + .cse8) :input) (! (res false (and- 0 .cse8) .cse9) :proves (- .cse8) :input)) :proves (+ .cse7) :rup) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (! (let ((.cse10 (and .cse1 .cse5))) (res .cse10 (and+ .cse10) (let ((.cse43 (= (ControlFlow 0 5) 3))) (let ((.cse11 (=> .cse43 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse44 (= (ControlFlow 0 0) 5))) (let ((.cse12 (=> .cse44 .cse11))) (res .cse12 (=>+ 1 .cse12) (let ((.cse27 (- 0 1))) (let ((.cse34 (not true)) (.cse25 (= .cse33 .cse27))) (let ((.cse24 (and .cse34 .cse25))) (let ((.cse38 (- 0 4)) (.cse21 (=> .cse24 .cse34))) (let ((.cse20 (=> .cse35 .cse21)) (.cse37 (= .cse42 .cse38))) (let ((.cse36 (=> .cse37 .cse34)) (.cse19 (=> .cse34 .cse20))) (let ((.cse18 (and .cse36 .cse19))) (let ((.cse17 (=> .cse43 .cse18))) (let ((.cse13 (=> .cse44 .cse17))) (let ((.cse15 (not .cse13))) (res .cse13 (let ((.cse14 (not .cse12))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res (= .cse13 .cse12) (res (= .cse17 .cse11) (res (= .cse18 .cse10) (let ((.cse22 (= .cse34 false))) (let ((.cse29 (= 0 0))) (let-proof ((.cse23 (res false (res .cse34 (=+1 .cse22) (res true true+ (not- .cse34))) .cse9)) (.cse30 (refl 0))) (res (= .cse19 .cse5) (res (= .cse20 .cse6) (res (= .cse21 .cse7) (res .cse22 .cse23 (res (= .cse24 .cse8) (res (= .cse25 .cse26) (res (= .cse27 (- 1)) (let ((.cse28 (* (- 1) 1))) (res (= .cse28 (- 1)) (poly* .cse28 (- 1)) (res .cse29 .cse30 (let ((.cse31 (+ 0 .cse28)) (.cse32 (+ 0 (- 1)))) (res (= .cse31 .cse32) (cong (+ 0 .cse28) (+ 0 (- 1))) (res (= .cse27 .cse31) (-def 0 1) (res (= .cse32 (- 1)) (poly+ .cse32 (- 1)) (trans .cse27 .cse31 .cse32 (- 1))))))))) (res (= .cse33 .cse33) (refl .cse33) (cong (= .cse33 .cse27) (= .cse33 (- 1))))) (res .cse22 .cse23 (cong (and .cse34 .cse25) (and false .cse26)))) (cong (=> .cse24 .cse34) (=> .cse8 false)))) (res (= .cse35 .cse35) (refl .cse35) (cong (=> .cse35 .cse21) (=> .cse35 .cse7)))) (res .cse22 .cse23 (cong (=> .cse34 .cse20) (=> false .cse6)))) (res (= .cse36 .cse1) (res .cse22 .cse23 (res (= .cse37 .cse2) (res (= .cse38 (- 4)) (let ((.cse39 (* (- 1) 4))) (res (= .cse39 (- 4)) (poly* .cse39 (- 4)) (res .cse29 .cse30 (let ((.cse40 (+ 0 .cse39)) (.cse41 (+ 0 (- 4)))) (res (= .cse40 .cse41) (cong (+ 0 .cse39) (+ 0 (- 4))) (res (= .cse38 .cse40) (-def 0 4) (res (= .cse41 (- 4)) (poly+ .cse41 (- 4)) (trans .cse38 .cse40 .cse41 (- 4))))))))) (res (= .cse42 .cse42) (refl .cse42) (cong (= .cse42 .cse38) (= .cse42 (- 4))))) (cong (=> .cse37 .cse34) (=> .cse2 false)))) (cong (and .cse36 .cse19) (and .cse1 .cse5))))))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse18) (=> .cse43 .cse10)))) (res (= .cse44 .cse44) (refl .cse44) (cong (=> .cse44 .cse17) (=> .cse44 .cse11)))) (cong (not .cse13) (not .cse12))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (assume .cse15) (not- .cse15))))))))))))))))))))) :proves (- .cse1 - .cse5) :input))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse46 (not .cse2))) (res .cse2 (let ((.cse45 (not .cse0))) (res .cse45 (res .cse46 (not+ .cse46) (let ((.cse47 (= .cse46 .cse45))) (res .cse47 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse47)))) (not- .cse45))) (res .cse46 (assume .cse46) (not- .cse46)))) :proves (- .cse0) :input)))))) :proves () :rup)

