unsat
(! (let ((.cse34 (ControlFlow 0 2))) (let ((.cse4 (= call1formal@r@0 0)) (.cse64 (= .cse34 (- 1))) (.cse10 (= call1formal@r@0 903))) (let ((.cse9 (=> .cse64 .cse10)) (.cse77 (= .cse34 (- 3))) (.cse5 (not .cse4))) (let ((.cse3 (=> .cse77 .cse5)) (.cse8 (=> .cse5 .cse9))) (let ((.cse0 (= 903 call1formal@r@0)) (.cse16 (and .cse3 .cse8))) (let ((.cse7 (=> .cse10 .cse16)) (.cse14 (= .cse10 .cse0))) (let-proof ((.cse19 (symm call1formal@r@0 903))) (let-proof ((.cse15 (res .cse0 (res .cse10 (=+1 .cse14) (symm 903 call1formal@r@0)) (res .cse10 .cse19 (=+2 .cse14)))) (.cse17 (! (let ((.cse21 (=> true .cse7))) (res .cse21 (! (=>+ 1 .cse21) :proves (+ .cse21 - .cse7) :input) (! (let ((.cse104 (= .cse34 (- 4)))) (let ((.cse22 (=> .cse104 true))) (let-proof ((.cse23 true+)) (res .cse22 (! (res true .cse23 (=>+ 1 .cse22)) :proves (+ .cse22) :input) (let ((.cse25 (and .cse22 .cse21))) (let ((.cse24 (=> b .cse25))) (res .cse24 (! (res .cse25 (and+ .cse25) (=>+ 1 .cse24)) :proves (+ .cse24 - .cse21 - .cse22) :input) (! (let ((.cse28 (= .cse34 (- 5)))) (let ((.cse26 (=> .cse28 b))) (res .cse26 (! (let ((.cse27 (= (- 5) .cse34))) (let ((.cse29 (= .cse28 .cse27))) (let-proof ((.cse30 (res .cse27 (res .cse28 (=+1 .cse29) (symm (- 5) .cse34)) (res .cse28 (symm .cse34 (- 5)) (=+2 .cse29))))) (res .cse27 (! (res .cse28 (=>+ 0 .cse26) (res .cse29 .cse30 (=-2 .cse29))) :proves (+ .cse26 + .cse27) :input) (! (let ((.cse32 (not .cse28))) (res .cse28 (let ((.cse31 (not .cse27))) (res .cse31 (res .cse32 (not+ .cse32) (let ((.cse33 (= .cse32 .cse31))) (res .cse33 (res .cse29 .cse30 (cong (not .cse28) (not .cse27))) (=-2 .cse33)))) (not- .cse31))) (res .cse32 (assume .cse32) (not- .cse32)))) :proves (- .cse27) :input))))) :proves (+ .cse26) :rup) (! (let ((.cse35 (and .cse26 .cse24))) (res .cse35 (and+ .cse35) (let ((.cse123 (= (ControlFlow 0 6) 2))) (let ((.cse36 (=> .cse123 .cse35))) (res .cse36 (=>+ 1 .cse36) (let ((.cse124 (= (ControlFlow 0 0) 6))) (let ((.cse37 (=> .cse124 .cse36))) (res .cse37 (=>+ 1 .cse37) (let ((.cse60 (* 42 43))) (let ((.cse52 (div .cse60 2)) (.cse65 (- 0 1))) (let ((.cse78 (- 0 3)) (.cse63 (= .cse34 .cse65)) (.cse51 (= call1formal@r@0 .cse52)) (.cse85 (+ 42 1))) (let ((.cse84 (* 42 .cse85)) (.cse50 (=> .cse63 .cse51)) (.cse76 (= .cse34 .cse78))) (let ((.cse75 (=> .cse76 .cse5)) (.cse49 (=> .cse5 .cse50)) (.cse83 (div .cse84 2))) (let ((.cse105 (- 0 4)) (.cse82 (= call1formal@r@0 .cse83)) (.cse48 (and .cse75 .cse49))) (let ((.cse47 (=> .cse82 .cse48)) (.cse103 (= .cse34 .cse105)) (.cse101 (<= 0 42))) (let ((.cse119 (- 0 5)) (.cse102 (=> .cse103 .cse101)) (.cse46 (=> .cse101 .cse47))) (let ((.cse45 (and .cse102 .cse46)) (.cse118 (= .cse34 .cse119))) (let ((.cse117 (=> .cse118 b)) (.cse44 (=> b .cse45))) (let ((.cse43 (and .cse117 .cse44))) (let ((.cse42 (=> .cse123 .cse43))) (let ((.cse38 (=> .cse124 .cse42))) (let ((.cse40 (not .cse38))) (res .cse38 (let ((.cse39 (not .cse37))) (res .cse39 (res .cse40 (not+ .cse40) (let ((.cse41 (= .cse40 .cse39))) (res .cse41 (res (= .cse38 .cse37) (res (= .cse42 .cse36) (res (= .cse43 .cse35) (let ((.cse115 (= b b)) (.cse67 (= 0 0)) (.cse71 (= .cse34 .cse34))) (let-proof ((.cse116 (refl b)) (.cse68 (refl 0)) (.cse72 (refl .cse34))) (res (= .cse44 .cse24) (res (= .cse45 .cse25) (let ((.cse99 (= .cse101 true))) (let-proof ((.cse100 (let ((.cse110 (<= (- 42) 0))) (let ((.cse109 (= .cse110 true)) (.cse111 (< 0 (- 42)))) (let-proof ((.cse112 (total (- 42) 0))) (res .cse109 (res true .cse23 (res .cse110 (res .cse111 .cse112 (farkas 1 .cse111)) (=+2 .cse109))) (let ((.cse113 (= .cse101 .cse110))) (res .cse113 (res .cse110 (res .cse101 (=+1 .cse113) (res .cse111 .cse112 (farkas 1 .cse101 1 .cse111))) (res .cse101 (let ((.cse114 (< 42 0))) (res .cse114 (total 0 42) (farkas 1 .cse114 1 .cse110))) (=+2 .cse113))) (trans .cse101 .cse110 true))))))))) (res (= .cse46 .cse21) (res (= .cse47 .cse7) (let ((.cse55 (div 1806 2))) (let ((.cse53 (= .cse55 903)) (.cse56 (= 2 2)) (.cse58 (= .cse60 1806)) (.cse61 (= call1formal@r@0 call1formal@r@0))) (let-proof ((.cse54 (let ((.cse86 (= 2 0))) (res .cse86 (let ((.cse98 (* 2 .cse55))) (let ((.cse87 (<= .cse98 1806))) (res .cse87 (div-low 1806 2) (let ((.cse90 (abs 2))) (let ((.cse88 (< 1806 (+ .cse98 .cse90)))) (res .cse88 (div-high 1806 2) (let ((.cse89 (= .cse90 2))) (res .cse89 (let ((.cse92 (< 2 0))) (let ((.cse91 (ite .cse92 (- 2) 2))) (res (= .cse90 .cse91) (expand (abs 2)) (res .cse92 (res (= .cse91 2) (ite2 .cse91) (trans .cse90 .cse91 2)) (farkas 1 .cse92))))) (let ((.cse96 (+ .cse55 (- 903)))) (let ((.cse93 (<= .cse96 (- 1)))) (res .cse93 (let ((.cse94 (< 903 .cse55))) (res .cse94 (let ((.cse95 (<= 0 .cse96))) (res .cse95 (total-int .cse96 (- 1)) (let ((.cse97 (< .cse55 903))) (res .cse97 (trichotomy .cse55 903) (farkas 1 .cse97 1 .cse95))))) (farkas 1 .cse87 2 .cse94))) (farkas 1 .cse88 2 .cse93 1 .cse89)))))))))))) (farkas 1 .cse86)))) (.cse57 (refl 2)) (.cse59 (poly* .cse60 1806)) (.cse62 (refl call1formal@r@0))) (res (= .cse48 .cse16) (let ((.cse73 (= .cse5 .cse5))) (let-proof ((.cse74 (refl .cse5))) (res (= .cse49 .cse8) (res (= .cse50 .cse9) (res (= .cse51 .cse10) (res (= .cse52 903) (res .cse53 .cse54 (res (= .cse52 .cse55) (res .cse56 .cse57 (res .cse58 .cse59 (cong (div .cse60 2) (div 1806 2)))) (trans .cse52 .cse55 903))) (res .cse61 .cse62 (cong (= call1formal@r@0 .cse52) (= call1formal@r@0 903)))) (res (= .cse63 .cse64) (res (= .cse65 (- 1)) (let ((.cse66 (* (- 1) 1))) (res (= .cse66 (- 1)) (poly* .cse66 (- 1)) (res .cse67 .cse68 (let ((.cse69 (+ 0 .cse66)) (.cse70 (+ 0 (- 1)))) (res (= .cse69 .cse70) (cong (+ 0 .cse66) (+ 0 (- 1))) (res (= .cse65 .cse69) (-def 0 1) (res (= .cse70 (- 1)) (poly+ .cse70 (- 1)) (trans .cse65 .cse69 .cse70 (- 1))))))))) (res .cse71 .cse72 (cong (= .cse34 .cse65) (= .cse34 (- 1))))) (cong (=> .cse63 .cse51) (=> .cse64 .cse10)))) (res .cse73 .cse74 (cong (=> .cse5 .cse50) (=> .cse5 .cse9)))) (res (= .cse75 .cse3) (res .cse73 .cse74 (res (= .cse76 .cse77) (res (= .cse78 (- 3)) (let ((.cse79 (* (- 1) 3))) (res (= .cse79 (- 3)) (poly* .cse79 (- 3)) (res .cse67 .cse68 (let ((.cse80 (+ 0 .cse79)) (.cse81 (+ 0 (- 3)))) (res (= .cse80 .cse81) (cong (+ 0 .cse79) (+ 0 (- 3))) (res (= .cse78 .cse80) (-def 0 3) (res (= .cse81 (- 3)) (poly+ .cse81 (- 3)) (trans .cse78 .cse80 .cse81 (- 3))))))))) (res .cse71 .cse72 (cong (= .cse34 .cse78) (= .cse34 (- 3))))) (cong (=> .cse76 .cse5) (=> .cse77 .cse5)))) (cong (and .cse75 .cse49) (and .cse3 .cse8)))))) (res (= .cse82 .cse10) (res (= .cse83 903) (res .cse53 .cse54 (res (= .cse83 .cse55) (res .cse56 .cse57 (res (= .cse84 1806) (res .cse58 .cse59 (res (= .cse84 .cse60) (res (= .cse85 43) (poly+ .cse85 43) (res (= 42 42) (refl 42) (cong (* 42 .cse85) (* 42 43)))) (trans .cse84 .cse60 1806))) (cong (div .cse84 2) (div 1806 2)))) (trans .cse83 .cse55 903))) (res .cse61 .cse62 (cong (= call1formal@r@0 .cse83) (= call1formal@r@0 903)))) (cong (=> .cse82 .cse48) (=> .cse10 .cse16))))))) (res .cse99 .cse100 (cong (=> .cse101 .cse47) (=> true .cse7)))) (res (= .cse102 .cse22) (res .cse99 .cse100 (res (= .cse103 .cse104) (res (= .cse105 (- 4)) (let ((.cse106 (* (- 1) 4))) (res (= .cse106 (- 4)) (poly* .cse106 (- 4)) (res .cse67 .cse68 (let ((.cse107 (+ 0 .cse106)) (.cse108 (+ 0 (- 4)))) (res (= .cse107 .cse108) (cong (+ 0 .cse106) (+ 0 (- 4))) (res (= .cse105 .cse107) (-def 0 4) (res (= .cse108 (- 4)) (poly+ .cse108 (- 4)) (trans .cse105 .cse107 .cse108 (- 4))))))))) (res .cse71 .cse72 (cong (= .cse34 .cse105) (= .cse34 (- 4))))) (cong (=> .cse103 .cse101) (=> .cse104 true)))) (cong (and .cse102 .cse46) (and .cse22 .cse21)))))) (res .cse115 .cse116 (cong (=> b .cse45) (=> b .cse25)))) (res (= .cse117 .cse26) (res .cse115 .cse116 (res (= .cse118 .cse28) (res (= .cse119 (- 5)) (let ((.cse120 (* (- 1) 5))) (res (= .cse120 (- 5)) (poly* .cse120 (- 5)) (res .cse67 .cse68 (let ((.cse121 (+ 0 .cse120)) (.cse122 (+ 0 (- 5)))) (res (= .cse121 .cse122) (cong (+ 0 .cse120) (+ 0 (- 5))) (res (= .cse119 .cse121) (-def 0 5) (res (= .cse122 (- 5)) (poly+ .cse122 (- 5)) (trans .cse119 .cse121 .cse122 (- 5))))))))) (res .cse71 .cse72 (cong (= .cse34 .cse119) (= .cse34 (- 5))))) (cong (=> .cse118 b) (=> .cse28 b)))) (cong (and .cse117 .cse44) (and .cse26 .cse24)))))) (res (= .cse123 .cse123) (refl .cse123) (cong (=> .cse123 .cse43) (=> .cse123 .cse35)))) (res (= .cse124 .cse124) (refl .cse124) (cong (=> .cse124 .cse42) (=> .cse124 .cse36)))) (cong (not .cse38) (not .cse37))) (=-2 .cse41)))) (not- .cse39))) (res .cse40 (assume .cse40) (not- .cse40))))))))))))))))))))))))) :proves (- .cse26 - .cse24) :input)))) :proves (- .cse24) :rup)))))))) :proves (- .cse21) :rup))) :proves (- .cse7) :rup))) (let-proof ((.cse1 (! (res .cse7 (! (res .cse10 (=>+ 0 .cse7) (res .cse14 .cse15 (=-2 .cse14))) :proves (+ .cse7 + .cse0) :input) .cse17) :proves (+ .cse0) :rup))) (res .cse0 .cse1 (let ((.cse2 (= 0 call1formal@r@0))) (res .cse2 (! (res .cse3 (! (res .cse4 (res .cse5 (not+ .cse5) (=>+ 1 .cse3)) (let ((.cse6 (= .cse4 .cse2))) (res .cse6 (res .cse2 (res .cse4 (=+1 .cse6) (symm 0 call1formal@r@0)) (res .cse4 (symm call1formal@r@0 0) (=+2 .cse6))) (=-2 .cse6)))) :proves (+ .cse3 + .cse2) :input) (! (res .cse7 (res .cse8 (! (res .cse9 (! (res .cse0 .cse1 (! (res .cse10 (let ((.cse11 (not .cse0))) (res .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res .cse14 .cse15 (cong (not .cse10) (not .cse0))) (=-2 .cse13))))) (not- .cse11))) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse0) :input)) :proves (+ .cse9) :rup) (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse9) :input)) :proves (+ .cse8) :rup) (! (res .cse16 (and+ .cse16) (=>+ 1 .cse7)) :proves (- .cse3 - .cse8 + .cse7) :input)) .cse17) :proves (- .cse3) :rup)) :proves (+ .cse2) :rup) (let ((.cse18 (= 0 903))) (res .cse18 (! (res .cse10 .cse19 (trans 0 call1formal@r@0 903)) :proves (+ .cse18 - .cse2 - .cse0) :trans (0 call1formal@r@0 903)) (! (let ((.cse20 (= 903 0))) (res .cse20 (symm 903 0) (farkas 1 .cse20))) :proves (- .cse18) :EQ))))))))))))))) :proves () :rup)

