unsat
(! (let-proof ((.cse0 true+)) (res true .cse0 (let ((.cse23 (ControlFlow 0 2))) (let ((.cse18 (= .cse23 (- 1)))) (let ((.cse16 (and true .cse18))) (let ((.cse1 (=> .cse16 true))) (res .cse1 (=>+ 1 .cse1) (let ((.cse29 (= (ControlFlow 0 3) 2))) (let ((.cse2 (=> .cse29 .cse1))) (res .cse2 (=>+ 1 .cse2) (let ((.cse30 (= (ControlFlow 0 0) 3))) (let ((.cse3 (=> .cse30 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse19 (- 0 1)) (.cse28 (+ 1 1))) (let ((.cse14 (+ 2 2)) (.cse24 (= .cse28 2)) (.cse17 (= .cse23 .cse19))) (let ((.cse15 (and .cse24 .cse17)) (.cse10 (= .cse14 4))) (let ((.cse9 (=> .cse15 .cse10))) (let ((.cse8 (=> .cse29 .cse9))) (let ((.cse4 (=> .cse30 .cse8))) (let ((.cse6 (not .cse4))) (res .cse4 (let ((.cse5 (not .cse3))) (res .cse5 (res .cse6 (not+ .cse6) (let ((.cse7 (= .cse6 .cse5))) (res .cse7 (res (= .cse4 .cse3) (res (= .cse8 .cse2) (res (= .cse9 .cse1) (res (= .cse10 true) (let ((.cse12 (= 4 4))) (let ((.cse11 (= .cse12 true))) (let-proof ((.cse13 (refl 4))) (res .cse11 (res true .cse0 (res .cse12 .cse13 (=+2 .cse11))) (res (= .cse10 .cse12) (res .cse12 .cse13 (res .cse10 (poly+ .cse14 4) (cong (= .cse14 4) (= 4 4)))) (trans .cse10 .cse12 true)))))) (res (= .cse15 .cse16) (res (= .cse17 .cse18) (res (= .cse19 (- 1)) (let ((.cse20 (* (- 1) 1))) (res (= .cse20 (- 1)) (poly* .cse20 (- 1)) (res (= 0 0) (refl 0) (let ((.cse21 (+ 0 .cse20)) (.cse22 (+ 0 (- 1)))) (res (= .cse21 .cse22) (cong (+ 0 .cse20) (+ 0 (- 1))) (res (= .cse19 .cse21) (-def 0 1) (res (= .cse22 (- 1)) (poly+ .cse22 (- 1)) (trans .cse19 .cse21 .cse22 (- 1))))))))) (res (= .cse23 .cse23) (refl .cse23) (cong (= .cse23 .cse19) (= .cse23 (- 1))))) (res (= .cse24 true) (let ((.cse26 (= 2 2))) (let ((.cse25 (= .cse26 true))) (let-proof ((.cse27 (refl 2))) (res .cse25 (res true .cse0 (res .cse26 .cse27 (=+2 .cse25))) (res (= .cse24 .cse26) (res .cse26 .cse27 (res .cse24 (poly+ .cse28 2) (cong (= .cse28 2) (= 2 2)))) (trans .cse24 .cse26 true)))))) (cong (and .cse24 .cse17) (and true .cse18)))) (cong (=> .cse15 .cse10) (=> .cse16 true)))) (res (= .cse29 .cse29) (refl .cse29) (cong (=> .cse29 .cse9) (=> .cse29 .cse1)))) (res (= .cse30 .cse30) (refl .cse30) (cong (=> .cse30 .cse8) (=> .cse30 .cse2)))) (cong (not .cse4) (not .cse3))) (=-2 .cse7)))) (not- .cse5))) (res .cse6 (assume .cse6) (not- .cse6))))))))))))))))))))))) :proves () :input)

