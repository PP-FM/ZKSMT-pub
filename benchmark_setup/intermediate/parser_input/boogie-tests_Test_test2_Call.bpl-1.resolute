unsat
(! (let ((.cse33 (ControlFlow 0 2)) (.cse48 (+ y (* (- 1) x)))) (let ((.cse0 (<= .cse48 0)) (.cse24 (= .cse33 (- 1)))) (let ((.cse5 (=> .cse24 true)) (.cse39 (= .cse33 (- 3))) (.cse2 (not .cse0))) (let ((.cse1 (=> .cse39 .cse2)) (.cse4 (=> .cse2 .cse5)) (.cse45 (= (ControlFlow 0 4) 2))) (let ((.cse10 (and .cse2 .cse45)) (.cse7 (and .cse1 .cse4))) (let ((.cse8 (=> .cse10 .cse7))) (let-proof ((.cse6 true+) (.cse3 (not+ .cse2)) (.cse11 (not- .cse2))) (let-proof ((.cse9 (let ((.cse49 (= (ControlFlow 0 0) 4))) (let ((.cse12 (=> .cse49 .cse8))) (res .cse12 (=>+ 1 .cse12) (let ((.cse25 (- 0 1))) (let ((.cse40 (- 0 3)) (.cse23 (= .cse33 .cse25)) (.cse22 (= x x))) (let ((.cse20 (=> .cse23 .cse22)) (.cse38 (= .cse33 .cse40)) (.cse36 (< x y))) (let ((.cse37 (=> .cse38 .cse36)) (.cse19 (=> .cse36 .cse20))) (let ((.cse44 (and .cse36 .cse45)) (.cse18 (and .cse37 .cse19))) (let ((.cse17 (=> .cse44 .cse18))) (let ((.cse13 (=> .cse49 .cse17))) (let ((.cse15 (not .cse13))) (res .cse13 (let ((.cse14 (not .cse12))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res (= .cse13 .cse12) (res (= .cse17 .cse8) (let ((.cse34 (= .cse36 .cse2))) (let-proof ((.cse35 (res .cse2 (res .cse36 (=+1 .cse34) (res .cse0 .cse3 (farkas 1 .cse36 1 .cse0))) (res .cse36 (let ((.cse46 (<= y x))) (res .cse46 (total y x) (res .cse0 (let ((.cse47 (< 0 .cse48))) (res .cse47 (total .cse48 0) (farkas 1 .cse46 1 .cse47))) .cse11))) (=+2 .cse34))))) (res (= .cse18 .cse7) (let ((.cse27 (= 0 0)) (.cse31 (= .cse33 .cse33))) (let-proof ((.cse28 (refl 0)) (.cse32 (refl .cse33))) (res (= .cse19 .cse4) (res (= .cse20 .cse5) (let ((.cse21 (= .cse22 true))) (res .cse21 (res true .cse6 (res .cse22 (refl x) (=+2 .cse21))) (res (= .cse23 .cse24) (res (= .cse25 (- 1)) (let ((.cse26 (* (- 1) 1))) (res (= .cse26 (- 1)) (poly* .cse26 (- 1)) (res .cse27 .cse28 (let ((.cse29 (+ 0 .cse26)) (.cse30 (+ 0 (- 1)))) (res (= .cse29 .cse30) (cong (+ 0 .cse26) (+ 0 (- 1))) (res (= .cse25 .cse29) (-def 0 1) (res (= .cse30 (- 1)) (poly+ .cse30 (- 1)) (trans .cse25 .cse29 .cse30 (- 1))))))))) (res .cse31 .cse32 (cong (= .cse33 .cse25) (= .cse33 (- 1))))) (cong (=> .cse23 .cse22) (=> .cse24 true))))) (res .cse34 .cse35 (cong (=> .cse36 .cse20) (=> .cse2 .cse5)))) (res (= .cse37 .cse1) (res .cse34 .cse35 (res (= .cse38 .cse39) (res (= .cse40 (- 3)) (let ((.cse41 (* (- 1) 3))) (res (= .cse41 (- 3)) (poly* .cse41 (- 3)) (res .cse27 .cse28 (let ((.cse42 (+ 0 .cse41)) (.cse43 (+ 0 (- 3)))) (res (= .cse42 .cse43) (cong (+ 0 .cse41) (+ 0 (- 3))) (res (= .cse40 .cse42) (-def 0 3) (res (= .cse43 (- 3)) (poly+ .cse43 (- 3)) (trans .cse40 .cse42 .cse43 (- 3))))))))) (res .cse31 .cse32 (cong (= .cse33 .cse40) (= .cse33 (- 3))))) (cong (=> .cse38 .cse36) (=> .cse39 .cse2)))) (cong (and .cse37 .cse19) (and .cse1 .cse4)))))) (res (= .cse44 .cse10) (res (= .cse45 .cse45) (refl .cse45) (res .cse34 .cse35 (cong (and .cse36 .cse45) (and .cse2 .cse45)))) (cong (=> .cse44 .cse18) (=> .cse10 .cse7)))))) (res (= .cse49 .cse49) (refl .cse49) (cong (=> .cse49 .cse17) (=> .cse49 .cse8)))) (cong (not .cse13) (not .cse12))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (assume .cse15) (not- .cse15)))))))))))))))) (res .cse0 (res .cse1 (! (res .cse2 .cse3 (=>+ 1 .cse1)) :proves (+ .cse1 + .cse0) :input) (! (res .cse4 (! (res .cse5 (! (res true .cse6 (=>+ 1 .cse5)) :proves (+ .cse5) :input) (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse5) :input)) :proves (+ .cse4) :rup) (! (res .cse7 (and+ .cse7) (res .cse8 (=>+ 1 .cse8) .cse9)) :proves (- .cse1 - .cse4) :input)) :proves (- .cse1) :rup)) (! (res .cse10 (res .cse8 (=>+ 0 .cse8) .cse9) (res .cse2 (and- 0 .cse10) .cse11)) :proves (- .cse0) :input)))))))))) :proves () :rup)

