unsat
(! (let ((.cse20 (ControlFlow 0 2))) (let ((.cse1 (= .cse20 (- 1))) (.cse0 (= (- 1) .cse20))) (let ((.cse34 (= .cse1 .cse0))) (let-proof ((.cse35 (res .cse0 (res .cse1 (=+1 .cse34) (symm (- 1) .cse20)) (res .cse1 (symm .cse20 (- 1)) (=+2 .cse34))))) (res .cse0 (! (res .cse1 (let ((.cse30 (* (- 1) n))) (let ((.cse26 (<= .cse30 0))) (let ((.cse25 (xor a0@0 .cse26))) (let ((.cse22 (not .cse25))) (let ((.cse2 (and .cse22 .cse1))) (res .cse2 (let ((.cse3 (=> .cse2 a0@0))) (res .cse3 (=>+ 0 .cse3) (let ((.cse32 (= (ControlFlow 0 3) 2))) (let ((.cse4 (=> .cse32 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse33 (= (ControlFlow 0 0) 3))) (let ((.cse5 (=> .cse33 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse16 (- 0 1)) (.cse28 (<= 0 n))) (let ((.cse21 (= a0@0 .cse28)) (.cse15 (= .cse20 .cse16))) (let ((.cse14 (and .cse21 .cse15))) (let ((.cse11 (=> .cse14 a0@0))) (let ((.cse10 (=> .cse32 .cse11))) (let ((.cse6 (=> .cse33 .cse10))) (let ((.cse8 (not .cse6))) (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res (= .cse6 .cse5) (res (= .cse10 .cse4) (res (= .cse11 .cse3) (let ((.cse12 (= a0@0 a0@0))) (let-proof ((.cse13 (refl a0@0))) (res .cse12 .cse13 (res (= .cse14 .cse2) (res (= .cse15 .cse1) (res (= .cse16 (- 1)) (let ((.cse17 (* (- 1) 1))) (res (= .cse17 (- 1)) (poly* .cse17 (- 1)) (res (= 0 0) (refl 0) (let ((.cse18 (+ 0 .cse17)) (.cse19 (+ 0 (- 1)))) (res (= .cse18 .cse19) (cong (+ 0 .cse17) (+ 0 (- 1))) (res (= .cse16 .cse18) (-def 0 1) (res (= .cse19 (- 1)) (poly+ .cse19 (- 1)) (trans .cse16 .cse18 .cse19 (- 1))))))))) (res (= .cse20 .cse20) (refl .cse20) (cong (= .cse20 .cse16) (= .cse20 (- 1))))) (res (= .cse21 .cse22) (let ((.cse24 (= a0@0 .cse26))) (let ((.cse23 (= .cse24 .cse22))) (res .cse23 (res .cse24 (res .cse25 (res a0@0 (res .cse26 (=+1 .cse24) (xor+ (a0@0 .cse26) (a0@0) (.cse26))) (res .cse26 (xor+ (a0@0 .cse26) (.cse26) (a0@0)) (=+2 .cse24))) (res .cse22 (=+1 .cse23) (not- .cse22))) (res .cse25 (res .cse22 (not+ .cse22) (=+2 .cse23)) (res a0@0 (res .cse26 (xor+ (a0@0) (.cse26) (a0@0 .cse26)) (=-1 .cse24)) (res .cse26 (=-2 .cse24) (xor- (a0@0) (.cse26) (a0@0 .cse26)))))) (res (= .cse21 .cse24) (let ((.cse27 (= .cse28 .cse26))) (res .cse27 (res .cse26 (res .cse28 (=+1 .cse27) (let ((.cse29 (< 0 .cse30))) (res .cse29 (total .cse30 0) (farkas 1 .cse28 1 .cse29)))) (res .cse28 (let ((.cse31 (< n 0))) (res .cse31 (total 0 n) (farkas 1 .cse31 1 .cse26))) (=+2 .cse27))) (res .cse12 .cse13 (cong (= a0@0 .cse28) (= a0@0 .cse26))))) (trans .cse21 .cse24 .cse22))))) (cong (and .cse21 .cse15) (and .cse22 .cse1)))) (cong (=> .cse14 a0@0) (=> .cse2 a0@0)))))) (res (= .cse32 .cse32) (refl .cse32) (cong (=> .cse32 .cse11) (=> .cse32 .cse3)))) (res (= .cse33 .cse33) (refl .cse33) (cong (=> .cse33 .cse10) (=> .cse33 .cse4)))) (cong (not .cse6) (not .cse5))) (=-2 .cse9)))) (not- .cse7))) (res .cse8 (assume .cse8) (not- .cse8)))))))))))))))))) (and- 1 .cse2))))))) (res .cse34 .cse35 (=-2 .cse34))) :proves (+ .cse0) :input) (! (let ((.cse37 (not .cse1))) (res .cse1 (let ((.cse36 (not .cse0))) (res .cse36 (res .cse37 (not+ .cse37) (let ((.cse38 (= .cse37 .cse36))) (res .cse38 (res .cse34 .cse35 (cong (not .cse1) (not .cse0))) (=-2 .cse38)))) (not- .cse36))) (res .cse37 (assume .cse37) (not- .cse37)))) :proves (- .cse0) :input)))))) :proves () :rup)

