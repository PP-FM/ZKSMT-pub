unsat
(! (let-proof ((.cse0 true+)) (res true .cse0 (let ((.cse21 (ControlFlow 0 2))) (let ((.cse16 (= .cse21 (- 1)))) (let ((.cse1 (=> .cse16 true))) (res .cse1 (=>+ 1 .cse1) (let ((.cse22 (= (ControlFlow 0 3) 2))) (let ((.cse2 (=> .cse22 .cse1))) (res .cse2 (=>+ 1 .cse2) (let ((.cse23 (= (ControlFlow 0 0) 3))) (let ((.cse3 (=> .cse23 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse14 (not true)) (.cse17 (- 0 1))) (let ((.cse15 (= .cse21 .cse17)) (.cse10 (= .cse14 false))) (let ((.cse9 (=> .cse15 .cse10))) (let ((.cse8 (=> .cse22 .cse9))) (let ((.cse4 (=> .cse23 .cse8))) (let ((.cse6 (not .cse4))) (res .cse4 (let ((.cse5 (not .cse3))) (res .cse5 (res .cse6 (not+ .cse6) (let ((.cse7 (= .cse6 .cse5))) (res .cse7 (res (= .cse4 .cse3) (res (= .cse8 .cse2) (res (= .cse9 .cse1) (res (= .cse10 true) (let ((.cse12 (= false false))) (let ((.cse11 (= .cse12 true))) (let-proof ((.cse13 (refl false))) (res .cse11 (res true .cse0 (res .cse12 .cse13 (=+2 .cse11))) (res (= .cse10 .cse12) (res .cse12 .cse13 (res .cse10 (res false (res .cse14 (=+1 .cse10) (res true .cse0 (not- .cse14))) false-) (cong (= .cse14 false) (= false false)))) (trans .cse10 .cse12 true)))))) (res (= .cse15 .cse16) (res (= .cse17 (- 1)) (let ((.cse18 (* (- 1) 1))) (res (= .cse18 (- 1)) (poly* .cse18 (- 1)) (res (= 0 0) (refl 0) (let ((.cse19 (+ 0 .cse18)) (.cse20 (+ 0 (- 1)))) (res (= .cse19 .cse20) (cong (+ 0 .cse18) (+ 0 (- 1))) (res (= .cse17 .cse19) (-def 0 1) (res (= .cse20 (- 1)) (poly+ .cse20 (- 1)) (trans .cse17 .cse19 .cse20 (- 1))))))))) (res (= .cse21 .cse21) (refl .cse21) (cong (= .cse21 .cse17) (= .cse21 (- 1))))) (cong (=> .cse15 .cse10) (=> .cse16 true)))) (res (= .cse22 .cse22) (refl .cse22) (cong (=> .cse22 .cse9) (=> .cse22 .cse1)))) (res (= .cse23 .cse23) (refl .cse23) (cong (=> .cse23 .cse8) (=> .cse23 .cse2)))) (cong (not .cse4) (not .cse3))) (=-2 .cse7)))) (not- .cse5))) (res .cse6 (assume .cse6) (not- .cse6))))))))))))))))))))) :proves () :input)

