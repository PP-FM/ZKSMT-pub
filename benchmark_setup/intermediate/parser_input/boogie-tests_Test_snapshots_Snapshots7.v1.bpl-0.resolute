unsat
(! (let ((.cse41 (* (- 1) y))) (let ((.cse36 (ControlFlow 0 2)) (.cse1 (<= .cse41 0)) (.cse18 (+ y 1))) (let ((.cse0 (<= .cse18 0)) (.cse5 (not .cse1)) (.cse31 (= .cse36 (- 1)))) (let ((.cse10 (and .cse5 .cse31)) (.cse2 (not .cse0))) (let ((.cse8 (= .cse1 .cse2)) (.cse15 (< 0 .cse41)) (.cse11 (=> .cse10 .cse5))) (let-proof ((.cse3 (not+ .cse2)) (.cse14 (not- .cse2)) (.cse6 (not+ .cse5)) (.cse16 (total .cse41 0)) (.cse13 (not- .cse5))) (let-proof ((.cse12 (let ((.cse39 (= (ControlFlow 0 3) 2))) (let ((.cse19 (=> .cse39 .cse11))) (res .cse19 (=>+ 1 .cse19) (let ((.cse40 (= (ControlFlow 0 0) 3))) (let ((.cse20 (=> .cse40 .cse19))) (res .cse20 (=>+ 1 .cse20) (let ((.cse32 (- 0 1))) (let ((.cse37 (< y 0)) (.cse30 (= .cse36 .cse32))) (let ((.cse29 (and .cse37 .cse30))) (let ((.cse26 (=> .cse29 .cse37))) (let ((.cse25 (=> .cse39 .cse26))) (let ((.cse21 (=> .cse40 .cse25))) (let ((.cse23 (not .cse21))) (res .cse21 (let ((.cse22 (not .cse20))) (res .cse22 (res .cse23 (not+ .cse23) (let ((.cse24 (= .cse23 .cse22))) (res .cse24 (res (= .cse21 .cse20) (res (= .cse25 .cse19) (res (= .cse26 .cse11) (let ((.cse27 (= .cse37 .cse5))) (let-proof ((.cse28 (res .cse5 (res .cse37 (=+1 .cse27) (res .cse1 .cse6 (farkas 1 .cse37 1 .cse1))) (res .cse37 (let ((.cse38 (<= 0 y))) (res .cse38 (total 0 y) (res .cse1 (res .cse15 .cse16 (farkas 1 .cse38 1 .cse15)) .cse13))) (=+2 .cse27))))) (res .cse27 .cse28 (res (= .cse29 .cse10) (res (= .cse30 .cse31) (res (= .cse32 (- 1)) (let ((.cse33 (* (- 1) 1))) (res (= .cse33 (- 1)) (poly* .cse33 (- 1)) (res (= 0 0) (refl 0) (let ((.cse34 (+ 0 .cse33)) (.cse35 (+ 0 (- 1)))) (res (= .cse34 .cse35) (cong (+ 0 .cse33) (+ 0 (- 1))) (res (= .cse32 .cse34) (-def 0 1) (res (= .cse35 (- 1)) (poly+ .cse35 (- 1)) (trans .cse32 .cse34 .cse35 (- 1))))))))) (res (= .cse36 .cse36) (refl .cse36) (cong (= .cse36 .cse32) (= .cse36 (- 1))))) (res .cse27 .cse28 (cong (and .cse37 .cse30) (and .cse5 .cse31)))) (cong (=> .cse29 .cse37) (=> .cse10 .cse5)))))) (res (= .cse39 .cse39) (refl .cse39) (cong (=> .cse39 .cse26) (=> .cse39 .cse11)))) (res (= .cse40 .cse40) (refl .cse40) (cong (=> .cse40 .cse25) (=> .cse40 .cse19)))) (cong (not .cse21) (not .cse20))) (=-2 .cse24)))) (not- .cse22))) (res .cse23 (assume .cse23) (not- .cse23))))))))))))))))) (.cse9 (res .cse2 (res .cse1 (=+1 .cse8) (res .cse0 .cse3 (farkas 1 .cse1 1 .cse0))) (res .cse1 (res .cse15 .cse16 (res .cse0 (let ((.cse17 (<= 1 .cse18))) (res .cse17 (total-int .cse18 0) (farkas 1 .cse15 1 .cse17))) .cse14)) (=+2 .cse8))))) (res .cse0 (! (res .cse1 (res .cse2 .cse3 (let ((.cse4 (not .cse2))) (res .cse4 (res .cse5 .cse6 (let ((.cse7 (= .cse5 .cse4))) (res .cse7 (res .cse8 .cse9 (cong (not .cse1) (not .cse2))) (=-2 .cse7)))) (not- .cse4)))) (res .cse10 (res .cse11 (=>+ 0 .cse11) .cse12) (res .cse5 (and- 0 .cse10) .cse13))) :proves (+ .cse0) :input) (! (res .cse1 (res .cse11 (res .cse5 .cse6 (=>+ 1 .cse11)) .cse12) (res .cse2 (res .cse8 .cse9 (=-2 .cse8)) .cse14)) :proves (- .cse0) :input))))))))) :proves () :rup)

