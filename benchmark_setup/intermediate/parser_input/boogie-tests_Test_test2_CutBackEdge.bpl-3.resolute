unsat
(! (let ((.cse25 (ControlFlow 0 2))) (let ((.cse18 (= .cse25 (- 1))) (.cse34 (ControlFlow 0 3))) (let ((.cse26 (= .cse34 2)) (.cse1 (=> .cse18 true))) (let ((.cse0 (=> .cse26 .cse1))) (let-proof ((.cse2 true+)) (res .cse0 (! (res .cse1 (! (res true .cse2 (=>+ 1 .cse1)) :proves (+ .cse1) :input) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse29 (= .cse34 (- 4)))) (let ((.cse3 (=> .cse29 true))) (res .cse3 (! (res true .cse2 (=>+ 1 .cse3)) :proves (+ .cse3) :input) (! (let ((.cse4 (and .cse3 .cse0))) (res .cse4 (and+ .cse4) (let ((.cse35 (= (ControlFlow 0 5) 3))) (let ((.cse5 (=> .cse35 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse36 (= (ControlFlow 0 0) 5))) (let ((.cse6 (=> .cse36 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse19 (- 0 1))) (let ((.cse30 (- 0 4)) (.cse17 (= .cse25 .cse19))) (let ((.cse14 (=> .cse17 true)) (.cse28 (= .cse34 .cse30))) (let ((.cse27 (=> .cse28 true)) (.cse13 (=> .cse26 .cse14))) (let ((.cse12 (and .cse27 .cse13))) (let ((.cse11 (=> .cse35 .cse12))) (let ((.cse7 (=> .cse36 .cse11))) (let ((.cse9 (not .cse7))) (res .cse7 (let ((.cse8 (not .cse6))) (res .cse8 (res .cse9 (not+ .cse9) (let ((.cse10 (= .cse9 .cse8))) (res .cse10 (res (= .cse7 .cse6) (res (= .cse11 .cse5) (res (= .cse12 .cse4) (let ((.cse15 (= true true)) (.cse21 (= 0 0))) (let-proof ((.cse16 (refl true)) (.cse22 (refl 0))) (res (= .cse13 .cse0) (res (= .cse14 .cse1) (res .cse15 .cse16 (res (= .cse17 .cse18) (res (= .cse19 (- 1)) (let ((.cse20 (* (- 1) 1))) (res (= .cse20 (- 1)) (poly* .cse20 (- 1)) (res .cse21 .cse22 (let ((.cse23 (+ 0 .cse20)) (.cse24 (+ 0 (- 1)))) (res (= .cse23 .cse24) (cong (+ 0 .cse20) (+ 0 (- 1))) (res (= .cse19 .cse23) (-def 0 1) (res (= .cse24 (- 1)) (poly+ .cse24 (- 1)) (trans .cse19 .cse23 .cse24 (- 1))))))))) (res (= .cse25 .cse25) (refl .cse25) (cong (= .cse25 .cse19) (= .cse25 (- 1))))) (cong (=> .cse17 true) (=> .cse18 true)))) (res (= .cse26 .cse26) (refl .cse26) (cong (=> .cse26 .cse14) (=> .cse26 .cse1)))) (res (= .cse27 .cse3) (res .cse15 .cse16 (res (= .cse28 .cse29) (res (= .cse30 (- 4)) (let ((.cse31 (* (- 1) 4))) (res (= .cse31 (- 4)) (poly* .cse31 (- 4)) (res .cse21 .cse22 (let ((.cse32 (+ 0 .cse31)) (.cse33 (+ 0 (- 4)))) (res (= .cse32 .cse33) (cong (+ 0 .cse31) (+ 0 (- 4))) (res (= .cse30 .cse32) (-def 0 4) (res (= .cse33 (- 4)) (poly+ .cse33 (- 4)) (trans .cse30 .cse32 .cse33 (- 4))))))))) (res (= .cse34 .cse34) (refl .cse34) (cong (= .cse34 .cse30) (= .cse34 (- 4))))) (cong (=> .cse28 true) (=> .cse29 true)))) (cong (and .cse27 .cse13) (and .cse3 .cse0)))))) (res (= .cse35 .cse35) (refl .cse35) (cong (=> .cse35 .cse12) (=> .cse35 .cse4)))) (res (= .cse36 .cse36) (refl .cse36) (cong (=> .cse36 .cse11) (=> .cse36 .cse5)))) (cong (not .cse7) (not .cse6))) (=-2 .cse10)))) (not- .cse8))) (res .cse9 (assume .cse9) (not- .cse9))))))))))))))))))) :proves (- .cse3 - .cse0) :input)))))))))) :proves () :rup)

