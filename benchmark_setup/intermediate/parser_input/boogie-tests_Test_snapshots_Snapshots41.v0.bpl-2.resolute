unsat
(! (let ((.cse38 (+ z (- 20))) (.cse43 (+ (* (- 1) z) 2)) (.cse51 (ControlFlow 0 2))) (let ((.cse46 (= .cse51 (- 1))) (.cse40 (<= .cse43 0)) (.cse21 (<= .cse38 0)) (.cse19 (= (ControlFlow 0 4) 2))) (let ((.cse18 (and .cse21 .cse19)) (.cse2 (=> .cse46 .cse40)) (.cse53 (ControlFlow 0 5))) (let ((.cse28 (= .cse53 4)) (.cse1 (=> .cse18 .cse2))) (let ((.cse0 (=> .cse28 .cse1))) (let-proof ((.cse3 (! (let ((.cse54 (= (- 1) .cse51))) (let ((.cse55 (= .cse46 .cse54))) (let-proof ((.cse56 (res .cse54 (res .cse46 (=+1 .cse55) (symm (- 1) .cse51)) (res .cse46 (symm .cse51 (- 1)) (=+2 .cse55))))) (res .cse54 (! (res .cse46 (=>+ 0 .cse2) (res .cse55 .cse56 (=-2 .cse55))) :proves (+ .cse2 + .cse54) :input) (! (let ((.cse58 (not .cse46))) (res .cse46 (let ((.cse57 (not .cse54))) (res .cse57 (res .cse58 (not+ .cse58) (let ((.cse59 (= .cse58 .cse57))) (res .cse59 (res .cse55 .cse56 (cong (not .cse46) (not .cse54))) (=-2 .cse59)))) (not- .cse57))) (res .cse58 (assume .cse58) (not- .cse58)))) :proves (- .cse54) :input))))) :proves (+ .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 .cse3 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse35 (not .cse21)) (.cse33 (= (ControlFlow 0 3) 2))) (let ((.cse32 (and .cse35 .cse33))) (let ((.cse36 (= .cse53 3)) (.cse5 (=> .cse32 .cse2))) (let ((.cse4 (=> .cse36 .cse5))) (res .cse4 (! (res .cse5 (! (res .cse2 .cse3 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse2) :input)) :proves (+ .cse5) :rup) (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse5) :input)) :proves (+ .cse4) :rup) (! (let ((.cse6 (and .cse4 .cse0))) (res .cse6 (and+ .cse6) (let ((.cse52 (= (ControlFlow 0 0) 5))) (let ((.cse7 (=> .cse52 .cse6))) (res .cse7 (=>+ 1 .cse7) (let ((.cse47 (- 0 1))) (let ((.cse45 (= .cse51 .cse47)) (.cse41 (<= 2 z)) (.cse22 (<= z 20)) (.cse24 (< 20 z))) (let ((.cse31 (and .cse24 .cse33)) (.cse17 (and .cse22 .cse19)) (.cse27 (=> .cse45 .cse41))) (let ((.cse14 (=> .cse17 .cse27)) (.cse30 (=> .cse31 .cse27))) (let ((.cse29 (=> .cse36 .cse30)) (.cse13 (=> .cse28 .cse14))) (let ((.cse12 (and .cse29 .cse13))) (let ((.cse8 (=> .cse52 .cse12))) (let ((.cse10 (not .cse8))) (res .cse8 (let ((.cse9 (not .cse7))) (res .cse9 (res .cse10 (not+ .cse10) (let ((.cse11 (= .cse10 .cse9))) (res .cse11 (res (= .cse8 .cse7) (res (= .cse12 .cse6) (let ((.cse15 (= .cse27 .cse2))) (let-proof ((.cse16 (let ((.cse39 (= .cse41 .cse40))) (res .cse39 (res .cse40 (res .cse41 (=+1 .cse39) (let ((.cse42 (< 0 .cse43))) (res .cse42 (total .cse43 0) (farkas 1 .cse41 1 .cse42)))) (res .cse41 (let ((.cse44 (< z 2))) (res .cse44 (total 2 z) (farkas 1 .cse44 1 .cse40))) (=+2 .cse39))) (res (= .cse45 .cse46) (res (= .cse47 (- 1)) (let ((.cse48 (* (- 1) 1))) (res (= .cse48 (- 1)) (poly* .cse48 (- 1)) (res (= 0 0) (refl 0) (let ((.cse49 (+ 0 .cse48)) (.cse50 (+ 0 (- 1)))) (res (= .cse49 .cse50) (cong (+ 0 .cse48) (+ 0 (- 1))) (res (= .cse47 .cse49) (-def 0 1) (res (= .cse50 (- 1)) (poly+ .cse50 (- 1)) (trans .cse47 .cse49 .cse50 (- 1))))))))) (res (= .cse51 .cse51) (refl .cse51) (cong (= .cse51 .cse47) (= .cse51 (- 1))))) (cong (=> .cse45 .cse41) (=> .cse46 .cse40)))))) (.cse26 (farkas 1 .cse24 1 .cse21)) (.cse25 (total z 20)) (.cse23 (let ((.cse37 (< 0 .cse38))) (res .cse37 (total .cse38 0) (farkas 1 .cse22 1 .cse37))))) (res (= .cse13 .cse0) (res (= .cse14 .cse1) (res .cse15 .cse16 (res (= .cse17 .cse18) (res (= .cse19 .cse19) (refl .cse19) (let ((.cse20 (= .cse22 .cse21))) (res .cse20 (res .cse21 (res .cse22 (=+1 .cse20) .cse23) (res .cse22 (res .cse24 .cse25 .cse26) (=+2 .cse20))) (cong (and .cse22 .cse19) (and .cse21 .cse19))))) (cong (=> .cse17 .cse27) (=> .cse18 .cse2)))) (res (= .cse28 .cse28) (refl .cse28) (cong (=> .cse28 .cse14) (=> .cse28 .cse1)))) (res (= .cse29 .cse4) (res (= .cse30 .cse5) (res .cse15 .cse16 (res (= .cse31 .cse32) (res (= .cse33 .cse33) (refl .cse33) (let ((.cse34 (= .cse24 .cse35))) (res .cse34 (res .cse35 (res .cse24 (=+1 .cse34) (res .cse21 (not+ .cse35) .cse26)) (res .cse24 (res .cse22 .cse25 (res .cse21 .cse23 (not- .cse35))) (=+2 .cse34))) (cong (and .cse24 .cse33) (and .cse35 .cse33))))) (cong (=> .cse31 .cse27) (=> .cse32 .cse2)))) (res (= .cse36 .cse36) (refl .cse36) (cong (=> .cse36 .cse30) (=> .cse36 .cse5)))) (cong (and .cse29 .cse13) (and .cse4 .cse0)))))) (res (= .cse52 .cse52) (refl .cse52) (cong (=> .cse52 .cse12) (=> .cse52 .cse6)))) (cong (not .cse8) (not .cse7))) (=-2 .cse11)))) (not- .cse9))) (res .cse10 (assume .cse10) (not- .cse10)))))))))))))))) :proves (- .cse4 - .cse0) :input))))))))))))) :proves () :rup)

