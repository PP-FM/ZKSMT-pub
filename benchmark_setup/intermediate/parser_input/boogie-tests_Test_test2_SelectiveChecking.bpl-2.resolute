unsat
(! (let ((.cse48 (* (- 1) x))) (let ((.cse31 (+ z .cse48))) (let ((.cse28 (<= .cse31 0)) (.cse38 (ControlFlow 0 2))) (let ((.cse33 (= .cse38 (- 1))) (.cse26 (not .cse28))) (let ((.cse23 (= (ControlFlow 0 3) 2)) (.cse2 (=> .cse33 .cse26)) (.cse49 (ControlFlow 0 4))) (let ((.cse24 (= .cse49 3)) (.cse1 (=> .cse23 .cse2))) (let ((.cse0 (=> .cse24 .cse1))) (let-proof ((.cse3 (! (let ((.cse50 (= (- 1) .cse38))) (let ((.cse51 (= .cse33 .cse50))) (let-proof ((.cse52 (res .cse50 (res .cse33 (=+1 .cse51) (symm (- 1) .cse38)) (res .cse33 (symm .cse38 (- 1)) (=+2 .cse51))))) (res .cse50 (! (res .cse33 (=>+ 0 .cse2) (res .cse51 .cse52 (=-2 .cse51))) :proves (+ .cse2 + .cse50) :input) (! (let ((.cse54 (not .cse33))) (res .cse33 (let ((.cse53 (not .cse50))) (res .cse53 (res .cse54 (not+ .cse54) (let ((.cse55 (= .cse54 .cse53))) (res .cse55 (res .cse51 .cse52 (cong (not .cse33) (not .cse50))) (=-2 .cse55)))) (not- .cse53))) (res .cse54 (assume .cse54) (not- .cse54)))) :proves (- .cse50) :input))))) :proves (+ .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 .cse3 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse19 (= .cse49 2))) (let ((.cse4 (=> .cse19 .cse2))) (res .cse4 (! (res .cse2 .cse3 (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse2) :input)) :proves (+ .cse4) :rup) (! (let ((.cse5 (and .cse0 .cse4))) (res .cse5 (and+ .cse5) (let ((.cse45 (+ y .cse48))) (let ((.cse42 (<= .cse45 0))) (let ((.cse40 (not .cse42))) (let ((.cse6 (=> .cse40 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse46 (= (ControlFlow 0 5) 4))) (let ((.cse7 (=> .cse46 .cse6))) (res .cse7 (=>+ 1 .cse7) (let ((.cse47 (= (ControlFlow 0 0) 5))) (let ((.cse8 (=> .cse47 .cse7))) (res .cse8 (=>+ 1 .cse8) (let ((.cse34 (- 0 1))) (let ((.cse32 (= .cse38 .cse34)) (.cse27 (< x z))) (let ((.cse20 (=> .cse32 .cse27))) (let ((.cse22 (=> .cse23 .cse20))) (let ((.cse21 (=> .cse24 .cse22)) (.cse16 (=> .cse19 .cse20))) (let ((.cse41 (< x y)) (.cse15 (and .cse21 .cse16))) (let ((.cse14 (=> .cse41 .cse15))) (let ((.cse13 (=> .cse46 .cse14))) (let ((.cse9 (=> .cse47 .cse13))) (let ((.cse11 (not .cse9))) (res .cse9 (let ((.cse10 (not .cse8))) (res .cse10 (res .cse11 (not+ .cse11) (let ((.cse12 (= .cse11 .cse10))) (res .cse12 (res (= .cse9 .cse8) (res (= .cse13 .cse7) (res (= .cse14 .cse6) (res (= .cse15 .cse5) (let ((.cse17 (= .cse20 .cse2))) (let-proof ((.cse18 (let ((.cse25 (= .cse27 .cse26))) (res .cse25 (res .cse26 (res .cse27 (=+1 .cse25) (res .cse28 (not+ .cse26) (farkas 1 .cse27 1 .cse28))) (res .cse27 (let ((.cse29 (<= z x))) (res .cse29 (total z x) (res .cse28 (let ((.cse30 (< 0 .cse31))) (res .cse30 (total .cse31 0) (farkas 1 .cse29 1 .cse30))) (not- .cse26)))) (=+2 .cse25))) (res (= .cse32 .cse33) (res (= .cse34 (- 1)) (let ((.cse35 (* (- 1) 1))) (res (= .cse35 (- 1)) (poly* .cse35 (- 1)) (res (= 0 0) (refl 0) (let ((.cse36 (+ 0 .cse35)) (.cse37 (+ 0 (- 1)))) (res (= .cse36 .cse37) (cong (+ 0 .cse35) (+ 0 (- 1))) (res (= .cse34 .cse36) (-def 0 1) (res (= .cse37 (- 1)) (poly+ .cse37 (- 1)) (trans .cse34 .cse36 .cse37 (- 1))))))))) (res (= .cse38 .cse38) (refl .cse38) (cong (= .cse38 .cse34) (= .cse38 (- 1))))) (cong (=> .cse32 .cse27) (=> .cse33 .cse26))))))) (res (= .cse16 .cse4) (res .cse17 .cse18 (res (= .cse19 .cse19) (refl .cse19) (cong (=> .cse19 .cse20) (=> .cse19 .cse2)))) (res (= .cse21 .cse0) (res (= .cse22 .cse1) (res .cse17 .cse18 (res (= .cse23 .cse23) (refl .cse23) (cong (=> .cse23 .cse20) (=> .cse23 .cse2)))) (res (= .cse24 .cse24) (refl .cse24) (cong (=> .cse24 .cse22) (=> .cse24 .cse1)))) (cong (and .cse21 .cse16) (and .cse0 .cse4)))))) (let ((.cse39 (= .cse41 .cse40))) (res .cse39 (res .cse40 (res .cse41 (=+1 .cse39) (res .cse42 (not+ .cse40) (farkas 1 .cse41 1 .cse42))) (res .cse41 (let ((.cse43 (<= y x))) (res .cse43 (total y x) (res .cse42 (let ((.cse44 (< 0 .cse45))) (res .cse44 (total .cse45 0) (farkas 1 .cse43 1 .cse44))) (not- .cse40)))) (=+2 .cse39))) (cong (=> .cse41 .cse15) (=> .cse40 .cse5))))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse14) (=> .cse46 .cse6)))) (res (= .cse47 .cse47) (refl .cse47) (cong (=> .cse47 .cse13) (=> .cse47 .cse7)))) (cong (not .cse9) (not .cse8))) (=-2 .cse12)))) (not- .cse10))) (res .cse11 (assume .cse11) (not- .cse11)))))))))))))))))))))))))) :proves (- .cse0 - .cse4) :input))))))))))))) :proves () :rup)

