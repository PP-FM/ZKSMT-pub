unsat
(! (let ((.cse37 (ControlFlow 0 2))) (let ((.cse2 (= .cse37 (- 1))) (.cse0 (= (- 1) .cse37))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse37)) (res .cse2 (symm .cse37 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse29 (+ (* (- 1) y@1) 10))) (let ((.cse26 (<= .cse29 0))) (let ((.cse24 (not .cse26))) (let ((.cse1 (=> .cse2 .cse24))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse47 (+ (* (- 1) y@0) 10))) (let ((.cse44 (<= .cse47 0))) (let ((.cse42 (not .cse44)) (.cse40 (= (ControlFlow 0 3) 2))) (let ((.cse39 (and .cse42 .cse40))) (let ((.cse5 (=> .cse39 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse59 (ControlFlow 0 4))) (let ((.cse48 (= .cse59 3))) (let ((.cse6 (=> .cse48 .cse5))) (res .cse6 (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse5) :input) (! (let ((.cse7 (=> true .cse6))) (res .cse7 (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse6) :input) (! (let ((.cse54 (= .cse59 (- 5)))) (let ((.cse8 (=> .cse54 true))) (let-proof ((.cse9 true+)) (res .cse8 (! (res true .cse9 (=>+ 1 .cse8)) :proves (+ .cse8) :input) (! (let ((.cse10 (and .cse8 .cse7))) (res .cse10 (and+ .cse10) (let ((.cse69 (= (ControlFlow 0 6) 4))) (let ((.cse11 (=> .cse69 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse70 (= (ControlFlow 0 0) 6))) (let ((.cse12 (=> .cse70 .cse11))) (res .cse12 (=>+ 1 .cse12) (let ((.cse31 (- 0 1))) (let ((.cse30 (= .cse37 .cse31)) (.cse25 (< y@1 10)) (.cse43 (< y@0 10))) (let ((.cse38 (and .cse43 .cse40)) (.cse22 (=> .cse30 .cse25))) (let ((.cse55 (- 0 5)) (.cse21 (=> .cse38 .cse22))) (let ((.cse20 (=> .cse48 .cse21)) (.cse53 (= .cse59 .cse55)) (.cse51 (< 6 10))) (let ((.cse52 (=> .cse53 .cse51)) (.cse19 (=> .cse51 .cse20))) (let ((.cse18 (and .cse52 .cse19))) (let ((.cse17 (=> .cse69 .cse18))) (let ((.cse13 (=> .cse70 .cse17))) (let ((.cse15 (not .cse13))) (res .cse13 (let ((.cse14 (not .cse12))) (res .cse14 (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res (= .cse13 .cse12) (res (= .cse17 .cse11) (res (= .cse18 .cse10) (let ((.cse49 (= .cse51 true)) (.cse33 (= 0 0))) (let-proof ((.cse50 (let ((.cse61 (not false))) (let ((.cse60 (= .cse61 true))) (let-proof ((.cse62 false-)) (res .cse60 (res true .cse9 (res .cse61 (res false (not+ .cse61) .cse62) (=+2 .cse60))) (res (= .cse51 .cse61) (let ((.cse65 (<= 4 0))) (let ((.cse63 (not .cse65))) (res (= .cse63 .cse61) (let ((.cse64 (= .cse65 false))) (res .cse64 (res false (res .cse65 (=+1 .cse64) (farkas 1 .cse65)) .cse62) (cong (not .cse65) (not false)))) (let ((.cse66 (= .cse51 .cse63))) (res .cse66 (res .cse63 (res .cse51 (=+1 .cse66) (res .cse65 (not+ .cse63) (farkas 1 .cse51 1 .cse65))) (res .cse51 (let ((.cse67 (<= 10 6))) (res .cse67 (total 10 6) (res .cse65 (let ((.cse68 (< 0 4))) (res .cse68 (total 4 0) (farkas 1 .cse67 1 .cse68))) (not- .cse63)))) (=+2 .cse66))) (trans .cse51 .cse63 .cse61)))))) (trans .cse51 .cse61 true))))))) (.cse34 (refl 0))) (res (= .cse19 .cse7) (res (= .cse20 .cse6) (res (= .cse21 .cse5) (res (= .cse22 .cse1) (let ((.cse23 (= .cse25 .cse24))) (res .cse23 (res .cse24 (res .cse25 (=+1 .cse23) (res .cse26 (not+ .cse24) (farkas 1 .cse25 1 .cse26))) (res .cse25 (let ((.cse27 (<= 10 y@1))) (res .cse27 (total 10 y@1) (res .cse26 (let ((.cse28 (< 0 .cse29))) (res .cse28 (total .cse29 0) (farkas 1 .cse27 1 .cse28))) (not- .cse24)))) (=+2 .cse23))) (res (= .cse30 .cse2) (res (= .cse31 (- 1)) (let ((.cse32 (* (- 1) 1))) (res (= .cse32 (- 1)) (poly* .cse32 (- 1)) (res .cse33 .cse34 (let ((.cse35 (+ 0 .cse32)) (.cse36 (+ 0 (- 1)))) (res (= .cse35 .cse36) (cong (+ 0 .cse32) (+ 0 (- 1))) (res (= .cse31 .cse35) (-def 0 1) (res (= .cse36 (- 1)) (poly+ .cse36 (- 1)) (trans .cse31 .cse35 .cse36 (- 1))))))))) (res (= .cse37 .cse37) (refl .cse37) (cong (= .cse37 .cse31) (= .cse37 (- 1))))) (cong (=> .cse30 .cse25) (=> .cse2 .cse24))))) (res (= .cse38 .cse39) (res (= .cse40 .cse40) (refl .cse40) (let ((.cse41 (= .cse43 .cse42))) (res .cse41 (res .cse42 (res .cse43 (=+1 .cse41) (res .cse44 (not+ .cse42) (farkas 1 .cse43 1 .cse44))) (res .cse43 (let ((.cse45 (<= 10 y@0))) (res .cse45 (total 10 y@0) (res .cse44 (let ((.cse46 (< 0 .cse47))) (res .cse46 (total .cse47 0) (farkas 1 .cse45 1 .cse46))) (not- .cse42)))) (=+2 .cse41))) (cong (and .cse43 .cse40) (and .cse42 .cse40))))) (cong (=> .cse38 .cse22) (=> .cse39 .cse1)))) (res (= .cse48 .cse48) (refl .cse48) (cong (=> .cse48 .cse21) (=> .cse48 .cse5)))) (res .cse49 .cse50 (cong (=> .cse51 .cse20) (=> true .cse6)))) (res (= .cse52 .cse8) (res .cse49 .cse50 (res (= .cse53 .cse54) (res (= .cse55 (- 5)) (let ((.cse56 (* (- 1) 5))) (res (= .cse56 (- 5)) (poly* .cse56 (- 5)) (res .cse33 .cse34 (let ((.cse57 (+ 0 .cse56)) (.cse58 (+ 0 (- 5)))) (res (= .cse57 .cse58) (cong (+ 0 .cse56) (+ 0 (- 5))) (res (= .cse55 .cse57) (-def 0 5) (res (= .cse58 (- 5)) (poly+ .cse58 (- 5)) (trans .cse55 .cse57 .cse58 (- 5))))))))) (res (= .cse59 .cse59) (refl .cse59) (cong (= .cse59 .cse55) (= .cse59 (- 5))))) (cong (=> .cse53 .cse51) (=> .cse54 true)))) (cong (and .cse52 .cse19) (and .cse8 .cse7)))))) (res (= .cse69 .cse69) (refl .cse69) (cong (=> .cse69 .cse18) (=> .cse69 .cse10)))) (res (= .cse70 .cse70) (refl .cse70) (cong (=> .cse70 .cse17) (=> .cse70 .cse11)))) (cong (not .cse13) (not .cse12))) (=-2 .cse16)))) (not- .cse14))) (res .cse15 (assume .cse15) (not- .cse15))))))))))))))))))))) :proves (- .cse8 - .cse7) :input))))) :proves (- .cse7) :rup))) :proves (- .cse6) :rup))))) :proves (- .cse5) :rup))))))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse72 (not .cse2))) (res .cse2 (let ((.cse71 (not .cse0))) (res .cse71 (res .cse72 (not+ .cse72) (let ((.cse73 (= .cse72 .cse71))) (res .cse73 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse73)))) (not- .cse71))) (res .cse72 (assume .cse72) (not- .cse72)))) :proves (- .cse0) :input)))))) :proves () :rup)

