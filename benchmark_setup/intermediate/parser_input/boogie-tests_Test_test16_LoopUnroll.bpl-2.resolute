unsat
(! (let ((.cse36 (ControlFlow 0 3))) (let ((.cse2 (= .cse36 (- 5))) (.cse0 (= (- 5) .cse36))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 5) .cse36)) (res .cse2 (symm .cse36 (- 5)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse92 (* (- 1) i@0))) (let ((.cse84 (<= .cse92 0))) (let ((.cse1 (=> .cse2 .cse84))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse105 (|Select__T@[Int]MyValue_| a i@0))) (let ((.cse70 (= v@1 .cse105)) (.cse30 (= .cse36 (- 2))) (.cse104 (+ N .cse92))) (let ((.cse9 (<= .cse104 0)) (.cse28 (and .cse70 .cse30)) (.cse59 (not (= .cse105 SpecialValue)))) (let ((.cse27 (=> .cse28 .cse59)) (.cse76 (= .cse36 (- 4))) (.cse13 (not .cse9))) (let ((.cse7 (=> .cse76 .cse13)) (.cse26 (=> .cse13 .cse27))) (let ((.cse37 (and .cse7 .cse26))) (let ((.cse6 (=> .cse84 .cse37))) (let ((.cse38 (and .cse1 .cse6))) (let ((.cse21 (< 0 .cse104)) (.cse25 (* (- 1) N)) (.cse5 (=> .cse13 .cse38))) (let-proof ((.cse14 (not+ .cse13)) (.cse22 (total .cse104 0)) (.cse18 (not- .cse13))) (let-proof ((.cse19 (! (let ((.cse103 (ControlFlow 0 6))) (let ((.cse95 (= .cse103 3))) (let ((.cse39 (=> .cse95 .cse5))) (res .cse39 (! (=>+ 1 .cse39) :proves (+ .cse39 - .cse5) :input) (! (let ((.cse40 (=> (= .cse103 1) true))) (res .cse40 (! (res true true+ (=>+ 1 .cse40)) :proves (+ .cse40) :input) (! (let ((.cse41 (and .cse40 .cse39))) (res .cse41 (and+ .cse41) (let ((.cse96 (and (not (= (|Select__T@[Int]MyValue_| a 0) SpecialValue)) (not (= (|Select__T@[Int]MyValue_| a 1) SpecialValue))))) (let ((.cse42 (=> .cse96 .cse41))) (res .cse42 (=>+ 1 .cse42) (let ((.cse98 (<= .cse25 0))) (let ((.cse43 (=> .cse98 .cse42))) (res .cse43 (=>+ 1 .cse43) (let ((.cse102 (= (ControlFlow 0 0) 6))) (let ((.cse44 (=> .cse102 .cse43))) (res .cse44 (=>+ 1 .cse44) (let ((.cse62 (- 0 2))) (let ((.cse61 (= .cse36 .cse62))) (let ((.cse77 (- 0 4)) (.cse60 (and .cse70 .cse61))) (let ((.cse58 (=> .cse60 .cse59)) (.cse75 (= .cse36 .cse77)) (.cse73 (< i@0 N))) (let ((.cse87 (- 0 5)) (.cse74 (=> .cse75 .cse73)) (.cse57 (=> .cse73 .cse58))) (let ((.cse56 (and .cse74 .cse57)) (.cse86 (= .cse36 .cse87)) (.cse83 (<= 0 i@0))) (let ((.cse85 (=> .cse86 .cse83)) (.cse55 (=> .cse83 .cse56))) (let ((.cse54 (and .cse85 .cse55))) (let ((.cse53 (=> .cse73 .cse54))) (let ((.cse52 (=> .cse95 .cse53))) (let ((.cse51 (and .cse40 .cse52))) (let ((.cse99 (<= 0 N)) (.cse50 (=> .cse96 .cse51))) (let ((.cse49 (=> .cse99 .cse50))) (let ((.cse45 (=> .cse102 .cse49))) (let ((.cse47 (not .cse45))) (res .cse45 (let ((.cse46 (not .cse44))) (res .cse46 (res .cse47 (not+ .cse47) (let ((.cse48 (= .cse47 .cse46))) (res .cse48 (res (= .cse45 .cse44) (res (= .cse49 .cse43) (res (= .cse50 .cse42) (res (= .cse51 .cse41) (res (= .cse52 .cse39) (res (= .cse53 .cse5) (let ((.cse71 (= .cse73 .cse13))) (let-proof ((.cse72 (res .cse13 (res .cse73 (=+1 .cse71) (res .cse9 .cse14 (farkas 1 .cse73 1 .cse9))) (res .cse73 (let ((.cse94 (<= N i@0))) (res .cse94 (total N i@0) (res .cse9 (res .cse21 .cse22 (farkas 1 .cse94 1 .cse21)) .cse18))) (=+2 .cse71))))) (res (= .cse54 .cse38) (let ((.cse81 (= .cse83 .cse84))) (let ((.cse64 (= 0 0)) (.cse68 (= .cse36 .cse36))) (let-proof ((.cse82 (res .cse84 (res .cse83 (=+1 .cse81) (let ((.cse91 (< 0 .cse92))) (res .cse91 (total .cse92 0) (farkas 1 .cse83 1 .cse91)))) (res .cse83 (let ((.cse93 (< i@0 0))) (res .cse93 (total 0 i@0) (farkas 1 .cse93 1 .cse84))) (=+2 .cse81)))) (.cse65 (refl 0)) (.cse69 (refl .cse36))) (res (= .cse55 .cse6) (res (= .cse56 .cse37) (res (= .cse57 .cse26) (res (= .cse58 .cse27) (res (= .cse59 .cse59) (refl .cse59) (res (= .cse60 .cse28) (res (= .cse61 .cse30) (res (= .cse62 (- 2)) (let ((.cse63 (* (- 1) 2))) (res (= .cse63 (- 2)) (poly* .cse63 (- 2)) (res .cse64 .cse65 (let ((.cse66 (+ 0 .cse63)) (.cse67 (+ 0 (- 2)))) (res (= .cse66 .cse67) (cong (+ 0 .cse63) (+ 0 (- 2))) (res (= .cse62 .cse66) (-def 0 2) (res (= .cse67 (- 2)) (poly+ .cse67 (- 2)) (trans .cse62 .cse66 .cse67 (- 2))))))))) (res .cse68 .cse69 (cong (= .cse36 .cse62) (= .cse36 (- 2))))) (res (= .cse70 .cse70) (refl .cse70) (cong (and .cse70 .cse61) (and .cse70 .cse30)))) (cong (=> .cse60 .cse59) (=> .cse28 .cse59)))) (res .cse71 .cse72 (cong (=> .cse73 .cse58) (=> .cse13 .cse27)))) (res (= .cse74 .cse7) (res .cse71 .cse72 (res (= .cse75 .cse76) (res (= .cse77 (- 4)) (let ((.cse78 (* (- 1) 4))) (res (= .cse78 (- 4)) (poly* .cse78 (- 4)) (res .cse64 .cse65 (let ((.cse79 (+ 0 .cse78)) (.cse80 (+ 0 (- 4)))) (res (= .cse79 .cse80) (cong (+ 0 .cse78) (+ 0 (- 4))) (res (= .cse77 .cse79) (-def 0 4) (res (= .cse80 (- 4)) (poly+ .cse80 (- 4)) (trans .cse77 .cse79 .cse80 (- 4))))))))) (res .cse68 .cse69 (cong (= .cse36 .cse77) (= .cse36 (- 4))))) (cong (=> .cse75 .cse73) (=> .cse76 .cse13)))) (cong (and .cse74 .cse57) (and .cse7 .cse26)))) (res .cse81 .cse82 (cong (=> .cse83 .cse56) (=> .cse84 .cse37)))) (res (= .cse85 .cse1) (res .cse81 .cse82 (res (= .cse86 .cse2) (res (= .cse87 (- 5)) (let ((.cse88 (* (- 1) 5))) (res (= .cse88 (- 5)) (poly* .cse88 (- 5)) (res .cse64 .cse65 (let ((.cse89 (+ 0 .cse88)) (.cse90 (+ 0 (- 5)))) (res (= .cse89 .cse90) (cong (+ 0 .cse88) (+ 0 (- 5))) (res (= .cse87 .cse89) (-def 0 5) (res (= .cse90 (- 5)) (poly+ .cse90 (- 5)) (trans .cse87 .cse89 .cse90 (- 5))))))))) (res .cse68 .cse69 (cong (= .cse36 .cse87) (= .cse36 (- 5))))) (cong (=> .cse86 .cse83) (=> .cse2 .cse84)))) (cong (and .cse85 .cse55) (and .cse1 .cse6))))))) (res .cse71 .cse72 (cong (=> .cse73 .cse54) (=> .cse13 .cse38)))))) (res (= .cse95 .cse95) (refl .cse95) (cong (=> .cse95 .cse53) (=> .cse95 .cse5)))) (res (= .cse40 .cse40) (refl .cse40) (cong (and .cse40 .cse52) (and .cse40 .cse39)))) (res (= .cse96 .cse96) (refl .cse96) (cong (=> .cse96 .cse51) (=> .cse96 .cse41)))) (let ((.cse97 (= .cse99 .cse98))) (res .cse97 (res .cse98 (res .cse99 (=+1 .cse97) (let ((.cse100 (< 0 .cse25))) (res .cse100 (total .cse25 0) (farkas 1 .cse99 1 .cse100)))) (res .cse99 (let ((.cse101 (< N 0))) (res .cse101 (total 0 N) (farkas 1 .cse101 1 .cse98))) (=+2 .cse97))) (cong (=> .cse99 .cse50) (=> .cse98 .cse42))))) (res (= .cse102 .cse102) (refl .cse102) (cong (=> .cse102 .cse49) (=> .cse102 .cse43)))) (cong (not .cse45) (not .cse44))) (=-2 .cse48)))) (not- .cse46))) (res .cse47 (assume .cse47) (not- .cse47))))))))))))))))))))))))))))) :proves (- .cse40 - .cse39) :input))) :proves (- .cse39) :rup))))) :proves (- .cse5) :rup))) (res .cse5 (res .cse6 (! (res .cse7 (! (let ((.cse24 (+ i@0 .cse25 1))) (let ((.cse8 (<= .cse24 0))) (let ((.cse10 (not .cse8))) (let ((.cse16 (= .cse9 .cse10))) (let-proof ((.cse11 (not+ .cse10)) (.cse20 (not- .cse10))) (let-proof ((.cse17 (res .cse10 (res .cse9 (=+1 .cse16) (res .cse8 .cse11 (farkas 1 .cse9 1 .cse8))) (res .cse9 (res .cse21 .cse22 (res .cse8 (let ((.cse23 (<= 1 .cse24))) (res .cse23 (total-int .cse24 0) (farkas 1 .cse21 1 .cse23))) .cse20)) (=+2 .cse16))))) (res .cse8 (! (res .cse5 (! (res .cse9 (res .cse10 .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (res .cse13 .cse14 (let ((.cse15 (= .cse13 .cse12))) (res .cse15 (res .cse16 .cse17 (cong (not .cse9) (not .cse10))) (=-2 .cse15)))) (not- .cse12)))) (res .cse13 (=>+ 0 .cse5) .cse18)) :proves (+ .cse5 + .cse8) :input) .cse19) :proves (+ .cse8) :rup) (! (res .cse9 (res .cse13 .cse14 (=>+ 1 .cse7)) (res .cse10 (res .cse16 .cse17 (=-2 .cse16)) .cse20)) :proves (+ .cse7 - .cse8) :input)))))))) :proves (+ .cse7) :rup) (res .cse26 (! (res .cse27 (! (res .cse28 (! (=>+ 0 .cse27) :proves (+ .cse27 + .cse28) :input) (! (let ((.cse29 (= (- 2) .cse36))) (let ((.cse31 (= .cse30 .cse29))) (let-proof ((.cse32 (res .cse29 (res .cse30 (=+1 .cse31) (symm (- 2) .cse36)) (res .cse30 (symm .cse36 (- 2)) (=+2 .cse31))))) (res .cse29 (! (res .cse30 (and- 1 .cse28) (res .cse31 .cse32 (=-2 .cse31))) :proves (- .cse28 + .cse29) :input) (! (let ((.cse34 (not .cse30))) (res .cse30 (let ((.cse33 (not .cse29))) (res .cse33 (res .cse34 (not+ .cse34) (let ((.cse35 (= .cse34 .cse33))) (res .cse35 (res .cse31 .cse32 (cong (not .cse30) (not .cse29))) (=-2 .cse35)))) (not- .cse33))) (res .cse34 (assume .cse34) (not- .cse34)))) :proves (- .cse29) :input))))) :proves (- .cse28) :rup)) :proves (+ .cse27) :rup) (! (=>+ 1 .cse26) :proves (+ .cse26 - .cse27) :input)) :proves (+ .cse26) :rup) (! (res .cse37 (and+ .cse37) (=>+ 1 .cse6)) :proves (+ .cse6 - .cse26 - .cse7) :input))) :proves (+ .cse6) :rup) (! (res .cse38 (and+ .cse38) (=>+ 1 .cse5)) :proves (- .cse6 - .cse1 + .cse5) :input)) .cse19)))))))))))) :proves (- .cse1) :rup))))) :proves (+ .cse0) :rup) (! (let ((.cse107 (not .cse2))) (res .cse2 (let ((.cse106 (not .cse0))) (res .cse106 (res .cse107 (not+ .cse107) (let ((.cse108 (= .cse107 .cse106))) (res .cse108 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse108)))) (not- .cse106))) (res .cse107 (assume .cse107) (not- .cse107)))) :proves (- .cse0) :input)))))) :proves () :rup)

