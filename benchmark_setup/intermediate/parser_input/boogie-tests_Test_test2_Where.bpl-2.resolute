unsat
(! (let ((.cse28 (ControlFlow 0 2))) (let ((.cse1 (= .cse28 (- 1))) (.cse0 (= (- 1) .cse28))) (let ((.cse64 (= .cse1 .cse0))) (let-proof ((.cse65 (res .cse0 (res .cse1 (=+1 .cse64) (symm (- 1) .cse28)) (res .cse1 (symm .cse28 (- 1)) (=+2 .cse64))))) (res .cse0 (! (res .cse1 (let ((.cse33 (* (- 1) x@0))) (let ((.cse30 (<= .cse33 0))) (let ((.cse2 (and .cse30 .cse1))) (res .cse2 (let ((.cse63 (* (- 1) y@0))) (let ((.cse20 (+ x@0 .cse63))) (let ((.cse17 (<= .cse20 0))) (let ((.cse3 (=> .cse2 .cse17))) (res .cse3 (=>+ 0 .cse3) (let ((.cse39 (+ x .cse63))) (let ((.cse36 (<= .cse39 0))) (let ((.cse4 (=> .cse36 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse52 (+ x (* (- 1) y)))) (let ((.cse49 (<= .cse52 0))) (let ((.cse45 (and .cse49 true)) (.cse43 (= (ControlFlow 0 3) 2))) (let ((.cse42 (and .cse45 .cse43))) (let ((.cse5 (=> .cse42 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse60 (* (- 1) x))) (let ((.cse57 (<= .cse60 0))) (let ((.cse55 (and .cse57 true))) (let ((.cse6 (=> .cse55 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse62 (= (ControlFlow 0 0) 3))) (let ((.cse7 (=> .cse62 .cse6))) (res .cse7 (=>+ 1 .cse7) (let ((.cse24 (- 0 1))) (let ((.cse31 (<= 0 x@0)) (.cse23 (= .cse28 .cse24))) (let ((.cse50 (<= x y)) (.cse22 (and .cse31 .cse23)) (.cse18 (<= x@0 y@0))) (let ((.cse37 (<= x y@0)) (.cse15 (=> .cse22 .cse18)) (.cse44 (and .cse50 true))) (let ((.cse41 (and .cse44 .cse43)) (.cse14 (=> .cse37 .cse15)) (.cse58 (<= 0 x))) (let ((.cse54 (and .cse58 true)) (.cse13 (=> .cse41 .cse14))) (let ((.cse12 (=> .cse54 .cse13))) (let ((.cse8 (=> .cse62 .cse12))) (let ((.cse10 (not .cse8))) (res .cse8 (let ((.cse9 (not .cse7))) (res .cse9 (res .cse10 (not+ .cse10) (let ((.cse11 (= .cse10 .cse9))) (res .cse11 (res (= .cse8 .cse7) (res (= .cse12 .cse6) (let ((.cse46 (= true true))) (let-proof ((.cse47 (refl true))) (res (= .cse13 .cse5) (res (= .cse14 .cse4) (res (= .cse15 .cse3) (let ((.cse16 (= .cse18 .cse17))) (res .cse16 (res .cse17 (res .cse18 (=+1 .cse16) (let ((.cse19 (< 0 .cse20))) (res .cse19 (total .cse20 0) (farkas 1 .cse18 1 .cse19)))) (res .cse18 (let ((.cse21 (< y@0 x@0))) (res .cse21 (total x@0 y@0) (farkas 1 .cse21 1 .cse17))) (=+2 .cse16))) (res (= .cse22 .cse2) (res (= .cse23 .cse1) (res (= .cse24 (- 1)) (let ((.cse25 (* (- 1) 1))) (res (= .cse25 (- 1)) (poly* .cse25 (- 1)) (res (= 0 0) (refl 0) (let ((.cse26 (+ 0 .cse25)) (.cse27 (+ 0 (- 1)))) (res (= .cse26 .cse27) (cong (+ 0 .cse25) (+ 0 (- 1))) (res (= .cse24 .cse26) (-def 0 1) (res (= .cse27 (- 1)) (poly+ .cse27 (- 1)) (trans .cse24 .cse26 .cse27 (- 1))))))))) (res (= .cse28 .cse28) (refl .cse28) (cong (= .cse28 .cse24) (= .cse28 (- 1))))) (let ((.cse29 (= .cse31 .cse30))) (res .cse29 (res .cse30 (res .cse31 (=+1 .cse29) (let ((.cse32 (< 0 .cse33))) (res .cse32 (total .cse33 0) (farkas 1 .cse31 1 .cse32)))) (res .cse31 (let ((.cse34 (< x@0 0))) (res .cse34 (total 0 x@0) (farkas 1 .cse34 1 .cse30))) (=+2 .cse29))) (cong (and .cse31 .cse23) (and .cse30 .cse1))))) (cong (=> .cse22 .cse18) (=> .cse2 .cse17))))) (let ((.cse35 (= .cse37 .cse36))) (res .cse35 (res .cse36 (res .cse37 (=+1 .cse35) (let ((.cse38 (< 0 .cse39))) (res .cse38 (total .cse39 0) (farkas 1 .cse37 1 .cse38)))) (res .cse37 (let ((.cse40 (< y@0 x))) (res .cse40 (total x y@0) (farkas 1 .cse40 1 .cse36))) (=+2 .cse35))) (cong (=> .cse37 .cse15) (=> .cse36 .cse3))))) (res (= .cse41 .cse42) (res (= .cse43 .cse43) (refl .cse43) (res (= .cse44 .cse45) (res .cse46 .cse47 (let ((.cse48 (= .cse50 .cse49))) (res .cse48 (res .cse49 (res .cse50 (=+1 .cse48) (let ((.cse51 (< 0 .cse52))) (res .cse51 (total .cse52 0) (farkas 1 .cse50 1 .cse51)))) (res .cse50 (let ((.cse53 (< y x))) (res .cse53 (total x y) (farkas 1 .cse53 1 .cse49))) (=+2 .cse48))) (cong (and .cse50 true) (and .cse49 true))))) (cong (and .cse44 .cse43) (and .cse45 .cse43)))) (cong (=> .cse41 .cse14) (=> .cse42 .cse4)))) (res (= .cse54 .cse55) (res .cse46 .cse47 (let ((.cse56 (= .cse58 .cse57))) (res .cse56 (res .cse57 (res .cse58 (=+1 .cse56) (let ((.cse59 (< 0 .cse60))) (res .cse59 (total .cse60 0) (farkas 1 .cse58 1 .cse59)))) (res .cse58 (let ((.cse61 (< x 0))) (res .cse61 (total 0 x) (farkas 1 .cse61 1 .cse57))) (=+2 .cse56))) (cong (and .cse58 true) (and .cse57 true))))) (cong (=> .cse54 .cse13) (=> .cse55 .cse5)))))) (res (= .cse62 .cse62) (refl .cse62) (cong (=> .cse62 .cse12) (=> .cse62 .cse6)))) (cong (not .cse8) (not .cse7))) (=-2 .cse11)))) (not- .cse9))) (res .cse10 (assume .cse10) (not- .cse10))))))))))))))))))))))))))))))))))) (and- 1 .cse2))))) (res .cse64 .cse65 (=-2 .cse64))) :proves (+ .cse0) :input) (! (let ((.cse67 (not .cse1))) (res .cse1 (let ((.cse66 (not .cse0))) (res .cse66 (res .cse67 (not+ .cse67) (let ((.cse68 (= .cse67 .cse66))) (res .cse68 (res .cse64 .cse65 (cong (not .cse1) (not .cse0))) (=-2 .cse68)))) (not- .cse66))) (res .cse67 (assume .cse67) (not- .cse67)))) :proves (- .cse0) :input)))))) :proves () :rup)

