unsat
(! (let ((.cse29 (ControlFlow 0 2))) (let ((.cse1 (= .cse29 (- 1))) (.cse0 (= (- 1) .cse29))) (let ((.cse44 (= .cse1 .cse0))) (let-proof ((.cse45 (res .cse0 (res .cse1 (=+1 .cse44) (symm (- 1) .cse29)) (res .cse1 (symm .cse29 (- 1)) (=+2 .cse44))))) (res .cse0 (! (res .cse1 (let ((.cse34 (xor g@0 g@1))) (let ((.cse35 (not .cse34))) (let ((.cse31 (=> b2 .cse35))) (let ((.cse2 (and .cse31 .cse1))) (res .cse2 (let ((.cse3 (and .cse2 b0))) (res .cse3 (let ((.cse21 (not g))) (let ((.cse4 (and .cse3 .cse21))) (res .cse4 (let ((.cse18 (xor g g@1))) (let ((.cse19 (not .cse18))) (let ((.cse5 (=> .cse4 .cse19))) (res .cse5 (=>+ 0 .cse5) (let ((.cse40 (xor g g@0))) (let ((.cse41 (not .cse40))) (let ((.cse37 (=> b1 .cse41))) (let ((.cse6 (=> .cse37 .cse5))) (res .cse6 (=>+ 1 .cse6) (let ((.cse42 (= (ControlFlow 0 3) 2))) (let ((.cse7 (=> .cse42 .cse6))) (res .cse7 (=>+ 1 .cse7) (let ((.cse43 (= (ControlFlow 0 0) 3))) (let ((.cse8 (=> .cse43 .cse7))) (res .cse8 (=>+ 1 .cse8) (let ((.cse25 (- 0 1)) (.cse33 (= g@0 g@1))) (let ((.cse30 (=> b2 .cse33)) (.cse24 (= .cse29 .cse25))) (let ((.cse23 (and .cse30 .cse24))) (let ((.cse22 (and .cse23 b0))) (let ((.cse20 (and .cse22 .cse21)) (.cse17 (= g g@1)) (.cse39 (= g g@0))) (let ((.cse36 (=> b1 .cse39)) (.cse15 (=> .cse20 .cse17))) (let ((.cse14 (=> .cse36 .cse15))) (let ((.cse13 (=> .cse42 .cse14))) (let ((.cse9 (=> .cse43 .cse13))) (let ((.cse11 (not .cse9))) (res .cse9 (let ((.cse10 (not .cse8))) (res .cse10 (res .cse11 (not+ .cse11) (let ((.cse12 (= .cse11 .cse10))) (res .cse12 (res (= .cse9 .cse8) (res (= .cse13 .cse7) (res (= .cse14 .cse6) (res (= .cse15 .cse5) (let ((.cse16 (= .cse17 .cse19))) (res .cse16 (res .cse17 (res .cse18 (res g (res g@1 (=+1 .cse17) (xor+ (g g@1) (g) (g@1))) (res g@1 (xor+ (g g@1) (g@1) (g)) (=+2 .cse17))) (res .cse19 (=+1 .cse16) (not- .cse19))) (res .cse18 (res .cse19 (not+ .cse19) (=+2 .cse16)) (res g (res g@1 (xor+ (g) (g@1) (g g@1)) (=-1 .cse17)) (res g@1 (=-2 .cse17) (xor- (g) (g@1) (g g@1)))))) (res (= .cse20 .cse4) (res (= .cse21 .cse21) (refl .cse21) (res (= .cse22 .cse3) (res (= b0 b0) (refl b0) (res (= .cse23 .cse2) (res (= .cse24 .cse1) (res (= .cse25 (- 1)) (let ((.cse26 (* (- 1) 1))) (res (= .cse26 (- 1)) (poly* .cse26 (- 1)) (res (= 0 0) (refl 0) (let ((.cse27 (+ 0 .cse26)) (.cse28 (+ 0 (- 1)))) (res (= .cse27 .cse28) (cong (+ 0 .cse26) (+ 0 (- 1))) (res (= .cse25 .cse27) (-def 0 1) (res (= .cse28 (- 1)) (poly+ .cse28 (- 1)) (trans .cse25 .cse27 .cse28 (- 1))))))))) (res (= .cse29 .cse29) (refl .cse29) (cong (= .cse29 .cse25) (= .cse29 (- 1))))) (res (= .cse30 .cse31) (let ((.cse32 (= .cse33 .cse35))) (res .cse32 (res .cse33 (res .cse34 (res g@0 (res g@1 (=+1 .cse33) (xor+ (g@0 g@1) (g@0) (g@1))) (res g@1 (xor+ (g@0 g@1) (g@1) (g@0)) (=+2 .cse33))) (res .cse35 (=+1 .cse32) (not- .cse35))) (res .cse34 (res .cse35 (not+ .cse35) (=+2 .cse32)) (res g@0 (res g@1 (xor+ (g@0) (g@1) (g@0 g@1)) (=-1 .cse33)) (res g@1 (=-2 .cse33) (xor- (g@0) (g@1) (g@0 g@1)))))) (res (= b2 b2) (refl b2) (cong (=> b2 .cse33) (=> b2 .cse35))))) (cong (and .cse30 .cse24) (and .cse31 .cse1)))) (cong (and .cse23 b0) (and .cse2 b0)))) (cong (and .cse22 .cse21) (and .cse3 .cse21)))) (cong (=> .cse20 .cse17) (=> .cse4 .cse19))))) (res (= .cse36 .cse37) (let ((.cse38 (= .cse39 .cse41))) (res .cse38 (res .cse39 (res .cse40 (res g (res g@0 (=+1 .cse39) (xor+ (g g@0) (g) (g@0))) (res g@0 (xor+ (g g@0) (g@0) (g)) (=+2 .cse39))) (res .cse41 (=+1 .cse38) (not- .cse41))) (res .cse40 (res .cse41 (not+ .cse41) (=+2 .cse38)) (res g (res g@0 (xor+ (g) (g@0) (g g@0)) (=-1 .cse39)) (res g@0 (=-2 .cse39) (xor- (g) (g@0) (g g@0)))))) (res (= b1 b1) (refl b1) (cong (=> b1 .cse39) (=> b1 .cse41))))) (cong (=> .cse36 .cse15) (=> .cse37 .cse5)))) (res (= .cse42 .cse42) (refl .cse42) (cong (=> .cse42 .cse14) (=> .cse42 .cse6)))) (res (= .cse43 .cse43) (refl .cse43) (cong (=> .cse43 .cse13) (=> .cse43 .cse7)))) (cong (not .cse9) (not .cse8))) (=-2 .cse12)))) (not- .cse10))) (res .cse11 (assume .cse11) (not- .cse11)))))))))))))))))))))))))))) (and- 0 .cse4)))) (and- 0 .cse3))) (and- 1 .cse2)))))) (res .cse44 .cse45 (=-2 .cse44))) :proves (+ .cse0) :input) (! (let ((.cse47 (not .cse1))) (res .cse1 (let ((.cse46 (not .cse0))) (res .cse46 (res .cse47 (not+ .cse47) (let ((.cse48 (= .cse47 .cse46))) (res .cse48 (res .cse44 .cse45 (cong (not .cse1) (not .cse0))) (=-2 .cse48)))) (not- .cse46))) (res .cse47 (assume .cse47) (not- .cse47)))) :proves (- .cse0) :input)))))) :proves () :rup)

