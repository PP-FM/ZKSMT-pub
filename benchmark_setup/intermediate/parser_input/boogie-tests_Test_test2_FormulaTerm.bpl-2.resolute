unsat
(! (let ((.cse65 (ControlFlow 0 2))) (let ((.cse7 (+ x y)) (.cse16 (= z@1 z@0)) (.cse60 (= .cse65 (- 1)))) (let ((.cse17 (and .cse16 .cse60)) (.cse40 (= z@1 .cse7))) (let ((.cse2 (= z@0 .cse7)) (.cse18 (=> .cse17 .cse40))) (let ((.cse38 (* (- 1) z@1)) (.cse3 (=> .cse2 .cse18))) (let ((.cse32 (+ x y .cse38))) (let-proof ((.cse4 (let ((.cse68 (= (ControlFlow 0 3) 2))) (let ((.cse49 (=> .cse68 .cse3))) (res .cse49 (=>+ 1 .cse49) (let ((.cse69 (= (ControlFlow 0 0) 3))) (let ((.cse50 (=> .cse69 .cse49))) (res .cse50 (=>+ 1 .cse50) (let ((.cse61 (- 0 1)) (.cse67 (+ 0 z@0))) (let ((.cse66 (= z@1 .cse67)) (.cse59 (= .cse65 .cse61))) (let ((.cse58 (and .cse66 .cse59))) (let ((.cse57 (=> .cse58 .cse40))) (let ((.cse56 (=> .cse2 .cse57))) (let ((.cse55 (=> .cse68 .cse56))) (let ((.cse51 (=> .cse69 .cse55))) (let ((.cse53 (not .cse51))) (res .cse51 (let ((.cse52 (not .cse50))) (res .cse52 (res .cse53 (not+ .cse53) (let ((.cse54 (= .cse53 .cse52))) (res .cse54 (res (= .cse51 .cse50) (res (= .cse55 .cse49) (res (= .cse56 .cse3) (res (= .cse57 .cse18) (res (= .cse40 .cse40) (refl .cse40) (res (= .cse58 .cse17) (res (= .cse59 .cse60) (res (= .cse61 (- 1)) (let ((.cse62 (* (- 1) 1))) (res (= .cse62 (- 1)) (poly* .cse62 (- 1)) (res (= 0 0) (refl 0) (let ((.cse63 (+ 0 .cse62)) (.cse64 (+ 0 (- 1)))) (res (= .cse63 .cse64) (cong (+ 0 .cse62) (+ 0 (- 1))) (res (= .cse61 .cse63) (-def 0 1) (res (= .cse64 (- 1)) (poly+ .cse64 (- 1)) (trans .cse61 .cse63 .cse64 (- 1))))))))) (res (= .cse65 .cse65) (refl .cse65) (cong (= .cse65 .cse61) (= .cse65 (- 1))))) (res (= .cse66 .cse16) (res (= .cse67 z@0) (poly+ .cse67 z@0) (res (= z@1 z@1) (refl z@1) (cong (= z@1 .cse67) (= z@1 z@0)))) (cong (and .cse66 .cse59) (and .cse16 .cse60)))) (cong (=> .cse58 .cse40) (=> .cse17 .cse40)))) (res (= .cse2 .cse2) (refl .cse2) (cong (=> .cse2 .cse57) (=> .cse2 .cse18)))) (res (= .cse68 .cse68) (refl .cse68) (cong (=> .cse68 .cse56) (=> .cse68 .cse3)))) (res (= .cse69 .cse69) (refl .cse69) (cong (=> .cse69 .cse55) (=> .cse69 .cse49)))) (cong (not .cse51) (not .cse50))) (=-2 .cse54)))) (not- .cse52))) (res .cse53 (assume .cse53) (not- .cse53))))))))))))))))))) (let ((.cse34 (< 0 .cse32)) (.cse33 (< .cse32 0)) (.cse0 (= .cse32 0))) (let-proof ((.cse35 (trichotomy .cse32 0)) (.cse19 (res .cse3 (=>+ 1 .cse3) .cse4))) (res .cse0 (let ((.cse39 (* (- 1) z@0))) (let ((.cse10 (+ x y .cse39))) (let ((.cse1 (= .cse10 0)) (.cse11 (= 0 .cse10))) (let-proof ((.cse12 (symm 0 .cse10))) (res .cse1 (! (res .cse2 (res .cse3 (=>+ 0 .cse3) .cse4) (let ((.cse5 (= .cse2 .cse1))) (res .cse5 (res .cse1 (res .cse2 (=+1 .cse5) (let ((.cse6 (= .cse7 z@0))) (res .cse6 (symm .cse7 z@0) (let ((.cse8 (< .cse10 0))) (res .cse8 (let ((.cse9 (< 0 .cse10))) (res .cse9 (trichotomy .cse10 0) (farkas 1 .cse6 1 .cse9))) (farkas 1 .cse2 1 .cse8)))))) (res .cse2 (res .cse11 .cse12 (let ((.cse13 (< z@0 .cse7))) (res .cse13 (let ((.cse14 (< .cse7 z@0))) (res .cse14 (trichotomy z@0 .cse7) (farkas 1 .cse11 1 .cse14))) (farkas 1 .cse1 1 .cse13)))) (=+2 .cse5))) (=-2 .cse5)))) :proves (+ .cse1) :input) (let ((.cse24 (+ z@1 .cse39))) (let ((.cse25 (= 0 .cse24)) (.cse15 (= .cse24 0))) (let-proof ((.cse26 (symm 0 .cse24))) (res .cse15 (! (res .cse16 (res .cse17 (res .cse18 (=>+ 0 .cse18) .cse19) (and- 0 .cse17)) (let ((.cse20 (= .cse16 .cse15))) (res .cse20 (res .cse15 (res .cse16 (=+1 .cse20) (let ((.cse21 (= z@0 z@1))) (res .cse21 (symm z@0 z@1) (let ((.cse22 (< .cse24 0))) (res .cse22 (let ((.cse23 (< 0 .cse24))) (res .cse23 (trichotomy .cse24 0) (farkas 1 .cse16 1 .cse23))) (farkas 1 .cse21 1 .cse22)))))) (res .cse16 (res .cse25 .cse26 (let ((.cse27 (< z@1 z@0))) (res .cse27 (let ((.cse28 (< z@0 z@1))) (res .cse28 (trichotomy z@1 z@0) (farkas 1 .cse15 1 .cse28))) (farkas 1 .cse25 1 .cse27)))) (=+2 .cse20))) (=-2 .cse20)))) :proves (+ .cse15) :input) (let ((.cse37 (+ x y .cse38 1))) (let ((.cse29 (<= .cse37 0))) (res .cse29 (let ((.cse30 (<= .cse32 0))) (res .cse30 (! (let ((.cse31 (<= 1 .cse32))) (res .cse31 (total-int .cse32 0) (res .cse25 .cse26 (farkas 1 .cse25 1 .cse1 1 .cse31)))) :proves (- .cse15 - .cse1 + .cse30) :LA ((- 1) 1 (- 1))) (! (res .cse33 (res .cse34 .cse35 (farkas 1 .cse34 1 .cse30)) (let ((.cse36 (<= 1 .cse37))) (res .cse36 (total-int .cse37 0) (farkas 1 .cse36 1 .cse33)))) :proves (- .cse30 + .cse0 + .cse29) :trichotomy))) (! (res .cse11 .cse12 (farkas 1 .cse29 1 .cse15 1 .cse11)) :proves (- .cse29 - .cse15 - .cse1) :LA (1 1 (- 1))))))))))))))) (! (res .cse40 (let ((.cse41 (not .cse0))) (res .cse41 (let ((.cse42 (not .cse40))) (res .cse42 (not+ .cse42) (let ((.cse43 (= .cse42 .cse41))) (res .cse43 (let ((.cse44 (= .cse40 .cse0))) (res .cse44 (res .cse0 (res .cse40 (=+1 .cse44) (let ((.cse45 (= .cse7 z@1))) (res .cse45 (symm .cse7 z@1) (res .cse33 (res .cse34 .cse35 (farkas 1 .cse45 1 .cse34)) (farkas 1 .cse40 1 .cse33))))) (res .cse40 (let ((.cse46 (= 0 .cse32))) (res .cse46 (symm 0 .cse32) (let ((.cse47 (< z@1 .cse7))) (res .cse47 (let ((.cse48 (< .cse7 z@1))) (res .cse48 (trichotomy z@1 .cse7) (farkas 1 .cse46 1 .cse48))) (farkas 1 .cse0 1 .cse47))))) (=+2 .cse44))) (cong (not .cse40) (not .cse0)))) (=-2 .cse43))))) (not- .cse41))) (res .cse18 (=>+ 1 .cse18) .cse19)) :proves (- .cse0) :input))))))))))) :proves () :rup)

