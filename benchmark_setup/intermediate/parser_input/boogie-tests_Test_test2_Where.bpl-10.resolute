unsat
(! (let ((.cse56 (ControlFlow 0 2))) (let ((.cse2 (= .cse56 (- 1))) (.cse0 (= (- 1) .cse56))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse56)) (res .cse2 (symm .cse56 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse45 (* (- 1) K))) (let ((.cse42 (<= .cse45 0))) (let ((.cse1 (=> .cse2 .cse42))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse5 (=> true .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse62 (= .cse56 (- 3)))) (let ((.cse6 (=> .cse62 true))) (let-proof ((.cse7 true+)) (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (let ((.cse89 (+ K (* (- 1) y@0)))) (let ((.cse11 (<= .cse89 0)) (.cse9 (and .cse6 .cse5))) (let ((.cse8 (=> .cse11 .cse9))) (res .cse8 (! (res .cse9 (and+ .cse9) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse5 - .cse6) :input) (! (let ((.cse72 (= .cse56 (- 4)))) (let ((.cse10 (=> .cse72 .cse11))) (let ((.cse15 (and .cse10 .cse8)) (.cse81 (= .cse56 (- 5))) (.cse18 (= w@0 K))) (let ((.cse17 (=> .cse81 .cse18)) (.cse14 (=> .cse18 .cse15)) (.cse118 (ControlFlow 0 7))) (let ((.cse86 (= .cse118 2)) (.cse19 (and .cse17 .cse14))) (let ((.cse16 (=> .cse86 .cse19)) (.cse20 (=> (= .cse118 6) true))) (let ((.cse12 (and .cse18 .cse11)) (.cse21 (and .cse16 .cse20))) (let ((.cse22 (=> .cse12 .cse21))) (let-proof ((.cse23 (let ((.cse104 (+ x (* (- 1) y))) (.cse114 (* (- 1) x))) (let ((.cse111 (<= .cse114 0)) (.cse101 (<= .cse104 0))) (let ((.cse97 (and .cse101 true)) (.cse95 (= (ControlFlow 0 8) 7)) (.cse116 (and (= w x) true)) (.cse109 (and .cse111 true))) (let ((.cse107 (and .cse116 .cse109)) (.cse94 (and .cse97 .cse95))) (let ((.cse92 (and .cse107 .cse94))) (let ((.cse24 (=> .cse92 .cse22))) (res .cse24 (=>+ 1 .cse24) (let ((.cse117 (= (ControlFlow 0 0) 8))) (let ((.cse25 (=> .cse117 .cse24))) (res .cse25 (=>+ 1 .cse25) (let ((.cse48 (- 0 1))) (let ((.cse63 (- 0 3)) (.cse47 (= .cse56 .cse48)) (.cse43 (<= 0 K))) (let ((.cse40 (=> .cse47 .cse43)) (.cse61 (= .cse56 .cse63)) (.cse59 (= K K))) (let ((.cse73 (- 0 4)) (.cse60 (=> .cse61 .cse59)) (.cse39 (=> .cse59 .cse40))) (let ((.cse38 (and .cse60 .cse39)) (.cse71 (= .cse56 .cse73)) (.cse69 (<= K y@0))) (let ((.cse82 (- 0 5)) (.cse70 (=> .cse71 .cse69)) (.cse37 (=> .cse69 .cse38))) (let ((.cse36 (and .cse70 .cse37)) (.cse80 (= .cse56 .cse82))) (let ((.cse79 (=> .cse80 .cse18)) (.cse35 (=> .cse18 .cse36))) (let ((.cse34 (and .cse79 .cse35)) (.cse112 (<= 0 x)) (.cse102 (<= x y))) (let ((.cse96 (and .cse102 true)) (.cse108 (and .cse112 true)) (.cse33 (=> .cse86 .cse34))) (let ((.cse87 (and .cse18 .cse69)) (.cse32 (and .cse33 .cse20)) (.cse106 (and .cse116 .cse108)) (.cse93 (and .cse96 .cse95))) (let ((.cse91 (and .cse106 .cse93)) (.cse31 (=> .cse87 .cse32))) (let ((.cse30 (=> .cse91 .cse31))) (let ((.cse26 (=> .cse117 .cse30))) (let ((.cse28 (not .cse26))) (res .cse26 (let ((.cse27 (not .cse25))) (res .cse27 (res .cse28 (not+ .cse28) (let ((.cse29 (= .cse28 .cse27))) (res .cse29 (res (= .cse26 .cse25) (res (= .cse30 .cse24) (res (= .cse31 .cse22) (let ((.cse67 (= .cse69 .cse11))) (let ((.cse77 (= .cse18 .cse18))) (let-proof ((.cse68 (res .cse11 (res .cse69 (=+1 .cse67) (let ((.cse88 (< 0 .cse89))) (res .cse88 (total .cse89 0) (farkas 1 .cse69 1 .cse88)))) (res .cse69 (let ((.cse90 (< y@0 K))) (res .cse90 (total K y@0) (farkas 1 .cse90 1 .cse11))) (=+2 .cse67)))) (.cse78 (refl .cse18))) (res (= .cse32 .cse21) (res (= .cse20 .cse20) (refl .cse20) (res (= .cse33 .cse16) (res (= .cse34 .cse19) (let ((.cse50 (= 0 0)) (.cse54 (= .cse56 .cse56))) (let-proof ((.cse51 (refl 0)) (.cse55 (refl .cse56))) (res (= .cse35 .cse14) (res (= .cse36 .cse15) (res (= .cse37 .cse8) (res (= .cse38 .cse9) (let ((.cse57 (= .cse59 true))) (let-proof ((.cse58 (res true .cse7 (res .cse59 (refl K) (=+2 .cse57))))) (res (= .cse39 .cse5) (res (= .cse40 .cse1) (let ((.cse41 (= .cse43 .cse42))) (res .cse41 (res .cse42 (res .cse43 (=+1 .cse41) (let ((.cse44 (< 0 .cse45))) (res .cse44 (total .cse45 0) (farkas 1 .cse43 1 .cse44)))) (res .cse43 (let ((.cse46 (< K 0))) (res .cse46 (total 0 K) (farkas 1 .cse46 1 .cse42))) (=+2 .cse41))) (res (= .cse47 .cse2) (res (= .cse48 (- 1)) (let ((.cse49 (* (- 1) 1))) (res (= .cse49 (- 1)) (poly* .cse49 (- 1)) (res .cse50 .cse51 (let ((.cse52 (+ 0 .cse49)) (.cse53 (+ 0 (- 1)))) (res (= .cse52 .cse53) (cong (+ 0 .cse49) (+ 0 (- 1))) (res (= .cse48 .cse52) (-def 0 1) (res (= .cse53 (- 1)) (poly+ .cse53 (- 1)) (trans .cse48 .cse52 .cse53 (- 1))))))))) (res .cse54 .cse55 (cong (= .cse56 .cse48) (= .cse56 (- 1))))) (cong (=> .cse47 .cse43) (=> .cse2 .cse42))))) (res .cse57 .cse58 (cong (=> .cse59 .cse40) (=> true .cse1)))) (res (= .cse60 .cse6) (res .cse57 .cse58 (res (= .cse61 .cse62) (res (= .cse63 (- 3)) (let ((.cse64 (* (- 1) 3))) (res (= .cse64 (- 3)) (poly* .cse64 (- 3)) (res .cse50 .cse51 (let ((.cse65 (+ 0 .cse64)) (.cse66 (+ 0 (- 3)))) (res (= .cse65 .cse66) (cong (+ 0 .cse64) (+ 0 (- 3))) (res (= .cse63 .cse65) (-def 0 3) (res (= .cse66 (- 3)) (poly+ .cse66 (- 3)) (trans .cse63 .cse65 .cse66 (- 3))))))))) (res .cse54 .cse55 (cong (= .cse56 .cse63) (= .cse56 (- 3))))) (cong (=> .cse61 .cse59) (=> .cse62 true)))) (cong (and .cse60 .cse39) (and .cse6 .cse5)))))) (res .cse67 .cse68 (cong (=> .cse69 .cse38) (=> .cse11 .cse9)))) (res (= .cse70 .cse10) (res .cse67 .cse68 (res (= .cse71 .cse72) (res (= .cse73 (- 4)) (let ((.cse74 (* (- 1) 4))) (res (= .cse74 (- 4)) (poly* .cse74 (- 4)) (res .cse50 .cse51 (let ((.cse75 (+ 0 .cse74)) (.cse76 (+ 0 (- 4)))) (res (= .cse75 .cse76) (cong (+ 0 .cse74) (+ 0 (- 4))) (res (= .cse73 .cse75) (-def 0 4) (res (= .cse76 (- 4)) (poly+ .cse76 (- 4)) (trans .cse73 .cse75 .cse76 (- 4))))))))) (res .cse54 .cse55 (cong (= .cse56 .cse73) (= .cse56 (- 4))))) (cong (=> .cse71 .cse69) (=> .cse72 .cse11)))) (cong (and .cse70 .cse37) (and .cse10 .cse8)))) (res .cse77 .cse78 (cong (=> .cse18 .cse36) (=> .cse18 .cse15)))) (res (= .cse79 .cse17) (res .cse77 .cse78 (res (= .cse80 .cse81) (res (= .cse82 (- 5)) (let ((.cse83 (* (- 1) 5))) (res (= .cse83 (- 5)) (poly* .cse83 (- 5)) (res .cse50 .cse51 (let ((.cse84 (+ 0 .cse83)) (.cse85 (+ 0 (- 5)))) (res (= .cse84 .cse85) (cong (+ 0 .cse83) (+ 0 (- 5))) (res (= .cse82 .cse84) (-def 0 5) (res (= .cse85 (- 5)) (poly+ .cse85 (- 5)) (trans .cse82 .cse84 .cse85 (- 5))))))))) (res .cse54 .cse55 (cong (= .cse56 .cse82) (= .cse56 (- 5))))) (cong (=> .cse80 .cse18) (=> .cse81 .cse18)))) (cong (and .cse79 .cse35) (and .cse17 .cse14)))))) (res (= .cse86 .cse86) (refl .cse86) (cong (=> .cse86 .cse34) (=> .cse86 .cse19)))) (cong (and .cse33 .cse20) (and .cse16 .cse20)))) (res (= .cse87 .cse12) (res .cse67 .cse68 (res .cse77 .cse78 (cong (and .cse18 .cse69) (and .cse18 .cse11)))) (cong (=> .cse87 .cse32) (=> .cse12 .cse21))))))) (res (= .cse91 .cse92) (let ((.cse98 (= true true))) (let-proof ((.cse99 (refl true))) (res (= .cse93 .cse94) (res (= .cse95 .cse95) (refl .cse95) (res (= .cse96 .cse97) (res .cse98 .cse99 (let ((.cse100 (= .cse102 .cse101))) (res .cse100 (res .cse101 (res .cse102 (=+1 .cse100) (let ((.cse103 (< 0 .cse104))) (res .cse103 (total .cse104 0) (farkas 1 .cse102 1 .cse103)))) (res .cse102 (let ((.cse105 (< y x))) (res .cse105 (total x y) (farkas 1 .cse105 1 .cse101))) (=+2 .cse100))) (cong (and .cse102 true) (and .cse101 true))))) (cong (and .cse96 .cse95) (and .cse97 .cse95)))) (res (= .cse106 .cse107) (res (= .cse108 .cse109) (res .cse98 .cse99 (let ((.cse110 (= .cse112 .cse111))) (res .cse110 (res .cse111 (res .cse112 (=+1 .cse110) (let ((.cse113 (< 0 .cse114))) (res .cse113 (total .cse114 0) (farkas 1 .cse112 1 .cse113)))) (res .cse112 (let ((.cse115 (< x 0))) (res .cse115 (total 0 x) (farkas 1 .cse115 1 .cse111))) (=+2 .cse110))) (cong (and .cse112 true) (and .cse111 true))))) (res (= .cse116 .cse116) (refl .cse116) (cong (and .cse116 .cse108) (and .cse116 .cse109)))) (cong (and .cse106 .cse93) (and .cse107 .cse94)))))) (cong (=> .cse91 .cse31) (=> .cse92 .cse22)))) (res (= .cse117 .cse117) (refl .cse117) (cong (=> .cse117 .cse30) (=> .cse117 .cse24)))) (cong (not .cse26) (not .cse25))) (=-2 .cse29)))) (not- .cse27))) (res .cse28 (assume .cse28) (not- .cse28)))))))))))))))))))))))))))))) (let-proof ((.cse13 (res .cse22 (=>+ 0 .cse22) .cse23))) (res .cse10 (! (res .cse11 (! (res .cse12 .cse13 (and- 1 .cse12)) :proves (+ .cse11) :input) (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse11) :input)) :proves (+ .cse10) :rup) (res .cse14 (! (res .cse15 (and+ .cse15) (=>+ 1 .cse14)) :proves (+ .cse14 - .cse8 - .cse10) :input) (! (res .cse16 (res .cse17 (! (res .cse18 (! (res .cse12 .cse13 (and- 0 .cse12)) :proves (+ .cse18) :input) (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse18) :input)) :proves (+ .cse17) :rup) (! (res .cse19 (and+ .cse19) (=>+ 1 .cse16)) :proves (- .cse14 - .cse17 + .cse16) :input)) (! (res .cse20 (! (res true .cse7 (=>+ 1 .cse20)) :proves (+ .cse20) :input) (! (res .cse21 (and+ .cse21) (res .cse22 (=>+ 1 .cse22) .cse23)) :proves (- .cse16 - .cse20) :input)) :proves (- .cse16) :rup)) :proves (- .cse14) :rup))))))))))))) :proves (- .cse8) :rup))))))))) :proves (- .cse5) :rup))) :proves (- .cse1) :rup))))) :proves (+ .cse0) :rup) (! (let ((.cse120 (not .cse2))) (res .cse2 (let ((.cse119 (not .cse0))) (res .cse119 (res .cse120 (not+ .cse120) (let ((.cse121 (= .cse120 .cse119))) (res .cse121 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse121)))) (not- .cse119))) (res .cse120 (assume .cse120) (not- .cse120)))) :proves (- .cse0) :input)))))) :proves () :rup)

