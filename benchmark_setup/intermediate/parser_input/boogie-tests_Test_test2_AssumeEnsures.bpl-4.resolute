unsat
(! (let ((.cse23 (ControlFlow 0 2))) (let ((.cse1 (= .cse23 (- 1))) (.cse0 (= (- 1) .cse23))) (let ((.cse26 (= .cse1 .cse0))) (let-proof ((.cse27 (res .cse0 (res .cse1 (=+1 .cse26) (symm (- 1) .cse23)) (res .cse1 (symm .cse23 (- 1)) (=+2 .cse26))))) (res .cse0 (! (res .cse1 (let ((.cse17 (+ (* (- 1) g) 10))) (let ((.cse14 (<= .cse17 0))) (let ((.cse12 (not .cse14))) (let ((.cse2 (=> .cse1 .cse12))) (res .cse2 (=>+ 0 .cse2) (let ((.cse24 (and (= g 15) (= (ControlFlow 0 3) 2)))) (let ((.cse3 (=> .cse24 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse25 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse25 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse19 (- 0 1))) (let ((.cse18 (= .cse23 .cse19)) (.cse13 (< g 10))) (let ((.cse10 (=> .cse18 .cse13))) (let ((.cse9 (=> .cse24 .cse10))) (let ((.cse5 (=> .cse25 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (let ((.cse11 (= .cse13 .cse12))) (res .cse11 (res .cse12 (res .cse13 (=+1 .cse11) (res .cse14 (not+ .cse12) (farkas 1 .cse13 1 .cse14))) (res .cse13 (let ((.cse15 (<= 10 g))) (res .cse15 (total 10 g) (res .cse14 (let ((.cse16 (< 0 .cse17))) (res .cse16 (total .cse17 0) (farkas 1 .cse15 1 .cse16))) (not- .cse12)))) (=+2 .cse11))) (res (= .cse18 .cse1) (res (= .cse19 (- 1)) (let ((.cse20 (* (- 1) 1))) (res (= .cse20 (- 1)) (poly* .cse20 (- 1)) (res (= 0 0) (refl 0) (let ((.cse21 (+ 0 .cse20)) (.cse22 (+ 0 (- 1)))) (res (= .cse21 .cse22) (cong (+ 0 .cse20) (+ 0 (- 1))) (res (= .cse19 .cse21) (-def 0 1) (res (= .cse22 (- 1)) (poly+ .cse22 (- 1)) (trans .cse19 .cse21 .cse22 (- 1))))))))) (res (= .cse23 .cse23) (refl .cse23) (cong (= .cse23 .cse19) (= .cse23 (- 1))))) (cong (=> .cse18 .cse13) (=> .cse1 .cse12))))) (res (= .cse24 .cse24) (refl .cse24) (cong (=> .cse24 .cse10) (=> .cse24 .cse2)))) (res (= .cse25 .cse25) (refl .cse25) (cong (=> .cse25 .cse9) (=> .cse25 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7)))))))))))))))))))) (res .cse26 .cse27 (=-2 .cse26))) :proves (+ .cse0) :input) (! (let ((.cse29 (not .cse1))) (res .cse1 (let ((.cse28 (not .cse0))) (res .cse28 (res .cse29 (not+ .cse29) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (res .cse26 .cse27 (cong (not .cse1) (not .cse0))) (=-2 .cse30)))) (not- .cse28))) (res .cse29 (assume .cse29) (not- .cse29)))) :proves (- .cse0) :input)))))) :proves () :rup)

