unsat
(! (let ((.cse4 (not A)) (.cse21 (ControlFlow 0 2))) (let ((.cse16 (= .cse21 (- 1))) (.cse5 (or A P)) (.cse0 (=> .cse4 P))) (let ((.cse1 (and .cse0 (= (ControlFlow 0 3) 2))) (.cse7 (=> .cse16 .cse5))) (let ((.cse2 (=> .cse1 .cse7))) (let-proof ((.cse3 (let ((.cse22 (= (ControlFlow 0 0) 3))) (let ((.cse8 (=> .cse22 .cse2))) (res .cse8 (=>+ 1 .cse8) (let ((.cse17 (- 0 1))) (let ((.cse15 (= .cse21 .cse17))) (let ((.cse14 (=> .cse15 .cse5))) (let ((.cse13 (=> .cse1 .cse14))) (let ((.cse9 (=> .cse22 .cse13))) (let ((.cse11 (not .cse9))) (res .cse9 (let ((.cse10 (not .cse8))) (res .cse10 (res .cse11 (not+ .cse11) (let ((.cse12 (= .cse11 .cse10))) (res .cse12 (res (= .cse9 .cse8) (res (= .cse13 .cse2) (res (= .cse14 .cse7) (res (= .cse5 .cse5) (refl .cse5) (res (= .cse15 .cse16) (res (= .cse17 (- 1)) (let ((.cse18 (* (- 1) 1))) (res (= .cse18 (- 1)) (poly* .cse18 (- 1)) (res (= 0 0) (refl 0) (let ((.cse19 (+ 0 .cse18)) (.cse20 (+ 0 (- 1)))) (res (= .cse19 .cse20) (cong (+ 0 .cse18) (+ 0 (- 1))) (res (= .cse17 .cse19) (-def 0 1) (res (= .cse20 (- 1)) (poly+ .cse20 (- 1)) (trans .cse17 .cse19 .cse20 (- 1))))))))) (res (= .cse21 .cse21) (refl .cse21) (cong (= .cse21 .cse17) (= .cse21 (- 1))))) (cong (=> .cse15 .cse5) (=> .cse16 .cse5)))) (res (= .cse1 .cse1) (refl .cse1) (cong (=> .cse1 .cse14) (=> .cse1 .cse7)))) (res (= .cse22 .cse22) (refl .cse22) (cong (=> .cse22 .cse13) (=> .cse22 .cse2)))) (cong (not .cse9) (not .cse8))) (=-2 .cse12)))) (not- .cse10))) (res .cse11 (assume .cse11) (not- .cse11)))))))))))))) (let-proof ((.cse6 (res .cse7 (=>+ 1 .cse7) (res .cse2 (=>+ 1 .cse2) .cse3)))) (res P (res A (! (res .cse0 (res .cse1 (res .cse2 (=>+ 0 .cse2) .cse3) (and- 0 .cse1)) (res .cse4 (not+ .cse4) (=>- .cse0))) :proves (+ A + P) :input) (! (res .cse5 (or+ 0 .cse5) .cse6) :proves (- A) :input)) (! (res .cse5 (or+ 1 .cse5) .cse6) :proves (- P) :input)))))))) :proves () :rup)

