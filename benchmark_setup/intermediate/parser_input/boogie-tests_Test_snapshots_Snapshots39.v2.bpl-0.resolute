unsat
(! (let ((.cse60 (ControlFlow 0 2))) (let ((.cse4 (= call1formal@r@0 0)) (.cse51 (= .cse60 (- 1))) (.cse10 (= call1formal@r@0 903))) (let ((.cse9 (=> .cse51 .cse10)) (.cse65 (= .cse60 (- 3))) (.cse5 (not .cse4))) (let ((.cse3 (=> .cse65 .cse5)) (.cse8 (=> .cse5 .cse9))) (let ((.cse0 (= 903 call1formal@r@0)) (.cse16 (and .cse3 .cse8))) (let ((.cse7 (=> .cse10 .cse16)) (.cse14 (= .cse10 .cse0))) (let-proof ((.cse19 (symm call1formal@r@0 903))) (let-proof ((.cse15 (res .cse0 (res .cse10 (=+1 .cse14) (symm 903 call1formal@r@0)) (res .cse10 .cse19 (=+2 .cse14)))) (.cse17 (! (let ((.cse21 (=> true .cse7))) (res .cse21 (! (=>+ 1 .cse21) :proves (+ .cse21 - .cse7) :input) (! (let ((.cse92 (= .cse60 (- 4)))) (let ((.cse22 (=> .cse92 true))) (let-proof ((.cse23 true+)) (res .cse22 (! (res true .cse23 (=>+ 1 .cse22)) :proves (+ .cse22) :input) (! (let ((.cse24 (and .cse22 .cse21))) (res .cse24 (and+ .cse24) (let ((.cse103 (= (ControlFlow 0 5) 2))) (let ((.cse25 (=> .cse103 .cse24))) (res .cse25 (=>+ 1 .cse25) (let ((.cse104 (= (ControlFlow 0 0) 5))) (let ((.cse26 (=> .cse104 .cse25))) (res .cse26 (=>+ 1 .cse26) (let ((.cse47 (* 42 43))) (let ((.cse39 (div .cse47 2)) (.cse52 (- 0 1))) (let ((.cse66 (- 0 3)) (.cse50 (= .cse60 .cse52)) (.cse38 (= call1formal@r@0 .cse39)) (.cse73 (+ 42 1))) (let ((.cse72 (* 42 .cse73)) (.cse37 (=> .cse50 .cse38)) (.cse64 (= .cse60 .cse66))) (let ((.cse63 (=> .cse64 .cse5)) (.cse36 (=> .cse5 .cse37)) (.cse71 (div .cse72 2))) (let ((.cse93 (- 0 4)) (.cse70 (= call1formal@r@0 .cse71)) (.cse35 (and .cse63 .cse36))) (let ((.cse34 (=> .cse70 .cse35)) (.cse91 (= .cse60 .cse93)) (.cse89 (<= 0 42))) (let ((.cse90 (=> .cse91 .cse89)) (.cse33 (=> .cse89 .cse34))) (let ((.cse32 (and .cse90 .cse33))) (let ((.cse31 (=> .cse103 .cse32))) (let ((.cse27 (=> .cse104 .cse31))) (let ((.cse29 (not .cse27))) (res .cse27 (let ((.cse28 (not .cse26))) (res .cse28 (res .cse29 (not+ .cse29) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (res (= .cse27 .cse26) (res (= .cse31 .cse25) (res (= .cse32 .cse24) (let ((.cse87 (= .cse89 true)) (.cse54 (= 0 0)) (.cse58 (= .cse60 .cse60))) (let-proof ((.cse88 (let ((.cse98 (<= (- 42) 0))) (let ((.cse97 (= .cse98 true)) (.cse99 (< 0 (- 42)))) (let-proof ((.cse100 (total (- 42) 0))) (res .cse97 (res true .cse23 (res .cse98 (res .cse99 .cse100 (farkas 1 .cse99)) (=+2 .cse97))) (let ((.cse101 (= .cse89 .cse98))) (res .cse101 (res .cse98 (res .cse89 (=+1 .cse101) (res .cse99 .cse100 (farkas 1 .cse89 1 .cse99))) (res .cse89 (let ((.cse102 (< 42 0))) (res .cse102 (total 0 42) (farkas 1 .cse102 1 .cse98))) (=+2 .cse101))) (trans .cse89 .cse98 true)))))))) (.cse55 (refl 0)) (.cse59 (refl .cse60))) (res (= .cse33 .cse21) (res (= .cse34 .cse7) (let ((.cse42 (div 1806 2))) (let ((.cse40 (= .cse42 903)) (.cse43 (= 2 2)) (.cse45 (= .cse47 1806)) (.cse48 (= call1formal@r@0 call1formal@r@0))) (let-proof ((.cse41 (let ((.cse74 (= 2 0))) (res .cse74 (let ((.cse86 (* 2 .cse42))) (let ((.cse75 (<= .cse86 1806))) (res .cse75 (div-low 1806 2) (let ((.cse78 (abs 2))) (let ((.cse76 (< 1806 (+ .cse86 .cse78)))) (res .cse76 (div-high 1806 2) (let ((.cse77 (= .cse78 2))) (res .cse77 (let ((.cse80 (< 2 0))) (let ((.cse79 (ite .cse80 (- 2) 2))) (res (= .cse78 .cse79) (expand (abs 2)) (res .cse80 (res (= .cse79 2) (ite2 .cse79) (trans .cse78 .cse79 2)) (farkas 1 .cse80))))) (let ((.cse84 (+ .cse42 (- 903)))) (let ((.cse81 (<= .cse84 (- 1)))) (res .cse81 (let ((.cse82 (< 903 .cse42))) (res .cse82 (let ((.cse83 (<= 0 .cse84))) (res .cse83 (total-int .cse84 (- 1)) (let ((.cse85 (< .cse42 903))) (res .cse85 (trichotomy .cse42 903) (farkas 1 .cse85 1 .cse83))))) (farkas 1 .cse75 2 .cse82))) (farkas 1 .cse76 2 .cse81 1 .cse77)))))))))))) (farkas 1 .cse74)))) (.cse44 (refl 2)) (.cse46 (poly* .cse47 1806)) (.cse49 (refl call1formal@r@0))) (res (= .cse35 .cse16) (let ((.cse61 (= .cse5 .cse5))) (let-proof ((.cse62 (refl .cse5))) (res (= .cse36 .cse8) (res (= .cse37 .cse9) (res (= .cse38 .cse10) (res (= .cse39 903) (res .cse40 .cse41 (res (= .cse39 .cse42) (res .cse43 .cse44 (res .cse45 .cse46 (cong (div .cse47 2) (div 1806 2)))) (trans .cse39 .cse42 903))) (res .cse48 .cse49 (cong (= call1formal@r@0 .cse39) (= call1formal@r@0 903)))) (res (= .cse50 .cse51) (res (= .cse52 (- 1)) (let ((.cse53 (* (- 1) 1))) (res (= .cse53 (- 1)) (poly* .cse53 (- 1)) (res .cse54 .cse55 (let ((.cse56 (+ 0 .cse53)) (.cse57 (+ 0 (- 1)))) (res (= .cse56 .cse57) (cong (+ 0 .cse53) (+ 0 (- 1))) (res (= .cse52 .cse56) (-def 0 1) (res (= .cse57 (- 1)) (poly+ .cse57 (- 1)) (trans .cse52 .cse56 .cse57 (- 1))))))))) (res .cse58 .cse59 (cong (= .cse60 .cse52) (= .cse60 (- 1))))) (cong (=> .cse50 .cse38) (=> .cse51 .cse10)))) (res .cse61 .cse62 (cong (=> .cse5 .cse37) (=> .cse5 .cse9)))) (res (= .cse63 .cse3) (res .cse61 .cse62 (res (= .cse64 .cse65) (res (= .cse66 (- 3)) (let ((.cse67 (* (- 1) 3))) (res (= .cse67 (- 3)) (poly* .cse67 (- 3)) (res .cse54 .cse55 (let ((.cse68 (+ 0 .cse67)) (.cse69 (+ 0 (- 3)))) (res (= .cse68 .cse69) (cong (+ 0 .cse67) (+ 0 (- 3))) (res (= .cse66 .cse68) (-def 0 3) (res (= .cse69 (- 3)) (poly+ .cse69 (- 3)) (trans .cse66 .cse68 .cse69 (- 3))))))))) (res .cse58 .cse59 (cong (= .cse60 .cse66) (= .cse60 (- 3))))) (cong (=> .cse64 .cse5) (=> .cse65 .cse5)))) (cong (and .cse63 .cse36) (and .cse3 .cse8)))))) (res (= .cse70 .cse10) (res (= .cse71 903) (res .cse40 .cse41 (res (= .cse71 .cse42) (res .cse43 .cse44 (res (= .cse72 1806) (res .cse45 .cse46 (res (= .cse72 .cse47) (res (= .cse73 43) (poly+ .cse73 43) (res (= 42 42) (refl 42) (cong (* 42 .cse73) (* 42 43)))) (trans .cse72 .cse47 1806))) (cong (div .cse72 2) (div 1806 2)))) (trans .cse71 .cse42 903))) (res .cse48 .cse49 (cong (= call1formal@r@0 .cse71) (= call1formal@r@0 903)))) (cong (=> .cse70 .cse35) (=> .cse10 .cse16))))))) (res .cse87 .cse88 (cong (=> .cse89 .cse34) (=> true .cse7)))) (res (= .cse90 .cse22) (res .cse87 .cse88 (res (= .cse91 .cse92) (res (= .cse93 (- 4)) (let ((.cse94 (* (- 1) 4))) (res (= .cse94 (- 4)) (poly* .cse94 (- 4)) (res .cse54 .cse55 (let ((.cse95 (+ 0 .cse94)) (.cse96 (+ 0 (- 4)))) (res (= .cse95 .cse96) (cong (+ 0 .cse94) (+ 0 (- 4))) (res (= .cse93 .cse95) (-def 0 4) (res (= .cse96 (- 4)) (poly+ .cse96 (- 4)) (trans .cse93 .cse95 .cse96 (- 4))))))))) (res .cse58 .cse59 (cong (= .cse60 .cse93) (= .cse60 (- 4))))) (cong (=> .cse91 .cse89) (=> .cse92 true)))) (cong (and .cse90 .cse33) (and .cse22 .cse21)))))) (res (= .cse103 .cse103) (refl .cse103) (cong (=> .cse103 .cse32) (=> .cse103 .cse24)))) (res (= .cse104 .cse104) (refl .cse104) (cong (=> .cse104 .cse31) (=> .cse104 .cse25)))) (cong (not .cse27) (not .cse26))) (=-2 .cse30)))) (not- .cse28))) (res .cse29 (assume .cse29) (not- .cse29))))))))))))))))))))))) :proves (- .cse22 - .cse21) :input))))) :proves (- .cse21) :rup))) :proves (- .cse7) :rup))) (let-proof ((.cse1 (! (res .cse7 (! (res .cse10 (=>+ 0 .cse7) (res .cse14 .cse15 (=-2 .cse14))) :proves (+ .cse7 + .cse0) :input) .cse17) :proves (+ .cse0) :rup))) (res .cse0 .cse1 (let ((.cse2 (= 0 call1formal@r@0))) (res .cse2 (! (res .cse3 (! (res .cse4 (res .cse5 (not+ .cse5) (=>+ 1 .cse3)) (let ((.cse6 (= .cse4 .cse2))) (res .cse6 (res .cse2 (res .cse4 (=+1 .cse6) (symm 0 call1formal@r@0)) (res .cse4 (symm call1formal@r@0 0) (=+2 .cse6))) (=-2 .cse6)))) :proves (+ .cse3 + .cse2) :input) (! (res .cse7 (res .cse8 (! (res .cse9 (! (res .cse0 .cse1 (! (res .cse10 (let ((.cse11 (not .cse0))) (res .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res .cse14 .cse15 (cong (not .cse10) (not .cse0))) (=-2 .cse13))))) (not- .cse11))) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse0) :input)) :proves (+ .cse9) :rup) (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse9) :input)) :proves (+ .cse8) :rup) (! (res .cse16 (and+ .cse16) (=>+ 1 .cse7)) :proves (- .cse8 - .cse3 + .cse7) :input)) .cse17) :proves (- .cse3) :rup)) :proves (+ .cse2) :rup) (let ((.cse18 (= 0 903))) (res .cse18 (! (res .cse10 .cse19 (trans 0 call1formal@r@0 903)) :proves (+ .cse18 - .cse2 - .cse0) :trans (0 call1formal@r@0 903)) (! (let ((.cse20 (= 903 0))) (res .cse20 (symm 903 0) (farkas 1 .cse20))) :proves (- .cse18) :EQ))))))))))))))) :proves () :rup)

