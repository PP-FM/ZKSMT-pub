unsat
(! (let ((.cse33 (ControlFlow 0 4))) (let ((.cse28 (= .cse33 (- 3)))) (let ((.cse34 (= (ControlFlow 0 5) 4)) (.cse5 (=> .cse28 true)) (.cse41 (<= x2 0)) (.cse37 (= (ControlFlow 0 6) 5))) (let ((.cse36 (and .cse41 .cse37)) (.cse4 (=> .cse34 .cse5)) (.cse51 (ControlFlow 0 7))) (let ((.cse42 (= .cse51 6)) (.cse3 (=> .cse36 .cse4))) (let ((.cse7 (=> (= .cse51 2) true)) (.cse2 (=> .cse42 .cse3)) (.cse45 (= (ControlFlow 0 8) 7))) (let ((.cse44 (and .cse41 .cse45)) (.cse8 (and .cse7 .cse2)) (.cse50 (ControlFlow 0 9))) (let ((.cse48 (= .cse50 8)) (.cse1 (=> .cse44 .cse8))) (let ((.cse0 (=> .cse48 .cse1))) (let-proof ((.cse6 true+)) (res .cse0 (! (res .cse1 (! (res .cse2 (! (res .cse3 (! (res .cse4 (! (res .cse5 (! (res true .cse6 (=>+ 1 .cse5)) :proves (+ .cse5) :input) (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse5) :input)) :proves (+ .cse4) :rup) (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse4) :input)) :proves (+ .cse3) :rup) (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse3) :input)) :proves (+ .cse2) :rup) (res .cse7 (! (res true .cse6 (=>+ 1 .cse7)) :proves (+ .cse7) :input) (! (res .cse8 (and+ .cse8) (=>+ 1 .cse1)) :proves (+ .cse1 - .cse7 - .cse2) :input))) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse9 (=> (= .cse50 1) true))) (res .cse9 (! (res true .cse6 (=>+ 1 .cse9)) :proves (+ .cse9) :input) (! (let ((.cse10 (and .cse9 .cse0))) (res .cse10 (and+ .cse10) (let ((.cse49 (= (ControlFlow 0 0) 9))) (let ((.cse11 (=> .cse49 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse29 (- 0 3))) (let ((.cse27 (= .cse33 .cse29)) (.cse25 (= 0 0))) (let ((.cse23 (=> .cse27 .cse25)) (.cse40 (>= 0 x2))) (let ((.cse35 (and .cse40 .cse37)) (.cse22 (=> .cse34 .cse23))) (let ((.cse21 (=> .cse35 .cse22))) (let ((.cse20 (=> .cse42 .cse21))) (let ((.cse43 (and .cse40 .cse45)) (.cse19 (and .cse7 .cse20))) (let ((.cse18 (=> .cse43 .cse19))) (let ((.cse17 (=> .cse48 .cse18))) (let ((.cse16 (and .cse9 .cse17))) (let ((.cse12 (=> .cse49 .cse16))) (let ((.cse14 (not .cse12))) (res .cse12 (let ((.cse13 (not .cse11))) (res .cse13 (res .cse14 (not+ .cse14) (let ((.cse15 (= .cse14 .cse13))) (res .cse15 (res (= .cse12 .cse11) (res (= .cse16 .cse10) (res (= .cse17 .cse0) (res (= .cse18 .cse1) (let ((.cse38 (= .cse40 .cse41))) (let-proof ((.cse39 (res .cse38 (>=def 0 x2) (let ((.cse46 (< 0 x2))) (let-proof ((.cse47 (total x2 0))) (res .cse41 (res .cse40 (=+1 .cse38) (res .cse41 (=-2 .cse38) (res .cse46 .cse47 (farkas 1 .cse41 1 .cse46)))) (res .cse40 (res .cse41 (res .cse46 .cse47 (farkas 1 .cse46 1 .cse41)) (=-1 .cse38)) (=+2 .cse38)))))))) (res (= .cse19 .cse8) (res (= .cse20 .cse2) (res (= .cse21 .cse3) (res (= .cse22 .cse4) (res (= .cse23 .cse5) (let ((.cse24 (= .cse25 true))) (let-proof ((.cse26 (refl 0))) (res .cse24 (res true .cse6 (res .cse25 .cse26 (=+2 .cse24))) (res (= .cse27 .cse28) (res (= .cse29 (- 3)) (let ((.cse30 (* (- 1) 3))) (res (= .cse30 (- 3)) (poly* .cse30 (- 3)) (res .cse25 .cse26 (let ((.cse31 (+ 0 .cse30)) (.cse32 (+ 0 (- 3)))) (res (= .cse31 .cse32) (cong (+ 0 .cse30) (+ 0 (- 3))) (res (= .cse29 .cse31) (-def 0 3) (res (= .cse32 (- 3)) (poly+ .cse32 (- 3)) (trans .cse29 .cse31 .cse32 (- 3))))))))) (res (= .cse33 .cse33) (refl .cse33) (cong (= .cse33 .cse29) (= .cse33 (- 3))))) (cong (=> .cse27 .cse25) (=> .cse28 true)))))) (res (= .cse34 .cse34) (refl .cse34) (cong (=> .cse34 .cse23) (=> .cse34 .cse5)))) (res (= .cse35 .cse36) (res (= .cse37 .cse37) (refl .cse37) (res .cse38 .cse39 (cong (and .cse40 .cse37) (and .cse41 .cse37)))) (cong (=> .cse35 .cse22) (=> .cse36 .cse4)))) (res (= .cse42 .cse42) (refl .cse42) (cong (=> .cse42 .cse21) (=> .cse42 .cse3)))) (res (= .cse7 .cse7) (refl .cse7) (cong (and .cse7 .cse20) (and .cse7 .cse2)))) (res (= .cse43 .cse44) (res (= .cse45 .cse45) (refl .cse45) (res .cse38 .cse39 (cong (and .cse40 .cse45) (and .cse41 .cse45)))) (cong (=> .cse43 .cse19) (=> .cse44 .cse8)))))) (res (= .cse48 .cse48) (refl .cse48) (cong (=> .cse48 .cse18) (=> .cse48 .cse1)))) (res (= .cse9 .cse9) (refl .cse9) (cong (and .cse9 .cse17) (and .cse9 .cse0)))) (res (= .cse49 .cse49) (refl .cse49) (cong (=> .cse49 .cse16) (=> .cse49 .cse10)))) (cong (not .cse12) (not .cse11))) (=-2 .cse15)))) (not- .cse13))) (res .cse14 (assume .cse14) (not- .cse14)))))))))))))))))))) :proves (- .cse9 - .cse0) :input)))))))))))))) :proves () :rup)

