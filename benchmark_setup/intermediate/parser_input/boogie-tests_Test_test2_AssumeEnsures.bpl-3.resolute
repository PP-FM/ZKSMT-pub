unsat
(! (let ((.cse31 (+ g (- 10)))) (let ((.cse14 (<= .cse31 0)) (.cse38 (ControlFlow 0 2))) (let ((.cse33 (= .cse38 (- 1))) (.cse16 (not .cse14)) (.cse1 (= g 15))) (let ((.cse2 (and .cse1 (= (ControlFlow 0 3) 2))) (.cse15 (=> .cse33 .cse16))) (let ((.cse9 (+ g (- 15))) (.cse3 (=> .cse2 .cse15))) (let-proof ((.cse17 (not+ .cse16))) (let ((.cse0 (= .cse9 0)) (.cse10 (= 0 .cse9))) (let-proof ((.cse4 (let ((.cse39 (= (ControlFlow 0 0) 3))) (let ((.cse18 (=> .cse39 .cse3))) (res .cse18 (=>+ 1 .cse18) (let ((.cse34 (- 0 1))) (let ((.cse32 (= .cse38 .cse34)) (.cse27 (> g 10))) (let ((.cse24 (=> .cse32 .cse27))) (let ((.cse23 (=> .cse2 .cse24))) (let ((.cse19 (=> .cse39 .cse23))) (let ((.cse21 (not .cse19))) (res .cse19 (let ((.cse20 (not .cse18))) (res .cse20 (res .cse21 (not+ .cse21) (let ((.cse22 (= .cse21 .cse20))) (res .cse22 (res (= .cse19 .cse18) (res (= .cse23 .cse3) (res (= .cse24 .cse15) (let ((.cse25 (= .cse27 .cse16))) (res .cse25 (let ((.cse28 (< 10 g))) (let ((.cse26 (= .cse27 .cse28))) (res .cse26 (>def g 10) (res .cse16 (res .cse27 (=+1 .cse25) (res .cse28 (=-2 .cse26) (res .cse14 .cse17 (farkas 1 .cse28 1 .cse14)))) (res .cse27 (res .cse28 (let ((.cse29 (<= g 10))) (res .cse29 (total g 10) (res .cse14 (let ((.cse30 (< 0 .cse31))) (res .cse30 (total .cse31 0) (farkas 1 .cse29 1 .cse30))) (not- .cse16)))) (=-1 .cse26)) (=+2 .cse25)))))) (res (= .cse32 .cse33) (res (= .cse34 (- 1)) (let ((.cse35 (* (- 1) 1))) (res (= .cse35 (- 1)) (poly* .cse35 (- 1)) (res (= 0 0) (refl 0) (let ((.cse36 (+ 0 .cse35)) (.cse37 (+ 0 (- 1)))) (res (= .cse36 .cse37) (cong (+ 0 .cse35) (+ 0 (- 1))) (res (= .cse34 .cse36) (-def 0 1) (res (= .cse37 (- 1)) (poly+ .cse37 (- 1)) (trans .cse34 .cse36 .cse37 (- 1))))))))) (res (= .cse38 .cse38) (refl .cse38) (cong (= .cse38 .cse34) (= .cse38 (- 1))))) (cong (=> .cse32 .cse27) (=> .cse33 .cse16))))) (res (= .cse2 .cse2) (refl .cse2) (cong (=> .cse2 .cse24) (=> .cse2 .cse15)))) (res (= .cse39 .cse39) (refl .cse39) (cong (=> .cse39 .cse23) (=> .cse39 .cse3)))) (cong (not .cse19) (not .cse18))) (=-2 .cse22)))) (not- .cse20))) (res .cse21 (assume .cse21) (not- .cse21))))))))))))) (.cse11 (symm 0 .cse9))) (res .cse0 (! (res .cse1 (res .cse2 (res .cse3 (=>+ 0 .cse3) .cse4) (and- 0 .cse2)) (let ((.cse5 (= .cse1 .cse0))) (res .cse5 (res .cse0 (res .cse1 (=+1 .cse5) (let ((.cse6 (= 15 g))) (res .cse6 (symm 15 g) (let ((.cse7 (< .cse9 0))) (res .cse7 (let ((.cse8 (< 0 .cse9))) (res .cse8 (trichotomy .cse9 0) (farkas 1 .cse1 1 .cse8))) (farkas 1 .cse6 1 .cse7)))))) (res .cse1 (res .cse10 .cse11 (let ((.cse12 (< g 15))) (res .cse12 (let ((.cse13 (< 15 g))) (res .cse13 (trichotomy g 15) (farkas 1 .cse0 1 .cse13))) (farkas 1 .cse10 1 .cse12)))) (=+2 .cse5))) (=-2 .cse5)))) :proves (+ .cse0) :input) (! (res .cse14 (! (res .cse15 (res .cse16 .cse17 (=>+ 1 .cse15)) (res .cse3 (=>+ 1 .cse3) .cse4)) :proves (+ .cse14) :input) (! (res .cse10 .cse11 (farkas 1 .cse10 1 .cse14)) :proves (- .cse0 - .cse14) :LA ((- 1) 1))) :proves (- .cse0) :rup)))))))))) :proves () :rup)

