unsat
(! (let ((.cse156 (+ call1formal@r@0 (- 100))) (.cse230 (+ call0formal@n@0 (- 100)))) (let ((.cse279 (+ n (- 100))) (.cse131 (+ call0formal@n@0 (- 10))) (.cse123 (<= .cse230 0)) (.cse115 (+ call1formal@r@0 (- 10))) (.cse106 (<= .cse156 0))) (let ((.cse157 (= call1formal@r@0@@0 91)) (.cse111 (not .cse106)) (.cse109 (= call1formal@r@0@@0 .cse115)) (.cse97 (+ n 11)) (.cse146 (= call1formal@r@0 91)) (.cse127 (not .cse123)) (.cse125 (= call1formal@r@0 .cse131)) (.cse174 (= r@1 91)) (.cse262 (ControlFlow 0 2)) (.cse9 (+ n (- 10))) (.cse52 (<= .cse279 0))) (let ((.cse54 (not .cse52)) (.cse59 (= r@1 .cse9)) (.cse253 (= .cse262 (- 1))) (.cse71 (=> .cse52 .cse174)) (.cse126 (=> .cse127 .cse125)) (.cse147 (=> .cse123 .cse146)) (.cse94 (= call0formal@n@0 .cse97)) (.cse83 (= r@1 call1formal@r@0@@0)) (.cse110 (=> .cse111 .cse109)) (.cse158 (=> .cse106 .cse157))) (let ((.cse79 (and .cse110 .cse158)) (.cse78 (and .cse83 (= (ControlFlow 0 5) 2))) (.cse50 (and .cse52 .cse94)) (.cse80 (and .cse126 .cse147)) (.cse19 (= r@1 r@0)) (.cse6 (= r@0 .cse9)) (.cse70 (=> .cse253 .cse71)) (.cse268 (= .cse262 (- 3))) (.cse53 (=> .cse54 .cse59))) (let ((.cse68 (=> .cse268 .cse53)) (.cse69 (=> .cse53 .cse70)) (.cse2 (and .cse54 .cse6)) (.cse18 (and .cse19 (= (ControlFlow 0 4) 2))) (.cse48 (and .cse50 .cse80)) (.cse77 (and .cse79 .cse78))) (let ((.cse46 (and .cse48 .cse77)) (.cse3 (and .cse2 .cse18)) (.cse75 (and .cse68 .cse69)) (.cse281 (ControlFlow 0 6))) (let ((.cse248 (= .cse281 4)) (.cse40 (=> .cse3 .cse75)) (.cse236 (= .cse281 5)) (.cse45 (=> .cse46 .cse75))) (let ((.cse38 (* (- 1) r@1)) (.cse44 (=> .cse236 .cse45)) (.cse42 (=> .cse248 .cse40))) (let-proof ((.cse112 (not+ .cse111)) (.cse128 (not+ .cse127)) (.cse55 (not- .cse54))) (let ((.cse32 (+ n .cse38 (- 10)))) (let-proof ((.cse41 (! (=>+ 0 .cse40) :proves (+ .cse40 + .cse3) :input)) (.cse5 (! (and- 0 .cse3) :proves (- .cse3 + .cse2) :input)) (.cse43 (! (=>+ 1 .cse42) :proves (+ .cse42 - .cse40) :input)) (.cse47 (! (=>+ 0 .cse45) :proves (+ .cse45 + .cse46) :input)) (.cse49 (! (and- 0 .cse46) :proves (- .cse46 + .cse48) :input)) (.cse51 (! (and- 0 .cse48) :proves (- .cse48 + .cse50) :input)) (.cse57 (! (=>+ 1 .cse44) :proves (+ .cse44 - .cse45) :input)) (.cse58 (! (let ((.cse183 (and .cse42 .cse44))) (res .cse183 (and+ .cse183) (let ((.cse280 (= (ControlFlow 0 0) 6))) (let ((.cse184 (=> .cse280 .cse183))) (res .cse184 (=>+ 1 .cse184) (let ((.cse226 (- call0formal@n@0 10)) (.cse206 (- call1formal@r@0 10))) (let ((.cse199 (<= call1formal@r@0 100)) (.cse201 (< 100 call1formal@r@0)) (.cse205 (= call1formal@r@0@@0 .cse206)) (.cse219 (<= call0formal@n@0 100)) (.cse221 (< 100 call0formal@n@0)) (.cse225 (= call1formal@r@0 .cse226)) (.cse234 (<= n 100)) (.cse254 (- 0 1)) (.cse244 (- n 10))) (let ((.cse247 (< 100 n)) (.cse273 (= r@1 .cse244)) (.cse269 (- 0 3)) (.cse252 (= .cse262 .cse254)) (.cse251 (=> .cse234 .cse174)) (.cse224 (=> .cse221 .cse225)) (.cse217 (=> .cse219 .cse146)) (.cse204 (=> .cse201 .cse205)) (.cse197 (=> .cse199 .cse157))) (let ((.cse241 (= r@0 .cse244)) (.cse196 (and .cse204 .cse197)) (.cse231 (and .cse234 .cse94)) (.cse216 (and .cse224 .cse217)) (.cse250 (=> .cse252 .cse251)) (.cse267 (= .cse262 .cse269)) (.cse265 (=> .cse247 .cse273))) (let ((.cse266 (=> .cse267 .cse265)) (.cse249 (=> .cse265 .cse250)) (.cse215 (and .cse231 .cse216)) (.cse195 (and .cse196 .cse78)) (.cse240 (and .cse247 .cse241))) (let ((.cse239 (and .cse240 .cse18)) (.cse194 (and .cse215 .cse195)) (.cse235 (and .cse266 .cse249))) (let ((.cse191 (=> .cse194 .cse235)) (.cse238 (=> .cse239 .cse235))) (let ((.cse237 (=> .cse248 .cse238)) (.cse190 (=> .cse236 .cse191))) (let ((.cse189 (and .cse237 .cse190))) (let ((.cse185 (=> .cse280 .cse189))) (let ((.cse187 (not .cse185))) (res .cse185 (let ((.cse186 (not .cse184))) (res .cse186 (res .cse187 (not+ .cse187) (let ((.cse188 (= .cse187 .cse186))) (res .cse188 (res (= .cse185 .cse184) (res (= .cse189 .cse183) (let ((.cse212 (* (- 1) 10))) (let ((.cse245 (= .cse247 .cse54)) (.cse207 (= .cse212 (- 10))) (.cse232 (= .cse234 .cse52))) (let-proof ((.cse208 (poly* .cse212 (- 10))) (.cse276 (let ((.cse278 (< 0 .cse279))) (res .cse278 (total .cse279 0) (farkas 1 .cse234 1 .cse278)))) (.cse275 (total n 100)) (.cse274 (farkas 1 .cse247 1 .cse52))) (let ((.cse242 (= .cse244 .cse9))) (let-proof ((.cse233 (res .cse52 (res .cse234 (=+1 .cse232) .cse276) (res .cse234 (res .cse247 .cse275 .cse274) (=+2 .cse232)))) (.cse243 (res .cse207 .cse208 (res (= n n) (refl n) (let ((.cse277 (+ n .cse212))) (res (= .cse277 .cse9) (cong (+ n .cse212) (+ n (- 10))) (res (= .cse244 .cse277) (-def n 10) (trans .cse244 .cse277 .cse9))))))) (.cse246 (res .cse54 (res .cse247 (=+1 .cse245) (res .cse52 (not+ .cse54) .cse274)) (res .cse247 (res .cse234 .cse275 (res .cse52 .cse276 .cse55)) (=+2 .cse245))))) (let ((.cse192 (= .cse235 .cse75))) (let-proof ((.cse193 (let ((.cse263 (= .cse265 .cse53)) (.cse256 (= 0 0)) (.cse260 (= .cse262 .cse262))) (let-proof ((.cse264 (res (= .cse273 .cse59) (res .cse242 .cse243 (res (= r@1 r@1) (refl r@1) (cong (= r@1 .cse244) (= r@1 .cse9)))) (res .cse245 .cse246 (cong (=> .cse247 .cse273) (=> .cse54 .cse59))))) (.cse257 (refl 0)) (.cse261 (refl .cse262))) (res (= .cse249 .cse69) (res (= .cse250 .cse70) (res (= .cse251 .cse71) (res (= .cse174 .cse174) (refl .cse174) (res .cse232 .cse233 (cong (=> .cse234 .cse174) (=> .cse52 .cse174)))) (res (= .cse252 .cse253) (res (= .cse254 (- 1)) (let ((.cse255 (* (- 1) 1))) (res (= .cse255 (- 1)) (poly* .cse255 (- 1)) (res .cse256 .cse257 (let ((.cse258 (+ 0 .cse255)) (.cse259 (+ 0 (- 1)))) (res (= .cse258 .cse259) (cong (+ 0 .cse255) (+ 0 (- 1))) (res (= .cse254 .cse258) (-def 0 1) (res (= .cse259 (- 1)) (poly+ .cse259 (- 1)) (trans .cse254 .cse258 .cse259 (- 1))))))))) (res .cse260 .cse261 (cong (= .cse262 .cse254) (= .cse262 (- 1))))) (cong (=> .cse252 .cse251) (=> .cse253 .cse71)))) (res .cse263 .cse264 (cong (=> .cse265 .cse250) (=> .cse53 .cse70)))) (res (= .cse266 .cse68) (res .cse263 .cse264 (res (= .cse267 .cse268) (res (= .cse269 (- 3)) (let ((.cse270 (* (- 1) 3))) (res (= .cse270 (- 3)) (poly* .cse270 (- 3)) (res .cse256 .cse257 (let ((.cse271 (+ 0 .cse270)) (.cse272 (+ 0 (- 3)))) (res (= .cse271 .cse272) (cong (+ 0 .cse270) (+ 0 (- 3))) (res (= .cse269 .cse271) (-def 0 3) (res (= .cse272 (- 3)) (poly+ .cse272 (- 3)) (trans .cse269 .cse271 .cse272 (- 3))))))))) (res .cse260 .cse261 (cong (= .cse262 .cse269) (= .cse262 (- 3))))) (cong (=> .cse267 .cse265) (=> .cse268 .cse53)))) (cong (and .cse266 .cse249) (and .cse68 .cse69)))))))) (res (= .cse190 .cse44) (res (= .cse191 .cse45) (res .cse192 .cse193 (res (= .cse194 .cse46) (let ((.cse209 (= call1formal@r@0 call1formal@r@0))) (let-proof ((.cse210 (refl call1formal@r@0))) (res (= .cse195 .cse77) (res (= .cse78 .cse78) (refl .cse78) (res (= .cse196 .cse79) (let-proof ((.cse203 (farkas 1 .cse201 1 .cse106)) (.cse202 (total call1formal@r@0 100)) (.cse200 (let ((.cse214 (< 0 .cse156))) (res .cse214 (total .cse156 0) (farkas 1 .cse199 1 .cse214))))) (res (= .cse197 .cse158) (res (= .cse157 .cse157) (refl .cse157) (let ((.cse198 (= .cse199 .cse106))) (res .cse198 (res .cse106 (res .cse199 (=+1 .cse198) .cse200) (res .cse199 (res .cse201 .cse202 .cse203) (=+2 .cse198))) (cong (=> .cse199 .cse157) (=> .cse106 .cse157))))) (res (= .cse204 .cse110) (res (= .cse205 .cse109) (res (= .cse206 .cse115) (res .cse207 .cse208 (res .cse209 .cse210 (let ((.cse211 (+ call1formal@r@0 .cse212))) (res (= .cse211 .cse115) (cong (+ call1formal@r@0 .cse212) (+ call1formal@r@0 (- 10))) (res (= .cse206 .cse211) (-def call1formal@r@0 10) (trans .cse206 .cse211 .cse115)))))) (res (= call1formal@r@0@@0 call1formal@r@0@@0) (refl call1formal@r@0@@0) (cong (= call1formal@r@0@@0 .cse206) (= call1formal@r@0@@0 .cse115)))) (let ((.cse213 (= .cse201 .cse111))) (res .cse213 (res .cse111 (res .cse201 (=+1 .cse213) (res .cse106 .cse112 .cse203)) (res .cse201 (res .cse199 .cse202 (res .cse106 .cse200 (not- .cse111))) (=+2 .cse213))) (cong (=> .cse201 .cse205) (=> .cse111 .cse109))))) (cong (and .cse204 .cse197) (and .cse110 .cse158))))) (cong (and .cse196 .cse78) (and .cse79 .cse78)))) (res (= .cse215 .cse48) (res (= .cse216 .cse80) (let-proof ((.cse223 (farkas 1 .cse221 1 .cse123)) (.cse222 (total call0formal@n@0 100)) (.cse220 (let ((.cse229 (< 0 .cse230))) (res .cse229 (total .cse230 0) (farkas 1 .cse219 1 .cse229))))) (res (= .cse217 .cse147) (res (= .cse146 .cse146) (refl .cse146) (let ((.cse218 (= .cse219 .cse123))) (res .cse218 (res .cse123 (res .cse219 (=+1 .cse218) .cse220) (res .cse219 (res .cse221 .cse222 .cse223) (=+2 .cse218))) (cong (=> .cse219 .cse146) (=> .cse123 .cse146))))) (res (= .cse224 .cse126) (res (= .cse225 .cse125) (res (= .cse226 .cse131) (res .cse207 .cse208 (res (= call0formal@n@0 call0formal@n@0) (refl call0formal@n@0) (let ((.cse227 (+ call0formal@n@0 .cse212))) (res (= .cse227 .cse131) (cong (+ call0formal@n@0 .cse212) (+ call0formal@n@0 (- 10))) (res (= .cse226 .cse227) (-def call0formal@n@0 10) (trans .cse226 .cse227 .cse131)))))) (res .cse209 .cse210 (cong (= call1formal@r@0 .cse226) (= call1formal@r@0 .cse131)))) (let ((.cse228 (= .cse221 .cse127))) (res .cse228 (res .cse127 (res .cse221 (=+1 .cse228) (res .cse123 .cse128 .cse223)) (res .cse221 (res .cse219 .cse222 (res .cse123 .cse220 (not- .cse127))) (=+2 .cse228))) (cong (=> .cse221 .cse225) (=> .cse127 .cse125))))) (cong (and .cse224 .cse217) (and .cse126 .cse147))))) (res (= .cse231 .cse50) (res (= .cse94 .cse94) (refl .cse94) (res .cse232 .cse233 (cong (and .cse234 .cse94) (and .cse52 .cse94)))) (cong (and .cse231 .cse216) (and .cse50 .cse80)))) (cong (and .cse215 .cse195) (and .cse48 .cse77)))))) (cong (=> .cse194 .cse235) (=> .cse46 .cse75)))) (res (= .cse236 .cse236) (refl .cse236) (cong (=> .cse236 .cse191) (=> .cse236 .cse45)))) (res (= .cse237 .cse42) (res (= .cse238 .cse40) (res .cse192 .cse193 (res (= .cse239 .cse3) (res (= .cse18 .cse18) (refl .cse18) (res (= .cse240 .cse2) (res (= .cse241 .cse6) (res .cse242 .cse243 (res (= r@0 r@0) (refl r@0) (cong (= r@0 .cse244) (= r@0 .cse9)))) (res .cse245 .cse246 (cong (and .cse247 .cse241) (and .cse54 .cse6)))) (cong (and .cse240 .cse18) (and .cse2 .cse18)))) (cong (=> .cse239 .cse235) (=> .cse3 .cse75)))) (res (= .cse248 .cse248) (refl .cse248) (cong (=> .cse248 .cse238) (=> .cse248 .cse40)))) (cong (and .cse237 .cse190) (and .cse42 .cse44))))))))))) (res (= .cse280 .cse280) (refl .cse280) (cong (=> .cse280 .cse189) (=> .cse280 .cse183)))) (cong (not .cse185) (not .cse184))) (=-2 .cse188)))) (not- .cse186))) (res .cse187 (assume .cse187) (not- .cse187))))))))))))))))))) :proves (- .cse42 - .cse44) :input))) (let ((.cse34 (< 0 .cse32)) (.cse33 (< .cse32 0)) (.cse0 (= .cse32 0))) (let-proof ((.cse35 (trichotomy .cse32 0)) (.cse56 (! (res .cse68 (! (=>+ 1 .cse68) :proves (+ .cse68 - .cse53) :input) (! (let-proof ((.cse72 (! (=>+ 0 .cse71) :proves (+ .cse71 + .cse52) :input)) (.cse73 (! (=>+ 1 .cse70) :proves (+ .cse70 - .cse71) :input)) (.cse74 (! (=>+ 1 .cse69) :proves (+ .cse69 - .cse70) :input)) (.cse76 (and+ .cse75))) (res .cse40 (! (res .cse69 (res .cse3 .cse41 (res .cse70 (res .cse2 .cse5 (res .cse71 (res .cse52 .cse72 (! (res .cse54 (and- 0 .cse2) .cse55) :proves (- .cse2 - .cse52) :input)) .cse73)) .cse74)) (! (res .cse75 .cse76 (=>+ 1 .cse40)) :proves (+ .cse40 - .cse68 - .cse69) :input)) :proves (+ .cse40 - .cse68) :rup) (res .cse42 .cse43 (res .cse44 (res .cse45 (res .cse69 (res .cse46 .cse47 (res .cse70 (res .cse77 (! (and- 1 .cse46) :proves (- .cse46 + .cse77) :input) (res .cse48 .cse49 (res .cse71 (res .cse78 (! (and- 1 .cse77) :proves (- .cse77 + .cse78) :input) (res .cse79 (! (and- 0 .cse77) :proves (- .cse77 + .cse79) :input) (res .cse80 (! (and- 1 .cse48) :proves (- .cse48 + .cse80) :input) (res .cse50 .cse51 (res .cse52 .cse72 (let ((.cse173 (+ r@1 (- 91)))) (let ((.cse169 (< 0 .cse173)) (.cse168 (< .cse173 0)) (.cse81 (= .cse173 0))) (let-proof ((.cse170 (trichotomy .cse173 0))) (res .cse81 (let ((.cse88 (+ r@1 (* (- 1) call1formal@r@0@@0)))) (let ((.cse82 (= .cse88 0)) (.cse89 (= 0 .cse88))) (let-proof ((.cse90 (symm 0 .cse88))) (res .cse82 (! (res .cse83 (and- 0 .cse78) (let ((.cse84 (= .cse83 .cse82))) (res .cse84 (res .cse82 (res .cse83 (=+1 .cse84) (let ((.cse85 (= call1formal@r@0@@0 r@1))) (res .cse85 (symm call1formal@r@0@@0 r@1) (let ((.cse86 (< .cse88 0))) (res .cse86 (let ((.cse87 (< 0 .cse88))) (res .cse87 (trichotomy .cse88 0) (farkas 1 .cse83 1 .cse87))) (farkas 1 .cse85 1 .cse86)))))) (res .cse83 (res .cse89 .cse90 (let ((.cse91 (< r@1 call1formal@r@0@@0))) (res .cse91 (let ((.cse92 (< call1formal@r@0@@0 r@1))) (res .cse92 (trichotomy r@1 call1formal@r@0@@0) (farkas 1 .cse82 1 .cse92))) (farkas 1 .cse89 1 .cse91)))) (=+2 .cse84))) (=-2 .cse84)))) :proves (- .cse78 + .cse82) :input) (let ((.cse145 (* (- 1) call0formal@n@0))) (let ((.cse100 (+ n .cse145 11))) (let ((.cse93 (= .cse100 0)) (.cse101 (= 0 .cse100))) (let-proof ((.cse102 (symm 0 .cse100))) (res .cse93 (! (res .cse94 (and- 1 .cse50) (let ((.cse95 (= .cse94 .cse93))) (res .cse95 (res .cse93 (res .cse94 (=+1 .cse95) (let ((.cse96 (= .cse97 call0formal@n@0))) (res .cse96 (symm .cse97 call0formal@n@0) (let ((.cse98 (< .cse100 0))) (res .cse98 (let ((.cse99 (< 0 .cse100))) (res .cse99 (trichotomy .cse100 0) (farkas 1 .cse96 1 .cse99))) (farkas 1 .cse94 1 .cse98)))))) (res .cse94 (res .cse101 .cse102 (let ((.cse103 (< call0formal@n@0 .cse97))) (res .cse103 (let ((.cse104 (< .cse97 call0formal@n@0))) (res .cse104 (trichotomy call0formal@n@0 .cse97) (farkas 1 .cse101 1 .cse104))) (farkas 1 .cse93 1 .cse103)))) (=+2 .cse95))) (=-2 .cse95)))) :proves (- .cse50 + .cse93) :input) (let ((.cse172 (+ r@1 (- 90)))) (let ((.cse163 (+ call1formal@r@0@@0 (- 91))) (.cse138 (<= .cse172 0)) (.cse139 (<= .cse173 0))) (let ((.cse140 (<= 1 .cse173)) (.cse105 (= .cse163 0)) (.cse164 (= 0 .cse163))) (let-proof ((.cse141 (total-int .cse173 0)) (.cse142 (! (res .cse168 (res .cse169 .cse170 (farkas 1 .cse169 1 .cse139)) (let ((.cse171 (<= 1 .cse172))) (res .cse171 (total-int .cse172 0) (farkas 1 .cse171 1 .cse168)))) :proves (- .cse139 + .cse81 + .cse138) :trichotomy)) (.cse165 (symm 0 .cse163))) (res .cse105 (res .cse106 (let ((.cse152 (+ call1formal@r@0 (- 91)))) (let ((.cse107 (= .cse152 0)) (.cse143 (<= 1 .cse156))) (let-proof ((.cse144 (total-int .cse156 0))) (res .cse107 (let ((.cse118 (+ call1formal@r@0@@0 (* (- 1) call1formal@r@0) 10))) (let ((.cse108 (= .cse118 0)) (.cse119 (= 0 .cse118))) (let-proof ((.cse120 (symm 0 .cse118))) (res .cse108 (! (res .cse109 (res .cse110 (and- 0 .cse79) (res .cse111 .cse112 (=>- .cse110))) (let ((.cse113 (= .cse109 .cse108))) (res .cse113 (res .cse108 (res .cse109 (=+1 .cse113) (let ((.cse114 (= .cse115 call1formal@r@0@@0))) (res .cse114 (symm .cse115 call1formal@r@0@@0) (let ((.cse116 (< .cse118 0))) (res .cse116 (let ((.cse117 (< 0 .cse118))) (res .cse117 (trichotomy .cse118 0) (farkas 1 .cse109 1 .cse117))) (farkas 1 .cse114 1 .cse116)))))) (res .cse109 (res .cse119 .cse120 (let ((.cse121 (< call1formal@r@0@@0 .cse115))) (res .cse121 (let ((.cse122 (< .cse115 call1formal@r@0@@0))) (res .cse122 (trichotomy call1formal@r@0@@0 .cse115) (farkas 1 .cse108 1 .cse122))) (farkas 1 .cse119 1 .cse121)))) (=+2 .cse113))) (=-2 .cse113)))) :proves (+ .cse108 + .cse106 - .cse79) :input) (res .cse123 (let ((.cse134 (+ call1formal@r@0 .cse145 10))) (let ((.cse124 (= .cse134 0))) (res .cse124 (! (res .cse125 (res .cse126 (and- 0 .cse80) (res .cse127 .cse128 (=>- .cse126))) (let ((.cse129 (= .cse125 .cse124))) (res .cse129 (res .cse124 (res .cse125 (=+1 .cse129) (let ((.cse130 (= .cse131 call1formal@r@0))) (res .cse130 (symm .cse131 call1formal@r@0) (let ((.cse132 (< .cse134 0))) (res .cse132 (let ((.cse133 (< 0 .cse134))) (res .cse133 (trichotomy .cse134 0) (farkas 1 .cse125 1 .cse133))) (farkas 1 .cse130 1 .cse132)))))) (res .cse125 (let ((.cse135 (= 0 .cse134))) (res .cse135 (symm 0 .cse134) (let ((.cse136 (< call1formal@r@0 .cse131))) (res .cse136 (let ((.cse137 (< .cse131 call1formal@r@0))) (res .cse137 (trichotomy call1formal@r@0 .cse131) (farkas 1 .cse124 1 .cse137))) (farkas 1 .cse135 1 .cse136))))) (=+2 .cse129))) (=-2 .cse129)))) :proves (+ .cse124 + .cse123 - .cse80) :input) (res .cse138 (res .cse139 (! (res .cse140 .cse141 (res .cse101 .cse102 (farkas 1 .cse52 1 .cse124 1 .cse82 1 .cse108 1 .cse101 1 .cse140))) :proves (- .cse52 - .cse124 - .cse82 - .cse108 - .cse93 + .cse139) :LA (1 1 1 1 (- 1) (- 1))) .cse142) (! (res .cse119 .cse120 (res .cse143 .cse144 (res .cse89 .cse90 (farkas 1 .cse138 1 .cse89 1 .cse143 1 .cse119)))) :proves (- .cse138 - .cse82 + .cse106 - .cse108) :LA (1 (- 1) (- 1) (- 1))))))) (! (res .cse146 (res .cse147 (and- 1 .cse80) (=>- .cse147)) (let ((.cse148 (= .cse146 .cse107))) (res .cse148 (res .cse107 (res .cse146 (=+1 .cse148) (let ((.cse149 (= 91 call1formal@r@0))) (res .cse149 (symm 91 call1formal@r@0) (let ((.cse150 (< .cse152 0))) (res .cse150 (let ((.cse151 (< 0 .cse152))) (res .cse151 (trichotomy .cse152 0) (farkas 1 .cse146 1 .cse151))) (farkas 1 .cse149 1 .cse150)))))) (res .cse146 (let ((.cse153 (= 0 .cse152))) (res .cse153 (symm 0 .cse152) (let ((.cse154 (< call1formal@r@0 91))) (res .cse154 (let ((.cse155 (< 91 call1formal@r@0))) (res .cse155 (trichotomy call1formal@r@0 91) (farkas 1 .cse107 1 .cse155))) (farkas 1 .cse153 1 .cse154))))) (=+2 .cse148))) (=-2 .cse148)))) :proves (+ .cse107 - .cse123 - .cse80) :input)))))) (! (res .cse143 .cse144 (farkas 1 .cse107 1 .cse143)) :proves (- .cse107 + .cse106) :LA (1 (- 1))))))) (! (res .cse157 (res .cse158 (and- 1 .cse79) (=>- .cse158)) (let ((.cse159 (= .cse157 .cse105))) (res .cse159 (res .cse105 (res .cse157 (=+1 .cse159) (let ((.cse160 (= 91 call1formal@r@0@@0))) (res .cse160 (symm 91 call1formal@r@0@@0) (let ((.cse161 (< .cse163 0))) (res .cse161 (let ((.cse162 (< 0 .cse163))) (res .cse162 (trichotomy .cse163 0) (farkas 1 .cse157 1 .cse162))) (farkas 1 .cse160 1 .cse161)))))) (res .cse157 (res .cse164 .cse165 (let ((.cse166 (< call1formal@r@0@@0 91))) (res .cse166 (let ((.cse167 (< 91 call1formal@r@0@@0))) (res .cse167 (trichotomy call1formal@r@0@@0 91) (farkas 1 .cse105 1 .cse167))) (farkas 1 .cse164 1 .cse166)))) (=+2 .cse159))) (=-2 .cse159)))) :proves (+ .cse105 - .cse106 - .cse79) :input)) (res .cse138 (res .cse139 (! (res .cse140 .cse141 (farkas 1 .cse105 1 .cse82 1 .cse140)) :proves (- .cse105 - .cse82 + .cse139) :LA (1 1 (- 1))) .cse142) (! (res .cse89 .cse90 (res .cse164 .cse165 (farkas 1 .cse138 1 .cse164 1 .cse89))) :proves (- .cse138 - .cse105 - .cse82) :LA (1 (- 1) (- 1)))))))))))))))))) (! (res .cse174 (let ((.cse175 (not .cse81))) (res .cse175 (let ((.cse176 (not .cse174))) (res .cse176 (not+ .cse176) (let ((.cse177 (= .cse176 .cse175))) (res .cse177 (let ((.cse178 (= .cse174 .cse81))) (res .cse178 (res .cse81 (res .cse174 (=+1 .cse178) (let ((.cse179 (= 91 r@1))) (res .cse179 (symm 91 r@1) (res .cse168 (res .cse169 .cse170 (farkas 1 .cse174 1 .cse169)) (farkas 1 .cse179 1 .cse168))))) (res .cse174 (let ((.cse180 (= 0 .cse173))) (res .cse180 (symm 0 .cse173) (let ((.cse181 (< r@1 91))) (res .cse181 (let ((.cse182 (< 91 r@1))) (res .cse182 (trichotomy r@1 91) (farkas 1 .cse81 1 .cse182))) (farkas 1 .cse180 1 .cse181))))) (=+2 .cse178))) (cong (not .cse174) (not .cse81)))) (=-2 .cse177))))) (not- .cse175))) (=>+ 1 .cse71)) :proves (+ .cse71 - .cse81) :input)))))))))) .cse73))) .cse74)) (! (res .cse75 .cse76 (=>+ 1 .cse45)) :proves (+ .cse45 - .cse68 - .cse69) :input)) .cse57) .cse58)))) :proves (- .cse68) :rup)) :proves (- .cse53) :rup))) (res .cse0 (let ((.cse39 (* (- 1) r@0))) (let ((.cse12 (+ n .cse39 (- 10)))) (let ((.cse1 (= .cse12 0)) (.cse13 (= 0 .cse12))) (let-proof ((.cse4 (! (res .cse40 .cse41 (! (res .cse42 .cse43 (! (res .cse44 (! (res .cse45 (! (res .cse46 .cse47 (! (res .cse48 .cse49 (! (res .cse50 .cse51 (! (res .cse52 (! (and- 0 .cse50) :proves (- .cse50 + .cse52) :input) (! (res .cse53 (! (res .cse54 (=>+ 0 .cse53) .cse55) :proves (+ .cse53 - .cse52) :input) .cse56) :proves (- .cse52) :rup)) :proves (- .cse50) :rup)) :proves (- .cse48) :rup)) :proves (- .cse46) :rup)) :proves (+ .cse45) :rup) .cse57) :proves (+ .cse44) :rup) .cse58) :proves (- .cse42) :rup)) :proves (- .cse40) :rup)) :proves (+ .cse3) :rup)) (.cse14 (symm 0 .cse12))) (res .cse1 (! (res .cse2 (! (res .cse3 .cse4 .cse5) :proves (+ .cse2) :rup) (! (res .cse6 (and- 1 .cse2) (let ((.cse7 (= .cse6 .cse1))) (res .cse7 (res .cse1 (res .cse6 (=+1 .cse7) (let ((.cse8 (= .cse9 r@0))) (res .cse8 (symm .cse9 r@0) (let ((.cse10 (< .cse12 0))) (res .cse10 (let ((.cse11 (< 0 .cse12))) (res .cse11 (trichotomy .cse12 0) (farkas 1 .cse8 1 .cse11))) (farkas 1 .cse6 1 .cse10)))))) (res .cse6 (res .cse13 .cse14 (let ((.cse15 (< r@0 .cse9))) (res .cse15 (let ((.cse16 (< .cse9 r@0))) (res .cse16 (trichotomy r@0 .cse9) (farkas 1 .cse13 1 .cse16))) (farkas 1 .cse1 1 .cse15)))) (=+2 .cse7))) (=-2 .cse7)))) :proves (- .cse2 + .cse1) :input)) :proves (+ .cse1) :rup) (let ((.cse24 (+ r@1 .cse39))) (let ((.cse25 (= 0 .cse24)) (.cse17 (= .cse24 0))) (let-proof ((.cse26 (symm 0 .cse24))) (res .cse17 (! (res .cse18 (! (res .cse3 .cse4 (! (and- 1 .cse3) :proves (- .cse3 + .cse18) :input)) :proves (+ .cse18) :rup) (! (res .cse19 (and- 0 .cse18) (let ((.cse20 (= .cse19 .cse17))) (res .cse20 (res .cse17 (res .cse19 (=+1 .cse20) (let ((.cse21 (= r@0 r@1))) (res .cse21 (symm r@0 r@1) (let ((.cse22 (< .cse24 0))) (res .cse22 (let ((.cse23 (< 0 .cse24))) (res .cse23 (trichotomy .cse24 0) (farkas 1 .cse19 1 .cse23))) (farkas 1 .cse21 1 .cse22)))))) (res .cse19 (res .cse25 .cse26 (let ((.cse27 (< r@1 r@0))) (res .cse27 (let ((.cse28 (< r@0 r@1))) (res .cse28 (trichotomy r@1 r@0) (farkas 1 .cse17 1 .cse28))) (farkas 1 .cse25 1 .cse27)))) (=+2 .cse20))) (=-2 .cse20)))) :proves (- .cse18 + .cse17) :input)) :proves (+ .cse17) :rup) (let ((.cse37 (+ n .cse38 (- 9)))) (let ((.cse29 (<= .cse37 0))) (res .cse29 (let ((.cse30 (<= .cse32 0))) (res .cse30 (! (let ((.cse31 (<= 1 .cse32))) (res .cse31 (total-int .cse32 0) (res .cse25 .cse26 (farkas 1 .cse25 1 .cse1 1 .cse31)))) :proves (- .cse17 - .cse1 + .cse30) :LA ((- 1) 1 (- 1))) (! (res .cse33 (res .cse34 .cse35 (farkas 1 .cse34 1 .cse30)) (let ((.cse36 (<= 1 .cse37))) (res .cse36 (total-int .cse37 0) (farkas 1 .cse36 1 .cse33)))) :proves (- .cse30 + .cse0 + .cse29) :trichotomy))) (! (res .cse13 .cse14 (farkas 1 .cse29 1 .cse17 1 .cse13)) :proves (- .cse29 - .cse17 - .cse1) :LA (1 1 (- 1))))))))))))))) (! (res .cse53 (! (res .cse59 (let ((.cse60 (not .cse0))) (res .cse60 (let ((.cse61 (not .cse59))) (res .cse61 (not+ .cse61) (let ((.cse62 (= .cse61 .cse60))) (res .cse62 (let ((.cse63 (= .cse59 .cse0))) (res .cse63 (res .cse0 (res .cse59 (=+1 .cse63) (let ((.cse64 (= .cse9 r@1))) (res .cse64 (symm .cse9 r@1) (res .cse33 (res .cse34 .cse35 (farkas 1 .cse64 1 .cse34)) (farkas 1 .cse59 1 .cse33))))) (res .cse59 (let ((.cse65 (= 0 .cse32))) (res .cse65 (symm 0 .cse32) (let ((.cse66 (< r@1 .cse9))) (res .cse66 (let ((.cse67 (< .cse9 r@1))) (res .cse67 (trichotomy r@1 .cse9) (farkas 1 .cse65 1 .cse67))) (farkas 1 .cse0 1 .cse66))))) (=+2 .cse63))) (cong (not .cse59) (not .cse0)))) (=-2 .cse62))))) (not- .cse60))) (=>+ 1 .cse53)) :proves (+ .cse53 - .cse0) :input) .cse56) :proves (- .cse0) :rup)))))))))))))))) :proves () :rup)

