unsat
(! (let ((.cse167 (ControlFlow 0 2))) (let ((.cse2 (= .cse167 (- 1))) (.cse0 (= (- 1) .cse167))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse167)) (res .cse2 (symm .cse167 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse177 (+ (* (- 1) o@3) 44))) (let ((.cse92 (<= .cse177 0))) (let ((.cse93 (not .cse92))) (let ((.cse1 (=> .cse2 .cse93))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse170 (= .cse167 (- 3)))) (let ((.cse5 (=> .cse170 true))) (let-proof ((.cse6 (! (res true true+ (=>+ 1 .cse5)) :proves (+ .cse5) :input))) (res .cse5 .cse6 (let ((.cse78 (= o@3 o@2))) (let ((.cse76 (and .cse78 (= (ControlFlow 0 4) 2))) (.cse100 (and .cse5 .cse1))) (let ((.cse7 (=> .cse76 .cse100))) (let-proof ((.cse101 (and+ .cse100))) (let-proof ((.cse8 (! (res .cse100 .cse101 (=>+ 1 .cse7)) :proves (+ .cse7 - .cse1 - .cse5) :input))) (res .cse7 .cse8 (! (let ((.cse69 (+ o@1 1))) (let ((.cse66 (= o@2 .cse69))) (let ((.cse9 (=> .cse66 .cse7))) (let-proof ((.cse10 (! (=>+ 1 .cse9) :proves (+ .cse9 - .cse7) :input))) (res .cse9 .cse10 (! (let ((.cse180 (ControlFlow 0 6))) (let ((.cse148 (= .cse180 4))) (let ((.cse11 (=> .cse148 .cse9))) (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse9) :input) (! (let ((.cse102 (= o@3 o@1))) (let ((.cse39 (and .cse102 (= (ControlFlow 0 5) 2))) (.cse179 (ControlFlow 0 7))) (let ((.cse32 (+ i 1)) (.cse146 (= .cse180 5)) (.cse134 (= .cse179 5)) (.cse17 (=> .cse39 .cse100)) (.cse139 (= .cse179 4))) (let ((.cse64 (=> .cse139 .cse9)) (.cse63 (=> .cse134 .cse17)) (.cse15 (=> .cse146 .cse17)) (.cse29 (= o@0 .cse32)) (.cse19 (= o@1 o@0))) (let ((.cse16 (and .cse29 .cse19)) (.cse49 (and .cse11 .cse15)) (.cse54 (= o@1 i)) (.cse88 (and .cse64 .cse63)) (.cse178 (ControlFlow 0 8))) (let ((.cse141 (= .cse178 7)) (.cse52 (=> .cse54 .cse88)) (.cse149 (= .cse178 6)) (.cse12 (=> .cse16 .cse49))) (let ((.cse50 (=> .cse149 .cse12)) (.cse51 (=> .cse141 .cse52)) (.cse111 (= i 42))) (let ((.cse87 (* (- 1) o@1)) (.cse112 (and .cse111 (= (ControlFlow 0 9) 8))) (.cse89 (and .cse50 .cse51))) (let ((.cse117 (+ i (- 42))) (.cse97 (< 0 .cse177)) (.cse90 (=> .cse112 .cse89)) (.cse107 (+ o@3 .cse87)) (.cse176 (+ o@3 (- 43)))) (let-proof ((.cse94 (not+ .cse93)) (.cse98 (total .cse177 0))) (let ((.cse44 (<= 1 .cse176)) (.cse41 (<= .cse176 0)) (.cse42 (= .cse107 0)) (.cse13 (= .cse117 0))) (let-proof ((.cse45 (total-int .cse176 0)) (.cse91 (let ((.cse175 (= (ControlFlow 0 0) 9))) (let ((.cse121 (=> .cse175 .cse90))) (res .cse121 (=>+ 1 .cse121) (let ((.cse171 (- 0 3)) (.cse159 (- 0 1))) (let ((.cse158 (= .cse167 .cse159)) (.cse156 (< o@3 44)) (.cse169 (= .cse167 .cse171))) (let ((.cse168 (=> .cse169 true)) (.cse154 (=> .cse158 .cse156))) (let ((.cse153 (and .cse168 .cse154))) (let ((.cse150 (=> .cse76 .cse153))) (let ((.cse135 (=> .cse39 .cse153)) (.cse140 (=> .cse66 .cse150))) (let ((.cse136 (=> .cse139 .cse140)) (.cse131 (=> .cse134 .cse135)) (.cse147 (=> .cse148 .cse140)) (.cse145 (=> .cse146 .cse135))) (let ((.cse144 (and .cse147 .cse145)) (.cse130 (and .cse136 .cse131))) (let ((.cse129 (=> .cse54 .cse130)) (.cse143 (=> .cse16 .cse144))) (let ((.cse142 (=> .cse149 .cse143)) (.cse128 (=> .cse141 .cse129))) (let ((.cse127 (and .cse142 .cse128))) (let ((.cse126 (=> .cse112 .cse127))) (let ((.cse122 (=> .cse175 .cse126))) (let ((.cse124 (not .cse122))) (res .cse122 (let ((.cse123 (not .cse121))) (res .cse123 (res .cse124 (not+ .cse124) (let ((.cse125 (= .cse124 .cse123))) (res .cse125 (res (= .cse122 .cse121) (res (= .cse126 .cse90) (res (= .cse127 .cse89) (let ((.cse151 (= .cse153 .cse100))) (let-proof ((.cse152 (let ((.cse161 (= 0 0)) (.cse165 (= .cse167 .cse167))) (let-proof ((.cse162 (refl 0)) (.cse166 (refl .cse167))) (res (= .cse154 .cse1) (let ((.cse155 (= .cse156 .cse93))) (res .cse155 (res .cse93 (res .cse156 (=+1 .cse155) (res .cse92 .cse94 (farkas 1 .cse156 1 .cse92))) (res .cse156 (let ((.cse157 (<= 44 o@3))) (res .cse157 (total 44 o@3) (res .cse92 (res .cse97 .cse98 (farkas 1 .cse157 1 .cse97)) (not- .cse93)))) (=+2 .cse155))) (res (= .cse158 .cse2) (res (= .cse159 (- 1)) (let ((.cse160 (* (- 1) 1))) (res (= .cse160 (- 1)) (poly* .cse160 (- 1)) (res .cse161 .cse162 (let ((.cse163 (+ 0 .cse160)) (.cse164 (+ 0 (- 1)))) (res (= .cse163 .cse164) (cong (+ 0 .cse160) (+ 0 (- 1))) (res (= .cse159 .cse163) (-def 0 1) (res (= .cse164 (- 1)) (poly+ .cse164 (- 1)) (trans .cse159 .cse163 .cse164 (- 1))))))))) (res .cse165 .cse166 (cong (= .cse167 .cse159) (= .cse167 (- 1))))) (cong (=> .cse158 .cse156) (=> .cse2 .cse93))))) (res (= .cse168 .cse5) (res (= true true) (refl true) (res (= .cse169 .cse170) (res (= .cse171 (- 3)) (let ((.cse172 (* (- 1) 3))) (res (= .cse172 (- 3)) (poly* .cse172 (- 3)) (res .cse161 .cse162 (let ((.cse173 (+ 0 .cse172)) (.cse174 (+ 0 (- 3)))) (res (= .cse173 .cse174) (cong (+ 0 .cse172) (+ 0 (- 3))) (res (= .cse171 .cse173) (-def 0 3) (res (= .cse174 (- 3)) (poly+ .cse174 (- 3)) (trans .cse171 .cse173 .cse174 (- 3))))))))) (res .cse165 .cse166 (cong (= .cse167 .cse171) (= .cse167 (- 3))))) (cong (=> .cse169 true) (=> .cse170 true)))) (cong (and .cse168 .cse154) (and .cse5 .cse1)))))))) (let ((.cse132 (= .cse135 .cse17)) (.cse137 (= .cse140 .cse9))) (let-proof ((.cse133 (res .cse151 .cse152 (res (= .cse39 .cse39) (refl .cse39) (cong (=> .cse39 .cse153) (=> .cse39 .cse100))))) (.cse138 (res (= .cse150 .cse7) (res .cse151 .cse152 (res (= .cse76 .cse76) (refl .cse76) (cong (=> .cse76 .cse153) (=> .cse76 .cse100)))) (res (= .cse66 .cse66) (refl .cse66) (cong (=> .cse66 .cse150) (=> .cse66 .cse7)))))) (res (= .cse128 .cse51) (res (= .cse129 .cse52) (res (= .cse130 .cse88) (res (= .cse131 .cse63) (res .cse132 .cse133 (res (= .cse134 .cse134) (refl .cse134) (cong (=> .cse134 .cse135) (=> .cse134 .cse17)))) (res (= .cse136 .cse64) (res .cse137 .cse138 (res (= .cse139 .cse139) (refl .cse139) (cong (=> .cse139 .cse140) (=> .cse139 .cse9)))) (cong (and .cse136 .cse131) (and .cse64 .cse63)))) (res (= .cse54 .cse54) (refl .cse54) (cong (=> .cse54 .cse130) (=> .cse54 .cse88)))) (res (= .cse141 .cse141) (refl .cse141) (cong (=> .cse141 .cse129) (=> .cse141 .cse52)))) (res (= .cse142 .cse50) (res (= .cse143 .cse12) (res (= .cse144 .cse49) (res (= .cse145 .cse15) (res .cse132 .cse133 (res (= .cse146 .cse146) (refl .cse146) (cong (=> .cse146 .cse135) (=> .cse146 .cse17)))) (res (= .cse147 .cse11) (res .cse137 .cse138 (res (= .cse148 .cse148) (refl .cse148) (cong (=> .cse148 .cse140) (=> .cse148 .cse9)))) (cong (and .cse147 .cse145) (and .cse11 .cse15)))) (res (= .cse16 .cse16) (refl .cse16) (cong (=> .cse16 .cse144) (=> .cse16 .cse49)))) (res (= .cse149 .cse149) (refl .cse149) (cong (=> .cse149 .cse143) (=> .cse149 .cse12)))) (cong (and .cse142 .cse128) (and .cse50 .cse51)))))))) (res (= .cse112 .cse112) (refl .cse112) (cong (=> .cse112 .cse127) (=> .cse112 .cse89)))) (res (= .cse175 .cse175) (refl .cse175) (cong (=> .cse175 .cse126) (=> .cse175 .cse90)))) (cong (not .cse122) (not .cse121))) (=-2 .cse125)))) (not- .cse123))) (res .cse124 (assume .cse124) (not- .cse124)))))))))))))))))))))) (let ((.cse48 (* (- 1) i))) (let-proof ((.cse14 (! (res .cse111 (res .cse112 (res .cse90 (=>+ 0 .cse90) .cse91) (and- 0 .cse112)) (let ((.cse113 (= .cse111 .cse13))) (res .cse113 (res .cse13 (res .cse111 (=+1 .cse113) (let ((.cse114 (= 42 i))) (res .cse114 (symm 42 i) (let ((.cse115 (< .cse117 0))) (res .cse115 (let ((.cse116 (< 0 .cse117))) (res .cse116 (trichotomy .cse117 0) (farkas 1 .cse111 1 .cse116))) (farkas 1 .cse114 1 .cse115)))))) (res .cse111 (let ((.cse118 (= 0 .cse117))) (res .cse118 (symm 0 .cse117) (let ((.cse119 (< i 42))) (res .cse119 (let ((.cse120 (< 42 i))) (res .cse120 (trichotomy i 42) (farkas 1 .cse13 1 .cse120))) (farkas 1 .cse118 1 .cse119))))) (=+2 .cse113))) (=-2 .cse113)))) :proves (+ .cse13) :input)) (.cse40 (! (=>+ 0 .cse17) :proves (+ .cse17 + .cse39) :input)) (.cse43 (! (res .cse102 (and- 0 .cse39) (let ((.cse103 (= .cse102 .cse42))) (res .cse103 (res .cse42 (res .cse102 (=+1 .cse103) (let ((.cse104 (= o@1 o@3))) (res .cse104 (symm o@1 o@3) (let ((.cse105 (< .cse107 0))) (res .cse105 (let ((.cse106 (< 0 .cse107))) (res .cse106 (trichotomy .cse107 0) (farkas 1 .cse102 1 .cse106))) (farkas 1 .cse104 1 .cse105)))))) (res .cse102 (let ((.cse108 (= 0 .cse107))) (res .cse108 (symm 0 .cse107) (let ((.cse109 (< o@3 o@1))) (res .cse109 (let ((.cse110 (< o@1 o@3))) (res .cse110 (trichotomy o@3 o@1) (farkas 1 .cse42 1 .cse110))) (farkas 1 .cse108 1 .cse109))))) (=+2 .cse103))) (=-2 .cse103)))) :proves (- .cse39 + .cse42) :input)) (.cse47 (! (res .cse100 .cse101 (=>+ 1 .cse17)) :proves (+ .cse17 - .cse1 - .cse5) :input)) (.cse46 (! (res .cse92 (res .cse93 .cse94 (=>+ 1 .cse1)) (let ((.cse95 (not .cse41))) (let-proof ((.cse99 (not- .cse95))) (res .cse95 (let ((.cse96 (= .cse92 .cse95))) (res .cse96 (res .cse95 (res .cse92 (=+1 .cse96) (res .cse41 (not+ .cse95) (farkas 1 .cse92 1 .cse41))) (res .cse92 (res .cse97 .cse98 (res .cse41 (res .cse44 .cse45 (farkas 1 .cse97 1 .cse44)) .cse99)) (=+2 .cse96))) (=-2 .cse96))) .cse99)))) :proves (+ .cse1 - .cse41) :input))) (res .cse12 (! (res .cse13 .cse14 (res .cse5 .cse6 (res .cse15 (res .cse16 (! (=>+ 0 .cse12) :proves (+ .cse12 + .cse16) :input) (res .cse17 (let ((.cse24 (+ o@1 (* (- 1) o@0)))) (let ((.cse18 (= .cse24 0))) (res .cse18 (! (res .cse19 (and- 1 .cse16) (let ((.cse20 (= .cse19 .cse18))) (res .cse20 (res .cse18 (res .cse19 (=+1 .cse20) (let ((.cse21 (= o@0 o@1))) (res .cse21 (symm o@0 o@1) (let ((.cse22 (< .cse24 0))) (res .cse22 (let ((.cse23 (< 0 .cse24))) (res .cse23 (trichotomy .cse24 0) (farkas 1 .cse19 1 .cse23))) (farkas 1 .cse21 1 .cse22)))))) (res .cse19 (let ((.cse25 (= 0 .cse24))) (res .cse25 (symm 0 .cse24) (let ((.cse26 (< o@1 o@0))) (res .cse26 (let ((.cse27 (< o@0 o@1))) (res .cse27 (trichotomy o@1 o@0) (farkas 1 .cse18 1 .cse27))) (farkas 1 .cse25 1 .cse26))))) (=+2 .cse20))) (=-2 .cse20)))) :proves (- .cse16 + .cse18) :input) (let ((.cse35 (+ o@0 .cse48 (- 1)))) (let ((.cse28 (= .cse35 0))) (res .cse28 (! (res .cse29 (and- 0 .cse16) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (res .cse28 (res .cse29 (=+1 .cse30) (let ((.cse31 (= .cse32 o@0))) (res .cse31 (symm .cse32 o@0) (let ((.cse33 (< .cse35 0))) (res .cse33 (let ((.cse34 (< 0 .cse35))) (res .cse34 (trichotomy .cse35 0) (farkas 1 .cse29 1 .cse34))) (farkas 1 .cse31 1 .cse33)))))) (res .cse29 (let ((.cse36 (= 0 .cse35))) (res .cse36 (symm 0 .cse35) (let ((.cse37 (< o@0 .cse32))) (res .cse37 (let ((.cse38 (< .cse32 o@0))) (res .cse38 (trichotomy o@0 .cse32) (farkas 1 .cse28 1 .cse38))) (farkas 1 .cse36 1 .cse37))))) (=+2 .cse30))) (=-2 .cse30)))) :proves (- .cse16 + .cse28) :input) (res .cse1 (res .cse39 .cse40 (res .cse41 (res .cse42 .cse43 (! (res .cse44 .cse45 (farkas 1 .cse44 1 .cse28 1 .cse42 1 .cse18 1 .cse13)) :proves (+ .cse41 - .cse28 - .cse42 - .cse18 - .cse13) :LA ((- 1) 1 1 1 1))) .cse46)) .cse47))))))) (! (=>+ 1 .cse15) :proves (+ .cse15 - .cse17) :input))) (! (res .cse49 (and+ .cse49) (=>+ 1 .cse12)) :proves (- .cse11 - .cse15 + .cse12) :input)))) :proves (- .cse11 + .cse12) :rup) (! (res .cse50 (! (=>+ 1 .cse50) :proves (+ .cse50 - .cse12) :input) (! (res .cse51 (! (res .cse52 (! (res .cse13 .cse14 (res .cse5 .cse6 (let ((.cse59 (+ o@1 .cse48))) (let ((.cse53 (= .cse59 0))) (res .cse53 (! (res .cse54 (=>+ 0 .cse52) (let ((.cse55 (= .cse54 .cse53))) (res .cse55 (res .cse53 (res .cse54 (=+1 .cse55) (let ((.cse56 (= i o@1))) (res .cse56 (symm i o@1) (let ((.cse57 (< .cse59 0))) (res .cse57 (let ((.cse58 (< 0 .cse59))) (res .cse58 (trichotomy .cse59 0) (farkas 1 .cse54 1 .cse58))) (farkas 1 .cse56 1 .cse57)))))) (res .cse54 (let ((.cse60 (= 0 .cse59))) (res .cse60 (symm 0 .cse59) (let ((.cse61 (< o@1 i))) (res .cse61 (let ((.cse62 (< i o@1))) (res .cse62 (trichotomy o@1 i) (farkas 1 .cse53 1 .cse62))) (farkas 1 .cse60 1 .cse61))))) (=+2 .cse55))) (=-2 .cse55)))) :proves (+ .cse52 + .cse53) :input) (res .cse17 (! (res .cse13 .cse14 (res .cse5 .cse6 (res .cse39 .cse40 (res .cse1 (res .cse42 .cse43 (res .cse41 (! (res .cse44 .cse45 (farkas 1 .cse44 1 .cse53 1 .cse42 1 .cse13)) :proves (+ .cse41 - .cse53 - .cse42 - .cse13) :LA ((- 1) 1 1 1)) .cse46)) .cse47)))) :proves (- .cse53 + .cse17) :rup) (res .cse63 (! (=>+ 1 .cse63) :proves (+ .cse63 - .cse17) :input) (res .cse64 (res .cse9 (res .cse7 (let ((.cse72 (+ o@2 .cse87 (- 1)))) (let ((.cse65 (= .cse72 0))) (res .cse65 (! (res .cse66 (=>+ 0 .cse9) (let ((.cse67 (= .cse66 .cse65))) (res .cse67 (res .cse65 (res .cse66 (=+1 .cse67) (let ((.cse68 (= .cse69 o@2))) (res .cse68 (symm .cse69 o@2) (let ((.cse70 (< .cse72 0))) (res .cse70 (let ((.cse71 (< 0 .cse72))) (res .cse71 (trichotomy .cse72 0) (farkas 1 .cse66 1 .cse71))) (farkas 1 .cse68 1 .cse70)))))) (res .cse66 (let ((.cse73 (= 0 .cse72))) (res .cse73 (symm 0 .cse72) (let ((.cse74 (< o@2 .cse69))) (res .cse74 (let ((.cse75 (< .cse69 o@2))) (res .cse75 (trichotomy o@2 .cse69) (farkas 1 .cse65 1 .cse75))) (farkas 1 .cse73 1 .cse74))))) (=+2 .cse67))) (=-2 .cse67)))) :proves (+ .cse9 + .cse65) :input) (res .cse1 (res .cse76 (! (=>+ 0 .cse7) :proves (+ .cse7 + .cse76) :input) (res .cse41 (let ((.cse83 (+ o@3 (* (- 1) o@2)))) (let ((.cse77 (= .cse83 0))) (res .cse77 (! (res .cse78 (and- 0 .cse76) (let ((.cse79 (= .cse78 .cse77))) (res .cse79 (res .cse77 (res .cse78 (=+1 .cse79) (let ((.cse80 (= o@2 o@3))) (res .cse80 (symm o@2 o@3) (let ((.cse81 (< .cse83 0))) (res .cse81 (let ((.cse82 (< 0 .cse83))) (res .cse82 (trichotomy .cse83 0) (farkas 1 .cse78 1 .cse82))) (farkas 1 .cse80 1 .cse81)))))) (res .cse78 (let ((.cse84 (= 0 .cse83))) (res .cse84 (symm 0 .cse83) (let ((.cse85 (< o@3 o@2))) (res .cse85 (let ((.cse86 (< o@2 o@3))) (res .cse86 (trichotomy o@3 o@2) (farkas 1 .cse77 1 .cse86))) (farkas 1 .cse84 1 .cse85))))) (=+2 .cse79))) (=-2 .cse79)))) :proves (- .cse76 + .cse77) :input) (! (res .cse44 .cse45 (farkas 1 .cse77 1 .cse44 1 .cse53 1 .cse65 1 .cse13)) :proves (- .cse77 + .cse41 - .cse53 - .cse65 - .cse13) :LA (1 (- 1) 1 1 1))))) .cse46)) .cse8)))) .cse10) (! (=>+ 1 .cse64) :proves (+ .cse64 - .cse9) :input)) (! (res .cse88 (and+ .cse88) (=>+ 1 .cse52)) :proves (- .cse64 + .cse52 - .cse63) :input))))))))) :proves (+ .cse52) :rup) (! (=>+ 1 .cse51) :proves (+ .cse51 - .cse52) :input)) :proves (+ .cse51) :rup) (! (res .cse89 (and+ .cse89) (res .cse90 (=>+ 1 .cse90) .cse91)) :proves (- .cse50 - .cse51) :input)) :proves (- .cse50) :rup)) :proves (- .cse12) :rup)))))))))))))))) :proves (- .cse11) :rup))))) :proves (- .cse9) :rup)))))) :proves (- .cse7) :rup))))))))))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse182 (not .cse2))) (res .cse2 (let ((.cse181 (not .cse0))) (res .cse181 (res .cse182 (not+ .cse182) (let ((.cse183 (= .cse182 .cse181))) (res .cse183 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse183)))) (not- .cse181))) (res .cse182 (assume .cse182) (not- .cse182)))) :proves (- .cse0) :input)))))) :proves () :rup)

