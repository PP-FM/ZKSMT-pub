unsat
(! (let ((.cse56 (ControlFlow 0 5))) (let ((.cse49 (= .cse56 (- 4))) (.cse0 (= (- 4) .cse56))) (let ((.cse110 (= .cse49 .cse0))) (let-proof ((.cse111 (res .cse0 (res .cse49 (=+1 .cse110) (symm (- 4) .cse56)) (res .cse49 (symm .cse56 (- 4)) (=+2 .cse110))))) (res .cse0 (! (let ((.cse57 (= x@2 (+ x@1 2)))) (let ((.cse1 (and .cse57 .cse49))) (res .cse1 (! (let ((.cse46 (+ (* (- 1) x@2) 100))) (let ((.cse43 (<= .cse46 0))) (let ((.cse41 (not .cse43))) (let ((.cse2 (=> .cse1 .cse41))) (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + .cse1) :input) (! (let ((.cse109 (ControlFlow 0 6))) (let ((.cse58 (= .cse109 5))) (let ((.cse3 (=> .cse58 .cse2))) (res .cse3 (! (=>+ 1 .cse3) :proves (+ .cse3 - .cse2) :input) (! (let ((.cse67 (+ (* (- 1) x@1) 100))) (let ((.cse64 (<= .cse67 0)) (.cse14 (ControlFlow 0 3))) (let ((.cse8 (= .cse14 (- 2))) (.cse62 (not .cse64))) (let ((.cse73 (= .cse109 3)) (.cse6 (=> .cse8 .cse62))) (let ((.cse5 (=> .cse73 .cse6))) (let ((.cse74 (= x@1 (+ x@0 1))) (.cse15 (and .cse5 .cse3))) (let ((.cse4 (=> .cse74 .cse15))) (res .cse4 (res .cse5 (! (res .cse6 (! (let ((.cse7 (= (- 2) .cse14))) (let ((.cse9 (= .cse8 .cse7))) (let-proof ((.cse10 (res .cse7 (res .cse8 (=+1 .cse9) (symm (- 2) .cse14)) (res .cse8 (symm .cse14 (- 2)) (=+2 .cse9))))) (res .cse7 (! (res .cse8 (=>+ 0 .cse6) (res .cse9 .cse10 (=-2 .cse9))) :proves (+ .cse6 + .cse7) :input) (! (let ((.cse12 (not .cse8))) (res .cse8 (let ((.cse11 (not .cse7))) (res .cse11 (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res .cse9 .cse10 (cong (not .cse8) (not .cse7))) (=-2 .cse13)))) (not- .cse11))) (res .cse12 (assume .cse12) (not- .cse12)))) :proves (- .cse7) :input))))) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (! (res .cse15 (and+ .cse15) (=>+ 1 .cse4)) :proves (- .cse3 - .cse5 + .cse4) :input)) (! (let ((.cse84 (+ (* (- 1) x@0) 100))) (let ((.cse81 (<= .cse84 0))) (let ((.cse79 (not .cse81)) (.cse77 (= (ControlFlow 0 7) 6))) (let ((.cse76 (and .cse79 .cse77))) (let ((.cse16 (=> .cse76 .cse4))) (res .cse16 (! (=>+ 1 .cse16) :proves (+ .cse16 - .cse4) :input) (! (let ((.cse96 (ControlFlow 0 8))) (let ((.cse85 (= .cse96 7))) (let ((.cse17 (=> .cse85 .cse16))) (res .cse17 (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse16) :input) (! (let ((.cse18 (=> true .cse17))) (res .cse18 (! (=>+ 1 .cse18) :proves (+ .cse18 - .cse17) :input) (! (let ((.cse91 (= .cse96 (- 9)))) (let ((.cse19 (=> .cse91 true))) (let-proof ((.cse20 true+)) (res .cse19 (! (res true .cse20 (=>+ 1 .cse19)) :proves (+ .cse19) :input) (let ((.cse108 (ControlFlow 0 10))) (let ((.cse106 (= .cse108 8)) (.cse22 (and .cse19 .cse18))) (let ((.cse21 (=> .cse106 .cse22))) (res .cse21 (! (res .cse22 (and+ .cse22) (=>+ 1 .cse21)) :proves (+ .cse21 - .cse18 - .cse19) :input) (! (let ((.cse23 (=> (= .cse108 1) true))) (res .cse23 (! (res true .cse20 (=>+ 1 .cse23)) :proves (+ .cse23) :input) (! (let ((.cse24 (and .cse23 .cse21))) (res .cse24 (and+ .cse24) (let ((.cse107 (= (ControlFlow 0 0) 10))) (let ((.cse25 (=> .cse107 .cse24))) (res .cse25 (=>+ 1 .cse25) (let ((.cse50 (- 0 4))) (let ((.cse48 (= .cse56 .cse50)) (.cse69 (- 0 2))) (let ((.cse68 (= .cse14 .cse69)) (.cse63 (< x@1 100)) (.cse47 (and .cse57 .cse48)) (.cse42 (< x@2 100))) (let ((.cse39 (=> .cse47 .cse42)) (.cse60 (=> .cse68 .cse63))) (let ((.cse59 (=> .cse73 .cse60)) (.cse38 (=> .cse58 .cse39))) (let ((.cse37 (and .cse59 .cse38)) (.cse80 (< x@0 100))) (let ((.cse75 (and .cse80 .cse77)) (.cse36 (=> .cse74 .cse37))) (let ((.cse92 (- 0 9)) (.cse35 (=> .cse75 .cse36))) (let ((.cse34 (=> .cse85 .cse35)) (.cse90 (= .cse96 .cse92)) (.cse88 (< 3 100))) (let ((.cse89 (=> .cse90 .cse88)) (.cse33 (=> .cse88 .cse34))) (let ((.cse32 (and .cse89 .cse33))) (let ((.cse31 (=> .cse106 .cse32))) (let ((.cse30 (and .cse23 .cse31))) (let ((.cse26 (=> .cse107 .cse30))) (let ((.cse28 (not .cse26))) (res .cse26 (let ((.cse27 (not .cse25))) (res .cse27 (res .cse28 (not+ .cse28) (let ((.cse29 (= .cse28 .cse27))) (res .cse29 (res (= .cse26 .cse25) (res (= .cse30 .cse24) (res (= .cse31 .cse21) (res (= .cse32 .cse22) (let ((.cse86 (= .cse88 true)) (.cse52 (= 0 0))) (let-proof ((.cse87 (let ((.cse98 (not false))) (let ((.cse97 (= .cse98 true))) (let-proof ((.cse99 false-)) (res .cse97 (res true .cse20 (res .cse98 (res false (not+ .cse98) .cse99) (=+2 .cse97))) (res (= .cse88 .cse98) (let ((.cse102 (<= 97 0))) (let ((.cse100 (not .cse102))) (res (= .cse100 .cse98) (let ((.cse101 (= .cse102 false))) (res .cse101 (res false (res .cse102 (=+1 .cse101) (farkas 1 .cse102)) .cse99) (cong (not .cse102) (not false)))) (let ((.cse103 (= .cse88 .cse100))) (res .cse103 (res .cse100 (res .cse88 (=+1 .cse103) (res .cse102 (not+ .cse100) (farkas 1 .cse88 1 .cse102))) (res .cse88 (let ((.cse104 (<= 100 3))) (res .cse104 (total 100 3) (res .cse102 (let ((.cse105 (< 0 97))) (res .cse105 (total 97 0) (farkas 1 .cse104 1 .cse105))) (not- .cse100)))) (=+2 .cse103))) (trans .cse88 .cse100 .cse98)))))) (trans .cse88 .cse98 true))))))) (.cse53 (refl 0))) (res (= .cse33 .cse18) (res (= .cse34 .cse17) (res (= .cse35 .cse16) (res (= .cse36 .cse4) (res (= .cse37 .cse15) (res (= .cse38 .cse3) (res (= .cse39 .cse2) (let ((.cse40 (= .cse42 .cse41))) (res .cse40 (res .cse41 (res .cse42 (=+1 .cse40) (res .cse43 (not+ .cse41) (farkas 1 .cse42 1 .cse43))) (res .cse42 (let ((.cse44 (<= 100 x@2))) (res .cse44 (total 100 x@2) (res .cse43 (let ((.cse45 (< 0 .cse46))) (res .cse45 (total .cse46 0) (farkas 1 .cse44 1 .cse45))) (not- .cse41)))) (=+2 .cse40))) (res (= .cse47 .cse1) (res (= .cse48 .cse49) (res (= .cse50 (- 4)) (let ((.cse51 (* (- 1) 4))) (res (= .cse51 (- 4)) (poly* .cse51 (- 4)) (res .cse52 .cse53 (let ((.cse54 (+ 0 .cse51)) (.cse55 (+ 0 (- 4)))) (res (= .cse54 .cse55) (cong (+ 0 .cse51) (+ 0 (- 4))) (res (= .cse50 .cse54) (-def 0 4) (res (= .cse55 (- 4)) (poly+ .cse55 (- 4)) (trans .cse50 .cse54 .cse55 (- 4))))))))) (res (= .cse56 .cse56) (refl .cse56) (cong (= .cse56 .cse50) (= .cse56 (- 4))))) (res (= .cse57 .cse57) (refl .cse57) (cong (and .cse57 .cse48) (and .cse57 .cse49)))) (cong (=> .cse47 .cse42) (=> .cse1 .cse41))))) (res (= .cse58 .cse58) (refl .cse58) (cong (=> .cse58 .cse39) (=> .cse58 .cse2)))) (res (= .cse59 .cse5) (res (= .cse60 .cse6) (let ((.cse61 (= .cse63 .cse62))) (res .cse61 (res .cse62 (res .cse63 (=+1 .cse61) (res .cse64 (not+ .cse62) (farkas 1 .cse63 1 .cse64))) (res .cse63 (let ((.cse65 (<= 100 x@1))) (res .cse65 (total 100 x@1) (res .cse64 (let ((.cse66 (< 0 .cse67))) (res .cse66 (total .cse67 0) (farkas 1 .cse65 1 .cse66))) (not- .cse62)))) (=+2 .cse61))) (res (= .cse68 .cse8) (res (= .cse69 (- 2)) (let ((.cse70 (* (- 1) 2))) (res (= .cse70 (- 2)) (poly* .cse70 (- 2)) (res .cse52 .cse53 (let ((.cse71 (+ 0 .cse70)) (.cse72 (+ 0 (- 2)))) (res (= .cse71 .cse72) (cong (+ 0 .cse70) (+ 0 (- 2))) (res (= .cse69 .cse71) (-def 0 2) (res (= .cse72 (- 2)) (poly+ .cse72 (- 2)) (trans .cse69 .cse71 .cse72 (- 2))))))))) (res (= .cse14 .cse14) (refl .cse14) (cong (= .cse14 .cse69) (= .cse14 (- 2))))) (cong (=> .cse68 .cse63) (=> .cse8 .cse62))))) (res (= .cse73 .cse73) (refl .cse73) (cong (=> .cse73 .cse60) (=> .cse73 .cse6)))) (cong (and .cse59 .cse38) (and .cse5 .cse3)))) (res (= .cse74 .cse74) (refl .cse74) (cong (=> .cse74 .cse37) (=> .cse74 .cse15)))) (res (= .cse75 .cse76) (res (= .cse77 .cse77) (refl .cse77) (let ((.cse78 (= .cse80 .cse79))) (res .cse78 (res .cse79 (res .cse80 (=+1 .cse78) (res .cse81 (not+ .cse79) (farkas 1 .cse80 1 .cse81))) (res .cse80 (let ((.cse82 (<= 100 x@0))) (res .cse82 (total 100 x@0) (res .cse81 (let ((.cse83 (< 0 .cse84))) (res .cse83 (total .cse84 0) (farkas 1 .cse82 1 .cse83))) (not- .cse79)))) (=+2 .cse78))) (cong (and .cse80 .cse77) (and .cse79 .cse77))))) (cong (=> .cse75 .cse36) (=> .cse76 .cse4)))) (res (= .cse85 .cse85) (refl .cse85) (cong (=> .cse85 .cse35) (=> .cse85 .cse16)))) (res .cse86 .cse87 (cong (=> .cse88 .cse34) (=> true .cse17)))) (res (= .cse89 .cse19) (res .cse86 .cse87 (res (= .cse90 .cse91) (res (= .cse92 (- 9)) (let ((.cse93 (* (- 1) 9))) (res (= .cse93 (- 9)) (poly* .cse93 (- 9)) (res .cse52 .cse53 (let ((.cse94 (+ 0 .cse93)) (.cse95 (+ 0 (- 9)))) (res (= .cse94 .cse95) (cong (+ 0 .cse93) (+ 0 (- 9))) (res (= .cse92 .cse94) (-def 0 9) (res (= .cse95 (- 9)) (poly+ .cse95 (- 9)) (trans .cse92 .cse94 .cse95 (- 9))))))))) (res (= .cse96 .cse96) (refl .cse96) (cong (= .cse96 .cse92) (= .cse96 (- 9))))) (cong (=> .cse90 .cse88) (=> .cse91 true)))) (cong (and .cse89 .cse33) (and .cse19 .cse18)))))) (res (= .cse106 .cse106) (refl .cse106) (cong (=> .cse106 .cse32) (=> .cse106 .cse22)))) (res (= .cse23 .cse23) (refl .cse23) (cong (and .cse23 .cse31) (and .cse23 .cse21)))) (res (= .cse107 .cse107) (refl .cse107) (cong (=> .cse107 .cse30) (=> .cse107 .cse24)))) (cong (not .cse26) (not .cse25))) (=-2 .cse29)))) (not- .cse27))) (res .cse28 (assume .cse28) (not- .cse28))))))))))))))))))))))) :proves (- .cse23 - .cse21) :input))) :proves (- .cse21) :rup))))))))) :proves (- .cse18) :rup))) :proves (- .cse17) :rup))))) :proves (- .cse16) :rup))))))) :proves (- .cse4) :rup))))))))) :proves (- .cse3) :rup))))) :proves (- .cse2) :rup)))))) :proves (+ .cse1) :rup) (! (res .cse49 (and- 1 .cse1) (res .cse110 .cse111 (=-2 .cse110))) :proves (- .cse1 + .cse0) :input)))) :proves (+ .cse0) :rup) (! (let ((.cse113 (not .cse49))) (res .cse49 (let ((.cse112 (not .cse0))) (res .cse112 (res .cse113 (not+ .cse113) (let ((.cse114 (= .cse113 .cse112))) (res .cse114 (res .cse110 .cse111 (cong (not .cse49) (not .cse0))) (=-2 .cse114)))) (not- .cse112))) (res .cse113 (assume .cse113) (not- .cse113)))) :proves (- .cse0) :input)))))) :proves () :rup)

