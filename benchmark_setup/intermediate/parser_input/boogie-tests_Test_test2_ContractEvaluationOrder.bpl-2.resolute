unsat
(! (let ((.cse19 (ControlFlow 0 2))) (let ((.cse39 (= .cse19 (- 1))) (.cse3 (= b 0))) (let ((.cse0 (=> .cse39 .cse3))) (let ((.cse2 (=> .cse3 .cse0))) (let-proof ((.cse6 (! (let ((.cse13 (= .cse19 (- 3)))) (let ((.cse11 (=> .cse13 .cse3))) (let ((.cse20 (and .cse11 .cse2))) (let ((.cse10 (=> true .cse20))) (res .cse10 (res .cse11 (! (let ((.cse12 (= (- 3) .cse19))) (let ((.cse14 (= .cse13 .cse12))) (let-proof ((.cse15 (res .cse12 (res .cse13 (=+1 .cse14) (symm (- 3) .cse19)) (res .cse13 (symm .cse19 (- 3)) (=+2 .cse14))))) (res .cse12 (! (res .cse13 (=>+ 0 .cse11) (res .cse14 .cse15 (=-2 .cse14))) :proves (+ .cse11 + .cse12) :input) (! (let ((.cse17 (not .cse13))) (res .cse13 (let ((.cse16 (not .cse12))) (res .cse16 (res .cse17 (not+ .cse17) (let ((.cse18 (= .cse17 .cse16))) (res .cse18 (res .cse14 .cse15 (cong (not .cse13) (not .cse12))) (=-2 .cse18)))) (not- .cse16))) (res .cse17 (assume .cse17) (not- .cse17)))) :proves (- .cse12) :input))))) :proves (+ .cse11) :rup) (! (res .cse20 (and+ .cse20) (=>+ 1 .cse10)) :proves (- .cse2 - .cse11 + .cse10) :input)) (! (let ((.cse59 (= .cse19 (- 4)))) (let ((.cse21 (=> .cse59 true))) (let-proof ((.cse22 true+)) (res .cse21 (! (res true .cse22 (=>+ 1 .cse21)) :proves (+ .cse21) :input) (! (let ((.cse23 (and .cse21 .cse10))) (res .cse23 (and+ .cse23) (let ((.cse64 (= (ControlFlow 0 5) 2))) (let ((.cse24 (=> .cse64 .cse23))) (res .cse24 (=>+ 1 .cse24) (let ((.cse65 (= (ControlFlow 0 0) 5))) (let ((.cse25 (=> .cse65 .cse24))) (res .cse25 (=>+ 1 .cse25) (let ((.cse40 (- 0 1))) (let ((.cse50 (- 0 3)) (.cse38 (= .cse19 .cse40))) (let ((.cse35 (=> .cse38 .cse3)) (.cse49 (= .cse19 .cse50))) (let ((.cse60 (- 0 4)) (.cse48 (=> .cse49 .cse3)) (.cse34 (=> .cse3 .cse35))) (let ((.cse33 (and .cse48 .cse34)) (.cse58 (= .cse19 .cse60)) (.cse56 (= b b))) (let ((.cse57 (=> .cse58 .cse56)) (.cse32 (=> .cse56 .cse33))) (let ((.cse31 (and .cse57 .cse32))) (let ((.cse30 (=> .cse64 .cse31))) (let ((.cse26 (=> .cse65 .cse30))) (let ((.cse28 (not .cse26))) (res .cse26 (let ((.cse27 (not .cse25))) (res .cse27 (res .cse28 (not+ .cse28) (let ((.cse29 (= .cse28 .cse27))) (res .cse29 (res (= .cse26 .cse25) (res (= .cse30 .cse24) (res (= .cse31 .cse23) (let ((.cse54 (= .cse56 true))) (let ((.cse42 (= 0 0)) (.cse46 (= .cse19 .cse19))) (let-proof ((.cse55 (res true .cse22 (res .cse56 (refl b) (=+2 .cse54)))) (.cse43 (refl 0)) (.cse47 (refl .cse19))) (res (= .cse32 .cse10) (res (= .cse33 .cse20) (let ((.cse36 (= .cse3 .cse3))) (let-proof ((.cse37 (refl .cse3))) (res (= .cse34 .cse2) (res (= .cse35 .cse0) (res .cse36 .cse37 (res (= .cse38 .cse39) (res (= .cse40 (- 1)) (let ((.cse41 (* (- 1) 1))) (res (= .cse41 (- 1)) (poly* .cse41 (- 1)) (res .cse42 .cse43 (let ((.cse44 (+ 0 .cse41)) (.cse45 (+ 0 (- 1)))) (res (= .cse44 .cse45) (cong (+ 0 .cse41) (+ 0 (- 1))) (res (= .cse40 .cse44) (-def 0 1) (res (= .cse45 (- 1)) (poly+ .cse45 (- 1)) (trans .cse40 .cse44 .cse45 (- 1))))))))) (res .cse46 .cse47 (cong (= .cse19 .cse40) (= .cse19 (- 1))))) (cong (=> .cse38 .cse3) (=> .cse39 .cse3)))) (res .cse36 .cse37 (cong (=> .cse3 .cse35) (=> .cse3 .cse0)))) (res (= .cse48 .cse11) (res .cse36 .cse37 (res (= .cse49 .cse13) (res (= .cse50 (- 3)) (let ((.cse51 (* (- 1) 3))) (res (= .cse51 (- 3)) (poly* .cse51 (- 3)) (res .cse42 .cse43 (let ((.cse52 (+ 0 .cse51)) (.cse53 (+ 0 (- 3)))) (res (= .cse52 .cse53) (cong (+ 0 .cse51) (+ 0 (- 3))) (res (= .cse50 .cse52) (-def 0 3) (res (= .cse53 (- 3)) (poly+ .cse53 (- 3)) (trans .cse50 .cse52 .cse53 (- 3))))))))) (res .cse46 .cse47 (cong (= .cse19 .cse50) (= .cse19 (- 3))))) (cong (=> .cse49 .cse3) (=> .cse13 .cse3)))) (cong (and .cse48 .cse34) (and .cse11 .cse2)))))) (res .cse54 .cse55 (cong (=> .cse56 .cse33) (=> true .cse20)))) (res (= .cse57 .cse21) (res .cse54 .cse55 (res (= .cse58 .cse59) (res (= .cse60 (- 4)) (let ((.cse61 (* (- 1) 4))) (res (= .cse61 (- 4)) (poly* .cse61 (- 4)) (res .cse42 .cse43 (let ((.cse62 (+ 0 .cse61)) (.cse63 (+ 0 (- 4)))) (res (= .cse62 .cse63) (cong (+ 0 .cse61) (+ 0 (- 4))) (res (= .cse60 .cse62) (-def 0 4) (res (= .cse63 (- 4)) (poly+ .cse63 (- 4)) (trans .cse60 .cse62 .cse63 (- 4))))))))) (res .cse46 .cse47 (cong (= .cse19 .cse60) (= .cse19 (- 4))))) (cong (=> .cse58 .cse56) (=> .cse59 true)))) (cong (and .cse57 .cse32) (and .cse21 .cse10))))))) (res (= .cse64 .cse64) (refl .cse64) (cong (=> .cse64 .cse31) (=> .cse64 .cse23)))) (res (= .cse65 .cse65) (refl .cse65) (cong (=> .cse65 .cse30) (=> .cse65 .cse24)))) (cong (not .cse26) (not .cse25))) (=-2 .cse29)))) (not- .cse27))) (res .cse28 (assume .cse28) (not- .cse28))))))))))))))))))))) :proves (- .cse21 - .cse10) :input))))) :proves (- .cse10) :rup)))))) :proves (- .cse2) :rup))) (res .cse0 (let ((.cse1 (= 0 b))) (let ((.cse4 (= .cse3 .cse1))) (let-proof ((.cse5 (res .cse1 (res .cse3 (=+1 .cse4) (symm 0 b)) (res .cse3 (symm b 0) (=+2 .cse4))))) (res .cse1 (! (res .cse2 (! (res .cse3 (=>+ 0 .cse2) (res .cse4 .cse5 (=-2 .cse4))) :proves (+ .cse2 + .cse1) :input) .cse6) :proves (+ .cse1) :rup) (! (res .cse3 (let ((.cse7 (not .cse1))) (res .cse7 (let ((.cse8 (not .cse3))) (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res .cse4 .cse5 (cong (not .cse3) (not .cse1))) (=-2 .cse9))))) (not- .cse7))) (=>+ 1 .cse0)) :proves (+ .cse0 - .cse1) :input))))) (! (res .cse2 (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse0) :input) .cse6) :proves (- .cse0) :rup))))))) :proves () :rup)

