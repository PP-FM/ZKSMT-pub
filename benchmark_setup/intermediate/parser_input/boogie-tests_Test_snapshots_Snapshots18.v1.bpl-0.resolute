unsat
(! (let ((.cse82 (ControlFlow 0 4))) (let ((.cse2 (= .cse82 (- 3))) (.cse0 (= (- 3) .cse82))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 3) .cse82)) (res .cse2 (symm .cse82 (- 3)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse67 (ControlFlow 0 6))) (let ((.cse40 (= .cse67 4))) (let ((.cse5 (=> .cse40 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse16 (ControlFlow 0 2))) (let ((.cse10 (= .cse16 (- 1)))) (let ((.cse57 (= .cse67 2)) (.cse8 (=> .cse10 false))) (let ((.cse7 (=> .cse57 .cse8))) (let ((.cse17 (and .cse7 .cse5))) (let ((.cse6 (=> true .cse17))) (res .cse6 (res .cse7 (! (res .cse8 (! (let ((.cse9 (= (- 1) .cse16))) (let ((.cse11 (= .cse10 .cse9))) (let-proof ((.cse12 (res .cse9 (res .cse10 (=+1 .cse11) (symm (- 1) .cse16)) (res .cse10 (symm .cse16 (- 1)) (=+2 .cse11))))) (res .cse9 (! (res .cse10 (=>+ 0 .cse8) (res .cse11 .cse12 (=-2 .cse11))) :proves (+ .cse8 + .cse9) :input) (! (let ((.cse14 (not .cse10))) (res .cse10 (let ((.cse13 (not .cse9))) (res .cse13 (res .cse14 (not+ .cse14) (let ((.cse15 (= .cse14 .cse13))) (res .cse15 (res .cse11 .cse12 (cong (not .cse10) (not .cse9))) (=-2 .cse15)))) (not- .cse13))) (res .cse14 (assume .cse14) (not- .cse14)))) :proves (- .cse9) :input))))) :proves (+ .cse8) :rup) (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse8) :input)) :proves (+ .cse7) :rup) (! (res .cse17 (and+ .cse17) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) (! (let ((.cse62 (= .cse67 (- 7)))) (let ((.cse18 (=> .cse62 true))) (let-proof ((.cse19 true+)) (res .cse18 (! (res true .cse19 (=>+ 1 .cse18)) :proves (+ .cse18) :input) (let ((.cse84 (ControlFlow 0 8))) (let ((.cse68 (= .cse84 6)) (.cse21 (and .cse18 .cse6))) (let ((.cse20 (=> .cse68 .cse21))) (res .cse20 (! (res .cse21 (and+ .cse21) (=>+ 1 .cse20)) :proves (+ .cse20 - .cse6 - .cse18) :input) (! (let ((.cse72 (= (ControlFlow 0 5) 4))) (let ((.cse24 (and false .cse72))) (let ((.cse73 (= .cse84 5)) (.cse23 (=> .cse24 .cse1))) (let ((.cse22 (=> .cse73 .cse23))) (let-proof ((.cse25 false-)) (res .cse22 (! (res .cse23 (! (res .cse24 (! (=>+ 0 .cse23) :proves (+ .cse23 + .cse24) :input) (! (res false (and- 0 .cse24) .cse25) :proves (- .cse24) :input)) :proves (+ .cse23) :rup) (! (=>+ 1 .cse22) :proves (+ .cse22 - .cse23) :input)) :proves (+ .cse22) :rup) (! (let ((.cse26 (and .cse22 .cse20))) (res .cse26 (and+ .cse26) (let ((.cse83 (= (ControlFlow 0 0) 8))) (let ((.cse27 (=> .cse83 .cse26))) (res .cse27 (=>+ 1 .cse27) (let ((.cse76 (= 2 2)) (.cse78 (- 0 3)) (.cse49 (= 1 1)) (.cse51 (- 0 1))) (let ((.cse50 (= .cse16 .cse51)) (.cse44 (not .cse49)) (.cse77 (= .cse82 .cse78)) (.cse74 (not .cse76))) (let ((.cse41 (=> .cse77 .cse74)) (.cse43 (=> .cse50 .cse44))) (let ((.cse63 (- 0 7)) (.cse42 (=> .cse57 .cse43)) (.cse37 (=> .cse40 .cse41))) (let ((.cse36 (and .cse42 .cse37)) (.cse61 (= .cse67 .cse63)) (.cse53 (= 0 0)) (.cse47 (not true))) (let ((.cse71 (and .cse47 .cse72)) (.cse60 (=> .cse61 .cse53)) (.cse35 (=> .cse53 .cse36))) (let ((.cse34 (and .cse60 .cse35)) (.cse70 (=> .cse71 .cse41))) (let ((.cse69 (=> .cse73 .cse70)) (.cse33 (=> .cse68 .cse34))) (let ((.cse32 (and .cse69 .cse33))) (let ((.cse28 (=> .cse83 .cse32))) (let ((.cse30 (not .cse28))) (res .cse28 (let ((.cse29 (not .cse27))) (res .cse29 (res .cse30 (not+ .cse30) (let ((.cse31 (= .cse30 .cse29))) (res .cse31 (res (= .cse28 .cse27) (res (= .cse32 .cse26) (let ((.cse45 (= .cse47 false))) (let-proof ((.cse46 (res false (res .cse47 (=+1 .cse45) (res true .cse19 (not- .cse47))) .cse25)) (.cse54 (refl 0))) (let ((.cse38 (= .cse41 .cse1))) (let-proof ((.cse39 (res (= .cse74 false) (res .cse45 .cse46 (res (= .cse74 .cse47) (let ((.cse75 (= .cse76 true))) (res .cse75 (res true .cse19 (res .cse76 (refl 2) (=+2 .cse75))) (cong (not .cse76) (not true)))) (trans .cse74 .cse47 false))) (res (= .cse77 .cse2) (res (= .cse78 (- 3)) (let ((.cse79 (* (- 1) 3))) (res (= .cse79 (- 3)) (poly* .cse79 (- 3)) (res .cse53 .cse54 (let ((.cse80 (+ 0 .cse79)) (.cse81 (+ 0 (- 3)))) (res (= .cse80 .cse81) (cong (+ 0 .cse79) (+ 0 (- 3))) (res (= .cse78 .cse80) (-def 0 3) (res (= .cse81 (- 3)) (poly+ .cse81 (- 3)) (trans .cse78 .cse80 .cse81 (- 3))))))))) (res (= .cse82 .cse82) (refl .cse82) (cong (= .cse82 .cse78) (= .cse82 (- 3))))) (cong (=> .cse77 .cse74) (=> .cse2 false)))))) (res (= .cse33 .cse20) (res (= .cse34 .cse21) (let ((.cse58 (= .cse53 true))) (let-proof ((.cse59 (res true .cse19 (res .cse53 .cse54 (=+2 .cse58))))) (res (= .cse35 .cse6) (res (= .cse36 .cse17) (res (= .cse37 .cse5) (res .cse38 .cse39 (res (= .cse40 .cse40) (refl .cse40) (cong (=> .cse40 .cse41) (=> .cse40 .cse1)))) (res (= .cse42 .cse7) (res (= .cse43 .cse8) (res (= .cse44 false) (res .cse45 .cse46 (res (= .cse44 .cse47) (let ((.cse48 (= .cse49 true))) (res .cse48 (res true .cse19 (res .cse49 (refl 1) (=+2 .cse48))) (cong (not .cse49) (not true)))) (trans .cse44 .cse47 false))) (res (= .cse50 .cse10) (res (= .cse51 (- 1)) (let ((.cse52 (* (- 1) 1))) (res (= .cse52 (- 1)) (poly* .cse52 (- 1)) (res .cse53 .cse54 (let ((.cse55 (+ 0 .cse52)) (.cse56 (+ 0 (- 1)))) (res (= .cse55 .cse56) (cong (+ 0 .cse52) (+ 0 (- 1))) (res (= .cse51 .cse55) (-def 0 1) (res (= .cse56 (- 1)) (poly+ .cse56 (- 1)) (trans .cse51 .cse55 .cse56 (- 1))))))))) (res (= .cse16 .cse16) (refl .cse16) (cong (= .cse16 .cse51) (= .cse16 (- 1))))) (cong (=> .cse50 .cse44) (=> .cse10 false)))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse43) (=> .cse57 .cse8)))) (cong (and .cse42 .cse37) (and .cse7 .cse5)))) (res .cse58 .cse59 (cong (=> .cse53 .cse36) (=> true .cse17)))) (res (= .cse60 .cse18) (res .cse58 .cse59 (res (= .cse61 .cse62) (res (= .cse63 (- 7)) (let ((.cse64 (* (- 1) 7))) (res (= .cse64 (- 7)) (poly* .cse64 (- 7)) (res .cse53 .cse54 (let ((.cse65 (+ 0 .cse64)) (.cse66 (+ 0 (- 7)))) (res (= .cse65 .cse66) (cong (+ 0 .cse64) (+ 0 (- 7))) (res (= .cse63 .cse65) (-def 0 7) (res (= .cse66 (- 7)) (poly+ .cse66 (- 7)) (trans .cse63 .cse65 .cse66 (- 7))))))))) (res (= .cse67 .cse67) (refl .cse67) (cong (= .cse67 .cse63) (= .cse67 (- 7))))) (cong (=> .cse61 .cse53) (=> .cse62 true)))) (cong (and .cse60 .cse35) (and .cse18 .cse6)))))) (res (= .cse68 .cse68) (refl .cse68) (cong (=> .cse68 .cse34) (=> .cse68 .cse21)))) (res (= .cse69 .cse22) (res (= .cse70 .cse23) (res .cse38 .cse39 (res (= .cse71 .cse24) (res (= .cse72 .cse72) (refl .cse72) (res .cse45 .cse46 (cong (and .cse47 .cse72) (and false .cse72)))) (cong (=> .cse71 .cse41) (=> .cse24 .cse1)))) (res (= .cse73 .cse73) (refl .cse73) (cong (=> .cse73 .cse70) (=> .cse73 .cse23)))) (cong (and .cse69 .cse33) (and .cse22 .cse20)))))))) (res (= .cse83 .cse83) (refl .cse83) (cong (=> .cse83 .cse32) (=> .cse83 .cse26)))) (cong (not .cse28) (not .cse27))) (=-2 .cse31)))) (not- .cse29))) (res .cse30 (assume .cse30) (not- .cse30))))))))))))))))))) :proves (- .cse22 - .cse20) :input))))))) :proves (- .cse20) :rup))))))))) :proves (- .cse6) :rup)))))))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse86 (not .cse2))) (res .cse2 (let ((.cse85 (not .cse0))) (res .cse85 (res .cse86 (not+ .cse86) (let ((.cse87 (= .cse86 .cse85))) (res .cse87 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse87)))) (not- .cse85))) (res .cse86 (assume .cse86) (not- .cse86)))) :proves (- .cse0) :input)))))) :proves () :rup)

