unsat
(! (let ((.cse19 (ControlFlow 0 2))) (let ((.cse1 (= .cse19 (- 1))) (.cse0 (= (- 1) .cse19))) (let ((.cse23 (= .cse1 .cse0))) (let-proof ((.cse24 (res .cse0 (res .cse1 (=+1 .cse23) (symm (- 1) .cse19)) (res .cse1 (symm .cse19 (- 1)) (=+2 .cse23))))) (res .cse0 (! (res .cse1 (let ((.cse13 (= g@0 2))) (let ((.cse2 (=> .cse1 .cse13))) (res .cse2 (=>+ 0 .cse2) (let ((.cse20 (and (= g@0 (+ g 1)) (= (ControlFlow 0 3) 2)))) (let ((.cse3 (=> .cse20 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse21 (and (= g 0) (= (ControlFlow 0 4) 3)))) (let ((.cse4 (=> .cse21 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse22 (= (ControlFlow 0 0) 4))) (let ((.cse5 (=> .cse22 .cse4))) (res .cse5 (=>+ 1 .cse5) (let ((.cse15 (- 0 1))) (let ((.cse14 (= .cse19 .cse15))) (let ((.cse12 (=> .cse14 .cse13))) (let ((.cse11 (=> .cse20 .cse12))) (let ((.cse10 (=> .cse21 .cse11))) (let ((.cse6 (=> .cse22 .cse10))) (let ((.cse8 (not .cse6))) (res .cse6 (let ((.cse7 (not .cse5))) (res .cse7 (res .cse8 (not+ .cse8) (let ((.cse9 (= .cse8 .cse7))) (res .cse9 (res (= .cse6 .cse5) (res (= .cse10 .cse4) (res (= .cse11 .cse3) (res (= .cse12 .cse2) (res (= .cse13 .cse13) (refl .cse13) (res (= .cse14 .cse1) (res (= .cse15 (- 1)) (let ((.cse16 (* (- 1) 1))) (res (= .cse16 (- 1)) (poly* .cse16 (- 1)) (res (= 0 0) (refl 0) (let ((.cse17 (+ 0 .cse16)) (.cse18 (+ 0 (- 1)))) (res (= .cse17 .cse18) (cong (+ 0 .cse16) (+ 0 (- 1))) (res (= .cse15 .cse17) (-def 0 1) (res (= .cse18 (- 1)) (poly+ .cse18 (- 1)) (trans .cse15 .cse17 .cse18 (- 1))))))))) (res (= .cse19 .cse19) (refl .cse19) (cong (= .cse19 .cse15) (= .cse19 (- 1))))) (cong (=> .cse14 .cse13) (=> .cse1 .cse13)))) (res (= .cse20 .cse20) (refl .cse20) (cong (=> .cse20 .cse12) (=> .cse20 .cse2)))) (res (= .cse21 .cse21) (refl .cse21) (cong (=> .cse21 .cse11) (=> .cse21 .cse3)))) (res (= .cse22 .cse22) (refl .cse22) (cong (=> .cse22 .cse10) (=> .cse22 .cse4)))) (cong (not .cse6) (not .cse5))) (=-2 .cse9)))) (not- .cse7))) (res .cse8 (assume .cse8) (not- .cse8)))))))))))))))))))))) (res .cse23 .cse24 (=-2 .cse23))) :proves (+ .cse0) :input) (! (let ((.cse26 (not .cse1))) (res .cse1 (let ((.cse25 (not .cse0))) (res .cse25 (res .cse26 (not+ .cse26) (let ((.cse27 (= .cse26 .cse25))) (res .cse27 (res .cse23 .cse24 (cong (not .cse1) (not .cse0))) (=-2 .cse27)))) (not- .cse25))) (res .cse26 (assume .cse26) (not- .cse26)))) :proves (- .cse0) :input)))))) :proves () :rup)

