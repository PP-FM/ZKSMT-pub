unsat
(! (let ((.cse104 (ControlFlow 0 7))) (let ((.cse2 (= .cse104 (- 8))) (.cse0 (= (- 8) .cse104))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 8) .cse104)) (res .cse2 (symm .cse104 (- 8)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse1 (=> .cse2 false))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse148 (ControlFlow 0 2))) (let ((.cse143 (= .cse148 (- 1)))) (let ((.cse94 (= .cse104 2)) (.cse7 (=> .cse143 true))) (let ((.cse6 (=> .cse94 .cse7))) (let-proof ((.cse17 true+)) (let ((.cse5 (=> false .cse6))) (let-proof ((.cse8 (! (res true .cse17 (=>+ 1 .cse7)) :proves (+ .cse7) :input))) (res .cse5 (! (res .cse6 (! (res .cse7 .cse8 (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (let ((.cse150 (ControlFlow 0 13))) (let ((.cse109 (= .cse150 7)) (.cse10 (and .cse1 .cse5))) (let ((.cse9 (=> .cse109 .cse10))) (res .cse9 (! (res .cse10 (and+ .cse10) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse1 - .cse5) :input) (! (let ((.cse67 (ControlFlow 0 9))) (let ((.cse51 (= .cse67 2))) (let ((.cse15 (=> .cse51 .cse7)) (.cse58 (= .cse67 (- 10)))) (let ((.cse16 (=> .cse58 true)) (.cse14 (=> true .cse15))) (let ((.cse18 (and .cse16 .cse14)) (.cse73 (= .cse67 (- 11)))) (let ((.cse19 (=> .cse73 true)) (.cse13 (=> true .cse18))) (let ((.cse20 (and .cse19 .cse13)) (.cse83 (= .cse67 (- 12)))) (let ((.cse21 (=> .cse83 true)) (.cse12 (=> true .cse20))) (let ((.cse88 (= .cse150 9)) (.cse22 (and .cse21 .cse12))) (let ((.cse11 (=> .cse88 .cse22))) (res .cse11 (! (res .cse12 (! (res .cse13 (! (res .cse14 (! (res .cse15 (! (res .cse7 .cse8 (! (=>+ 1 .cse15) :proves (+ .cse15 - .cse7) :input)) :proves (+ .cse15) :rup) (! (=>+ 1 .cse14) :proves (+ .cse14 - .cse15) :input)) :proves (+ .cse14) :rup) (res .cse16 (! (res true .cse17 (=>+ 1 .cse16)) :proves (+ .cse16) :input) (! (res .cse18 (and+ .cse18) (=>+ 1 .cse13)) :proves (+ .cse13 - .cse16 - .cse14) :input))) :proves (+ .cse13) :rup) (res .cse19 (! (res true .cse17 (=>+ 1 .cse19)) :proves (+ .cse19) :input) (! (res .cse20 (and+ .cse20) (=>+ 1 .cse12)) :proves (+ .cse12 - .cse19 - .cse13) :input))) :proves (+ .cse12) :rup) (res .cse21 (! (res true .cse17 (=>+ 1 .cse21)) :proves (+ .cse21) :input) (! (res .cse22 (and+ .cse22) (=>+ 1 .cse11)) :proves (+ .cse11 - .cse21 - .cse12) :input))) :proves (+ .cse11) :rup) (let ((.cse138 (ControlFlow 0 3))) (let ((.cse128 (= .cse138 2)) (.cse133 (= .cse138 (- 4)))) (let ((.cse25 (=> .cse133 true)) (.cse24 (=> .cse128 .cse7))) (let ((.cse139 (= .cse150 3)) (.cse26 (and .cse25 .cse24))) (let ((.cse23 (=> .cse139 .cse26))) (res .cse23 (! (res .cse24 (! (res .cse7 .cse8 (! (=>+ 1 .cse24) :proves (+ .cse24 - .cse7) :input)) :proves (+ .cse24) :rup) (res .cse25 (! (res true .cse17 (=>+ 1 .cse25)) :proves (+ .cse25) :input) (! (res .cse26 (and+ .cse26) (=>+ 1 .cse23)) :proves (+ .cse23 - .cse25 - .cse24) :input))) :proves (+ .cse23) :rup) (let ((.cse123 (ControlFlow 0 5))) (let ((.cse115 (= .cse123 2))) (let ((.cse29 (=> .cse115 .cse7)) (.cse118 (= .cse123 (- 6)))) (let ((.cse30 (=> .cse118 true)) (.cse28 (=> true .cse29))) (let ((.cse124 (= .cse150 5)) (.cse31 (and .cse30 .cse28))) (let ((.cse27 (=> .cse124 .cse31))) (res .cse27 (! (res .cse28 (! (res .cse29 (! (res .cse7 .cse8 (! (=>+ 1 .cse29) :proves (+ .cse29 - .cse7) :input)) :proves (+ .cse29) :rup) (! (=>+ 1 .cse28) :proves (+ .cse28 - .cse29) :input)) :proves (+ .cse28) :rup) (res .cse30 (! (res true .cse17 (=>+ 1 .cse30)) :proves (+ .cse30) :input) (! (res .cse31 (and+ .cse31) (=>+ 1 .cse27)) :proves (+ .cse27 - .cse30 - .cse28) :input))) :proves (+ .cse27) :rup) (! (let ((.cse32 (and .cse23 .cse27))) (res .cse32 (and+ .cse32) (let ((.cse33 (and .cse32 .cse9))) (res .cse33 (and+ .cse33) (let ((.cse34 (and .cse33 .cse11))) (res .cse34 (and+ .cse34) (let ((.cse149 (= (ControlFlow 0 0) 13))) (let ((.cse35 (=> .cse149 .cse34))) (res .cse35 (=>+ 1 .cse35) (let ((.cse144 (- 0 1))) (let ((.cse142 (= .cse148 .cse144)) (.cse141 (= 3 3))) (let ((.cse59 (- 0 10)) (.cse52 (=> .cse142 .cse141))) (let ((.cse48 (=> .cse51 .cse52)) (.cse57 (= .cse67 .cse59)) (.cse55 (= 5 5))) (let ((.cse134 (- 0 4)) (.cse119 (- 0 6)) (.cse74 (- 0 11)) (.cse56 (=> .cse57 .cse55)) (.cse47 (=> .cse55 .cse48))) (let ((.cse46 (and .cse56 .cse47)) (.cse72 (= .cse67 .cse74)) (.cse70 (= 4 4)) (.cse114 (=> .cse115 .cse52)) (.cse117 (= .cse123 .cse119)) (.cse132 (= .cse138 .cse134)) (.cse131 (= 1 1)) (.cse108 (= 6 6)) (.cse100 (- 0 8))) (let ((.cse93 (=> .cse94 .cse52)) (.cse99 (= .cse104 .cse100)) (.cse97 (not .cse108)) (.cse129 (=> .cse132 .cse131)) (.cse127 (=> .cse128 .cse52)) (.cse116 (=> .cse117 .cse55)) (.cse113 (=> .cse55 .cse114)) (.cse84 (- 0 12)) (.cse71 (=> .cse72 .cse70)) (.cse45 (=> .cse70 .cse46))) (let ((.cse44 (and .cse71 .cse45)) (.cse82 (= .cse67 .cse84)) (.cse80 (= 2 2)) (.cse112 (and .cse116 .cse113)) (.cse126 (and .cse129 .cse127)) (.cse98 (=> .cse99 .cse97)) (.cse92 (=> .cse97 .cse93))) (let ((.cse91 (and .cse98 .cse92)) (.cse125 (=> .cse139 .cse126)) (.cse111 (=> .cse124 .cse112)) (.cse81 (=> .cse82 .cse80)) (.cse43 (=> .cse80 .cse44))) (let ((.cse42 (and .cse81 .cse43)) (.cse110 (and .cse125 .cse111)) (.cse90 (=> .cse109 .cse91))) (let ((.cse89 (and .cse110 .cse90)) (.cse41 (=> .cse88 .cse42))) (let ((.cse40 (and .cse89 .cse41))) (let ((.cse36 (=> .cse149 .cse40))) (let ((.cse38 (not .cse36))) (res .cse36 (let ((.cse37 (not .cse35))) (res .cse37 (res .cse38 (not+ .cse38) (let ((.cse39 (= .cse38 .cse37))) (res .cse39 (res (= .cse36 .cse35) (res (= .cse40 .cse34) (let ((.cse61 (= 0 0)) (.cse53 (= .cse55 true))) (let-proof ((.cse62 (refl 0))) (let ((.cse49 (= .cse52 .cse7))) (let-proof ((.cse54 (res true .cse17 (res .cse55 (refl 5) (=+2 .cse53)))) (.cse50 (let ((.cse140 (= .cse141 true))) (res .cse140 (res true .cse17 (res .cse141 (refl 3) (=+2 .cse140))) (res (= .cse142 .cse143) (res (= .cse144 (- 1)) (let ((.cse145 (* (- 1) 1))) (res (= .cse145 (- 1)) (poly* .cse145 (- 1)) (res .cse61 .cse62 (let ((.cse146 (+ 0 .cse145)) (.cse147 (+ 0 (- 1)))) (res (= .cse146 .cse147) (cong (+ 0 .cse145) (+ 0 (- 1))) (res (= .cse144 .cse146) (-def 0 1) (res (= .cse147 (- 1)) (poly+ .cse147 (- 1)) (trans .cse144 .cse146 .cse147 (- 1))))))))) (res (= .cse148 .cse148) (refl .cse148) (cong (= .cse148 .cse144) (= .cse148 (- 1))))) (cong (=> .cse142 .cse141) (=> .cse143 true))))))) (res (= .cse41 .cse11) (res (= .cse42 .cse22) (let ((.cse78 (= .cse80 true))) (let ((.cse65 (= .cse67 .cse67))) (let-proof ((.cse79 (res true .cse17 (res .cse80 (refl 2) (=+2 .cse78)))) (.cse66 (refl .cse67))) (res (= .cse43 .cse12) (res (= .cse44 .cse20) (let ((.cse68 (= .cse70 true))) (let-proof ((.cse69 (res true .cse17 (res .cse70 (refl 4) (=+2 .cse68))))) (res (= .cse45 .cse13) (res (= .cse46 .cse18) (res (= .cse47 .cse14) (res (= .cse48 .cse15) (res .cse49 .cse50 (res (= .cse51 .cse51) (refl .cse51) (cong (=> .cse51 .cse52) (=> .cse51 .cse7)))) (res .cse53 .cse54 (cong (=> .cse55 .cse48) (=> true .cse15)))) (res (= .cse56 .cse16) (res .cse53 .cse54 (res (= .cse57 .cse58) (res (= .cse59 (- 10)) (let ((.cse60 (* (- 1) 10))) (res (= .cse60 (- 10)) (poly* .cse60 (- 10)) (res .cse61 .cse62 (let ((.cse63 (+ 0 .cse60)) (.cse64 (+ 0 (- 10)))) (res (= .cse63 .cse64) (cong (+ 0 .cse60) (+ 0 (- 10))) (res (= .cse59 .cse63) (-def 0 10) (res (= .cse64 (- 10)) (poly+ .cse64 (- 10)) (trans .cse59 .cse63 .cse64 (- 10))))))))) (res .cse65 .cse66 (cong (= .cse67 .cse59) (= .cse67 (- 10))))) (cong (=> .cse57 .cse55) (=> .cse58 true)))) (cong (and .cse56 .cse47) (and .cse16 .cse14)))) (res .cse68 .cse69 (cong (=> .cse70 .cse46) (=> true .cse18)))) (res (= .cse71 .cse19) (res .cse68 .cse69 (res (= .cse72 .cse73) (res (= .cse74 (- 11)) (let ((.cse75 (* (- 1) 11))) (res (= .cse75 (- 11)) (poly* .cse75 (- 11)) (res .cse61 .cse62 (let ((.cse76 (+ 0 .cse75)) (.cse77 (+ 0 (- 11)))) (res (= .cse76 .cse77) (cong (+ 0 .cse75) (+ 0 (- 11))) (res (= .cse74 .cse76) (-def 0 11) (res (= .cse77 (- 11)) (poly+ .cse77 (- 11)) (trans .cse74 .cse76 .cse77 (- 11))))))))) (res .cse65 .cse66 (cong (= .cse67 .cse74) (= .cse67 (- 11))))) (cong (=> .cse72 .cse70) (=> .cse73 true)))) (cong (and .cse71 .cse45) (and .cse19 .cse13)))))) (res .cse78 .cse79 (cong (=> .cse80 .cse44) (=> true .cse20)))) (res (= .cse81 .cse21) (res .cse78 .cse79 (res (= .cse82 .cse83) (res (= .cse84 (- 12)) (let ((.cse85 (* (- 1) 12))) (res (= .cse85 (- 12)) (poly* .cse85 (- 12)) (res .cse61 .cse62 (let ((.cse86 (+ 0 .cse85)) (.cse87 (+ 0 (- 12)))) (res (= .cse86 .cse87) (cong (+ 0 .cse85) (+ 0 (- 12))) (res (= .cse84 .cse86) (-def 0 12) (res (= .cse87 (- 12)) (poly+ .cse87 (- 12)) (trans .cse84 .cse86 .cse87 (- 12))))))))) (res .cse65 .cse66 (cong (= .cse67 .cse84) (= .cse67 (- 12))))) (cong (=> .cse82 .cse80) (=> .cse83 true)))) (cong (and .cse81 .cse43) (and .cse21 .cse12))))))) (res (= .cse88 .cse88) (refl .cse88) (cong (=> .cse88 .cse42) (=> .cse88 .cse22)))) (res (= .cse89 .cse33) (res (= .cse90 .cse9) (res (= .cse91 .cse10) (let ((.cse95 (= .cse97 false))) (let-proof ((.cse96 (let ((.cse106 (not true))) (let ((.cse105 (= .cse106 false))) (res .cse105 (res false (res .cse106 (=+1 .cse105) (res true .cse17 (not- .cse106))) false-) (res (= .cse97 .cse106) (let ((.cse107 (= .cse108 true))) (res .cse107 (res true .cse17 (res .cse108 (refl 6) (=+2 .cse107))) (cong (not .cse108) (not true)))) (trans .cse97 .cse106 false))))))) (res (= .cse92 .cse5) (res (= .cse93 .cse6) (res .cse49 .cse50 (res (= .cse94 .cse94) (refl .cse94) (cong (=> .cse94 .cse52) (=> .cse94 .cse7)))) (res .cse95 .cse96 (cong (=> .cse97 .cse93) (=> false .cse6)))) (res (= .cse98 .cse1) (res .cse95 .cse96 (res (= .cse99 .cse2) (res (= .cse100 (- 8)) (let ((.cse101 (* (- 1) 8))) (res (= .cse101 (- 8)) (poly* .cse101 (- 8)) (res .cse61 .cse62 (let ((.cse102 (+ 0 .cse101)) (.cse103 (+ 0 (- 8)))) (res (= .cse102 .cse103) (cong (+ 0 .cse101) (+ 0 (- 8))) (res (= .cse100 .cse102) (-def 0 8) (res (= .cse103 (- 8)) (poly+ .cse103 (- 8)) (trans .cse100 .cse102 .cse103 (- 8))))))))) (res (= .cse104 .cse104) (refl .cse104) (cong (= .cse104 .cse100) (= .cse104 (- 8))))) (cong (=> .cse99 .cse97) (=> .cse2 false)))) (cong (and .cse98 .cse92) (and .cse1 .cse5)))))) (res (= .cse109 .cse109) (refl .cse109) (cong (=> .cse109 .cse91) (=> .cse109 .cse10)))) (res (= .cse110 .cse32) (res (= .cse111 .cse27) (res (= .cse112 .cse31) (res (= .cse113 .cse28) (res (= .cse114 .cse29) (res .cse49 .cse50 (res (= .cse115 .cse115) (refl .cse115) (cong (=> .cse115 .cse52) (=> .cse115 .cse7)))) (res .cse53 .cse54 (cong (=> .cse55 .cse114) (=> true .cse29)))) (res (= .cse116 .cse30) (res .cse53 .cse54 (res (= .cse117 .cse118) (res (= .cse119 (- 6)) (let ((.cse120 (* (- 1) 6))) (res (= .cse120 (- 6)) (poly* .cse120 (- 6)) (res .cse61 .cse62 (let ((.cse121 (+ 0 .cse120)) (.cse122 (+ 0 (- 6)))) (res (= .cse121 .cse122) (cong (+ 0 .cse120) (+ 0 (- 6))) (res (= .cse119 .cse121) (-def 0 6) (res (= .cse122 (- 6)) (poly+ .cse122 (- 6)) (trans .cse119 .cse121 .cse122 (- 6))))))))) (res (= .cse123 .cse123) (refl .cse123) (cong (= .cse123 .cse119) (= .cse123 (- 6))))) (cong (=> .cse117 .cse55) (=> .cse118 true)))) (cong (and .cse116 .cse113) (and .cse30 .cse28)))) (res (= .cse124 .cse124) (refl .cse124) (cong (=> .cse124 .cse112) (=> .cse124 .cse31)))) (res (= .cse125 .cse23) (res (= .cse126 .cse26) (res (= .cse127 .cse24) (res .cse49 .cse50 (res (= .cse128 .cse128) (refl .cse128) (cong (=> .cse128 .cse52) (=> .cse128 .cse7)))) (res (= .cse129 .cse25) (let ((.cse130 (= .cse131 true))) (res .cse130 (res true .cse17 (res .cse131 (refl 1) (=+2 .cse130))) (res (= .cse132 .cse133) (res (= .cse134 (- 4)) (let ((.cse135 (* (- 1) 4))) (res (= .cse135 (- 4)) (poly* .cse135 (- 4)) (res .cse61 .cse62 (let ((.cse136 (+ 0 .cse135)) (.cse137 (+ 0 (- 4)))) (res (= .cse136 .cse137) (cong (+ 0 .cse135) (+ 0 (- 4))) (res (= .cse134 .cse136) (-def 0 4) (res (= .cse137 (- 4)) (poly+ .cse137 (- 4)) (trans .cse134 .cse136 .cse137 (- 4))))))))) (res (= .cse138 .cse138) (refl .cse138) (cong (= .cse138 .cse134) (= .cse138 (- 4))))) (cong (=> .cse132 .cse131) (=> .cse133 true))))) (cong (and .cse129 .cse127) (and .cse25 .cse24)))) (res (= .cse139 .cse139) (refl .cse139) (cong (=> .cse139 .cse126) (=> .cse139 .cse26)))) (cong (and .cse125 .cse111) (and .cse23 .cse27)))) (cong (and .cse110 .cse90) (and .cse32 .cse9)))) (cong (and .cse89 .cse41) (and .cse33 .cse11)))))))) (res (= .cse149 .cse149) (refl .cse149) (cong (=> .cse149 .cse40) (=> .cse149 .cse34)))) (cong (not .cse36) (not .cse35))) (=-2 .cse39)))) (not- .cse37))) (res .cse38 (assume .cse38) (not- .cse38)))))))))))))))))))))))))) :proves (- .cse9 - .cse27 - .cse23 - .cse11) :input))))))))))))))))))))))))) :proves (- .cse9) :rup))))))))))))) :proves (- .cse1) :rup))) :proves (+ .cse0) :rup) (! (let ((.cse152 (not .cse2))) (res .cse2 (let ((.cse151 (not .cse0))) (res .cse151 (res .cse152 (not+ .cse152) (let ((.cse153 (= .cse152 .cse151))) (res .cse153 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse153)))) (not- .cse151))) (res .cse152 (assume .cse152) (not- .cse152)))) :proves (- .cse0) :input)))))) :proves () :rup)

