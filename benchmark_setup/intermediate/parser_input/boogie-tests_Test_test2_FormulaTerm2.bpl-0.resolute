unsat
(! (let ((.cse0 (= a b))) (let ((.cse26 (ControlFlow 0 2)) (.cse3 (xor t@0 .cse0))) (let ((.cse8 (not .cse3)) (.cse21 (= .cse26 (- 1)))) (let ((.cse5 (and .cse8 .cse21))) (let ((.cse6 (=> .cse5 t@0))) (let ((.cse1 (=> .cse0 .cse6))) (let-proof ((.cse4 (xor+ (t@0 .cse0) (t@0) (.cse0))) (.cse9 (not- .cse8))) (let-proof ((.cse2 (let ((.cse29 (= (ControlFlow 0 3) 2))) (let ((.cse10 (=> .cse29 .cse1))) (res .cse10 (=>+ 1 .cse10) (let ((.cse30 (= (ControlFlow 0 0) 3))) (let ((.cse11 (=> .cse30 .cse10))) (res .cse11 (=>+ 1 .cse11) (let ((.cse22 (- 0 1))) (let ((.cse28 (= t@0 .cse0)) (.cse20 (= .cse26 .cse22))) (let ((.cse19 (and .cse28 .cse20))) (let ((.cse18 (=> .cse19 t@0))) (let ((.cse17 (=> .cse0 .cse18))) (let ((.cse16 (=> .cse29 .cse17))) (let ((.cse12 (=> .cse30 .cse16))) (let ((.cse14 (not .cse12))) (res .cse12 (let ((.cse13 (not .cse11))) (res .cse13 (res .cse14 (not+ .cse14) (let ((.cse15 (= .cse14 .cse13))) (res .cse15 (res (= .cse12 .cse11) (res (= .cse16 .cse10) (res (= .cse17 .cse1) (res (= .cse18 .cse6) (res (= t@0 t@0) (refl t@0) (res (= .cse19 .cse5) (res (= .cse20 .cse21) (res (= .cse22 (- 1)) (let ((.cse23 (* (- 1) 1))) (res (= .cse23 (- 1)) (poly* .cse23 (- 1)) (res (= 0 0) (refl 0) (let ((.cse24 (+ 0 .cse23)) (.cse25 (+ 0 (- 1)))) (res (= .cse24 .cse25) (cong (+ 0 .cse23) (+ 0 (- 1))) (res (= .cse22 .cse24) (-def 0 1) (res (= .cse25 (- 1)) (poly+ .cse25 (- 1)) (trans .cse22 .cse24 .cse25 (- 1))))))))) (res (= .cse26 .cse26) (refl .cse26) (cong (= .cse26 .cse22) (= .cse26 (- 1))))) (let ((.cse27 (= .cse28 .cse8))) (res .cse27 (res .cse28 (res .cse3 (res t@0 (res .cse0 (=+1 .cse28) .cse4) (res .cse0 (xor+ (t@0 .cse0) (.cse0) (t@0)) (=+2 .cse28))) (res .cse8 (=+1 .cse27) .cse9)) (res .cse3 (res .cse8 (not+ .cse8) (=+2 .cse27)) (res t@0 (res .cse0 (xor+ (t@0) (.cse0) (t@0 .cse0)) (=-1 .cse28)) (res .cse0 (=-2 .cse28) (xor- (t@0) (.cse0) (t@0 .cse0)))))) (cong (and .cse28 .cse20) (and .cse8 .cse21))))) (cong (=> .cse19 t@0) (=> .cse5 t@0)))) (res (= .cse0 .cse0) (refl .cse0) (cong (=> .cse0 .cse18) (=> .cse0 .cse6)))) (res (= .cse29 .cse29) (refl .cse29) (cong (=> .cse29 .cse17) (=> .cse29 .cse1)))) (res (= .cse30 .cse30) (refl .cse30) (cong (=> .cse30 .cse16) (=> .cse30 .cse10)))) (cong (not .cse12) (not .cse11))) (=-2 .cse15)))) (not- .cse13))) (res .cse14 (assume .cse14) (not- .cse14))))))))))))))))))) (res .cse0 (! (res .cse1 (=>+ 0 .cse1) .cse2) :proves (+ .cse0) :input) (! (let-proof ((.cse7 (res .cse1 (=>+ 1 .cse1) .cse2))) (res t@0 (! (res .cse3 .cse4 (res .cse5 (res .cse6 (=>+ 0 .cse6) .cse7) (res .cse8 (and- 0 .cse5) .cse9))) :proves (- .cse0 + t@0) :input) (! (res .cse6 (=>+ 1 .cse6) .cse7) :proves (- t@0) :input))) :proves (- .cse0) :rup)))))))))) :proves () :rup)

