unsat
(! (let ((.cse59 (+ x (- 4))) (.cse34 (+ x (- 10)))) (let ((.cse31 (<= .cse34 0)) (.cse56 (<= .cse59 0)) (.cse66 (ControlFlow 0 2))) (let ((.cse61 (= .cse66 (- 1))) (.cse53 (not .cse56)) (.cse28 (not .cse31)) (.cse25 (= (ControlFlow 0 6) 2))) (let ((.cse24 (and .cse28 .cse25)) (.cse2 (=> .cse61 .cse53)) (.cse68 (ControlFlow 0 7))) (let ((.cse36 (= .cse68 6)) (.cse1 (=> .cse24 .cse2))) (let ((.cse0 (=> .cse36 .cse1))) (let-proof ((.cse3 (! (let ((.cse69 (= (- 1) .cse66))) (let ((.cse70 (= .cse61 .cse69))) (let-proof ((.cse71 (res .cse69 (res .cse61 (=+1 .cse70) (symm (- 1) .cse66)) (res .cse61 (symm .cse66 (- 1)) (=+2 .cse70))))) (res .cse69 (! (res .cse61 (=>+ 0 .cse2) (res .cse70 .cse71 (=-2 .cse70))) :proves (+ .cse2 + .cse69) :input) (! (let ((.cse73 (not .cse61))) (res .cse61 (let ((.cse72 (not .cse69))) (res .cse72 (res .cse73 (not+ .cse73) (let ((.cse74 (= .cse73 .cse72))) (res .cse74 (res .cse70 .cse71 (cong (not .cse61) (not .cse69))) (=-2 .cse74)))) (not- .cse72))) (res .cse73 (assume .cse73) (not- .cse73)))) :proves (- .cse69) :input))))) :proves (+ .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 .cse3 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse45 (and (= x 2) (= (ControlFlow 0 4) 2)))) (let ((.cse46 (= .cse68 4)) (.cse5 (=> .cse45 .cse2))) (let ((.cse4 (=> .cse46 .cse5))) (res .cse4 (! (res .cse5 (! (res .cse2 .cse3 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse2) :input)) :proves (+ .cse5) :rup) (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse5) :input)) :proves (+ .cse4) :rup) (let ((.cse40 (and (= x 3) (= (ControlFlow 0 5) 2)))) (let ((.cse41 (= .cse68 5)) (.cse7 (=> .cse40 .cse2))) (let ((.cse6 (=> .cse41 .cse7))) (res .cse6 (! (res .cse7 (! (res .cse2 .cse3 (! (=>+ 1 .cse7) :proves (+ .cse7 - .cse2) :input)) :proves (+ .cse7) :rup) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (let ((.cse49 (and (= x 1) (= (ControlFlow 0 3) 2)))) (let ((.cse50 (= .cse68 3)) (.cse9 (=> .cse49 .cse2))) (let ((.cse8 (=> .cse50 .cse9))) (res .cse8 (! (res .cse9 (! (res .cse2 .cse3 (! (=>+ 1 .cse9) :proves (+ .cse9 - .cse2) :input)) :proves (+ .cse9) :rup) (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse9) :input)) :proves (+ .cse8) :rup) (! (let ((.cse10 (and .cse8 .cse4))) (res .cse10 (and+ .cse10) (let ((.cse11 (and .cse10 .cse6))) (res .cse11 (and+ .cse11) (let ((.cse12 (and .cse11 .cse0))) (res .cse12 (and+ .cse12) (let ((.cse67 (= (ControlFlow 0 0) 7))) (let ((.cse13 (=> .cse67 .cse12))) (res .cse13 (=>+ 1 .cse13) (let ((.cse62 (- 0 1))) (let ((.cse60 (= .cse66 .cse62)) (.cse54 (> x 4))) (let ((.cse35 (=> .cse60 .cse54))) (let ((.cse29 (> x 10)) (.cse44 (=> .cse45 .cse35)) (.cse48 (=> .cse49 .cse35))) (let ((.cse39 (=> .cse40 .cse35)) (.cse47 (=> .cse50 .cse48)) (.cse43 (=> .cse46 .cse44)) (.cse23 (and .cse29 .cse25))) (let ((.cse20 (=> .cse23 .cse35)) (.cse42 (and .cse47 .cse43)) (.cse38 (=> .cse41 .cse39))) (let ((.cse37 (and .cse42 .cse38)) (.cse19 (=> .cse36 .cse20))) (let ((.cse18 (and .cse37 .cse19))) (let ((.cse14 (=> .cse67 .cse18))) (let ((.cse16 (not .cse14))) (res .cse14 (let ((.cse15 (not .cse13))) (res .cse15 (res .cse16 (not+ .cse16) (let ((.cse17 (= .cse16 .cse15))) (res .cse17 (res (= .cse14 .cse13) (res (= .cse18 .cse12) (let ((.cse21 (= .cse35 .cse2))) (let-proof ((.cse22 (let ((.cse51 (= .cse54 .cse53))) (res .cse51 (let ((.cse55 (< 4 x))) (let ((.cse52 (= .cse54 .cse55))) (res .cse52 (>def x 4) (res .cse53 (res .cse54 (=+1 .cse51) (res .cse55 (=-2 .cse52) (res .cse56 (not+ .cse53) (farkas 1 .cse55 1 .cse56)))) (res .cse54 (res .cse55 (let ((.cse57 (<= x 4))) (res .cse57 (total x 4) (res .cse56 (let ((.cse58 (< 0 .cse59))) (res .cse58 (total .cse59 0) (farkas 1 .cse57 1 .cse58))) (not- .cse53)))) (=-1 .cse52)) (=+2 .cse51)))))) (res (= .cse60 .cse61) (res (= .cse62 (- 1)) (let ((.cse63 (* (- 1) 1))) (res (= .cse63 (- 1)) (poly* .cse63 (- 1)) (res (= 0 0) (refl 0) (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 1)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 1))) (res (= .cse62 .cse64) (-def 0 1) (res (= .cse65 (- 1)) (poly+ .cse65 (- 1)) (trans .cse62 .cse64 .cse65 (- 1))))))))) (res (= .cse66 .cse66) (refl .cse66) (cong (= .cse66 .cse62) (= .cse66 (- 1))))) (cong (=> .cse60 .cse54) (=> .cse61 .cse53))))))) (res (= .cse19 .cse0) (res (= .cse20 .cse1) (res .cse21 .cse22 (res (= .cse23 .cse24) (res (= .cse25 .cse25) (refl .cse25) (let ((.cse26 (= .cse29 .cse28))) (res .cse26 (let ((.cse30 (< 10 x))) (let ((.cse27 (= .cse29 .cse30))) (res .cse27 (>def x 10) (res .cse28 (res .cse29 (=+1 .cse26) (res .cse30 (=-2 .cse27) (res .cse31 (not+ .cse28) (farkas 1 .cse30 1 .cse31)))) (res .cse29 (res .cse30 (let ((.cse32 (<= x 10))) (res .cse32 (total x 10) (res .cse31 (let ((.cse33 (< 0 .cse34))) (res .cse33 (total .cse34 0) (farkas 1 .cse32 1 .cse33))) (not- .cse28)))) (=-1 .cse27)) (=+2 .cse26)))))) (cong (and .cse29 .cse25) (and .cse28 .cse25))))) (cong (=> .cse23 .cse35) (=> .cse24 .cse2)))) (res (= .cse36 .cse36) (refl .cse36) (cong (=> .cse36 .cse20) (=> .cse36 .cse1)))) (res (= .cse37 .cse11) (res (= .cse38 .cse6) (res (= .cse39 .cse7) (res .cse21 .cse22 (res (= .cse40 .cse40) (refl .cse40) (cong (=> .cse40 .cse35) (=> .cse40 .cse2)))) (res (= .cse41 .cse41) (refl .cse41) (cong (=> .cse41 .cse39) (=> .cse41 .cse7)))) (res (= .cse42 .cse10) (res (= .cse43 .cse4) (res (= .cse44 .cse5) (res .cse21 .cse22 (res (= .cse45 .cse45) (refl .cse45) (cong (=> .cse45 .cse35) (=> .cse45 .cse2)))) (res (= .cse46 .cse46) (refl .cse46) (cong (=> .cse46 .cse44) (=> .cse46 .cse5)))) (res (= .cse47 .cse8) (res (= .cse48 .cse9) (res .cse21 .cse22 (res (= .cse49 .cse49) (refl .cse49) (cong (=> .cse49 .cse35) (=> .cse49 .cse2)))) (res (= .cse50 .cse50) (refl .cse50) (cong (=> .cse50 .cse48) (=> .cse50 .cse9)))) (cong (and .cse47 .cse43) (and .cse8 .cse4)))) (cong (and .cse42 .cse38) (and .cse10 .cse6)))) (cong (and .cse37 .cse19) (and .cse11 .cse0)))))) (res (= .cse67 .cse67) (refl .cse67) (cong (=> .cse67 .cse18) (=> .cse67 .cse12)))) (cong (not .cse14) (not .cse13))) (=-2 .cse17)))) (not- .cse15))) (res .cse16 (assume .cse16) (not- .cse16)))))))))))))))))))))) :proves (- .cse8 - .cse6 - .cse4 - .cse0) :input))))))))))))))))))))) :proves () :rup)

