unsat
(! (let ((.cse15 (ControlFlow 0 2))) (let ((.cse2 (= .cse15 (- 3))) (.cse0 (= (- 3) .cse15))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 3) .cse15)) (res .cse2 (symm .cse15 (- 3)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse59 (=> b13 (= v1@1 0)))) (let ((.cse1 (=> .cse2 .cse59))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse9 (= .cse15 (- 1))) (.cse47 (=> b14 (= v1@1 1)))) (let ((.cse7 (=> .cse9 .cse47))) (let ((.cse6 (=> .cse59 .cse7))) (let ((.cse66 (and (=> b11 (= v1@0 0)) (=> b12 (= v1@0 1)))) (.cse16 (and .cse1 .cse6))) (let ((.cse5 (=> .cse66 .cse16))) (res .cse5 (res .cse6 (! (res .cse7 (! (let ((.cse8 (= (- 1) .cse15))) (let ((.cse10 (= .cse9 .cse8))) (let-proof ((.cse11 (res .cse8 (res .cse9 (=+1 .cse10) (symm (- 1) .cse15)) (res .cse9 (symm .cse15 (- 1)) (=+2 .cse10))))) (res .cse8 (! (res .cse9 (=>+ 0 .cse7) (res .cse10 .cse11 (=-2 .cse10))) :proves (+ .cse7 + .cse8) :input) (! (let ((.cse13 (not .cse9))) (res .cse9 (let ((.cse12 (not .cse8))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res .cse10 .cse11 (cong (not .cse9) (not .cse8))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13)))) :proves (- .cse8) :input))))) :proves (+ .cse7) :rup) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (! (res .cse16 (and+ .cse16) (=>+ 1 .cse5)) :proves (- .cse6 - .cse1 + .cse5) :input)) (! (let ((.cse19 (=> b10 true))) (let ((.cse17 (=> .cse19 .cse5))) (res .cse17 (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse5) :input) (! (let ((.cse72 (= .cse15 (- 4)))) (let ((.cse18 (=> .cse72 .cse19))) (let-proof ((.cse20 true+)) (res .cse18 (! (res .cse19 (! (res true .cse20 (=>+ 1 .cse19)) :proves (+ .cse19) :input) (! (=>+ 1 .cse18) :proves (+ .cse18 - .cse19) :input)) :proves (+ .cse18) :rup) (let ((.cse82 (=> b9 false)) (.cse22 (and .cse18 .cse17))) (let ((.cse21 (=> .cse82 .cse22))) (res .cse21 (! (res .cse22 (and+ .cse22) (=>+ 1 .cse21)) :proves (+ .cse21 - .cse17 - .cse18) :input) (! (let ((.cse25 (= .cse15 (- 5)))) (let ((.cse23 (=> .cse25 .cse82))) (res .cse23 (! (let ((.cse24 (= (- 5) .cse15))) (let ((.cse26 (= .cse25 .cse24))) (let-proof ((.cse27 (res .cse24 (res .cse25 (=+1 .cse26) (symm (- 5) .cse15)) (res .cse25 (symm .cse15 (- 5)) (=+2 .cse26))))) (res .cse24 (! (res .cse25 (=>+ 0 .cse23) (res .cse26 .cse27 (=-2 .cse26))) :proves (+ .cse23 + .cse24) :input) (! (let ((.cse29 (not .cse25))) (res .cse25 (let ((.cse28 (not .cse24))) (res .cse28 (res .cse29 (not+ .cse29) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (res .cse26 .cse27 (cong (not .cse25) (not .cse24))) (=-2 .cse30)))) (not- .cse28))) (res .cse29 (assume .cse29) (not- .cse29)))) :proves (- .cse24) :input))))) :proves (+ .cse23) :rup) (! (let ((.cse31 (and .cse23 .cse21))) (res .cse31 (and+ .cse31) (let ((.cse91 (= (ControlFlow 0 6) 2))) (let ((.cse32 (=> .cse91 .cse31))) (res .cse32 (=>+ 1 .cse32) (let ((.cse92 (= (ControlFlow 0 0) 6))) (let ((.cse33 (=> .cse92 .cse32))) (res .cse33 (=>+ 1 .cse33) (let ((.cse49 (- 0 1))) (let ((.cse62 (- 0 3)) (.cse48 (= .cse15 .cse49))) (let ((.cse46 (=> .cse48 .cse47)) (.cse61 (= .cse15 .cse62))) (let ((.cse60 (=> .cse61 .cse59)) (.cse45 (=> .cse59 .cse46))) (let ((.cse78 (= 1 1)) (.cse73 (- 0 4)) (.cse44 (and .cse60 .cse45))) (let ((.cse43 (=> .cse66 .cse44)) (.cse71 (= .cse15 .cse73)) (.cse69 (=> b10 .cse78))) (let ((.cse90 (= 1 0)) (.cse85 (- 0 5)) (.cse70 (=> .cse71 .cse69)) (.cse42 (=> .cse69 .cse43))) (let ((.cse41 (and .cse70 .cse42)) (.cse84 (= .cse15 .cse85)) (.cse81 (=> b9 .cse90))) (let ((.cse83 (=> .cse84 .cse81)) (.cse40 (=> .cse81 .cse41))) (let ((.cse39 (and .cse83 .cse40))) (let ((.cse38 (=> .cse91 .cse39))) (let ((.cse34 (=> .cse92 .cse38))) (let ((.cse36 (not .cse34))) (res .cse34 (let ((.cse35 (not .cse33))) (res .cse35 (res .cse36 (not+ .cse36) (let ((.cse37 (= .cse36 .cse35))) (res .cse37 (res (= .cse34 .cse33) (res (= .cse38 .cse32) (res (= .cse39 .cse31) (let ((.cse79 (= .cse81 .cse82)) (.cse51 (= 0 0)) (.cse55 (= .cse15 .cse15))) (let-proof ((.cse80 (let ((.cse89 (= .cse90 false))) (res .cse89 (res false (res .cse90 (=+1 .cse89) (farkas 1 .cse90)) false-) (res (= b9 b9) (refl b9) (cong (=> b9 .cse90) (=> b9 false)))))) (.cse52 (refl 0)) (.cse56 (refl .cse15))) (res (= .cse40 .cse21) (res (= .cse41 .cse22) (let ((.cse67 (= .cse69 .cse19))) (let-proof ((.cse68 (let ((.cse77 (= .cse78 true))) (res .cse77 (res true .cse20 (res .cse78 (refl 1) (=+2 .cse77))) (res (= b10 b10) (refl b10) (cong (=> b10 .cse78) (=> b10 true))))))) (res (= .cse42 .cse17) (res (= .cse43 .cse5) (res (= .cse44 .cse16) (let ((.cse57 (= .cse59 .cse59))) (let-proof ((.cse58 (refl .cse59))) (res (= .cse45 .cse6) (res (= .cse46 .cse7) (res (= .cse47 .cse47) (refl .cse47) (res (= .cse48 .cse9) (res (= .cse49 (- 1)) (let ((.cse50 (* (- 1) 1))) (res (= .cse50 (- 1)) (poly* .cse50 (- 1)) (res .cse51 .cse52 (let ((.cse53 (+ 0 .cse50)) (.cse54 (+ 0 (- 1)))) (res (= .cse53 .cse54) (cong (+ 0 .cse50) (+ 0 (- 1))) (res (= .cse49 .cse53) (-def 0 1) (res (= .cse54 (- 1)) (poly+ .cse54 (- 1)) (trans .cse49 .cse53 .cse54 (- 1))))))))) (res .cse55 .cse56 (cong (= .cse15 .cse49) (= .cse15 (- 1))))) (cong (=> .cse48 .cse47) (=> .cse9 .cse47)))) (res .cse57 .cse58 (cong (=> .cse59 .cse46) (=> .cse59 .cse7)))) (res (= .cse60 .cse1) (res .cse57 .cse58 (res (= .cse61 .cse2) (res (= .cse62 (- 3)) (let ((.cse63 (* (- 1) 3))) (res (= .cse63 (- 3)) (poly* .cse63 (- 3)) (res .cse51 .cse52 (let ((.cse64 (+ 0 .cse63)) (.cse65 (+ 0 (- 3)))) (res (= .cse64 .cse65) (cong (+ 0 .cse63) (+ 0 (- 3))) (res (= .cse62 .cse64) (-def 0 3) (res (= .cse65 (- 3)) (poly+ .cse65 (- 3)) (trans .cse62 .cse64 .cse65 (- 3))))))))) (res .cse55 .cse56 (cong (= .cse15 .cse62) (= .cse15 (- 3))))) (cong (=> .cse61 .cse59) (=> .cse2 .cse59)))) (cong (and .cse60 .cse45) (and .cse1 .cse6)))))) (res (= .cse66 .cse66) (refl .cse66) (cong (=> .cse66 .cse44) (=> .cse66 .cse16)))) (res .cse67 .cse68 (cong (=> .cse69 .cse43) (=> .cse19 .cse5)))) (res (= .cse70 .cse18) (res .cse67 .cse68 (res (= .cse71 .cse72) (res (= .cse73 (- 4)) (let ((.cse74 (* (- 1) 4))) (res (= .cse74 (- 4)) (poly* .cse74 (- 4)) (res .cse51 .cse52 (let ((.cse75 (+ 0 .cse74)) (.cse76 (+ 0 (- 4)))) (res (= .cse75 .cse76) (cong (+ 0 .cse74) (+ 0 (- 4))) (res (= .cse73 .cse75) (-def 0 4) (res (= .cse76 (- 4)) (poly+ .cse76 (- 4)) (trans .cse73 .cse75 .cse76 (- 4))))))))) (res .cse55 .cse56 (cong (= .cse15 .cse73) (= .cse15 (- 4))))) (cong (=> .cse71 .cse69) (=> .cse72 .cse19)))) (cong (and .cse70 .cse42) (and .cse18 .cse17)))))) (res .cse79 .cse80 (cong (=> .cse81 .cse41) (=> .cse82 .cse22)))) (res (= .cse83 .cse23) (res .cse79 .cse80 (res (= .cse84 .cse25) (res (= .cse85 (- 5)) (let ((.cse86 (* (- 1) 5))) (res (= .cse86 (- 5)) (poly* .cse86 (- 5)) (res .cse51 .cse52 (let ((.cse87 (+ 0 .cse86)) (.cse88 (+ 0 (- 5)))) (res (= .cse87 .cse88) (cong (+ 0 .cse86) (+ 0 (- 5))) (res (= .cse85 .cse87) (-def 0 5) (res (= .cse88 (- 5)) (poly+ .cse88 (- 5)) (trans .cse85 .cse87 .cse88 (- 5))))))))) (res .cse55 .cse56 (cong (= .cse15 .cse85) (= .cse15 (- 5))))) (cong (=> .cse84 .cse81) (=> .cse25 .cse82)))) (cong (and .cse83 .cse40) (and .cse23 .cse21)))))) (res (= .cse91 .cse91) (refl .cse91) (cong (=> .cse91 .cse39) (=> .cse91 .cse31)))) (res (= .cse92 .cse92) (refl .cse92) (cong (=> .cse92 .cse38) (=> .cse92 .cse32)))) (cong (not .cse34) (not .cse33))) (=-2 .cse37)))) (not- .cse35))) (res .cse36 (assume .cse36) (not- .cse36)))))))))))))))))))))))) :proves (- .cse23 - .cse21) :input)))) :proves (- .cse21) :rup)))))))) :proves (- .cse17) :rup)))) :proves (- .cse5) :rup))))))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse94 (not .cse2))) (res .cse2 (let ((.cse93 (not .cse0))) (res .cse93 (res .cse94 (not+ .cse94) (let ((.cse95 (= .cse94 .cse93))) (res .cse95 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse95)))) (not- .cse93))) (res .cse94 (assume .cse94) (not- .cse94)))) :proves (- .cse0) :input)))))) :proves () :rup)

