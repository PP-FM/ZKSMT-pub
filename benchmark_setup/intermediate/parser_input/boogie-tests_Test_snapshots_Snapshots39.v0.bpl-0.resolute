unsat
(! (let ((.cse45 (ControlFlow 0 2)) (.cse67 (+ (* (- 1) call1formal@r@0) 42))) (let ((.cse4 (= call1formal@r@0 0)) (.cse13 (<= .cse67 0)) (.cse36 (= .cse45 (- 1)))) (let ((.cse0 (and .cse13 .cse36)) (.cse6 (not .cse4))) (let ((.cse16 (< 0 .cse67)) (.cse1 (=> .cse0 .cse6))) (let-proof ((.cse17 (total .cse67 0))) (let-proof ((.cse2 (! (let ((.cse20 (=> true .cse1))) (res .cse20 (! (=>+ 1 .cse20) :proves (+ .cse20 - .cse1) :input) (! (let ((.cse54 (= .cse45 (- 3)))) (let ((.cse21 (=> .cse54 true))) (let-proof ((.cse22 true+)) (res .cse21 (! (res true .cse22 (=>+ 1 .cse21)) :proves (+ .cse21) :input) (! (let ((.cse23 (and .cse21 .cse20))) (res .cse23 (and+ .cse23) (let ((.cse65 (= (ControlFlow 0 4) 2))) (let ((.cse24 (=> .cse65 .cse23))) (res .cse24 (=>+ 1 .cse24) (let ((.cse66 (= (ControlFlow 0 0) 4))) (let ((.cse25 (=> .cse66 .cse24))) (res .cse25 (=>+ 1 .cse25) (let ((.cse37 (- 0 1))) (let ((.cse47 (<= 42 call1formal@r@0)) (.cse35 (= .cse45 .cse37))) (let ((.cse55 (- 0 3)) (.cse34 (and .cse47 .cse35))) (let ((.cse33 (=> .cse34 .cse6)) (.cse53 (= .cse45 .cse55)) (.cse51 (<= 0 42))) (let ((.cse52 (=> .cse53 .cse51)) (.cse32 (=> .cse51 .cse33))) (let ((.cse31 (and .cse52 .cse32))) (let ((.cse30 (=> .cse65 .cse31))) (let ((.cse26 (=> .cse66 .cse30))) (let ((.cse28 (not .cse26))) (res .cse26 (let ((.cse27 (not .cse25))) (res .cse27 (res .cse28 (not+ .cse28) (let ((.cse29 (= .cse28 .cse27))) (res .cse29 (res (= .cse26 .cse25) (res (= .cse30 .cse24) (res (= .cse31 .cse23) (let ((.cse49 (= .cse51 true)) (.cse39 (= 0 0)) (.cse43 (= .cse45 .cse45))) (let-proof ((.cse50 (let ((.cse60 (<= (- 42) 0))) (let ((.cse59 (= .cse60 true)) (.cse61 (< 0 (- 42)))) (let-proof ((.cse62 (total (- 42) 0))) (res .cse59 (res true .cse22 (res .cse60 (res .cse61 .cse62 (farkas 1 .cse61)) (=+2 .cse59))) (let ((.cse63 (= .cse51 .cse60))) (res .cse63 (res .cse60 (res .cse51 (=+1 .cse63) (res .cse61 .cse62 (farkas 1 .cse51 1 .cse61))) (res .cse51 (let ((.cse64 (< 42 0))) (res .cse64 (total 0 42) (farkas 1 .cse64 1 .cse60))) (=+2 .cse63))) (trans .cse51 .cse60 true)))))))) (.cse40 (refl 0)) (.cse44 (refl .cse45))) (res (= .cse32 .cse20) (res (= .cse33 .cse1) (res (= .cse6 .cse6) (refl .cse6) (res (= .cse34 .cse0) (res (= .cse35 .cse36) (res (= .cse37 (- 1)) (let ((.cse38 (* (- 1) 1))) (res (= .cse38 (- 1)) (poly* .cse38 (- 1)) (res .cse39 .cse40 (let ((.cse41 (+ 0 .cse38)) (.cse42 (+ 0 (- 1)))) (res (= .cse41 .cse42) (cong (+ 0 .cse38) (+ 0 (- 1))) (res (= .cse37 .cse41) (-def 0 1) (res (= .cse42 (- 1)) (poly+ .cse42 (- 1)) (trans .cse37 .cse41 .cse42 (- 1))))))))) (res .cse43 .cse44 (cong (= .cse45 .cse37) (= .cse45 (- 1))))) (let ((.cse46 (= .cse47 .cse13))) (res .cse46 (res .cse13 (res .cse47 (=+1 .cse46) (res .cse16 .cse17 (farkas 1 .cse47 1 .cse16))) (res .cse47 (let ((.cse48 (< call1formal@r@0 42))) (res .cse48 (total 42 call1formal@r@0) (farkas 1 .cse48 1 .cse13))) (=+2 .cse46))) (cong (and .cse47 .cse35) (and .cse13 .cse36))))) (cong (=> .cse34 .cse6) (=> .cse0 .cse6)))) (res .cse49 .cse50 (cong (=> .cse51 .cse33) (=> true .cse1)))) (res (= .cse52 .cse21) (res .cse49 .cse50 (res (= .cse53 .cse54) (res (= .cse55 (- 3)) (let ((.cse56 (* (- 1) 3))) (res (= .cse56 (- 3)) (poly* .cse56 (- 3)) (res .cse39 .cse40 (let ((.cse57 (+ 0 .cse56)) (.cse58 (+ 0 (- 3)))) (res (= .cse57 .cse58) (cong (+ 0 .cse56) (+ 0 (- 3))) (res (= .cse55 .cse57) (-def 0 3) (res (= .cse58 (- 3)) (poly+ .cse58 (- 3)) (trans .cse55 .cse57 .cse58 (- 3))))))))) (res .cse43 .cse44 (cong (= .cse45 .cse55) (= .cse45 (- 3))))) (cong (=> .cse53 .cse51) (=> .cse54 true)))) (cong (and .cse52 .cse32) (and .cse21 .cse20)))))) (res (= .cse65 .cse65) (refl .cse65) (cong (=> .cse65 .cse31) (=> .cse65 .cse23)))) (res (= .cse66 .cse66) (refl .cse66) (cong (=> .cse66 .cse30) (=> .cse66 .cse24)))) (cong (not .cse26) (not .cse25))) (=-2 .cse29)))) (not- .cse27))) (res .cse28 (assume .cse28) (not- .cse28)))))))))))))))))))) :proves (- .cse21 - .cse20) :input))))) :proves (- .cse20) :rup))) :proves (- .cse1) :rup))) (res .cse0 (! (res .cse1 (! (=>+ 0 .cse1) :proves (+ .cse1 + .cse0) :input) .cse2) :proves (+ .cse0) :rup) (let ((.cse19 (+ call1formal@r@0 (- 41)))) (let ((.cse11 (<= 1 .cse19)) (.cse3 (<= .cse19 0))) (let-proof ((.cse12 (total-int .cse19 0))) (res .cse3 (! (res .cse4 (! (let ((.cse5 (= 0 call1formal@r@0))) (let-proof ((.cse8 (symm call1formal@r@0 0))) (res .cse5 (! (res .cse1 (! (res .cse4 (res .cse6 (not+ .cse6) (=>+ 1 .cse1)) (let ((.cse7 (= .cse4 .cse5))) (res .cse7 (res .cse5 (res .cse4 (=+1 .cse7) (symm 0 call1formal@r@0)) (res .cse4 .cse8 (=+2 .cse7))) (=-2 .cse7)))) :proves (+ .cse1 + .cse5) :input) .cse2) :proves (+ .cse5) :rup) (! (res .cse4 .cse8 (let ((.cse9 (< call1formal@r@0 0))) (res .cse9 (let ((.cse10 (< 0 call1formal@r@0))) (res .cse10 (trichotomy call1formal@r@0 0) (farkas 1 .cse4 1 .cse10))) (farkas 1 .cse5 1 .cse9)))) :proves (- .cse5 + .cse4) :EQ)))) :proves (+ .cse4) :rup) (! (res .cse11 .cse12 (farkas 1 .cse4 1 .cse11)) :proves (- .cse4 + .cse3) :LA (1 (- 1)))) :proves (+ .cse3) :rup) (! (res .cse13 (and- 0 .cse0) (let ((.cse14 (not .cse3))) (let-proof ((.cse18 (not- .cse14))) (res .cse14 (let ((.cse15 (= .cse13 .cse14))) (res .cse15 (res .cse14 (res .cse13 (=+1 .cse15) (res .cse3 (not+ .cse14) (farkas 1 .cse13 1 .cse3))) (res .cse13 (res .cse16 .cse17 (res .cse3 (res .cse11 .cse12 (farkas 1 .cse16 1 .cse11)) .cse18)) (=+2 .cse15))) (=-2 .cse15))) .cse18)))) :proves (- .cse0 - .cse3) :input)))))))))))) :proves () :rup)

