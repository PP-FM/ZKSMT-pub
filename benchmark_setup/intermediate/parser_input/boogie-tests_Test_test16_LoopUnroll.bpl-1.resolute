unsat
(! (let ((.cse15 (ControlFlow 0 3))) (let ((.cse2 (= .cse15 (- 2))) (.cse0 (= (- 2) .cse15))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 2) .cse15)) (res .cse2 (symm .cse15 (- 2)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse60 (* (- 1) i@0))) (let ((.cse39 (+ N .cse60))) (let ((.cse36 (<= .cse39 0))) (let ((.cse34 (not .cse36))) (let ((.cse1 (=> .cse2 .cse34))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse52 (<= .cse60 0))) (let ((.cse5 (=> .cse52 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse73 (* (- 1) N)) (.cse9 (= .cse15 (- 4)))) (let ((.cse7 (=> .cse9 .cse52)) (.cse66 (+ i@0 .cse73))) (let ((.cse63 (<= .cse66 0)) (.cse16 (and .cse7 .cse5))) (let ((.cse6 (=> .cse63 .cse16))) (res .cse6 (res .cse7 (! (let ((.cse8 (= (- 4) .cse15))) (let ((.cse10 (= .cse9 .cse8))) (let-proof ((.cse11 (res .cse8 (res .cse9 (=+1 .cse10) (symm (- 4) .cse15)) (res .cse9 (symm .cse15 (- 4)) (=+2 .cse10))))) (res .cse8 (! (res .cse9 (=>+ 0 .cse7) (res .cse10 .cse11 (=-2 .cse10))) :proves (+ .cse7 + .cse8) :input) (! (let ((.cse13 (not .cse9))) (res .cse9 (let ((.cse12 (not .cse8))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res .cse10 .cse11 (cong (not .cse9) (not .cse8))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13)))) :proves (- .cse8) :input))))) :proves (+ .cse7) :rup) (! (res .cse16 (and+ .cse16) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) (! (let ((.cse76 (ControlFlow 0 5))) (let ((.cse68 (= .cse76 3))) (let ((.cse17 (=> .cse68 .cse6))) (res .cse17 (! (=>+ 1 .cse17) :proves (+ .cse17 - .cse6) :input) (! (let ((.cse18 (=> (= .cse76 1) true))) (res .cse18 (! (res true true+ (=>+ 1 .cse18)) :proves (+ .cse18) :input) (! (let ((.cse19 (and .cse18 .cse17))) (res .cse19 (and+ .cse19) (let ((.cse70 (<= .cse73 0))) (let ((.cse20 (=> .cse70 .cse19))) (res .cse20 (=>+ 1 .cse20) (let ((.cse75 (= (ControlFlow 0 0) 5))) (let ((.cse21 (=> .cse75 .cse20))) (res .cse21 (=>+ 1 .cse21) (let ((.cse41 (- 0 2))) (let ((.cse55 (- 0 4)) (.cse40 (= .cse15 .cse41)) (.cse35 (< i@0 N))) (let ((.cse32 (=> .cse40 .cse35)) (.cse54 (= .cse15 .cse55)) (.cse51 (<= 0 i@0))) (let ((.cse53 (=> .cse54 .cse51)) (.cse31 (=> .cse51 .cse32))) (let ((.cse64 (<= i@0 N)) (.cse30 (and .cse53 .cse31))) (let ((.cse29 (=> .cse64 .cse30))) (let ((.cse28 (=> .cse68 .cse29))) (let ((.cse71 (<= 0 N)) (.cse27 (and .cse18 .cse28))) (let ((.cse26 (=> .cse71 .cse27))) (let ((.cse22 (=> .cse75 .cse26))) (let ((.cse24 (not .cse22))) (res .cse22 (let ((.cse23 (not .cse21))) (res .cse23 (res .cse24 (not+ .cse24) (let ((.cse25 (= .cse24 .cse23))) (res .cse25 (res (= .cse22 .cse21) (res (= .cse26 .cse20) (res (= .cse27 .cse19) (res (= .cse28 .cse17) (res (= .cse29 .cse6) (res (= .cse30 .cse16) (let ((.cse49 (= .cse51 .cse52))) (let ((.cse43 (= 0 0)) (.cse47 (= .cse15 .cse15))) (let-proof ((.cse50 (res .cse52 (res .cse51 (=+1 .cse49) (let ((.cse59 (< 0 .cse60))) (res .cse59 (total .cse60 0) (farkas 1 .cse51 1 .cse59)))) (res .cse51 (let ((.cse61 (< i@0 0))) (res .cse61 (total 0 i@0) (farkas 1 .cse61 1 .cse52))) (=+2 .cse49)))) (.cse44 (refl 0)) (.cse48 (refl .cse15))) (res (= .cse31 .cse5) (res (= .cse32 .cse1) (let ((.cse33 (= .cse35 .cse34))) (res .cse33 (res .cse34 (res .cse35 (=+1 .cse33) (res .cse36 (not+ .cse34) (farkas 1 .cse35 1 .cse36))) (res .cse35 (let ((.cse37 (<= N i@0))) (res .cse37 (total N i@0) (res .cse36 (let ((.cse38 (< 0 .cse39))) (res .cse38 (total .cse39 0) (farkas 1 .cse37 1 .cse38))) (not- .cse34)))) (=+2 .cse33))) (res (= .cse40 .cse2) (res (= .cse41 (- 2)) (let ((.cse42 (* (- 1) 2))) (res (= .cse42 (- 2)) (poly* .cse42 (- 2)) (res .cse43 .cse44 (let ((.cse45 (+ 0 .cse42)) (.cse46 (+ 0 (- 2)))) (res (= .cse45 .cse46) (cong (+ 0 .cse42) (+ 0 (- 2))) (res (= .cse41 .cse45) (-def 0 2) (res (= .cse46 (- 2)) (poly+ .cse46 (- 2)) (trans .cse41 .cse45 .cse46 (- 2))))))))) (res .cse47 .cse48 (cong (= .cse15 .cse41) (= .cse15 (- 2))))) (cong (=> .cse40 .cse35) (=> .cse2 .cse34))))) (res .cse49 .cse50 (cong (=> .cse51 .cse32) (=> .cse52 .cse1)))) (res (= .cse53 .cse7) (res .cse49 .cse50 (res (= .cse54 .cse9) (res (= .cse55 (- 4)) (let ((.cse56 (* (- 1) 4))) (res (= .cse56 (- 4)) (poly* .cse56 (- 4)) (res .cse43 .cse44 (let ((.cse57 (+ 0 .cse56)) (.cse58 (+ 0 (- 4)))) (res (= .cse57 .cse58) (cong (+ 0 .cse56) (+ 0 (- 4))) (res (= .cse55 .cse57) (-def 0 4) (res (= .cse58 (- 4)) (poly+ .cse58 (- 4)) (trans .cse55 .cse57 .cse58 (- 4))))))))) (res .cse47 .cse48 (cong (= .cse15 .cse55) (= .cse15 (- 4))))) (cong (=> .cse54 .cse51) (=> .cse9 .cse52)))) (cong (and .cse53 .cse31) (and .cse7 .cse5))))))) (let ((.cse62 (= .cse64 .cse63))) (res .cse62 (res .cse63 (res .cse64 (=+1 .cse62) (let ((.cse65 (< 0 .cse66))) (res .cse65 (total .cse66 0) (farkas 1 .cse64 1 .cse65)))) (res .cse64 (let ((.cse67 (< N i@0))) (res .cse67 (total i@0 N) (farkas 1 .cse67 1 .cse63))) (=+2 .cse62))) (cong (=> .cse64 .cse30) (=> .cse63 .cse16))))) (res (= .cse68 .cse68) (refl .cse68) (cong (=> .cse68 .cse29) (=> .cse68 .cse6)))) (res (= .cse18 .cse18) (refl .cse18) (cong (and .cse18 .cse28) (and .cse18 .cse17)))) (let ((.cse69 (= .cse71 .cse70))) (res .cse69 (res .cse70 (res .cse71 (=+1 .cse69) (let ((.cse72 (< 0 .cse73))) (res .cse72 (total .cse73 0) (farkas 1 .cse71 1 .cse72)))) (res .cse71 (let ((.cse74 (< N 0))) (res .cse74 (total 0 N) (farkas 1 .cse74 1 .cse70))) (=+2 .cse69))) (cong (=> .cse71 .cse27) (=> .cse70 .cse19))))) (res (= .cse75 .cse75) (refl .cse75) (cong (=> .cse75 .cse26) (=> .cse75 .cse20)))) (cong (not .cse22) (not .cse21))) (=-2 .cse25)))) (not- .cse23))) (res .cse24 (assume .cse24) (not- .cse24)))))))))))))))))))))) :proves (- .cse18 - .cse17) :input))) :proves (- .cse17) :rup))))) :proves (- .cse6) :rup)))))) :proves (- .cse5) :rup)))) :proves (- .cse1) :rup))))))) :proves (+ .cse0) :rup) (! (let ((.cse78 (not .cse2))) (res .cse2 (let ((.cse77 (not .cse0))) (res .cse77 (res .cse78 (not+ .cse78) (let ((.cse79 (= .cse78 .cse77))) (res .cse79 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse79)))) (not- .cse77))) (res .cse78 (assume .cse78) (not- .cse78)))) :proves (- .cse0) :input)))))) :proves () :rup)

