unsat
(! (res F0 (! (let ((.cse0 (and F0 (= (ControlFlow 0 4) 2)))) (res .cse0 (let ((.cse28 (ControlFlow 0 2))) (let ((.cse19 (= .cse28 (- 1)))) (let ((.cse17 (and F0 .cse19))) (let ((.cse13 (=> .cse17 F0)) (.cse32 (= .cse28 (- 3)))) (let ((.cse30 (=> .cse32 F0)) (.cse11 (=> F0 .cse13))) (let ((.cse9 (and .cse30 .cse11))) (let ((.cse1 (=> .cse0 .cse9))) (res .cse1 (=>+ 0 .cse1) (let ((.cse37 (= (ControlFlow 0 0) 4))) (let ((.cse2 (=> .cse37 .cse1))) (res .cse2 (=>+ 1 .cse2) (let ((.cse20 (- 0 1))) (let ((.cse18 (= .cse28 .cse20))) (let ((.cse33 (- 0 3)) (.cse16 (and F0 .cse18))) (let ((.cse12 (=> .cse16 F0)) (.cse31 (= .cse28 .cse33))) (let ((.cse29 (=> .cse31 F0)) (.cse10 (=> F0 .cse12))) (let ((.cse8 (and .cse29 .cse10))) (let ((.cse7 (=> .cse0 .cse8))) (let ((.cse3 (=> .cse37 .cse7))) (let ((.cse5 (not .cse3))) (res .cse3 (let ((.cse4 (not .cse2))) (res .cse4 (res .cse5 (not+ .cse5) (let ((.cse6 (= .cse5 .cse4))) (res .cse6 (res (= .cse3 .cse2) (res (= .cse7 .cse1) (res (= .cse8 .cse9) (let ((.cse14 (= F0 F0)) (.cse22 (= 0 0)) (.cse26 (= .cse28 .cse28))) (let-proof ((.cse15 (refl F0)) (.cse23 (refl 0)) (.cse27 (refl .cse28))) (res (= .cse10 .cse11) (res (= .cse12 .cse13) (res .cse14 .cse15 (res (= .cse16 .cse17) (res (= .cse18 .cse19) (res (= .cse20 (- 1)) (let ((.cse21 (* (- 1) 1))) (res (= .cse21 (- 1)) (poly* .cse21 (- 1)) (res .cse22 .cse23 (let ((.cse24 (+ 0 .cse21)) (.cse25 (+ 0 (- 1)))) (res (= .cse24 .cse25) (cong (+ 0 .cse21) (+ 0 (- 1))) (res (= .cse20 .cse24) (-def 0 1) (res (= .cse25 (- 1)) (poly+ .cse25 (- 1)) (trans .cse20 .cse24 .cse25 (- 1))))))))) (res .cse26 .cse27 (cong (= .cse28 .cse20) (= .cse28 (- 1))))) (res .cse14 .cse15 (cong (and F0 .cse18) (and F0 .cse19)))) (cong (=> .cse16 F0) (=> .cse17 F0)))) (res .cse14 .cse15 (cong (=> F0 .cse12) (=> F0 .cse13)))) (res (= .cse29 .cse30) (res .cse14 .cse15 (res (= .cse31 .cse32) (res (= .cse33 (- 3)) (let ((.cse34 (* (- 1) 3))) (res (= .cse34 (- 3)) (poly* .cse34 (- 3)) (res .cse22 .cse23 (let ((.cse35 (+ 0 .cse34)) (.cse36 (+ 0 (- 3)))) (res (= .cse35 .cse36) (cong (+ 0 .cse34) (+ 0 (- 3))) (res (= .cse33 .cse35) (-def 0 3) (res (= .cse36 (- 3)) (poly+ .cse36 (- 3)) (trans .cse33 .cse35 .cse36 (- 3))))))))) (res .cse26 .cse27 (cong (= .cse28 .cse33) (= .cse28 (- 3))))) (cong (=> .cse31 F0) (=> .cse32 F0)))) (cong (and .cse29 .cse10) (and .cse30 .cse11)))))) (res (= .cse0 .cse0) (refl .cse0) (cong (=> .cse0 .cse8) (=> .cse0 .cse9)))) (res (= .cse37 .cse37) (refl .cse37) (cong (=> .cse37 .cse7) (=> .cse37 .cse1)))) (cong (not .cse3) (not .cse2))) (=-2 .cse6)))) (not- .cse4))) (res .cse5 (assume .cse5) (not- .cse5))))))))))))))))))))))) (and- 0 .cse0))) :proves (+ F0) :input) (! (let ((.cse38 (= F0 false))) (res .cse38 (assume .cse38) (let ((.cse39 (not F0))) (let-proof ((.cse41 (not- .cse39))) (res .cse39 (let ((.cse40 (= .cse38 .cse39))) (res .cse40 (res false (res .cse39 (res .cse38 (=+1 .cse40) (res F0 (not+ .cse39) (=-2 .cse38))) (res .cse38 (res F0 (=+1 .cse38) .cse41) (=+2 .cse40))) false-) (=-2 .cse40))) .cse41))))) :proves (- F0) :input)) :proves () :rup)

