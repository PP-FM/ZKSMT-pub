unsat
(! (let ((.cse14 (ControlFlow 0 2))) (let ((.cse2 (= .cse14 (- 1))) (.cse0 (= (- 1) .cse14))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse14)) (res .cse2 (symm .cse14 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse58 (* (- 1) x))) (let ((.cse32 (+ z .cse58))) (let ((.cse29 (<= .cse32 0))) (let ((.cse27 (not .cse29))) (let ((.cse1 (=> .cse2 .cse27))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse55 (+ y .cse58))) (let ((.cse52 (<= .cse55 0))) (let ((.cse45 (not .cse52))) (let ((.cse5 (=> .cse45 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse8 (= .cse14 (- 3)))) (let ((.cse6 (=> .cse8 .cse45))) (res .cse6 (! (let ((.cse7 (= (- 3) .cse14))) (let ((.cse9 (= .cse8 .cse7))) (let-proof ((.cse10 (res .cse7 (res .cse8 (=+1 .cse9) (symm (- 3) .cse14)) (res .cse8 (symm .cse14 (- 3)) (=+2 .cse9))))) (res .cse7 (! (res .cse8 (=>+ 0 .cse6) (res .cse9 .cse10 (=-2 .cse9))) :proves (+ .cse6 + .cse7) :input) (! (let ((.cse12 (not .cse8))) (res .cse8 (let ((.cse11 (not .cse7))) (res .cse11 (res .cse12 (not+ .cse12) (let ((.cse13 (= .cse12 .cse11))) (res .cse13 (res .cse9 .cse10 (cong (not .cse8) (not .cse7))) (=-2 .cse13)))) (not- .cse11))) (res .cse12 (assume .cse12) (not- .cse12)))) :proves (- .cse7) :input))))) :proves (+ .cse6) :rup) (! (let ((.cse15 (and .cse6 .cse5))) (res .cse15 (and+ .cse15) (let ((.cse56 (= (ControlFlow 0 4) 2))) (let ((.cse16 (=> .cse56 .cse15))) (res .cse16 (=>+ 1 .cse16) (let ((.cse57 (= (ControlFlow 0 0) 4))) (let ((.cse17 (=> .cse57 .cse16))) (res .cse17 (=>+ 1 .cse17) (let ((.cse34 (- 0 1))) (let ((.cse48 (- 0 3)) (.cse33 (= .cse14 .cse34)) (.cse28 (< x z))) (let ((.cse25 (=> .cse33 .cse28)) (.cse47 (= .cse14 .cse48)) (.cse44 (< x y))) (let ((.cse46 (=> .cse47 .cse44)) (.cse24 (=> .cse44 .cse25))) (let ((.cse23 (and .cse46 .cse24))) (let ((.cse22 (=> .cse56 .cse23))) (let ((.cse18 (=> .cse57 .cse22))) (let ((.cse20 (not .cse18))) (res .cse18 (let ((.cse19 (not .cse17))) (res .cse19 (res .cse20 (not+ .cse20) (let ((.cse21 (= .cse20 .cse19))) (res .cse21 (res (= .cse18 .cse17) (res (= .cse22 .cse16) (res (= .cse23 .cse15) (let ((.cse42 (= .cse44 .cse45))) (let ((.cse36 (= 0 0)) (.cse40 (= .cse14 .cse14))) (let-proof ((.cse43 (res .cse45 (res .cse44 (=+1 .cse42) (res .cse52 (not+ .cse45) (farkas 1 .cse44 1 .cse52))) (res .cse44 (let ((.cse53 (<= y x))) (res .cse53 (total y x) (res .cse52 (let ((.cse54 (< 0 .cse55))) (res .cse54 (total .cse55 0) (farkas 1 .cse53 1 .cse54))) (not- .cse45)))) (=+2 .cse42)))) (.cse37 (refl 0)) (.cse41 (refl .cse14))) (res (= .cse24 .cse5) (res (= .cse25 .cse1) (let ((.cse26 (= .cse28 .cse27))) (res .cse26 (res .cse27 (res .cse28 (=+1 .cse26) (res .cse29 (not+ .cse27) (farkas 1 .cse28 1 .cse29))) (res .cse28 (let ((.cse30 (<= z x))) (res .cse30 (total z x) (res .cse29 (let ((.cse31 (< 0 .cse32))) (res .cse31 (total .cse32 0) (farkas 1 .cse30 1 .cse31))) (not- .cse27)))) (=+2 .cse26))) (res (= .cse33 .cse2) (res (= .cse34 (- 1)) (let ((.cse35 (* (- 1) 1))) (res (= .cse35 (- 1)) (poly* .cse35 (- 1)) (res .cse36 .cse37 (let ((.cse38 (+ 0 .cse35)) (.cse39 (+ 0 (- 1)))) (res (= .cse38 .cse39) (cong (+ 0 .cse35) (+ 0 (- 1))) (res (= .cse34 .cse38) (-def 0 1) (res (= .cse39 (- 1)) (poly+ .cse39 (- 1)) (trans .cse34 .cse38 .cse39 (- 1))))))))) (res .cse40 .cse41 (cong (= .cse14 .cse34) (= .cse14 (- 1))))) (cong (=> .cse33 .cse28) (=> .cse2 .cse27))))) (res .cse42 .cse43 (cong (=> .cse44 .cse25) (=> .cse45 .cse1)))) (res (= .cse46 .cse6) (res .cse42 .cse43 (res (= .cse47 .cse8) (res (= .cse48 (- 3)) (let ((.cse49 (* (- 1) 3))) (res (= .cse49 (- 3)) (poly* .cse49 (- 3)) (res .cse36 .cse37 (let ((.cse50 (+ 0 .cse49)) (.cse51 (+ 0 (- 3)))) (res (= .cse50 .cse51) (cong (+ 0 .cse49) (+ 0 (- 3))) (res (= .cse48 .cse50) (-def 0 3) (res (= .cse51 (- 3)) (poly+ .cse51 (- 3)) (trans .cse48 .cse50 .cse51 (- 3))))))))) (res .cse40 .cse41 (cong (= .cse14 .cse48) (= .cse14 (- 3))))) (cong (=> .cse47 .cse44) (=> .cse8 .cse45)))) (cong (and .cse46 .cse24) (and .cse6 .cse5))))))) (res (= .cse56 .cse56) (refl .cse56) (cong (=> .cse56 .cse23) (=> .cse56 .cse15)))) (res (= .cse57 .cse57) (refl .cse57) (cong (=> .cse57 .cse22) (=> .cse57 .cse16)))) (cong (not .cse18) (not .cse17))) (=-2 .cse21)))) (not- .cse19))) (res .cse20 (assume .cse20) (not- .cse20))))))))))))))))))) :proves (- .cse6 - .cse5) :input)))) :proves (- .cse5) :rup)))))) :proves (- .cse1) :rup))))))) :proves (+ .cse0) :rup) (! (let ((.cse60 (not .cse2))) (res .cse2 (let ((.cse59 (not .cse0))) (res .cse59 (res .cse60 (not+ .cse60) (let ((.cse61 (= .cse60 .cse59))) (res .cse61 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse61)))) (not- .cse59))) (res .cse60 (assume .cse60) (not- .cse60)))) :proves (- .cse0) :input)))))) :proves () :rup)

