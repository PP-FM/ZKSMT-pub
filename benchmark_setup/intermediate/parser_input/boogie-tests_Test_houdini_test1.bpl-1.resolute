unsat
(! (let ((.cse20 (ControlFlow 0 2))) (let ((.cse1 (= .cse20 (- 1))) (.cse0 (= (- 1) .cse20))) (let ((.cse23 (= .cse1 .cse0))) (let-proof ((.cse24 (res .cse0 (res .cse1 (=+1 .cse23) (symm (- 1) .cse20)) (res .cse1 (symm .cse20 (- 1)) (=+2 .cse23))))) (res .cse0 (! (res .cse1 (let ((.cse12 (=> b1 g))) (let ((.cse2 (=> .cse1 .cse12))) (res .cse2 (=>+ 0 .cse2) (let ((.cse21 (= (ControlFlow 0 3) 2))) (let ((.cse3 (=> .cse21 .cse2))) (res .cse3 (=>+ 1 .cse3) (let ((.cse22 (= (ControlFlow 0 0) 3))) (let ((.cse4 (=> .cse22 .cse3))) (res .cse4 (=>+ 1 .cse4) (let ((.cse14 (= g true)) (.cse16 (- 0 1))) (let ((.cse15 (= .cse20 .cse16)) (.cse11 (=> b1 .cse14))) (let ((.cse10 (=> .cse15 .cse11))) (let ((.cse9 (=> .cse21 .cse10))) (let ((.cse5 (=> .cse22 .cse9))) (let ((.cse7 (not .cse5))) (res .cse5 (let ((.cse6 (not .cse4))) (res .cse6 (res .cse7 (not+ .cse7) (let ((.cse8 (= .cse7 .cse6))) (res .cse8 (res (= .cse5 .cse4) (res (= .cse9 .cse3) (res (= .cse10 .cse2) (res (= .cse11 .cse12) (let ((.cse13 (= .cse14 g))) (res .cse13 (res true true+ (res g (res .cse14 (=+1 .cse13) (=-1 .cse14)) (res .cse14 (=+2 .cse14) (=+2 .cse13)))) (res (= b1 b1) (refl b1) (cong (=> b1 .cse14) (=> b1 g))))) (res (= .cse15 .cse1) (res (= .cse16 (- 1)) (let ((.cse17 (* (- 1) 1))) (res (= .cse17 (- 1)) (poly* .cse17 (- 1)) (res (= 0 0) (refl 0) (let ((.cse18 (+ 0 .cse17)) (.cse19 (+ 0 (- 1)))) (res (= .cse18 .cse19) (cong (+ 0 .cse17) (+ 0 (- 1))) (res (= .cse16 .cse18) (-def 0 1) (res (= .cse19 (- 1)) (poly+ .cse19 (- 1)) (trans .cse16 .cse18 .cse19 (- 1))))))))) (res (= .cse20 .cse20) (refl .cse20) (cong (= .cse20 .cse16) (= .cse20 (- 1))))) (cong (=> .cse15 .cse11) (=> .cse1 .cse12)))) (res (= .cse21 .cse21) (refl .cse21) (cong (=> .cse21 .cse10) (=> .cse21 .cse2)))) (res (= .cse22 .cse22) (refl .cse22) (cong (=> .cse22 .cse9) (=> .cse22 .cse3)))) (cong (not .cse5) (not .cse4))) (=-2 .cse8)))) (not- .cse6))) (res .cse7 (assume .cse7) (not- .cse7)))))))))))))))))) (res .cse23 .cse24 (=-2 .cse23))) :proves (+ .cse0) :input) (! (let ((.cse26 (not .cse1))) (res .cse1 (let ((.cse25 (not .cse0))) (res .cse25 (res .cse26 (not+ .cse26) (let ((.cse27 (= .cse26 .cse25))) (res .cse27 (res .cse23 .cse24 (cong (not .cse1) (not .cse0))) (=-2 .cse27)))) (not- .cse25))) (res .cse26 (assume .cse26) (not- .cse26)))) :proves (- .cse0) :input)))))) :proves () :rup)

