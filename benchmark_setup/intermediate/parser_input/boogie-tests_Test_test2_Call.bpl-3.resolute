unsat
(! (let ((.cse31 (ControlFlow 0 2))) (let ((.cse2 (= .cse31 (- 3))) (.cse0 (= (- 3) .cse31))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 3) .cse31)) (res .cse2 (symm .cse31 (- 3)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse45 (+ y (* (- 1) x)))) (let ((.cse42 (<= .cse45 0))) (let ((.cse35 (not .cse42))) (let ((.cse1 (=> .cse2 .cse35))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse22 (= .cse31 (- 1)))) (let ((.cse6 (=> .cse22 true))) (let ((.cse5 (=> .cse35 .cse6))) (let-proof ((.cse7 true+)) (res .cse5 (! (res .cse6 (! (res true .cse7 (=>+ 1 .cse6)) :proves (+ .cse6) :input) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (! (let ((.cse8 (and .cse1 .cse5))) (res .cse8 (and+ .cse8) (let ((.cse55 (+ x (* (- 1) y)))) (let ((.cse52 (<= .cse55 0))) (let ((.cse50 (not .cse52)) (.cse48 (= (ControlFlow 0 4) 2))) (let ((.cse47 (and .cse50 .cse48))) (let ((.cse9 (=> .cse47 .cse8))) (res .cse9 (=>+ 1 .cse9) (let ((.cse56 (= (ControlFlow 0 0) 4))) (let ((.cse10 (=> .cse56 .cse9))) (res .cse10 (=>+ 1 .cse10) (let ((.cse23 (- 0 1))) (let ((.cse38 (- 0 3)) (.cse21 (= .cse31 .cse23)) (.cse20 (= y y))) (let ((.cse18 (=> .cse21 .cse20)) (.cse37 (= .cse31 .cse38)) (.cse34 (< x y))) (let ((.cse36 (=> .cse37 .cse34)) (.cse17 (=> .cse34 .cse18)) (.cse51 (< y x))) (let ((.cse46 (and .cse51 .cse48)) (.cse16 (and .cse36 .cse17))) (let ((.cse15 (=> .cse46 .cse16))) (let ((.cse11 (=> .cse56 .cse15))) (let ((.cse13 (not .cse11))) (res .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res (= .cse11 .cse10) (res (= .cse15 .cse9) (res (= .cse16 .cse8) (let ((.cse32 (= .cse34 .cse35))) (let ((.cse25 (= 0 0)) (.cse29 (= .cse31 .cse31))) (let-proof ((.cse33 (res .cse35 (res .cse34 (=+1 .cse32) (res .cse42 (not+ .cse35) (farkas 1 .cse34 1 .cse42))) (res .cse34 (let ((.cse43 (<= y x))) (res .cse43 (total y x) (res .cse42 (let ((.cse44 (< 0 .cse45))) (res .cse44 (total .cse45 0) (farkas 1 .cse43 1 .cse44))) (not- .cse35)))) (=+2 .cse32)))) (.cse26 (refl 0)) (.cse30 (refl .cse31))) (res (= .cse17 .cse5) (res (= .cse18 .cse6) (let ((.cse19 (= .cse20 true))) (res .cse19 (res true .cse7 (res .cse20 (refl y) (=+2 .cse19))) (res (= .cse21 .cse22) (res (= .cse23 (- 1)) (let ((.cse24 (* (- 1) 1))) (res (= .cse24 (- 1)) (poly* .cse24 (- 1)) (res .cse25 .cse26 (let ((.cse27 (+ 0 .cse24)) (.cse28 (+ 0 (- 1)))) (res (= .cse27 .cse28) (cong (+ 0 .cse24) (+ 0 (- 1))) (res (= .cse23 .cse27) (-def 0 1) (res (= .cse28 (- 1)) (poly+ .cse28 (- 1)) (trans .cse23 .cse27 .cse28 (- 1))))))))) (res .cse29 .cse30 (cong (= .cse31 .cse23) (= .cse31 (- 1))))) (cong (=> .cse21 .cse20) (=> .cse22 true))))) (res .cse32 .cse33 (cong (=> .cse34 .cse18) (=> .cse35 .cse6)))) (res (= .cse36 .cse1) (res .cse32 .cse33 (res (= .cse37 .cse2) (res (= .cse38 (- 3)) (let ((.cse39 (* (- 1) 3))) (res (= .cse39 (- 3)) (poly* .cse39 (- 3)) (res .cse25 .cse26 (let ((.cse40 (+ 0 .cse39)) (.cse41 (+ 0 (- 3)))) (res (= .cse40 .cse41) (cong (+ 0 .cse39) (+ 0 (- 3))) (res (= .cse38 .cse40) (-def 0 3) (res (= .cse41 (- 3)) (poly+ .cse41 (- 3)) (trans .cse38 .cse40 .cse41 (- 3))))))))) (res .cse29 .cse30 (cong (= .cse31 .cse38) (= .cse31 (- 3))))) (cong (=> .cse37 .cse34) (=> .cse2 .cse35)))) (cong (and .cse36 .cse17) (and .cse1 .cse5))))))) (res (= .cse46 .cse47) (res (= .cse48 .cse48) (refl .cse48) (let ((.cse49 (= .cse51 .cse50))) (res .cse49 (res .cse50 (res .cse51 (=+1 .cse49) (res .cse52 (not+ .cse50) (farkas 1 .cse51 1 .cse52))) (res .cse51 (let ((.cse53 (<= x y))) (res .cse53 (total x y) (res .cse52 (let ((.cse54 (< 0 .cse55))) (res .cse54 (total .cse55 0) (farkas 1 .cse53 1 .cse54))) (not- .cse50)))) (=+2 .cse49))) (cong (and .cse51 .cse48) (and .cse50 .cse48))))) (cong (=> .cse46 .cse16) (=> .cse47 .cse8)))) (res (= .cse56 .cse56) (refl .cse56) (cong (=> .cse56 .cse15) (=> .cse56 .cse9)))) (cong (not .cse11) (not .cse10))) (=-2 .cse14)))) (not- .cse12))) (res .cse13 (assume .cse13) (not- .cse13)))))))))))))))))))))) :proves (- .cse1 - .cse5) :input)))))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse58 (not .cse2))) (res .cse2 (let ((.cse57 (not .cse0))) (res .cse57 (res .cse58 (not+ .cse58) (let ((.cse59 (= .cse58 .cse57))) (res .cse59 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse59)))) (not- .cse57))) (res .cse58 (assume .cse58) (not- .cse58)))) :proves (- .cse0) :input)))))) :proves () :rup)

