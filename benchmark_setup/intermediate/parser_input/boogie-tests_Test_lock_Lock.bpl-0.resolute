unsat
(! (let ((.cse108 (ControlFlow 0 2)) (.cse3 (= x@2 x@0)) (.cse116 (ControlFlow 0 4))) (let ((.cse111 (= .cse116 (- 3))) (.cse45 (not .cse3)) (.cse103 (= .cse108 (- 1)))) (let ((.cse38 (and .cse45 .cse103)) (.cse11 (= held@1 0)) (.cse4 (and .cse3 .cse111)) (.cse35 (= held@1 1)) (.cse99 (ControlFlow 0 5))) (let ((.cse84 (= .cse99 4)) (.cse5 (=> .cse4 .cse35)) (.cse86 (= .cse99 2)) (.cse9 (=> .cse38 .cse11))) (let ((.cse8 (=> .cse86 .cse9)) (.cse6 (=> .cse84 .cse5)) (.cse0 (= x@2 x@1))) (let ((.cse1 (and .cse11 .cse0)) (.cse17 (and .cse8 .cse6)) (.cse23 (+ x@0 1))) (let ((.cse19 (= x@1 .cse23)) (.cse7 (=> .cse1 .cse17))) (let ((.cse20 (=> .cse19 .cse7))) (let-proof ((.cse21 (! (let ((.cse25 (=> true .cse20))) (res .cse25 (! (=>+ 1 .cse25) :proves (+ .cse25 - .cse20) :input) (! (let ((.cse92 (= .cse99 (- 6)))) (let ((.cse26 (=> .cse92 true))) (let-proof ((.cse27 true+)) (res .cse26 (! (res true .cse27 (=>+ 1 .cse26)) :proves (+ .cse26) :input) (let ((.cse131 (ControlFlow 0 8))) (let ((.cse100 (= .cse131 5)) (.cse29 (and .cse26 .cse25))) (let ((.cse28 (=> .cse100 .cse29))) (res .cse28 (! (res .cse29 (and+ .cse29) (=>+ 1 .cse28)) :proves (+ .cse28 - .cse25 - .cse26) :input) (! (let ((.cse132 (ControlFlow 0 7))) (let ((.cse69 (= .cse132 4)) (.cse74 (= .cse132 2))) (let ((.cse43 (=> .cse74 .cse9)) (.cse42 (=> .cse69 .cse5))) (let ((.cse33 (and .cse35 .cse3)) (.cse44 (and .cse43 .cse42))) (let ((.cse76 (= .cse131 7)) (.cse32 (=> .cse33 .cse44))) (let ((.cse31 (=> .cse76 .cse32))) (let ((.cse117 (= held@0 0)) (.cse46 (and .cse28 .cse31))) (let ((.cse30 (=> .cse117 .cse46))) (res .cse30 (res .cse31 (! (res .cse32 (! (res .cse33 (! (=>+ 0 .cse32) :proves (+ .cse32 + .cse33) :input) (res .cse3 (! (and- 1 .cse33) :proves (- .cse33 + .cse3) :input) (let ((.cse34 (= 1 held@1))) (let ((.cse36 (= .cse35 .cse34))) (let-proof ((.cse37 (res .cse34 (res .cse35 (=+1 .cse36) (symm 1 held@1)) (res .cse35 (symm held@1 1) (=+2 .cse36))))) (res .cse34 (! (res .cse35 (and- 0 .cse33) (res .cse36 .cse37 (=-2 .cse36))) :proves (- .cse33 + .cse34) :input) (res .cse38 (res .cse5 (! (res .cse35 (let ((.cse39 (not .cse34))) (res .cse39 (let ((.cse40 (not .cse35))) (res .cse40 (not+ .cse40) (let ((.cse41 (= .cse40 .cse39))) (res .cse41 (res .cse36 .cse37 (cong (not .cse35) (not .cse34))) (=-2 .cse41))))) (not- .cse39))) (=>+ 1 .cse5)) :proves (+ .cse5 - .cse34) :input) (res .cse9 (! (=>+ 0 .cse9) :proves (+ .cse9 + .cse38) :input) (res .cse42 (! (=>+ 1 .cse42) :proves (+ .cse42 - .cse5) :input) (res .cse43 (! (=>+ 1 .cse43) :proves (+ .cse43 - .cse9) :input) (! (res .cse44 (and+ .cse44) (=>+ 1 .cse32)) :proves (- .cse42 + .cse32 - .cse43) :input))))) (! (res .cse45 (and- 0 .cse38) (not- .cse45)) :proves (- .cse38 - .cse3) :input)))))))) :proves (+ .cse32) :rup) (! (=>+ 1 .cse31) :proves (+ .cse31 - .cse32) :input)) :proves (+ .cse31) :rup) (! (res .cse46 (and+ .cse46) (=>+ 1 .cse30)) :proves (- .cse31 - .cse28 + .cse30) :input)) (! (let ((.cse128 (ControlFlow 0 9))) (let ((.cse118 (= .cse128 8))) (let ((.cse47 (=> .cse118 .cse30))) (res .cse47 (! (=>+ 1 .cse47) :proves (+ .cse47 - .cse30) :input) (! (let ((.cse48 (=> true .cse47))) (res .cse48 (! (=>+ 1 .cse48) :proves (+ .cse48 - .cse47) :input) (! (let ((.cse123 (= .cse128 (- 10)))) (let ((.cse49 (=> .cse123 true))) (res .cse49 (! (res true .cse27 (=>+ 1 .cse49)) :proves (+ .cse49) :input) (! (let ((.cse50 (and .cse49 .cse48))) (res .cse50 (and+ .cse50) (let ((.cse129 (= (ControlFlow 0 11) 9))) (let ((.cse51 (=> .cse129 .cse50))) (res .cse51 (=>+ 1 .cse51) (let ((.cse130 (= (ControlFlow 0 0) 11))) (let ((.cse52 (=> .cse130 .cse51))) (res .cse52 (=>+ 1 .cse52) (let ((.cse104 (- 0 1)) (.cse112 (- 0 3))) (let ((.cse110 (= .cse116 .cse112)) (.cse102 (= .cse108 .cse104))) (let ((.cse101 (and .cse45 .cse102)) (.cse109 (and .cse3 .cse110))) (let ((.cse70 (=> .cse109 .cse35)) (.cse75 (=> .cse101 .cse11))) (let ((.cse85 (=> .cse86 .cse75)) (.cse83 (=> .cse84 .cse70))) (let ((.cse82 (and .cse85 .cse83))) (let ((.cse93 (- 0 6)) (.cse81 (=> .cse1 .cse82))) (let ((.cse71 (=> .cse74 .cse75)) (.cse66 (=> .cse69 .cse70)) (.cse80 (=> .cse19 .cse81)) (.cse91 (= .cse99 .cse93)) (.cse89 (= 1 1))) (let ((.cse90 (=> .cse91 .cse89)) (.cse79 (=> .cse89 .cse80)) (.cse65 (and .cse71 .cse66))) (let ((.cse64 (=> .cse33 .cse65)) (.cse78 (and .cse90 .cse79))) (let ((.cse77 (=> .cse100 .cse78)) (.cse63 (=> .cse76 .cse64))) (let ((.cse62 (and .cse77 .cse63))) (let ((.cse124 (- 0 10)) (.cse61 (=> .cse117 .cse62))) (let ((.cse60 (=> .cse118 .cse61)) (.cse122 (= .cse128 .cse124)) (.cse95 (= 0 0))) (let ((.cse121 (=> .cse122 .cse95)) (.cse59 (=> .cse95 .cse60))) (let ((.cse58 (and .cse121 .cse59))) (let ((.cse57 (=> .cse129 .cse58))) (let ((.cse53 (=> .cse130 .cse57))) (let ((.cse55 (not .cse53))) (res .cse53 (let ((.cse54 (not .cse52))) (res .cse54 (res .cse55 (not+ .cse55) (let ((.cse56 (= .cse55 .cse54))) (res .cse56 (res (= .cse53 .cse52) (res (= .cse57 .cse51) (res (= .cse58 .cse50) (let ((.cse119 (= .cse95 true))) (let-proof ((.cse96 (refl 0))) (let-proof ((.cse120 (res true .cse27 (res .cse95 .cse96 (=+2 .cse119))))) (res (= .cse59 .cse48) (res (= .cse60 .cse47) (res (= .cse61 .cse30) (res (= .cse62 .cse46) (let ((.cse67 (= .cse70 .cse5)) (.cse72 (= .cse75 .cse9))) (let-proof ((.cse68 (res (= .cse35 .cse35) (refl .cse35) (res (= .cse109 .cse4) (res (= .cse110 .cse111) (res (= .cse112 (- 3)) (let ((.cse113 (* (- 1) 3))) (res (= .cse113 (- 3)) (poly* .cse113 (- 3)) (res .cse95 .cse96 (let ((.cse114 (+ 0 .cse113)) (.cse115 (+ 0 (- 3)))) (res (= .cse114 .cse115) (cong (+ 0 .cse113) (+ 0 (- 3))) (res (= .cse112 .cse114) (-def 0 3) (res (= .cse115 (- 3)) (poly+ .cse115 (- 3)) (trans .cse112 .cse114 .cse115 (- 3))))))))) (res (= .cse116 .cse116) (refl .cse116) (cong (= .cse116 .cse112) (= .cse116 (- 3))))) (res (= .cse3 .cse3) (refl .cse3) (cong (and .cse3 .cse110) (and .cse3 .cse111)))) (cong (=> .cse109 .cse35) (=> .cse4 .cse35))))) (.cse73 (res (= .cse11 .cse11) (refl .cse11) (res (= .cse101 .cse38) (res (= .cse102 .cse103) (res (= .cse104 (- 1)) (let ((.cse105 (* (- 1) 1))) (res (= .cse105 (- 1)) (poly* .cse105 (- 1)) (res .cse95 .cse96 (let ((.cse106 (+ 0 .cse105)) (.cse107 (+ 0 (- 1)))) (res (= .cse106 .cse107) (cong (+ 0 .cse105) (+ 0 (- 1))) (res (= .cse104 .cse106) (-def 0 1) (res (= .cse107 (- 1)) (poly+ .cse107 (- 1)) (trans .cse104 .cse106 .cse107 (- 1))))))))) (res (= .cse108 .cse108) (refl .cse108) (cong (= .cse108 .cse104) (= .cse108 (- 1))))) (res (= .cse45 .cse45) (refl .cse45) (cong (and .cse45 .cse102) (and .cse45 .cse103)))) (cong (=> .cse101 .cse11) (=> .cse38 .cse11)))))) (res (= .cse63 .cse31) (res (= .cse64 .cse32) (res (= .cse65 .cse44) (res (= .cse66 .cse42) (res .cse67 .cse68 (res (= .cse69 .cse69) (refl .cse69) (cong (=> .cse69 .cse70) (=> .cse69 .cse5)))) (res (= .cse71 .cse43) (res .cse72 .cse73 (res (= .cse74 .cse74) (refl .cse74) (cong (=> .cse74 .cse75) (=> .cse74 .cse9)))) (cong (and .cse71 .cse66) (and .cse43 .cse42)))) (res (= .cse33 .cse33) (refl .cse33) (cong (=> .cse33 .cse65) (=> .cse33 .cse44)))) (res (= .cse76 .cse76) (refl .cse76) (cong (=> .cse76 .cse64) (=> .cse76 .cse32)))) (res (= .cse77 .cse28) (res (= .cse78 .cse29) (let ((.cse87 (= .cse89 true))) (let-proof ((.cse88 (res true .cse27 (res .cse89 (refl 1) (=+2 .cse87))))) (res (= .cse79 .cse25) (res (= .cse80 .cse20) (res (= .cse81 .cse7) (res (= .cse82 .cse17) (res (= .cse83 .cse6) (res .cse67 .cse68 (res (= .cse84 .cse84) (refl .cse84) (cong (=> .cse84 .cse70) (=> .cse84 .cse5)))) (res (= .cse85 .cse8) (res .cse72 .cse73 (res (= .cse86 .cse86) (refl .cse86) (cong (=> .cse86 .cse75) (=> .cse86 .cse9)))) (cong (and .cse85 .cse83) (and .cse8 .cse6)))) (res (= .cse1 .cse1) (refl .cse1) (cong (=> .cse1 .cse82) (=> .cse1 .cse17)))) (res (= .cse19 .cse19) (refl .cse19) (cong (=> .cse19 .cse81) (=> .cse19 .cse7)))) (res .cse87 .cse88 (cong (=> .cse89 .cse80) (=> true .cse20)))) (res (= .cse90 .cse26) (res .cse87 .cse88 (res (= .cse91 .cse92) (res (= .cse93 (- 6)) (let ((.cse94 (* (- 1) 6))) (res (= .cse94 (- 6)) (poly* .cse94 (- 6)) (res .cse95 .cse96 (let ((.cse97 (+ 0 .cse94)) (.cse98 (+ 0 (- 6)))) (res (= .cse97 .cse98) (cong (+ 0 .cse94) (+ 0 (- 6))) (res (= .cse93 .cse97) (-def 0 6) (res (= .cse98 (- 6)) (poly+ .cse98 (- 6)) (trans .cse93 .cse97 .cse98 (- 6))))))))) (res (= .cse99 .cse99) (refl .cse99) (cong (= .cse99 .cse93) (= .cse99 (- 6))))) (cong (=> .cse91 .cse89) (=> .cse92 true)))) (cong (and .cse90 .cse79) (and .cse26 .cse25)))))) (res (= .cse100 .cse100) (refl .cse100) (cong (=> .cse100 .cse78) (=> .cse100 .cse29)))) (cong (and .cse77 .cse63) (and .cse28 .cse31)))))) (res (= .cse117 .cse117) (refl .cse117) (cong (=> .cse117 .cse62) (=> .cse117 .cse46)))) (res (= .cse118 .cse118) (refl .cse118) (cong (=> .cse118 .cse61) (=> .cse118 .cse30)))) (res .cse119 .cse120 (cong (=> .cse95 .cse60) (=> true .cse47)))) (res (= .cse121 .cse49) (res .cse119 .cse120 (res (= .cse122 .cse123) (res (= .cse124 (- 10)) (let ((.cse125 (* (- 1) 10))) (res (= .cse125 (- 10)) (poly* .cse125 (- 10)) (res .cse95 .cse96 (let ((.cse126 (+ 0 .cse125)) (.cse127 (+ 0 (- 10)))) (res (= .cse126 .cse127) (cong (+ 0 .cse125) (+ 0 (- 10))) (res (= .cse124 .cse126) (-def 0 10) (res (= .cse127 (- 10)) (poly+ .cse127 (- 10)) (trans .cse124 .cse126 .cse127 (- 10))))))))) (res (= .cse128 .cse128) (refl .cse128) (cong (= .cse128 .cse124) (= .cse128 (- 10))))) (cong (=> .cse122 .cse95) (=> .cse123 true)))) (cong (and .cse121 .cse59) (and .cse49 .cse48))))))) (res (= .cse129 .cse129) (refl .cse129) (cong (=> .cse129 .cse58) (=> .cse129 .cse50)))) (res (= .cse130 .cse130) (refl .cse130) (cong (=> .cse130 .cse57) (=> .cse130 .cse51)))) (cong (not .cse53) (not .cse52))) (=-2 .cse56)))) (not- .cse54))) (res .cse55 (assume .cse55) (not- .cse55)))))))))))))))))))))))))))))) :proves (- .cse49 - .cse48) :input)))) :proves (- .cse48) :rup))) :proves (- .cse47) :rup))))) :proves (- .cse30) :rup)))))))))) :proves (- .cse28) :rup))))))))) :proves (- .cse25) :rup))) :proves (- .cse20) :rup))) (let-proof ((.cse18 (! (res .cse20 (! (=>+ 1 .cse20) :proves (+ .cse20 - .cse7) :input) .cse21) :proves (- .cse7) :rup))) (let-proof ((.cse2 (! (res .cse7 (! (=>+ 0 .cse7) :proves (+ .cse7 + .cse1) :input) .cse18) :proves (+ .cse1) :rup))) (res .cse0 (! (res .cse1 .cse2 (! (and- 1 .cse1) :proves (- .cse1 + .cse0) :input)) :proves (+ .cse0) :rup) (res .cse3 (! (res .cse4 (! (res .cse5 (! (=>+ 0 .cse5) :proves (+ .cse5 + .cse4) :input) (! (res .cse6 (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse5) :input) (! (res .cse7 (res .cse8 (! (res .cse9 (! (let ((.cse10 (= 0 held@1))) (let ((.cse12 (= .cse11 .cse10))) (let-proof ((.cse13 (res .cse10 (res .cse11 (=+1 .cse12) (symm 0 held@1)) (res .cse11 (symm held@1 0) (=+2 .cse12))))) (res .cse10 (! (res .cse1 .cse2 (! (res .cse11 (and- 0 .cse1) (res .cse12 .cse13 (=-2 .cse12))) :proves (- .cse1 + .cse10) :input)) :proves (+ .cse10) :rup) (! (res .cse11 (let ((.cse14 (not .cse10))) (res .cse14 (let ((.cse15 (not .cse11))) (res .cse15 (not+ .cse15) (let ((.cse16 (= .cse15 .cse14))) (res .cse16 (res .cse12 .cse13 (cong (not .cse11) (not .cse10))) (=-2 .cse16))))) (not- .cse14))) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse10) :input))))) :proves (+ .cse9) :rup) (! (=>+ 1 .cse8) :proves (+ .cse8 - .cse9) :input)) :proves (+ .cse8) :rup) (! (res .cse17 (and+ .cse17) (=>+ 1 .cse7)) :proves (- .cse6 - .cse8 + .cse7) :input)) .cse18) :proves (- .cse6) :rup)) :proves (- .cse5) :rup)) :proves (+ .cse4) :rup) (! (and- 0 .cse4) :proves (- .cse4 + .cse3) :input)) :proves (+ .cse3) :rup) (res .cse19 (! (res .cse20 (! (=>+ 0 .cse20) :proves (+ .cse20 + .cse19) :input) .cse21) :proves (+ .cse19) :rup) (let ((.cse22 (= x@0 .cse23))) (res .cse22 (! (res (= x@0 x@2) (symm x@0 x@2) (trans x@0 x@2 x@1 .cse23)) :proves (+ .cse22 - .cse3 - .cse0 - .cse19) :trans (x@0 x@2 x@1 .cse23)) (! (let ((.cse24 (= .cse23 x@0))) (res .cse24 (symm .cse23 x@0) (farkas 1 .cse24))) :proves (- .cse22) :EQ))))))))))))))))) :proves () :rup)

