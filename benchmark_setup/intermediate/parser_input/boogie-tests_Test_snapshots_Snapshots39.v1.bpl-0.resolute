unsat
(! (let ((.cse71 (ControlFlow 0 2))) (let ((.cse2 (= .cse71 (- 1))) (.cse0 (= (- 1) .cse71))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse71)) (res .cse2 (symm .cse71 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse45 (= call1formal@r@0 903))) (let ((.cse1 (=> .cse2 .cse45))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse9 (= call1formal@r@0 0))) (let ((.cse10 (not .cse9))) (let ((.cse5 (=> .cse10 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse76 (= .cse71 (- 3)))) (let ((.cse7 (=> .cse76 .cse10)) (.cse102 (+ (* (- 1) call1formal@r@0) 42))) (let ((.cse18 (<= .cse102 0)) (.cse26 (and .cse7 .cse5))) (let ((.cse21 (< 0 .cse102)) (.cse6 (=> .cse18 .cse26))) (let-proof ((.cse22 (total .cse102 0))) (let-proof ((.cse24 (! (let ((.cse27 (=> true .cse6))) (res .cse27 (! (=>+ 1 .cse27) :proves (+ .cse27 - .cse6) :input) (! (let ((.cse89 (= .cse71 (- 4)))) (let ((.cse28 (=> .cse89 true))) (let-proof ((.cse29 true+)) (res .cse28 (! (res true .cse29 (=>+ 1 .cse28)) :proves (+ .cse28) :input) (! (let ((.cse30 (and .cse28 .cse27))) (res .cse30 (and+ .cse30) (let ((.cse100 (= (ControlFlow 0 5) 2))) (let ((.cse31 (=> .cse100 .cse30))) (res .cse31 (=>+ 1 .cse31) (let ((.cse101 (= (ControlFlow 0 0) 5))) (let ((.cse32 (=> .cse101 .cse31))) (res .cse32 (=>+ 1 .cse32) (let ((.cse61 (* 42 43))) (let ((.cse46 (div .cse61 2)) (.cse63 (- 0 1))) (let ((.cse77 (- 0 3)) (.cse62 (= .cse71 .cse63)) (.cse44 (= call1formal@r@0 .cse46))) (let ((.cse43 (=> .cse62 .cse44)) (.cse75 (= .cse71 .cse77))) (let ((.cse74 (=> .cse75 .cse10)) (.cse42 (=> .cse10 .cse43))) (let ((.cse90 (- 0 4)) (.cse82 (<= 42 call1formal@r@0)) (.cse41 (and .cse74 .cse42))) (let ((.cse40 (=> .cse82 .cse41)) (.cse88 (= .cse71 .cse90)) (.cse86 (<= 0 42))) (let ((.cse87 (=> .cse88 .cse86)) (.cse39 (=> .cse86 .cse40))) (let ((.cse38 (and .cse87 .cse39))) (let ((.cse37 (=> .cse100 .cse38))) (let ((.cse33 (=> .cse101 .cse37))) (let ((.cse35 (not .cse33))) (res .cse33 (let ((.cse34 (not .cse32))) (res .cse34 (res .cse35 (not+ .cse35) (let ((.cse36 (= .cse35 .cse34))) (res .cse36 (res (= .cse33 .cse32) (res (= .cse37 .cse31) (res (= .cse38 .cse30) (let ((.cse84 (= .cse86 true)) (.cse65 (= 0 0)) (.cse69 (= .cse71 .cse71))) (let-proof ((.cse85 (let ((.cse95 (<= (- 42) 0))) (let ((.cse94 (= .cse95 true)) (.cse96 (< 0 (- 42)))) (let-proof ((.cse97 (total (- 42) 0))) (res .cse94 (res true .cse29 (res .cse95 (res .cse96 .cse97 (farkas 1 .cse96)) (=+2 .cse94))) (let ((.cse98 (= .cse86 .cse95))) (res .cse98 (res .cse95 (res .cse86 (=+1 .cse98) (res .cse96 .cse97 (farkas 1 .cse86 1 .cse96))) (res .cse86 (let ((.cse99 (< 42 0))) (res .cse99 (total 0 42) (farkas 1 .cse99 1 .cse95))) (=+2 .cse98))) (trans .cse86 .cse95 true)))))))) (.cse66 (refl 0)) (.cse70 (refl .cse71))) (res (= .cse39 .cse27) (res (= .cse40 .cse6) (res (= .cse41 .cse26) (let ((.cse72 (= .cse10 .cse10))) (let-proof ((.cse73 (refl .cse10))) (res (= .cse42 .cse5) (res (= .cse43 .cse1) (res (= .cse44 .cse45) (res (= .cse46 903) (let ((.cse47 (div 1806 2))) (res (= .cse47 903) (let ((.cse48 (= 2 0))) (res .cse48 (let ((.cse60 (* 2 .cse47))) (let ((.cse49 (<= .cse60 1806))) (res .cse49 (div-low 1806 2) (let ((.cse52 (abs 2))) (let ((.cse50 (< 1806 (+ .cse60 .cse52)))) (res .cse50 (div-high 1806 2) (let ((.cse51 (= .cse52 2))) (res .cse51 (let ((.cse54 (< 2 0))) (let ((.cse53 (ite .cse54 (- 2) 2))) (res (= .cse52 .cse53) (expand (abs 2)) (res .cse54 (res (= .cse53 2) (ite2 .cse53) (trans .cse52 .cse53 2)) (farkas 1 .cse54))))) (let ((.cse58 (+ .cse47 (- 903)))) (let ((.cse55 (<= .cse58 (- 1)))) (res .cse55 (let ((.cse56 (< 903 .cse47))) (res .cse56 (let ((.cse57 (<= 0 .cse58))) (res .cse57 (total-int .cse58 (- 1)) (let ((.cse59 (< .cse47 903))) (res .cse59 (trichotomy .cse47 903) (farkas 1 .cse59 1 .cse57))))) (farkas 1 .cse49 2 .cse56))) (farkas 1 .cse50 2 .cse55 1 .cse51)))))))))))) (farkas 1 .cse48))) (res (= .cse46 .cse47) (res (= 2 2) (refl 2) (res (= .cse61 1806) (poly* .cse61 1806) (cong (div .cse61 2) (div 1806 2)))) (trans .cse46 .cse47 903)))) (res (= call1formal@r@0 call1formal@r@0) (refl call1formal@r@0) (cong (= call1formal@r@0 .cse46) (= call1formal@r@0 903)))) (res (= .cse62 .cse2) (res (= .cse63 (- 1)) (let ((.cse64 (* (- 1) 1))) (res (= .cse64 (- 1)) (poly* .cse64 (- 1)) (res .cse65 .cse66 (let ((.cse67 (+ 0 .cse64)) (.cse68 (+ 0 (- 1)))) (res (= .cse67 .cse68) (cong (+ 0 .cse64) (+ 0 (- 1))) (res (= .cse63 .cse67) (-def 0 1) (res (= .cse68 (- 1)) (poly+ .cse68 (- 1)) (trans .cse63 .cse67 .cse68 (- 1))))))))) (res .cse69 .cse70 (cong (= .cse71 .cse63) (= .cse71 (- 1))))) (cong (=> .cse62 .cse44) (=> .cse2 .cse45)))) (res .cse72 .cse73 (cong (=> .cse10 .cse43) (=> .cse10 .cse1)))) (res (= .cse74 .cse7) (res .cse72 .cse73 (res (= .cse75 .cse76) (res (= .cse77 (- 3)) (let ((.cse78 (* (- 1) 3))) (res (= .cse78 (- 3)) (poly* .cse78 (- 3)) (res .cse65 .cse66 (let ((.cse79 (+ 0 .cse78)) (.cse80 (+ 0 (- 3)))) (res (= .cse79 .cse80) (cong (+ 0 .cse78) (+ 0 (- 3))) (res (= .cse77 .cse79) (-def 0 3) (res (= .cse80 (- 3)) (poly+ .cse80 (- 3)) (trans .cse77 .cse79 .cse80 (- 3))))))))) (res .cse69 .cse70 (cong (= .cse71 .cse77) (= .cse71 (- 3))))) (cong (=> .cse75 .cse10) (=> .cse76 .cse10)))) (cong (and .cse74 .cse42) (and .cse7 .cse5)))))) (let ((.cse81 (= .cse82 .cse18))) (res .cse81 (res .cse18 (res .cse82 (=+1 .cse81) (res .cse21 .cse22 (farkas 1 .cse82 1 .cse21))) (res .cse82 (let ((.cse83 (< call1formal@r@0 42))) (res .cse83 (total 42 call1formal@r@0) (farkas 1 .cse83 1 .cse18))) (=+2 .cse81))) (cong (=> .cse82 .cse41) (=> .cse18 .cse26))))) (res .cse84 .cse85 (cong (=> .cse86 .cse40) (=> true .cse6)))) (res (= .cse87 .cse28) (res .cse84 .cse85 (res (= .cse88 .cse89) (res (= .cse90 (- 4)) (let ((.cse91 (* (- 1) 4))) (res (= .cse91 (- 4)) (poly* .cse91 (- 4)) (res .cse65 .cse66 (let ((.cse92 (+ 0 .cse91)) (.cse93 (+ 0 (- 4)))) (res (= .cse92 .cse93) (cong (+ 0 .cse91) (+ 0 (- 4))) (res (= .cse90 .cse92) (-def 0 4) (res (= .cse93 (- 4)) (poly+ .cse93 (- 4)) (trans .cse90 .cse92 .cse93 (- 4))))))))) (res .cse69 .cse70 (cong (= .cse71 .cse90) (= .cse71 (- 4))))) (cong (=> .cse88 .cse86) (=> .cse89 true)))) (cong (and .cse87 .cse39) (and .cse28 .cse27)))))) (res (= .cse100 .cse100) (refl .cse100) (cong (=> .cse100 .cse38) (=> .cse100 .cse30)))) (res (= .cse101 .cse101) (refl .cse101) (cong (=> .cse101 .cse37) (=> .cse101 .cse31)))) (cong (not .cse33) (not .cse32))) (=-2 .cse36)))) (not- .cse34))) (res .cse35 (assume .cse35) (not- .cse35))))))))))))))))))))))) :proves (- .cse28 - .cse27) :input))))) :proves (- .cse27) :rup))) :proves (- .cse6) :rup))) (res .cse6 (res .cse7 (! (let ((.cse8 (= 0 call1formal@r@0))) (let-proof ((.cse12 (symm call1formal@r@0 0))) (res .cse8 (! (res .cse9 (res .cse10 (not+ .cse10) (=>+ 1 .cse7)) (let ((.cse11 (= .cse9 .cse8))) (res .cse11 (res .cse8 (res .cse9 (=+1 .cse11) (symm 0 call1formal@r@0)) (res .cse9 .cse12 (=+2 .cse11))) (=-2 .cse11)))) :proves (+ .cse7 + .cse8) :input) (! (res .cse9 (! (res .cse9 .cse12 (let ((.cse13 (< call1formal@r@0 0))) (res .cse13 (let ((.cse14 (< 0 call1formal@r@0))) (res .cse14 (trichotomy call1formal@r@0 0) (farkas 1 .cse9 1 .cse14))) (farkas 1 .cse8 1 .cse13)))) :proves (- .cse8 + .cse9) :EQ) (! (let ((.cse25 (+ call1formal@r@0 (- 41)))) (let ((.cse16 (<= 1 .cse25)) (.cse15 (<= .cse25 0))) (let-proof ((.cse17 (total-int .cse25 0))) (res .cse15 (! (res .cse16 .cse17 (farkas 1 .cse9 1 .cse16)) :proves (- .cse9 + .cse15) :LA (1 (- 1))) (! (res .cse6 (! (res .cse18 (=>+ 0 .cse6) (let ((.cse19 (not .cse15))) (let-proof ((.cse23 (not- .cse19))) (res .cse19 (let ((.cse20 (= .cse18 .cse19))) (res .cse20 (res .cse19 (res .cse18 (=+1 .cse20) (res .cse15 (not+ .cse19) (farkas 1 .cse18 1 .cse15))) (res .cse18 (res .cse21 .cse22 (res .cse15 (res .cse16 .cse17 (farkas 1 .cse21 1 .cse16)) .cse23)) (=+2 .cse20))) (=-2 .cse20))) .cse23)))) :proves (+ .cse6 - .cse15) :input) .cse24) :proves (- .cse15) :rup))))) :proves (- .cse9) :rup)) :proves (- .cse8) :rup)))) :proves (+ .cse7) :rup) (! (res .cse26 (and+ .cse26) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) .cse24))))))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup)))) :proves (+ .cse0) :rup) (! (let ((.cse104 (not .cse2))) (res .cse2 (let ((.cse103 (not .cse0))) (res .cse103 (res .cse104 (not+ .cse104) (let ((.cse105 (= .cse104 .cse103))) (res .cse105 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse105)))) (not- .cse103))) (res .cse104 (assume .cse104) (not- .cse104)))) :proves (- .cse0) :input)))))) :proves () :rup)

