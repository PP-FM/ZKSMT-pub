unsat
(! (let ((.cse31 (ControlFlow 0 2))) (let ((.cse26 (= .cse31 (- 1))) (.cse24 (may_fail x@0))) (let ((.cse22 (and (= x@0 42) (= (ControlFlow 0 3) 2))) (.cse2 (=> .cse26 .cse24)) (.cse33 (ControlFlow 0 5))) (let ((.cse23 (= .cse33 3)) (.cse1 (=> .cse22 .cse2))) (let ((.cse0 (=> .cse23 .cse1))) (let-proof ((.cse3 (! (let ((.cse34 (= (- 1) .cse31))) (let ((.cse35 (= .cse26 .cse34))) (let-proof ((.cse36 (res .cse34 (res .cse26 (=+1 .cse35) (symm (- 1) .cse31)) (res .cse26 (symm .cse31 (- 1)) (=+2 .cse35))))) (res .cse34 (! (res .cse26 (=>+ 0 .cse2) (res .cse35 .cse36 (=-2 .cse35))) :proves (+ .cse2 + .cse34) :input) (! (let ((.cse38 (not .cse26))) (res .cse26 (let ((.cse37 (not .cse34))) (res .cse37 (res .cse38 (not+ .cse38) (let ((.cse39 (= .cse38 .cse37))) (res .cse39 (res .cse35 .cse36 (cong (not .cse26) (not .cse34))) (=-2 .cse39)))) (not- .cse37))) (res .cse38 (assume .cse38) (not- .cse38)))) :proves (- .cse34) :input))))) :proves (+ .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 .cse3 (! (=>+ 1 .cse1) :proves (+ .cse1 - .cse2) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse17 (and (= x@0 24) (= (ControlFlow 0 4) 2)))) (let ((.cse19 (= .cse33 4)) (.cse5 (=> .cse17 .cse2))) (let ((.cse4 (=> .cse19 .cse5))) (res .cse4 (! (res .cse5 (! (res .cse2 .cse3 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse2) :input)) :proves (+ .cse5) :rup) (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse5) :input)) :proves (+ .cse4) :rup) (! (let ((.cse6 (and .cse0 .cse4))) (res .cse6 (and+ .cse6) (let ((.cse32 (= (ControlFlow 0 0) 5))) (let ((.cse7 (=> .cse32 .cse6))) (res .cse7 (=>+ 1 .cse7) (let ((.cse27 (- 0 1))) (let ((.cse25 (= .cse31 .cse27))) (let ((.cse18 (=> .cse25 .cse24))) (let ((.cse14 (=> .cse17 .cse18)) (.cse21 (=> .cse22 .cse18))) (let ((.cse20 (=> .cse23 .cse21)) (.cse13 (=> .cse19 .cse14))) (let ((.cse12 (and .cse20 .cse13))) (let ((.cse8 (=> .cse32 .cse12))) (let ((.cse10 (not .cse8))) (res .cse8 (let ((.cse9 (not .cse7))) (res .cse9 (res .cse10 (not+ .cse10) (let ((.cse11 (= .cse10 .cse9))) (res .cse11 (res (= .cse8 .cse7) (res (= .cse12 .cse6) (let ((.cse15 (= .cse18 .cse2))) (let-proof ((.cse16 (res (= .cse24 .cse24) (refl .cse24) (res (= .cse25 .cse26) (res (= .cse27 (- 1)) (let ((.cse28 (* (- 1) 1))) (res (= .cse28 (- 1)) (poly* .cse28 (- 1)) (res (= 0 0) (refl 0) (let ((.cse29 (+ 0 .cse28)) (.cse30 (+ 0 (- 1)))) (res (= .cse29 .cse30) (cong (+ 0 .cse28) (+ 0 (- 1))) (res (= .cse27 .cse29) (-def 0 1) (res (= .cse30 (- 1)) (poly+ .cse30 (- 1)) (trans .cse27 .cse29 .cse30 (- 1))))))))) (res (= .cse31 .cse31) (refl .cse31) (cong (= .cse31 .cse27) (= .cse31 (- 1))))) (cong (=> .cse25 .cse24) (=> .cse26 .cse24)))))) (res (= .cse13 .cse4) (res (= .cse14 .cse5) (res .cse15 .cse16 (res (= .cse17 .cse17) (refl .cse17) (cong (=> .cse17 .cse18) (=> .cse17 .cse2)))) (res (= .cse19 .cse19) (refl .cse19) (cong (=> .cse19 .cse14) (=> .cse19 .cse5)))) (res (= .cse20 .cse0) (res (= .cse21 .cse1) (res .cse15 .cse16 (res (= .cse22 .cse22) (refl .cse22) (cong (=> .cse22 .cse18) (=> .cse22 .cse2)))) (res (= .cse23 .cse23) (refl .cse23) (cong (=> .cse23 .cse21) (=> .cse23 .cse1)))) (cong (and .cse20 .cse13) (and .cse0 .cse4)))))) (res (= .cse32 .cse32) (refl .cse32) (cong (=> .cse32 .cse12) (=> .cse32 .cse6)))) (cong (not .cse8) (not .cse7))) (=-2 .cse11)))) (not- .cse9))) (res .cse10 (assume .cse10) (not- .cse10)))))))))))))))) :proves (- .cse0 - .cse4) :input)))))))))))) :proves () :rup)

