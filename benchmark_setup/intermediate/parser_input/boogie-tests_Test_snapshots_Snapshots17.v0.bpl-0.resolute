unsat
(! (let ((.cse26 (ControlFlow 0 6))) (let ((.cse19 (= .cse26 (- 7))) (.cse40 (ControlFlow 0 8))) (let ((.cse27 (= .cse40 6)) (.cse1 (=> .cse19 true))) (let ((.cse0 (=> .cse27 .cse1))) (let-proof ((.cse2 true+)) (res .cse0 (! (res .cse1 (! (res true .cse2 (=>+ 1 .cse1)) :proves (+ .cse1) :input) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (let ((.cse3 (=> (= .cse40 4) true))) (res .cse3 (! (res true .cse2 (=>+ 1 .cse3)) :proves (+ .cse3) :input) (let ((.cse37 (ControlFlow 0 2))) (let ((.cse32 (= .cse37 (- 1)))) (let ((.cse38 (= .cse40 2)) (.cse5 (=> .cse32 true))) (let ((.cse4 (=> .cse38 .cse5))) (res .cse4 (! (res .cse5 (! (res true .cse2 (=>+ 1 .cse5)) :proves (+ .cse5) :input) (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse5) :input)) :proves (+ .cse4) :rup) (! (let ((.cse6 (and .cse4 .cse3))) (res .cse6 (and+ .cse6) (let ((.cse7 (and .cse6 .cse0))) (res .cse7 (and+ .cse7) (let ((.cse39 (= (ControlFlow 0 0) 8))) (let ((.cse8 (=> .cse39 .cse7))) (res .cse8 (=>+ 1 .cse8) (let ((.cse33 (- 0 1))) (let ((.cse20 (- 0 7)) (.cse31 (= .cse37 .cse33))) (let ((.cse30 (=> .cse31 true)) (.cse18 (= .cse26 .cse20))) (let ((.cse15 (=> .cse18 true)) (.cse29 (=> .cse38 .cse30))) (let ((.cse28 (and .cse29 .cse3)) (.cse14 (=> .cse27 .cse15))) (let ((.cse13 (and .cse28 .cse14))) (let ((.cse9 (=> .cse39 .cse13))) (let ((.cse11 (not .cse9))) (res .cse9 (let ((.cse10 (not .cse8))) (res .cse10 (res .cse11 (not+ .cse11) (let ((.cse12 (= .cse11 .cse10))) (res .cse12 (res (= .cse9 .cse8) (res (= .cse13 .cse7) (let ((.cse16 (= true true)) (.cse22 (= 0 0))) (let-proof ((.cse17 (refl true)) (.cse23 (refl 0))) (res (= .cse14 .cse0) (res (= .cse15 .cse1) (res .cse16 .cse17 (res (= .cse18 .cse19) (res (= .cse20 (- 7)) (let ((.cse21 (* (- 1) 7))) (res (= .cse21 (- 7)) (poly* .cse21 (- 7)) (res .cse22 .cse23 (let ((.cse24 (+ 0 .cse21)) (.cse25 (+ 0 (- 7)))) (res (= .cse24 .cse25) (cong (+ 0 .cse21) (+ 0 (- 7))) (res (= .cse20 .cse24) (-def 0 7) (res (= .cse25 (- 7)) (poly+ .cse25 (- 7)) (trans .cse20 .cse24 .cse25 (- 7))))))))) (res (= .cse26 .cse26) (refl .cse26) (cong (= .cse26 .cse20) (= .cse26 (- 7))))) (cong (=> .cse18 true) (=> .cse19 true)))) (res (= .cse27 .cse27) (refl .cse27) (cong (=> .cse27 .cse15) (=> .cse27 .cse1)))) (res (= .cse28 .cse6) (res (= .cse3 .cse3) (refl .cse3) (res (= .cse29 .cse4) (res (= .cse30 .cse5) (res .cse16 .cse17 (res (= .cse31 .cse32) (res (= .cse33 (- 1)) (let ((.cse34 (* (- 1) 1))) (res (= .cse34 (- 1)) (poly* .cse34 (- 1)) (res .cse22 .cse23 (let ((.cse35 (+ 0 .cse34)) (.cse36 (+ 0 (- 1)))) (res (= .cse35 .cse36) (cong (+ 0 .cse34) (+ 0 (- 1))) (res (= .cse33 .cse35) (-def 0 1) (res (= .cse36 (- 1)) (poly+ .cse36 (- 1)) (trans .cse33 .cse35 .cse36 (- 1))))))))) (res (= .cse37 .cse37) (refl .cse37) (cong (= .cse37 .cse33) (= .cse37 (- 1))))) (cong (=> .cse31 true) (=> .cse32 true)))) (res (= .cse38 .cse38) (refl .cse38) (cong (=> .cse38 .cse30) (=> .cse38 .cse5)))) (cong (and .cse29 .cse3) (and .cse4 .cse3)))) (cong (and .cse28 .cse14) (and .cse6 .cse0)))))) (res (= .cse39 .cse39) (refl .cse39) (cong (=> .cse39 .cse13) (=> .cse39 .cse7)))) (cong (not .cse9) (not .cse8))) (=-2 .cse12)))) (not- .cse10))) (res .cse11 (assume .cse11) (not- .cse11)))))))))))))))))) :proves (- .cse4 - .cse3 - .cse0) :input)))))))))))))) :proves () :rup)

