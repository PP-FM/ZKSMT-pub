unsat
(! (let ((.cse74 (ControlFlow 0 2))) (let ((.cse2 (= .cse74 (- 1))) (.cse0 (= (- 1) .cse74))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse74)) (res .cse2 (symm .cse74 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse120 (* (- 1) y@0))) (let ((.cse63 (+ x@0 .cse120))) (let ((.cse60 (<= .cse63 0))) (let ((.cse1 (=> .cse2 .cse60))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse121 (* (- 1) x@0))) (let ((.cse9 (<= .cse121 0))) (let ((.cse5 (=> .cse9 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse80 (= .cse74 (- 3)))) (let ((.cse7 (=> .cse80 .cse9))) (let ((.cse23 (and .cse7 .cse5))) (let ((.cse19 (< 0 .cse121)) (.cse6 (=> .cse9 .cse23))) (let-proof ((.cse20 (total .cse121 0))) (let-proof ((.cse18 (! (let ((.cse119 (+ .cse120 5))) (let ((.cse27 (<= .cse119 0))) (let ((.cse24 (=> .cse27 .cse6))) (res .cse24 (! (=>+ 1 .cse24) :proves (+ .cse24 - .cse6) :input) (! (let ((.cse91 (= .cse74 (- 4)))) (let ((.cse25 (=> .cse91 .cse27))) (let ((.cse42 (and .cse25 .cse24))) (let ((.cse38 (< 0 .cse119)) (.cse35 (=> .cse27 .cse42))) (let-proof ((.cse39 (total .cse119 0))) (let-proof ((.cse36 (let ((.cse108 (+ x (* (- 1) y)))) (let ((.cse105 (<= .cse108 0))) (let ((.cse101 (and .cse105 true)) (.cse99 (= (ControlFlow 0 5) 2))) (let ((.cse98 (and .cse101 .cse99))) (let ((.cse43 (=> .cse98 .cse35))) (res .cse43 (=>+ 1 .cse43) (let ((.cse116 (* (- 1) x))) (let ((.cse113 (<= .cse116 0))) (let ((.cse111 (and .cse113 true))) (let ((.cse44 (=> .cse111 .cse43))) (res .cse44 (=>+ 1 .cse44) (let ((.cse118 (= (ControlFlow 0 0) 5))) (let ((.cse45 (=> .cse118 .cse44))) (res .cse45 (=>+ 1 .cse45) (let ((.cse66 (- 0 1))) (let ((.cse81 (- 0 3)) (.cse65 (= .cse74 .cse66)) (.cse61 (<= x@0 y@0))) (let ((.cse58 (=> .cse65 .cse61)) (.cse79 (= .cse74 .cse81)) (.cse77 (<= 0 x@0))) (let ((.cse78 (=> .cse79 .cse77)) (.cse57 (=> .cse77 .cse58))) (let ((.cse92 (- 0 4)) (.cse56 (and .cse78 .cse57))) (let ((.cse55 (=> .cse77 .cse56)) (.cse90 (= .cse74 .cse92)) (.cse88 (<= 5 y@0))) (let ((.cse106 (<= x y)) (.cse89 (=> .cse90 .cse88)) (.cse54 (=> .cse88 .cse55))) (let ((.cse53 (and .cse89 .cse54)) (.cse100 (and .cse106 true))) (let ((.cse97 (and .cse100 .cse99)) (.cse52 (=> .cse88 .cse53)) (.cse114 (<= 0 x))) (let ((.cse110 (and .cse114 true)) (.cse51 (=> .cse97 .cse52))) (let ((.cse50 (=> .cse110 .cse51))) (let ((.cse46 (=> .cse118 .cse50))) (let ((.cse48 (not .cse46))) (res .cse46 (let ((.cse47 (not .cse45))) (res .cse47 (res .cse48 (not+ .cse48) (let ((.cse49 (= .cse48 .cse47))) (res .cse49 (res (= .cse46 .cse45) (res (= .cse50 .cse44) (let ((.cse102 (= true true))) (let-proof ((.cse103 (refl true))) (res (= .cse51 .cse43) (res (= .cse52 .cse35) (let ((.cse86 (= .cse88 .cse27))) (let-proof ((.cse87 (res .cse27 (res .cse88 (=+1 .cse86) (res .cse38 .cse39 (farkas 1 .cse88 1 .cse38))) (res .cse88 (let ((.cse96 (< y@0 5))) (res .cse96 (total 5 y@0) (farkas 1 .cse96 1 .cse27))) (=+2 .cse86))))) (res (= .cse53 .cse42) (let ((.cse68 (= 0 0)) (.cse72 (= .cse74 .cse74))) (let-proof ((.cse69 (refl 0)) (.cse73 (refl .cse74))) (res (= .cse54 .cse24) (res (= .cse55 .cse6) (let ((.cse75 (= .cse77 .cse9))) (let-proof ((.cse76 (res .cse9 (res .cse77 (=+1 .cse75) (res .cse19 .cse20 (farkas 1 .cse77 1 .cse19))) (res .cse77 (let ((.cse85 (< x@0 0))) (res .cse85 (total 0 x@0) (farkas 1 .cse85 1 .cse9))) (=+2 .cse75))))) (res (= .cse56 .cse23) (res (= .cse57 .cse5) (res (= .cse58 .cse1) (let ((.cse59 (= .cse61 .cse60))) (res .cse59 (res .cse60 (res .cse61 (=+1 .cse59) (let ((.cse62 (< 0 .cse63))) (res .cse62 (total .cse63 0) (farkas 1 .cse61 1 .cse62)))) (res .cse61 (let ((.cse64 (< y@0 x@0))) (res .cse64 (total x@0 y@0) (farkas 1 .cse64 1 .cse60))) (=+2 .cse59))) (res (= .cse65 .cse2) (res (= .cse66 (- 1)) (let ((.cse67 (* (- 1) 1))) (res (= .cse67 (- 1)) (poly* .cse67 (- 1)) (res .cse68 .cse69 (let ((.cse70 (+ 0 .cse67)) (.cse71 (+ 0 (- 1)))) (res (= .cse70 .cse71) (cong (+ 0 .cse67) (+ 0 (- 1))) (res (= .cse66 .cse70) (-def 0 1) (res (= .cse71 (- 1)) (poly+ .cse71 (- 1)) (trans .cse66 .cse70 .cse71 (- 1))))))))) (res .cse72 .cse73 (cong (= .cse74 .cse66) (= .cse74 (- 1))))) (cong (=> .cse65 .cse61) (=> .cse2 .cse60))))) (res .cse75 .cse76 (cong (=> .cse77 .cse58) (=> .cse9 .cse1)))) (res (= .cse78 .cse7) (res .cse75 .cse76 (res (= .cse79 .cse80) (res (= .cse81 (- 3)) (let ((.cse82 (* (- 1) 3))) (res (= .cse82 (- 3)) (poly* .cse82 (- 3)) (res .cse68 .cse69 (let ((.cse83 (+ 0 .cse82)) (.cse84 (+ 0 (- 3)))) (res (= .cse83 .cse84) (cong (+ 0 .cse82) (+ 0 (- 3))) (res (= .cse81 .cse83) (-def 0 3) (res (= .cse84 (- 3)) (poly+ .cse84 (- 3)) (trans .cse81 .cse83 .cse84 (- 3))))))))) (res .cse72 .cse73 (cong (= .cse74 .cse81) (= .cse74 (- 3))))) (cong (=> .cse79 .cse77) (=> .cse80 .cse9)))) (cong (and .cse78 .cse57) (and .cse7 .cse5)))) (res .cse75 .cse76 (cong (=> .cse77 .cse56) (=> .cse9 .cse23)))))) (res .cse86 .cse87 (cong (=> .cse88 .cse55) (=> .cse27 .cse6)))) (res (= .cse89 .cse25) (res .cse86 .cse87 (res (= .cse90 .cse91) (res (= .cse92 (- 4)) (let ((.cse93 (* (- 1) 4))) (res (= .cse93 (- 4)) (poly* .cse93 (- 4)) (res .cse68 .cse69 (let ((.cse94 (+ 0 .cse93)) (.cse95 (+ 0 (- 4)))) (res (= .cse94 .cse95) (cong (+ 0 .cse93) (+ 0 (- 4))) (res (= .cse92 .cse94) (-def 0 4) (res (= .cse95 (- 4)) (poly+ .cse95 (- 4)) (trans .cse92 .cse94 .cse95 (- 4))))))))) (res .cse72 .cse73 (cong (= .cse74 .cse92) (= .cse74 (- 4))))) (cong (=> .cse90 .cse88) (=> .cse91 .cse27)))) (cong (and .cse89 .cse54) (and .cse25 .cse24)))))) (res .cse86 .cse87 (cong (=> .cse88 .cse53) (=> .cse27 .cse42)))))) (res (= .cse97 .cse98) (res (= .cse99 .cse99) (refl .cse99) (res (= .cse100 .cse101) (res .cse102 .cse103 (let ((.cse104 (= .cse106 .cse105))) (res .cse104 (res .cse105 (res .cse106 (=+1 .cse104) (let ((.cse107 (< 0 .cse108))) (res .cse107 (total .cse108 0) (farkas 1 .cse106 1 .cse107)))) (res .cse106 (let ((.cse109 (< y x))) (res .cse109 (total x y) (farkas 1 .cse109 1 .cse105))) (=+2 .cse104))) (cong (and .cse106 true) (and .cse105 true))))) (cong (and .cse100 .cse99) (and .cse101 .cse99)))) (cong (=> .cse97 .cse52) (=> .cse98 .cse35)))) (res (= .cse110 .cse111) (res .cse102 .cse103 (let ((.cse112 (= .cse114 .cse113))) (res .cse112 (res .cse113 (res .cse114 (=+1 .cse112) (let ((.cse115 (< 0 .cse116))) (res .cse115 (total .cse116 0) (farkas 1 .cse114 1 .cse115)))) (res .cse114 (let ((.cse117 (< x 0))) (res .cse117 (total 0 x) (farkas 1 .cse117 1 .cse113))) (=+2 .cse112))) (cong (and .cse114 true) (and .cse113 true))))) (cong (=> .cse110 .cse51) (=> .cse111 .cse43)))))) (res (= .cse118 .cse118) (refl .cse118) (cong (=> .cse118 .cse50) (=> .cse118 .cse44)))) (cong (not .cse46) (not .cse45))) (=-2 .cse49)))) (not- .cse47))) (res .cse48 (assume .cse48) (not- .cse48)))))))))))))))))))))))))))))))) (res .cse25 (! (let ((.cse41 (+ y@0 (- 4)))) (let ((.cse26 (<= .cse41 0))) (let ((.cse28 (not .cse26))) (let ((.cse33 (= .cse27 .cse28))) (let-proof ((.cse29 (not+ .cse28)) (.cse37 (not- .cse28))) (let-proof ((.cse34 (res .cse28 (res .cse27 (=+1 .cse33) (res .cse26 .cse29 (farkas 1 .cse27 1 .cse26))) (res .cse27 (res .cse38 .cse39 (res .cse26 (let ((.cse40 (<= 1 .cse41))) (res .cse40 (total-int .cse41 0) (farkas 1 .cse38 1 .cse40))) .cse37)) (=+2 .cse33))))) (res .cse26 (! (res .cse27 (res .cse28 .cse29 (let ((.cse30 (not .cse28))) (res .cse30 (let ((.cse31 (not .cse27))) (res .cse31 (not+ .cse31) (let ((.cse32 (= .cse31 .cse30))) (res .cse32 (res .cse33 .cse34 (cong (not .cse27) (not .cse28))) (=-2 .cse32))))) (not- .cse30)))) (=>+ 1 .cse25)) :proves (+ .cse25 + .cse26) :input) (! (res .cse27 (res .cse35 (=>+ 0 .cse35) .cse36) (res .cse28 (res .cse33 .cse34 (=-2 .cse33)) .cse37)) :proves (- .cse26) :input)))))))) :proves (+ .cse25) :rup) (! (res .cse42 (and+ .cse42) (res .cse35 (=>+ 1 .cse35) .cse36)) :proves (- .cse25 - .cse24) :input)))))))) :proves (- .cse24) :rup))))) :proves (- .cse6) :rup))) (res .cse6 (res .cse7 (! (let ((.cse22 (+ x@0 1))) (let ((.cse8 (<= .cse22 0))) (let ((.cse10 (not .cse8))) (let ((.cse15 (= .cse9 .cse10))) (let-proof ((.cse11 (not+ .cse10)) (.cse17 (not- .cse10))) (let-proof ((.cse16 (res .cse10 (res .cse9 (=+1 .cse15) (res .cse8 .cse11 (farkas 1 .cse9 1 .cse8))) (res .cse9 (res .cse19 .cse20 (res .cse8 (let ((.cse21 (<= 1 .cse22))) (res .cse21 (total-int .cse22 0) (farkas 1 .cse19 1 .cse21))) .cse17)) (=+2 .cse15))))) (res .cse8 (! (res .cse9 (res .cse10 .cse11 (let ((.cse12 (not .cse10))) (res .cse12 (let ((.cse13 (not .cse9))) (res .cse13 (not+ .cse13) (let ((.cse14 (= .cse13 .cse12))) (res .cse14 (res .cse15 .cse16 (cong (not .cse9) (not .cse10))) (=-2 .cse14))))) (not- .cse12)))) (=>+ 1 .cse7)) :proves (+ .cse7 + .cse8) :input) (! (res .cse6 (! (res .cse9 (=>+ 0 .cse6) (res .cse10 (res .cse15 .cse16 (=-2 .cse15)) .cse17)) :proves (+ .cse6 - .cse8) :input) .cse18) :proves (- .cse8) :rup)))))))) :proves (+ .cse7) :rup) (! (res .cse23 (and+ .cse23) (=>+ 1 .cse6)) :proves (- .cse5 - .cse7 + .cse6) :input)) .cse18))))))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup)))))) :proves (+ .cse0) :rup) (! (let ((.cse123 (not .cse2))) (res .cse2 (let ((.cse122 (not .cse0))) (res .cse122 (res .cse123 (not+ .cse123) (let ((.cse124 (= .cse123 .cse122))) (res .cse124 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse124)))) (not- .cse122))) (res .cse123 (assume .cse123) (not- .cse123)))) :proves (- .cse0) :input)))))) :proves () :rup)

