unsat
(! (let ((.cse61 (ControlFlow 0 2))) (let ((.cse2 (= .cse61 (- 1))) (.cse0 (= (- 1) .cse61))) (let ((.cse3 (= .cse2 .cse0))) (let-proof ((.cse4 (res .cse0 (res .cse2 (=+1 .cse3) (symm (- 1) .cse61)) (res .cse2 (symm .cse61 (- 1)) (=+2 .cse3))))) (res .cse0 (! (let ((.cse94 (* (- 1) y))) (let ((.cse51 (+ .cse94 5))) (let ((.cse48 (<= .cse51 0))) (let ((.cse46 (not .cse48))) (let ((.cse1 (=> .cse2 .cse46))) (res .cse1 (! (res .cse2 (=>+ 0 .cse1) (res .cse3 .cse4 (=-2 .cse3))) :proves (+ .cse1 + .cse0) :input) (! (let ((.cse88 (+ x .cse94))) (let ((.cse7 (<= .cse88 0))) (let ((.cse5 (=> .cse7 .cse1))) (res .cse5 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse1) :input) (! (let ((.cse67 (= .cse61 (- 3)))) (let ((.cse93 (* (- 1) x)) (.cse6 (=> .cse67 .cse7))) (let ((.cse13 (and .cse6 .cse5)) (.cse77 (= .cse61 (- 4))) (.cse16 (<= .cse93 0))) (let ((.cse14 (=> .cse77 .cse16)) (.cse12 (=> .cse16 .cse13)) (.cse8 (and .cse7 true)) (.cse83 (= (ControlFlow 0 5) 2))) (let ((.cse9 (and .cse8 .cse83)) (.cse32 (and .cse14 .cse12))) (let ((.cse24 (and .cse16 true)) (.cse10 (=> .cse9 .cse32))) (let ((.cse28 (< 0 .cse93)) (.cse25 (=> .cse24 .cse10))) (let-proof ((.cse29 (total .cse93 0))) (let-proof ((.cse26 (let ((.cse92 (= (ControlFlow 0 0) 5))) (let ((.cse33 (=> .cse92 .cse25))) (res .cse33 (=>+ 1 .cse33) (let ((.cse53 (- 0 1))) (let ((.cse68 (- 0 3)) (.cse52 (= .cse61 .cse53)) (.cse47 (< y 5))) (let ((.cse44 (=> .cse52 .cse47)) (.cse66 (= .cse61 .cse68)) (.cse64 (<= x y))) (let ((.cse78 (- 0 4)) (.cse65 (=> .cse66 .cse64)) (.cse43 (=> .cse64 .cse44))) (let ((.cse42 (and .cse65 .cse43)) (.cse76 (= .cse61 .cse78)) (.cse74 (<= 0 x))) (let ((.cse75 (=> .cse76 .cse74)) (.cse41 (=> .cse74 .cse42)) (.cse84 (and .cse64 true))) (let ((.cse82 (and .cse84 .cse83)) (.cse40 (and .cse75 .cse41))) (let ((.cse90 (and .cse74 true)) (.cse39 (=> .cse82 .cse40))) (let ((.cse38 (=> .cse90 .cse39))) (let ((.cse34 (=> .cse92 .cse38))) (let ((.cse36 (not .cse34))) (res .cse34 (let ((.cse35 (not .cse33))) (res .cse35 (res .cse36 (not+ .cse36) (let ((.cse37 (= .cse36 .cse35))) (res .cse37 (res (= .cse34 .cse33) (res (= .cse38 .cse25) (let ((.cse72 (= .cse74 .cse16))) (let ((.cse85 (= true true))) (let-proof ((.cse86 (refl true)) (.cse73 (res .cse16 (res .cse74 (=+1 .cse72) (res .cse28 .cse29 (farkas 1 .cse74 1 .cse28))) (res .cse74 (let ((.cse91 (< x 0))) (res .cse91 (total 0 x) (farkas 1 .cse91 1 .cse16))) (=+2 .cse72))))) (res (= .cse39 .cse10) (let ((.cse62 (= .cse64 .cse7))) (let-proof ((.cse63 (res .cse7 (res .cse64 (=+1 .cse62) (let ((.cse87 (< 0 .cse88))) (res .cse87 (total .cse88 0) (farkas 1 .cse64 1 .cse87)))) (res .cse64 (let ((.cse89 (< y x))) (res .cse89 (total x y) (farkas 1 .cse89 1 .cse7))) (=+2 .cse62))))) (res (= .cse40 .cse32) (let ((.cse55 (= 0 0)) (.cse59 (= .cse61 .cse61))) (let-proof ((.cse56 (refl 0)) (.cse60 (refl .cse61))) (res (= .cse41 .cse12) (res (= .cse42 .cse13) (res (= .cse43 .cse5) (res (= .cse44 .cse1) (let ((.cse45 (= .cse47 .cse46))) (res .cse45 (res .cse46 (res .cse47 (=+1 .cse45) (res .cse48 (not+ .cse46) (farkas 1 .cse47 1 .cse48))) (res .cse47 (let ((.cse49 (<= 5 y))) (res .cse49 (total 5 y) (res .cse48 (let ((.cse50 (< 0 .cse51))) (res .cse50 (total .cse51 0) (farkas 1 .cse49 1 .cse50))) (not- .cse46)))) (=+2 .cse45))) (res (= .cse52 .cse2) (res (= .cse53 (- 1)) (let ((.cse54 (* (- 1) 1))) (res (= .cse54 (- 1)) (poly* .cse54 (- 1)) (res .cse55 .cse56 (let ((.cse57 (+ 0 .cse54)) (.cse58 (+ 0 (- 1)))) (res (= .cse57 .cse58) (cong (+ 0 .cse54) (+ 0 (- 1))) (res (= .cse53 .cse57) (-def 0 1) (res (= .cse58 (- 1)) (poly+ .cse58 (- 1)) (trans .cse53 .cse57 .cse58 (- 1))))))))) (res .cse59 .cse60 (cong (= .cse61 .cse53) (= .cse61 (- 1))))) (cong (=> .cse52 .cse47) (=> .cse2 .cse46))))) (res .cse62 .cse63 (cong (=> .cse64 .cse44) (=> .cse7 .cse1)))) (res (= .cse65 .cse6) (res .cse62 .cse63 (res (= .cse66 .cse67) (res (= .cse68 (- 3)) (let ((.cse69 (* (- 1) 3))) (res (= .cse69 (- 3)) (poly* .cse69 (- 3)) (res .cse55 .cse56 (let ((.cse70 (+ 0 .cse69)) (.cse71 (+ 0 (- 3)))) (res (= .cse70 .cse71) (cong (+ 0 .cse69) (+ 0 (- 3))) (res (= .cse68 .cse70) (-def 0 3) (res (= .cse71 (- 3)) (poly+ .cse71 (- 3)) (trans .cse68 .cse70 .cse71 (- 3))))))))) (res .cse59 .cse60 (cong (= .cse61 .cse68) (= .cse61 (- 3))))) (cong (=> .cse66 .cse64) (=> .cse67 .cse7)))) (cong (and .cse65 .cse43) (and .cse6 .cse5)))) (res .cse72 .cse73 (cong (=> .cse74 .cse42) (=> .cse16 .cse13)))) (res (= .cse75 .cse14) (res .cse72 .cse73 (res (= .cse76 .cse77) (res (= .cse78 (- 4)) (let ((.cse79 (* (- 1) 4))) (res (= .cse79 (- 4)) (poly* .cse79 (- 4)) (res .cse55 .cse56 (let ((.cse80 (+ 0 .cse79)) (.cse81 (+ 0 (- 4)))) (res (= .cse80 .cse81) (cong (+ 0 .cse79) (+ 0 (- 4))) (res (= .cse78 .cse80) (-def 0 4) (res (= .cse81 (- 4)) (poly+ .cse81 (- 4)) (trans .cse78 .cse80 .cse81 (- 4))))))))) (res .cse59 .cse60 (cong (= .cse61 .cse78) (= .cse61 (- 4))))) (cong (=> .cse76 .cse74) (=> .cse77 .cse16)))) (cong (and .cse75 .cse41) (and .cse14 .cse12)))))) (res (= .cse82 .cse9) (res (= .cse83 .cse83) (refl .cse83) (res (= .cse84 .cse8) (res .cse85 .cse86 (res .cse62 .cse63 (cong (and .cse64 true) (and .cse7 true)))) (cong (and .cse84 .cse83) (and .cse8 .cse83)))) (cong (=> .cse82 .cse40) (=> .cse9 .cse32)))))) (res (= .cse90 .cse24) (res .cse85 .cse86 (res .cse72 .cse73 (cong (and .cse74 true) (and .cse16 true)))) (cong (=> .cse90 .cse39) (=> .cse24 .cse10))))))) (res (= .cse92 .cse92) (refl .cse92) (cong (=> .cse92 .cse38) (=> .cse92 .cse25)))) (cong (not .cse34) (not .cse33))) (=-2 .cse37)))) (not- .cse35))) (res .cse36 (assume .cse36) (not- .cse36))))))))))))))))))) (let-proof ((.cse11 (res .cse25 (=>+ 1 .cse25) .cse26))) (res .cse6 (! (res .cse7 (! (res .cse8 (res .cse9 (res .cse10 (=>+ 0 .cse10) .cse11) (and- 0 .cse9)) (and- 0 .cse8)) :proves (+ .cse7) :input) (! (=>+ 1 .cse6) :proves (+ .cse6 - .cse7) :input)) :proves (+ .cse6) :rup) (res .cse12 (! (res .cse13 (and+ .cse13) (=>+ 1 .cse12)) :proves (+ .cse12 - .cse5 - .cse6) :input) (! (res .cse14 (! (let ((.cse31 (+ x 1))) (let ((.cse15 (<= .cse31 0))) (let ((.cse17 (not .cse15))) (let ((.cse22 (= .cse16 .cse17))) (let-proof ((.cse18 (not+ .cse17)) (.cse27 (not- .cse17))) (let-proof ((.cse23 (res .cse17 (res .cse16 (=+1 .cse22) (res .cse15 .cse18 (farkas 1 .cse16 1 .cse15))) (res .cse16 (res .cse28 .cse29 (res .cse15 (let ((.cse30 (<= 1 .cse31))) (res .cse30 (total-int .cse31 0) (farkas 1 .cse28 1 .cse30))) .cse27)) (=+2 .cse22))))) (res .cse15 (! (res .cse16 (res .cse17 .cse18 (let ((.cse19 (not .cse17))) (res .cse19 (let ((.cse20 (not .cse16))) (res .cse20 (not+ .cse20) (let ((.cse21 (= .cse20 .cse19))) (res .cse21 (res .cse22 .cse23 (cong (not .cse16) (not .cse17))) (=-2 .cse21))))) (not- .cse19)))) (=>+ 1 .cse14)) :proves (+ .cse14 + .cse15) :input) (! (res .cse16 (res .cse24 (res .cse25 (=>+ 0 .cse25) .cse26) (and- 0 .cse24)) (res .cse17 (res .cse22 .cse23 (=-2 .cse22)) .cse27)) :proves (- .cse15) :input)))))))) :proves (+ .cse14) :rup) (! (res .cse32 (and+ .cse32) (res .cse10 (=>+ 1 .cse10) .cse11)) :proves (- .cse14 - .cse12) :input)) :proves (- .cse12) :rup))))))))))))) :proves (- .cse5) :rup))))) :proves (- .cse1) :rup))))))) :proves (+ .cse0) :rup) (! (let ((.cse96 (not .cse2))) (res .cse2 (let ((.cse95 (not .cse0))) (res .cse95 (res .cse96 (not+ .cse96) (let ((.cse97 (= .cse96 .cse95))) (res .cse97 (res .cse3 .cse4 (cong (not .cse2) (not .cse0))) (=-2 .cse97)))) (not- .cse95))) (res .cse96 (assume .cse96) (not- .cse96)))) :proves (- .cse0) :input)))))) :proves () :rup)

