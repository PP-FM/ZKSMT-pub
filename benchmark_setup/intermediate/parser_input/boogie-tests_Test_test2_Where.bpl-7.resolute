unsat
(! (let ((.cse148 (ControlFlow 0 5)) (.cse7 (+ y@0 2)) (.cse118 (* (- 1) y@1))) (let ((.cse225 (* (- 1) y@0)) (.cse223 (+ .cse118 7)) (.cse4 (= y@1 .cse7)) (.cse139 (= .cse148 (- 4)))) (let ((.cse1 (and .cse4 .cse139)) (.cse16 (<= .cse223 0)) (.cse97 (ControlFlow 0 2)) (.cse222 (+ .cse225 w@0))) (let ((.cse74 (<= .cse222 0)) (.cse91 (= .cse97 (- 1))) (.cse163 (= y@0 10)) (.cse2 (=> .cse1 .cse16)) (.cse153 (= .cse148 (- 6))) (.cse60 (= w@1 6))) (let ((.cse32 (=> .cse153 .cse60)) (.cse30 (=> .cse60 .cse2)) (.cse40 (+ w@0 1)) (.cse89 (=> .cse91 .cse163)) (.cse176 (= .cse97 (- 3))) (.cse86 (and true .cse74))) (let ((.cse72 (=> .cse176 .cse86)) (.cse88 (=> .cse86 .cse89)) (.cse37 (= w@1 .cse40)) (.cse69 (and .cse32 .cse30)) (.cse224 (ControlFlow 0 7))) (let ((.cse221 (+ .cse225 5)) (.cse158 (= .cse224 5)) (.cse31 (=> .cse37 .cse69)) (.cse189 (= .cse224 2)) (.cse98 (and .cse72 .cse88))) (let ((.cse71 (=> .cse189 .cse98)) (.cse70 (=> .cse158 .cse31)) (.cse102 (= w@0 5)) (.cse112 (<= .cse221 0))) (let ((.cse103 (and .cse102 .cse112)) (.cse99 (and .cse71 .cse70))) (let ((.cse23 (< 0 .cse223)) (.cse81 (< 0 .cse222)) (.cse87 (* (- 1) w@0)) (.cse115 (< 0 .cse221)) (.cse100 (=> .cse103 .cse99))) (let-proof ((.cse24 (total .cse223 0)) (.cse82 (total .cse222 0)) (.cse85 true+) (.cse116 (total .cse221 0))) (let ((.cse119 (+ y@0 (- 4)))) (let-proof ((.cse101 (let ((.cse207 (+ x (* (- 1) y))) (.cse217 (* (- 1) x))) (let ((.cse214 (<= .cse217 0)) (.cse204 (<= .cse207 0))) (let ((.cse200 (and .cse204 true)) (.cse198 (= (ControlFlow 0 8) 7)) (.cse219 (and (= w x) true)) (.cse212 (and .cse214 true))) (let ((.cse210 (and .cse219 .cse212)) (.cse197 (and .cse200 .cse198))) (let ((.cse195 (and .cse210 .cse197))) (let ((.cse120 (=> .cse195 .cse100))) (res .cse120 (=>+ 1 .cse120) (let ((.cse220 (= (ControlFlow 0 0) 8))) (let ((.cse121 (=> .cse220 .cse120))) (res .cse121 (=>+ 1 .cse121) (let ((.cse140 (- 0 4))) (let ((.cse138 (= .cse148 .cse140))) (let ((.cse154 (- 0 6)) (.cse137 (and .cse4 .cse138)) (.cse135 (<= 7 y@1)) (.cse165 (- 0 1)) (.cse186 (- y@0 w@0))) (let ((.cse188 (= 5 5)) (.cse181 (<= 0 .cse186)) (.cse177 (- 0 3)) (.cse164 (= .cse97 .cse165)) (.cse133 (=> .cse137 .cse135)) (.cse152 (= .cse148 .cse154))) (let ((.cse151 (=> .cse152 .cse60)) (.cse132 (=> .cse60 .cse133)) (.cse162 (=> .cse164 .cse163)) (.cse175 (= .cse97 .cse177)) (.cse173 (and .cse188 .cse181))) (let ((.cse174 (=> .cse175 .cse173)) (.cse161 (=> .cse173 .cse162)) (.cse131 (and .cse151 .cse132))) (let ((.cse130 (=> .cse37 .cse131)) (.cse160 (and .cse174 .cse161)) (.cse215 (<= 0 x)) (.cse205 (<= x y))) (let ((.cse199 (and .cse205 true)) (.cse211 (and .cse215 true)) (.cse159 (=> .cse189 .cse160)) (.cse129 (=> .cse158 .cse130)) (.cse192 (<= 5 y@0))) (let ((.cse190 (and .cse102 .cse192)) (.cse128 (and .cse159 .cse129)) (.cse209 (and .cse219 .cse211)) (.cse196 (and .cse199 .cse198))) (let ((.cse194 (and .cse209 .cse196)) (.cse127 (=> .cse190 .cse128))) (let ((.cse126 (=> .cse194 .cse127))) (let ((.cse122 (=> .cse220 .cse126))) (let ((.cse124 (not .cse122))) (res .cse122 (let ((.cse123 (not .cse121))) (res .cse123 (res .cse124 (not+ .cse124) (let ((.cse125 (= .cse124 .cse123))) (res .cse125 (res (= .cse122 .cse121) (res (= .cse126 .cse120) (res (= .cse127 .cse100) (res (= .cse128 .cse99) (let ((.cse142 (= 0 0))) (let-proof ((.cse143 (refl 0))) (res (= .cse129 .cse70) (res (= .cse130 .cse31) (res (= .cse131 .cse69) (let ((.cse149 (= .cse60 .cse60)) (.cse146 (= .cse148 .cse148))) (let-proof ((.cse150 (refl .cse60)) (.cse147 (refl .cse148))) (res (= .cse132 .cse30) (res (= .cse133 .cse2) (let ((.cse134 (= .cse135 .cse16))) (res .cse134 (res .cse16 (res .cse135 (=+1 .cse134) (res .cse23 .cse24 (farkas 1 .cse135 1 .cse23))) (res .cse135 (let ((.cse136 (< y@1 7))) (res .cse136 (total 7 y@1) (farkas 1 .cse136 1 .cse16))) (=+2 .cse134))) (res (= .cse137 .cse1) (res (= .cse138 .cse139) (res (= .cse140 (- 4)) (let ((.cse141 (* (- 1) 4))) (res (= .cse141 (- 4)) (poly* .cse141 (- 4)) (res .cse142 .cse143 (let ((.cse144 (+ 0 .cse141)) (.cse145 (+ 0 (- 4)))) (res (= .cse144 .cse145) (cong (+ 0 .cse141) (+ 0 (- 4))) (res (= .cse140 .cse144) (-def 0 4) (res (= .cse145 (- 4)) (poly+ .cse145 (- 4)) (trans .cse140 .cse144 .cse145 (- 4))))))))) (res .cse146 .cse147 (cong (= .cse148 .cse140) (= .cse148 (- 4))))) (res (= .cse4 .cse4) (refl .cse4) (cong (and .cse4 .cse138) (and .cse4 .cse139)))) (cong (=> .cse137 .cse135) (=> .cse1 .cse16))))) (res .cse149 .cse150 (cong (=> .cse60 .cse133) (=> .cse60 .cse2)))) (res (= .cse151 .cse32) (res .cse149 .cse150 (res (= .cse152 .cse153) (res (= .cse154 (- 6)) (let ((.cse155 (* (- 1) 6))) (res (= .cse155 (- 6)) (poly* .cse155 (- 6)) (res .cse142 .cse143 (let ((.cse156 (+ 0 .cse155)) (.cse157 (+ 0 (- 6)))) (res (= .cse156 .cse157) (cong (+ 0 .cse155) (+ 0 (- 6))) (res (= .cse154 .cse156) (-def 0 6) (res (= .cse157 (- 6)) (poly+ .cse157 (- 6)) (trans .cse154 .cse156 .cse157 (- 6))))))))) (res .cse146 .cse147 (cong (= .cse148 .cse154) (= .cse148 (- 6))))) (cong (=> .cse152 .cse60) (=> .cse153 .cse60)))) (cong (and .cse151 .cse132) (and .cse32 .cse30)))))) (res (= .cse37 .cse37) (refl .cse37) (cong (=> .cse37 .cse131) (=> .cse37 .cse69)))) (res (= .cse158 .cse158) (refl .cse158) (cong (=> .cse158 .cse130) (=> .cse158 .cse31)))) (res (= .cse159 .cse71) (res (= .cse160 .cse98) (let ((.cse171 (= .cse173 .cse86)) (.cse169 (= .cse97 .cse97))) (let-proof ((.cse172 (res (= .cse181 .cse74) (let ((.cse185 (+ y@0 .cse87))) (let ((.cse183 (<= 0 .cse185))) (let ((.cse182 (= .cse183 .cse74))) (res .cse182 (res .cse74 (res .cse183 (=+1 .cse182) (res .cse81 .cse82 (farkas 1 .cse183 1 .cse81))) (res .cse183 (let ((.cse184 (< .cse185 0))) (res .cse184 (total 0 .cse185) (farkas 1 .cse184 1 .cse74))) (=+2 .cse182))) (res (= .cse181 .cse183) (res (= .cse186 .cse185) (-def y@0 w@0) (res .cse142 .cse143 (cong (<= 0 .cse186) (<= 0 .cse185)))) (trans .cse181 .cse183 .cse74)))))) (let ((.cse187 (= .cse188 true))) (res .cse187 (res true .cse85 (res .cse188 (refl 5) (=+2 .cse187))) (cong (and .cse188 .cse181) (and true .cse74)))))) (.cse170 (refl .cse97))) (res (= .cse161 .cse88) (res (= .cse162 .cse89) (res (= .cse163 .cse163) (refl .cse163) (res (= .cse164 .cse91) (res (= .cse165 (- 1)) (let ((.cse166 (* (- 1) 1))) (res (= .cse166 (- 1)) (poly* .cse166 (- 1)) (res .cse142 .cse143 (let ((.cse167 (+ 0 .cse166)) (.cse168 (+ 0 (- 1)))) (res (= .cse167 .cse168) (cong (+ 0 .cse166) (+ 0 (- 1))) (res (= .cse165 .cse167) (-def 0 1) (res (= .cse168 (- 1)) (poly+ .cse168 (- 1)) (trans .cse165 .cse167 .cse168 (- 1))))))))) (res .cse169 .cse170 (cong (= .cse97 .cse165) (= .cse97 (- 1))))) (cong (=> .cse164 .cse163) (=> .cse91 .cse163)))) (res .cse171 .cse172 (cong (=> .cse173 .cse162) (=> .cse86 .cse89)))) (res (= .cse174 .cse72) (res .cse171 .cse172 (res (= .cse175 .cse176) (res (= .cse177 (- 3)) (let ((.cse178 (* (- 1) 3))) (res (= .cse178 (- 3)) (poly* .cse178 (- 3)) (res .cse142 .cse143 (let ((.cse179 (+ 0 .cse178)) (.cse180 (+ 0 (- 3)))) (res (= .cse179 .cse180) (cong (+ 0 .cse178) (+ 0 (- 3))) (res (= .cse177 .cse179) (-def 0 3) (res (= .cse180 (- 3)) (poly+ .cse180 (- 3)) (trans .cse177 .cse179 .cse180 (- 3))))))))) (res .cse169 .cse170 (cong (= .cse97 .cse177) (= .cse97 (- 3))))) (cong (=> .cse175 .cse173) (=> .cse176 .cse86)))) (cong (and .cse174 .cse161) (and .cse72 .cse88)))))) (res (= .cse189 .cse189) (refl .cse189) (cong (=> .cse189 .cse160) (=> .cse189 .cse98)))) (cong (and .cse159 .cse129) (and .cse71 .cse70)))))) (res (= .cse190 .cse103) (let ((.cse191 (= .cse192 .cse112))) (res .cse191 (res .cse112 (res .cse192 (=+1 .cse191) (res .cse115 .cse116 (farkas 1 .cse192 1 .cse115))) (res .cse192 (let ((.cse193 (< y@0 5))) (res .cse193 (total 5 y@0) (farkas 1 .cse193 1 .cse112))) (=+2 .cse191))) (res (= .cse102 .cse102) (refl .cse102) (cong (and .cse102 .cse192) (and .cse102 .cse112))))) (cong (=> .cse190 .cse128) (=> .cse103 .cse99)))) (res (= .cse194 .cse195) (let ((.cse201 (= true true))) (let-proof ((.cse202 (refl true))) (res (= .cse196 .cse197) (res (= .cse198 .cse198) (refl .cse198) (res (= .cse199 .cse200) (res .cse201 .cse202 (let ((.cse203 (= .cse205 .cse204))) (res .cse203 (res .cse204 (res .cse205 (=+1 .cse203) (let ((.cse206 (< 0 .cse207))) (res .cse206 (total .cse207 0) (farkas 1 .cse205 1 .cse206)))) (res .cse205 (let ((.cse208 (< y x))) (res .cse208 (total x y) (farkas 1 .cse208 1 .cse204))) (=+2 .cse203))) (cong (and .cse205 true) (and .cse204 true))))) (cong (and .cse199 .cse198) (and .cse200 .cse198)))) (res (= .cse209 .cse210) (res (= .cse211 .cse212) (res .cse201 .cse202 (let ((.cse213 (= .cse215 .cse214))) (res .cse213 (res .cse214 (res .cse215 (=+1 .cse213) (let ((.cse216 (< 0 .cse217))) (res .cse216 (total .cse217 0) (farkas 1 .cse215 1 .cse216)))) (res .cse215 (let ((.cse218 (< x 0))) (res .cse218 (total 0 x) (farkas 1 .cse218 1 .cse214))) (=+2 .cse213))) (cong (and .cse215 true) (and .cse214 true))))) (res (= .cse219 .cse219) (refl .cse219) (cong (and .cse219 .cse211) (and .cse219 .cse212)))) (cong (and .cse209 .cse196) (and .cse210 .cse197)))))) (cong (=> .cse194 .cse127) (=> .cse195 .cse100)))) (res (= .cse220 .cse220) (refl .cse220) (cong (=> .cse220 .cse126) (=> .cse220 .cse120)))) (cong (not .cse122) (not .cse121))) (=-2 .cse125)))) (not- .cse123))) (res .cse124 (assume .cse124) (not- .cse124)))))))))))))))))))))))))))) (let ((.cse27 (<= 1 .cse119)) (.cse14 (<= .cse119 0))) (let-proof ((.cse104 (res .cse100 (=>+ 0 .cse100) .cse101)) (.cse28 (total-int .cse119 0))) (let ((.cse10 (+ y@0 .cse118 2))) (let-proof ((.cse29 (! (res .cse112 (res .cse103 .cse104 (and- 1 .cse103)) (let ((.cse113 (not .cse14))) (let-proof ((.cse117 (not- .cse113))) (res .cse113 (let ((.cse114 (= .cse112 .cse113))) (res .cse114 (res .cse113 (res .cse112 (=+1 .cse114) (res .cse14 (not+ .cse113) (farkas 1 .cse112 1 .cse14))) (res .cse112 (res .cse115 .cse116 (res .cse14 (res .cse27 .cse28 (farkas 1 .cse115 1 .cse27)) .cse117)) (=+2 .cse114))) (=-2 .cse114))) .cse117)))) :proves (- .cse14) :input))) (let ((.cse0 (= .cse10 0))) (let-proof ((.cse3 (! (res .cse30 (! (=>+ 1 .cse30) :proves (+ .cse30 - .cse2) :input) (! (let ((.cse109 (+ w@0 (- 5)))) (let ((.cse58 (= 0 .cse109)) (.cse34 (= .cse109 0))) (let-proof ((.cse59 (symm 0 .cse109))) (let-proof ((.cse35 (! (res .cse102 (res .cse103 .cse104 (and- 0 .cse103)) (let ((.cse105 (= .cse102 .cse34))) (res .cse105 (res .cse34 (res .cse102 (=+1 .cse105) (let ((.cse106 (= 5 w@0))) (res .cse106 (symm 5 w@0) (let ((.cse107 (< .cse109 0))) (res .cse107 (let ((.cse108 (< 0 .cse109))) (res .cse108 (trichotomy .cse109 0) (farkas 1 .cse102 1 .cse108))) (farkas 1 .cse106 1 .cse107)))))) (res .cse102 (res .cse58 .cse59 (let ((.cse110 (< w@0 5))) (res .cse110 (let ((.cse111 (< 5 w@0))) (res .cse111 (trichotomy w@0 5) (farkas 1 .cse34 1 .cse111))) (farkas 1 .cse58 1 .cse110)))) (=+2 .cse105))) (=-2 .cse105)))) :proves (+ .cse34) :input))) (let-proof ((.cse48 (! (res .cse70 (! (=>+ 1 .cse70) :proves (+ .cse70 - .cse31) :input) (! (res .cse71 (! (res .cse72 (! (let ((.cse84 (+ y@0 .cse87 1))) (let ((.cse73 (<= .cse84 0))) (res .cse73 (! (res .cse74 (let ((.cse75 (not .cse73))) (let-proof ((.cse76 (not+ .cse75))) (res .cse75 .cse76 (let ((.cse77 (not .cse75))) (res .cse77 (let ((.cse78 (not .cse74))) (res .cse78 (not+ .cse78) (let ((.cse79 (= .cse78 .cse77))) (res .cse79 (let ((.cse80 (= .cse74 .cse75))) (res .cse80 (res .cse75 (res .cse74 (=+1 .cse80) (res .cse73 .cse76 (farkas 1 .cse74 1 .cse73))) (res .cse74 (res .cse81 .cse82 (res .cse73 (let ((.cse83 (<= 1 .cse84))) (res .cse83 (total-int .cse84 0) (farkas 1 .cse81 1 .cse83))) (not- .cse75))) (=+2 .cse80))) (cong (not .cse74) (not .cse75)))) (=-2 .cse79))))) (not- .cse77)))))) (res true .cse85 (res .cse86 (and+ .cse86) (=>+ 1 .cse72)))) :proves (+ .cse72 + .cse73) :input) (! (res .cse34 .cse35 (res .cse14 (! (res .cse27 .cse28 (farkas 1 .cse27 1 .cse73 1 .cse34)) :proves (+ .cse14 - .cse73 - .cse34) :LA ((- 1) 1 1)) .cse29)) :proves (- .cse73) :rup)))) :proves (+ .cse72) :rup) (res .cse88 (! (res .cse89 (! (let ((.cse90 (= (- 1) .cse97))) (let ((.cse92 (= .cse91 .cse90))) (let-proof ((.cse93 (res .cse90 (res .cse91 (=+1 .cse92) (symm (- 1) .cse97)) (res .cse91 (symm .cse97 (- 1)) (=+2 .cse92))))) (res .cse90 (! (res .cse91 (=>+ 0 .cse89) (res .cse92 .cse93 (=-2 .cse92))) :proves (+ .cse89 + .cse90) :input) (! (let ((.cse95 (not .cse91))) (res .cse91 (let ((.cse94 (not .cse90))) (res .cse94 (res .cse95 (not+ .cse95) (let ((.cse96 (= .cse95 .cse94))) (res .cse96 (res .cse92 .cse93 (cong (not .cse91) (not .cse90))) (=-2 .cse96)))) (not- .cse94))) (res .cse95 (assume .cse95) (not- .cse95)))) :proves (- .cse90) :input))))) :proves (+ .cse89) :rup) (! (=>+ 1 .cse88) :proves (+ .cse88 - .cse89) :input)) :proves (+ .cse88) :rup) (! (res .cse98 (and+ .cse98) (=>+ 1 .cse71)) :proves (+ .cse71 - .cse88 - .cse72) :input))) :proves (+ .cse71) :rup) (! (res .cse99 (and+ .cse99) (res .cse100 (=>+ 1 .cse100) .cse101)) :proves (- .cse71 - .cse70) :input)) :proves (- .cse70) :rup)) :proves (- .cse31) :rup))) (res .cse31 (res .cse32 (! (let ((.cse51 (+ w@1 (- 6)))) (let ((.cse54 (< 0 .cse51)) (.cse53 (< .cse51 0)) (.cse33 (= .cse51 0))) (let-proof ((.cse55 (trichotomy .cse51 0))) (res .cse33 (! (res .cse34 .cse35 (let ((.cse43 (+ w@0 (* (- 1) w@1) 1))) (let ((.cse44 (= 0 .cse43)) (.cse36 (= .cse43 0))) (let-proof ((.cse45 (symm 0 .cse43))) (res .cse36 (! (res .cse31 (! (res .cse37 (=>+ 0 .cse31) (let ((.cse38 (= .cse37 .cse36))) (res .cse38 (res .cse36 (res .cse37 (=+1 .cse38) (let ((.cse39 (= .cse40 w@1))) (res .cse39 (symm .cse40 w@1) (let ((.cse41 (< .cse43 0))) (res .cse41 (let ((.cse42 (< 0 .cse43))) (res .cse42 (trichotomy .cse43 0) (farkas 1 .cse39 1 .cse42))) (farkas 1 .cse37 1 .cse41)))))) (res .cse37 (res .cse44 .cse45 (let ((.cse46 (< w@1 .cse40))) (res .cse46 (let ((.cse47 (< .cse40 w@1))) (res .cse47 (trichotomy w@1 .cse40) (farkas 1 .cse44 1 .cse47))) (farkas 1 .cse36 1 .cse46)))) (=+2 .cse38))) (=-2 .cse38)))) :proves (+ .cse31 + .cse36) :input) .cse48) :proves (+ .cse36) :rup) (let ((.cse49 (<= .cse51 0))) (res .cse49 (! (res .cse44 .cse45 (let ((.cse50 (<= 1 .cse51))) (res .cse50 (total-int .cse51 0) (farkas 1 .cse50 1 .cse44 1 .cse34)))) :proves (+ .cse49 - .cse36 - .cse34) :LA ((- 1) (- 1) 1)) (let ((.cse57 (+ w@1 (- 5)))) (let ((.cse52 (<= .cse57 0))) (res .cse52 (! (res .cse53 (res .cse54 .cse55 (farkas 1 .cse54 1 .cse49)) (let ((.cse56 (<= 1 .cse57))) (res .cse56 (total-int .cse57 0) (farkas 1 .cse56 1 .cse53)))) :proves (+ .cse52 + .cse33 - .cse49) :trichotomy) (! (res .cse58 .cse59 (farkas 1 .cse36 1 .cse58 1 .cse52)) :proves (- .cse36 - .cse34 - .cse52) :LA (1 (- 1) 1)))))))))))) :proves (+ .cse33) :rup) (! (res .cse60 (let ((.cse61 (not .cse33))) (res .cse61 (let ((.cse62 (not .cse60))) (res .cse62 (not+ .cse62) (let ((.cse63 (= .cse62 .cse61))) (res .cse63 (let ((.cse64 (= .cse60 .cse33))) (res .cse64 (res .cse33 (res .cse60 (=+1 .cse64) (let ((.cse65 (= 6 w@1))) (res .cse65 (symm 6 w@1) (res .cse53 (res .cse54 .cse55 (farkas 1 .cse60 1 .cse54)) (farkas 1 .cse65 1 .cse53))))) (res .cse60 (let ((.cse66 (= 0 .cse51))) (res .cse66 (symm 0 .cse51) (let ((.cse67 (< w@1 6))) (res .cse67 (let ((.cse68 (< 6 w@1))) (res .cse68 (trichotomy w@1 6) (farkas 1 .cse33 1 .cse68))) (farkas 1 .cse66 1 .cse67))))) (=+2 .cse64))) (cong (not .cse60) (not .cse33)))) (=-2 .cse63))))) (not- .cse61))) (=>+ 1 .cse32)) :proves (+ .cse32 - .cse33) :input))))) :proves (+ .cse32) :rup) (! (res .cse69 (and+ .cse69) (=>+ 1 .cse31)) :proves (- .cse30 - .cse32 + .cse31) :input)) .cse48)))))) :proves (- .cse30) :rup)) :proves (- .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + .cse1) :input) .cse3) :proves (+ .cse1) :rup) (! (res .cse4 (and- 0 .cse1) (let ((.cse5 (= .cse4 .cse0))) (res .cse5 (res .cse0 (res .cse4 (=+1 .cse5) (let ((.cse6 (= .cse7 y@1))) (res .cse6 (symm .cse7 y@1) (let ((.cse8 (< .cse10 0))) (res .cse8 (let ((.cse9 (< 0 .cse10))) (res .cse9 (trichotomy .cse10 0) (farkas 1 .cse6 1 .cse9))) (farkas 1 .cse4 1 .cse8)))))) (res .cse4 (let ((.cse11 (= 0 .cse10))) (res .cse11 (symm 0 .cse10) (let ((.cse12 (< y@1 .cse7))) (res .cse12 (let ((.cse13 (< .cse7 y@1))) (res .cse13 (trichotomy y@1 .cse7) (farkas 1 .cse11 1 .cse13))) (farkas 1 .cse0 1 .cse12))))) (=+2 .cse5))) (=-2 .cse5)))) :proves (- .cse1 + .cse0) :input)) :proves (+ .cse0) :rup) (res .cse14 (let ((.cse26 (+ y@1 (- 6)))) (let ((.cse15 (<= .cse26 0))) (res .cse15 (! (res .cse2 (! (res .cse16 (let ((.cse17 (not .cse15))) (let-proof ((.cse18 (not+ .cse17))) (res .cse17 .cse18 (let ((.cse19 (not .cse17))) (res .cse19 (let ((.cse20 (not .cse16))) (res .cse20 (not+ .cse20) (let ((.cse21 (= .cse20 .cse19))) (res .cse21 (let ((.cse22 (= .cse16 .cse17))) (res .cse22 (res .cse17 (res .cse16 (=+1 .cse22) (res .cse15 .cse18 (farkas 1 .cse16 1 .cse15))) (res .cse16 (res .cse23 .cse24 (res .cse15 (let ((.cse25 (<= 1 .cse26))) (res .cse25 (total-int .cse26 0) (farkas 1 .cse23 1 .cse25))) (not- .cse17))) (=+2 .cse22))) (cong (not .cse16) (not .cse17)))) (=-2 .cse21))))) (not- .cse19)))))) (=>+ 1 .cse2)) :proves (+ .cse2 + .cse15) :input) .cse3) :proves (+ .cse15) :rup) (! (res .cse27 .cse28 (farkas 1 .cse15 1 .cse27 1 .cse0)) :proves (- .cse15 + .cse14 - .cse0) :LA (1 (- 1) 1))))) .cse29))))))))))))))))))))) :proves () :rup)

