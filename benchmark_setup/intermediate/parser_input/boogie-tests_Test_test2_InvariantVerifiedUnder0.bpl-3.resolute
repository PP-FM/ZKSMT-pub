unsat
(! (let ((.cse58 (ControlFlow 0 2))) (let ((.cse49 (= .cse58 (- 1))) (.cse1 (or A Q))) (let ((.cse0 (=> .cse49 .cse1)) (.cse65 (= .cse58 (- 3))) (.cse6 (or A P))) (let ((.cse5 (=> .cse65 .cse6)) (.cse4 (=> P .cse0))) (let ((.cse70 (and Q (= (ControlFlow 0 4) 2))) (.cse9 (and .cse5 .cse4))) (let ((.cse8 (=> .cse70 .cse9)) (.cse20 (ControlFlow 0 5))) (let ((.cse71 (= .cse20 4)) (.cse10 (=> P .cse8))) (let ((.cse11 (=> .cse71 .cse10)) (.cse14 (= .cse20 (- 6)))) (let ((.cse12 (=> .cse14 .cse1)) (.cse2 (=> Q .cse11))) (let ((.cse29 (not A)) (.cse22 (and .cse12 .cse2)) (.cse82 (= .cse20 (- 7)))) (let ((.cse23 (=> .cse82 .cse6)) (.cse21 (=> P .cse22)) (.cse27 (=> .cse29 P))) (let ((.cse28 (and .cse27 (= (ControlFlow 0 8) 5))) (.cse24 (and .cse23 .cse21))) (let ((.cse25 (=> .cse28 .cse24))) (let-proof ((.cse26 (let ((.cse87 (= (ControlFlow 0 0) 8))) (let ((.cse30 (=> .cse87 .cse25))) (res .cse30 (=>+ 1 .cse30) (let ((.cse50 (- 0 1))) (let ((.cse66 (- 0 3)) (.cse48 (= .cse58 .cse50))) (let ((.cse45 (=> .cse48 .cse1)) (.cse64 (= .cse58 .cse66))) (let ((.cse61 (=> .cse64 .cse6)) (.cse44 (=> P .cse45))) (let ((.cse43 (and .cse61 .cse44))) (let ((.cse42 (=> .cse70 .cse43))) (let ((.cse74 (- 0 6)) (.cse41 (=> P .cse42))) (let ((.cse40 (=> .cse71 .cse41)) (.cse73 (= .cse20 .cse74))) (let ((.cse83 (- 0 7)) (.cse72 (=> .cse73 .cse1)) (.cse39 (=> Q .cse40))) (let ((.cse38 (and .cse72 .cse39)) (.cse81 (= .cse20 .cse83))) (let ((.cse80 (=> .cse81 .cse6)) (.cse37 (=> P .cse38))) (let ((.cse36 (and .cse80 .cse37))) (let ((.cse35 (=> .cse28 .cse36))) (let ((.cse31 (=> .cse87 .cse35))) (let ((.cse33 (not .cse31))) (res .cse31 (let ((.cse32 (not .cse30))) (res .cse32 (res .cse33 (not+ .cse33) (let ((.cse34 (= .cse33 .cse32))) (res .cse34 (res (= .cse31 .cse30) (res (= .cse35 .cse25) (res (= .cse36 .cse24) (let ((.cse62 (= .cse6 .cse6)) (.cse52 (= 0 0)) (.cse78 (= .cse20 .cse20))) (let-proof ((.cse63 (refl .cse6)) (.cse53 (refl 0)) (.cse79 (refl .cse20))) (res (= .cse37 .cse21) (let ((.cse59 (= P P))) (let-proof ((.cse60 (refl P))) (res (= .cse38 .cse22) (let ((.cse46 (= .cse1 .cse1))) (let-proof ((.cse47 (refl .cse1))) (res (= .cse39 .cse2) (res (= .cse40 .cse11) (res (= .cse41 .cse10) (res (= .cse42 .cse8) (res (= .cse43 .cse9) (let ((.cse56 (= .cse58 .cse58))) (let-proof ((.cse57 (refl .cse58))) (res (= .cse44 .cse4) (res (= .cse45 .cse0) (res .cse46 .cse47 (res (= .cse48 .cse49) (res (= .cse50 (- 1)) (let ((.cse51 (* (- 1) 1))) (res (= .cse51 (- 1)) (poly* .cse51 (- 1)) (res .cse52 .cse53 (let ((.cse54 (+ 0 .cse51)) (.cse55 (+ 0 (- 1)))) (res (= .cse54 .cse55) (cong (+ 0 .cse51) (+ 0 (- 1))) (res (= .cse50 .cse54) (-def 0 1) (res (= .cse55 (- 1)) (poly+ .cse55 (- 1)) (trans .cse50 .cse54 .cse55 (- 1))))))))) (res .cse56 .cse57 (cong (= .cse58 .cse50) (= .cse58 (- 1))))) (cong (=> .cse48 .cse1) (=> .cse49 .cse1)))) (res .cse59 .cse60 (cong (=> P .cse45) (=> P .cse0)))) (res (= .cse61 .cse5) (res .cse62 .cse63 (res (= .cse64 .cse65) (res (= .cse66 (- 3)) (let ((.cse67 (* (- 1) 3))) (res (= .cse67 (- 3)) (poly* .cse67 (- 3)) (res .cse52 .cse53 (let ((.cse68 (+ 0 .cse67)) (.cse69 (+ 0 (- 3)))) (res (= .cse68 .cse69) (cong (+ 0 .cse67) (+ 0 (- 3))) (res (= .cse66 .cse68) (-def 0 3) (res (= .cse69 (- 3)) (poly+ .cse69 (- 3)) (trans .cse66 .cse68 .cse69 (- 3))))))))) (res .cse56 .cse57 (cong (= .cse58 .cse66) (= .cse58 (- 3))))) (cong (=> .cse64 .cse6) (=> .cse65 .cse6)))) (cong (and .cse61 .cse44) (and .cse5 .cse4)))))) (res (= .cse70 .cse70) (refl .cse70) (cong (=> .cse70 .cse43) (=> .cse70 .cse9)))) (res .cse59 .cse60 (cong (=> P .cse42) (=> P .cse8)))) (res (= .cse71 .cse71) (refl .cse71) (cong (=> .cse71 .cse41) (=> .cse71 .cse10)))) (res (= Q Q) (refl Q) (cong (=> Q .cse40) (=> Q .cse11)))) (res (= .cse72 .cse12) (res .cse46 .cse47 (res (= .cse73 .cse14) (res (= .cse74 (- 6)) (let ((.cse75 (* (- 1) 6))) (res (= .cse75 (- 6)) (poly* .cse75 (- 6)) (res .cse52 .cse53 (let ((.cse76 (+ 0 .cse75)) (.cse77 (+ 0 (- 6)))) (res (= .cse76 .cse77) (cong (+ 0 .cse75) (+ 0 (- 6))) (res (= .cse74 .cse76) (-def 0 6) (res (= .cse77 (- 6)) (poly+ .cse77 (- 6)) (trans .cse74 .cse76 .cse77 (- 6))))))))) (res .cse78 .cse79 (cong (= .cse20 .cse74) (= .cse20 (- 6))))) (cong (=> .cse73 .cse1) (=> .cse14 .cse1)))) (cong (and .cse72 .cse39) (and .cse12 .cse2)))))) (res .cse59 .cse60 (cong (=> P .cse38) (=> P .cse22)))))) (res (= .cse80 .cse23) (res .cse62 .cse63 (res (= .cse81 .cse82) (res (= .cse83 (- 7)) (let ((.cse84 (* (- 1) 7))) (res (= .cse84 (- 7)) (poly* .cse84 (- 7)) (res .cse52 .cse53 (let ((.cse85 (+ 0 .cse84)) (.cse86 (+ 0 (- 7)))) (res (= .cse85 .cse86) (cong (+ 0 .cse84) (+ 0 (- 7))) (res (= .cse83 .cse85) (-def 0 7) (res (= .cse86 (- 7)) (poly+ .cse86 (- 7)) (trans .cse83 .cse85 .cse86 (- 7))))))))) (res .cse78 .cse79 (cong (= .cse20 .cse83) (= .cse20 (- 7))))) (cong (=> .cse81 .cse6) (=> .cse82 .cse6)))) (cong (and .cse80 .cse37) (and .cse23 .cse21)))))) (res (= .cse28 .cse28) (refl .cse28) (cong (=> .cse28 .cse36) (=> .cse28 .cse24)))) (res (= .cse87 .cse87) (refl .cse87) (cong (=> .cse87 .cse35) (=> .cse87 .cse25)))) (cong (not .cse31) (not .cse30))) (=-2 .cse34)))) (not- .cse32))) (res .cse33 (assume .cse33) (not- .cse33))))))))))))))))))))))) (let-proof ((.cse7 (! (res P (res A (! (res .cse27 (res .cse28 (res .cse25 (=>+ 0 .cse25) .cse26) (and- 0 .cse28)) (res .cse29 (not+ .cse29) (=>- .cse27))) :proves (+ A + P) :input) (! (or+ 0 .cse6) :proves (+ .cse6 - A) :input)) (! (or+ 1 .cse6) :proves (+ .cse6 - P) :input)) :proves (+ .cse6) :rup))) (let-proof ((.cse3 (! (res .cse12 (! (let ((.cse13 (= (- 6) .cse20))) (let ((.cse15 (= .cse14 .cse13))) (let-proof ((.cse16 (res .cse13 (res .cse14 (=+1 .cse15) (symm (- 6) .cse20)) (res .cse14 (symm .cse20 (- 6)) (=+2 .cse15))))) (res .cse13 (! (res .cse14 (=>+ 0 .cse12) (res .cse15 .cse16 (=-2 .cse15))) :proves (+ .cse12 + .cse13) :input) (! (let ((.cse18 (not .cse14))) (res .cse14 (let ((.cse17 (not .cse13))) (res .cse17 (res .cse18 (not+ .cse18) (let ((.cse19 (= .cse18 .cse17))) (res .cse19 (res .cse15 .cse16 (cong (not .cse14) (not .cse13))) (=-2 .cse19)))) (not- .cse17))) (res .cse18 (assume .cse18) (not- .cse18)))) :proves (- .cse13) :input))))) :proves (+ .cse12) :rup) (res .cse21 (! (res .cse22 (and+ .cse22) (=>+ 1 .cse21)) :proves (- .cse2 + .cse21 - .cse12) :input) (! (res .cse23 (! (res .cse6 .cse7 (! (=>+ 1 .cse23) :proves (+ .cse23 - .cse6) :input)) :proves (+ .cse23) :rup) (! (res .cse24 (and+ .cse24) (res .cse25 (=>+ 1 .cse25) .cse26)) :proves (- .cse23 - .cse21) :input)) :proves (- .cse21) :rup))) :proves (- .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res Q (! (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + Q) :input) .cse3) :proves (+ Q) :rup) (! (or+ 1 .cse1) :proves (+ .cse1 - Q) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (res .cse4 (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse0) :input) (! (res .cse5 (! (res .cse6 .cse7 (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (res .cse8 (! (res .cse9 (and+ .cse9) (=>+ 1 .cse8)) :proves (+ .cse8 - .cse4 - .cse5) :input) (! (res .cse10 (! (=>+ 1 .cse10) :proves (+ .cse10 - .cse8) :input) (! (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse10) :input) (! (res .cse2 (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse11) :input) .cse3) :proves (- .cse11) :rup)) :proves (- .cse10) :rup)) :proves (- .cse8) :rup))) :proves (- .cse4) :rup))))))))))))))))))) :proves () :rup)

