unsat
(! (let ((.cse61 (ControlFlow 0 2))) (let ((.cse52 (= .cse61 (- 1))) (.cse1 (or A Q))) (let ((.cse0 (=> .cse52 .cse1)) (.cse68 (= .cse61 (- 3))) (.cse6 (or A P))) (let ((.cse5 (=> .cse68 .cse6)) (.cse4 (=> P .cse0))) (let ((.cse73 (and Q (= (ControlFlow 0 4) 2))) (.cse10 (and .cse5 .cse4))) (let ((.cse9 (=> .cse73 .cse10)) (.cse21 (ControlFlow 0 5))) (let ((.cse74 (= .cse21 4)) (.cse11 (=> P .cse9))) (let ((.cse12 (=> .cse74 .cse11)) (.cse15 (= .cse21 (- 6)))) (let ((.cse13 (=> .cse15 .cse1)) (.cse2 (=> Q .cse12))) (let ((.cse22 (and .cse13 .cse2))) (let ((.cse7 (=> P .cse22))) (let-proof ((.cse8 (! (let ((.cse25 (= .cse21 (- 7)))) (let ((.cse23 (=> .cse25 .cse6))) (res .cse23 (! (let ((.cse24 (= (- 7) .cse21))) (let ((.cse26 (= .cse25 .cse24))) (let-proof ((.cse27 (res .cse24 (res .cse25 (=+1 .cse26) (symm (- 7) .cse21)) (res .cse25 (symm .cse21 (- 7)) (=+2 .cse26))))) (res .cse24 (! (res .cse25 (=>+ 0 .cse23) (res .cse26 .cse27 (=-2 .cse26))) :proves (+ .cse23 + .cse24) :input) (! (let ((.cse29 (not .cse25))) (res .cse25 (let ((.cse28 (not .cse24))) (res .cse28 (res .cse29 (not+ .cse29) (let ((.cse30 (= .cse29 .cse28))) (res .cse30 (res .cse26 .cse27 (cong (not .cse25) (not .cse24))) (=-2 .cse30)))) (not- .cse28))) (res .cse29 (assume .cse29) (not- .cse29)))) :proves (- .cse24) :input))))) :proves (+ .cse23) :rup) (! (let ((.cse31 (and .cse23 .cse7))) (res .cse31 (and+ .cse31) (let ((.cse89 (= (ControlFlow 0 8) 5))) (let ((.cse32 (=> .cse89 .cse31))) (res .cse32 (=>+ 1 .cse32) (let ((.cse90 (= (ControlFlow 0 0) 8))) (let ((.cse33 (=> .cse90 .cse32))) (res .cse33 (=>+ 1 .cse33) (let ((.cse53 (- 0 1))) (let ((.cse69 (- 0 3)) (.cse51 (= .cse61 .cse53))) (let ((.cse48 (=> .cse51 .cse1)) (.cse67 (= .cse61 .cse69))) (let ((.cse64 (=> .cse67 .cse6)) (.cse47 (=> P .cse48))) (let ((.cse46 (and .cse64 .cse47))) (let ((.cse45 (=> .cse73 .cse46))) (let ((.cse77 (- 0 6)) (.cse44 (=> P .cse45))) (let ((.cse43 (=> .cse74 .cse44)) (.cse76 (= .cse21 .cse77))) (let ((.cse85 (- 0 7)) (.cse75 (=> .cse76 .cse1)) (.cse42 (=> Q .cse43))) (let ((.cse41 (and .cse75 .cse42)) (.cse84 (= .cse21 .cse85))) (let ((.cse83 (=> .cse84 .cse6)) (.cse40 (=> P .cse41))) (let ((.cse39 (and .cse83 .cse40))) (let ((.cse38 (=> .cse89 .cse39))) (let ((.cse34 (=> .cse90 .cse38))) (let ((.cse36 (not .cse34))) (res .cse34 (let ((.cse35 (not .cse33))) (res .cse35 (res .cse36 (not+ .cse36) (let ((.cse37 (= .cse36 .cse35))) (res .cse37 (res (= .cse34 .cse33) (res (= .cse38 .cse32) (res (= .cse39 .cse31) (let ((.cse65 (= .cse6 .cse6)) (.cse55 (= 0 0)) (.cse81 (= .cse21 .cse21))) (let-proof ((.cse66 (refl .cse6)) (.cse56 (refl 0)) (.cse82 (refl .cse21))) (res (= .cse40 .cse7) (let ((.cse62 (= P P))) (let-proof ((.cse63 (refl P))) (res (= .cse41 .cse22) (let ((.cse49 (= .cse1 .cse1))) (let-proof ((.cse50 (refl .cse1))) (res (= .cse42 .cse2) (res (= .cse43 .cse12) (res (= .cse44 .cse11) (res (= .cse45 .cse9) (res (= .cse46 .cse10) (let ((.cse59 (= .cse61 .cse61))) (let-proof ((.cse60 (refl .cse61))) (res (= .cse47 .cse4) (res (= .cse48 .cse0) (res .cse49 .cse50 (res (= .cse51 .cse52) (res (= .cse53 (- 1)) (let ((.cse54 (* (- 1) 1))) (res (= .cse54 (- 1)) (poly* .cse54 (- 1)) (res .cse55 .cse56 (let ((.cse57 (+ 0 .cse54)) (.cse58 (+ 0 (- 1)))) (res (= .cse57 .cse58) (cong (+ 0 .cse54) (+ 0 (- 1))) (res (= .cse53 .cse57) (-def 0 1) (res (= .cse58 (- 1)) (poly+ .cse58 (- 1)) (trans .cse53 .cse57 .cse58 (- 1))))))))) (res .cse59 .cse60 (cong (= .cse61 .cse53) (= .cse61 (- 1))))) (cong (=> .cse51 .cse1) (=> .cse52 .cse1)))) (res .cse62 .cse63 (cong (=> P .cse48) (=> P .cse0)))) (res (= .cse64 .cse5) (res .cse65 .cse66 (res (= .cse67 .cse68) (res (= .cse69 (- 3)) (let ((.cse70 (* (- 1) 3))) (res (= .cse70 (- 3)) (poly* .cse70 (- 3)) (res .cse55 .cse56 (let ((.cse71 (+ 0 .cse70)) (.cse72 (+ 0 (- 3)))) (res (= .cse71 .cse72) (cong (+ 0 .cse70) (+ 0 (- 3))) (res (= .cse69 .cse71) (-def 0 3) (res (= .cse72 (- 3)) (poly+ .cse72 (- 3)) (trans .cse69 .cse71 .cse72 (- 3))))))))) (res .cse59 .cse60 (cong (= .cse61 .cse69) (= .cse61 (- 3))))) (cong (=> .cse67 .cse6) (=> .cse68 .cse6)))) (cong (and .cse64 .cse47) (and .cse5 .cse4)))))) (res (= .cse73 .cse73) (refl .cse73) (cong (=> .cse73 .cse46) (=> .cse73 .cse10)))) (res .cse62 .cse63 (cong (=> P .cse45) (=> P .cse9)))) (res (= .cse74 .cse74) (refl .cse74) (cong (=> .cse74 .cse44) (=> .cse74 .cse11)))) (res (= Q Q) (refl Q) (cong (=> Q .cse43) (=> Q .cse12)))) (res (= .cse75 .cse13) (res .cse49 .cse50 (res (= .cse76 .cse15) (res (= .cse77 (- 6)) (let ((.cse78 (* (- 1) 6))) (res (= .cse78 (- 6)) (poly* .cse78 (- 6)) (res .cse55 .cse56 (let ((.cse79 (+ 0 .cse78)) (.cse80 (+ 0 (- 6)))) (res (= .cse79 .cse80) (cong (+ 0 .cse78) (+ 0 (- 6))) (res (= .cse77 .cse79) (-def 0 6) (res (= .cse80 (- 6)) (poly+ .cse80 (- 6)) (trans .cse77 .cse79 .cse80 (- 6))))))))) (res .cse81 .cse82 (cong (= .cse21 .cse77) (= .cse21 (- 6))))) (cong (=> .cse76 .cse1) (=> .cse15 .cse1)))) (cong (and .cse75 .cse42) (and .cse13 .cse2)))))) (res .cse62 .cse63 (cong (=> P .cse41) (=> P .cse22)))))) (res (= .cse83 .cse23) (res .cse65 .cse66 (res (= .cse84 .cse25) (res (= .cse85 (- 7)) (let ((.cse86 (* (- 1) 7))) (res (= .cse86 (- 7)) (poly* .cse86 (- 7)) (res .cse55 .cse56 (let ((.cse87 (+ 0 .cse86)) (.cse88 (+ 0 (- 7)))) (res (= .cse87 .cse88) (cong (+ 0 .cse86) (+ 0 (- 7))) (res (= .cse85 .cse87) (-def 0 7) (res (= .cse88 (- 7)) (poly+ .cse88 (- 7)) (trans .cse85 .cse87 .cse88 (- 7))))))))) (res .cse81 .cse82 (cong (= .cse21 .cse85) (= .cse21 (- 7))))) (cong (=> .cse84 .cse6) (=> .cse25 .cse6)))) (cong (and .cse83 .cse40) (and .cse23 .cse7)))))) (res (= .cse89 .cse89) (refl .cse89) (cong (=> .cse89 .cse39) (=> .cse89 .cse31)))) (res (= .cse90 .cse90) (refl .cse90) (cong (=> .cse90 .cse38) (=> .cse90 .cse32)))) (cong (not .cse34) (not .cse33))) (=-2 .cse37)))) (not- .cse35))) (res .cse36 (assume .cse36) (not- .cse36)))))))))))))))))))))))))) :proves (- .cse23 - .cse7) :input)))) :proves (- .cse7) :rup))) (let-proof ((.cse3 (! (res .cse7 (res .cse13 (! (let ((.cse14 (= (- 6) .cse21))) (let ((.cse16 (= .cse15 .cse14))) (let-proof ((.cse17 (res .cse14 (res .cse15 (=+1 .cse16) (symm (- 6) .cse21)) (res .cse15 (symm .cse21 (- 6)) (=+2 .cse16))))) (res .cse14 (! (res .cse15 (=>+ 0 .cse13) (res .cse16 .cse17 (=-2 .cse16))) :proves (+ .cse13 + .cse14) :input) (! (let ((.cse19 (not .cse15))) (res .cse15 (let ((.cse18 (not .cse14))) (res .cse18 (res .cse19 (not+ .cse19) (let ((.cse20 (= .cse19 .cse18))) (res .cse20 (res .cse16 .cse17 (cong (not .cse15) (not .cse14))) (=-2 .cse20)))) (not- .cse18))) (res .cse19 (assume .cse19) (not- .cse19)))) :proves (- .cse14) :input))))) :proves (+ .cse13) :rup) (! (res .cse22 (and+ .cse22) (=>+ 1 .cse7)) :proves (- .cse2 - .cse13 + .cse7) :input)) .cse8) :proves (- .cse2) :rup))) (res .cse0 (! (res .cse1 (! (res Q (! (res .cse2 (! (=>+ 0 .cse2) :proves (+ .cse2 + Q) :input) .cse3) :proves (+ Q) :rup) (! (or+ 1 .cse1) :proves (+ .cse1 - Q) :input)) :proves (+ .cse1) :rup) (! (=>+ 1 .cse0) :proves (+ .cse0 - .cse1) :input)) :proves (+ .cse0) :rup) (res .cse4 (! (=>+ 1 .cse4) :proves (+ .cse4 - .cse0) :input) (! (res .cse5 (! (res .cse6 (! (res P (! (res .cse7 (! (=>+ 0 .cse7) :proves (+ .cse7 + P) :input) .cse8) :proves (+ P) :rup) (! (or+ 1 .cse6) :proves (+ .cse6 - P) :input)) :proves (+ .cse6) :rup) (! (=>+ 1 .cse5) :proves (+ .cse5 - .cse6) :input)) :proves (+ .cse5) :rup) (res .cse9 (! (res .cse10 (and+ .cse10) (=>+ 1 .cse9)) :proves (+ .cse9 - .cse4 - .cse5) :input) (! (res .cse11 (! (=>+ 1 .cse11) :proves (+ .cse11 - .cse9) :input) (! (res .cse12 (! (=>+ 1 .cse12) :proves (+ .cse12 - .cse11) :input) (! (res .cse2 (! (=>+ 1 .cse2) :proves (+ .cse2 - .cse12) :input) .cse3) :proves (- .cse12) :rup)) :proves (- .cse11) :rup)) :proves (- .cse9) :rup))) :proves (- .cse4) :rup)))))))))))))))) :proves () :rup)

