(set-option :produce-proofs true)
(set-option :proof-level lowlevel)
(set-logic QF_UFLIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x@2 () Int)
(declare-fun x@0 () Int)
(declare-fun held@2 () Int)
(declare-fun x@1 () Int)
(declare-fun held@1 () Int)
(declare-fun held@0 () Int)
(set-info :boogie-vc-id LockingExample)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let ((EndIteration_correct  (=> (and (= x@2 x@0) (= (ControlFlow 0 3) (- 0 2))) (= held@2 1))))
(let ((ContinueIteration_correct true))
(let ((LoopHead_@2_LoopEnd_correct  (=> (and (= held@2 1) (= x@2 x@0)) (and (=> (= (ControlFlow 0 6) 1) ContinueIteration_correct) (=> (= (ControlFlow 0 6) 3) EndIteration_correct)))))
(let ((UnlockNow_correct  (and (=> (= (ControlFlow 0 4) (- 0 5)) (= 1 1)) (=> (= 1 1) (=> (= x@1 (+ x@0 1)) (=> (and (= held@2 0) (= x@2 x@1)) (and (=> (= (ControlFlow 0 4) 1) ContinueIteration_correct) (=> (= (ControlFlow 0 4) 3) EndIteration_correct))))))))
(let ((LoopHead_correct  (=> (= held@1 (+ held@0 6)) (and (=> (= (ControlFlow 0 7) (- 0 8)) (= held@1 0)) (=> (= held@1 0) (and (=> (= (ControlFlow 0 7) 4) UnlockNow_correct) (=> (= (ControlFlow 0 7) 6) LoopHead_@2_LoopEnd_correct)))))))
(let ((start_correct  (=> (= (ControlFlow 0 9) 7) LoopHead_correct)))
start_correct)))))))
))
(check-sat)
(get-proof)
(assert (not (= (ControlFlow 0 7) (- 8))))
(check-sat)
(get-proof)
(pop 1)
; Invalid
(get-info :rlimit)
