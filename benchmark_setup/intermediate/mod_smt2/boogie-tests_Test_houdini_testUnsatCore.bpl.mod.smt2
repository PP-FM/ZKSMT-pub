(set-option :produce-proofs true)
(set-option :proof-level lowlevel)
(set-logic QF_UFLIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun be0 () Bool)
(declare-fun x () Int)
(declare-fun br0 () Bool)
(declare-fun br1 () Bool)
(declare-fun y () Int)
(declare-fun br2 () Bool)
(declare-fun z () Int)
(set-info :boogie-vc-id foo)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((anon0_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (=> be0 (= x 1)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (=> br0 (= x 1)) (=> br1 (= y 1))) (and (=> br2 (= z 1)) (= (ControlFlow 0 3) 2))) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-proof)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-proof)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :produce-proofs true)
(set-option :proof-level lowlevel)
(set-logic QF_UFLIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun br0 () Bool)
(declare-fun br1 () Bool)
(declare-fun br2 () Bool)
(set-info :boogie-vc-id bar)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon0_correct  (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> br0 (= 1 1))) (=> (=> br0 (= 1 1)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> br1 (= 2 1))) (=> (=> br1 (= 2 1)) (=> (= (ControlFlow 0 2) (- 0 1)) (=> br2 (= 3 1)))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 5) 2) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-proof)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-proof)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-proof)
(pop 1)
; Invalid
(get-info :rlimit)
