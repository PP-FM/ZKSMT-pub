(set-option :produce-proofs true)
(set-option :proof-level lowlevel)
(set-logic QF_UFLIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x@2 () Int)
(declare-fun x@1 () Int)
(declare-fun x@0 () Int)
(set-info :boogie-vc-id P)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let ((LoopBodyMore_correct  (=> (and (= x@2 (+ x@1 2)) (= (ControlFlow 0 5) (- 0 4))) (< x@2 100))))
(let ((LoopBody_@2_LoopHead_correct  (=> (= (ControlFlow 0 3) (- 0 2)) (< x@1 100))))
(let ((LoopBody_correct  (=> (= x@1 (+ x@0 1)) (and (=> (= (ControlFlow 0 6) 3) LoopBody_@2_LoopHead_correct) (=> (= (ControlFlow 0 6) 5) LoopBodyMore_correct)))))
(let ((LoopHead_correct  (=> (and (< x@0 100) (= (ControlFlow 0 7) 6)) LoopBody_correct)))
(let ((D_correct  (and (=> (= (ControlFlow 0 8) (- 0 9)) (< 3 100)) (=> (< 3 100) (=> (= (ControlFlow 0 8) 7) LoopHead_correct)))))
(let ((Goner_correct true))
(let ((A_correct  (and (=> (= (ControlFlow 0 10) 1) Goner_correct) (=> (= (ControlFlow 0 10) 8) D_correct))))
A_correct))))))))
))
(check-sat)
(get-proof)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-proof)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-proof)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :produce-proofs true)
(set-option :proof-level lowlevel)
(set-logic QF_UFLIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun i@0 () Int)
(declare-fun N () Int)
(set-info :boogie-vc-id WrongRange)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon2_LoopBody_correct  (=> (<= i@0 N) (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= 0 i@0)) (=> (<= 0 i@0) (=> (= (ControlFlow 0 3) (- 0 2)) (< i@0 N)))))))
(let ((anon2_LoopDone_correct true))
(let ((anon0_correct  (=> (<= 0 N) (and (=> (= (ControlFlow 0 5) 1) anon2_LoopDone_correct) (=> (= (ControlFlow 0 5) 3) anon2_LoopBody_correct)))))
anon0_correct))))
))
(check-sat)
(get-proof)
(assert (not (= (ControlFlow 0 3) (- 4))))
(check-sat)
(get-proof)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-proof)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :produce-proofs true)
(set-option :proof-level lowlevel)
(set-logic QF_UFLIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun i@0 () Int)
(declare-fun N () Int)
(declare-sort T@MyValue 0)
(declare-fun v@1 () T@MyValue)
(declare-sort |T@[Int]MyValue| 0)
(declare-fun |Select__T@[Int]MyValue_| (|T@[Int]MyValue| Int) T@MyValue)
(declare-fun a () |T@[Int]MyValue|)
(declare-fun SpecialValue () T@MyValue)
(set-info :boogie-vc-id ManyIterations)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let ((anon2_LoopBody_correct  (=> (< i@0 N) (and (=> (= (ControlFlow 0 3) (- 0 5)) (<= 0 i@0)) (=> (<= 0 i@0) (and (=> (= (ControlFlow 0 3) (- 0 4)) (< i@0 N)) (=> (< i@0 N) (=> (and (= v@1 (|Select__T@[Int]MyValue_| a i@0)) (= (ControlFlow 0 3) (- 0 2))) (not (= (|Select__T@[Int]MyValue_| a i@0) SpecialValue))))))))))
(let ((anon2_LoopDone_correct true))
(let ((anon0_correct  (=> (<= 0 N) (=> (and (not (= (|Select__T@[Int]MyValue_| a 0) SpecialValue)) (not (= (|Select__T@[Int]MyValue_| a 1) SpecialValue))) (and (=> (= (ControlFlow 0 6) 1) anon2_LoopDone_correct) (=> (= (ControlFlow 0 6) 3) anon2_LoopBody_correct))))))
anon0_correct))))
))
(check-sat)
(get-proof)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-proof)
(assert (not (= (ControlFlow 0 3) (- 5))))
(check-sat)
(get-proof)
(pop 1)
; Invalid
(get-info :rlimit)
