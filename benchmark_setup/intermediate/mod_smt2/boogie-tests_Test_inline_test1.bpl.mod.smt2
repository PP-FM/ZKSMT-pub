(set-option :produce-proofs true)
(set-option :proof-level lowlevel)
(set-logic QF_UFLIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun inline$inc$0$y@1 () Int)
(declare-fun inline$dec$0$y@1 () Int)
(declare-fun inline$incdec$0$z@1 () Int)
(set-info :boogie-vc-id Main)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let ((anon0$2_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (= (- inline$inc$0$y@1 1) inline$dec$0$y@1))))
(let ((inline$incdec$0$Return_correct  (and (=> (= (ControlFlow 0 3) (- 0 4)) (= inline$dec$0$y@1 (- (+ inline$inc$0$y@1 1) 2))) (=> (= inline$dec$0$y@1 (- (+ inline$inc$0$y@1 1) 2)) (=> (= (ControlFlow 0 3) 2) anon0$2_correct)))))
(let ((inline$dec$0$Return_correct  (and (=> (= (ControlFlow 0 5) (- 0 6)) (= inline$dec$0$y@1 (- inline$incdec$0$z@1 2))) (=> (= inline$dec$0$y@1 (- inline$incdec$0$z@1 2)) (=> (= (ControlFlow 0 5) 3) inline$incdec$0$Return_correct)))))
(let ((inline$dec$0$anon0_correct  (=> (and (= inline$dec$0$y@1 (- inline$incdec$0$z@1 2)) (= (ControlFlow 0 7) 5)) inline$dec$0$Return_correct)))
(let ((inline$incdec$0$anon0_correct  (=> (and (= inline$incdec$0$z@1 (+ inline$inc$0$y@1 1)) (= (ControlFlow 0 8) 7)) inline$dec$0$anon0_correct)))
(let ((inline$inc$0$Return_correct  (and (=> (= (ControlFlow 0 9) (- 0 10)) (= inline$inc$0$y@1 (+ 1 5))) (=> (= inline$inc$0$y@1 (+ 1 5)) (=> (= (ControlFlow 0 9) 8) inline$incdec$0$anon0_correct)))))
(let ((inline$inc$0$anon0_correct  (=> (and (= inline$inc$0$y@1 (+ 1 5)) (= (ControlFlow 0 11) 9)) inline$inc$0$Return_correct)))
(let ((anon0_correct  (=> (= (ControlFlow 0 12) 11) inline$inc$0$anon0_correct)))
anon0_correct)))))))))
))
(check-sat)
(get-proof)
(pop 1)
; Valid
(get-info :rlimit)
