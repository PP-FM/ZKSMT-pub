(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-info :boogie-vc-id M)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let ((anon5_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (= 3 3))))
(let ((anon8_Else_correct  (and (=> (= (ControlFlow 0 9) (- 0 12)) (= 2 2)) (=> (= 2 2) (and (=> (= (ControlFlow 0 9) (- 0 11)) (= 4 4)) (=> (= 4 4) (and (=> (= (ControlFlow 0 9) (- 0 10)) (= 5 5)) (=> (= 5 5) (=> (= (ControlFlow 0 9) 2) anon5_correct)))))))))
(let ((anon8_Then_correct  (and (=> (= (ControlFlow 0 7) (- 0 8)) (not (= 6 6))) (=> (not (= 6 6)) (=> (= (ControlFlow 0 7) 2) anon5_correct)))))
(let ((anon7_Then_correct  (and (=> (= (ControlFlow 0 5) (- 0 6)) (not (= 5 5))) (=> (not (= 5 5)) (=> (= (ControlFlow 0 5) 2) anon5_correct)))))
(let ((anon6_Then_correct  (and (=> (= (ControlFlow 0 3) (- 0 4)) (not (= 1 1))) (=> (= (ControlFlow 0 3) 2) anon5_correct))))
(let ((anon0_correct  (and (and (and (=> (= (ControlFlow 0 13) 3) anon6_Then_correct) (=> (= (ControlFlow 0 13) 5) anon7_Then_correct)) (=> (= (ControlFlow 0 13) 7) anon8_Then_correct)) (=> (= (ControlFlow 0 13) 9) anon8_Else_correct))))
anon0_correct)))))))
))
(check-sat)
(assert (not (= (ControlFlow 0 5) (- 6))))
(check-sat)
(assert (not (= (ControlFlow 0 3) (- 4))))
(check-sat)
(assert (not (= (ControlFlow 0 7) (- 8))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
