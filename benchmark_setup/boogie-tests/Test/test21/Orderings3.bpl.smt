(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun a () T@U)
(declare-fun WicketType () T@T)
(declare-fun c () T@U)
(declare-fun b () T@U)
(declare-fun d () T@U)
(declare-fun e () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (= (Ctor WicketType) 6) (= (type a) WicketType)))
(assert (forall ((w T@U) ) (!  (=> (and (= (type w) WicketType) (UOrdering2 a w)) (= a w))
 :pattern ( (UOrdering2 a w))
)))
(assert (= (type c) WicketType))
(assert (not (= c a)))
(assert (UOrdering2 c a))
(assert (= (type b) WicketType))
(assert (not (= c b)))
(assert (UOrdering2 c b))
(assert (forall ((w@@0 T@U) ) (!  (=> (= (type w@@0) WicketType) (=> (and (UOrdering2 c w@@0) (UOrdering2 w@@0 a)) (or (= c w@@0) (= a w@@0))))
 :pattern ( (UOrdering2 c w@@0) (UOrdering2 w@@0 a))
)))
(assert (forall ((w@@1 T@U) ) (!  (=> (= (type w@@1) WicketType) (=> (and (UOrdering2 c w@@1) (UOrdering2 w@@1 b)) (or (= c w@@1) (= b w@@1))))
 :pattern ( (UOrdering2 c w@@1) (UOrdering2 w@@1 b))
)))
(assert (forall ((w@@2 T@U) ) (!  (=> (and (= (type w@@2) WicketType) (UOrdering2 c w@@2)) (or (or (= c w@@2) (UOrdering2 a w@@2)) (UOrdering2 b w@@2)))
 :pattern ( (UOrdering2 c w@@2))
)))
(assert (= (type d) WicketType))
(assert (not (= d c)))
(assert (UOrdering2 d c))
(assert (forall ((w@@3 T@U) ) (!  (=> (= (type w@@3) WicketType) (=> (and (UOrdering2 d w@@3) (UOrdering2 w@@3 c)) (or (= d w@@3) (= c w@@3))))
 :pattern ( (UOrdering2 d w@@3) (UOrdering2 w@@3 c))
)))
(assert (forall ((w@@4 T@U) ) (!  (=> (and (= (type w@@4) WicketType) (UOrdering2 d w@@4)) (or (= d w@@4) (UOrdering2 c w@@4)))
 :pattern ( (UOrdering2 d w@@4))
)))
(assert (forall ((w@@5 T@U) ) (!  (=> (and (= (type w@@5) WicketType) (UOrdering2 w@@5 a)) (or (= a w@@5) (UOrdering2 w@@5 c)))
 :pattern ( (UOrdering2 w@@5 a))
)))
(assert (forall ((w@@6 T@U) ) (!  (=> (and (= (type w@@6) WicketType) (UOrdering2 w@@6 c)) (or (= c w@@6) (UOrdering2 w@@6 d)))
 :pattern ( (UOrdering2 w@@6 c))
)))
(assert (= (type e) WicketType))
(assert (distinct a b c d e)
)
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-info :boogie-vc-id P)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let ((anon0_correct  (and (=> (= (ControlFlow 0 2) (- 0 11)) (not (exists ((x@@8 T@U) ) (!  (and (= (type x@@8) WicketType) (and (UOrdering2 a x@@8) (not (= a x@@8))))
 :qid |Orderings3bpl.20:19|
 :skolemid |0|
 :no-pattern (type x@@8)
 :no-pattern (U_2_int x@@8)
 :no-pattern (U_2_bool x@@8)
)))) (=> (not (exists ((x@@9 T@U) ) (!  (and (= (type x@@9) WicketType) (and (UOrdering2 a x@@9) (not (= a x@@9))))
 :qid |Orderings3bpl.20:19|
 :skolemid |0|
 :no-pattern (type x@@9)
 :no-pattern (U_2_int x@@9)
 :no-pattern (U_2_bool x@@9)
))) (and (=> (= (ControlFlow 0 2) (- 0 10)) (forall ((x@@10 T@U) ) (!  (=> (and (= (type x@@10) WicketType) (UOrdering2 x@@10 a)) (or (= x@@10 a) (UOrdering2 x@@10 c)))
 :qid |Orderings3bpl.21:18|
 :skolemid |1|
 :no-pattern (type x@@10)
 :no-pattern (U_2_int x@@10)
 :no-pattern (U_2_bool x@@10)
))) (=> (forall ((x@@11 T@U) ) (!  (=> (and (= (type x@@11) WicketType) (UOrdering2 x@@11 a)) (or (= x@@11 a) (UOrdering2 x@@11 c)))
 :qid |Orderings3bpl.21:18|
 :skolemid |1|
 :no-pattern (type x@@11)
 :no-pattern (U_2_int x@@11)
 :no-pattern (U_2_bool x@@11)
)) (and (=> (= (ControlFlow 0 2) (- 0 9)) (and (UOrdering2 c b) (not (exists ((x@@12 T@U) ) (!  (and (= (type x@@12) WicketType) (and (and (and (UOrdering2 c x@@12) (UOrdering2 x@@12 b)) (not (= x@@12 c))) (not (= x@@12 b))))
 :qid |Orderings3bpl.23:29|
 :skolemid |2|
 :no-pattern (type x@@12)
 :no-pattern (U_2_int x@@12)
 :no-pattern (U_2_bool x@@12)
))))) (=> (and (UOrdering2 c b) (not (exists ((x@@13 T@U) ) (!  (and (= (type x@@13) WicketType) (and (and (and (UOrdering2 c x@@13) (UOrdering2 x@@13 b)) (not (= x@@13 c))) (not (= x@@13 b))))
 :qid |Orderings3bpl.23:29|
 :skolemid |2|
 :no-pattern (type x@@13)
 :no-pattern (U_2_int x@@13)
 :no-pattern (U_2_bool x@@13)
)))) (and (=> (= (ControlFlow 0 2) (- 0 8)) (and (not (UOrdering2 b a)) (not (UOrdering2 b c)))) (=> (and (not (UOrdering2 b a)) (not (UOrdering2 b c))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (and (and (UOrdering2 c a) (UOrdering2 c b)) (UOrdering2 d c))) (=> (and (and (UOrdering2 c a) (UOrdering2 c b)) (UOrdering2 d c)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (forall ((x@@14 T@U) ) (!  (=> (and (= (type x@@14) WicketType) (UOrdering2 c x@@14)) (or (or (= c x@@14) (UOrdering2 a x@@14)) (UOrdering2 b x@@14)))
 :qid |Orderings3bpl.28:18|
 :skolemid |3|
 :no-pattern (type x@@14)
 :no-pattern (U_2_int x@@14)
 :no-pattern (U_2_bool x@@14)
))) (=> (forall ((x@@15 T@U) ) (!  (=> (and (= (type x@@15) WicketType) (UOrdering2 c x@@15)) (or (or (= c x@@15) (UOrdering2 a x@@15)) (UOrdering2 b x@@15)))
 :qid |Orderings3bpl.28:18|
 :skolemid |3|
 :no-pattern (type x@@15)
 :no-pattern (U_2_int x@@15)
 :no-pattern (U_2_bool x@@15)
)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (forall ((x@@16 T@U) ) (!  (=> (and (= (type x@@16) WicketType) (UOrdering2 x@@16 c)) (or (= c x@@16) (UOrdering2 x@@16 d)))
 :qid |Orderings3bpl.29:18|
 :skolemid |4|
 :no-pattern (type x@@16)
 :no-pattern (U_2_int x@@16)
 :no-pattern (U_2_bool x@@16)
))) (=> (forall ((x@@17 T@U) ) (!  (=> (and (= (type x@@17) WicketType) (UOrdering2 x@@17 c)) (or (= c x@@17) (UOrdering2 x@@17 d)))
 :qid |Orderings3bpl.29:18|
 :skolemid |4|
 :no-pattern (type x@@17)
 :no-pattern (U_2_int x@@17)
 :no-pattern (U_2_bool x@@17)
)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (UOrdering2 d c)) (=> (UOrdering2 d c) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (and (not (UOrdering2 a d)) (not (UOrdering2 b d))) (not (UOrdering2 c d)))) (=> (and (and (not (UOrdering2 a d)) (not (UOrdering2 b d))) (not (UOrdering2 c d))) (=> (= (ControlFlow 0 2) (- 0 1)) false)))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 12) 2) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun a () T@U)
(declare-fun WicketType () T@T)
(declare-fun c () T@U)
(declare-fun b () T@U)
(declare-fun d () T@U)
(declare-fun e () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (= (Ctor WicketType) 6) (= (type a) WicketType)))
(assert (forall ((w T@U) ) (!  (=> (and (= (type w) WicketType) (UOrdering2 a w)) (= a w))
 :pattern ( (UOrdering2 a w))
)))
(assert (= (type c) WicketType))
(assert (not (= c a)))
(assert (UOrdering2 c a))
(assert (= (type b) WicketType))
(assert (not (= c b)))
(assert (UOrdering2 c b))
(assert (forall ((w@@0 T@U) ) (!  (=> (= (type w@@0) WicketType) (=> (and (UOrdering2 c w@@0) (UOrdering2 w@@0 a)) (or (= c w@@0) (= a w@@0))))
 :pattern ( (UOrdering2 c w@@0) (UOrdering2 w@@0 a))
)))
(assert (forall ((w@@1 T@U) ) (!  (=> (= (type w@@1) WicketType) (=> (and (UOrdering2 c w@@1) (UOrdering2 w@@1 b)) (or (= c w@@1) (= b w@@1))))
 :pattern ( (UOrdering2 c w@@1) (UOrdering2 w@@1 b))
)))
(assert (forall ((w@@2 T@U) ) (!  (=> (and (= (type w@@2) WicketType) (UOrdering2 c w@@2)) (or (or (= c w@@2) (UOrdering2 a w@@2)) (UOrdering2 b w@@2)))
 :pattern ( (UOrdering2 c w@@2))
)))
(assert (= (type d) WicketType))
(assert (not (= d c)))
(assert (UOrdering2 d c))
(assert (forall ((w@@3 T@U) ) (!  (=> (= (type w@@3) WicketType) (=> (and (UOrdering2 d w@@3) (UOrdering2 w@@3 c)) (or (= d w@@3) (= c w@@3))))
 :pattern ( (UOrdering2 d w@@3) (UOrdering2 w@@3 c))
)))
(assert (forall ((w@@4 T@U) ) (!  (=> (and (= (type w@@4) WicketType) (UOrdering2 d w@@4)) (or (= d w@@4) (UOrdering2 c w@@4)))
 :pattern ( (UOrdering2 d w@@4))
)))
(assert (forall ((w@@5 T@U) ) (!  (=> (and (= (type w@@5) WicketType) (UOrdering2 w@@5 a)) (or (= a w@@5) (UOrdering2 w@@5 c)))
 :pattern ( (UOrdering2 w@@5 a))
)))
(assert (forall ((w@@6 T@U) ) (!  (=> (and (= (type w@@6) WicketType) (UOrdering2 w@@6 c)) (or (= c w@@6) (UOrdering2 w@@6 d)))
 :pattern ( (UOrdering2 w@@6 c))
)))
(assert (= (type e) WicketType))
(assert (distinct a b c d e)
)
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-info :boogie-vc-id Q)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let ((anon0_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall ((x@@8 T@U) ) (!  (=> (= (type x@@8) WicketType) (=> (and (UOrdering2 x@@8 b) (not (= x@@8 b))) (UOrdering2 x@@8 c)))
 :qid |Orderings3bpl.39:18|
 :skolemid |5|
 :no-pattern (type x@@8)
 :no-pattern (U_2_int x@@8)
 :no-pattern (U_2_bool x@@8)
))) (=> (forall ((x@@9 T@U) ) (!  (=> (= (type x@@9) WicketType) (=> (and (UOrdering2 x@@9 b) (not (= x@@9 b))) (UOrdering2 x@@9 c)))
 :qid |Orderings3bpl.39:18|
 :skolemid |5|
 :no-pattern (type x@@9)
 :no-pattern (U_2_int x@@9)
 :no-pattern (U_2_bool x@@9)
)) (=> (= (ControlFlow 0 2) (- 0 1)) (not (exists ((x@@10 T@U) ) (!  (and (= (type x@@10) WicketType) (and (UOrdering2 b x@@10) (not (= b x@@10))))
 :qid |Orderings3bpl.41:19|
 :skolemid |6|
 :no-pattern (type x@@10)
 :no-pattern (U_2_int x@@10)
 :no-pattern (U_2_bool x@@10)
))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 4) 2) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
