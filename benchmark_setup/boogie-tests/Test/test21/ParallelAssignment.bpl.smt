(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x@0 () Int)
(declare-fun x () Int)
(declare-sort |T@[Int]Int| 0)
(declare-fun a@0 () |T@[Int]Int|)
(declare-fun |Store__T@[Int]Int_| (|T@[Int]Int| Int Int) |T@[Int]Int|)
(declare-fun |Select__T@[Int]Int_| (|T@[Int]Int| Int) Int)
(assert (forall ( ( ?x0 |T@[Int]Int|) ( ?x1 Int) ( ?x2 Int)) (! (= (|Select__T@[Int]Int_| (|Store__T@[Int]Int_| ?x0 ?x1 ?x2) ?x1)  ?x2) :weight 0)))
(assert (forall ( ( ?x0 |T@[Int]Int|) ( ?x1 Int) ( ?y1 Int) ( ?x2 Int)) (! (=>  (not (= ?x1 ?y1)) (= (|Select__T@[Int]Int_| (|Store__T@[Int]Int_| ?x0 ?x1 ?x2) ?y1) (|Select__T@[Int]Int_| ?x0 ?y1))) :weight 0)))
(declare-fun a () |T@[Int]Int|)
(declare-fun i () Int)
(declare-fun y () Int)
(declare-fun x@1 () Int)
(declare-fun a@1 () |T@[Int]Int|)
(declare-sort T@C 0)
(declare-sort T@D 0)
(declare-sort |T@[C,D]Int| 0)
(declare-sort |T@[Int][C,D]Int| 0)
(declare-fun b@0 () |T@[Int][C,D]Int|)
(declare-fun |Store__T@[Int][C,D]Int_| (|T@[Int][C,D]Int| Int |T@[C,D]Int|) |T@[Int][C,D]Int|)
(declare-fun |Select__T@[Int][C,D]Int_| (|T@[Int][C,D]Int| Int) |T@[C,D]Int|)
(assert (forall ( ( ?x0 |T@[Int][C,D]Int|) ( ?x1 Int) ( ?x2 |T@[C,D]Int|)) (! (= (|Select__T@[Int][C,D]Int_| (|Store__T@[Int][C,D]Int_| ?x0 ?x1 ?x2) ?x1)  ?x2) :weight 0)))
(assert (forall ( ( ?x0 |T@[Int][C,D]Int|) ( ?x1 Int) ( ?y1 Int) ( ?x2 |T@[C,D]Int|)) (! (=>  (not (= ?x1 ?y1)) (= (|Select__T@[Int][C,D]Int_| (|Store__T@[Int][C,D]Int_| ?x0 ?x1 ?x2) ?y1) (|Select__T@[Int][C,D]Int_| ?x0 ?y1))) :weight 0)))
(declare-fun b () |T@[Int][C,D]Int|)
(declare-fun |Store__T@[C,D]Int_| (|T@[C,D]Int| T@C T@D Int) |T@[C,D]Int|)
(declare-fun |Select__T@[C,D]Int_| (|T@[C,D]Int| T@C T@D) Int)
(assert (forall ( ( ?x0 |T@[C,D]Int|) ( ?x1 T@C) ( ?x2 T@D) ( ?x3 Int)) (! (= (|Select__T@[C,D]Int_| (|Store__T@[C,D]Int_| ?x0 ?x1 ?x2 ?x3) ?x1 ?x2)  ?x3) :weight 0)))
(assert (forall ( ( ?x0 |T@[C,D]Int|) ( ?x1 T@C) ( ?y1 T@C) ( ?x2 T@D) ( ?y2 T@D) ( ?x3 Int)) (! (=> (or  (not (= ?x1 ?y1)) (not (= ?x2 ?y2))) (= (|Select__T@[C,D]Int_| (|Store__T@[C,D]Int_| ?x0 ?x1 ?x2 ?x3) ?y1 ?y2) (|Select__T@[C,D]Int_| ?x0 ?y1 ?y2))) :weight 0)))
(declare-fun m () T@C)
(declare-fun n () T@D)
(declare-fun b@1 () |T@[Int][C,D]Int|)
(set-info :boogie-vc-id P)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((anon0_correct  (=> (and (= x@0 (+ x 1)) (= a@0 (|Store__T@[Int]Int_| a i 12))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (= (|Select__T@[Int]Int_| a@0 i) 12)) (=> (= (|Select__T@[Int]Int_| a@0 i) 12) (and (=> (= (ControlFlow 0 2) (- 0 6)) (and (= y y) (= x@0 x@0))) (=> (and (= y y) (= x@0 x@0)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= y x@0)) (=> (= y x@0) (=> (and (= x@1 (+ y 1)) (= a@1 (|Store__T@[Int]Int_| a@0 i y))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (= x@1 (+ y 1)) (= (|Select__T@[Int]Int_| a@1 i) y))) (=> (and (= x@1 (+ y 1)) (= (|Select__T@[Int]Int_| a@1 i) y)) (=> (and (= b@0 (|Store__T@[Int][C,D]Int_| b i (|Store__T@[C,D]Int_| (|Select__T@[Int][C,D]Int_| b i) m n 17))) (= b@1 (|Store__T@[Int][C,D]Int_| b@0 i (|Store__T@[C,D]Int_| (|Select__T@[Int][C,D]Int_| b@0 i) m n (|Select__T@[Int]Int_| a@1 x@1))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= (|Select__T@[C,D]Int_| (|Select__T@[Int][C,D]Int_| b@1 i) m n) (|Select__T@[Int]Int_| a@1 (+ y 1)))) (=> (= (|Select__T@[C,D]Int_| (|Select__T@[Int][C,D]Int_| b@1 i) m n) (|Select__T@[Int]Int_| a@1 (+ y 1))) (=> (= (ControlFlow 0 2) (- 0 1)) false))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 8) 2) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 5))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x@0 () Int)
(declare-fun y@0 () Int)
(declare-fun z@0 () Int)
(declare-fun x@1 () Int)
(declare-fun y@1 () Int)
(declare-fun z@1 () Int)
(declare-fun x@2 () Int)
(declare-fun y@2 () Int)
(declare-fun z@2 () Int)
(declare-sort |T@[Int]Int| 0)
(declare-fun |Select__T@[Int]Int_| (|T@[Int]Int| Int) Int)
(declare-fun a () |T@[Int]Int|)
(set-info :boogie-vc-id Q)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon0_correct  (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (and (= 1 1) (= 2 2)) (= 3 3))) (=> (and (and (= 1 1) (= 2 2)) (= 3 3)) (=> (and (and (= x@0 (+ 2 1)) (= y@0 (+ 3 1))) (= z@0 (+ 1 1))) (=> (and (and (and (= x@1 (+ y@0 1)) (= y@1 (+ z@0 1))) (= z@1 (+ x@0 1))) (and (and (= x@2 (+ y@1 1)) (= y@2 (+ z@1 1))) (= z@2 (+ x@1 1)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (and (= x@2 4) (= y@2 5)) (= z@2 6))) (=> (and (and (= x@2 4) (= y@2 5)) (= z@2 6)) (=> (= (ControlFlow 0 2) (- 0 1)) (= (|Select__T@[Int]Int_| a x@2) (|Select__T@[Int]Int_| a y@2)))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 5) 2) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
