(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x@0 () Int)
(declare-fun x@1 () Int)
(declare-fun x@2 () Int)
(set-info :boogie-vc-id P)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let ((anon0_correct  (and (=> (= (ControlFlow 0 2) (- 0 5)) (and (> 1000000 0) (< 1000000 2000000))) (=> (and (> 1000000 0) (< 1000000 2000000)) (=> (= x@0 (+ 1000000 256)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (= x@0 1000256)) (=> (= x@0 1000256) (=> (and (= x@1 (+ 1000000000000 100100)) (= x@2 (- x@1 100))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= x@2 1000000100000)) (=> (= x@2 1000000100000) (=> (= (ControlFlow 0 2) (- 0 1)) (< x@2 (- 0 123456789)))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 6) 2) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
