(set-logic QF_UFLIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-sort T@T 0)
(declare-fun g () T@T)
(declare-fun c () T@T)
(declare-fun f () Int)
(assert (not (= g c)))
(assert (>= f 13))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x@0 () Int)
(set-info :boogie-vc-id P)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon0_correct  (=> (= x@0 f) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (>= x@0 0) (>= f 7))) (=> (and (>= x@0 0) (>= f 7)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (not (= g c))) (=> (not (= g c)) (=> (= (ControlFlow 0 2) (- 0 1)) (>= f 20)))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 5) 2) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
