(set-logic QF_LIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-info :boogie-vc-id ManyErrors)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 21) (let ((L10_correct  (=> (= (ControlFlow 0 20) (- 0 19)) false)))
(let ((L9_correct  (=> (= (ControlFlow 0 18) (- 0 17)) false)))
(let ((L8_correct  (=> (= (ControlFlow 0 16) (- 0 15)) false)))
(let ((L7_correct  (=> (= (ControlFlow 0 14) (- 0 13)) false)))
(let ((L6_correct  (=> (= (ControlFlow 0 12) (- 0 11)) false)))
(let ((L5_correct  (=> (= (ControlFlow 0 10) (- 0 9)) false)))
(let ((L4_correct  (=> (= (ControlFlow 0 8) (- 0 7)) false)))
(let ((L3_correct  (=> (= (ControlFlow 0 6) (- 0 5)) false)))
(let ((L2_correct  (=> (= (ControlFlow 0 4) (- 0 3)) false)))
(let ((L1_correct  (=> (= (ControlFlow 0 2) (- 0 1)) false)))
(let ((L0_correct  (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 21) 2) L1_correct) (=> (= (ControlFlow 0 21) 4) L2_correct)) (=> (= (ControlFlow 0 21) 6) L3_correct)) (=> (= (ControlFlow 0 21) 8) L4_correct)) (=> (= (ControlFlow 0 21) 10) L5_correct)) (=> (= (ControlFlow 0 21) 12) L6_correct)) (=> (= (ControlFlow 0 21) 14) L7_correct)) (=> (= (ControlFlow 0 21) 16) L8_correct)) (=> (= (ControlFlow 0 21) 18) L9_correct)) (=> (= (ControlFlow 0 21) 20) L10_correct))))
L0_correct))))))))))))
))
(check-sat)
(assert (not (= (ControlFlow 0 20) (- 19))))
(check-sat)
(assert (not (= (ControlFlow 0 18) (- 17))))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(assert (not (= (ControlFlow 0 12) (- 11))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
