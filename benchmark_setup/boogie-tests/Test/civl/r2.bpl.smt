(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Civl_pc@0 () Bool)
(declare-fun x@7 () Int)
(declare-fun Civl_global_old_x@1 () Int)
(declare-fun Civl_pc@1 () Bool)
(declare-fun Civl_ok@1 () Bool)
(declare-fun Civl_ok@0 () Bool)
(declare-fun x@1 () Int)
(declare-fun x@6 () Int)
(declare-fun x@2 () Int)
(declare-fun x@5 () Int)
(declare-fun Civl_global_old_x@0 () Int)
(declare-fun x@3 () Int)
(declare-fun x@4 () Int)
(declare-fun x@0 () Int)
(set-info :boogie-vc-id Civl_foo1_1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 23) (let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 13) (- 0 15)) (or Civl_pc@0 (or (= x@7 Civl_global_old_x@1) (= x@7 (+ Civl_global_old_x@1 1))))) (=> (or Civl_pc@0 (or (= x@7 Civl_global_old_x@1) (= x@7 (+ Civl_global_old_x@1 1)))) (and (=> (= (ControlFlow 0 13) (- 0 14)) (=> Civl_pc@0 (= x@7 Civl_global_old_x@1))) (=> (=> Civl_pc@0 (= x@7 Civl_global_old_x@1)) (=> (and (and (= Civl_pc@1  (=> (= x@7 Civl_global_old_x@1) Civl_pc@0)) (= Civl_ok@1  (or (= x@7 (+ Civl_global_old_x@1 1)) Civl_ok@0))) (= (ControlFlow 0 13) (- 0 12))) Civl_ok@1)))))))
(let ((anon0_0_@2_Civl_ReturnChecker_correct  (=> (= x@7 x@1) (=> (and (and (= Civl_global_old_x@1 x@1) (= Civl_pc@0 true)) (and (= Civl_ok@0 true) (= (ControlFlow 0 19) 13))) Civl_ReturnChecker_correct))))
(let ((inline$atomic_incr$0$Return_correct  (=> (= x@7 x@6) (=> (and (and (= Civl_global_old_x@1 x@2) (= Civl_pc@0 false)) (and (= Civl_ok@0 false) (= (ControlFlow 0 16) 13))) Civl_ReturnChecker_correct))))
(let ((inline$atomic_incr$0$anon0_correct  (=> (and (= x@6 (+ x@2 1)) (= (ControlFlow 0 17) 16)) inline$atomic_incr$0$Return_correct)))
(let ((Civl_call_refinement_0_correct  (=> (and (or false true) (= (ControlFlow 0 18) 17)) inline$atomic_incr$0$anon0_correct)))
(let ((Civl_UnchangedChecker_correct  (and (=> (= (ControlFlow 0 6) (- 0 7)) (= x@5 Civl_global_old_x@0)) (=> (= x@5 Civl_global_old_x@0) (=> (= (ControlFlow 0 6) (- 0 5)) (=> false true))))))
(let ((inline$atomic_nop$0$Return_correct  (=> (= x@5 x@3) (=> (and (= Civl_global_old_x@0 x@3) (= (ControlFlow 0 10) 6)) Civl_UnchangedChecker_correct))))
(let ((Civl_call_refinement_1_correct  (=> (and (or false true) (= (ControlFlow 0 11) 10)) inline$atomic_nop$0$Return_correct)))
(let ((inline$atomic_nop$1$Return_correct  (=> (= x@5 x@4) (=> (and (= Civl_global_old_x@0 x@4) (= (ControlFlow 0 8) 6)) Civl_UnchangedChecker_correct))))
(let ((Civl_call_refinement_2_correct  (=> (and (or false true) (= (ControlFlow 0 9) 8)) inline$atomic_nop$1$Return_correct)))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((anon0_0_correct  (and (=> (= (ControlFlow 0 20) (- 0 21)) (not false)) (=> (not false) (=> (or true true) (and (=> (= (ControlFlow 0 20) 19) anon0_0_@2_Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 20) 4) Civl_NoninterferenceChecker$1_correct)))))))
(let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (or false (or (= x@0 x@0) (= x@0 (+ x@0 1))))) (=> (or false (or (= x@0 x@0) (= x@0 (+ x@0 1)))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> false (= x@0 x@0)))))))
(let ((anon0_correct  (and (and (and (and (and (=> (= (ControlFlow 0 22) 20) anon0_0_correct) (=> (= (ControlFlow 0 22) 18) Civl_call_refinement_0_correct)) (=> (= (ControlFlow 0 22) 11) Civl_call_refinement_1_correct)) (=> (= (ControlFlow 0 22) 9) Civl_call_refinement_2_correct)) (=> (= (ControlFlow 0 22) 2) Civl_RefinementChecker_correct)) (=> (= (ControlFlow 0 22) 4) Civl_NoninterferenceChecker$1_correct))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 23) 22) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Civl_pc@0 () Bool)
(declare-fun x@7 () Int)
(declare-fun Civl_global_old_x@1 () Int)
(declare-fun Civl_pc@1 () Bool)
(declare-fun Civl_ok@1 () Bool)
(declare-fun Civl_ok@0 () Bool)
(declare-fun x@1 () Int)
(declare-fun x@3 () Int)
(declare-fun x@6 () Int)
(declare-fun Civl_global_old_x@0 () Int)
(declare-fun x@5 () Int)
(declare-fun x@2 () Int)
(declare-fun x@4 () Int)
(declare-fun x@0 () Int)
(set-info :boogie-vc-id Civl_foo2_1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 23) (let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 11) (- 0 13)) (or Civl_pc@0 (or (= x@7 Civl_global_old_x@1) (= x@7 (+ Civl_global_old_x@1 1))))) (=> (or Civl_pc@0 (or (= x@7 Civl_global_old_x@1) (= x@7 (+ Civl_global_old_x@1 1)))) (and (=> (= (ControlFlow 0 11) (- 0 12)) (=> Civl_pc@0 (= x@7 Civl_global_old_x@1))) (=> (=> Civl_pc@0 (= x@7 Civl_global_old_x@1)) (=> (and (and (= Civl_pc@1  (=> (= x@7 Civl_global_old_x@1) Civl_pc@0)) (= Civl_ok@1  (or (= x@7 (+ Civl_global_old_x@1 1)) Civl_ok@0))) (= (ControlFlow 0 11) (- 0 10))) Civl_ok@1)))))))
(let ((anon0_0_@2_Civl_ReturnChecker_correct  (=> (= x@7 x@1) (=> (and (and (= Civl_global_old_x@1 x@1) (= Civl_pc@0 true)) (and (= Civl_ok@0 true) (= (ControlFlow 0 19) 11))) Civl_ReturnChecker_correct))))
(let ((inline$atomic_nop$0$Return_correct  (=> (= x@7 x@3) (=> (and (and (= Civl_global_old_x@1 x@3) (= Civl_pc@0 false)) (and (= Civl_ok@0 false) (= (ControlFlow 0 14) 11))) Civl_ReturnChecker_correct))))
(let ((Civl_call_refinement_4_correct  (=> (and (or false true) (= (ControlFlow 0 15) 14)) inline$atomic_nop$0$Return_correct)))
(let ((Civl_UnchangedChecker_correct  (and (=> (= (ControlFlow 0 6) (- 0 7)) (= x@6 Civl_global_old_x@0)) (=> (= x@6 Civl_global_old_x@0) (=> (= (ControlFlow 0 6) (- 0 5)) (=> false true))))))
(let ((inline$atomic_incr$0$Return_correct  (=> (= x@6 x@5) (=> (and (= Civl_global_old_x@0 x@2) (= (ControlFlow 0 16) 6)) Civl_UnchangedChecker_correct))))
(let ((inline$atomic_incr$0$anon0_correct  (=> (and (= x@5 (+ x@2 1)) (= (ControlFlow 0 17) 16)) inline$atomic_incr$0$Return_correct)))
(let ((Civl_call_refinement_3_correct  (=> (and (or false true) (= (ControlFlow 0 18) 17)) inline$atomic_incr$0$anon0_correct)))
(let ((inline$atomic_nop$1$Return_correct  (=> (= x@6 x@4) (=> (and (= Civl_global_old_x@0 x@4) (= (ControlFlow 0 8) 6)) Civl_UnchangedChecker_correct))))
(let ((Civl_call_refinement_5_correct  (=> (and (or false true) (= (ControlFlow 0 9) 8)) inline$atomic_nop$1$Return_correct)))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((anon0_0_correct  (and (=> (= (ControlFlow 0 20) (- 0 21)) (not false)) (=> (not false) (=> (or true true) (and (=> (= (ControlFlow 0 20) 19) anon0_0_@2_Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 20) 4) Civl_NoninterferenceChecker$1_correct)))))))
(let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (or false (or (= x@0 x@0) (= x@0 (+ x@0 1))))) (=> (or false (or (= x@0 x@0) (= x@0 (+ x@0 1)))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> false (= x@0 x@0)))))))
(let ((anon0_correct  (and (and (and (and (and (=> (= (ControlFlow 0 22) 20) anon0_0_correct) (=> (= (ControlFlow 0 22) 18) Civl_call_refinement_3_correct)) (=> (= (ControlFlow 0 22) 15) Civl_call_refinement_4_correct)) (=> (= (ControlFlow 0 22) 9) Civl_call_refinement_5_correct)) (=> (= (ControlFlow 0 22) 2) Civl_RefinementChecker_correct)) (=> (= (ControlFlow 0 22) 4) Civl_NoninterferenceChecker$1_correct))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 23) 22) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 6) (- 7))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 11) (- 10))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
