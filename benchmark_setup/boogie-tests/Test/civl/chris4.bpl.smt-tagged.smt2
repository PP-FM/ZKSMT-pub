(set-logic ALIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Civl_pc@1 () Bool)
(declare-fun Civl_pc@3 () Bool)
(declare-fun Civl_ok@2 () Bool)
(declare-fun Civl_ok@1 () Bool)
(declare-fun Civl_pc@2 () Bool)
(declare-fun Civl_pc@0 () Bool)
(declare-fun Civl_ok@0 () Bool)
(set-info :boogie-vc-id Civl_Test_94)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 8) (- 0 10)) true) (and (=> (= (ControlFlow 0 8) (- 0 9)) (=> Civl_pc@1 true)) (=> (=> Civl_pc@1 true) (=> (and (and (= Civl_pc@3  (=> true Civl_pc@1)) (= Civl_ok@2  (or true Civl_ok@1))) (= (ControlFlow 0 8) (- 0 7))) Civl_ok@2))))))
(let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 3) (- 0 4)) true) (=> (= (ControlFlow 0 3) (- 0 2)) (=> Civl_pc@2 true)))))
(let ((anon0_0_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@2 Civl_pc@0) (= (ControlFlow 0 6) 3)) Civl_RefinementChecker_correct)))
(let ((anon0_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@2 false) (= (ControlFlow 0 5) 3)) Civl_RefinementChecker_correct)))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((L_0_correct  (=> (and (and (= Civl_pc@1  (=> true Civl_pc@0)) (= Civl_ok@1  (or true Civl_ok@0))) (or Civl_pc@1 true)) (and (=> (= (ControlFlow 0 11) 8) Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 11) 1) Civl_NoninterferenceChecker$1_correct)))))
(let ((anon0_0_correct  (=> (and (and (= Civl_pc@0  (=> true false)) (= Civl_ok@0  (or true false))) (or Civl_pc@0 true)) (and (and (=> (= (ControlFlow 0 12) 11) L_0_correct) (=> (= (ControlFlow 0 12) 6) anon0_0_@2_Civl_RefinementChecker_correct)) (=> (= (ControlFlow 0 12) 1) Civl_NoninterferenceChecker$1_correct)))))
(let ((anon0_correct  (and (and (=> (= (ControlFlow 0 13) 12) anon0_0_correct) (=> (= (ControlFlow 0 13) 5) anon0_@2_Civl_RefinementChecker_correct)) (=> (= (ControlFlow 0 13) 1) Civl_NoninterferenceChecker$1_correct))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 14) 13) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Civl_pc@1 () Bool)
(declare-fun Civl_pc@3 () Bool)
(declare-fun Civl_ok@2 () Bool)
(declare-fun Civl_ok@1 () Bool)
(declare-fun Civl_pc@2 () Bool)
(declare-fun Civl_pc@0 () Bool)
(declare-fun Civl_ok@0 () Bool)
(set-info :boogie-vc-id Civl_Test2_94)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 8) (- 0 10)) true) (and (=> (= (ControlFlow 0 8) (- 0 9)) (=> Civl_pc@1 true)) (=> (=> Civl_pc@1 true) (=> (and (and (= Civl_pc@3  (=> true Civl_pc@1)) (= Civl_ok@2  (or true Civl_ok@1))) (= (ControlFlow 0 8) (- 0 7))) Civl_ok@2))))))
(let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 3) (- 0 4)) true) (=> (= (ControlFlow 0 3) (- 0 2)) (=> Civl_pc@2 true)))))
(let ((anon0_0_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@2 Civl_pc@0) (= (ControlFlow 0 6) 3)) Civl_RefinementChecker_correct)))
(let ((anon0_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@2 false) (= (ControlFlow 0 5) 3)) Civl_RefinementChecker_correct)))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((L_0_correct  (=> (and (and (= Civl_pc@1  (=> true Civl_pc@0)) (= Civl_ok@1  (or true Civl_ok@0))) (or Civl_pc@1 true)) (and (=> (= (ControlFlow 0 11) 8) Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 11) 1) Civl_NoninterferenceChecker$1_correct)))))
(let ((anon0_0_correct  (=> (and (= Civl_pc@0  (=> true false)) (= Civl_ok@0  (or true false))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (= (+ 2 2) 3)) (=> (= (+ 2 2) 3) (=> (and (or Civl_pc@0 true) (= (+ 2 2) 3)) (and (and (=> (= (ControlFlow 0 12) 11) L_0_correct) (=> (= (ControlFlow 0 12) 6) anon0_0_@2_Civl_RefinementChecker_correct)) (=> (= (ControlFlow 0 12) 1) Civl_NoninterferenceChecker$1_correct))))))))
(let ((anon0_correct  (and (and (=> (= (ControlFlow 0 14) 12) anon0_0_correct) (=> (= (ControlFlow 0 14) 5) anon0_@2_Civl_RefinementChecker_correct)) (=> (= (ControlFlow 0 14) 1) Civl_NoninterferenceChecker$1_correct))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 15) 14) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 12) (- 13))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
