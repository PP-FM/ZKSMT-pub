(set-logic AUFLIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-sort T@X 0)
(declare-fun inline$AtomicAllocateLow$0$xl@0 () T@X)
(declare-fun nil () T@X)
(declare-fun inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 () T@X)
(declare-fun Civl_linear_tid_available@0 () (Array T@X Bool))
(declare-fun inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 () T@X)
(declare-fun l@0 () T@X)
(declare-fun inline$Civl_NoninterferenceChecker_yield_Yield$0$old_x@0 () Int)
(declare-fun x@0 () Int)
(declare-fun xl () T@X)
(declare-fun Civl_pc@0 () Bool)
(declare-fun Civl_ok@0 () Bool)
(declare-fun unallocated@0 () (Array T@X Bool))
(declare-fun unallocated@1 () (Array T@X Bool))
(set-info :boogie-vc-id Civl_Allocate_1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 10) (- 0 9)) (not (= inline$AtomicAllocateLow$0$xl@0 nil)))))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((inline$Civl_NoninterferenceChecker_yield_Yield$0$L0_correct  (=> (exists ((inline$Civl_NoninterferenceChecker_yield_Yield$0$Civl_partition_tid (Array T@X Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array T@X Bool)) false) inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 true) ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_Yield$0$Civl_partition_tid ((as const (Array T@X Int)) 0))) ((as const (Array T@X Bool)) true)) (= ((_ map =>) Civl_linear_tid_available@0 ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_Yield$0$Civl_partition_tid ((as const (Array T@X Int)) 1))) ((as const (Array T@X Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |3|
)) (=> (and (not (= inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 nil)) (=> (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0) (and (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 l@0) (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_x@0 x@0)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (not (= inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 nil))) (=> (not (= inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 nil)) (=> (= (ControlFlow 0 6) (- 0 5)) (=> (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0) (and (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 l@0) (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_x@0 x@0))))))))))
(let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 2) (- 0 4)) true) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> false (= inline$AtomicAllocateLow$0$xl@0 xl))) (=> (=> false (= inline$AtomicAllocateLow$0$xl@0 xl)) (=> (and (and (= Civl_pc@0  (=> true false)) (= Civl_ok@0  (or true (and (= inline$AtomicAllocateLow$0$xl@0 xl) false)))) (= (ControlFlow 0 2) (- 0 1))) Civl_ok@0))))))
(let ((inline$AtomicAllocateLow$0$anon0_correct  (=> (not (= inline$AtomicAllocateLow$0$xl@0 nil)) (=> (and (select unallocated@0 inline$AtomicAllocateLow$0$xl@0) (= unallocated@1 (store unallocated@0 inline$AtomicAllocateLow$0$xl@0 false))) (and (and (and (=> (= (ControlFlow 0 11) 2) Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 11) 6) inline$Civl_NoninterferenceChecker_yield_Yield$0$L0_correct)) (=> (= (ControlFlow 0 11) 8) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 11) 10) GeneratedUnifiedExit_correct))))))
(let ((anon0_correct  (=> (and (= Civl_linear_tid_available@0 ((_ map or) unallocated@0 ((as const (Array T@X Bool)) false))) (= (ControlFlow 0 12) 11)) inline$AtomicAllocateLow$0$anon0_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 13) 12) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-sort T@X 0)
(declare-fun inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 () T@X)
(declare-fun Civl_linear_tid_available@4 () (Array T@X Bool))
(declare-fun nil () T@X)
(declare-fun inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 () T@X)
(declare-fun Civl_global_old_l@1 () T@X)
(declare-fun inline$Civl_NoninterferenceChecker_yield_Yield$0$old_x@0 () Int)
(declare-fun Civl_global_old_x@1 () Int)
(declare-fun l@3 () T@X)
(declare-fun x@3 () Int)
(declare-fun l@2 () T@X)
(declare-fun x@2 () Int)
(declare-fun Civl_linear_tid_available@3 () (Array T@X Bool))
(declare-fun l@1 () T@X)
(declare-fun x@1 () Int)
(declare-fun Civl_linear_tid_available@2 () (Array T@X Bool))
(declare-fun l@0 () T@X)
(declare-fun x@0 () Int)
(declare-fun Civl_linear_tid_available@0 () (Array T@X Bool))
(declare-fun Civl_pc@0 () Bool)
(declare-fun Civl_ok@0 () Bool)
(declare-fun call3formal@Civl_0_xl@0 () T@X)
(declare-fun unallocated@2 () (Array T@X Bool))
(declare-fun unallocated@1 () (Array T@X Bool))
(declare-fun unallocated@0 () (Array T@X Bool))
(set-info :boogie-vc-id Civl_main_1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 24) (let ((anon2_LoopBody_0_@2_anon2_LoopHead_correct true))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((inline$Civl_NoninterferenceChecker_yield_Yield$0$L0_correct  (=> (exists ((inline$Civl_NoninterferenceChecker_yield_Yield$0$Civl_partition_tid (Array T@X Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array T@X Bool)) false) inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 true) ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_Yield$0$Civl_partition_tid ((as const (Array T@X Int)) 0))) ((as const (Array T@X Bool)) true)) (= ((_ map =>) Civl_linear_tid_available@4 ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_Yield$0$Civl_partition_tid ((as const (Array T@X Int)) 1))) ((as const (Array T@X Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |3|
)) (=> (and (not (= inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 nil)) (=> (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0) (and (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 Civl_global_old_l@1) (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_x@0 Civl_global_old_x@1)))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (not (= inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 nil))) (=> (not (= inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 nil)) (=> (= (ControlFlow 0 12) (- 0 11)) (=> (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0) (and (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 l@3) (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_x@0 x@3))))))))))
(let ((anon2_LoopBody_0_@2_Civl_NoninterferenceChecker_correct  (=> (= l@3 l@2) (=> (and (and (= x@3 x@2) (= Civl_global_old_l@1 l@2)) (and (= Civl_global_old_x@1 x@2) (= Civl_linear_tid_available@4 Civl_linear_tid_available@3))) (and (=> (= (ControlFlow 0 19) 12) inline$Civl_NoninterferenceChecker_yield_Yield$0$L0_correct) (=> (= (ControlFlow 0 19) 14) Civl_NoninterferenceChecker$1_correct))))))
(let ((anon2_LoopDone_@2_Civl_NoninterferenceChecker_correct  (=> (= l@3 l@1) (=> (and (and (= x@3 x@1) (= Civl_global_old_l@1 l@1)) (and (= Civl_global_old_x@1 x@1) (= Civl_linear_tid_available@4 Civl_linear_tid_available@2))) (and (=> (= (ControlFlow 0 17) 12) inline$Civl_NoninterferenceChecker_yield_Yield$0$L0_correct) (=> (= (ControlFlow 0 17) 14) Civl_NoninterferenceChecker$1_correct))))))
(let ((anon2_LoopBody_@2_Civl_NoninterferenceChecker_correct  (=> (= l@3 l@1) (=> (and (and (= x@3 x@1) (= Civl_global_old_l@1 l@1)) (and (= Civl_global_old_x@1 x@1) (= Civl_linear_tid_available@4 Civl_linear_tid_available@2))) (and (=> (= (ControlFlow 0 16) 12) inline$Civl_NoninterferenceChecker_yield_Yield$0$L0_correct) (=> (= (ControlFlow 0 16) 14) Civl_NoninterferenceChecker$1_correct))))))
(let ((anon0_@2_Civl_NoninterferenceChecker_correct  (=> (= l@3 l@0) (=> (and (and (= x@3 x@0) (= Civl_global_old_l@1 l@0)) (and (= Civl_global_old_x@1 x@0) (= Civl_linear_tid_available@4 Civl_linear_tid_available@0))) (and (=> (= (ControlFlow 0 15) 12) inline$Civl_NoninterferenceChecker_yield_Yield$0$L0_correct) (=> (= (ControlFlow 0 15) 14) Civl_NoninterferenceChecker$1_correct))))))
(let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 8) (- 0 10)) true) (and (=> (= (ControlFlow 0 8) (- 0 9)) (=> false true)) (=> (=> false true) (=> (and (and (= Civl_pc@0  (=> true false)) (= Civl_ok@0  (or true false))) (= (ControlFlow 0 8) (- 0 7))) Civl_ok@0))))))
(let ((Civl_UnchangedChecker_correct  (and (=> (= (ControlFlow 0 5) (- 0 6)) true) (=> (= (ControlFlow 0 5) (- 0 4)) (=> false true)))))
(let ((anon2_LoopBody_0_correct  (=> (and (and (not (= call3formal@Civl_0_xl@0 nil)) (or false true)) (and (= Civl_linear_tid_available@3 ((_ map or) unallocated@2 ((_ map or) (store ((as const (Array T@X Bool)) false) call3formal@Civl_0_xl@0 true) ((as const (Array T@X Bool)) false)))) (exists ((Civl_partition_tid (Array T@X Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array T@X Bool)) false) call3formal@Civl_0_xl@0 true) ((_ map (= (Int Int) Bool)) Civl_partition_tid ((as const (Array T@X Int)) 0))) ((as const (Array T@X Bool)) true)) (= ((_ map =>) unallocated@2 ((_ map (= (Int Int) Bool)) Civl_partition_tid ((as const (Array T@X Int)) 1))) ((as const (Array T@X Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |7|
)))) (and (=> (= (ControlFlow 0 20) (- 0 21)) (not (= call3formal@Civl_0_xl@0 nil))) (=> (not (= call3formal@Civl_0_xl@0 nil)) (and (and (=> (= (ControlFlow 0 20) 18) anon2_LoopBody_0_@2_anon2_LoopHead_correct) (=> (= (ControlFlow 0 20) 19) anon2_LoopBody_0_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 20) 5) Civl_UnchangedChecker_correct)))))))
(let ((anon2_LoopHead_correct  (=> (and (or false true) (= Civl_linear_tid_available@2 ((_ map or) unallocated@1 ((as const (Array T@X Bool)) false)))) (and (and (and (and (=> (= (ControlFlow 0 22) 20) anon2_LoopBody_0_correct) (=> (= (ControlFlow 0 22) 16) anon2_LoopBody_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 22) 5) Civl_UnchangedChecker_correct)) (=> (= (ControlFlow 0 22) 8) Civl_ReturnChecker_correct)) (=> (= (ControlFlow 0 22) 17) anon2_LoopDone_@2_Civl_NoninterferenceChecker_correct)))))
(let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) (=> false true)))))
(let ((anon0_correct  (=> (= Civl_linear_tid_available@0 ((_ map or) unallocated@0 ((as const (Array T@X Bool)) false))) (and (and (=> (= (ControlFlow 0 23) 15) anon0_@2_Civl_NoninterferenceChecker_correct) (=> (= (ControlFlow 0 23) 2) Civl_RefinementChecker_correct)) (=> (= (ControlFlow 0 23) 22) anon2_LoopHead_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 24) 23) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Civl_pc@2 () Bool)
(declare-fun Civl_pc@4 () Bool)
(declare-fun Civl_ok@3 () Bool)
(declare-fun Civl_ok@2 () Bool)
(declare-sort T@X 0)
(declare-fun inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 () T@X)
(declare-fun Civl_linear_tid_available@4 () (Array T@X Bool))
(declare-fun nil () T@X)
(declare-fun inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 () T@X)
(declare-fun Civl_global_old_l@0 () T@X)
(declare-fun inline$Civl_NoninterferenceChecker_yield_Yield$0$old_x@0 () Int)
(declare-fun Civl_global_old_x@0 () Int)
(declare-fun l@4 () T@X)
(declare-fun x@4 () Int)
(declare-fun x@3 () Int)
(declare-fun l@3 () T@X)
(declare-fun Civl_linear_tid_available@3 () (Array T@X Bool))
(declare-fun Civl_pc@1 () Bool)
(declare-fun Civl_ok@1 () Bool)
(declare-fun tid () T@X)
(declare-fun l@2 () T@X)
(declare-fun x@2 () Int)
(declare-fun unallocated@3 () (Array T@X Bool))
(declare-fun Civl_linear_tid_available@2 () (Array T@X Bool))
(declare-fun l@1 () T@X)
(declare-fun val () Int)
(declare-fun x@1 () Int)
(declare-fun Civl_linear_tid_available@1 () (Array T@X Bool))
(declare-fun x@0 () Int)
(declare-fun l@0 () T@X)
(declare-fun Civl_linear_tid_available@0 () (Array T@X Bool))
(declare-fun Civl_pc@3 () Bool)
(declare-fun Civl_pc@0 () Bool)
(declare-fun Civl_ok@0 () Bool)
(declare-fun unallocated@2 () (Array T@X Bool))
(declare-fun unallocated@1 () (Array T@X Bool))
(declare-fun unallocated@0 () (Array T@X Bool))
(set-info :boogie-vc-id Civl_foo_1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 31) (let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 15) (- 0 17)) true) (and (=> (= (ControlFlow 0 15) (- 0 16)) (=> Civl_pc@2 true)) (=> (=> Civl_pc@2 true) (=> (and (and (= Civl_pc@4  (=> true Civl_pc@2)) (= Civl_ok@3  (or true Civl_ok@2))) (= (ControlFlow 0 15) (- 0 14))) Civl_ok@3))))))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((inline$Civl_NoninterferenceChecker_yield_Yield$0$L0_correct  (=> (exists ((inline$Civl_NoninterferenceChecker_yield_Yield$0$Civl_partition_tid (Array T@X Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array T@X Bool)) false) inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 true) ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_Yield$0$Civl_partition_tid ((as const (Array T@X Int)) 0))) ((as const (Array T@X Bool)) true)) (= ((_ map =>) Civl_linear_tid_available@4 ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_Yield$0$Civl_partition_tid ((as const (Array T@X Int)) 1))) ((as const (Array T@X Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |3|
)) (=> (and (not (= inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 nil)) (=> (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0) (and (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 Civl_global_old_l@0) (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_x@0 Civl_global_old_x@0)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (not (= inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 nil))) (=> (not (= inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0 nil)) (=> (= (ControlFlow 0 6) (- 0 5)) (=> (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 inline$Civl_NoninterferenceChecker_yield_Yield$0$tid@0) (and (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_l@0 l@4) (= inline$Civl_NoninterferenceChecker_yield_Yield$0$old_x@0 x@4))))))))))
(let ((anon0_0$1_@2_Civl_NoninterferenceChecker_correct  (=> (= l@4 nil) (=> (and (and (= x@4 x@3) (= Civl_global_old_l@0 l@3)) (and (= Civl_global_old_x@0 x@3) (= Civl_linear_tid_available@4 Civl_linear_tid_available@3))) (and (=> (= (ControlFlow 0 18) 6) inline$Civl_NoninterferenceChecker_yield_Yield$0$L0_correct) (=> (= (ControlFlow 0 18) 8) Civl_NoninterferenceChecker$1_correct))))))
(let ((anon0_0_correct  (=> (and (= Civl_pc@2  (=> true Civl_pc@1)) (= Civl_ok@2  (or true Civl_ok@1))) (and (=> (= (ControlFlow 0 19) (- 0 21)) (not (= tid nil))) (=> (not (= tid nil)) (and (=> (= (ControlFlow 0 19) (- 0 20)) (=> (= l@2 tid) (and (= l@2 l@2) (= x@2 x@2)))) (=> (=> (= l@2 tid) (and (= l@2 l@2) (= x@2 x@2))) (=> (not (= tid nil)) (=> (and (and (=> (= l@2 tid) (and (= l@2 l@3) (= x@2 x@3))) (or Civl_pc@2 true)) (and (= Civl_linear_tid_available@3 ((_ map or) unallocated@3 ((_ map or) (store ((as const (Array T@X Bool)) false) tid true) ((as const (Array T@X Bool)) false)))) (exists ((Civl_partition_tid (Array T@X Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array T@X Bool)) false) tid true) ((_ map (= (Int Int) Bool)) Civl_partition_tid ((as const (Array T@X Int)) 0))) ((as const (Array T@X Bool)) true)) (= ((_ map =>) unallocated@3 ((_ map (= (Int Int) Bool)) Civl_partition_tid ((as const (Array T@X Int)) 1))) ((as const (Array T@X Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |10|
)))) (and (=> (= (ControlFlow 0 19) 15) Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 19) 18) anon0_0$1_@2_Civl_NoninterferenceChecker_correct)))))))))))
(let ((anon0_1_@2_Civl_NoninterferenceChecker_correct  (=> (= l@4 l@2) (=> (and (and (= x@4 x@2) (= Civl_global_old_l@0 l@2)) (and (= Civl_global_old_x@0 x@2) (= Civl_linear_tid_available@4 Civl_linear_tid_available@2))) (and (=> (= (ControlFlow 0 12) 6) inline$Civl_NoninterferenceChecker_yield_Yield$0$L0_correct) (=> (= (ControlFlow 0 12) 8) Civl_NoninterferenceChecker$1_correct))))))
(let ((anon0_2$1_@2_Civl_NoninterferenceChecker_correct  (=> (= l@4 l@1) (=> (and (and (= x@4 val) (= Civl_global_old_l@0 l@1)) (and (= Civl_global_old_x@0 x@1) (= Civl_linear_tid_available@4 Civl_linear_tid_available@1))) (and (=> (= (ControlFlow 0 10) 6) inline$Civl_NoninterferenceChecker_yield_Yield$0$L0_correct) (=> (= (ControlFlow 0 10) 8) Civl_NoninterferenceChecker$1_correct))))))
(let ((anon0$1_@2_Civl_NoninterferenceChecker_correct  (=> (= l@4 tid) (=> (and (and (= x@4 x@0) (= Civl_global_old_l@0 l@0)) (and (= Civl_global_old_x@0 x@0) (= Civl_linear_tid_available@4 Civl_linear_tid_available@0))) (and (=> (= (ControlFlow 0 9) 6) inline$Civl_NoninterferenceChecker_yield_Yield$0$L0_correct) (=> (= (ControlFlow 0 9) 8) Civl_NoninterferenceChecker$1_correct))))))
(let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) (=> Civl_pc@3 true)))))
(let ((anon0_1_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@3 Civl_pc@1) (= (ControlFlow 0 13) 2)) Civl_RefinementChecker_correct)))
(let ((anon0_1_correct  (=> (and (= Civl_pc@1  (=> true Civl_pc@0)) (= Civl_ok@1  (or true Civl_ok@0))) (and (=> (= (ControlFlow 0 22) (- 0 25)) (not (= tid nil))) (=> (not (= tid nil)) (and (=> (= (ControlFlow 0 22) (- 0 24)) (=> (= l@1 tid) (and (= l@1 l@1) (= val val)))) (=> (=> (= l@1 tid) (and (= l@1 l@1) (= val val))) (=> (not (= tid nil)) (=> (and (and (=> (= l@1 tid) (and (= l@1 l@2) (= val x@2))) (or Civl_pc@1 true)) (and (= Civl_linear_tid_available@2 ((_ map or) unallocated@2 ((_ map or) (store ((as const (Array T@X Bool)) false) tid true) ((as const (Array T@X Bool)) false)))) (exists ((Civl_partition_tid@@0 (Array T@X Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array T@X Bool)) false) tid true) ((_ map (= (Int Int) Bool)) Civl_partition_tid@@0 ((as const (Array T@X Int)) 0))) ((as const (Array T@X Bool)) true)) (= ((_ map =>) unallocated@2 ((_ map (= (Int Int) Bool)) Civl_partition_tid@@0 ((as const (Array T@X Int)) 1))) ((as const (Array T@X Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |9|
)))) (and (=> (= (ControlFlow 0 22) (- 0 23)) (= x@2 val)) (=> (= x@2 val) (and (and (=> (= (ControlFlow 0 22) 19) anon0_0_correct) (=> (= (ControlFlow 0 22) 12) anon0_1_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 22) 13) anon0_1_@2_Civl_RefinementChecker_correct)))))))))))))
(let ((anon0_2$1_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@3 Civl_pc@0) (= (ControlFlow 0 11) 2)) Civl_RefinementChecker_correct)))
(let ((anon0_2_correct  (=> (and (= Civl_pc@0  (=> true false)) (= Civl_ok@0  (or true false))) (and (=> (= (ControlFlow 0 26) (- 0 28)) (not (= tid nil))) (=> (not (= tid nil)) (and (=> (= (ControlFlow 0 26) (- 0 27)) (=> (= tid tid) (and (= tid tid) (= x@0 x@0)))) (=> (=> (= tid tid) (and (= tid tid) (= x@0 x@0))) (=> (not (= tid nil)) (=> (and (and (=> (= tid tid) (and (= tid l@1) (= x@0 x@1))) (or Civl_pc@0 true)) (and (= Civl_linear_tid_available@1 ((_ map or) unallocated@1 ((_ map or) (store ((as const (Array T@X Bool)) false) tid true) ((as const (Array T@X Bool)) false)))) (exists ((Civl_partition_tid@@1 (Array T@X Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array T@X Bool)) false) tid true) ((_ map (= (Int Int) Bool)) Civl_partition_tid@@1 ((as const (Array T@X Int)) 0))) ((as const (Array T@X Bool)) true)) (= ((_ map =>) unallocated@1 ((_ map (= (Int Int) Bool)) Civl_partition_tid@@1 ((as const (Array T@X Int)) 1))) ((as const (Array T@X Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |8|
)))) (and (and (=> (= (ControlFlow 0 26) 22) anon0_1_correct) (=> (= (ControlFlow 0 26) 10) anon0_2$1_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 26) 11) anon0_2$1_@2_Civl_RefinementChecker_correct)))))))))))
(let ((anon0$1_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@3 false) (= (ControlFlow 0 4) 2)) Civl_RefinementChecker_correct)))
(let ((inline$AtomicLock$0$anon0_correct  (=> (= l@0 nil) (and (and (=> (= (ControlFlow 0 29) 26) anon0_2_correct) (=> (= (ControlFlow 0 29) 9) anon0$1_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 29) 4) anon0$1_@2_Civl_RefinementChecker_correct)))))
(let ((anon0_correct  (=> (and (and (exists ((Civl_partition_tid@@2 (Array T@X Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array T@X Bool)) false) tid true) ((_ map (= (Int Int) Bool)) Civl_partition_tid@@2 ((as const (Array T@X Int)) 0))) ((as const (Array T@X Bool)) true)) (= ((_ map =>) unallocated@0 ((_ map (= (Int Int) Bool)) Civl_partition_tid@@2 ((as const (Array T@X Int)) 1))) ((as const (Array T@X Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |6|
)) (not (= tid nil))) (and (= Civl_linear_tid_available@0 ((_ map or) unallocated@0 ((_ map or) (store ((as const (Array T@X Bool)) false) tid true) ((as const (Array T@X Bool)) false)))) (= (ControlFlow 0 30) 29))) inline$AtomicLock$0$anon0_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (and (not (= tid nil)) (= (ControlFlow 0 31) 30)) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-sort T@X 0)
(declare-fun inline$AtomicAllocateLow$0$xl@0 () T@X)
(declare-fun unallocated@0 () (Array T@X Bool))
(declare-fun unallocated () (Array T@X Bool))
(declare-fun nil () T@X)
(set-info :boogie-vc-id Civl_LinearityChecker_AtomicAllocateLow)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let ((inline$AtomicAllocateLow$0$Return_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (= ((_ map (<= (Int Int) Int)) ((_ map (+ (Int Int) Int)) ((_ map (ite (Bool Int Int) Int)) (store ((as const (Array T@X Bool)) false) inline$AtomicAllocateLow$0$xl@0 true) ((as const (Array T@X Int)) 1) ((as const (Array T@X Int)) 0)) ((_ map (ite (Bool Int Int) Int)) unallocated@0 ((as const (Array T@X Int)) 1) ((as const (Array T@X Int)) 0))) ((_ map (ite (Bool Int Int) Int)) unallocated ((as const (Array T@X Int)) 1) ((as const (Array T@X Int)) 0))) ((as const (Array T@X Bool)) true)))))
(let ((inline$AtomicAllocateLow$0$anon0_correct  (=> (and (and (not (= inline$AtomicAllocateLow$0$xl@0 nil)) (select unallocated inline$AtomicAllocateLow$0$xl@0)) (and (= unallocated@0 (store unallocated inline$AtomicAllocateLow$0$xl@0 false)) (= (ControlFlow 0 3) 2))) inline$AtomicAllocateLow$0$Return_correct)))
(let ((inline$AtomicAllocateLow$0$Entry_correct  (=> (= (ControlFlow 0 4) 3) inline$AtomicAllocateLow$0$anon0_correct)))
inline$AtomicAllocateLow$0$Entry_correct))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
