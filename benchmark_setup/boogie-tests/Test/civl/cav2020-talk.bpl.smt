(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x@@0 () Int)
(declare-fun x@5 () Int)
(declare-fun x@3 () Int)
(declare-fun Civl_pc@0 () Bool)
(declare-fun Civl_pc@1 () Bool)
(declare-fun Civl_ok@1 () Bool)
(declare-fun Civl_ok@0 () Bool)
(declare-fun inline$Civl_NoninterferenceChecker_yield_yield_x$0$i@0 () Int)
(declare-fun Civl_global_old_x@0 () Int)
(declare-fun x@4 () Int)
(declare-fun inline$Civl_NoninterferenceChecker_yield_yield_y$0$i@0 () Int)
(declare-fun Civl_global_old_y@0 () Int)
(declare-fun y@2 () Int)
(declare-fun y@1 () Int)
(declare-fun x@2 () Int)
(declare-fun x@1 () Int)
(declare-fun y@0 () Int)
(declare-fun x@0 () Int)
(set-info :boogie-vc-id Civl_double_inc_x_1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 23) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 16) (- 0 15)) (<= (+ x@@0 2) x@5))))
(let ((Civl_UnifiedReturn_correct  (=> (and (= x@5 x@3) (= (ControlFlow 0 17) 16)) GeneratedUnifiedExit_correct)))
(let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 11) (- 0 13)) true) (and (=> (= (ControlFlow 0 11) (- 0 12)) (=> Civl_pc@0 true)) (=> (=> Civl_pc@0 true) (=> (and (and (= Civl_pc@1  (=> true Civl_pc@0)) (= Civl_ok@1  (or true Civl_ok@0))) (= (ControlFlow 0 11) (- 0 10))) Civl_ok@1))))))
(let ((inline$Civl_NoninterferenceChecker_yield_yield_x$0$L0_correct  (=> (and (<= inline$Civl_NoninterferenceChecker_yield_yield_x$0$i@0 Civl_global_old_x@0) (= (ControlFlow 0 8) (- 0 7))) (<= inline$Civl_NoninterferenceChecker_yield_yield_x$0$i@0 x@4))))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((inline$Civl_NoninterferenceChecker_yield_yield_y$0$L0_correct  (=> (and (<= inline$Civl_NoninterferenceChecker_yield_yield_y$0$i@0 Civl_global_old_y@0) (= (ControlFlow 0 5) (- 0 4))) (<= inline$Civl_NoninterferenceChecker_yield_yield_y$0$i@0 y@2))))
(let ((anon0_0$1_@2_Civl_NoninterferenceChecker_correct  (=> (and (and (= x@4 x@3) (= y@2 y@1)) (and (= Civl_global_old_x@0 x@2) (= Civl_global_old_y@0 y@1))) (and (and (=> (= (ControlFlow 0 14) 5) inline$Civl_NoninterferenceChecker_yield_yield_y$0$L0_correct) (=> (= (ControlFlow 0 14) 6) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 14) 8) inline$Civl_NoninterferenceChecker_yield_yield_x$0$L0_correct)))))
(let ((inline$atomic_inc_x$1$anon0_correct  (=> (= x@3 (+ x@2 1)) (and (and (=> (= (ControlFlow 0 18) 11) Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 18) 17) Civl_UnifiedReturn_correct)) (=> (= (ControlFlow 0 18) 14) anon0_0$1_@2_Civl_NoninterferenceChecker_correct)))))
(let ((anon0_0_correct  (=> (and (= Civl_pc@0  (=> true false)) (= Civl_ok@0  (or true false))) (and (=> (= (ControlFlow 0 19) (- 0 20)) (<= x@1 x@1)) (=> (<= x@1 x@1) (=> (<= x@1 x@2) (=> (and (or Civl_pc@0 true) (= (ControlFlow 0 19) 18)) inline$atomic_inc_x$1$anon0_correct)))))))
(let ((anon0$1_@2_Civl_NoninterferenceChecker_correct  (=> (and (and (= x@4 x@1) (= y@2 y@0)) (and (= Civl_global_old_x@0 x@0) (= Civl_global_old_y@0 y@0))) (and (and (=> (= (ControlFlow 0 9) 5) inline$Civl_NoninterferenceChecker_yield_yield_y$0$L0_correct) (=> (= (ControlFlow 0 9) 6) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 9) 8) inline$Civl_NoninterferenceChecker_yield_yield_x$0$L0_correct)))))
(let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) (=> false true)))))
(let ((inline$atomic_inc_x$0$anon0_correct  (=> (= x@1 (+ x@0 1)) (and (and (=> (= (ControlFlow 0 21) 19) anon0_0_correct) (=> (= (ControlFlow 0 21) 9) anon0$1_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 21) 2) Civl_RefinementChecker_correct)))))
(let ((anon0_correct  (=> (and (<= x@@0 x@0) (= (ControlFlow 0 22) 21)) inline$atomic_inc_x$0$anon0_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (and (<= x@@0 x@@0) (= (ControlFlow 0 23) 22)) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun y () Int)
(declare-fun y@5 () Int)
(declare-fun y@3 () Int)
(declare-fun Civl_pc@0 () Bool)
(declare-fun Civl_pc@1 () Bool)
(declare-fun Civl_ok@1 () Bool)
(declare-fun Civl_ok@0 () Bool)
(declare-fun inline$Civl_NoninterferenceChecker_yield_yield_x$0$i@0 () Int)
(declare-fun Civl_global_old_x@0 () Int)
(declare-fun x@2 () Int)
(declare-fun inline$Civl_NoninterferenceChecker_yield_yield_y$0$i@0 () Int)
(declare-fun Civl_global_old_y@0 () Int)
(declare-fun y@4 () Int)
(declare-fun x@1 () Int)
(declare-fun y@2 () Int)
(declare-fun y@1 () Int)
(declare-fun x@0 () Int)
(declare-fun y@0 () Int)
(set-info :boogie-vc-id Civl_double_inc_y_1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 23) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 16) (- 0 15)) (<= (+ y 2) y@5))))
(let ((Civl_UnifiedReturn_correct  (=> (and (= y@5 y@3) (= (ControlFlow 0 17) 16)) GeneratedUnifiedExit_correct)))
(let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 11) (- 0 13)) true) (and (=> (= (ControlFlow 0 11) (- 0 12)) (=> Civl_pc@0 true)) (=> (=> Civl_pc@0 true) (=> (and (and (= Civl_pc@1  (=> true Civl_pc@0)) (= Civl_ok@1  (or true Civl_ok@0))) (= (ControlFlow 0 11) (- 0 10))) Civl_ok@1))))))
(let ((inline$Civl_NoninterferenceChecker_yield_yield_x$0$L0_correct  (=> (and (<= inline$Civl_NoninterferenceChecker_yield_yield_x$0$i@0 Civl_global_old_x@0) (= (ControlFlow 0 8) (- 0 7))) (<= inline$Civl_NoninterferenceChecker_yield_yield_x$0$i@0 x@2))))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((inline$Civl_NoninterferenceChecker_yield_yield_y$0$L0_correct  (=> (and (<= inline$Civl_NoninterferenceChecker_yield_yield_y$0$i@0 Civl_global_old_y@0) (= (ControlFlow 0 5) (- 0 4))) (<= inline$Civl_NoninterferenceChecker_yield_yield_y$0$i@0 y@4))))
(let ((anon0_0$1_@2_Civl_NoninterferenceChecker_correct  (=> (and (and (= x@2 x@1) (= y@4 y@3)) (and (= Civl_global_old_x@0 x@1) (= Civl_global_old_y@0 y@2))) (and (and (=> (= (ControlFlow 0 14) 5) inline$Civl_NoninterferenceChecker_yield_yield_y$0$L0_correct) (=> (= (ControlFlow 0 14) 6) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 14) 8) inline$Civl_NoninterferenceChecker_yield_yield_x$0$L0_correct)))))
(let ((inline$atomic_inc_y$1$anon0_correct  (=> (= y@3 (+ y@2 1)) (and (and (=> (= (ControlFlow 0 18) 11) Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 18) 17) Civl_UnifiedReturn_correct)) (=> (= (ControlFlow 0 18) 14) anon0_0$1_@2_Civl_NoninterferenceChecker_correct)))))
(let ((anon0_0_correct  (=> (and (= Civl_pc@0  (=> true false)) (= Civl_ok@0  (or true false))) (and (=> (= (ControlFlow 0 19) (- 0 20)) (<= y@1 y@1)) (=> (<= y@1 y@1) (=> (<= y@1 y@2) (=> (and (or Civl_pc@0 true) (= (ControlFlow 0 19) 18)) inline$atomic_inc_y$1$anon0_correct)))))))
(let ((anon0$1_@2_Civl_NoninterferenceChecker_correct  (=> (and (and (= x@2 x@0) (= y@4 y@1)) (and (= Civl_global_old_x@0 x@0) (= Civl_global_old_y@0 y@0))) (and (and (=> (= (ControlFlow 0 9) 5) inline$Civl_NoninterferenceChecker_yield_yield_y$0$L0_correct) (=> (= (ControlFlow 0 9) 6) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 9) 8) inline$Civl_NoninterferenceChecker_yield_yield_x$0$L0_correct)))))
(let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) (=> false true)))))
(let ((inline$atomic_inc_y$0$anon0_correct  (=> (= y@1 (+ y@0 1)) (and (and (=> (= (ControlFlow 0 21) 19) anon0_0_correct) (=> (= (ControlFlow 0 21) 9) anon0$1_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 21) 2) Civl_RefinementChecker_correct)))))
(let ((anon0_correct  (=> (and (<= y y@0) (= (ControlFlow 0 22) 21)) inline$atomic_inc_y$0$anon0_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (and (<= y y) (= (ControlFlow 0 23) 22)) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Civl_pc@1 () Bool)
(declare-fun Civl_pc@3 () Bool)
(declare-fun Civl_ok@2 () Bool)
(declare-fun Civl_ok@1 () Bool)
(declare-fun inline$Civl_NoninterferenceChecker_yield_yield_x$0$i@0 () Int)
(declare-fun Civl_global_old_x@0 () Int)
(declare-fun x@3 () Int)
(declare-fun inline$Civl_NoninterferenceChecker_yield_yield_y$0$i@0 () Int)
(declare-fun Civl_global_old_y@0 () Int)
(declare-fun y@3 () Int)
(declare-fun x@2 () Int)
(declare-fun y@2 () Int)
(declare-fun Civl_pc@0 () Bool)
(declare-fun Civl_ok@0 () Bool)
(declare-fun y@1 () Int)
(declare-fun x@1 () Int)
(declare-fun x@0 () Int)
(declare-fun y@0 () Int)
(declare-fun Civl_pc@2 () Bool)
(declare-fun x@@0 () Int)
(declare-fun y () Int)
(set-info :boogie-vc-id Civl_double_inc_x_y_1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 26) (let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 14) (- 0 16)) true) (and (=> (= (ControlFlow 0 14) (- 0 15)) (=> Civl_pc@1 true)) (=> (=> Civl_pc@1 true) (=> (and (and (= Civl_pc@3  (=> true Civl_pc@1)) (= Civl_ok@2  (or true Civl_ok@1))) (= (ControlFlow 0 14) (- 0 13))) Civl_ok@2))))))
(let ((inline$Civl_NoninterferenceChecker_yield_yield_x$0$L0_correct  (=> (and (<= inline$Civl_NoninterferenceChecker_yield_yield_x$0$i@0 Civl_global_old_x@0) (= (ControlFlow 0 9) (- 0 8))) (<= inline$Civl_NoninterferenceChecker_yield_yield_x$0$i@0 x@3))))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((inline$Civl_NoninterferenceChecker_yield_yield_y$0$L0_correct  (=> (and (<= inline$Civl_NoninterferenceChecker_yield_yield_y$0$i@0 Civl_global_old_y@0) (= (ControlFlow 0 6) (- 0 5))) (<= inline$Civl_NoninterferenceChecker_yield_yield_y$0$i@0 y@3))))
(let ((anon0_0_@2_Civl_NoninterferenceChecker_correct  (=> (and (and (= x@3 x@2) (= y@3 y@2)) (and (= Civl_global_old_x@0 x@2) (= Civl_global_old_y@0 y@2))) (and (and (=> (= (ControlFlow 0 17) 6) inline$Civl_NoninterferenceChecker_yield_yield_y$0$L0_correct) (=> (= (ControlFlow 0 17) 7) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 17) 9) inline$Civl_NoninterferenceChecker_yield_yield_x$0$L0_correct)))))
(let ((anon0_0_correct  (=> (and (= Civl_pc@1  (=> true Civl_pc@0)) (= Civl_ok@1  (or true Civl_ok@0))) (and (=> (= (ControlFlow 0 18) (- 0 21)) (<= y@1 y@1)) (=> (<= y@1 y@1) (and (=> (= (ControlFlow 0 18) (- 0 20)) (<= x@1 x@1)) (=> (<= x@1 x@1) (=> (<= (+ y@1 2) y@2) (=> (and (<= x@1 x@2) (or Civl_pc@1 true)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (and (>= x@2 2) (>= y@2 2))) (=> (and (>= x@2 2) (>= y@2 2)) (and (=> (= (ControlFlow 0 18) 14) Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 18) 17) anon0_0_@2_Civl_NoninterferenceChecker_correct)))))))))))))
(let ((anon0_1_@2_Civl_NoninterferenceChecker_correct  (=> (and (and (= x@3 x@1) (= y@3 y@1)) (and (= Civl_global_old_x@0 x@1) (= Civl_global_old_y@0 y@1))) (and (and (=> (= (ControlFlow 0 11) 6) inline$Civl_NoninterferenceChecker_yield_yield_y$0$L0_correct) (=> (= (ControlFlow 0 11) 7) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 11) 9) inline$Civl_NoninterferenceChecker_yield_yield_x$0$L0_correct)))))
(let ((anon0_@2_Civl_NoninterferenceChecker_correct  (=> (and (and (= x@3 x@0) (= y@3 y@0)) (and (= Civl_global_old_x@0 x@0) (= Civl_global_old_y@0 y@0))) (and (and (=> (= (ControlFlow 0 10) 6) inline$Civl_NoninterferenceChecker_yield_yield_y$0$L0_correct) (=> (= (ControlFlow 0 10) 7) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 10) 9) inline$Civl_NoninterferenceChecker_yield_yield_x$0$L0_correct)))))
(let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) (=> Civl_pc@2 true)))))
(let ((anon0_1_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@2 Civl_pc@0) (= (ControlFlow 0 12) 2)) Civl_RefinementChecker_correct)))
(let ((anon0_1_correct  (=> (and (= Civl_pc@0  (=> true false)) (= Civl_ok@0  (or true false))) (and (=> (= (ControlFlow 0 22) (- 0 24)) (<= x@0 x@0)) (=> (<= x@0 x@0) (and (=> (= (ControlFlow 0 22) (- 0 23)) (<= y@0 y@0)) (=> (<= y@0 y@0) (=> (<= (+ x@0 2) x@1) (=> (and (<= y@0 y@1) (or Civl_pc@0 true)) (and (and (=> (= (ControlFlow 0 22) 18) anon0_0_correct) (=> (= (ControlFlow 0 22) 11) anon0_1_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 22) 12) anon0_1_@2_Civl_RefinementChecker_correct)))))))))))
(let ((anon0_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@2 false) (= (ControlFlow 0 4) 2)) Civl_RefinementChecker_correct)))
(let ((anon0_correct  (=> (and (<= 0 x@0) (<= 0 y@0)) (and (and (=> (= (ControlFlow 0 25) 22) anon0_1_correct) (=> (= (ControlFlow 0 25) 10) anon0_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 25) 4) anon0_@2_Civl_RefinementChecker_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (<= 0 x@@0) (=> (and (<= 0 y) (= (ControlFlow 0 26) 25)) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
