(set-logic ALIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-datatypes ((T@Perm 0)) (((Left (|i#Left| Int) ) (Right (|i#Right| Int) ) ) ))
(declare-fun size ((Array Int Bool)) Int)
(declare-fun Mutators () (Array Int Bool))
(declare-fun N () Int)
(declare-fun |lambda#0| ((Array Int Bool)) (Array T@Perm Bool))
(declare-fun Identity () (Array Int Int))
(declare-fun |lambda#1| () (Array Int Bool))
(assert (= (size Mutators) N))
(assert (forall ((|l#0| (Array Int Bool)) (p T@Perm) ) (! (= (select (|lambda#0| |l#0|) p)  (and (is-Left p) (select |l#0| (|i#Left| p))))
 :qid |cav20203bpl.12:53|
 :skolemid |13|
 :pattern ( (select (|lambda#0| |l#0|) p))
)))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
(assert (= Mutators |lambda#1|))
(assert (forall ((x@@0 Int) ) (! (= (select |lambda#1| x@@0)  (and (<= 1 x@@0) (<= x@@0 N)))
 :qid |cav20203bpl.47:27|
 :skolemid |14|
 :pattern ( (select |lambda#1| x@@0))
)))
(assert (< 0 N))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Civl_pc@2 () Bool)
(declare-fun Civl_pc@0 () Bool)
(declare-fun Civl_pc@3 () Bool)
(declare-fun Civl_pc@4 () Bool)
(declare-fun Civl_ok@3 () Bool)
(declare-fun Civl_ok@2 () Bool)
(declare-fun Civl_pc@1 () Bool)
(declare-fun Civl_ok@1 () Bool)
(declare-fun mutatorsInBarrier@7 () (Array Int Bool))
(declare-fun barrierCounter@7 () Int)
(declare-fun mutatorsInBarrier@5 () (Array Int Bool))
(declare-fun barrierCounter@5 () Int)
(declare-fun barrierCounter@4 () Int)
(declare-fun mutatorsInBarrier@4 () (Array Int Bool))
(declare-fun barrierCounter@0 () Int)
(declare-fun mutatorsInBarrier@0 () (Array Int Bool))
(declare-fun Civl_global_old_mutatorsInBarrier@0 () (Array Int Bool))
(declare-fun Civl_global_old_barrierCounter@0 () Int)
(declare-fun mutatorsInBarrier@6 () (Array Int Bool))
(declare-fun barrierCounter@6 () Int)
(declare-fun inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$p@0 () T@Perm)
(declare-fun Civl_linear_perm_available@3 () (Array T@Perm Bool))
(declare-fun inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$i@0 () Int)
(declare-fun inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$i@0 () Int)
(declare-fun Civl_global_old_barrierOn@0 () Bool)
(declare-fun inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$done@0 () Bool)
(declare-fun barrierOn@3 () Bool)
(declare-fun barrierOn@2 () Bool)
(declare-fun barrierCounter@3 () Int)
(declare-fun mutatorsInBarrier@3 () (Array Int Bool))
(declare-fun Civl_linear_perm_available@2 () (Array T@Perm Bool))
(declare-fun i () Int)
(declare-fun Civl_ok@0 () Bool)
(declare-fun mutatorsInBarrier@2 () (Array Int Bool))
(declare-fun barrierCounter@2 () Int)
(declare-fun inline$AtomicEnterBarrier$0$p@1 () T@Perm)
(declare-fun barrierOn@1 () Bool)
(declare-fun barrierCounter@1 () Int)
(declare-fun mutatorsInBarrier@1 () (Array Int Bool))
(declare-fun Civl_linear_perm_available@1 () (Array T@Perm Bool))
(declare-fun barrierOn@0 () Bool)
(declare-fun Civl_linear_perm_available@0 () (Array T@Perm Bool))
(declare-fun mutatorsInBarrier () (Array Int Bool))
(declare-fun barrierCounter () Int)
(set-info :boogie-vc-id Civl_Mutator_1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 47) (let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 24) (- 0 25)) true) (=> (= (ControlFlow 0 24) (- 0 23)) (=> Civl_pc@2 true)))))
(let ((anon2_Then_1$1_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@2 Civl_pc@0) (= (ControlFlow 0 28) 24)) Civl_RefinementChecker_correct)))
(let ((anon2_Then_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@2 false) (= (ControlFlow 0 26) 24)) Civl_RefinementChecker_correct)))
(let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 17) (- 0 19)) true) (and (=> (= (ControlFlow 0 17) (- 0 18)) (=> Civl_pc@3 true)) (=> (=> Civl_pc@3 true) (=> (and (and (= Civl_pc@4  (=> true Civl_pc@3)) (= Civl_ok@3  (or true Civl_ok@2))) (= (ControlFlow 0 17) (- 0 16))) Civl_ok@3))))))
(let ((anon2_Then_0$1_@2_Civl_ReturnChecker_correct  (=> (= Civl_pc@3 Civl_pc@1) (=> (and (= Civl_ok@2 Civl_ok@1) (= (ControlFlow 0 29) 17)) Civl_ReturnChecker_correct))))
(let ((anon2_Else_@2_Civl_ReturnChecker_correct  (=> (= Civl_pc@3 false) (=> (and (= Civl_ok@2 false) (= (ControlFlow 0 20) 17)) Civl_ReturnChecker_correct))))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 12) (- 0 13)) (= ((_ map =>) mutatorsInBarrier@7 Mutators) ((as const (Array Int Bool)) true))) (=> (= ((_ map =>) mutatorsInBarrier@7 Mutators) ((as const (Array Int Bool)) true)) (=> (= (ControlFlow 0 12) (- 0 11)) (= (+ (size mutatorsInBarrier@7) barrierCounter@7) N))))))
(let ((Civl_UnifiedReturn_correct  (=> (= mutatorsInBarrier@7 mutatorsInBarrier@5) (=> (and (= barrierCounter@7 barrierCounter@5) (= (ControlFlow 0 14) 12)) GeneratedUnifiedExit_correct))))
(let ((anon2_Then_0$1_@2_Civl_UnifiedReturn_correct  (=> (= barrierCounter@5 barrierCounter@4) (=> (and (= mutatorsInBarrier@5 mutatorsInBarrier@4) (= (ControlFlow 0 30) 14)) Civl_UnifiedReturn_correct))))
(let ((anon2_Else_@2_Civl_UnifiedReturn_correct  (=> (= barrierCounter@5 barrierCounter@0) (=> (and (= mutatorsInBarrier@5 mutatorsInBarrier@0) (= (ControlFlow 0 15) 14)) Civl_UnifiedReturn_correct))))
(let ((inline$Civl_NoninterferenceChecker_yield_BarrierInv$0$L0_correct  (=> (and (= ((_ map =>) Civl_global_old_mutatorsInBarrier@0 Mutators) ((as const (Array Int Bool)) true)) (= (+ (size Civl_global_old_mutatorsInBarrier@0) Civl_global_old_barrierCounter@0) N)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (= ((_ map =>) mutatorsInBarrier@6 Mutators) ((as const (Array Int Bool)) true))) (=> (= ((_ map =>) mutatorsInBarrier@6 Mutators) ((as const (Array Int Bool)) true)) (=> (= (ControlFlow 0 8) (- 0 7)) (= (+ (size mutatorsInBarrier@6) barrierCounter@6) N)))))))
(let ((inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$L0_correct  (=> (exists ((inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$Civl_partition_perm (Array T@Perm Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array T@Perm Bool)) false) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$p@0 true) ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$Civl_partition_perm ((as const (Array T@Perm Int)) 0))) ((as const (Array T@Perm Bool)) true)) (= ((_ map =>) Civl_linear_perm_available@3 ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$Civl_partition_perm ((as const (Array T@Perm Int)) 1))) ((as const (Array T@Perm Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |3|
)) (=> (and (and (= inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$p@0 (Right inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$i@0)) (select Civl_global_old_mutatorsInBarrier@0 inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$i@0)) (= (ControlFlow 0 6) (- 0 5))) (and (= inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$p@0 (Right inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$i@0)) (select mutatorsInBarrier@6 inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$i@0))))))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$L0_correct  (=> (exists ((inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$Civl_partition_perm (Array T@Perm Int)) ) (!  (and (= ((_ map =>) (store (store ((as const (Array T@Perm Bool)) false) (Left inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$i@0) true) (Right inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$i@0) true) ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$Civl_partition_perm ((as const (Array T@Perm Int)) 0))) ((as const (Array T@Perm Bool)) true)) (= ((_ map =>) Civl_linear_perm_available@3 ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$Civl_partition_perm ((as const (Array T@Perm Int)) 1))) ((as const (Array T@Perm Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |4|
)) (=> (and (and (= inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$i@0 0) Civl_global_old_barrierOn@0) (=> inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$done@0 (= Civl_global_old_mutatorsInBarrier@0 Mutators))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (= inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$i@0 0) barrierOn@3)) (=> (and (= inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$i@0 0) barrierOn@3) (=> (= (ControlFlow 0 2) (- 0 1)) (=> inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$done@0 (= mutatorsInBarrier@6 Mutators)))))))))
(let ((anon2_Then_0$1_@2_Civl_NoninterferenceChecker_correct  (=> (= barrierOn@3 barrierOn@2) (=> (and (= barrierCounter@6 barrierCounter@4) (= mutatorsInBarrier@6 mutatorsInBarrier@4)) (=> (and (and (= Civl_global_old_barrierOn@0 barrierOn@2) (= Civl_global_old_barrierCounter@0 barrierCounter@3)) (and (= Civl_global_old_mutatorsInBarrier@0 mutatorsInBarrier@3) (= Civl_linear_perm_available@3 Civl_linear_perm_available@2))) (and (and (and (=> (= (ControlFlow 0 31) 2) inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$L0_correct) (=> (= (ControlFlow 0 31) 4) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 31) 6) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$L0_correct)) (=> (= (ControlFlow 0 31) 8) inline$Civl_NoninterferenceChecker_yield_BarrierInv$0$L0_correct)))))))
(let ((inline$AtomicWaitForBarrierRelease$0$anon0_correct  (=> (not barrierOn@2) (=> (and (= mutatorsInBarrier@4 (store mutatorsInBarrier@3 i false)) (= barrierCounter@4 (+ barrierCounter@3 1))) (and (and (=> (= (ControlFlow 0 32) 29) anon2_Then_0$1_@2_Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 32) 30) anon2_Then_0$1_@2_Civl_UnifiedReturn_correct)) (=> (= (ControlFlow 0 32) 31) anon2_Then_0$1_@2_Civl_NoninterferenceChecker_correct))))))
(let ((anon2_Then_0_correct  (=> (and (= Civl_pc@1  (=> true Civl_pc@0)) (= Civl_ok@1  (or true Civl_ok@0))) (and (=> (= (ControlFlow 0 33) (- 0 38)) (= ((_ map =>) mutatorsInBarrier@2 Mutators) ((as const (Array Int Bool)) true))) (=> (= ((_ map =>) mutatorsInBarrier@2 Mutators) ((as const (Array Int Bool)) true)) (and (=> (= (ControlFlow 0 33) (- 0 37)) (= (+ (size mutatorsInBarrier@2) barrierCounter@2) N)) (=> (= (+ (size mutatorsInBarrier@2) barrierCounter@2) N) (and (=> (= (ControlFlow 0 33) (- 0 36)) (and (= inline$AtomicEnterBarrier$0$p@1 (Right i)) (select mutatorsInBarrier@2 i))) (=> (and (= inline$AtomicEnterBarrier$0$p@1 (Right i)) (select mutatorsInBarrier@2 i)) (=> (and (= ((_ map =>) mutatorsInBarrier@3 Mutators) ((as const (Array Int Bool)) true)) (= (+ (size mutatorsInBarrier@3) barrierCounter@3) N)) (=> (and (and (and (= inline$AtomicEnterBarrier$0$p@1 (Right i)) (select mutatorsInBarrier@3 i)) (or Civl_pc@1 true)) (and (= Civl_linear_perm_available@2 ((_ map or) (|lambda#0| mutatorsInBarrier@3) ((_ map or) (store ((as const (Array T@Perm Bool)) false) inline$AtomicEnterBarrier$0$p@1 true) ((as const (Array T@Perm Bool)) false)))) (exists ((Civl_partition_perm (Array T@Perm Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array T@Perm Bool)) false) inline$AtomicEnterBarrier$0$p@1 true) ((_ map (= (Int Int) Bool)) Civl_partition_perm ((as const (Array T@Perm Int)) 0))) ((as const (Array T@Perm Bool)) true)) (= ((_ map =>) (|lambda#0| mutatorsInBarrier@3) ((_ map (= (Int Int) Bool)) Civl_partition_perm ((as const (Array T@Perm Int)) 1))) ((as const (Array T@Perm Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |10|
)))) (and (=> (= (ControlFlow 0 33) (- 0 35)) (select mutatorsInBarrier@3 i)) (=> (select mutatorsInBarrier@3 i) (=> (= (size (store mutatorsInBarrier@3 i false)) (- (size mutatorsInBarrier@3) 1)) (and (=> (= (ControlFlow 0 33) (- 0 34)) (and (= inline$AtomicEnterBarrier$0$p@1 (Right i)) (select mutatorsInBarrier@3 i))) (=> (and (= inline$AtomicEnterBarrier$0$p@1 (Right i)) (select mutatorsInBarrier@3 i)) (=> (= (ControlFlow 0 33) 32) inline$AtomicWaitForBarrierRelease$0$anon0_correct)))))))))))))))))
(let ((anon2_Then_1$1_@2_Civl_NoninterferenceChecker_correct  (=> (= barrierOn@3 barrierOn@1) (=> (and (= barrierCounter@6 barrierCounter@2) (= mutatorsInBarrier@6 mutatorsInBarrier@2)) (=> (and (and (= Civl_global_old_barrierOn@0 barrierOn@1) (= Civl_global_old_barrierCounter@0 barrierCounter@1)) (and (= Civl_global_old_mutatorsInBarrier@0 mutatorsInBarrier@1) (= Civl_linear_perm_available@3 Civl_linear_perm_available@1))) (and (and (and (=> (= (ControlFlow 0 27) 2) inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$L0_correct) (=> (= (ControlFlow 0 27) 4) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 27) 6) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$L0_correct)) (=> (= (ControlFlow 0 27) 8) inline$Civl_NoninterferenceChecker_yield_BarrierInv$0$L0_correct)))))))
(let ((inline$AtomicEnterBarrier$0$anon0_correct  (=> (= mutatorsInBarrier@2 (store mutatorsInBarrier@1 i true)) (=> (and (= barrierCounter@2 (- barrierCounter@1 1)) (= inline$AtomicEnterBarrier$0$p@1 (Right i))) (and (and (=> (= (ControlFlow 0 39) 33) anon2_Then_0_correct) (=> (= (ControlFlow 0 39) 27) anon2_Then_1$1_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 39) 28) anon2_Then_1$1_@2_Civl_RefinementChecker_correct))))))
(let ((anon2_Then_1_correct  (=> (and (= Civl_pc@0  (=> true false)) (= Civl_ok@0  (or true false))) (and (=> (= (ControlFlow 0 40) (- 0 44)) (= ((_ map =>) mutatorsInBarrier@0 Mutators) ((as const (Array Int Bool)) true))) (=> (= ((_ map =>) mutatorsInBarrier@0 Mutators) ((as const (Array Int Bool)) true)) (and (=> (= (ControlFlow 0 40) (- 0 43)) (= (+ (size mutatorsInBarrier@0) barrierCounter@0) N)) (=> (= (+ (size mutatorsInBarrier@0) barrierCounter@0) N) (=> (= ((_ map =>) mutatorsInBarrier@1 Mutators) ((as const (Array Int Bool)) true)) (=> (and (and (= (+ (size mutatorsInBarrier@1) barrierCounter@1) N) (or Civl_pc@0 true)) (and (= Civl_linear_perm_available@1 ((_ map or) (|lambda#0| mutatorsInBarrier@1) ((_ map or) (store (store ((as const (Array T@Perm Bool)) false) (Left i) true) (Right i) true) ((as const (Array T@Perm Bool)) false)))) (exists ((Civl_partition_perm@@0 (Array T@Perm Int)) ) (!  (and (= ((_ map =>) (store (store ((as const (Array T@Perm Bool)) false) (Left i) true) (Right i) true) ((_ map (= (Int Int) Bool)) Civl_partition_perm@@0 ((as const (Array T@Perm Int)) 0))) ((as const (Array T@Perm Bool)) true)) (= ((_ map =>) (|lambda#0| mutatorsInBarrier@1) ((_ map (= (Int Int) Bool)) Civl_partition_perm@@0 ((as const (Array T@Perm Int)) 1))) ((as const (Array T@Perm Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |9|
)))) (and (=> (= (ControlFlow 0 40) (- 0 42)) (not (select mutatorsInBarrier@1 i))) (=> (not (select mutatorsInBarrier@1 i)) (=> (= (size (store mutatorsInBarrier@1 i true)) (+ (size mutatorsInBarrier@1) 1)) (and (=> (= (ControlFlow 0 40) (- 0 41)) (and (<= 1 i) (<= i N))) (=> (and (<= 1 i) (<= i N)) (=> (= (ControlFlow 0 40) 39) inline$AtomicEnterBarrier$0$anon0_correct)))))))))))))))
(let ((anon2_Then_@2_Civl_NoninterferenceChecker_correct  (=> (= barrierOn@3 barrierOn@0) (=> (and (= barrierCounter@6 barrierCounter@0) (= mutatorsInBarrier@6 mutatorsInBarrier@0)) (=> (and (and (= Civl_global_old_barrierOn@0 barrierOn@0) (= Civl_global_old_barrierCounter@0 barrierCounter@0)) (and (= Civl_global_old_mutatorsInBarrier@0 mutatorsInBarrier@0) (= Civl_linear_perm_available@3 Civl_linear_perm_available@0))) (and (and (and (=> (= (ControlFlow 0 22) 2) inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$L0_correct) (=> (= (ControlFlow 0 22) 4) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 22) 6) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$L0_correct)) (=> (= (ControlFlow 0 22) 8) inline$Civl_NoninterferenceChecker_yield_BarrierInv$0$L0_correct)))))))
(let ((anon2_Then_correct  (=> barrierOn@0 (and (and (=> (= (ControlFlow 0 45) 40) anon2_Then_1_correct) (=> (= (ControlFlow 0 45) 22) anon2_Then_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 45) 26) anon2_Then_@2_Civl_RefinementChecker_correct)))))
(let ((anon2_Else_@2_Civl_NoninterferenceChecker_correct  (=> (= barrierOn@3 barrierOn@0) (=> (and (= barrierCounter@6 barrierCounter@0) (= mutatorsInBarrier@6 mutatorsInBarrier@0)) (=> (and (and (= Civl_global_old_barrierOn@0 barrierOn@0) (= Civl_global_old_barrierCounter@0 barrierCounter@0)) (and (= Civl_global_old_mutatorsInBarrier@0 mutatorsInBarrier@0) (= Civl_linear_perm_available@3 Civl_linear_perm_available@0))) (and (and (and (=> (= (ControlFlow 0 10) 2) inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$L0_correct) (=> (= (ControlFlow 0 10) 4) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 10) 6) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$L0_correct)) (=> (= (ControlFlow 0 10) 8) inline$Civl_NoninterferenceChecker_yield_BarrierInv$0$L0_correct)))))))
(let ((anon2_Else_correct  (=> (not barrierOn@0) (and (and (=> (= (ControlFlow 0 21) 20) anon2_Else_@2_Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 21) 15) anon2_Else_@2_Civl_UnifiedReturn_correct)) (=> (= (ControlFlow 0 21) 10) anon2_Else_@2_Civl_NoninterferenceChecker_correct)))))
(let ((anon0_correct  (=> (exists ((Civl_partition_perm@@1 (Array T@Perm Int)) ) (!  (and (= ((_ map =>) (store (store ((as const (Array T@Perm Bool)) false) (Left i) true) (Right i) true) ((_ map (= (Int Int) Bool)) Civl_partition_perm@@1 ((as const (Array T@Perm Int)) 0))) ((as const (Array T@Perm Bool)) true)) (= ((_ map =>) (|lambda#0| mutatorsInBarrier@0) ((_ map (= (Int Int) Bool)) Civl_partition_perm@@1 ((as const (Array T@Perm Int)) 1))) ((as const (Array T@Perm Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |7|
)) (=> (and (and (and (<= 1 i) (<= i N)) (= ((_ map =>) mutatorsInBarrier@0 Mutators) ((as const (Array Int Bool)) true))) (and (= (+ (size mutatorsInBarrier@0) barrierCounter@0) N) (= Civl_linear_perm_available@0 ((_ map or) (|lambda#0| mutatorsInBarrier@0) ((_ map or) (store (store ((as const (Array T@Perm Bool)) false) (Left i) true) (Right i) true) ((as const (Array T@Perm Bool)) false)))))) (and (=> (= (ControlFlow 0 46) 45) anon2_Then_correct) (=> (= (ControlFlow 0 46) 21) anon2_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and (<= 1 i) (<= i N)) (= ((_ map =>) mutatorsInBarrier Mutators) ((as const (Array Int Bool)) true))) (and (= (+ (size mutatorsInBarrier) barrierCounter) N) (= (ControlFlow 0 47) 46))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-datatypes ((T@Perm 0)) (((Left (|i#Left| Int) ) (Right (|i#Right| Int) ) ) ))
(declare-fun size ((Array Int Bool)) Int)
(declare-fun Mutators () (Array Int Bool))
(declare-fun N () Int)
(declare-fun |lambda#0| ((Array Int Bool)) (Array T@Perm Bool))
(declare-fun Identity () (Array Int Int))
(declare-fun |lambda#1| () (Array Int Bool))
(assert (= (size Mutators) N))
(assert (forall ((|l#0| (Array Int Bool)) (p T@Perm) ) (! (= (select (|lambda#0| |l#0|) p)  (and (is-Left p) (select |l#0| (|i#Left| p))))
 :qid |cav20203bpl.12:53|
 :skolemid |13|
 :pattern ( (select (|lambda#0| |l#0|) p))
)))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
(assert (= Mutators |lambda#1|))
(assert (forall ((x@@0 Int) ) (! (= (select |lambda#1| x@@0)  (and (<= 1 x@@0) (<= x@@0 N)))
 :qid |cav20203bpl.47:27|
 :skolemid |14|
 :pattern ( (select |lambda#1| x@@0))
)))
(assert (< 0 N))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun mutatorsInBarrier@4 () (Array Int Bool))
(declare-fun barrierCounter@4 () Int)
(declare-fun mutatorsInBarrier@2 () (Array Int Bool))
(declare-fun barrierCounter@2 () Int)
(declare-fun Civl_pc@1 () Bool)
(declare-fun Civl_pc@3 () Bool)
(declare-fun Civl_ok@2 () Bool)
(declare-fun Civl_ok@1 () Bool)
(declare-fun Civl_global_old_mutatorsInBarrier@0 () (Array Int Bool))
(declare-fun Civl_global_old_barrierCounter@0 () Int)
(declare-fun mutatorsInBarrier@3 () (Array Int Bool))
(declare-fun barrierCounter@3 () Int)
(declare-fun inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$p@0 () T@Perm)
(declare-fun Civl_linear_perm_available@3 () (Array T@Perm Bool))
(declare-fun inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$i@0 () Int)
(declare-fun inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$i@0 () Int)
(declare-fun Civl_global_old_barrierOn@0 () Bool)
(declare-fun inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$done@0 () Bool)
(declare-fun barrierOn@3 () Bool)
(declare-fun barrierOn@2 () Bool)
(declare-fun Civl_linear_perm_available@2 () (Array T@Perm Bool))
(declare-fun Civl_pc@0 () Bool)
(declare-fun Civl_ok@0 () Bool)
(declare-fun mutatorsInBarrier@1 () (Array Int Bool))
(declare-fun barrierCounter@1 () Int)
(declare-fun i () Int)
(declare-fun barrierOn@1 () Bool)
(declare-fun Civl_linear_perm_available@1 () (Array T@Perm Bool))
(declare-fun barrierCounter@0 () Int)
(declare-fun mutatorsInBarrier@0 () (Array Int Bool))
(declare-fun barrierOn@0 () Bool)
(declare-fun Civl_linear_perm_available@0 () (Array T@Perm Bool))
(declare-fun Civl_pc@2 () Bool)
(declare-fun mutatorsInBarrier () (Array Int Bool))
(declare-fun barrierCounter () Int)
(set-info :boogie-vc-id Civl_Collector_1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 41) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 23) (- 0 24)) (= ((_ map =>) mutatorsInBarrier@4 Mutators) ((as const (Array Int Bool)) true))) (=> (= ((_ map =>) mutatorsInBarrier@4 Mutators) ((as const (Array Int Bool)) true)) (=> (= (ControlFlow 0 23) (- 0 22)) (= (+ (size mutatorsInBarrier@4) barrierCounter@4) N))))))
(let ((Civl_UnifiedReturn_correct  (=> (= mutatorsInBarrier@4 mutatorsInBarrier@2) (=> (and (= barrierCounter@4 barrierCounter@2) (= (ControlFlow 0 25) 23)) GeneratedUnifiedExit_correct))))
(let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 18) (- 0 20)) true) (and (=> (= (ControlFlow 0 18) (- 0 19)) (=> Civl_pc@1 true)) (=> (=> Civl_pc@1 true) (=> (and (and (= Civl_pc@3  (=> true Civl_pc@1)) (= Civl_ok@2  (or true Civl_ok@1))) (= (ControlFlow 0 18) (- 0 17))) Civl_ok@2))))))
(let ((inline$Civl_NoninterferenceChecker_yield_BarrierInv$0$L0_correct  (=> (and (= ((_ map =>) Civl_global_old_mutatorsInBarrier@0 Mutators) ((as const (Array Int Bool)) true)) (= (+ (size Civl_global_old_mutatorsInBarrier@0) Civl_global_old_barrierCounter@0) N)) (and (=> (= (ControlFlow 0 12) (- 0 13)) (= ((_ map =>) mutatorsInBarrier@3 Mutators) ((as const (Array Int Bool)) true))) (=> (= ((_ map =>) mutatorsInBarrier@3 Mutators) ((as const (Array Int Bool)) true)) (=> (= (ControlFlow 0 12) (- 0 11)) (= (+ (size mutatorsInBarrier@3) barrierCounter@3) N)))))))
(let ((inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$L0_correct  (=> (exists ((inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$Civl_partition_perm (Array T@Perm Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array T@Perm Bool)) false) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$p@0 true) ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$Civl_partition_perm ((as const (Array T@Perm Int)) 0))) ((as const (Array T@Perm Bool)) true)) (= ((_ map =>) Civl_linear_perm_available@3 ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$Civl_partition_perm ((as const (Array T@Perm Int)) 1))) ((as const (Array T@Perm Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |3|
)) (=> (and (and (= inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$p@0 (Right inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$i@0)) (select Civl_global_old_mutatorsInBarrier@0 inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$i@0)) (= (ControlFlow 0 10) (- 0 9))) (and (= inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$p@0 (Right inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$i@0)) (select mutatorsInBarrier@3 inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$i@0))))))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$L0_correct  (=> (exists ((inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$Civl_partition_perm (Array T@Perm Int)) ) (!  (and (= ((_ map =>) (store (store ((as const (Array T@Perm Bool)) false) (Left inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$i@0) true) (Right inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$i@0) true) ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$Civl_partition_perm ((as const (Array T@Perm Int)) 0))) ((as const (Array T@Perm Bool)) true)) (= ((_ map =>) Civl_linear_perm_available@3 ((_ map (= (Int Int) Bool)) inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$Civl_partition_perm ((as const (Array T@Perm Int)) 1))) ((as const (Array T@Perm Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |4|
)) (=> (and (and (= inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$i@0 0) Civl_global_old_barrierOn@0) (=> inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$done@0 (= Civl_global_old_mutatorsInBarrier@0 Mutators))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (and (= inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$i@0 0) barrierOn@3)) (=> (and (= inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$i@0 0) barrierOn@3) (=> (= (ControlFlow 0 6) (- 0 5)) (=> inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$done@0 (= mutatorsInBarrier@3 Mutators)))))))))
(let ((anon0_0$1_@2_Civl_NoninterferenceChecker_correct  (=> (= barrierOn@3 false) (=> (and (= barrierCounter@3 barrierCounter@2) (= mutatorsInBarrier@3 mutatorsInBarrier@2)) (=> (and (and (= Civl_global_old_barrierOn@0 barrierOn@2) (= Civl_global_old_barrierCounter@0 barrierCounter@2)) (and (= Civl_global_old_mutatorsInBarrier@0 mutatorsInBarrier@2) (= Civl_linear_perm_available@3 Civl_linear_perm_available@2))) (and (and (and (=> (= (ControlFlow 0 21) 6) inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$L0_correct) (=> (= (ControlFlow 0 21) 8) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 21) 10) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$L0_correct)) (=> (= (ControlFlow 0 21) 12) inline$Civl_NoninterferenceChecker_yield_BarrierInv$0$L0_correct)))))))
(let ((anon0_0_correct  (=> (and (= Civl_pc@1  (=> true Civl_pc@0)) (= Civl_ok@1  (or true Civl_ok@0))) (and (=> (= (ControlFlow 0 26) (- 0 31)) (= ((_ map =>) mutatorsInBarrier@1 Mutators) ((as const (Array Int Bool)) true))) (=> (= ((_ map =>) mutatorsInBarrier@1 Mutators) ((as const (Array Int Bool)) true)) (and (=> (= (ControlFlow 0 26) (- 0 30)) (= (+ (size mutatorsInBarrier@1) barrierCounter@1) N)) (=> (= (+ (size mutatorsInBarrier@1) barrierCounter@1) N) (and (=> (= (ControlFlow 0 26) (- 0 29)) (and (= i 0) barrierOn@1)) (=> (and (= i 0) barrierOn@1) (and (=> (= (ControlFlow 0 26) (- 0 28)) (=> true (= mutatorsInBarrier@1 Mutators))) (=> (=> true (= mutatorsInBarrier@1 Mutators)) (=> (and (and (and (= ((_ map =>) mutatorsInBarrier@2 Mutators) ((as const (Array Int Bool)) true)) (= (+ (size mutatorsInBarrier@2) barrierCounter@2) N)) (and (= i 0) barrierOn@2)) (and (and (=> true (= mutatorsInBarrier@2 Mutators)) (or Civl_pc@1 true)) (and (= Civl_linear_perm_available@2 ((_ map or) (|lambda#0| mutatorsInBarrier@2) ((_ map or) (store (store ((as const (Array T@Perm Bool)) false) (Left i) true) (Right i) true) ((as const (Array T@Perm Bool)) false)))) (exists ((Civl_partition_perm (Array T@Perm Int)) ) (!  (and (= ((_ map =>) (store (store ((as const (Array T@Perm Bool)) false) (Left i) true) (Right i) true) ((_ map (= (Int Int) Bool)) Civl_partition_perm ((as const (Array T@Perm Int)) 0))) ((as const (Array T@Perm Bool)) true)) (= ((_ map =>) (|lambda#0| mutatorsInBarrier@2) ((_ map (= (Int Int) Bool)) Civl_partition_perm ((as const (Array T@Perm Int)) 1))) ((as const (Array T@Perm Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |12|
))))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (= mutatorsInBarrier@2 Mutators)) (=> (= mutatorsInBarrier@2 Mutators) (and (and (=> (= (ControlFlow 0 26) 18) Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 26) 25) Civl_UnifiedReturn_correct)) (=> (= (ControlFlow 0 26) 21) anon0_0$1_@2_Civl_NoninterferenceChecker_correct))))))))))))))))
(let ((anon0_1$1_@2_Civl_NoninterferenceChecker_correct  (=> (= barrierOn@3 barrierOn@1) (=> (and (= barrierCounter@3 barrierCounter@1) (= mutatorsInBarrier@3 mutatorsInBarrier@1)) (=> (and (and (= Civl_global_old_barrierOn@0 barrierOn@1) (= Civl_global_old_barrierCounter@0 barrierCounter@1)) (and (= Civl_global_old_mutatorsInBarrier@0 mutatorsInBarrier@1) (= Civl_linear_perm_available@3 Civl_linear_perm_available@1))) (and (and (and (=> (= (ControlFlow 0 15) 6) inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$L0_correct) (=> (= (ControlFlow 0 15) 8) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 15) 10) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$L0_correct)) (=> (= (ControlFlow 0 15) 12) inline$Civl_NoninterferenceChecker_yield_BarrierInv$0$L0_correct)))))))
(let ((anon0$1_@2_Civl_NoninterferenceChecker_correct  (=> (= barrierOn@3 true) (=> (and (= barrierCounter@3 barrierCounter@0) (= mutatorsInBarrier@3 mutatorsInBarrier@0)) (=> (and (and (= Civl_global_old_barrierOn@0 barrierOn@0) (= Civl_global_old_barrierCounter@0 barrierCounter@0)) (and (= Civl_global_old_mutatorsInBarrier@0 mutatorsInBarrier@0) (= Civl_linear_perm_available@3 Civl_linear_perm_available@0))) (and (and (and (=> (= (ControlFlow 0 14) 6) inline$Civl_NoninterferenceChecker_yield_CollectorInv$0$L0_correct) (=> (= (ControlFlow 0 14) 8) Civl_NoninterferenceChecker$1_correct)) (=> (= (ControlFlow 0 14) 10) inline$Civl_NoninterferenceChecker_yield_MutatorInv$0$L0_correct)) (=> (= (ControlFlow 0 14) 12) inline$Civl_NoninterferenceChecker_yield_BarrierInv$0$L0_correct)))))))
(let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) (=> Civl_pc@2 true)))))
(let ((anon0_1$1_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@2 Civl_pc@0) (= (ControlFlow 0 16) 2)) Civl_RefinementChecker_correct)))
(let ((anon0_1$1_correct  (and (=> (= (ControlFlow 0 32) (- 0 33)) (= ((_ map =>) mutatorsInBarrier@1 Mutators) ((as const (Array Int Bool)) true))) (=> (= ((_ map =>) mutatorsInBarrier@1 Mutators) ((as const (Array Int Bool)) true)) (=> (or (= mutatorsInBarrier@1 Mutators) (< (size mutatorsInBarrier@1) (size Mutators))) (and (and (=> (= (ControlFlow 0 32) 26) anon0_0_correct) (=> (= (ControlFlow 0 32) 15) anon0_1$1_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 32) 16) anon0_1$1_@2_Civl_RefinementChecker_correct)))))))
(let ((inline$AtomicWaitBarrier$0$anon0_correct  (=> (and (= barrierCounter@1 0) (= (ControlFlow 0 34) 32)) anon0_1$1_correct)))
(let ((anon0_1_correct  (=> (and (= Civl_pc@0  (=> true false)) (= Civl_ok@0  (or true false))) (and (=> (= (ControlFlow 0 35) (- 0 39)) (= ((_ map =>) mutatorsInBarrier@0 Mutators) ((as const (Array Int Bool)) true))) (=> (= ((_ map =>) mutatorsInBarrier@0 Mutators) ((as const (Array Int Bool)) true)) (and (=> (= (ControlFlow 0 35) (- 0 38)) (= (+ (size mutatorsInBarrier@0) barrierCounter@0) N)) (=> (= (+ (size mutatorsInBarrier@0) barrierCounter@0) N) (and (=> (= (ControlFlow 0 35) (- 0 37)) (and (= i 0) true)) (=> (and (= i 0) true) (and (=> (= (ControlFlow 0 35) (- 0 36)) (=> false (= mutatorsInBarrier@0 Mutators))) (=> (=> false (= mutatorsInBarrier@0 Mutators)) (=> (and (= ((_ map =>) mutatorsInBarrier@1 Mutators) ((as const (Array Int Bool)) true)) (= (+ (size mutatorsInBarrier@1) barrierCounter@1) N)) (=> (and (and (and (= i 0) barrierOn@1) (=> false (= mutatorsInBarrier@1 Mutators))) (and (and (or Civl_pc@0 true) (= Civl_linear_perm_available@1 ((_ map or) (|lambda#0| mutatorsInBarrier@1) ((_ map or) (store (store ((as const (Array T@Perm Bool)) false) (Left i) true) (Right i) true) ((as const (Array T@Perm Bool)) false))))) (and (exists ((Civl_partition_perm@@0 (Array T@Perm Int)) ) (!  (and (= ((_ map =>) (store (store ((as const (Array T@Perm Bool)) false) (Left i) true) (Right i) true) ((_ map (= (Int Int) Bool)) Civl_partition_perm@@0 ((as const (Array T@Perm Int)) 0))) ((as const (Array T@Perm Bool)) true)) (= ((_ map =>) (|lambda#0| mutatorsInBarrier@1) ((_ map (= (Int Int) Bool)) Civl_partition_perm@@0 ((as const (Array T@Perm Int)) 1))) ((as const (Array T@Perm Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |11|
)) (= (ControlFlow 0 35) 34)))) inline$AtomicWaitBarrier$0$anon0_correct)))))))))))))
(let ((anon0$1_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@2 false) (= (ControlFlow 0 4) 2)) Civl_RefinementChecker_correct)))
(let ((anon0_correct  (=> (exists ((Civl_partition_perm@@1 (Array T@Perm Int)) ) (!  (and (= ((_ map =>) (store (store ((as const (Array T@Perm Bool)) false) (Left i) true) (Right i) true) ((_ map (= (Int Int) Bool)) Civl_partition_perm@@1 ((as const (Array T@Perm Int)) 0))) ((as const (Array T@Perm Bool)) true)) (= ((_ map =>) (|lambda#0| mutatorsInBarrier@0) ((_ map (= (Int Int) Bool)) Civl_partition_perm@@1 ((as const (Array T@Perm Int)) 1))) ((as const (Array T@Perm Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |8|
)) (=> (and (and (= i 0) (= ((_ map =>) mutatorsInBarrier@0 Mutators) ((as const (Array Int Bool)) true))) (and (= (+ (size mutatorsInBarrier@0) barrierCounter@0) N) (= Civl_linear_perm_available@0 ((_ map or) (|lambda#0| mutatorsInBarrier@0) ((_ map or) (store (store ((as const (Array T@Perm Bool)) false) (Left i) true) (Right i) true) ((as const (Array T@Perm Bool)) false)))))) (and (and (=> (= (ControlFlow 0 40) 35) anon0_1_correct) (=> (= (ControlFlow 0 40) 14) anon0$1_@2_Civl_NoninterferenceChecker_correct)) (=> (= (ControlFlow 0 40) 4) anon0$1_@2_Civl_RefinementChecker_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (= i 0) (= ((_ map =>) mutatorsInBarrier Mutators) ((as const (Array Int Bool)) true))) (and (= (+ (size mutatorsInBarrier) barrierCounter) N) (= (ControlFlow 0 41) 40))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-datatypes ((T@Perm 0)) (((Left (|i#Left| Int) ) (Right (|i#Right| Int) ) ) ))
(declare-fun size ((Array Int Bool)) Int)
(declare-fun Mutators () (Array Int Bool))
(declare-fun N () Int)
(declare-fun |lambda#0| ((Array Int Bool)) (Array T@Perm Bool))
(declare-fun Identity () (Array Int Int))
(declare-fun |lambda#1| () (Array Int Bool))
(assert (= (size Mutators) N))
(assert (forall ((|l#0| (Array Int Bool)) (p T@Perm) ) (! (= (select (|lambda#0| |l#0|) p)  (and (is-Left p) (select |l#0| (|i#Left| p))))
 :qid |cav20203bpl.12:53|
 :skolemid |13|
 :pattern ( (select (|lambda#0| |l#0|) p))
)))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
(assert (= Mutators |lambda#1|))
(assert (forall ((x@@0 Int) ) (! (= (select |lambda#1| x@@0)  (and (<= 1 x@@0) (<= x@@0 N)))
 :qid |cav20203bpl.47:27|
 :skolemid |14|
 :pattern ( (select |lambda#1| x@@0))
)))
(assert (< 0 N))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun inline$AtomicEnterBarrier$0$p@1 () T@Perm)
(declare-fun mutatorsInBarrier@0 () (Array Int Bool))
(declare-fun i () Int)
(declare-fun mutatorsInBarrier () (Array Int Bool))
(declare-fun barrierCounter@0 () Int)
(declare-fun barrierCounter () Int)
(set-info :boogie-vc-id Civl_LinearityChecker_AtomicEnterBarrier)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let ((inline$AtomicEnterBarrier$0$Return_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (= ((_ map (<= (Int Int) Int)) ((_ map (+ (Int Int) Int)) ((_ map (ite (Bool Int Int) Int)) (store ((as const (Array T@Perm Bool)) false) inline$AtomicEnterBarrier$0$p@1 true) ((as const (Array T@Perm Int)) 1) ((as const (Array T@Perm Int)) 0)) ((_ map (ite (Bool Int Int) Int)) (|lambda#0| mutatorsInBarrier@0) ((as const (Array T@Perm Int)) 1) ((as const (Array T@Perm Int)) 0))) ((_ map (+ (Int Int) Int)) ((_ map (ite (Bool Int Int) Int)) (store (store ((as const (Array T@Perm Bool)) false) (Left i) true) (Right i) true) ((as const (Array T@Perm Int)) 1) ((as const (Array T@Perm Int)) 0)) ((_ map (ite (Bool Int Int) Int)) (|lambda#0| mutatorsInBarrier) ((as const (Array T@Perm Int)) 1) ((as const (Array T@Perm Int)) 0)))) ((as const (Array T@Perm Bool)) true)))))
(let ((inline$AtomicEnterBarrier$0$anon0_correct  (=> (and (and (= mutatorsInBarrier@0 (store mutatorsInBarrier i true)) (= barrierCounter@0 (- barrierCounter 1))) (and (= inline$AtomicEnterBarrier$0$p@1 (Right i)) (= (ControlFlow 0 3) 2))) inline$AtomicEnterBarrier$0$Return_correct)))
(let ((inline$AtomicEnterBarrier$0$Entry_correct  (=> (and (and (<= 1 i) (<= i N)) (= (ControlFlow 0 4) 3)) inline$AtomicEnterBarrier$0$anon0_correct)))
inline$AtomicEnterBarrier$0$Entry_correct))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-datatypes ((T@Perm 0)) (((Left (|i#Left| Int) ) (Right (|i#Right| Int) ) ) ))
(declare-fun size ((Array Int Bool)) Int)
(declare-fun Mutators () (Array Int Bool))
(declare-fun N () Int)
(declare-fun |lambda#0| ((Array Int Bool)) (Array T@Perm Bool))
(declare-fun Identity () (Array Int Int))
(declare-fun |lambda#1| () (Array Int Bool))
(assert (= (size Mutators) N))
(assert (forall ((|l#0| (Array Int Bool)) (p T@Perm) ) (! (= (select (|lambda#0| |l#0|) p)  (and (is-Left p) (select |l#0| (|i#Left| p))))
 :qid |cav20203bpl.12:53|
 :skolemid |13|
 :pattern ( (select (|lambda#0| |l#0|) p))
)))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
(assert (= Mutators |lambda#1|))
(assert (forall ((x@@0 Int) ) (! (= (select |lambda#1| x@@0)  (and (<= 1 x@@0) (<= x@@0 N)))
 :qid |cav20203bpl.47:27|
 :skolemid |14|
 :pattern ( (select |lambda#1| x@@0))
)))
(assert (< 0 N))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun i () Int)
(declare-fun mutatorsInBarrier@0 () (Array Int Bool))
(declare-fun p@@0 () T@Perm)
(declare-fun mutatorsInBarrier () (Array Int Bool))
(declare-fun barrierOn () Bool)
(declare-fun barrierCounter@0 () Int)
(declare-fun barrierCounter () Int)
(set-info :boogie-vc-id Civl_LinearityChecker_AtomicWaitForBarrierRelease)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let ((inline$AtomicWaitForBarrierRelease$0$Return_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (= ((_ map (<= (Int Int) Int)) ((_ map (+ (Int Int) Int)) ((_ map (ite (Bool Int Int) Int)) (store (store ((as const (Array T@Perm Bool)) false) (Left i) true) (Right i) true) ((as const (Array T@Perm Int)) 1) ((as const (Array T@Perm Int)) 0)) ((_ map (ite (Bool Int Int) Int)) (|lambda#0| mutatorsInBarrier@0) ((as const (Array T@Perm Int)) 1) ((as const (Array T@Perm Int)) 0))) ((_ map (+ (Int Int) Int)) ((_ map (ite (Bool Int Int) Int)) (store ((as const (Array T@Perm Bool)) false) p@@0 true) ((as const (Array T@Perm Int)) 1) ((as const (Array T@Perm Int)) 0)) ((_ map (ite (Bool Int Int) Int)) (|lambda#0| mutatorsInBarrier) ((as const (Array T@Perm Int)) 1) ((as const (Array T@Perm Int)) 0)))) ((as const (Array T@Perm Bool)) true)))))
(let ((inline$AtomicWaitForBarrierRelease$0$anon0_correct  (=> (and (and (not barrierOn) (= mutatorsInBarrier@0 (store mutatorsInBarrier i false))) (and (= barrierCounter@0 (+ barrierCounter 1)) (= (ControlFlow 0 3) 2))) inline$AtomicWaitForBarrierRelease$0$Return_correct)))
(let ((inline$AtomicWaitForBarrierRelease$0$Entry_correct  (=> (and (and (= p@@0 (Right i)) (select mutatorsInBarrier i)) (= (ControlFlow 0 4) 3)) inline$AtomicWaitForBarrierRelease$0$anon0_correct)))
inline$AtomicWaitForBarrierRelease$0$Entry_correct))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
