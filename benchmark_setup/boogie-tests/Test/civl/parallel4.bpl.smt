(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Civl_pc@2 () Bool)
(declare-fun Civl_pc@4 () Bool)
(declare-fun Civl_ok@3 () Bool)
(declare-fun Civl_ok@2 () Bool)
(declare-fun Civl_pc@3 () Bool)
(declare-fun Civl_pc@1 () Bool)
(declare-fun Civl_pc@0 () Bool)
(declare-fun Civl_ok@1 () Bool)
(declare-fun Civl_linear_tid_available@3 () (Array Int Bool))
(declare-fun call3formal@Civl_0_i@0 () Int)
(declare-fun call4formal@Civl_1_i@0 () Int)
(declare-fun Civl_ok@0 () Bool)
(declare-fun Civl_linear_tid_available@2 () (Array Int Bool))
(declare-fun call1formal@Civl_0_tid@0 () Int)
(declare-fun call1formal@Civl_0_tid@0@@0 () Int)
(declare-fun Civl_linear_tid_available@1 () (Array Int Bool))
(declare-fun Civl_linear_tid_available@0 () (Array Int Bool))
(set-info :boogie-vc-id Civl_main_1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 9) (- 0 11)) true) (and (=> (= (ControlFlow 0 9) (- 0 10)) (=> Civl_pc@2 true)) (=> (=> Civl_pc@2 true) (=> (and (and (= Civl_pc@4  (=> true Civl_pc@2)) (= Civl_ok@3  (or true Civl_ok@2))) (= (ControlFlow 0 9) (- 0 8))) Civl_ok@3))))))
(let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 3) (- 0 4)) true) (=> (= (ControlFlow 0 3) (- 0 2)) (=> Civl_pc@3 true)))))
(let ((anon0_1_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@3 Civl_pc@1) (= (ControlFlow 0 7) 3)) Civl_RefinementChecker_correct)))
(let ((anon0_2_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@3 Civl_pc@0) (= (ControlFlow 0 6) 3)) Civl_RefinementChecker_correct)))
(let ((anon0_@2_Civl_RefinementChecker_correct  (=> (and (= Civl_pc@3 false) (= (ControlFlow 0 5) 3)) Civl_RefinementChecker_correct)))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((anon0_0_correct  (=> (and (and (and (= Civl_pc@2  (=> true Civl_pc@1)) (= Civl_ok@2  (or true Civl_ok@1))) (or Civl_pc@2 true)) (and (= Civl_linear_tid_available@3 ((_ map or) (store ((as const (Array Int Bool)) false) call3formal@Civl_0_i@0 true) ((_ map or) (store ((as const (Array Int Bool)) false) call4formal@Civl_1_i@0 true) ((as const (Array Int Bool)) false)))) (exists ((Civl_partition_tid (Array Int Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array Int Bool)) false) call4formal@Civl_1_i@0 true) ((_ map (= (Int Int) Bool)) Civl_partition_tid ((as const (Array Int Int)) 0))) ((as const (Array Int Bool)) true)) (= ((_ map =>) (store ((as const (Array Int Bool)) false) call3formal@Civl_0_i@0 true) ((_ map (= (Int Int) Bool)) Civl_partition_tid ((as const (Array Int Int)) 1))) ((as const (Array Int Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |4|
)))) (and (=> (= (ControlFlow 0 12) 9) Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 12) 1) Civl_NoninterferenceChecker$1_correct)))))
(let ((anon0_1_correct  (=> (and (and (and (= Civl_pc@1  (=> true Civl_pc@0)) (= Civl_ok@1  (or true Civl_ok@0))) (or Civl_pc@1 true)) (and (= Civl_linear_tid_available@2 ((_ map or) (store ((as const (Array Int Bool)) false) call1formal@Civl_0_tid@0 true) ((_ map or) (store ((as const (Array Int Bool)) false) call1formal@Civl_0_tid@0@@0 true) ((as const (Array Int Bool)) false)))) (exists ((Civl_partition_tid@@0 (Array Int Int)) ) (!  (and (= ((_ map =>) (store ((as const (Array Int Bool)) false) call1formal@Civl_0_tid@0@@0 true) ((_ map (= (Int Int) Bool)) Civl_partition_tid@@0 ((as const (Array Int Int)) 0))) ((as const (Array Int Bool)) true)) (= ((_ map =>) (store ((as const (Array Int Bool)) false) call1formal@Civl_0_tid@0 true) ((_ map (= (Int Int) Bool)) Civl_partition_tid@@0 ((as const (Array Int Int)) 1))) ((as const (Array Int Bool)) true)))
 :qid |unknown.0:0|
 :skolemid |3|
)))) (and (and (=> (= (ControlFlow 0 13) 12) anon0_0_correct) (=> (= (ControlFlow 0 13) 7) anon0_1_@2_Civl_RefinementChecker_correct)) (=> (= (ControlFlow 0 13) 1) Civl_NoninterferenceChecker$1_correct)))))
(let ((anon0_2_correct  (=> (and (and (= Civl_pc@0  (=> true false)) (= Civl_ok@0  (or true false))) (and (or Civl_pc@0 true) (= Civl_linear_tid_available@1 ((_ map or) (store ((as const (Array Int Bool)) false) call1formal@Civl_0_tid@0@@0 true) ((as const (Array Int Bool)) false))))) (and (and (=> (= (ControlFlow 0 14) 13) anon0_1_correct) (=> (= (ControlFlow 0 14) 6) anon0_2_@2_Civl_RefinementChecker_correct)) (=> (= (ControlFlow 0 14) 1) Civl_NoninterferenceChecker$1_correct)))))
(let ((anon0_correct  (=> (= Civl_linear_tid_available@0 ((as const (Array Int Bool)) false)) (and (and (=> (= (ControlFlow 0 15) 14) anon0_2_correct) (=> (= (ControlFlow 0 15) 5) anon0_@2_Civl_RefinementChecker_correct)) (=> (= (ControlFlow 0 15) 1) Civl_NoninterferenceChecker$1_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 16) 15) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Identity () (Array Int Int))
(assert (forall ((x Int) ) (! (= (select Identity x) x)
 :qid |LibraryDefinitionsbpl.43:15|
 :skolemid |0|
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Civl_pc@0 () Bool)
(declare-fun |i'| () Int)
(declare-fun Civl_pc@1 () Bool)
(declare-fun Civl_ok@1 () Bool)
(declare-fun Civl_ok@0 () Bool)
(declare-fun a@2 () Int)
(declare-fun a@1 () Int)
(declare-fun i () Int)
(declare-fun Civl_linear_tid_available@1 () (Array Int Bool))
(declare-fun a () Int)
(declare-fun Civl_linear_tid_available@0 () (Array Int Bool))
(set-info :boogie-vc-id Civl_t_1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let ((Civl_ReturnChecker_correct  (and (=> (= (ControlFlow 0 6) (- 0 8)) true) (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> Civl_pc@0 (= |i'| |i'|))) (=> (=> Civl_pc@0 (= |i'| |i'|)) (=> (and (and (= Civl_pc@1  (=> true Civl_pc@0)) (= Civl_ok@1  (or true (and (= |i'| |i'|) Civl_ok@0)))) (= (ControlFlow 0 6) (- 0 5))) Civl_ok@1))))))
(let ((Civl_NoninterferenceChecker$1_correct true))
(let ((inline$AtomicIncr$0$anon0_correct  (=> (= a@2 (+ a@1 1)) (and (=> (= (ControlFlow 0 9) 6) Civl_ReturnChecker_correct) (=> (= (ControlFlow 0 9) 4) Civl_NoninterferenceChecker$1_correct)))))
(let ((anon0_0_correct  (=> (and (and (= Civl_pc@0  (=> true false)) (= Civl_ok@0  (or true (and (= |i'| i) false)))) (and (or Civl_pc@0 true) (= Civl_linear_tid_available@1 ((_ map or) (store ((as const (Array Int Bool)) false) |i'| true) ((as const (Array Int Bool)) false))))) (and (=> (= (ControlFlow 0 10) (- 0 11)) (= a@1 a)) (=> (= a@1 a) (=> (= (ControlFlow 0 10) 9) inline$AtomicIncr$0$anon0_correct))))))
(let ((Civl_RefinementChecker_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) (=> false (= |i'| i))))))
(let ((anon0_correct  (=> (= Civl_linear_tid_available@0 ((_ map or) (store ((as const (Array Int Bool)) false) |i'| true) ((as const (Array Int Bool)) false))) (and (and (=> (= (ControlFlow 0 12) 10) anon0_0_correct) (=> (= (ControlFlow 0 12) 2) Civl_RefinementChecker_correct)) (=> (= (ControlFlow 0 12) 4) Civl_NoninterferenceChecker$1_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 13) 12) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 10) (- 11))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
