(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun ok@0 () Bool)
(declare-fun x () Int)
(set-info :boogie-vc-id Foo)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let ((anon4_correct  (=> (= (ControlFlow 0 2) (- 0 1)) ok@0)))
(let ((anon7_Else_correct  (=> (not (= x 3)) (=> (and (= ok@0 true) (= (ControlFlow 0 6) 2)) anon4_correct))))
(let ((anon7_Then_correct  (=> (= x 3) (=> (and (= ok@0 false) (= (ControlFlow 0 5) 2)) anon4_correct))))
(let ((anon6_Else_correct  (=> (not (= x 2)) (and (=> (= (ControlFlow 0 7) 5) anon7_Then_correct) (=> (= (ControlFlow 0 7) 6) anon7_Else_correct)))))
(let ((anon6_Then_correct  (=> (= x 2) (=> (and (= ok@0 false) (= (ControlFlow 0 4) 2)) anon4_correct))))
(let ((anon5_Else_correct  (=> (not (= x 1)) (and (=> (= (ControlFlow 0 8) 4) anon6_Then_correct) (=> (= (ControlFlow 0 8) 7) anon6_Else_correct)))))
(let ((anon5_Then_correct  (=> (= x 1) (=> (and (= ok@0 false) (= (ControlFlow 0 3) 2)) anon4_correct))))
(let ((anon0_correct  (and (=> (= (ControlFlow 0 9) 3) anon5_Then_correct) (=> (= (ControlFlow 0 9) 8) anon5_Else_correct))))
anon0_correct)))))))))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
