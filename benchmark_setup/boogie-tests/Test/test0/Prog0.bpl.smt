(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun f (Int Int) Int)
(declare-fun g (Int Int) Int)
(declare-fun h (Int Int) Int)
(declare-fun a () Int)
(declare-fun b () Int)
(declare-fun c () Int)
(assert (forall ((x Int) ) (! (> (f (g (h a b) c) x) 100)
 :qid |Prog0bpl.21:11|
 :skolemid |0|
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun call4formal@q@0 () Int)
(declare-fun x@@0 () Int)
(declare-fun z@1 () Int)
(declare-sort T@ref 0)
(declare-fun call1formal@y@0 () T@ref)
(declare-sort |T@[Int,ref]ref| 0)
(declare-fun |Select__T@[Int,ref]ref_| (|T@[Int,ref]ref| Int T@ref) T@ref)
(declare-fun r@0 () |T@[Int,ref]ref|)
(declare-fun null () T@ref)
(set-info :boogie-vc-id q)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let ((continue_correct  (and (=> (= (ControlFlow 0 3) (- 0 4)) (> call4formal@q@0 3)) (=> (> call4formal@q@0 3) (=> (= (ControlFlow 0 3) (- 0 2)) (= x@@0 1))))))
(let ((end_correct true))
(let ((start_correct  (=> (and (= z@1 (+ x@@0 x@@0)) (= call1formal@y@0 (|Select__T@[Int,ref]ref_| r@0 3 null))) (and (=> (= (ControlFlow 0 5) 1) end_correct) (=> (= (ControlFlow 0 5) 3) continue_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (> x@@0 0) (= (ControlFlow 0 6) 5)) start_correct)))
PreconditionGeneratedEntry_correct)))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 3) (- 4))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun f (Int Int) Int)
(declare-fun g (Int Int) Int)
(declare-fun h (Int Int) Int)
(declare-fun a () Int)
(declare-fun b () Int)
(declare-fun c () Int)
(assert (forall ((x Int) ) (! (> (f (g (h a b) c) x) 100)
 :qid |Prog0bpl.21:11|
 :skolemid |0|
)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-info :boogie-vc-id s)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 1) true)
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
