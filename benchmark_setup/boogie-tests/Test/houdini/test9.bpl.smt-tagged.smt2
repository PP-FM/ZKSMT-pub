(set-logic QF_LIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun b3 () Bool)
(declare-fun b4 () Bool)
(declare-fun b1 () Bool)
(declare-fun v1 () Int)
(declare-fun b2 () Bool)
(set-info :boogie-vc-id q@push)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let ((anon0_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> b3 (= 1 0))) (=> (=> b3 (= 1 0)) (=> (= (ControlFlow 0 2) (- 0 1)) (=> b4 (= 1 1)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (=> b1 (= v1 0)) (=> (and (=> b2 (= v1 1)) (= (ControlFlow 0 4) 2)) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun b7 () Bool)
(declare-fun v2 () Int)
(declare-fun b8 () Bool)
(declare-fun b5 () Bool)
(declare-fun v1 () Int)
(declare-fun b6 () Bool)
(set-info :boogie-vc-id q@pop)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let ((anon0_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> b7 (= v2 0))) (=> (=> b7 (= v2 0)) (=> (= (ControlFlow 0 2) (- 0 1)) (=> b8 (= v2 1)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (=> b5 (= v1 0)) (=> (and (=> b6 (= v1 1)) (= (ControlFlow 0 4) 2)) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun b1 () Bool)
(declare-fun v1 () Int)
(declare-fun b2 () Bool)
(declare-fun b3 () Bool)
(declare-fun v1@0 () Int)
(declare-fun b4 () Bool)
(declare-fun b5 () Bool)
(declare-fun b6 () Bool)
(declare-fun b7 () Bool)
(declare-fun v1@1 () Int)
(declare-fun b8 () Bool)
(declare-fun b11 () Bool)
(declare-fun b12 () Bool)
(declare-fun b9 () Bool)
(declare-fun b10 () Bool)
(set-info :boogie-vc-id foo)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((anon0_correct  (and (=> (= (ControlFlow 0 2) (- 0 7)) (=> b1 (= v1 0))) (=> (=> b1 (= v1 0)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (=> b2 (= v1 1))) (=> (=> b2 (= v1 1)) (=> (and (=> b3 (= v1@0 0)) (=> b4 (= v1@0 1))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> b5 (= v1@0 0))) (=> (=> b5 (= v1@0 0)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> b6 (= v1@0 1))) (=> (=> b6 (= v1@0 1)) (=> (and (=> b7 (= v1@1 0)) (=> b8 (= v1@1 1))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> b11 (= v1@1 0))) (=> (=> b11 (= v1@1 0)) (=> (= (ControlFlow 0 2) (- 0 1)) (=> b12 (= v1@1 1)))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (=> b9 (= v1 0)) (=> (and (=> b10 (= v1 1)) (= (ControlFlow 0 8) 2)) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 7))))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 4))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun b1 () Bool)
(declare-fun v1 () Int)
(declare-fun b2 () Bool)
(declare-fun b3 () Bool)
(declare-fun v1@0 () Int)
(declare-fun b4 () Bool)
(declare-fun b5 () Bool)
(declare-fun b6 () Bool)
(declare-fun b7 () Bool)
(declare-fun v1@1 () Int)
(declare-fun b8 () Bool)
(declare-fun b15 () Bool)
(declare-fun b16 () Bool)
(declare-fun b13 () Bool)
(declare-fun b14 () Bool)
(set-info :boogie-vc-id bar)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((anon0_correct  (and (=> (= (ControlFlow 0 2) (- 0 7)) (=> b1 (= v1 0))) (=> (=> b1 (= v1 0)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (=> b2 (= v1 1))) (=> (=> b2 (= v1 1)) (=> (and (=> b3 (= v1@0 0)) (=> b4 (= v1@0 1))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> b5 (= v1@0 0))) (=> (=> b5 (= v1@0 0)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> b6 (= v1@0 1))) (=> (=> b6 (= v1@0 1)) (=> (and (=> b7 (= v1@1 0)) (=> b8 (= v1@1 1))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> b15 (= v1@1 0))) (=> (=> b15 (= v1@1 0)) (=> (= (ControlFlow 0 2) (- 0 1)) (=> b16 (= v1@1 1)))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (=> b13 (= v1 0)) (=> (and (=> b14 (= v1 1)) (= (ControlFlow 0 8) 2)) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 7))))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 4))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun b9 () Bool)
(declare-fun b10 () Bool)
(declare-fun b11 () Bool)
(declare-fun v1@0 () Int)
(declare-fun b12 () Bool)
(declare-fun b13 () Bool)
(declare-fun v1@1 () Int)
(declare-fun b14 () Bool)
(set-info :boogie-vc-id main)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let ((anon0_correct  (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> b9 (= 1 0))) (=> (=> b9 (= 1 0)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> b10 (= 1 1))) (=> (=> b10 (= 1 1)) (=> (and (=> b11 (= v1@0 0)) (=> b12 (= v1@0 1))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> b13 (= v1@1 0))) (=> (=> b13 (= v1@1 0)) (=> (= (ControlFlow 0 2) (- 0 1)) (=> b14 (= v1@1 1))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 6) 2) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 5))))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
