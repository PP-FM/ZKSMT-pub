(set-logic QF_LIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun inline$roundingTest$1$rneSum@1 () (_ FloatingPoint 8 24))
(declare-fun f1 () (_ FloatingPoint 8 24))
(declare-fun f2 () (_ FloatingPoint 8 24))
(declare-fun inline$roundingTest$1$rtnSum@1 () (_ FloatingPoint 8 24))
(declare-fun inline$roundingTest$0$rneSum@1 () (_ FloatingPoint 8 24))
(declare-fun inline$roundingTest$0$rtnSum@1 () (_ FloatingPoint 8 24))
(set-info :boogie-vc-id Main)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((inline$roundingTest$1$anon0_correct  (=> (= inline$roundingTest$1$rneSum@1 (fp.add RNE f1 f2)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (fp.eq inline$roundingTest$1$rneSum@1 (fp (_ bv0 1) (_ bv127 8) (_ bv1 23)))) (=> (fp.eq inline$roundingTest$1$rneSum@1 (fp (_ bv0 1) (_ bv127 8) (_ bv1 23))) (=> (and (= inline$roundingTest$1$rtnSum@1 (fp.add RTN f1 f2)) (= (ControlFlow 0 2) (- 0 1))) (fp.eq inline$roundingTest$1$rtnSum@1 (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)))))))))
(let ((anon0$1_correct  (=> (and (fp.lt (fp (_ bv0 1) (_ bv126 8) (_ bv8388607 23)) f1) (fp.lt f1 (fp (_ bv0 1) (_ bv127 8) (_ bv1 23)))) (=> (and (and (fp.lt (fp (_ bv0 1) (_ bv103 8) (_ bv4194303 23)) f2) (fp.lt f2 (fp (_ bv0 1) (_ bv103 8) (_ bv4194305 23)))) (= (ControlFlow 0 4) 2)) inline$roundingTest$1$anon0_correct))))
(let ((inline$roundingTest$0$anon0_correct  (=> (= inline$roundingTest$0$rneSum@1 (fp.add RNE (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv103 8) (_ bv4194304 23)))) (and (=> (= (ControlFlow 0 5) (- 0 7)) (fp.eq inline$roundingTest$0$rneSum@1 (fp (_ bv0 1) (_ bv127 8) (_ bv1 23)))) (=> (fp.eq inline$roundingTest$0$rneSum@1 (fp (_ bv0 1) (_ bv127 8) (_ bv1 23))) (=> (= inline$roundingTest$0$rtnSum@1 (fp.add RTN (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv103 8) (_ bv4194304 23)))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (fp.eq inline$roundingTest$0$rtnSum@1 (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)))) (=> (fp.eq inline$roundingTest$0$rtnSum@1 (fp (_ bv0 1) (_ bv127 8) (_ bv0 23))) (=> (= (ControlFlow 0 5) 4) anon0$1_correct)))))))))
(let ((anon0_correct  (=> (= (ControlFlow 0 8) 5) inline$roundingTest$0$anon0_correct)))
anon0_correct)))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
