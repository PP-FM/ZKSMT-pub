(set-logic QF_LIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun n () Int)
(declare-fun r@1 () Int)
(declare-fun call0formal@n@0 () Int)
(declare-fun call1formal@r@0 () Int)
(declare-fun call1formal@r@0@@0 () Int)
(declare-fun r@0 () Int)
(set-info :boogie-vc-id F)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (< 100 n) (= r@1 (- n 10)))) (=> (=> (< 100 n) (= r@1 (- n 10))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> (<= n 100) (= r@1 91)))))))
(let ((anon3_Else_correct  (=> (and (and (and (<= n 100) (= call0formal@n@0 (+ n 11))) (and (=> (< 100 call0formal@n@0) (= call1formal@r@0 (- call0formal@n@0 10))) (=> (<= call0formal@n@0 100) (= call1formal@r@0 91)))) (and (and (=> (< 100 call1formal@r@0) (= call1formal@r@0@@0 (- call1formal@r@0 10))) (=> (<= call1formal@r@0 100) (= call1formal@r@0@@0 91))) (and (= r@1 call1formal@r@0@@0) (= (ControlFlow 0 5) 2)))) GeneratedUnifiedExit_correct)))
(let ((anon3_Then_correct  (=> (and (and (< 100 n) (= r@0 (- n 10))) (and (= r@1 r@0) (= (ControlFlow 0 4) 2))) GeneratedUnifiedExit_correct)))
(let ((anon0_correct  (and (=> (= (ControlFlow 0 6) 4) anon3_Then_correct) (=> (= (ControlFlow 0 6) 5) anon3_Else_correct))))
anon0_correct)))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
