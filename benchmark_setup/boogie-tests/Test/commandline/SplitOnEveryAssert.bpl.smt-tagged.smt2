(set-logic QF_NIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun y@2 () Int)
(declare-fun x@0 () Int)
(declare-fun y@0 () Int)
(declare-fun x@1 () Int)
(declare-fun y@1 () Int)
(set-info :boogie-vc-id Ex)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 14) (- 0 13)) (>= y@2 0))))
(let ((anon5_LoopDone_correct  (=> (>= 0 x@0) (=> (and (= y@2 y@0) (= (ControlFlow 0 15) 14)) GeneratedUnifiedExit_correct))))
(let ((anon4_correct  (and (=> (= (ControlFlow 0 2) (- 0 4)) (= (* (+ x@1 y@1) (+ x@1 y@1)) 25)) (=> (= (* (+ x@1 y@1) (+ x@1 y@1)) 25) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= (+ x@1 y@1) 5)) (=> (= (+ x@1 y@1) 5) (=> (= (ControlFlow 0 2) (- 0 1)) (<= (* x@1 x@1) 25))))))))
(let ((anon6_Else_correct  (=> (<= 3 x@1) (and (=> (= (ControlFlow 0 8) (- 0 10)) (< (* (* y@1 y@1) y@1) 8)) (=> (< (* (* y@1 y@1) y@1) 8) (and (=> (= (ControlFlow 0 8) (- 0 9)) (< 2 2)) (=> (< 2 2) (=> (= (ControlFlow 0 8) 2) anon4_correct))))))))
(let ((anon6_Then_correct  (=> (< x@1 3) (and (=> (= (ControlFlow 0 5) (- 0 7)) (< 2 2)) (=> (< 2 2) (and (=> (= (ControlFlow 0 5) (- 0 6)) (> (* y@1 y@1) 4)) (=> (> (* y@1 y@1) 4) (=> (= (ControlFlow 0 5) 2) anon4_correct))))))))
(let ((anon5_LoopBody_correct  (=> (and (> x@0 0) (= x@1 (- x@0 1))) (and (=> (= (ControlFlow 0 11) (- 0 12)) (> (* (+ x@1 y@0) (+ x@1 y@0)) 25)) (=> (> (* (+ x@1 y@0) (+ x@1 y@0)) 25) (=> (= y@1 (+ y@0 1)) (and (=> (= (ControlFlow 0 11) 5) anon6_Then_correct) (=> (= (ControlFlow 0 11) 8) anon6_Else_correct))))))))
(let ((anon5_LoopHead_correct  (=> (and (= (+ x@0 y@0) 5) (<= (* x@0 x@0) 25)) (and (=> (= (ControlFlow 0 16) 15) anon5_LoopDone_correct) (=> (= (ControlFlow 0 16) 11) anon5_LoopBody_correct)))))
(let ((anon0_correct  (and (=> (= (ControlFlow 0 17) (- 0 19)) (= (+ 5 0) 5)) (=> (= (+ 5 0) 5) (and (=> (= (ControlFlow 0 17) (- 0 18)) (<= (* 5 5) 25)) (=> (<= (* 5 5) 25) (=> (= (ControlFlow 0 17) 16) anon5_LoopHead_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 20) 17) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(assert (not (= (ControlFlow 0 11) (- 12))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
