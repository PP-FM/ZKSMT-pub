(set-logic QF_LIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x@1 () Int)
(declare-fun x () Int)
(declare-fun x@0 () Int)
(set-info :boogie-vc-id Test)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let ((exit_correct  (=> (and (< x@1 0) (= (ControlFlow 0 3) (- 0 2))) false)))
(let ((loophead_@2_exit_correct  (=> (and (= x@1 0) (= (ControlFlow 0 5) 3)) exit_correct)))
(let ((entry_@2_exit_correct  (=> (and (= x@1 x) (= (ControlFlow 0 4) 3)) exit_correct)))
(let ((loophead_@2_loophead_correct true))
(let ((loophead_correct  (=> (>= x@0 0) (and (=> (= (ControlFlow 0 6) 1) loophead_@2_loophead_correct) (=> (= (ControlFlow 0 6) 5) loophead_@2_exit_correct)))))
(let ((entry_correct  (and (=> (= (ControlFlow 0 7) 4) entry_@2_exit_correct) (=> (= (ControlFlow 0 7) 6) loophead_correct))))
entry_correct)))))))
))
(check-sat)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
