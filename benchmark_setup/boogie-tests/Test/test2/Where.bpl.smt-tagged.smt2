(set-logic QF_LIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x () Int)
(declare-fun y () Int)
(set-info :boogie-vc-id P0)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon0_correct  (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= 0 x)) (=> (<= 0 x) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= x y)) (=> (<= x y) (=> (= (ControlFlow 0 2) (- 0 1)) (< y 5))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (<= 0 x) true) (=> (and (and (<= x y) true) (= (ControlFlow 0 5) 2)) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun y@0 () Int)
(declare-fun x@0 () Int)
(declare-fun x () Int)
(declare-fun y () Int)
(set-info :boogie-vc-id P1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon0_correct  (=> (<= 5 y@0) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= 5 y@0)) (=> (<= 5 y@0) (=> (<= 0 x@0) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= 0 x@0)) (=> (<= 0 x@0) (=> (= (ControlFlow 0 2) (- 0 1)) (<= x@0 y@0))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (<= 0 x) true) (=> (and (and (<= x y) true) (= (ControlFlow 0 5) 2)) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x () Int)
(declare-fun y@0 () Int)
(declare-fun x@0 () Int)
(declare-fun y () Int)
(set-info :boogie-vc-id P2)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((anon0_correct  (=> (<= x y@0) (=> (and (<= 0 x@0) (= (ControlFlow 0 2) (- 0 1))) (<= x@0 y@0)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (<= 0 x) true) (=> (and (and (<= x y) true) (= (ControlFlow 0 3) 2)) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x@0 () Int)
(declare-fun y@0 () Int)
(declare-fun x () Int)
(declare-fun y () Int)
(set-info :boogie-vc-id P3)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let ((anon0_correct  (=> (and (<= 0 x@0) (<= x@0 y@0)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= x@0 y@0)) (=> (<= x@0 y@0) (=> (= (ControlFlow 0 2) (- 0 1)) (<= 5 y@0)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (<= 0 x) true) (=> (and (and (<= x y) true) (= (ControlFlow 0 4) 2)) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x@0 () Int)
(declare-fun y@0 () Int)
(declare-fun x@1 () Int)
(declare-fun y@1 () Int)
(declare-fun x () Int)
(declare-fun y () Int)
(set-info :boogie-vc-id P4)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon0_correct  (=> (and (<= 0 x@0) (<= x@0 y@0)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (<= 0 x@0) (<= x@0 y@0))) (=> (and (<= 0 x@0) (<= x@0 y@0)) (=> (and (<= x@1 y@1) (<= 0 x@1)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 x@1) (<= x@1 y@1))) (=> (and (<= 0 x@1) (<= x@1 y@1)) (=> (= (ControlFlow 0 2) (- 0 1)) (= x@1 7))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (<= 0 x) true) (=> (and (and (<= x y) true) (= (ControlFlow 0 5) 2)) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun w@0 () Int)
(declare-fun x@0 () Int)
(declare-fun y@0 () Int)
(declare-fun w () Int)
(declare-fun x () Int)
(declare-fun y () Int)
(set-info :boogie-vc-id R0)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let ((anon6_LoopBody_correct  (and (=> (= (ControlFlow 0 10) (- 0 12)) (= w@0 x@0)) (=> (= w@0 x@0) (and (=> (= (ControlFlow 0 10) (- 0 11)) (<= 0 x@0)) (=> (<= 0 x@0) (=> (= (ControlFlow 0 10) (- 0 9)) (<= x@0 y@0))))))))
(let ((anon6_LoopDone_correct  (and (=> (= (ControlFlow 0 6) (- 0 8)) (= w@0 x@0)) (=> (= w@0 x@0) (and (=> (= (ControlFlow 0 6) (- 0 7)) (<= 0 x@0)) (=> (<= 0 x@0) (=> (= (ControlFlow 0 6) (- 0 5)) (<= x@0 y@0))))))))
(let ((anon6_LoopHead_correct  (=> (= w@0 x@0) (=> (and (<= 0 x@0) (<= x@0 y@0)) (and (=> (= (ControlFlow 0 13) 6) anon6_LoopDone_correct) (=> (= (ControlFlow 0 13) 10) anon6_LoopBody_correct))))))
(let ((anon5_LoopBody_correct  (and (=> (= (ControlFlow 0 2) (- 0 4)) (= w x)) (=> (= w x) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= 0 x)) (=> (<= 0 x) (=> (= (ControlFlow 0 2) (- 0 1)) (<= x y))))))))
(let ((anon0_correct  (=> (= w x) (=> (and (<= 0 x) (<= x y)) (and (=> (= (ControlFlow 0 14) 2) anon5_LoopBody_correct) (=> (= (ControlFlow 0 14) 13) anon6_LoopHead_correct))))))
anon0_correct))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun call0formal@wProc () Int)
(declare-fun call1formal@xProc () Int)
(declare-fun call2formal@yProc () Int)
(declare-fun call0formal@wProc@0 () Int)
(declare-fun call1formal@xProc@0 () Int)
(declare-fun call2formal@yProc@0 () Int)
(set-info :boogie-vc-id R1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon0_correct  (=> (and (= call0formal@wProc call1formal@xProc) (<= 0 call1formal@xProc)) (=> (and (and (<= call1formal@xProc call2formal@yProc) (= call0formal@wProc@0 call1formal@xProc@0)) (and (<= 0 call1formal@xProc@0) (<= call1formal@xProc@0 call2formal@yProc@0))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (= call0formal@wProc@0 call1formal@xProc@0)) (=> (= call0formal@wProc@0 call1formal@xProc@0) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= 0 call1formal@xProc@0)) (=> (<= 0 call1formal@xProc@0) (=> (= (ControlFlow 0 2) (- 0 1)) (<= call1formal@xProc@0 call2formal@yProc@0))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 5) 2) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun w@1 () Int)
(declare-fun w@0 () Int)
(declare-fun y@1 () Int)
(declare-fun y@0 () Int)
(declare-fun w () Int)
(declare-fun x () Int)
(declare-fun y () Int)
(set-info :boogie-vc-id R2)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((anon3_LoopBody_correct  (=> (= w@1 (+ w@0 1)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (= w@1 6)) (=> (= w@1 6) (=> (and (= y@1 (+ y@0 2)) (= (ControlFlow 0 5) (- 0 4))) (<= 7 y@1)))))))
(let ((anon3_LoopDone_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (= 5 5) (<= 0 (- y@0 w@0)))) (=> (and (= 5 5) (<= 0 (- y@0 w@0))) (=> (= (ControlFlow 0 2) (- 0 1)) (= y@0 10))))))
(let ((anon3_LoopHead_correct  (=> (and (= w@0 5) (<= 5 y@0)) (and (=> (= (ControlFlow 0 7) 2) anon3_LoopDone_correct) (=> (= (ControlFlow 0 7) 5) anon3_LoopBody_correct)))))
(let ((anon0_correct  (=> (and (and (and (= w x) true) (and (<= 0 x) true)) (and (and (<= x y) true) (= (ControlFlow 0 8) 7))) anon3_LoopHead_correct)))
anon0_correct)))))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun w@0 () Int)
(declare-fun x@0 () Int)
(declare-fun w () Int)
(declare-fun x () Int)
(declare-fun y () Int)
(set-info :boogie-vc-id R3)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((anon3_LoopBody_correct true))
(let ((anon3_LoopDone_correct  (and (=> (= (ControlFlow 0 2) (- 0 5)) (= w@0 x@0)) (=> (= w@0 x@0) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= 0 x@0)) (=> (<= 0 x@0) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= 10 10)) (=> (= 10 10) (=> (= (ControlFlow 0 2) (- 0 1)) (<= w@0 10))))))))))
(let ((anon3_LoopHead_correct  (=> (and (= w@0 x@0) (<= 0 x@0)) (and (=> (= (ControlFlow 0 7) 2) anon3_LoopDone_correct) (=> (= (ControlFlow 0 7) 6) anon3_LoopBody_correct)))))
(let ((anon0_correct  (=> (and (and (and (= w x) true) (and (<= 0 x) true)) (and (and (<= x y) true) (= (ControlFlow 0 8) 7))) anon3_LoopHead_correct)))
anon0_correct)))))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x@0 () Int)
(declare-fun y@0 () Int)
(declare-fun w () Int)
(declare-fun x () Int)
(declare-fun y () Int)
(set-info :boogie-vc-id R4)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((anon3_LoopBody_correct true))
(let ((anon3_LoopDone_correct  (and (=> (= (ControlFlow 0 2) (- 0 5)) (<= 0 x@0)) (=> (<= 0 x@0) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= x@0 y@0)) (=> (<= x@0 y@0) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= 12 12)) (=> (= 12 12) (=> (= (ControlFlow 0 2) (- 0 1)) (<= 8 y@0))))))))))
(let ((anon3_LoopHead_correct  (=> (and (<= 0 x@0) (<= x@0 y@0)) (and (=> (= (ControlFlow 0 7) 2) anon3_LoopDone_correct) (=> (= (ControlFlow 0 7) 6) anon3_LoopBody_correct)))))
(let ((anon0_correct  (=> (and (and (and (= w x) true) (and (<= 0 x) true)) (and (and (<= x y) true) (= (ControlFlow 0 8) 7))) anon3_LoopHead_correct)))
anon0_correct)))))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun w@0 () Int)
(declare-fun K () Int)
(declare-fun y@0 () Int)
(declare-fun w () Int)
(declare-fun x () Int)
(declare-fun y () Int)
(set-info :boogie-vc-id R5)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((anon3_LoopBody_correct true))
(let ((anon3_LoopDone_correct  (and (=> (= (ControlFlow 0 2) (- 0 5)) (= w@0 K)) (=> (= w@0 K) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= K y@0)) (=> (<= K y@0) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= K K)) (=> (= K K) (=> (= (ControlFlow 0 2) (- 0 1)) (<= 0 K))))))))))
(let ((anon3_LoopHead_correct  (=> (and (= w@0 K) (<= K y@0)) (and (=> (= (ControlFlow 0 7) 2) anon3_LoopDone_correct) (=> (= (ControlFlow 0 7) 6) anon3_LoopBody_correct)))))
(let ((anon0_correct  (=> (and (and (and (= w x) true) (and (<= 0 x) true)) (and (and (<= x y) true) (= (ControlFlow 0 8) 7))) anon3_LoopHead_correct)))
anon0_correct)))))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
