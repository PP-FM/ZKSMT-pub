(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun r@0 () Int)
(declare-fun m@3 () Int)
(declare-fun x () Int)
(declare-fun m@2 () Int)
(declare-fun m@0 () Int)
(declare-fun y () Int)
(declare-fun m@1 () Int)
(declare-sort T@Ref 0)
(declare-sort T@FieldName 0)
(declare-sort |T@[Ref,FieldName]Int| 0)
(declare-fun |Select__T@[Ref,FieldName]Int_| (|T@[Ref,FieldName]Int| T@Ref T@FieldName) Int)
(declare-fun Heap () |T@[Ref,FieldName]Int|)
(declare-fun this () T@Ref)
(declare-fun F () T@FieldName)
(set-info :boogie-vc-id P)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let ((anon3_correct  (=> (and (= r@0 (+ m@3 m@3)) (= (ControlFlow 0 2) (- 0 1))) (<= 0 r@0))))
(let ((anon4_Else_correct  (=> (and (and (< x 0) (= m@2 (* (+ m@0 y) (+ m@0 y)))) (and (= m@3 m@2) (= (ControlFlow 0 4) 2))) anon3_correct)))
(let ((anon4_Then_correct  (=> (and (and (<= 0 x) (= m@1 (+ m@0 1))) (and (= m@3 m@1) (= (ControlFlow 0 3) 2))) anon3_correct)))
(let ((anon0_correct  (=> (= m@0 (|Select__T@[Ref,FieldName]Int_| Heap this F)) (and (=> (= (ControlFlow 0 5) 3) anon4_Then_correct) (=> (= (ControlFlow 0 5) 4) anon4_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and (<= 118 (* 3 x)) (< (* 4 x) 163)) (= (* (|Select__T@[Ref,FieldName]Int_| Heap this F) 5) (- 0 x))) (= (ControlFlow 0 6) 5)) anon0_correct)))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
