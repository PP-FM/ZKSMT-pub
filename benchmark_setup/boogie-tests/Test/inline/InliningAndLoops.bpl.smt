(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun n@0 () Int)
(declare-fun sum@0 () Int)
(declare-fun recent@0 () Int)
(declare-fun N () Int)
(set-info :boogie-vc-id foo)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let ((anon5_Else_correct true))
(let ((anon5_Then_correct  (=> (and (= n@0 2) (= (ControlFlow 0 4) (- 0 3))) (= sum@0 (+ recent@0 recent@0)))))
(let ((anon4_LoopDone_correct  (=> (<= N n@0) (and (=> (= (ControlFlow 0 6) 4) anon5_Then_correct) (=> (= (ControlFlow 0 6) 5) anon5_Else_correct)))))
(let ((anon4_LoopBody$1_correct true))
(let ((anon4_LoopBody_correct  (=> (and (< n@0 N) (= (ControlFlow 0 2) 1)) anon4_LoopBody$1_correct)))
(let ((anon0_correct  (=> (= N 2) (and (=> (= (ControlFlow 0 7) 6) anon4_LoopDone_correct) (=> (= (ControlFlow 0 7) 2) anon4_LoopBody_correct)))))
anon0_correct)))))))
))
(check-sat)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
