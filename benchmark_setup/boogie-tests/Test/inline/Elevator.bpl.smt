(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-sort |T@[Int]Bool| 0)
(declare-fun |Select__T@[Int]Bool_| (|T@[Int]Bool| Int) Bool)
(declare-fun EmptySet () |T@[Int]Bool|)
(assert (forall ((o Int) ) (!  (not (|Select__T@[Int]Bool_| EmptySet o))
 :qid |Elevatorbpl.154:15|
 :skolemid |0|
 :pattern ( (|Select__T@[Int]Bool_| EmptySet o))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun liftDoorOpen@0 () Bool)
(declare-fun moving@0 () Bool)
(declare-fun DoorsOpen@1 () |T@[Int]Bool|)
(declare-fun |Store__T@[Int]Bool_| (|T@[Int]Bool| Int Bool) |T@[Int]Bool|)
(assert (forall ( ( ?x0 |T@[Int]Bool|) ( ?x1 Int) ( ?x2 Bool)) (! (= (|Select__T@[Int]Bool_| (|Store__T@[Int]Bool_| ?x0 ?x1 ?x2) ?x1)  ?x2) :weight 0)))
(assert (forall ( ( ?x0 |T@[Int]Bool|) ( ?x1 Int) ( ?y1 Int) ( ?x2 Bool)) (! (=>  (not (= ?x1 ?y1)) (= (|Select__T@[Int]Bool_| (|Store__T@[Int]Bool_| ?x0 ?x1 ?x2) ?y1) (|Select__T@[Int]Bool_| ?x0 ?y1))) :weight 0)))
(declare-fun DoorsOpen@0 () |T@[Int]Bool|)
(declare-fun i@3 () Int)
(declare-fun liftLevel@0 () Int)
(declare-fun i@2 () Int)
(declare-fun DoorsOpen@2 () |T@[Int]Bool|)
(declare-fun headingTo@0 () Int)
(declare-fun liftLevel@1 () Int)
(declare-fun liftLevel@2 () Int)
(declare-fun floors () |T@[Int]Bool|)
(declare-fun i@1 () Int)
(set-info :boogie-vc-id Main_Error)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 29) (let ((anon17_Else$1_correct  (=> (= (ControlFlow 0 23) (- 0 22)) (not (and liftDoorOpen@0 moving@0)))))
(let ((inline$CloseFloorDoor$0$anon0_correct  (=> (and (= DoorsOpen@1 (|Store__T@[Int]Bool_| DoorsOpen@0 i@3 false)) (= (ControlFlow 0 24) 23)) anon17_Else$1_correct)))
(let ((anon17_Then$1_correct  (=> (= (ControlFlow 0 20) (- 0 19)) (not (and liftDoorOpen@0 moving@0)))))
(let ((inline$OpenFloorDoor$0$anon0_correct  (=> (= liftLevel@0 i@2) (=> (and (= DoorsOpen@2 (|Store__T@[Int]Bool_| DoorsOpen@0 i@2 true)) (= (ControlFlow 0 21) 20)) anon17_Then$1_correct))))
(let ((anon15_Then$1_correct  (=> (= (ControlFlow 0 17) (- 0 16)) (not (and true moving@0)))))
(let ((inline$OpenLiftDoor$0$anon0_correct  (=> (and (not moving@0) (= (ControlFlow 0 18) 17)) anon15_Then$1_correct)))
(let ((anon14_Then$1_correct  (=> (= (ControlFlow 0 14) (- 0 13)) (not (and liftDoorOpen@0 false)))))
(let ((inline$Stop$0$anon0_correct  (=> (and (= liftLevel@0 headingTo@0) (= (ControlFlow 0 15) 14)) anon14_Then$1_correct)))
(let ((anon13_Then$1_correct  (=> (= (ControlFlow 0 11) (- 0 10)) (not (and liftDoorOpen@0 true)))))
(let ((inline$MoveDown_Error$0$anon0_correct  (=> (and (and (and (> liftLevel@0 headingTo@0) (> headingTo@0 0)) (not (|Select__T@[Int]Bool_| DoorsOpen@0 liftLevel@0))) (and (= liftLevel@1 (- liftLevel@0 1)) (= (ControlFlow 0 12) 11))) anon13_Then$1_correct)))
(let ((anon12_Then$1_correct  (=> (= (ControlFlow 0 8) (- 0 7)) (not (and liftDoorOpen@0 true)))))
(let ((inline$MoveUp$0$anon0_correct  (=> (and (and (and (not liftDoorOpen@0) (< liftLevel@0 headingTo@0)) (not (|Select__T@[Int]Bool_| DoorsOpen@0 liftLevel@0))) (and (= liftLevel@2 (+ liftLevel@0 1)) (= (ControlFlow 0 9) 8))) anon12_Then$1_correct)))
(let ((anon11_Then$1_correct  (=> (= (ControlFlow 0 5) (- 0 4)) (not (and liftDoorOpen@0 moving@0)))))
(let ((inline$ButtonPress$0$anon0_correct  (=> (and (|Select__T@[Int]Bool_| floors i@1) (= (ControlFlow 0 6) 5)) anon11_Then$1_correct)))
(let ((anon16_Then$1_correct  (=> (= (ControlFlow 0 3) (- 0 2)) (not (and false moving@0)))))
(let ((anon10_LoopBody_correct  (and (and (and (and (and (and (and (=> (= (ControlFlow 0 25) 24) inline$CloseFloorDoor$0$anon0_correct) (=> (= (ControlFlow 0 25) 21) inline$OpenFloorDoor$0$anon0_correct)) (=> (= (ControlFlow 0 25) 3) anon16_Then$1_correct)) (=> (= (ControlFlow 0 25) 18) inline$OpenLiftDoor$0$anon0_correct)) (=> (= (ControlFlow 0 25) 15) inline$Stop$0$anon0_correct)) (=> (= (ControlFlow 0 25) 12) inline$MoveDown_Error$0$anon0_correct)) (=> (= (ControlFlow 0 25) 9) inline$MoveUp$0$anon0_correct)) (=> (= (ControlFlow 0 25) 6) inline$ButtonPress$0$anon0_correct))))
(let ((anon10_LoopDone_correct true))
(let ((anon10_LoopHead_correct  (=> (not (and liftDoorOpen@0 moving@0)) (and (=> (= (ControlFlow 0 26) 1) anon10_LoopDone_correct) (=> (= (ControlFlow 0 26) 25) anon10_LoopBody_correct)))))
(let ((anon0$1_correct  (and (=> (= (ControlFlow 0 27) (- 0 28)) (not (and false false))) (=> (not (and false false)) (=> (= (ControlFlow 0 27) 26) anon10_LoopHead_correct)))))
(let ((anon0_correct  (=> (= (ControlFlow 0 29) 27) anon0$1_correct)))
anon0_correct)))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 11) (- 10))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-sort |T@[Int]Bool| 0)
(declare-fun |Select__T@[Int]Bool_| (|T@[Int]Bool| Int) Bool)
(declare-fun EmptySet () |T@[Int]Bool|)
(assert (forall ((o Int) ) (!  (not (|Select__T@[Int]Bool_| EmptySet o))
 :qid |Elevatorbpl.154:15|
 :skolemid |0|
 :pattern ( (|Select__T@[Int]Bool_| EmptySet o))
)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun liftDoorOpen@0 () Bool)
(declare-fun moving@0 () Bool)
(declare-fun DoorsOpen@1 () |T@[Int]Bool|)
(declare-fun |Store__T@[Int]Bool_| (|T@[Int]Bool| Int Bool) |T@[Int]Bool|)
(assert (forall ( ( ?x0 |T@[Int]Bool|) ( ?x1 Int) ( ?x2 Bool)) (! (= (|Select__T@[Int]Bool_| (|Store__T@[Int]Bool_| ?x0 ?x1 ?x2) ?x1)  ?x2) :weight 0)))
(assert (forall ( ( ?x0 |T@[Int]Bool|) ( ?x1 Int) ( ?y1 Int) ( ?x2 Bool)) (! (=>  (not (= ?x1 ?y1)) (= (|Select__T@[Int]Bool_| (|Store__T@[Int]Bool_| ?x0 ?x1 ?x2) ?y1) (|Select__T@[Int]Bool_| ?x0 ?y1))) :weight 0)))
(declare-fun DoorsOpen@0 () |T@[Int]Bool|)
(declare-fun i@3 () Int)
(declare-fun liftLevel@0 () Int)
(declare-fun i@2 () Int)
(declare-fun DoorsOpen@2 () |T@[Int]Bool|)
(declare-fun headingTo@0 () Int)
(declare-fun liftLevel@1 () Int)
(declare-fun liftLevel@2 () Int)
(declare-fun floors () |T@[Int]Bool|)
(declare-fun i@1 () Int)
(set-info :boogie-vc-id Main_Correct)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 29) (let ((anon17_Else$1_correct  (=> (= (ControlFlow 0 23) (- 0 22)) (not (and liftDoorOpen@0 moving@0)))))
(let ((inline$CloseFloorDoor$0$anon0_correct  (=> (and (= DoorsOpen@1 (|Store__T@[Int]Bool_| DoorsOpen@0 i@3 false)) (= (ControlFlow 0 24) 23)) anon17_Else$1_correct)))
(let ((anon17_Then$1_correct  (=> (= (ControlFlow 0 20) (- 0 19)) (not (and liftDoorOpen@0 moving@0)))))
(let ((inline$OpenFloorDoor$0$anon0_correct  (=> (= liftLevel@0 i@2) (=> (and (= DoorsOpen@2 (|Store__T@[Int]Bool_| DoorsOpen@0 i@2 true)) (= (ControlFlow 0 21) 20)) anon17_Then$1_correct))))
(let ((anon15_Then$1_correct  (=> (= (ControlFlow 0 17) (- 0 16)) (not (and true moving@0)))))
(let ((inline$OpenLiftDoor$0$anon0_correct  (=> (and (not moving@0) (= (ControlFlow 0 18) 17)) anon15_Then$1_correct)))
(let ((anon14_Then$1_correct  (=> (= (ControlFlow 0 14) (- 0 13)) (not (and liftDoorOpen@0 false)))))
(let ((inline$Stop$0$anon0_correct  (=> (and (= liftLevel@0 headingTo@0) (= (ControlFlow 0 15) 14)) anon14_Then$1_correct)))
(let ((anon13_Then$1_correct  (=> (= (ControlFlow 0 11) (- 0 10)) (not (and liftDoorOpen@0 true)))))
(let ((inline$MoveDown_Correct$0$anon0_correct  (=> (not liftDoorOpen@0) (=> (and (and (and (> liftLevel@0 headingTo@0) (> headingTo@0 0)) (not (|Select__T@[Int]Bool_| DoorsOpen@0 liftLevel@0))) (and (= liftLevel@1 (- liftLevel@0 1)) (= (ControlFlow 0 12) 11))) anon13_Then$1_correct))))
(let ((anon12_Then$1_correct  (=> (= (ControlFlow 0 8) (- 0 7)) (not (and liftDoorOpen@0 true)))))
(let ((inline$MoveUp$0$anon0_correct  (=> (and (and (and (not liftDoorOpen@0) (< liftLevel@0 headingTo@0)) (not (|Select__T@[Int]Bool_| DoorsOpen@0 liftLevel@0))) (and (= liftLevel@2 (+ liftLevel@0 1)) (= (ControlFlow 0 9) 8))) anon12_Then$1_correct)))
(let ((anon11_Then$1_correct  (=> (= (ControlFlow 0 5) (- 0 4)) (not (and liftDoorOpen@0 moving@0)))))
(let ((inline$ButtonPress$0$anon0_correct  (=> (and (|Select__T@[Int]Bool_| floors i@1) (= (ControlFlow 0 6) 5)) anon11_Then$1_correct)))
(let ((anon16_Then$1_correct  (=> (= (ControlFlow 0 3) (- 0 2)) (not (and false moving@0)))))
(let ((anon10_LoopBody_correct  (and (and (and (and (and (and (and (=> (= (ControlFlow 0 25) 24) inline$CloseFloorDoor$0$anon0_correct) (=> (= (ControlFlow 0 25) 21) inline$OpenFloorDoor$0$anon0_correct)) (=> (= (ControlFlow 0 25) 3) anon16_Then$1_correct)) (=> (= (ControlFlow 0 25) 18) inline$OpenLiftDoor$0$anon0_correct)) (=> (= (ControlFlow 0 25) 15) inline$Stop$0$anon0_correct)) (=> (= (ControlFlow 0 25) 12) inline$MoveDown_Correct$0$anon0_correct)) (=> (= (ControlFlow 0 25) 9) inline$MoveUp$0$anon0_correct)) (=> (= (ControlFlow 0 25) 6) inline$ButtonPress$0$anon0_correct))))
(let ((anon10_LoopDone_correct true))
(let ((anon10_LoopHead_correct  (=> (not (and liftDoorOpen@0 moving@0)) (and (=> (= (ControlFlow 0 26) 1) anon10_LoopDone_correct) (=> (= (ControlFlow 0 26) 25) anon10_LoopBody_correct)))))
(let ((anon0$1_correct  (and (=> (= (ControlFlow 0 27) (- 0 28)) (not (and false false))) (=> (not (and false false)) (=> (= (ControlFlow 0 27) 26) anon10_LoopHead_correct)))))
(let ((anon0_correct  (=> (= (ControlFlow 0 29) 27) anon0$1_correct)))
anon0_correct)))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
