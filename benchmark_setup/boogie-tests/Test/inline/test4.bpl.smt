(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun inline$find$0$found@1 () Bool)
(declare-fun inline$find$0$ret@2 () Int)
(declare-sort |T@[Int]Int| 0)
(declare-fun |Select__T@[Int]Int_| (|T@[Int]Int| Int) Int)
(declare-fun A () |T@[Int]Int|)
(declare-fun x () Int)
(declare-fun inline$check$0$ret@2 () Bool)
(declare-fun size () Int)
(declare-fun inline$find$0$ret@1 () Int)
(set-info :boogie-vc-id main)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let ((anon3_Else_correct true))
(let ((anon3_Then_correct  (=> (and inline$find$0$found@1 (= (ControlFlow 0 3) (- 0 2))) (and (> inline$find$0$ret@2 0) (= (|Select__T@[Int]Int_| A inline$find$0$ret@2) x)))))
(let ((inline$find$0$anon5_Then_correct  (=> inline$check$0$ret@2 (=> (and (= inline$find$0$ret@2 0) (= inline$find$0$found@1 inline$check$0$ret@2)) (and (=> (= (ControlFlow 0 6) 3) anon3_Then_correct) (=> (= (ControlFlow 0 6) 4) anon3_Else_correct))))))
(let ((inline$find$0$anon4_LoopDone_correct  (=> (<= size 0) (=> (and (= inline$find$0$ret@2 inline$find$0$ret@1) (= inline$find$0$found@1 false)) (and (=> (= (ControlFlow 0 5) 3) anon3_Then_correct) (=> (= (ControlFlow 0 5) 4) anon3_Else_correct))))))
(let ((inline$find$0$anon5_Else_correct true))
(let ((inline$check$0$Return_correct  (and (=> (= (ControlFlow 0 7) (- 0 8)) (=> (> (|Select__T@[Int]Int_| A 0) x) (= inline$check$0$ret@2 true))) (=> (=> (> (|Select__T@[Int]Int_| A 0) x) (= inline$check$0$ret@2 true)) (and (=> (= (ControlFlow 0 7) 6) inline$find$0$anon5_Then_correct) (=> (= (ControlFlow 0 7) 1) inline$find$0$anon5_Else_correct))))))
(let ((inline$check$0$anon4_Else_correct  (=> (not (= (|Select__T@[Int]Int_| A 0) x)) (=> (and (= inline$check$0$ret@2 false) (= (ControlFlow 0 10) 7)) inline$check$0$Return_correct))))
(let ((inline$check$0$anon4_Then_correct  (=> (= (|Select__T@[Int]Int_| A 0) x) (=> (and (= inline$check$0$ret@2 true) (= (ControlFlow 0 9) 7)) inline$check$0$Return_correct))))
(let ((inline$check$0$Entry_correct  (and (=> (= (ControlFlow 0 11) (- 0 12)) (>= 0 0)) (=> (>= 0 0) (and (=> (= (ControlFlow 0 11) 9) inline$check$0$anon4_Then_correct) (=> (= (ControlFlow 0 11) 10) inline$check$0$anon4_Else_correct))))))
(let ((inline$find$0$anon4_LoopBody_correct  (=> (and (< 0 size) (= (ControlFlow 0 13) 11)) inline$check$0$Entry_correct)))
(let ((inline$find$0$anon0_correct  (=> (= inline$find$0$ret@1 (- 0 1)) (and (=> (= (ControlFlow 0 14) 5) inline$find$0$anon4_LoopDone_correct) (=> (= (ControlFlow 0 14) 13) inline$find$0$anon4_LoopBody_correct)))))
(let ((anon0_correct  (=> (= (ControlFlow 0 15) 14) inline$find$0$anon0_correct)))
anon0_correct)))))))))))))
))
(check-sat)
(assert (not (= (ControlFlow 0 7) (- 8))))
(check-sat)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
