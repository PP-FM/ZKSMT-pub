(set-logic QF_UFLIA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-sort T@TT 0)
(declare-datatypes ((T@Tree 0)(T@TreeList 0)) (((|leaf`0| ) (|node`2| (|value#node`2| T@TT) (|children#node`2| T@TreeList) ) ) ((|cons`2| (|car#cons`2| T@Tree) (|cdr#cons`2| T@TreeList) ) (|nil`0| ) ) ))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun x () T@TT)
(set-info :boogie-vc-id foo)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let ((anon0_correct  (and (=> (= (ControlFlow 0 2) (- 0 6)) (= (|value#node`2| (|node`2| x |nil`0|)) x)) (=> (= (|value#node`2| (|node`2| x |nil`0|)) x) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= (|children#node`2| (|node`2| x |nil`0|)) |nil`0|)) (=> (= (|children#node`2| (|node`2| x |nil`0|)) |nil`0|) (and (=> (= (ControlFlow 0 2) (- 0 4)) (not (= (|cons`2| |leaf`0| |nil`0|) |nil`0|))) (=> (not (= (|cons`2| |leaf`0| |nil`0|) |nil`0|)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (|is-nil`0| |nil`0|)) (=> (|is-nil`0| |nil`0|) (=> (= (ControlFlow 0 2) (- 0 1)) (|is-node`2| |leaf`0|))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 7) 2) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
