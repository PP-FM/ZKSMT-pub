(set-logic UFLIRA)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@55 () T@U)
(declare-fun $generated@@56 () T@U)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@58 () T@U)
(declare-fun $generated@@59 () T@U)
(declare-fun $generated@@60 () T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@67 (T@U) T@U)
(declare-fun $generated@@69 (T@U T@U T@U) Bool)
(declare-fun $generated@@70 (Int) T@U)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@76 (T@U T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@U T@U) T@U)
(declare-fun $generated@@79 (T@U T@U T@U) T@U)
(declare-fun $generated@@127 (T@U T@U T@U) T@U)
(declare-fun $generated@@128 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@129 (T@T T@T) T@T)
(declare-fun $generated@@130 (T@T) T@T)
(declare-fun $generated@@131 (T@T) T@T)
(declare-fun $generated@@132 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@183 () Int)
(declare-fun $generated@@184 (Int) Bool)
(declare-fun $generated@@185 (Int) Bool)
(declare-fun $generated@@187 (T@T) T@U)
(declare-fun $generated@@188 (T@U) Int)
(declare-fun $generated@@189 (T@T) T@T)
(declare-fun $generated@@190 (T@T) T@T)
(declare-fun $generated@@195 (T@U) T@U)
(declare-fun $generated@@196 (T@T T@T) T@U)
(declare-fun $generated@@197 (T@T T@T) T@T)
(declare-fun $generated@@198 (T@T) T@T)
(declare-fun $generated@@199 (T@T) T@T)
(declare-fun $generated@@213 (T@U) T@U)
(declare-fun $generated@@214 (T@T T@T) T@U)
(declare-fun $generated@@215 (T@T T@T) T@T)
(declare-fun $generated@@216 (T@T) T@T)
(declare-fun $generated@@217 (T@T) T@T)
(declare-fun $generated@@239 (T@U) T@U)
(declare-fun $generated@@240 () T@T)
(declare-fun $generated@@241 (T@U T@U T@U) Bool)
(declare-fun $generated@@247 (T@U) T@U)
(declare-fun $generated@@253 (T@U T@U) T@U)
(declare-fun $generated@@254 (T@U) T@U)
(declare-fun $generated@@265 (T@U T@U) T@U)
(declare-fun $generated@@266 (T@U) T@U)
(declare-fun $generated@@277 (T@T) T@U)
(declare-fun $generated@@284 (T@U) T@U)
(declare-fun $generated@@288 (T@U) T@U)
(declare-fun $generated@@294 (T@U) T@U)
(declare-fun $generated@@298 (T@U) T@U)
(declare-fun $generated@@304 (T@U) T@U)
(declare-fun $generated@@305 (T@U Int) T@U)
(declare-fun $generated@@314 (T@U) Int)
(declare-fun $generated@@316 (T@U) T@U)
(declare-fun $generated@@320 (T@U) T@U)
(declare-fun $generated@@324 (T@U) T@U)
(declare-fun $generated@@325 (T@U) T@U)
(declare-fun $generated@@330 (T@U) T@U)
(declare-fun $generated@@348 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@61) 6) (= (type $generated@@44) $generated@@61)) (= (type $generated@@45) $generated@@61)) (= (type $generated@@46) $generated@@61)) (= (type $generated@@47) $generated@@61)) (= (type $generated@@48) $generated@@61)) (= ($generated@@1 $generated@@62) 7)) (= (type $generated@@49) $generated@@62)) (= (type $generated@@50) $generated@@62)) (= (type $generated@@51) $generated@@62)) (= (type $generated@@52) $generated@@62)) (= (type $generated@@53) $generated@@62)) (= (type $generated@@54) $generated@@62)) (= (type $generated@@55) $generated@@62)) (= (type $generated@@56) $generated@@62)) (= (type $generated@@57) $generated@@62)) (= (type $generated@@58) $generated@@62)) (= (type $generated@@59) $generated@@62)) (forall (($generated@@65 T@T) ) (= ($generated@@1 ($generated@@63 $generated@@65)) 8))) (forall (($generated@@66 T@T) ) (! (= ($generated@@64 ($generated@@63 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@63 $generated@@66))
))) (= (type $generated@@60) ($generated@@63 $generated@@4))))
(assert (distinct $generated@@44 $generated@@45 $generated@@46 $generated@@47 $generated@@48 $generated@@49 $generated@@50 $generated@@51 $generated@@52 $generated@@53 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60)
)
(assert (forall (($generated@@68 T@U) ) (! (= (type ($generated@@67 $generated@@68)) $generated@@62)
 :pattern ( ($generated@@67 $generated@@68))
)))
(assert (= ($generated@@67 $generated@@44) $generated@@49))
(assert (= ($generated@@67 $generated@@45) $generated@@50))
(assert (= ($generated@@67 $generated@@46) $generated@@51))
(assert (= ($generated@@67 $generated@@47) $generated@@52))
(assert (= ($generated@@67 $generated@@48) $generated@@53))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ) (= ($generated@@1 ($generated@@71 $generated@@80 $generated@@81)) 9)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@82 $generated@@83)) $generated@@82)
 :pattern ( ($generated@@71 $generated@@82 $generated@@83))
))) (forall (($generated@@84 T@T) ($generated@@85 T@T) ) (! (= ($generated@@75 ($generated@@71 $generated@@84 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@71 $generated@@84 $generated@@85))
))) (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (let (($generated@@88 ($generated@@75 (type $generated@@86))))
(= (type ($generated@@76 $generated@@86 $generated@@87)) $generated@@88))
 :pattern ( ($generated@@76 $generated@@86 $generated@@87))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (let (($generated@@92 (type $generated@@91)))
(let (($generated@@93 (type $generated@@90)))
(= (type ($generated@@77 $generated@@89 $generated@@90 $generated@@91)) ($generated@@71 $generated@@93 $generated@@92))))
 :pattern ( ($generated@@77 $generated@@89 $generated@@90 $generated@@91))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (let (($generated@@97 ($generated@@75 (type $generated@@94))))
 (=> (= (type $generated@@96) $generated@@97) (= ($generated@@76 ($generated@@77 $generated@@94 $generated@@95 $generated@@96) $generated@@95) $generated@@96)))
 :weight 0
))) (and (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@100 $generated@@101) (= ($generated@@76 ($generated@@77 $generated@@99 $generated@@100 $generated@@98) $generated@@101) ($generated@@76 $generated@@99 $generated@@101)))
 :weight 0
)) (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or true (= ($generated@@76 ($generated@@77 $generated@@103 $generated@@104 $generated@@102) $generated@@105) ($generated@@76 $generated@@103 $generated@@105)))
 :weight 0
)))) (= ($generated@@1 $generated@@72) 10)) (forall (($generated@@106 T@U) ($generated@@107 T@U) ) (! (let (($generated@@108 ($generated@@64 (type $generated@@107))))
(= (type ($generated@@78 $generated@@106 $generated@@107)) $generated@@108))
 :pattern ( ($generated@@78 $generated@@106 $generated@@107))
))) (= ($generated@@1 $generated@@73) 11)) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= (type ($generated@@79 $generated@@109 $generated@@110 $generated@@111)) $generated@@73)
 :pattern ( ($generated@@79 $generated@@109 $generated@@110 $generated@@111))
))) (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (let (($generated@@115 ($generated@@64 (type $generated@@113))))
 (=> (= (type $generated@@114) $generated@@115) (= ($generated@@78 ($generated@@79 $generated@@112 $generated@@113 $generated@@114) $generated@@113) $generated@@114)))
 :weight 0
))) (and (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@118 $generated@@119) (= ($generated@@78 ($generated@@79 $generated@@117 $generated@@118 $generated@@116) $generated@@119) ($generated@@78 $generated@@117 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or true (= ($generated@@78 ($generated@@79 $generated@@121 $generated@@122 $generated@@120) $generated@@123) ($generated@@78 $generated@@121 $generated@@123)))
 :weight 0
)))) (forall (($generated@@124 Int) ) (! (= (type ($generated@@70 $generated@@124)) $generated@@61)
 :pattern ( ($generated@@70 $generated@@124))
))))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> (and (= (type $generated@@125) $generated@@2) (= (type $generated@@126) ($generated@@71 $generated@@72 $generated@@73))) ($generated@@69 $generated@@125 ($generated@@70 0) $generated@@126))
 :pattern ( ($generated@@69 $generated@@125 ($generated@@70 0) $generated@@126))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@133 T@T) ($generated@@134 T@T) ) (= ($generated@@1 ($generated@@129 $generated@@133 $generated@@134)) 12)) (forall (($generated@@135 T@T) ($generated@@136 T@T) ) (! (= ($generated@@130 ($generated@@129 $generated@@135 $generated@@136)) $generated@@135)
 :pattern ( ($generated@@129 $generated@@135 $generated@@136))
))) (forall (($generated@@137 T@T) ($generated@@138 T@T) ) (! (= ($generated@@131 ($generated@@129 $generated@@137 $generated@@138)) $generated@@138)
 :pattern ( ($generated@@129 $generated@@137 $generated@@138))
))) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (! (let (($generated@@142 ($generated@@131 (type $generated@@139))))
(= (type ($generated@@127 $generated@@139 $generated@@140 $generated@@141)) $generated@@142))
 :pattern ( ($generated@@127 $generated@@139 $generated@@140 $generated@@141))
))) (forall (($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ) (! (let (($generated@@147 (type $generated@@146)))
(let (($generated@@148 (type $generated@@144)))
(= (type ($generated@@132 $generated@@143 $generated@@144 $generated@@145 $generated@@146)) ($generated@@129 $generated@@148 $generated@@147))))
 :pattern ( ($generated@@132 $generated@@143 $generated@@144 $generated@@145 $generated@@146))
))) (forall (($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ) (! (let (($generated@@153 ($generated@@131 (type $generated@@149))))
 (=> (= (type $generated@@152) $generated@@153) (= ($generated@@127 ($generated@@132 $generated@@149 $generated@@150 $generated@@151 $generated@@152) $generated@@150 $generated@@151) $generated@@152)))
 :weight 0
))) (and (and (forall (($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ) (!  (or (= $generated@@156 $generated@@158) (= ($generated@@127 ($generated@@132 $generated@@155 $generated@@156 $generated@@157 $generated@@154) $generated@@158 $generated@@159) ($generated@@127 $generated@@155 $generated@@158 $generated@@159)))
 :weight 0
)) (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ) (!  (or (= $generated@@163 $generated@@165) (= ($generated@@127 ($generated@@132 $generated@@161 $generated@@162 $generated@@163 $generated@@160) $generated@@164 $generated@@165) ($generated@@127 $generated@@161 $generated@@164 $generated@@165)))
 :weight 0
))) (forall (($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 T@U) ) (!  (or true (= ($generated@@127 ($generated@@132 $generated@@167 $generated@@168 $generated@@169 $generated@@166) $generated@@170 $generated@@171) ($generated@@127 $generated@@167 $generated@@170 $generated@@171)))
 :weight 0
)))) (forall (($generated@@172 T@U) ($generated@@173 T@U) ($generated@@174 T@U) ($generated@@175 Bool) ) (! (= (type ($generated@@128 $generated@@172 $generated@@173 $generated@@174 $generated@@175)) ($generated@@129 $generated@@72 $generated@@4))
 :pattern ( ($generated@@128 $generated@@172 $generated@@173 $generated@@174 $generated@@175))
))))
(assert (forall (($generated@@176 T@U) ($generated@@177 T@U) ($generated@@178 T@U) ($generated@@179 Bool) ($generated@@180 T@U) ($generated@@181 T@U) ) (! (let (($generated@@182 ($generated@@64 (type $generated@@181))))
 (=> (and (and (and (and (= (type $generated@@176) $generated@@72) (= (type $generated@@177) ($generated@@71 $generated@@72 $generated@@73))) (= (type $generated@@178) ($generated@@63 $generated@@4))) (= (type $generated@@180) $generated@@72)) (= (type $generated@@181) ($generated@@63 $generated@@182))) (= ($generated@@0 ($generated@@127 ($generated@@128 $generated@@176 $generated@@177 $generated@@178 $generated@@179) $generated@@180 $generated@@181))  (=> (and (not (= $generated@@180 $generated@@176)) ($generated@@0 ($generated@@78 ($generated@@76 $generated@@177 $generated@@180) $generated@@178))) $generated@@179))))
 :pattern ( ($generated@@127 ($generated@@128 $generated@@176 $generated@@177 $generated@@178 $generated@@179) $generated@@180 $generated@@181))
)))
(assert  (=> (<= 0 $generated@@183) (forall (($generated@@186 Int) ) (!  (=> (or ($generated@@185 $generated@@186) (not (= 0 $generated@@183))) true)
 :pattern ( ($generated@@184 $generated@@186))
))))
(assert  (and (and (forall (($generated@@191 T@T) ) (= ($generated@@1 ($generated@@189 $generated@@191)) 13)) (forall (($generated@@192 T@T) ) (! (= ($generated@@190 ($generated@@189 $generated@@192)) $generated@@192)
 :pattern ( ($generated@@189 $generated@@192))
))) (forall (($generated@@193 T@T) ) (! (= (type ($generated@@187 $generated@@193)) ($generated@@189 $generated@@193))
 :pattern ( ($generated@@187 $generated@@193))
))))
(assert (forall (($generated@@194 T@T) ) (! (= ($generated@@188 ($generated@@187 $generated@@194)) 0)
 :pattern ( ($generated@@187 $generated@@194))
)))
(assert  (and (and (and (and (forall (($generated@@200 T@T) ($generated@@201 T@T) ) (= ($generated@@1 ($generated@@197 $generated@@200 $generated@@201)) 14)) (forall (($generated@@202 T@T) ($generated@@203 T@T) ) (! (= ($generated@@198 ($generated@@197 $generated@@202 $generated@@203)) $generated@@202)
 :pattern ( ($generated@@197 $generated@@202 $generated@@203))
))) (forall (($generated@@204 T@T) ($generated@@205 T@T) ) (! (= ($generated@@199 ($generated@@197 $generated@@204 $generated@@205)) $generated@@205)
 :pattern ( ($generated@@197 $generated@@204 $generated@@205))
))) (forall (($generated@@206 T@U) ) (! (let (($generated@@207 ($generated@@198 (type $generated@@206))))
(= (type ($generated@@195 $generated@@206)) ($generated@@71 $generated@@207 $generated@@4)))
 :pattern ( ($generated@@195 $generated@@206))
))) (forall (($generated@@208 T@T) ($generated@@209 T@T) ) (! (= (type ($generated@@196 $generated@@208 $generated@@209)) ($generated@@197 $generated@@208 $generated@@209))
 :pattern ( ($generated@@196 $generated@@208 $generated@@209))
))))
(assert (forall (($generated@@210 T@U) ($generated@@211 T@T) ) (! (let (($generated@@212 (type $generated@@210)))
 (not ($generated@@0 ($generated@@76 ($generated@@195 ($generated@@196 $generated@@212 $generated@@211)) $generated@@210))))
 :pattern ( (let (($generated@@212 (type $generated@@210)))
($generated@@76 ($generated@@195 ($generated@@196 $generated@@212 $generated@@211)) $generated@@210)))
)))
(assert  (and (and (and (and (forall (($generated@@218 T@T) ($generated@@219 T@T) ) (= ($generated@@1 ($generated@@215 $generated@@218 $generated@@219)) 15)) (forall (($generated@@220 T@T) ($generated@@221 T@T) ) (! (= ($generated@@216 ($generated@@215 $generated@@220 $generated@@221)) $generated@@220)
 :pattern ( ($generated@@215 $generated@@220 $generated@@221))
))) (forall (($generated@@222 T@T) ($generated@@223 T@T) ) (! (= ($generated@@217 ($generated@@215 $generated@@222 $generated@@223)) $generated@@223)
 :pattern ( ($generated@@215 $generated@@222 $generated@@223))
))) (forall (($generated@@224 T@U) ) (! (let (($generated@@225 ($generated@@216 (type $generated@@224))))
(= (type ($generated@@213 $generated@@224)) ($generated@@71 $generated@@225 $generated@@4)))
 :pattern ( ($generated@@213 $generated@@224))
))) (forall (($generated@@226 T@T) ($generated@@227 T@T) ) (! (= (type ($generated@@214 $generated@@226 $generated@@227)) ($generated@@215 $generated@@226 $generated@@227))
 :pattern ( ($generated@@214 $generated@@226 $generated@@227))
))))
(assert (forall (($generated@@228 T@U) ($generated@@229 T@T) ) (! (let (($generated@@230 (type $generated@@228)))
 (not ($generated@@0 ($generated@@76 ($generated@@213 ($generated@@214 $generated@@230 $generated@@229)) $generated@@228))))
 :pattern ( (let (($generated@@230 (type $generated@@228)))
($generated@@76 ($generated@@213 ($generated@@214 $generated@@230 $generated@@229)) $generated@@228)))
)))
(assert (forall (($generated@@231 T@U) ) (! (let (($generated@@232 ($generated@@199 (type $generated@@231))))
(let (($generated@@233 ($generated@@198 (type $generated@@231))))
 (=> (= (type $generated@@231) ($generated@@197 $generated@@233 $generated@@232)) (or (= $generated@@231 ($generated@@196 $generated@@233 $generated@@232)) (exists (($generated@@234 T@U) ) (!  (and (= (type $generated@@234) $generated@@233) ($generated@@0 ($generated@@76 ($generated@@195 $generated@@231) $generated@@234)))
 :no-pattern (type $generated@@234)
 :no-pattern ($generated $generated@@234)
 :no-pattern ($generated@@0 $generated@@234)
))))))
 :pattern ( ($generated@@195 $generated@@231))
)))
(assert (forall (($generated@@235 T@U) ) (! (let (($generated@@236 ($generated@@217 (type $generated@@235))))
(let (($generated@@237 ($generated@@216 (type $generated@@235))))
 (=> (= (type $generated@@235) ($generated@@215 $generated@@237 $generated@@236)) (or (= $generated@@235 ($generated@@214 $generated@@237 $generated@@236)) (exists (($generated@@238 T@U) ) (!  (and (= (type $generated@@238) $generated@@237) ($generated@@0 ($generated@@76 ($generated@@213 $generated@@235) $generated@@238)))
 :no-pattern (type $generated@@238)
 :no-pattern ($generated $generated@@238)
 :no-pattern ($generated@@0 $generated@@238)
))))))
 :pattern ( ($generated@@213 $generated@@235))
)))
(assert  (and (= ($generated@@1 $generated@@240) 16) (forall (($generated@@242 T@U) ) (! (= (type ($generated@@239 $generated@@242)) $generated@@61)
 :pattern ( ($generated@@239 $generated@@242))
))))
(assert (forall (($generated@@243 T@U) ($generated@@244 T@U) ($generated@@245 T@U) ) (!  (=> (and (and (= (type $generated@@243) ($generated@@71 $generated@@240 $generated@@4)) (= (type $generated@@244) $generated@@61)) (= (type $generated@@245) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@243 ($generated@@239 $generated@@244) $generated@@245) (forall (($generated@@246 T@U) ) (!  (=> (and (= (type $generated@@246) $generated@@240) ($generated@@0 ($generated@@76 $generated@@243 $generated@@246))) ($generated@@241 $generated@@246 $generated@@244 $generated@@245))
 :pattern ( ($generated@@76 $generated@@243 $generated@@246))
))))
 :pattern ( ($generated@@69 $generated@@243 ($generated@@239 $generated@@244) $generated@@245))
)))
(assert (forall (($generated@@248 T@U) ) (! (= (type ($generated@@247 $generated@@248)) $generated@@61)
 :pattern ( ($generated@@247 $generated@@248))
)))
(assert (forall (($generated@@249 T@U) ($generated@@250 T@U) ($generated@@251 T@U) ) (!  (=> (and (and (= (type $generated@@249) ($generated@@71 $generated@@240 $generated@@4)) (= (type $generated@@250) $generated@@61)) (= (type $generated@@251) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@249 ($generated@@247 $generated@@250) $generated@@251) (forall (($generated@@252 T@U) ) (!  (=> (and (= (type $generated@@252) $generated@@240) ($generated@@0 ($generated@@76 $generated@@249 $generated@@252))) ($generated@@241 $generated@@252 $generated@@250 $generated@@251))
 :pattern ( ($generated@@76 $generated@@249 $generated@@252))
))))
 :pattern ( ($generated@@69 $generated@@249 ($generated@@247 $generated@@250) $generated@@251))
)))
(assert  (and (forall (($generated@@255 T@U) ($generated@@256 T@U) ) (! (= (type ($generated@@253 $generated@@255 $generated@@256)) $generated@@61)
 :pattern ( ($generated@@253 $generated@@255 $generated@@256))
)) (forall (($generated@@257 T@U) ) (! (let (($generated@@258 ($generated@@199 (type $generated@@257))))
(let (($generated@@259 ($generated@@198 (type $generated@@257))))
(= (type ($generated@@254 $generated@@257)) ($generated@@71 $generated@@259 $generated@@258))))
 :pattern ( ($generated@@254 $generated@@257))
))))
(assert (forall (($generated@@260 T@U) ($generated@@261 T@U) ($generated@@262 T@U) ($generated@@263 T@U) ) (!  (=> (and (and (and (= (type $generated@@260) ($generated@@197 $generated@@240 $generated@@240)) (= (type $generated@@261) $generated@@61)) (= (type $generated@@262) $generated@@61)) (= (type $generated@@263) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@260 ($generated@@253 $generated@@261 $generated@@262) $generated@@263) (forall (($generated@@264 T@U) ) (!  (=> (and (= (type $generated@@264) $generated@@240) ($generated@@0 ($generated@@76 ($generated@@195 $generated@@260) $generated@@264))) (and ($generated@@241 ($generated@@76 ($generated@@254 $generated@@260) $generated@@264) $generated@@262 $generated@@263) ($generated@@241 $generated@@264 $generated@@261 $generated@@263)))
 :pattern ( ($generated@@76 ($generated@@254 $generated@@260) $generated@@264))
 :pattern ( ($generated@@76 ($generated@@195 $generated@@260) $generated@@264))
))))
 :pattern ( ($generated@@69 $generated@@260 ($generated@@253 $generated@@261 $generated@@262) $generated@@263))
)))
(assert  (and (forall (($generated@@267 T@U) ($generated@@268 T@U) ) (! (= (type ($generated@@265 $generated@@267 $generated@@268)) $generated@@61)
 :pattern ( ($generated@@265 $generated@@267 $generated@@268))
)) (forall (($generated@@269 T@U) ) (! (let (($generated@@270 ($generated@@217 (type $generated@@269))))
(let (($generated@@271 ($generated@@216 (type $generated@@269))))
(= (type ($generated@@266 $generated@@269)) ($generated@@71 $generated@@271 $generated@@270))))
 :pattern ( ($generated@@266 $generated@@269))
))))
(assert (forall (($generated@@272 T@U) ($generated@@273 T@U) ($generated@@274 T@U) ($generated@@275 T@U) ) (!  (=> (and (and (and (= (type $generated@@272) ($generated@@215 $generated@@240 $generated@@240)) (= (type $generated@@273) $generated@@61)) (= (type $generated@@274) $generated@@61)) (= (type $generated@@275) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@272 ($generated@@265 $generated@@273 $generated@@274) $generated@@275) (forall (($generated@@276 T@U) ) (!  (=> (and (= (type $generated@@276) $generated@@240) ($generated@@0 ($generated@@76 ($generated@@213 $generated@@272) $generated@@276))) (and ($generated@@241 ($generated@@76 ($generated@@266 $generated@@272) $generated@@276) $generated@@274 $generated@@275) ($generated@@241 $generated@@276 $generated@@273 $generated@@275)))
 :pattern ( ($generated@@76 ($generated@@266 $generated@@272) $generated@@276))
 :pattern ( ($generated@@76 ($generated@@213 $generated@@272) $generated@@276))
))))
 :pattern ( ($generated@@69 $generated@@272 ($generated@@265 $generated@@273 $generated@@274) $generated@@275))
)))
(assert (forall (($generated@@278 T@T) ) (! (= (type ($generated@@277 $generated@@278)) ($generated@@71 $generated@@278 $generated@@4))
 :pattern ( ($generated@@277 $generated@@278))
)))
(assert (forall (($generated@@279 T@U) ) (! (let (($generated@@280 ($generated@@217 (type $generated@@279))))
(let (($generated@@281 ($generated@@216 (type $generated@@279))))
 (=> (= (type $generated@@279) ($generated@@215 $generated@@281 $generated@@280)) (= (= $generated@@279 ($generated@@214 $generated@@281 $generated@@280)) (= ($generated@@213 $generated@@279) ($generated@@277 $generated@@281))))))
 :pattern ( ($generated@@213 $generated@@279))
)))
(assert (forall (($generated@@282 T@U) ) (! (let (($generated@@283 ($generated@@190 (type $generated@@282))))
 (=> (= (type $generated@@282) ($generated@@189 $generated@@283)) (<= 0 ($generated@@188 $generated@@282))))
 :pattern ( ($generated@@188 $generated@@282))
)))
(assert (forall (($generated@@285 T@U) ) (! (= (type ($generated@@284 $generated@@285)) $generated@@61)
 :pattern ( ($generated@@284 $generated@@285))
)))
(assert (forall (($generated@@286 T@U) ($generated@@287 T@U) ) (!  (=> (and (= (type $generated@@286) $generated@@61) (= (type $generated@@287) $generated@@61)) (= ($generated@@284 ($generated@@253 $generated@@286 $generated@@287)) $generated@@286))
 :pattern ( ($generated@@253 $generated@@286 $generated@@287))
)))
(assert (forall (($generated@@289 T@U) ) (! (= (type ($generated@@288 $generated@@289)) $generated@@61)
 :pattern ( ($generated@@288 $generated@@289))
)))
(assert (forall (($generated@@290 T@U) ($generated@@291 T@U) ) (!  (=> (and (= (type $generated@@290) $generated@@61) (= (type $generated@@291) $generated@@61)) (= ($generated@@288 ($generated@@253 $generated@@290 $generated@@291)) $generated@@291))
 :pattern ( ($generated@@253 $generated@@290 $generated@@291))
)))
(assert (forall (($generated@@292 T@U) ($generated@@293 T@U) ) (!  (=> (and (= (type $generated@@292) $generated@@61) (= (type $generated@@293) $generated@@61)) (= ($generated@@67 ($generated@@253 $generated@@292 $generated@@293)) $generated@@58))
 :pattern ( ($generated@@253 $generated@@292 $generated@@293))
)))
(assert (forall (($generated@@295 T@U) ) (! (= (type ($generated@@294 $generated@@295)) $generated@@61)
 :pattern ( ($generated@@294 $generated@@295))
)))
(assert (forall (($generated@@296 T@U) ($generated@@297 T@U) ) (!  (=> (and (= (type $generated@@296) $generated@@61) (= (type $generated@@297) $generated@@61)) (= ($generated@@294 ($generated@@265 $generated@@296 $generated@@297)) $generated@@296))
 :pattern ( ($generated@@265 $generated@@296 $generated@@297))
)))
(assert (forall (($generated@@299 T@U) ) (! (= (type ($generated@@298 $generated@@299)) $generated@@61)
 :pattern ( ($generated@@298 $generated@@299))
)))
(assert (forall (($generated@@300 T@U) ($generated@@301 T@U) ) (!  (=> (and (= (type $generated@@300) $generated@@61) (= (type $generated@@301) $generated@@61)) (= ($generated@@298 ($generated@@265 $generated@@300 $generated@@301)) $generated@@301))
 :pattern ( ($generated@@265 $generated@@300 $generated@@301))
)))
(assert (forall (($generated@@302 T@U) ($generated@@303 T@U) ) (!  (=> (and (= (type $generated@@302) $generated@@61) (= (type $generated@@303) $generated@@61)) (= ($generated@@67 ($generated@@265 $generated@@302 $generated@@303)) $generated@@59))
 :pattern ( ($generated@@265 $generated@@302 $generated@@303))
)))
(assert  (and (forall (($generated@@306 T@U) ) (! (= (type ($generated@@304 $generated@@306)) $generated@@61)
 :pattern ( ($generated@@304 $generated@@306))
)) (forall (($generated@@307 T@U) ($generated@@308 Int) ) (! (let (($generated@@309 ($generated@@190 (type $generated@@307))))
(= (type ($generated@@305 $generated@@307 $generated@@308)) $generated@@309))
 :pattern ( ($generated@@305 $generated@@307 $generated@@308))
))))
(assert (forall (($generated@@310 T@U) ($generated@@311 T@U) ($generated@@312 T@U) ) (!  (=> (and (and (= (type $generated@@310) ($generated@@189 $generated@@240)) (= (type $generated@@311) $generated@@61)) (= (type $generated@@312) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@310 ($generated@@304 $generated@@311) $generated@@312) (forall (($generated@@313 Int) ) (!  (=> (and (<= 0 $generated@@313) (< $generated@@313 ($generated@@188 $generated@@310))) ($generated@@241 ($generated@@305 $generated@@310 $generated@@313) $generated@@311 $generated@@312))
 :pattern ( ($generated@@305 $generated@@310 $generated@@313))
))))
 :pattern ( ($generated@@69 $generated@@310 ($generated@@304 $generated@@311) $generated@@312))
)))
(assert (forall (($generated@@315 Int) ) (! (= ($generated@@314 ($generated@@70 $generated@@315)) $generated@@315)
 :pattern ( ($generated@@70 $generated@@315))
)))
(assert (forall (($generated@@317 T@U) ) (! (= (type ($generated@@316 $generated@@317)) $generated@@61)
 :pattern ( ($generated@@316 $generated@@317))
)))
(assert (forall (($generated@@318 T@U) ) (!  (=> (= (type $generated@@318) $generated@@61) (= ($generated@@316 ($generated@@239 $generated@@318)) $generated@@318))
 :pattern ( ($generated@@239 $generated@@318))
)))
(assert (forall (($generated@@319 T@U) ) (!  (=> (= (type $generated@@319) $generated@@61) (= ($generated@@67 ($generated@@239 $generated@@319)) $generated@@54))
 :pattern ( ($generated@@239 $generated@@319))
)))
(assert (forall (($generated@@321 T@U) ) (! (= (type ($generated@@320 $generated@@321)) $generated@@61)
 :pattern ( ($generated@@320 $generated@@321))
)))
(assert (forall (($generated@@322 T@U) ) (!  (=> (= (type $generated@@322) $generated@@61) (= ($generated@@320 ($generated@@247 $generated@@322)) $generated@@322))
 :pattern ( ($generated@@247 $generated@@322))
)))
(assert (forall (($generated@@323 T@U) ) (!  (=> (= (type $generated@@323) $generated@@61) (= ($generated@@67 ($generated@@247 $generated@@323)) $generated@@55))
 :pattern ( ($generated@@247 $generated@@323))
)))
(assert  (and (forall (($generated@@326 T@U) ) (! (= (type ($generated@@324 $generated@@326)) $generated@@61)
 :pattern ( ($generated@@324 $generated@@326))
)) (forall (($generated@@327 T@U) ) (! (= (type ($generated@@325 $generated@@327)) $generated@@61)
 :pattern ( ($generated@@325 $generated@@327))
))))
(assert (forall (($generated@@328 T@U) ) (!  (=> (= (type $generated@@328) $generated@@61) (= ($generated@@325 ($generated@@324 $generated@@328)) $generated@@328))
 :pattern ( ($generated@@324 $generated@@328))
)))
(assert (forall (($generated@@329 T@U) ) (!  (=> (= (type $generated@@329) $generated@@61) (= ($generated@@67 ($generated@@324 $generated@@329)) $generated@@56))
 :pattern ( ($generated@@324 $generated@@329))
)))
(assert (forall (($generated@@331 T@U) ) (! (= (type ($generated@@330 $generated@@331)) $generated@@61)
 :pattern ( ($generated@@330 $generated@@331))
)))
(assert (forall (($generated@@332 T@U) ) (!  (=> (= (type $generated@@332) $generated@@61) (= ($generated@@330 ($generated@@304 $generated@@332)) $generated@@332))
 :pattern ( ($generated@@304 $generated@@332))
)))
(assert (forall (($generated@@333 T@U) ) (!  (=> (= (type $generated@@333) $generated@@61) (= ($generated@@67 ($generated@@304 $generated@@333)) $generated@@57))
 :pattern ( ($generated@@304 $generated@@333))
)))
(assert (forall (($generated@@334 T@U) ) (! (let (($generated@@335 (type $generated@@334)))
 (not ($generated@@0 ($generated@@76 ($generated@@277 $generated@@335) $generated@@334))))
 :pattern ( (let (($generated@@335 (type $generated@@334)))
($generated@@76 ($generated@@277 $generated@@335) $generated@@334)))
)))
(assert (forall (($generated@@336 T@U) ($generated@@337 T@U) ($generated@@338 T@U) ) (!  (=> (and (and (= (type $generated@@336) ($generated@@71 $generated@@240 $generated@@2)) (= (type $generated@@337) $generated@@61)) (= (type $generated@@338) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@336 ($generated@@324 $generated@@337) $generated@@338) (forall (($generated@@339 T@U) ) (!  (=> (and (= (type $generated@@339) $generated@@240) (< 0 ($generated ($generated@@76 $generated@@336 $generated@@339)))) ($generated@@241 $generated@@339 $generated@@337 $generated@@338))
 :pattern ( ($generated@@76 $generated@@336 $generated@@339))
))))
 :pattern ( ($generated@@69 $generated@@336 ($generated@@324 $generated@@337) $generated@@338))
)))
(assert (forall (($generated@@340 T@U) ) (! (let (($generated@@341 ($generated@@190 (type $generated@@340))))
 (=> (and (= (type $generated@@340) ($generated@@189 $generated@@341)) (= ($generated@@188 $generated@@340) 0)) (= $generated@@340 ($generated@@187 $generated@@341))))
 :pattern ( ($generated@@188 $generated@@340))
)))
(assert (forall (($generated@@342 T@U) ($generated@@343 T@U) ) (!  (=> (and (= (type $generated@@342) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@343) $generated@@2)) ($generated@@69 $generated@@343 $generated@@46 $generated@@342))
 :pattern ( ($generated@@69 $generated@@343 $generated@@46 $generated@@342))
)))
(assert (forall (($generated@@344 T@U) ($generated@@345 T@U) ) (!  (=> (and (= (type $generated@@344) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@345) $generated@@3)) ($generated@@69 $generated@@345 $generated@@47 $generated@@344))
 :pattern ( ($generated@@69 $generated@@345 $generated@@47 $generated@@344))
)))
(assert (forall (($generated@@346 T@U) ($generated@@347 T@U) ) (!  (=> (and (= (type $generated@@346) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@347) $generated@@4)) ($generated@@69 $generated@@347 $generated@@44 $generated@@346))
 :pattern ( ($generated@@69 $generated@@347 $generated@@44 $generated@@346))
)))
(assert (= ($generated@@1 $generated@@348) 17))
(assert (forall (($generated@@349 T@U) ($generated@@350 T@U) ) (!  (=> (and (= (type $generated@@349) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@350) $generated@@348)) ($generated@@69 $generated@@350 $generated@@45 $generated@@349))
 :pattern ( ($generated@@69 $generated@@350 $generated@@45 $generated@@349))
)))
(assert (forall (($generated@@351 T@U) ($generated@@352 T@U) ) (!  (=> (and (= (type $generated@@351) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@352) $generated@@240)) ($generated@@69 $generated@@352 $generated@@48 $generated@@351))
 :pattern ( ($generated@@69 $generated@@352 $generated@@48 $generated@@351))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@353 () Int)
(declare-fun $generated@@354 () T@U)
(declare-fun $generated@@355 () Int)
(declare-fun $generated@@356 () T@U)
(declare-fun $generated@@357 () T@U)
(declare-fun $generated@@358 (T@U) Bool)
(declare-fun $generated@@359 (T@U) Bool)
(assert  (and (and (= (type $generated@@354) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@356) ($generated@@129 $generated@@72 $generated@@4))) (= (type $generated@@357) $generated@@72)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@360 true))
(let (($generated@@361  (=> ($generated@@69 ($generated@@8 $generated@@353) $generated@@46 $generated@@354) (=> (and ($generated@@185 $generated@@353) (forall (($generated@@362 Int) ) (! ($generated@@185 $generated@@362)
 :pattern ( ($generated@@184 $generated@@362))
))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (forall (($generated@@363 Int) ) (!  (=> true ($generated@@184 $generated@@363))
 :pattern ( ($generated@@184 $generated@@363))
))) (=> (forall (($generated@@364 Int) ) (!  (=> true ($generated@@184 $generated@@364))
 :pattern ( ($generated@@184 $generated@@364))
)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (not (= $generated@@355 1))) (=> (not (= $generated@@355 1)) (=> (= (ControlFlow 0 2) (- 0 1)) false)))))))))
(let (($generated@@365  (=> (= $generated@@356 ($generated@@128 $generated@@357 $generated@@354 $generated@@60 false)) (and (=> (= (ControlFlow 0 6) 2) $generated@@361) (=> (= (ControlFlow 0 6) 5) $generated@@360)))))
(let (($generated@@366  (=> (and (and (and ($generated@@358 $generated@@354) ($generated@@359 $generated@@354)) (= 1 $generated@@183)) (and (> $generated@@355 0) (= (ControlFlow 0 7) 6))) $generated@@365)))
$generated@@366)))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 4))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
