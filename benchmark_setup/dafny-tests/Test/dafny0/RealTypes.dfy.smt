(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Real) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 (Int) Real)
(declare-fun $generated@@166 (T@U) T@U)
(declare-fun $generated@@167 (T@T T@U) T@U)
(declare-fun $generated@@168 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Real) ) (! (= ($generated@@157 $generated@@158) (to_int $generated@@158))
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert (forall (($generated@@164 Int) ) (! (= ($generated@@163 $generated@@164) (to_real $generated@@164))
 :pattern ( ($generated@@163 $generated@@164))
)))
(assert (forall (($generated@@165 Int) ) (! (= ($generated@@157 ($generated@@163 $generated@@165)) $generated@@165)
 :pattern ( ($generated@@157 ($generated@@163 $generated@@165)))
)))
(assert  (and (and (= ($generated@@1 $generated@@168) 11) (forall (($generated@@169 T@U) ) (! (= (type ($generated@@166 $generated@@169)) $generated@@168)
 :pattern ( ($generated@@166 $generated@@169))
))) (forall (($generated@@170 T@T) ($generated@@171 T@U) ) (! (= (type ($generated@@167 $generated@@170 $generated@@171)) $generated@@170)
 :pattern ( ($generated@@167 $generated@@170 $generated@@171))
))))
(assert (forall (($generated@@172 T@U) ) (! (let (($generated@@173 (type $generated@@172)))
(= ($generated@@167 $generated@@173 ($generated@@166 $generated@@172)) $generated@@172))
 :pattern ( ($generated@@166 $generated@@172))
)))
(assert (forall (($generated@@174 T@U) ) (! (= ($generated@@166 ($generated@@159 $generated@@174)) ($generated@@159 ($generated@@166 $generated@@174)))
 :pattern ( ($generated@@166 ($generated@@159 $generated@@174)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@175 () Real)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () Real)
(declare-fun $generated@@181 () Real)
(declare-fun $generated@@182 () Int)
(declare-fun $generated@@183 (T@U) Bool)
(declare-fun $generated@@184 (T@U) Bool)
(declare-fun $generated@@185 () Int)
(assert  (and (and (and (= (type $generated@@176) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@177) $generated@@47)) (= (type $generated@@178) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@179) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let (($generated@@186  (=> (and (and (and (> $generated@@175 ($generated@@163 ($generated@@157 $generated@@175))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (= (ControlFlow 0 9) (- 0 8))) false)))
(let (($generated@@187  (=> (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= (ControlFlow 0 7) (- 0 6))) (>= ($generated@@163 ($generated@@157 $generated@@175)) $generated@@175))))
(let (($generated@@188  (=> (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= (ControlFlow 0 5) (- 0 4))) (= ($generated@@163 ($generated@@157 $generated@@175)) $generated@@175))))
(let (($generated@@189  (=> (>= ($generated@@163 ($generated@@157 $generated@@175)) $generated@@175) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= ($generated@@163 ($generated@@157 $generated@@175)) $generated@@175)) (=> (= ($generated@@163 ($generated@@157 $generated@@175)) $generated@@175) (=> (= (ControlFlow 0 2) (- 0 1)) (= ($generated@@157 $generated@@175) ($generated@@157 $generated@@175))))))))
(let (($generated@@190  (=> (= $generated@@176 ($generated@@45 $generated@@177 $generated@@178 $generated@@179 false)) (and (=> (= (ControlFlow 0 10) (- 0 14)) (= (+ $generated@@175 $generated@@180) (+ $generated@@180 $generated@@175))) (=> (= (+ $generated@@175 $generated@@180) (+ $generated@@180 $generated@@175)) (=> (= $generated@@181 ($generated@@163 $generated@@182)) (and (=> (= (ControlFlow 0 10) (- 0 13)) (= ($generated@@163 ($generated@@157 $generated@@181)) $generated@@181)) (=> (= ($generated@@163 ($generated@@157 $generated@@181)) $generated@@181) (and (=> (= (ControlFlow 0 10) (- 0 12)) (= ($generated@@157 ($generated@@163 $generated@@182)) $generated@@182)) (=> (= ($generated@@157 ($generated@@163 $generated@@182)) $generated@@182) (and (=> (= (ControlFlow 0 10) (- 0 11)) (<= ($generated@@163 ($generated@@157 $generated@@175)) $generated@@175)) (=> (<= ($generated@@163 ($generated@@157 $generated@@175)) $generated@@175) (and (and (and (=> (= (ControlFlow 0 10) 2) $generated@@189) (=> (= (ControlFlow 0 10) 5) $generated@@188)) (=> (= (ControlFlow 0 10) 7) $generated@@187)) (=> (= (ControlFlow 0 10) 9) $generated@@186))))))))))))))
(let (($generated@@191  (=> (and (and ($generated@@183 $generated@@178) ($generated@@184 $generated@@178)) (and (= 0 $generated@@185) (= (ControlFlow 0 15) 10))) $generated@@190)))
$generated@@191)))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 7) (- 6))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 (Int) Real)
(declare-fun $generated@@165 (T@U) T@U)
(declare-fun $generated@@166 (T@T T@U) T@U)
(declare-fun $generated@@167 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert (forall (($generated@@164 Int) ) (! (= ($generated@@163 $generated@@164) (to_real $generated@@164))
 :pattern ( ($generated@@163 $generated@@164))
)))
(assert  (and (and (= ($generated@@1 $generated@@167) 11) (forall (($generated@@168 T@U) ) (! (= (type ($generated@@165 $generated@@168)) $generated@@167)
 :pattern ( ($generated@@165 $generated@@168))
))) (forall (($generated@@169 T@T) ($generated@@170 T@U) ) (! (= (type ($generated@@166 $generated@@169 $generated@@170)) $generated@@169)
 :pattern ( ($generated@@166 $generated@@169 $generated@@170))
))))
(assert (forall (($generated@@171 T@U) ) (! (let (($generated@@172 (type $generated@@171)))
(= ($generated@@166 $generated@@172 ($generated@@165 $generated@@171)) $generated@@171))
 :pattern ( ($generated@@165 $generated@@171))
)))
(assert (forall (($generated@@173 Int) ) (! (= ($generated@@165 ($generated@@8 ($generated@@157 $generated@@173))) ($generated@@159 ($generated@@165 ($generated@@8 $generated@@173))))
 :pattern ( ($generated@@165 ($generated@@8 ($generated@@157 $generated@@173))))
)))
(assert (forall (($generated@@174 T@U) ) (! (= ($generated@@165 ($generated@@159 $generated@@174)) ($generated@@159 ($generated@@165 $generated@@174)))
 :pattern ( ($generated@@165 ($generated@@159 $generated@@174)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@175 () Real)
(declare-fun $generated@@176 () Real)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 (T@U) Bool)
(declare-fun $generated@@182 (T@U) Bool)
(declare-fun $generated@@183 () Int)
(assert  (and (and (and (= (type $generated@@177) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@178) $generated@@47)) (= (type $generated@@179) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@180) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@184  (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> (not (= $generated@@175 ($generated@@163 ($generated@@157 0)))) (= (* (/ $generated@@176 $generated@@175) $generated@@175) $generated@@176))) (=> (=> (not (= $generated@@175 ($generated@@163 ($generated@@157 0)))) (= (* (/ $generated@@176 $generated@@175) $generated@@175) $generated@@176)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (not (= $generated@@175 0.0))) (=> (= (ControlFlow 0 2) (- 0 1)) (= (* (/ $generated@@176 $generated@@175) $generated@@175) $generated@@176)))))))
(let (($generated@@185  (=> (and (= $generated@@175 ($generated@@163 ($generated@@157 0))) (= (ControlFlow 0 7) 2)) $generated@@184)))
(let (($generated@@186  (=> (not (= $generated@@175 ($generated@@163 ($generated@@157 0)))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (not (= $generated@@175 0.0))) (=> (= (ControlFlow 0 5) 2) $generated@@184)))))
(let (($generated@@187  (=> (= $generated@@177 ($generated@@45 $generated@@178 $generated@@179 $generated@@180 false)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (>= (* $generated@@176 $generated@@176) ($generated@@163 ($generated@@157 0)))) (=> (>= (* $generated@@176 $generated@@176) ($generated@@163 ($generated@@157 0))) (and (=> (= (ControlFlow 0 8) 5) $generated@@186) (=> (= (ControlFlow 0 8) 7) $generated@@185)))))))
(let (($generated@@188  (=> (and (and ($generated@@181 $generated@@179) ($generated@@182 $generated@@179)) (and (= 0 $generated@@183) (= (ControlFlow 0 10) 8))) $generated@@187)))
$generated@@188))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (Real) Real)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@165 (Int) Real)
(declare-fun $generated@@167 (T@U) T@U)
(declare-fun $generated@@168 (T@T T@U) T@U)
(declare-fun $generated@@169 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 Real) ) (! (= ($generated@@159 $generated@@160) $generated@@160)
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (let (($generated@@163 (type $generated@@162)))
(= (type ($generated@@161 $generated@@162)) $generated@@163))
 :pattern ( ($generated@@161 $generated@@162))
)))
(assert (forall (($generated@@164 T@U) ) (! (= ($generated@@161 $generated@@164) $generated@@164)
 :pattern ( ($generated@@161 $generated@@164))
)))
(assert (forall (($generated@@166 Int) ) (! (= ($generated@@165 $generated@@166) (to_real $generated@@166))
 :pattern ( ($generated@@165 $generated@@166))
)))
(assert  (and (and (= ($generated@@1 $generated@@169) 11) (forall (($generated@@170 T@U) ) (! (= (type ($generated@@167 $generated@@170)) $generated@@169)
 :pattern ( ($generated@@167 $generated@@170))
))) (forall (($generated@@171 T@T) ($generated@@172 T@U) ) (! (= (type ($generated@@168 $generated@@171 $generated@@172)) $generated@@171)
 :pattern ( ($generated@@168 $generated@@171 $generated@@172))
))))
(assert (forall (($generated@@173 T@U) ) (! (let (($generated@@174 (type $generated@@173)))
(= ($generated@@168 $generated@@174 ($generated@@167 $generated@@173)) $generated@@173))
 :pattern ( ($generated@@167 $generated@@173))
)))
(assert (forall (($generated@@175 Int) ) (! (= ($generated@@167 ($generated@@8 ($generated@@157 $generated@@175))) ($generated@@161 ($generated@@167 ($generated@@8 $generated@@175))))
 :pattern ( ($generated@@167 ($generated@@8 ($generated@@157 $generated@@175))))
)))
(assert (forall (($generated@@176 Real) ) (! (= ($generated@@167 ($generated@@9 ($generated@@159 $generated@@176))) ($generated@@161 ($generated@@167 ($generated@@9 $generated@@176))))
 :pattern ( ($generated@@167 ($generated@@9 ($generated@@159 $generated@@176))))
)))
(assert (forall (($generated@@177 T@U) ) (! (= ($generated@@167 ($generated@@161 $generated@@177)) ($generated@@161 ($generated@@167 $generated@@177)))
 :pattern ( ($generated@@167 ($generated@@161 $generated@@177)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () Real)
(declare-fun $generated@@183 () Real)
(declare-fun $generated@@184 (T@U) Bool)
(declare-fun $generated@@185 (T@U) Bool)
(declare-fun $generated@@186 () Int)
(assert  (and (and (and (= (type $generated@@178) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@179) $generated@@47)) (= (type $generated@@180) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@181) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@187  (=> (= $generated@@178 ($generated@@45 $generated@@179 $generated@@180 $generated@@181 false)) (=> (and (= $generated@@182 ($generated@@159 1.5)) (= $generated@@183 ($generated@@165 ($generated@@157 3)))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (not (= ($generated@@159 2.0) 0.0))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (= $generated@@182 (/ $generated@@183 2.0))) (=> (= $generated@@182 (/ $generated@@183 2.0)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (not (= ($generated@@159 2.000000000000000000000000001) 0.0))) (=> (= (ControlFlow 0 2) (- 0 1)) (= $generated@@182 (/ $generated@@183 2.000000000000000000000000001)))))))))))
(let (($generated@@188  (=> (and (and ($generated@@184 $generated@@180) ($generated@@185 $generated@@180)) (and (= 0 $generated@@186) (= (ControlFlow 0 6) 2))) $generated@@187)))
$generated@@188)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@55 () T@U)
(declare-fun $generated@@56 () T@U)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@58 () T@U)
(declare-fun $generated@@59 () T@U)
(declare-fun $generated@@60 () T@U)
(declare-fun $generated@@61 () T@U)
(declare-fun $generated@@62 () T@U)
(declare-fun $generated@@63 () T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@74 (T@U T@U T@U) Bool)
(declare-fun $generated@@75 (Int) T@U)
(declare-fun $generated@@76 (T@T T@T) T@T)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@T) T@T)
(declare-fun $generated@@80 (T@T) T@T)
(declare-fun $generated@@81 (T@U T@U) T@U)
(declare-fun $generated@@82 (T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@U T@U) T@U)
(declare-fun $generated@@84 (T@U T@U T@U) T@U)
(declare-fun $generated@@132 (T@U Int Real) Int)
(declare-fun $generated@@133 (T@U) T@U)
(declare-fun $generated@@134 () T@T)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@140 (T@U T@U) Bool)
(declare-fun $generated@@142 (T@U) Bool)
(declare-fun $generated@@143 (T@U T@U) T@U)
(declare-fun $generated@@144 () T@T)
(declare-fun $generated@@150 (T@U T@U) Bool)
(declare-fun $generated@@151 (T@U) T@U)
(declare-fun $generated@@152 (T@U) T@U)
(declare-fun $generated@@153 () T@T)
(declare-fun $generated@@158 (T@U) T@U)
(declare-fun $generated@@159 (T@U) Bool)
(declare-fun $generated@@163 (T@U T@U T@U) T@U)
(declare-fun $generated@@164 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@165 (T@T T@T) T@T)
(declare-fun $generated@@166 (T@T) T@T)
(declare-fun $generated@@167 (T@T) T@T)
(declare-fun $generated@@168 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@219 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@231 (T@U T@U) T@U)
(declare-fun $generated@@232 (T@U T@U) Bool)
(declare-fun $generated@@241 (T@U) T@U)
(declare-fun $generated@@246 (T@U) T@U)
(declare-fun $generated@@251 (Int) Int)
(declare-fun $generated@@253 (Real) Real)
(declare-fun $generated@@255 (T@U) T@U)
(declare-fun $generated@@259 (T@U) Bool)
(declare-fun $generated@@260 (T@U T@U T@U) Bool)
(declare-fun $generated@@266 (T@U) T@U)
(declare-fun $generated@@272 (T@T) T@U)
(declare-fun $generated@@273 (T@U) Int)
(declare-fun $generated@@274 (T@T) T@T)
(declare-fun $generated@@275 (T@T) T@T)
(declare-fun $generated@@280 (T@U) T@U)
(declare-fun $generated@@285 (T@U) Int)
(declare-fun $generated@@286 (T@T) T@U)
(declare-fun $generated@@291 (T@U) T@U)
(declare-fun $generated@@292 (T@T T@T) T@U)
(declare-fun $generated@@293 (T@T T@T) T@T)
(declare-fun $generated@@294 (T@T) T@T)
(declare-fun $generated@@295 (T@T) T@T)
(declare-fun $generated@@309 (T@U) T@U)
(declare-fun $generated@@310 (T@T T@T) T@U)
(declare-fun $generated@@311 (T@T T@T) T@T)
(declare-fun $generated@@312 (T@T) T@T)
(declare-fun $generated@@313 (T@T) T@T)
(declare-fun $generated@@334 (T@U) T@U)
(declare-fun $generated@@345 (T@U) T@U)
(declare-fun $generated@@352 (T@U) T@U)
(declare-fun $generated@@370 (T@U) T@U)
(declare-fun $generated@@371 (T@T T@U) T@U)
(declare-fun $generated@@372 (T@U) T@U)
(declare-fun $generated@@381 (T@U) T@U)
(declare-fun $generated@@382 (T@U) T@U)
(declare-fun $generated@@399 (T@U T@U) T@U)
(declare-fun $generated@@407 (T@U T@U) T@U)
(declare-fun $generated@@415 () Int)
(declare-fun $generated@@416 (Int Real) Bool)
(declare-fun $generated@@420 (T@T) T@U)
(declare-fun $generated@@444 () T@T)
(declare-fun $generated@@452 (T@U) T@U)
(declare-fun $generated@@456 (T@U) T@U)
(declare-fun $generated@@462 (T@U) T@U)
(declare-fun $generated@@466 (T@U) T@U)
(declare-fun $generated@@474 (T@U) T@U)
(declare-fun $generated@@478 (T@U) T@U)
(declare-fun $generated@@486 (T@U) T@U)
(declare-fun $generated@@487 (T@U Int) T@U)
(declare-fun $generated@@496 (T@U) Int)
(declare-fun $generated@@498 (T@U) T@U)
(declare-fun $generated@@502 (T@U) T@U)
(declare-fun $generated@@506 (T@U) T@U)
(declare-fun $generated@@510 (T@U) T@U)
(declare-fun $generated@@524 (T@U) Int)
(declare-fun $generated@@525 (T@U) Int)
(declare-fun $generated@@541 (T@U) T@U)
(declare-fun $generated@@594 (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@64) 6) (= (type $generated@@44) $generated@@64)) (= (type $generated@@45) $generated@@64)) (= (type $generated@@46) $generated@@64)) (= (type $generated@@47) $generated@@64)) (= (type $generated@@48) $generated@@64)) (= ($generated@@1 $generated@@65) 7)) (= (type $generated@@49) $generated@@65)) (= (type $generated@@50) $generated@@65)) (= (type $generated@@51) $generated@@65)) (= (type $generated@@52) $generated@@65)) (= (type $generated@@53) $generated@@65)) (= (type $generated@@54) $generated@@65)) (= (type $generated@@55) $generated@@65)) (= (type $generated@@56) $generated@@65)) (= (type $generated@@57) $generated@@65)) (= (type $generated@@58) $generated@@65)) (= (type $generated@@59) $generated@@65)) (forall (($generated@@70 T@T) ) (= ($generated@@1 ($generated@@66 $generated@@70)) 8))) (forall (($generated@@71 T@T) ) (! (= ($generated@@67 ($generated@@66 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@66 $generated@@71))
))) (= (type $generated@@60) ($generated@@66 $generated@@4))) (= ($generated@@1 $generated@@68) 9)) (= (type $generated@@61) $generated@@68)) (= (type $generated@@62) $generated@@65)) (= ($generated@@1 $generated@@69) 10)) (= (type $generated@@63) $generated@@69)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46 $generated@@47 $generated@@48 $generated@@49 $generated@@50 $generated@@51 $generated@@52 $generated@@53 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60 $generated@@61 $generated@@62 $generated@@63)
)
(assert (forall (($generated@@73 T@U) ) (! (= (type ($generated@@72 $generated@@73)) $generated@@65)
 :pattern ( ($generated@@72 $generated@@73))
)))
(assert (= ($generated@@72 $generated@@44) $generated@@49))
(assert (= ($generated@@72 $generated@@45) $generated@@50))
(assert (= ($generated@@72 $generated@@46) $generated@@51))
(assert (= ($generated@@72 $generated@@47) $generated@@52))
(assert (= ($generated@@72 $generated@@48) $generated@@53))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ) (= ($generated@@1 ($generated@@76 $generated@@85 $generated@@86)) 11)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ) (! (= ($generated@@79 ($generated@@76 $generated@@87 $generated@@88)) $generated@@87)
 :pattern ( ($generated@@76 $generated@@87 $generated@@88))
))) (forall (($generated@@89 T@T) ($generated@@90 T@T) ) (! (= ($generated@@80 ($generated@@76 $generated@@89 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@76 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@U) ($generated@@92 T@U) ) (! (let (($generated@@93 ($generated@@80 (type $generated@@91))))
(= (type ($generated@@81 $generated@@91 $generated@@92)) $generated@@93))
 :pattern ( ($generated@@81 $generated@@91 $generated@@92))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (let (($generated@@97 (type $generated@@96)))
(let (($generated@@98 (type $generated@@95)))
(= (type ($generated@@82 $generated@@94 $generated@@95 $generated@@96)) ($generated@@76 $generated@@98 $generated@@97))))
 :pattern ( ($generated@@82 $generated@@94 $generated@@95 $generated@@96))
))) (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (let (($generated@@102 ($generated@@80 (type $generated@@99))))
 (=> (= (type $generated@@101) $generated@@102) (= ($generated@@81 ($generated@@82 $generated@@99 $generated@@100 $generated@@101) $generated@@100) $generated@@101)))
 :weight 0
))) (and (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@105 $generated@@106) (= ($generated@@81 ($generated@@82 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@81 $generated@@104 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or true (= ($generated@@81 ($generated@@82 $generated@@108 $generated@@109 $generated@@107) $generated@@110) ($generated@@81 $generated@@108 $generated@@110)))
 :weight 0
)))) (= ($generated@@1 $generated@@77) 12)) (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (! (let (($generated@@113 ($generated@@67 (type $generated@@112))))
(= (type ($generated@@83 $generated@@111 $generated@@112)) $generated@@113))
 :pattern ( ($generated@@83 $generated@@111 $generated@@112))
))) (= ($generated@@1 $generated@@78) 13)) (forall (($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= (type ($generated@@84 $generated@@114 $generated@@115 $generated@@116)) $generated@@78)
 :pattern ( ($generated@@84 $generated@@114 $generated@@115 $generated@@116))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (let (($generated@@120 ($generated@@67 (type $generated@@118))))
 (=> (= (type $generated@@119) $generated@@120) (= ($generated@@83 ($generated@@84 $generated@@117 $generated@@118 $generated@@119) $generated@@118) $generated@@119)))
 :weight 0
))) (and (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@123 $generated@@124) (= ($generated@@83 ($generated@@84 $generated@@122 $generated@@123 $generated@@121) $generated@@124) ($generated@@83 $generated@@122 $generated@@124)))
 :weight 0
)) (forall (($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or true (= ($generated@@83 ($generated@@84 $generated@@126 $generated@@127 $generated@@125) $generated@@128) ($generated@@83 $generated@@126 $generated@@128)))
 :weight 0
)))) (forall (($generated@@129 Int) ) (! (= (type ($generated@@75 $generated@@129)) $generated@@64)
 :pattern ( ($generated@@75 $generated@@129))
))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> (and (= (type $generated@@130) $generated@@2) (= (type $generated@@131) ($generated@@76 $generated@@77 $generated@@78))) ($generated@@74 $generated@@130 ($generated@@75 0) $generated@@131))
 :pattern ( ($generated@@74 $generated@@130 ($generated@@75 0) $generated@@131))
)))
(assert  (and (and (= ($generated@@1 $generated@@134) 14) (forall (($generated@@136 T@U) ) (! (= (type ($generated@@133 $generated@@136)) $generated@@134)
 :pattern ( ($generated@@133 $generated@@136))
))) (= (type $generated@@135) $generated@@134)))
(assert (forall (($generated@@137 T@U) ($generated@@138 Int) ($generated@@139 Real) ) (!  (=> (= (type $generated@@137) $generated@@134) (= ($generated@@132 $generated@@137 $generated@@138 $generated@@139) ($generated@@132 $generated@@135 $generated@@138 $generated@@139)))
 :pattern ( ($generated@@132 ($generated@@133 $generated@@137) $generated@@138 $generated@@139))
)))
(assert (forall (($generated@@141 T@U) ) (!  (=> (= (type $generated@@141) $generated@@2) ($generated@@140 $generated@@141 ($generated@@75 0)))
 :pattern ( ($generated@@140 $generated@@141 ($generated@@75 0)))
)))
(assert  (and (= ($generated@@1 $generated@@144) 15) (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (! (= (type ($generated@@143 $generated@@145 $generated@@146)) $generated@@64)
 :pattern ( ($generated@@143 $generated@@145 $generated@@146))
))))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ) (!  (=> (and (and (and (= (type $generated@@147) $generated@@64) (= (type $generated@@148) $generated@@64)) (= (type $generated@@149) $generated@@144)) ($generated@@140 $generated@@149 ($generated@@143 $generated@@147 $generated@@148))) ($generated@@142 $generated@@149))
 :pattern ( ($generated@@142 $generated@@149) ($generated@@140 $generated@@149 ($generated@@143 $generated@@147 $generated@@148)))
)))
(assert  (and (and (= ($generated@@1 $generated@@153) 16) (forall (($generated@@154 T@U) ) (! (= (type ($generated@@151 $generated@@154)) $generated@@153)
 :pattern ( ($generated@@151 $generated@@154))
))) (forall (($generated@@155 T@U) ) (! (= (type ($generated@@152 $generated@@155)) $generated@@153)
 :pattern ( ($generated@@152 $generated@@155))
))))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@U) ) (!  (=> (and (and (= (type $generated@@156) $generated@@144) (= (type $generated@@157) $generated@@144)) true) (= ($generated@@150 $generated@@156 $generated@@157)  (and (= ($generated@@151 $generated@@156) ($generated@@151 $generated@@157)) (= ($generated@@152 $generated@@156) ($generated@@152 $generated@@157)))))
 :pattern ( ($generated@@150 $generated@@156 $generated@@157))
)))
(assert (forall (($generated@@160 T@U) ) (! (= (type ($generated@@158 $generated@@160)) $generated@@64)
 :pattern ( ($generated@@158 $generated@@160))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ) (!  (=> (and (and (= (type $generated@@161) ($generated@@76 $generated@@153 $generated@@2)) (= (type $generated@@162) $generated@@64)) ($generated@@140 $generated@@161 ($generated@@158 $generated@@162))) ($generated@@159 $generated@@161))
 :pattern ( ($generated@@140 $generated@@161 ($generated@@158 $generated@@162)))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@169 T@T) ($generated@@170 T@T) ) (= ($generated@@1 ($generated@@165 $generated@@169 $generated@@170)) 17)) (forall (($generated@@171 T@T) ($generated@@172 T@T) ) (! (= ($generated@@166 ($generated@@165 $generated@@171 $generated@@172)) $generated@@171)
 :pattern ( ($generated@@165 $generated@@171 $generated@@172))
))) (forall (($generated@@173 T@T) ($generated@@174 T@T) ) (! (= ($generated@@167 ($generated@@165 $generated@@173 $generated@@174)) $generated@@174)
 :pattern ( ($generated@@165 $generated@@173 $generated@@174))
))) (forall (($generated@@175 T@U) ($generated@@176 T@U) ($generated@@177 T@U) ) (! (let (($generated@@178 ($generated@@167 (type $generated@@175))))
(= (type ($generated@@163 $generated@@175 $generated@@176 $generated@@177)) $generated@@178))
 :pattern ( ($generated@@163 $generated@@175 $generated@@176 $generated@@177))
))) (forall (($generated@@179 T@U) ($generated@@180 T@U) ($generated@@181 T@U) ($generated@@182 T@U) ) (! (let (($generated@@183 (type $generated@@182)))
(let (($generated@@184 (type $generated@@180)))
(= (type ($generated@@168 $generated@@179 $generated@@180 $generated@@181 $generated@@182)) ($generated@@165 $generated@@184 $generated@@183))))
 :pattern ( ($generated@@168 $generated@@179 $generated@@180 $generated@@181 $generated@@182))
))) (forall (($generated@@185 T@U) ($generated@@186 T@U) ($generated@@187 T@U) ($generated@@188 T@U) ) (! (let (($generated@@189 ($generated@@167 (type $generated@@185))))
 (=> (= (type $generated@@188) $generated@@189) (= ($generated@@163 ($generated@@168 $generated@@185 $generated@@186 $generated@@187 $generated@@188) $generated@@186 $generated@@187) $generated@@188)))
 :weight 0
))) (and (and (forall (($generated@@190 T@U) ($generated@@191 T@U) ($generated@@192 T@U) ($generated@@193 T@U) ($generated@@194 T@U) ($generated@@195 T@U) ) (!  (or (= $generated@@192 $generated@@194) (= ($generated@@163 ($generated@@168 $generated@@191 $generated@@192 $generated@@193 $generated@@190) $generated@@194 $generated@@195) ($generated@@163 $generated@@191 $generated@@194 $generated@@195)))
 :weight 0
)) (forall (($generated@@196 T@U) ($generated@@197 T@U) ($generated@@198 T@U) ($generated@@199 T@U) ($generated@@200 T@U) ($generated@@201 T@U) ) (!  (or (= $generated@@199 $generated@@201) (= ($generated@@163 ($generated@@168 $generated@@197 $generated@@198 $generated@@199 $generated@@196) $generated@@200 $generated@@201) ($generated@@163 $generated@@197 $generated@@200 $generated@@201)))
 :weight 0
))) (forall (($generated@@202 T@U) ($generated@@203 T@U) ($generated@@204 T@U) ($generated@@205 T@U) ($generated@@206 T@U) ($generated@@207 T@U) ) (!  (or true (= ($generated@@163 ($generated@@168 $generated@@203 $generated@@204 $generated@@205 $generated@@202) $generated@@206 $generated@@207) ($generated@@163 $generated@@203 $generated@@206 $generated@@207)))
 :weight 0
)))) (forall (($generated@@208 T@U) ($generated@@209 T@U) ($generated@@210 T@U) ($generated@@211 Bool) ) (! (= (type ($generated@@164 $generated@@208 $generated@@209 $generated@@210 $generated@@211)) ($generated@@165 $generated@@77 $generated@@4))
 :pattern ( ($generated@@164 $generated@@208 $generated@@209 $generated@@210 $generated@@211))
))))
(assert (forall (($generated@@212 T@U) ($generated@@213 T@U) ($generated@@214 T@U) ($generated@@215 Bool) ($generated@@216 T@U) ($generated@@217 T@U) ) (! (let (($generated@@218 ($generated@@67 (type $generated@@217))))
 (=> (and (and (and (and (= (type $generated@@212) $generated@@77) (= (type $generated@@213) ($generated@@76 $generated@@77 $generated@@78))) (= (type $generated@@214) ($generated@@66 $generated@@4))) (= (type $generated@@216) $generated@@77)) (= (type $generated@@217) ($generated@@66 $generated@@218))) (= ($generated@@0 ($generated@@163 ($generated@@164 $generated@@212 $generated@@213 $generated@@214 $generated@@215) $generated@@216 $generated@@217))  (=> (and (not (= $generated@@216 $generated@@212)) ($generated@@0 ($generated@@83 ($generated@@81 $generated@@213 $generated@@216) $generated@@214))) $generated@@215))))
 :pattern ( ($generated@@163 ($generated@@164 $generated@@212 $generated@@213 $generated@@214 $generated@@215) $generated@@216 $generated@@217))
)))
(assert (forall (($generated@@220 T@U) ($generated@@221 T@U) ($generated@@222 T@U) ($generated@@223 Bool) ) (! (= (type ($generated@@219 $generated@@220 $generated@@221 $generated@@222 $generated@@223)) ($generated@@165 $generated@@77 $generated@@4))
 :pattern ( ($generated@@219 $generated@@220 $generated@@221 $generated@@222 $generated@@223))
)))
(assert (forall (($generated@@224 T@U) ($generated@@225 T@U) ($generated@@226 T@U) ($generated@@227 Bool) ($generated@@228 T@U) ($generated@@229 T@U) ) (! (let (($generated@@230 ($generated@@67 (type $generated@@229))))
 (=> (and (and (and (and (= (type $generated@@224) $generated@@77) (= (type $generated@@225) ($generated@@76 $generated@@77 $generated@@78))) (= (type $generated@@226) ($generated@@66 $generated@@4))) (= (type $generated@@228) $generated@@77)) (= (type $generated@@229) ($generated@@66 $generated@@230))) (= ($generated@@0 ($generated@@163 ($generated@@219 $generated@@224 $generated@@225 $generated@@226 $generated@@227) $generated@@228 $generated@@229))  (=> (and (not (= $generated@@228 $generated@@224)) ($generated@@0 ($generated@@83 ($generated@@81 $generated@@225 $generated@@228) $generated@@226))) $generated@@227))))
 :pattern ( ($generated@@163 ($generated@@219 $generated@@224 $generated@@225 $generated@@226 $generated@@227) $generated@@228 $generated@@229))
)))
(assert (forall (($generated@@233 T@U) ($generated@@234 T@U) ) (! (= (type ($generated@@231 $generated@@233 $generated@@234)) $generated@@144)
 :pattern ( ($generated@@231 $generated@@233 $generated@@234))
)))
(assert (forall (($generated@@235 T@U) ($generated@@236 T@U) ($generated@@237 T@U) ($generated@@238 T@U) ) (!  (=> (and (and (and (= (type $generated@@235) $generated@@64) (= (type $generated@@236) $generated@@64)) (= (type $generated@@237) $generated@@153)) (= (type $generated@@238) $generated@@153)) (= ($generated@@140 ($generated@@231 $generated@@237 $generated@@238) ($generated@@143 $generated@@235 $generated@@236))  (and ($generated@@232 $generated@@237 $generated@@235) ($generated@@232 $generated@@238 $generated@@236))))
 :pattern ( ($generated@@140 ($generated@@231 $generated@@237 $generated@@238) ($generated@@143 $generated@@235 $generated@@236)))
)))
(assert (forall (($generated@@239 T@U) ($generated@@240 T@U) ) (!  (=> (and (= (type $generated@@239) $generated@@144) (= (type $generated@@240) $generated@@144)) (= ($generated@@150 $generated@@239 $generated@@240) (= $generated@@239 $generated@@240)))
 :pattern ( ($generated@@150 $generated@@239 $generated@@240))
)))
(assert (forall (($generated@@242 T@U) ) (! (= (type ($generated@@241 $generated@@242)) $generated@@64)
 :pattern ( ($generated@@241 $generated@@242))
)))
(assert (forall (($generated@@243 T@U) ($generated@@244 T@U) ) (!  (=> (and (= (type $generated@@243) ($generated@@76 $generated@@153 $generated@@4)) (= (type $generated@@244) $generated@@64)) (= ($generated@@140 $generated@@243 ($generated@@241 $generated@@244)) (forall (($generated@@245 T@U) ) (!  (=> (and (= (type $generated@@245) $generated@@153) ($generated@@0 ($generated@@81 $generated@@243 $generated@@245))) ($generated@@232 $generated@@245 $generated@@244))
 :pattern ( ($generated@@81 $generated@@243 $generated@@245))
))))
 :pattern ( ($generated@@140 $generated@@243 ($generated@@241 $generated@@244)))
)))
(assert (forall (($generated@@247 T@U) ) (! (= (type ($generated@@246 $generated@@247)) $generated@@64)
 :pattern ( ($generated@@246 $generated@@247))
)))
(assert (forall (($generated@@248 T@U) ($generated@@249 T@U) ) (!  (=> (and (= (type $generated@@248) ($generated@@76 $generated@@153 $generated@@4)) (= (type $generated@@249) $generated@@64)) (= ($generated@@140 $generated@@248 ($generated@@246 $generated@@249)) (forall (($generated@@250 T@U) ) (!  (=> (and (= (type $generated@@250) $generated@@153) ($generated@@0 ($generated@@81 $generated@@248 $generated@@250))) ($generated@@232 $generated@@250 $generated@@249))
 :pattern ( ($generated@@81 $generated@@248 $generated@@250))
))))
 :pattern ( ($generated@@140 $generated@@248 ($generated@@246 $generated@@249)))
)))
(assert (forall (($generated@@252 Int) ) (! (= ($generated@@251 $generated@@252) $generated@@252)
 :pattern ( ($generated@@251 $generated@@252))
)))
(assert (forall (($generated@@254 Real) ) (! (= ($generated@@253 $generated@@254) $generated@@254)
 :pattern ( ($generated@@253 $generated@@254))
)))
(assert (forall (($generated@@256 T@U) ) (! (let (($generated@@257 (type $generated@@256)))
(= (type ($generated@@255 $generated@@256)) $generated@@257))
 :pattern ( ($generated@@255 $generated@@256))
)))
(assert (forall (($generated@@258 T@U) ) (! (= ($generated@@255 $generated@@258) $generated@@258)
 :pattern ( ($generated@@255 $generated@@258))
)))
(assert (forall (($generated@@261 T@U) ($generated@@262 T@U) ($generated@@263 T@U) ($generated@@264 T@U) ($generated@@265 T@U) ) (!  (=> (and (and (and (and (and (= (type $generated@@261) $generated@@64) (= (type $generated@@262) $generated@@64)) (= (type $generated@@263) $generated@@153)) (= (type $generated@@264) $generated@@153)) (= (type $generated@@265) ($generated@@76 $generated@@77 $generated@@78))) ($generated@@259 $generated@@265)) (= ($generated@@74 ($generated@@231 $generated@@263 $generated@@264) ($generated@@143 $generated@@261 $generated@@262) $generated@@265)  (and ($generated@@260 $generated@@263 $generated@@261 $generated@@265) ($generated@@260 $generated@@264 $generated@@262 $generated@@265))))
 :pattern ( ($generated@@74 ($generated@@231 $generated@@263 $generated@@264) ($generated@@143 $generated@@261 $generated@@262) $generated@@265))
)))
(assert (forall (($generated@@267 T@U) ) (! (= (type ($generated@@266 $generated@@267)) $generated@@68)
 :pattern ( ($generated@@266 $generated@@267))
)))
(assert (forall (($generated@@268 T@U) ) (!  (=> (= (type $generated@@268) $generated@@144) (= ($generated@@142 $generated@@268) (= ($generated@@266 $generated@@268) $generated@@61)))
 :pattern ( ($generated@@142 $generated@@268))
)))
(assert (forall (($generated@@269 T@U) ) (!  (=> (and (= (type $generated@@269) $generated@@144) ($generated@@142 $generated@@269)) (exists (($generated@@270 T@U) ($generated@@271 T@U) ) (!  (and (and (= (type $generated@@270) $generated@@153) (= (type $generated@@271) $generated@@153)) (= $generated@@269 ($generated@@231 $generated@@270 $generated@@271)))
 :no-pattern (type $generated@@270)
 :no-pattern (type $generated@@271)
 :no-pattern ($generated $generated@@270)
 :no-pattern ($generated@@0 $generated@@270)
 :no-pattern ($generated $generated@@271)
 :no-pattern ($generated@@0 $generated@@271)
)))
 :pattern ( ($generated@@142 $generated@@269))
)))
(assert  (and (and (forall (($generated@@276 T@T) ) (= ($generated@@1 ($generated@@274 $generated@@276)) 18)) (forall (($generated@@277 T@T) ) (! (= ($generated@@275 ($generated@@274 $generated@@277)) $generated@@277)
 :pattern ( ($generated@@274 $generated@@277))
))) (forall (($generated@@278 T@T) ) (! (= (type ($generated@@272 $generated@@278)) ($generated@@274 $generated@@278))
 :pattern ( ($generated@@272 $generated@@278))
))))
(assert (forall (($generated@@279 T@T) ) (! (= ($generated@@273 ($generated@@272 $generated@@279)) 0)
 :pattern ( ($generated@@272 $generated@@279))
)))
(assert (forall (($generated@@281 T@U) ) (! (= (type ($generated@@280 $generated@@281)) $generated@@153)
 :pattern ( ($generated@@280 $generated@@281))
)))
(assert (forall (($generated@@282 T@U) ($generated@@283 T@U) ($generated@@284 T@U) ) (!  (=> (and (= (type $generated@@283) $generated@@64) (= (type $generated@@284) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@260 ($generated@@280 $generated@@282) $generated@@283 $generated@@284) ($generated@@74 $generated@@282 $generated@@283 $generated@@284)))
 :pattern ( ($generated@@260 ($generated@@280 $generated@@282) $generated@@283 $generated@@284))
)))
(assert (forall (($generated@@287 T@T) ) (! (= (type ($generated@@286 $generated@@287)) ($generated@@76 $generated@@287 $generated@@2))
 :pattern ( ($generated@@286 $generated@@287))
)))
(assert (forall (($generated@@288 T@U) ) (! (let (($generated@@289 ($generated@@79 (type $generated@@288))))
 (=> (= (type $generated@@288) ($generated@@76 $generated@@289 $generated@@2)) (and (= (= ($generated@@285 $generated@@288) 0) (= $generated@@288 ($generated@@286 $generated@@289))) (=> (not (= ($generated@@285 $generated@@288) 0)) (exists (($generated@@290 T@U) ) (!  (and (= (type $generated@@290) $generated@@289) (< 0 ($generated ($generated@@81 $generated@@288 $generated@@290))))
 :no-pattern (type $generated@@290)
 :no-pattern ($generated $generated@@290)
 :no-pattern ($generated@@0 $generated@@290)
))))))
 :pattern ( ($generated@@285 $generated@@288))
)))
(assert  (and (and (and (and (forall (($generated@@296 T@T) ($generated@@297 T@T) ) (= ($generated@@1 ($generated@@293 $generated@@296 $generated@@297)) 19)) (forall (($generated@@298 T@T) ($generated@@299 T@T) ) (! (= ($generated@@294 ($generated@@293 $generated@@298 $generated@@299)) $generated@@298)
 :pattern ( ($generated@@293 $generated@@298 $generated@@299))
))) (forall (($generated@@300 T@T) ($generated@@301 T@T) ) (! (= ($generated@@295 ($generated@@293 $generated@@300 $generated@@301)) $generated@@301)
 :pattern ( ($generated@@293 $generated@@300 $generated@@301))
))) (forall (($generated@@302 T@U) ) (! (let (($generated@@303 ($generated@@294 (type $generated@@302))))
(= (type ($generated@@291 $generated@@302)) ($generated@@76 $generated@@303 $generated@@4)))
 :pattern ( ($generated@@291 $generated@@302))
))) (forall (($generated@@304 T@T) ($generated@@305 T@T) ) (! (= (type ($generated@@292 $generated@@304 $generated@@305)) ($generated@@293 $generated@@304 $generated@@305))
 :pattern ( ($generated@@292 $generated@@304 $generated@@305))
))))
(assert (forall (($generated@@306 T@U) ($generated@@307 T@T) ) (! (let (($generated@@308 (type $generated@@306)))
 (not ($generated@@0 ($generated@@81 ($generated@@291 ($generated@@292 $generated@@308 $generated@@307)) $generated@@306))))
 :pattern ( (let (($generated@@308 (type $generated@@306)))
($generated@@81 ($generated@@291 ($generated@@292 $generated@@308 $generated@@307)) $generated@@306)))
)))
(assert  (and (and (and (and (forall (($generated@@314 T@T) ($generated@@315 T@T) ) (= ($generated@@1 ($generated@@311 $generated@@314 $generated@@315)) 20)) (forall (($generated@@316 T@T) ($generated@@317 T@T) ) (! (= ($generated@@312 ($generated@@311 $generated@@316 $generated@@317)) $generated@@316)
 :pattern ( ($generated@@311 $generated@@316 $generated@@317))
))) (forall (($generated@@318 T@T) ($generated@@319 T@T) ) (! (= ($generated@@313 ($generated@@311 $generated@@318 $generated@@319)) $generated@@319)
 :pattern ( ($generated@@311 $generated@@318 $generated@@319))
))) (forall (($generated@@320 T@U) ) (! (let (($generated@@321 ($generated@@312 (type $generated@@320))))
(= (type ($generated@@309 $generated@@320)) ($generated@@76 $generated@@321 $generated@@4)))
 :pattern ( ($generated@@309 $generated@@320))
))) (forall (($generated@@322 T@T) ($generated@@323 T@T) ) (! (= (type ($generated@@310 $generated@@322 $generated@@323)) ($generated@@311 $generated@@322 $generated@@323))
 :pattern ( ($generated@@310 $generated@@322 $generated@@323))
))))
(assert (forall (($generated@@324 T@U) ($generated@@325 T@T) ) (! (let (($generated@@326 (type $generated@@324)))
 (not ($generated@@0 ($generated@@81 ($generated@@309 ($generated@@310 $generated@@326 $generated@@325)) $generated@@324))))
 :pattern ( (let (($generated@@326 (type $generated@@324)))
($generated@@81 ($generated@@309 ($generated@@310 $generated@@326 $generated@@325)) $generated@@324)))
)))
(assert (forall (($generated@@327 T@U) ) (! (let (($generated@@328 ($generated@@79 (type $generated@@327))))
 (=> (= (type $generated@@327) ($generated@@76 $generated@@328 $generated@@2)) (= ($generated@@159 $generated@@327) (forall (($generated@@329 T@U) ) (!  (=> (= (type $generated@@329) $generated@@328) (and (<= 0 ($generated ($generated@@81 $generated@@327 $generated@@329))) (<= ($generated ($generated@@81 $generated@@327 $generated@@329)) ($generated@@285 $generated@@327))))
 :pattern ( ($generated@@81 $generated@@327 $generated@@329))
)))))
 :pattern ( ($generated@@159 $generated@@327))
)))
(assert (forall (($generated@@330 T@U) ) (! (let (($generated@@331 ($generated@@295 (type $generated@@330))))
(let (($generated@@332 ($generated@@294 (type $generated@@330))))
 (=> (= (type $generated@@330) ($generated@@293 $generated@@332 $generated@@331)) (or (= $generated@@330 ($generated@@292 $generated@@332 $generated@@331)) (exists (($generated@@333 T@U) ) (!  (and (= (type $generated@@333) $generated@@332) ($generated@@0 ($generated@@81 ($generated@@291 $generated@@330) $generated@@333)))
 :no-pattern (type $generated@@333)
 :no-pattern ($generated $generated@@333)
 :no-pattern ($generated@@0 $generated@@333)
))))))
 :pattern ( ($generated@@291 $generated@@330))
)))
(assert (forall (($generated@@335 T@U) ) (! (let (($generated@@336 ($generated@@295 (type $generated@@335))))
(= (type ($generated@@334 $generated@@335)) ($generated@@76 $generated@@336 $generated@@4)))
 :pattern ( ($generated@@334 $generated@@335))
)))
(assert (forall (($generated@@337 T@U) ) (! (let (($generated@@338 ($generated@@295 (type $generated@@337))))
(let (($generated@@339 ($generated@@294 (type $generated@@337))))
 (=> (= (type $generated@@337) ($generated@@293 $generated@@339 $generated@@338)) (or (= $generated@@337 ($generated@@292 $generated@@339 $generated@@338)) (exists (($generated@@340 T@U) ) (!  (and (= (type $generated@@340) $generated@@338) ($generated@@0 ($generated@@81 ($generated@@334 $generated@@337) $generated@@340)))
 :no-pattern (type $generated@@340)
 :no-pattern ($generated $generated@@340)
 :no-pattern ($generated@@0 $generated@@340)
))))))
 :pattern ( ($generated@@334 $generated@@337))
)))
(assert (forall (($generated@@341 T@U) ) (! (let (($generated@@342 ($generated@@313 (type $generated@@341))))
(let (($generated@@343 ($generated@@312 (type $generated@@341))))
 (=> (= (type $generated@@341) ($generated@@311 $generated@@343 $generated@@342)) (or (= $generated@@341 ($generated@@310 $generated@@343 $generated@@342)) (exists (($generated@@344 T@U) ) (!  (and (= (type $generated@@344) $generated@@343) ($generated@@0 ($generated@@81 ($generated@@309 $generated@@341) $generated@@344)))
 :no-pattern (type $generated@@344)
 :no-pattern ($generated $generated@@344)
 :no-pattern ($generated@@0 $generated@@344)
))))))
 :pattern ( ($generated@@309 $generated@@341))
)))
(assert (forall (($generated@@346 T@U) ) (! (let (($generated@@347 ($generated@@313 (type $generated@@346))))
(= (type ($generated@@345 $generated@@346)) ($generated@@76 $generated@@347 $generated@@4)))
 :pattern ( ($generated@@345 $generated@@346))
)))
(assert (forall (($generated@@348 T@U) ) (! (let (($generated@@349 ($generated@@313 (type $generated@@348))))
(let (($generated@@350 ($generated@@312 (type $generated@@348))))
 (=> (= (type $generated@@348) ($generated@@311 $generated@@350 $generated@@349)) (or (= $generated@@348 ($generated@@310 $generated@@350 $generated@@349)) (exists (($generated@@351 T@U) ) (!  (and (= (type $generated@@351) $generated@@349) ($generated@@0 ($generated@@81 ($generated@@345 $generated@@348) $generated@@351)))
 :no-pattern (type $generated@@351)
 :no-pattern ($generated $generated@@351)
 :no-pattern ($generated@@0 $generated@@351)
))))))
 :pattern ( ($generated@@345 $generated@@348))
)))
(assert (forall (($generated@@353 T@U) ) (! (= (type ($generated@@352 $generated@@353)) $generated@@134)
 :pattern ( ($generated@@352 $generated@@353))
)))
(assert (forall (($generated@@354 T@U) ($generated@@355 Int) ($generated@@356 Real) ) (!  (=> (= (type $generated@@354) $generated@@134) (= ($generated@@132 ($generated@@352 $generated@@354) $generated@@355 $generated@@356) ($generated@@132 $generated@@354 $generated@@355 $generated@@356)))
 :pattern ( ($generated@@132 ($generated@@352 $generated@@354) $generated@@355 $generated@@356))
)))
(assert (forall (($generated@@357 T@U) ($generated@@358 T@U) ) (!  (=> (and (= (type $generated@@357) ($generated@@76 $generated@@153 $generated@@2)) (= (type $generated@@358) $generated@@64)) (= ($generated@@140 $generated@@357 ($generated@@158 $generated@@358)) (forall (($generated@@359 T@U) ) (!  (=> (and (= (type $generated@@359) $generated@@153) (< 0 ($generated ($generated@@81 $generated@@357 $generated@@359)))) ($generated@@232 $generated@@359 $generated@@358))
 :pattern ( ($generated@@81 $generated@@357 $generated@@359))
))))
 :pattern ( ($generated@@140 $generated@@357 ($generated@@158 $generated@@358)))
)))
(assert (forall (($generated@@360 T@U) ($generated@@361 T@U) ($generated@@362 T@U) ) (!  (=> (and (and (= (type $generated@@360) ($generated@@76 $generated@@153 $generated@@4)) (= (type $generated@@361) $generated@@64)) (= (type $generated@@362) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@74 $generated@@360 ($generated@@241 $generated@@361) $generated@@362) (forall (($generated@@363 T@U) ) (!  (=> (and (= (type $generated@@363) $generated@@153) ($generated@@0 ($generated@@81 $generated@@360 $generated@@363))) ($generated@@260 $generated@@363 $generated@@361 $generated@@362))
 :pattern ( ($generated@@81 $generated@@360 $generated@@363))
))))
 :pattern ( ($generated@@74 $generated@@360 ($generated@@241 $generated@@361) $generated@@362))
)))
(assert (forall (($generated@@364 T@U) ($generated@@365 T@U) ($generated@@366 T@U) ) (!  (=> (and (and (= (type $generated@@364) ($generated@@76 $generated@@153 $generated@@4)) (= (type $generated@@365) $generated@@64)) (= (type $generated@@366) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@74 $generated@@364 ($generated@@246 $generated@@365) $generated@@366) (forall (($generated@@367 T@U) ) (!  (=> (and (= (type $generated@@367) $generated@@153) ($generated@@0 ($generated@@81 $generated@@364 $generated@@367))) ($generated@@260 $generated@@367 $generated@@365 $generated@@366))
 :pattern ( ($generated@@81 $generated@@364 $generated@@367))
))))
 :pattern ( ($generated@@74 $generated@@364 ($generated@@246 $generated@@365) $generated@@366))
)))
(assert (forall (($generated@@368 T@U) ) (! (let (($generated@@369 (type $generated@@368)))
(= ($generated ($generated@@81 ($generated@@286 $generated@@369) $generated@@368)) 0))
 :pattern ( (let (($generated@@369 (type $generated@@368)))
($generated@@81 ($generated@@286 $generated@@369) $generated@@368)))
)))
(assert  (and (and (forall (($generated@@373 T@U) ) (! (= (type ($generated@@370 $generated@@373)) ($generated@@76 $generated@@153 $generated@@4))
 :pattern ( ($generated@@370 $generated@@373))
)) (forall (($generated@@374 T@T) ($generated@@375 T@U) ) (! (= (type ($generated@@371 $generated@@374 $generated@@375)) $generated@@374)
 :pattern ( ($generated@@371 $generated@@374 $generated@@375))
))) (forall (($generated@@376 T@U) ) (! (let (($generated@@377 ($generated@@295 (type $generated@@376))))
(let (($generated@@378 ($generated@@294 (type $generated@@376))))
(= (type ($generated@@372 $generated@@376)) ($generated@@76 $generated@@378 $generated@@377))))
 :pattern ( ($generated@@372 $generated@@376))
))))
(assert (forall (($generated@@379 T@U) ($generated@@380 T@U) ) (!  (=> (and (= (type $generated@@379) ($generated@@293 $generated@@153 $generated@@153)) (= (type $generated@@380) $generated@@153)) (= ($generated@@0 ($generated@@81 ($generated@@370 $generated@@379) $generated@@380))  (and ($generated@@0 ($generated@@81 ($generated@@291 $generated@@379) ($generated@@151 ($generated@@371 $generated@@144 $generated@@380)))) (= ($generated@@81 ($generated@@372 $generated@@379) ($generated@@151 ($generated@@371 $generated@@144 $generated@@380))) ($generated@@152 ($generated@@371 $generated@@144 $generated@@380))))))
 :pattern ( ($generated@@81 ($generated@@370 $generated@@379) $generated@@380))
)))
(assert  (and (forall (($generated@@383 T@U) ) (! (= (type ($generated@@381 $generated@@383)) ($generated@@76 $generated@@153 $generated@@4))
 :pattern ( ($generated@@381 $generated@@383))
)) (forall (($generated@@384 T@U) ) (! (let (($generated@@385 ($generated@@313 (type $generated@@384))))
(let (($generated@@386 ($generated@@312 (type $generated@@384))))
(= (type ($generated@@382 $generated@@384)) ($generated@@76 $generated@@386 $generated@@385))))
 :pattern ( ($generated@@382 $generated@@384))
))))
(assert (forall (($generated@@387 T@U) ($generated@@388 T@U) ) (!  (=> (and (= (type $generated@@387) ($generated@@311 $generated@@153 $generated@@153)) (= (type $generated@@388) $generated@@153)) (= ($generated@@0 ($generated@@81 ($generated@@381 $generated@@387) $generated@@388))  (and ($generated@@0 ($generated@@81 ($generated@@309 $generated@@387) ($generated@@151 ($generated@@371 $generated@@144 $generated@@388)))) (= ($generated@@81 ($generated@@382 $generated@@387) ($generated@@151 ($generated@@371 $generated@@144 $generated@@388))) ($generated@@152 ($generated@@371 $generated@@144 $generated@@388))))))
 :pattern ( ($generated@@81 ($generated@@381 $generated@@387) $generated@@388))
)))
(assert (forall (($generated@@389 T@U) ($generated@@390 T@U) ) (! (let (($generated@@391 (type $generated@@390)))
(let (($generated@@392 ($generated@@294 (type $generated@@389))))
 (=> (= (type $generated@@389) ($generated@@293 $generated@@392 $generated@@391)) (= ($generated@@0 ($generated@@81 ($generated@@334 $generated@@389) $generated@@390)) (exists (($generated@@393 T@U) ) (!  (and (= (type $generated@@393) $generated@@392) (and ($generated@@0 ($generated@@81 ($generated@@291 $generated@@389) $generated@@393)) (= $generated@@390 ($generated@@81 ($generated@@372 $generated@@389) $generated@@393))))
 :pattern ( ($generated@@81 ($generated@@291 $generated@@389) $generated@@393))
 :pattern ( ($generated@@81 ($generated@@372 $generated@@389) $generated@@393))
))))))
 :pattern ( ($generated@@81 ($generated@@334 $generated@@389) $generated@@390))
)))
(assert (forall (($generated@@394 T@U) ($generated@@395 T@U) ) (! (let (($generated@@396 (type $generated@@395)))
(let (($generated@@397 ($generated@@312 (type $generated@@394))))
 (=> (= (type $generated@@394) ($generated@@311 $generated@@397 $generated@@396)) (= ($generated@@0 ($generated@@81 ($generated@@345 $generated@@394) $generated@@395)) (exists (($generated@@398 T@U) ) (!  (and (= (type $generated@@398) $generated@@397) (and ($generated@@0 ($generated@@81 ($generated@@309 $generated@@394) $generated@@398)) (= $generated@@395 ($generated@@81 ($generated@@382 $generated@@394) $generated@@398))))
 :pattern ( ($generated@@81 ($generated@@309 $generated@@394) $generated@@398))
 :pattern ( ($generated@@81 ($generated@@382 $generated@@394) $generated@@398))
))))))
 :pattern ( ($generated@@81 ($generated@@345 $generated@@394) $generated@@395))
)))
(assert (forall (($generated@@400 T@U) ($generated@@401 T@U) ) (! (= (type ($generated@@399 $generated@@400 $generated@@401)) $generated@@64)
 :pattern ( ($generated@@399 $generated@@400 $generated@@401))
)))
(assert (forall (($generated@@402 T@U) ($generated@@403 T@U) ($generated@@404 T@U) ($generated@@405 T@U) ) (!  (=> (and (and (and (= (type $generated@@402) ($generated@@293 $generated@@153 $generated@@153)) (= (type $generated@@403) $generated@@64)) (= (type $generated@@404) $generated@@64)) (= (type $generated@@405) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@74 $generated@@402 ($generated@@399 $generated@@403 $generated@@404) $generated@@405) (forall (($generated@@406 T@U) ) (!  (=> (and (= (type $generated@@406) $generated@@153) ($generated@@0 ($generated@@81 ($generated@@291 $generated@@402) $generated@@406))) (and ($generated@@260 ($generated@@81 ($generated@@372 $generated@@402) $generated@@406) $generated@@404 $generated@@405) ($generated@@260 $generated@@406 $generated@@403 $generated@@405)))
 :pattern ( ($generated@@81 ($generated@@372 $generated@@402) $generated@@406))
 :pattern ( ($generated@@81 ($generated@@291 $generated@@402) $generated@@406))
))))
 :pattern ( ($generated@@74 $generated@@402 ($generated@@399 $generated@@403 $generated@@404) $generated@@405))
)))
(assert (forall (($generated@@408 T@U) ($generated@@409 T@U) ) (! (= (type ($generated@@407 $generated@@408 $generated@@409)) $generated@@64)
 :pattern ( ($generated@@407 $generated@@408 $generated@@409))
)))
(assert (forall (($generated@@410 T@U) ($generated@@411 T@U) ($generated@@412 T@U) ($generated@@413 T@U) ) (!  (=> (and (and (and (= (type $generated@@410) ($generated@@311 $generated@@153 $generated@@153)) (= (type $generated@@411) $generated@@64)) (= (type $generated@@412) $generated@@64)) (= (type $generated@@413) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@74 $generated@@410 ($generated@@407 $generated@@411 $generated@@412) $generated@@413) (forall (($generated@@414 T@U) ) (!  (=> (and (= (type $generated@@414) $generated@@153) ($generated@@0 ($generated@@81 ($generated@@309 $generated@@410) $generated@@414))) (and ($generated@@260 ($generated@@81 ($generated@@382 $generated@@410) $generated@@414) $generated@@412 $generated@@413) ($generated@@260 $generated@@414 $generated@@411 $generated@@413)))
 :pattern ( ($generated@@81 ($generated@@382 $generated@@410) $generated@@414))
 :pattern ( ($generated@@81 ($generated@@309 $generated@@410) $generated@@414))
))))
 :pattern ( ($generated@@74 $generated@@410 ($generated@@407 $generated@@411 $generated@@412) $generated@@413))
)))
(assert  (=> (<= 0 $generated@@415) (forall (($generated@@417 T@U) ($generated@@418 Int) ($generated@@419 Real) ) (!  (=> (and (= (type $generated@@417) $generated@@134) (or ($generated@@416 $generated@@418 $generated@@419) (not (= 0 $generated@@415)))) true)
 :pattern ( ($generated@@132 $generated@@417 $generated@@418 $generated@@419))
))))
(assert (forall (($generated@@421 T@T) ) (! (= (type ($generated@@420 $generated@@421)) ($generated@@76 $generated@@421 $generated@@4))
 :pattern ( ($generated@@420 $generated@@421))
)))
(assert (forall (($generated@@422 T@U) ) (! (let (($generated@@423 ($generated@@313 (type $generated@@422))))
(let (($generated@@424 ($generated@@312 (type $generated@@422))))
 (=> (= (type $generated@@422) ($generated@@311 $generated@@424 $generated@@423)) (= (= $generated@@422 ($generated@@310 $generated@@424 $generated@@423)) (= ($generated@@309 $generated@@422) ($generated@@420 $generated@@424))))))
 :pattern ( ($generated@@309 $generated@@422))
)))
(assert (forall (($generated@@425 T@U) ) (! (let (($generated@@426 ($generated@@313 (type $generated@@425))))
(let (($generated@@427 ($generated@@312 (type $generated@@425))))
 (=> (= (type $generated@@425) ($generated@@311 $generated@@427 $generated@@426)) (= (= $generated@@425 ($generated@@310 $generated@@427 $generated@@426)) (= ($generated@@345 $generated@@425) ($generated@@420 $generated@@426))))))
 :pattern ( ($generated@@345 $generated@@425))
)))
(assert (forall (($generated@@428 T@U) ) (! (let (($generated@@429 ($generated@@313 (type $generated@@428))))
(let (($generated@@430 ($generated@@312 (type $generated@@428))))
 (=> (= (type $generated@@428) ($generated@@311 $generated@@430 $generated@@429)) (= (= $generated@@428 ($generated@@310 $generated@@430 $generated@@429)) (= ($generated@@381 $generated@@428) ($generated@@420 $generated@@153))))))
 :pattern ( ($generated@@381 $generated@@428))
)))
(assert (forall (($generated@@431 T@U) ) (! (let (($generated@@432 ($generated@@295 (type $generated@@431))))
(let (($generated@@433 ($generated@@294 (type $generated@@431))))
 (=> (= (type $generated@@431) ($generated@@293 $generated@@433 $generated@@432)) (or (= $generated@@431 ($generated@@292 $generated@@433 $generated@@432)) (exists (($generated@@434 T@U) ($generated@@435 T@U) ) (!  (and (and (= (type $generated@@434) $generated@@153) (= (type $generated@@435) $generated@@153)) ($generated@@0 ($generated@@81 ($generated@@370 $generated@@431) ($generated@@280 ($generated@@231 $generated@@434 $generated@@435)))))
 :no-pattern (type $generated@@434)
 :no-pattern (type $generated@@435)
 :no-pattern ($generated $generated@@434)
 :no-pattern ($generated@@0 $generated@@434)
 :no-pattern ($generated $generated@@435)
 :no-pattern ($generated@@0 $generated@@435)
))))))
 :pattern ( ($generated@@370 $generated@@431))
)))
(assert (forall (($generated@@436 T@U) ) (! (let (($generated@@437 ($generated@@313 (type $generated@@436))))
(let (($generated@@438 ($generated@@312 (type $generated@@436))))
 (=> (= (type $generated@@436) ($generated@@311 $generated@@438 $generated@@437)) (or (= $generated@@436 ($generated@@310 $generated@@438 $generated@@437)) (exists (($generated@@439 T@U) ($generated@@440 T@U) ) (!  (and (and (= (type $generated@@439) $generated@@153) (= (type $generated@@440) $generated@@153)) ($generated@@0 ($generated@@81 ($generated@@381 $generated@@436) ($generated@@280 ($generated@@231 $generated@@439 $generated@@440)))))
 :no-pattern (type $generated@@439)
 :no-pattern (type $generated@@440)
 :no-pattern ($generated $generated@@439)
 :no-pattern ($generated@@0 $generated@@439)
 :no-pattern ($generated $generated@@440)
 :no-pattern ($generated@@0 $generated@@440)
))))))
 :pattern ( ($generated@@381 $generated@@436))
)))
(assert (forall (($generated@@441 T@U) ) (!  (=> (and (= (type $generated@@441) $generated@@153) ($generated@@232 $generated@@441 $generated@@46)) (and (= ($generated@@280 ($generated@@371 $generated@@2 $generated@@441)) $generated@@441) ($generated@@140 ($generated@@371 $generated@@2 $generated@@441) $generated@@46)))
 :pattern ( ($generated@@232 $generated@@441 $generated@@46))
)))
(assert (forall (($generated@@442 T@U) ) (!  (=> (and (= (type $generated@@442) $generated@@153) ($generated@@232 $generated@@442 $generated@@47)) (and (= ($generated@@280 ($generated@@371 $generated@@3 $generated@@442)) $generated@@442) ($generated@@140 ($generated@@371 $generated@@3 $generated@@442) $generated@@47)))
 :pattern ( ($generated@@232 $generated@@442 $generated@@47))
)))
(assert (forall (($generated@@443 T@U) ) (!  (=> (and (= (type $generated@@443) $generated@@153) ($generated@@232 $generated@@443 $generated@@44)) (and (= ($generated@@280 ($generated@@371 $generated@@4 $generated@@443)) $generated@@443) ($generated@@140 ($generated@@371 $generated@@4 $generated@@443) $generated@@44)))
 :pattern ( ($generated@@232 $generated@@443 $generated@@44))
)))
(assert (= ($generated@@1 $generated@@444) 21))
(assert (forall (($generated@@445 T@U) ) (!  (=> (and (= (type $generated@@445) $generated@@153) ($generated@@232 $generated@@445 $generated@@45)) (and (= ($generated@@280 ($generated@@371 $generated@@444 $generated@@445)) $generated@@445) ($generated@@140 ($generated@@371 $generated@@444 $generated@@445) $generated@@45)))
 :pattern ( ($generated@@232 $generated@@445 $generated@@45))
)))
(assert (forall (($generated@@446 T@U) ($generated@@447 T@U) ) (!  (=> (= (type $generated@@447) $generated@@64) (= ($generated@@232 ($generated@@280 $generated@@446) $generated@@447) ($generated@@140 $generated@@446 $generated@@447)))
 :pattern ( ($generated@@232 ($generated@@280 $generated@@446) $generated@@447))
)))
(assert (forall (($generated@@448 T@U) ) (! (let (($generated@@449 ($generated@@79 (type $generated@@448))))
 (=> (= (type $generated@@448) ($generated@@76 $generated@@449 $generated@@2)) (<= 0 ($generated@@285 $generated@@448))))
 :pattern ( ($generated@@285 $generated@@448))
)))
(assert (forall (($generated@@450 T@U) ) (! (let (($generated@@451 ($generated@@275 (type $generated@@450))))
 (=> (= (type $generated@@450) ($generated@@274 $generated@@451)) (<= 0 ($generated@@273 $generated@@450))))
 :pattern ( ($generated@@273 $generated@@450))
)))
(assert (forall (($generated@@453 T@U) ) (! (= (type ($generated@@452 $generated@@453)) $generated@@64)
 :pattern ( ($generated@@452 $generated@@453))
)))
(assert (forall (($generated@@454 T@U) ($generated@@455 T@U) ) (!  (=> (and (= (type $generated@@454) $generated@@64) (= (type $generated@@455) $generated@@64)) (= ($generated@@452 ($generated@@399 $generated@@454 $generated@@455)) $generated@@454))
 :pattern ( ($generated@@399 $generated@@454 $generated@@455))
)))
(assert (forall (($generated@@457 T@U) ) (! (= (type ($generated@@456 $generated@@457)) $generated@@64)
 :pattern ( ($generated@@456 $generated@@457))
)))
(assert (forall (($generated@@458 T@U) ($generated@@459 T@U) ) (!  (=> (and (= (type $generated@@458) $generated@@64) (= (type $generated@@459) $generated@@64)) (= ($generated@@456 ($generated@@399 $generated@@458 $generated@@459)) $generated@@459))
 :pattern ( ($generated@@399 $generated@@458 $generated@@459))
)))
(assert (forall (($generated@@460 T@U) ($generated@@461 T@U) ) (!  (=> (and (= (type $generated@@460) $generated@@64) (= (type $generated@@461) $generated@@64)) (= ($generated@@72 ($generated@@399 $generated@@460 $generated@@461)) $generated@@58))
 :pattern ( ($generated@@399 $generated@@460 $generated@@461))
)))
(assert (forall (($generated@@463 T@U) ) (! (= (type ($generated@@462 $generated@@463)) $generated@@64)
 :pattern ( ($generated@@462 $generated@@463))
)))
(assert (forall (($generated@@464 T@U) ($generated@@465 T@U) ) (!  (=> (and (= (type $generated@@464) $generated@@64) (= (type $generated@@465) $generated@@64)) (= ($generated@@462 ($generated@@407 $generated@@464 $generated@@465)) $generated@@464))
 :pattern ( ($generated@@407 $generated@@464 $generated@@465))
)))
(assert (forall (($generated@@467 T@U) ) (! (= (type ($generated@@466 $generated@@467)) $generated@@64)
 :pattern ( ($generated@@466 $generated@@467))
)))
(assert (forall (($generated@@468 T@U) ($generated@@469 T@U) ) (!  (=> (and (= (type $generated@@468) $generated@@64) (= (type $generated@@469) $generated@@64)) (= ($generated@@466 ($generated@@407 $generated@@468 $generated@@469)) $generated@@469))
 :pattern ( ($generated@@407 $generated@@468 $generated@@469))
)))
(assert (forall (($generated@@470 T@U) ($generated@@471 T@U) ) (!  (=> (and (= (type $generated@@470) $generated@@64) (= (type $generated@@471) $generated@@64)) (= ($generated@@72 ($generated@@407 $generated@@470 $generated@@471)) $generated@@59))
 :pattern ( ($generated@@407 $generated@@470 $generated@@471))
)))
(assert (forall (($generated@@472 T@U) ($generated@@473 T@U) ) (!  (=> (and (= (type $generated@@472) $generated@@153) (= (type $generated@@473) $generated@@153)) (= ($generated@@266 ($generated@@231 $generated@@472 $generated@@473)) $generated@@61))
 :pattern ( ($generated@@231 $generated@@472 $generated@@473))
)))
(assert (forall (($generated@@475 T@U) ) (! (= (type ($generated@@474 $generated@@475)) $generated@@64)
 :pattern ( ($generated@@474 $generated@@475))
)))
(assert (forall (($generated@@476 T@U) ($generated@@477 T@U) ) (!  (=> (and (= (type $generated@@476) $generated@@64) (= (type $generated@@477) $generated@@64)) (= ($generated@@474 ($generated@@143 $generated@@476 $generated@@477)) $generated@@476))
 :pattern ( ($generated@@143 $generated@@476 $generated@@477))
)))
(assert (forall (($generated@@479 T@U) ) (! (= (type ($generated@@478 $generated@@479)) $generated@@64)
 :pattern ( ($generated@@478 $generated@@479))
)))
(assert (forall (($generated@@480 T@U) ($generated@@481 T@U) ) (!  (=> (and (= (type $generated@@480) $generated@@64) (= (type $generated@@481) $generated@@64)) (= ($generated@@478 ($generated@@143 $generated@@480 $generated@@481)) $generated@@481))
 :pattern ( ($generated@@143 $generated@@480 $generated@@481))
)))
(assert (forall (($generated@@482 T@U) ($generated@@483 T@U) ) (!  (=> (and (= (type $generated@@482) $generated@@153) (= (type $generated@@483) $generated@@153)) (= ($generated@@151 ($generated@@231 $generated@@482 $generated@@483)) $generated@@482))
 :pattern ( ($generated@@231 $generated@@482 $generated@@483))
)))
(assert (forall (($generated@@484 T@U) ($generated@@485 T@U) ) (!  (=> (and (= (type $generated@@484) $generated@@153) (= (type $generated@@485) $generated@@153)) (= ($generated@@152 ($generated@@231 $generated@@484 $generated@@485)) $generated@@485))
 :pattern ( ($generated@@231 $generated@@484 $generated@@485))
)))
(assert  (and (forall (($generated@@488 T@U) ) (! (= (type ($generated@@486 $generated@@488)) $generated@@64)
 :pattern ( ($generated@@486 $generated@@488))
)) (forall (($generated@@489 T@U) ($generated@@490 Int) ) (! (let (($generated@@491 ($generated@@275 (type $generated@@489))))
(= (type ($generated@@487 $generated@@489 $generated@@490)) $generated@@491))
 :pattern ( ($generated@@487 $generated@@489 $generated@@490))
))))
(assert (forall (($generated@@492 T@U) ($generated@@493 T@U) ($generated@@494 T@U) ) (!  (=> (and (and (= (type $generated@@492) ($generated@@274 $generated@@153)) (= (type $generated@@493) $generated@@64)) (= (type $generated@@494) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@74 $generated@@492 ($generated@@486 $generated@@493) $generated@@494) (forall (($generated@@495 Int) ) (!  (=> (and (<= 0 $generated@@495) (< $generated@@495 ($generated@@273 $generated@@492))) ($generated@@260 ($generated@@487 $generated@@492 $generated@@495) $generated@@493 $generated@@494))
 :pattern ( ($generated@@487 $generated@@492 $generated@@495))
))))
 :pattern ( ($generated@@74 $generated@@492 ($generated@@486 $generated@@493) $generated@@494))
)))
(assert (forall (($generated@@497 Int) ) (! (= ($generated@@496 ($generated@@75 $generated@@497)) $generated@@497)
 :pattern ( ($generated@@75 $generated@@497))
)))
(assert (forall (($generated@@499 T@U) ) (! (= (type ($generated@@498 $generated@@499)) $generated@@64)
 :pattern ( ($generated@@498 $generated@@499))
)))
(assert (forall (($generated@@500 T@U) ) (!  (=> (= (type $generated@@500) $generated@@64) (= ($generated@@498 ($generated@@241 $generated@@500)) $generated@@500))
 :pattern ( ($generated@@241 $generated@@500))
)))
(assert (forall (($generated@@501 T@U) ) (!  (=> (= (type $generated@@501) $generated@@64) (= ($generated@@72 ($generated@@241 $generated@@501)) $generated@@54))
 :pattern ( ($generated@@241 $generated@@501))
)))
(assert (forall (($generated@@503 T@U) ) (! (= (type ($generated@@502 $generated@@503)) $generated@@64)
 :pattern ( ($generated@@502 $generated@@503))
)))
(assert (forall (($generated@@504 T@U) ) (!  (=> (= (type $generated@@504) $generated@@64) (= ($generated@@502 ($generated@@246 $generated@@504)) $generated@@504))
 :pattern ( ($generated@@246 $generated@@504))
)))
(assert (forall (($generated@@505 T@U) ) (!  (=> (= (type $generated@@505) $generated@@64) (= ($generated@@72 ($generated@@246 $generated@@505)) $generated@@55))
 :pattern ( ($generated@@246 $generated@@505))
)))
(assert (forall (($generated@@507 T@U) ) (! (= (type ($generated@@506 $generated@@507)) $generated@@64)
 :pattern ( ($generated@@506 $generated@@507))
)))
(assert (forall (($generated@@508 T@U) ) (!  (=> (= (type $generated@@508) $generated@@64) (= ($generated@@506 ($generated@@158 $generated@@508)) $generated@@508))
 :pattern ( ($generated@@158 $generated@@508))
)))
(assert (forall (($generated@@509 T@U) ) (!  (=> (= (type $generated@@509) $generated@@64) (= ($generated@@72 ($generated@@158 $generated@@509)) $generated@@56))
 :pattern ( ($generated@@158 $generated@@509))
)))
(assert (forall (($generated@@511 T@U) ) (! (= (type ($generated@@510 $generated@@511)) $generated@@64)
 :pattern ( ($generated@@510 $generated@@511))
)))
(assert (forall (($generated@@512 T@U) ) (!  (=> (= (type $generated@@512) $generated@@64) (= ($generated@@510 ($generated@@486 $generated@@512)) $generated@@512))
 :pattern ( ($generated@@486 $generated@@512))
)))
(assert (forall (($generated@@513 T@U) ) (!  (=> (= (type $generated@@513) $generated@@64) (= ($generated@@72 ($generated@@486 $generated@@513)) $generated@@57))
 :pattern ( ($generated@@486 $generated@@513))
)))
(assert (forall (($generated@@514 T@U) ) (! (let (($generated@@515 (type $generated@@514)))
(= ($generated@@371 $generated@@515 ($generated@@280 $generated@@514)) $generated@@514))
 :pattern ( ($generated@@280 $generated@@514))
)))
(assert (forall (($generated@@516 T@U) ($generated@@517 T@U) ($generated@@518 T@U) ) (!  (=> (and (and (= (type $generated@@516) ($generated@@293 $generated@@153 $generated@@153)) (= (type $generated@@517) $generated@@64)) (= (type $generated@@518) $generated@@64)) (= ($generated@@140 $generated@@516 ($generated@@399 $generated@@517 $generated@@518)) (forall (($generated@@519 T@U) ) (!  (=> (and (= (type $generated@@519) $generated@@153) ($generated@@0 ($generated@@81 ($generated@@291 $generated@@516) $generated@@519))) (and ($generated@@232 ($generated@@81 ($generated@@372 $generated@@516) $generated@@519) $generated@@518) ($generated@@232 $generated@@519 $generated@@517)))
 :pattern ( ($generated@@81 ($generated@@372 $generated@@516) $generated@@519))
 :pattern ( ($generated@@81 ($generated@@291 $generated@@516) $generated@@519))
))))
 :pattern ( ($generated@@140 $generated@@516 ($generated@@399 $generated@@517 $generated@@518)))
)))
(assert (forall (($generated@@520 T@U) ($generated@@521 T@U) ($generated@@522 T@U) ) (!  (=> (and (and (= (type $generated@@520) ($generated@@311 $generated@@153 $generated@@153)) (= (type $generated@@521) $generated@@64)) (= (type $generated@@522) $generated@@64)) (= ($generated@@140 $generated@@520 ($generated@@407 $generated@@521 $generated@@522)) (forall (($generated@@523 T@U) ) (!  (=> (and (= (type $generated@@523) $generated@@153) ($generated@@0 ($generated@@81 ($generated@@309 $generated@@520) $generated@@523))) (and ($generated@@232 ($generated@@81 ($generated@@382 $generated@@520) $generated@@523) $generated@@522) ($generated@@232 $generated@@523 $generated@@521)))
 :pattern ( ($generated@@81 ($generated@@382 $generated@@520) $generated@@523))
 :pattern ( ($generated@@81 ($generated@@309 $generated@@520) $generated@@523))
))))
 :pattern ( ($generated@@140 $generated@@520 ($generated@@407 $generated@@521 $generated@@522)))
)))
(assert (forall (($generated@@526 T@U) ($generated@@527 T@U) ) (!  (=> (and (= (type $generated@@526) $generated@@153) (= (type $generated@@527) $generated@@153)) (< ($generated@@524 $generated@@526) ($generated@@525 ($generated@@231 $generated@@526 $generated@@527))))
 :pattern ( ($generated@@231 $generated@@526 $generated@@527))
)))
(assert (forall (($generated@@528 T@U) ($generated@@529 T@U) ) (!  (=> (and (= (type $generated@@528) $generated@@153) (= (type $generated@@529) $generated@@153)) (< ($generated@@524 $generated@@529) ($generated@@525 ($generated@@231 $generated@@528 $generated@@529))))
 :pattern ( ($generated@@231 $generated@@528 $generated@@529))
)))
(assert (forall (($generated@@530 T@U) ($generated@@531 T@U) ($generated@@532 T@U) ) (!  (=> (and (and (and (= (type $generated@@530) $generated@@153) (= (type $generated@@531) $generated@@64)) (= (type $generated@@532) $generated@@64)) ($generated@@232 $generated@@530 ($generated@@399 $generated@@531 $generated@@532))) (and (= ($generated@@280 ($generated@@371 ($generated@@293 $generated@@153 $generated@@153) $generated@@530)) $generated@@530) ($generated@@140 ($generated@@371 ($generated@@293 $generated@@153 $generated@@153) $generated@@530) ($generated@@399 $generated@@531 $generated@@532))))
 :pattern ( ($generated@@232 $generated@@530 ($generated@@399 $generated@@531 $generated@@532)))
)))
(assert (forall (($generated@@533 T@U) ($generated@@534 T@U) ($generated@@535 T@U) ) (!  (=> (and (and (and (= (type $generated@@533) $generated@@153) (= (type $generated@@534) $generated@@64)) (= (type $generated@@535) $generated@@64)) ($generated@@232 $generated@@533 ($generated@@407 $generated@@534 $generated@@535))) (and (= ($generated@@280 ($generated@@371 ($generated@@311 $generated@@153 $generated@@153) $generated@@533)) $generated@@533) ($generated@@140 ($generated@@371 ($generated@@311 $generated@@153 $generated@@153) $generated@@533) ($generated@@407 $generated@@534 $generated@@535))))
 :pattern ( ($generated@@232 $generated@@533 ($generated@@407 $generated@@534 $generated@@535)))
)))
(assert (forall (($generated@@536 T@U) ($generated@@537 T@U) ($generated@@538 T@U) ) (!  (=> (and (and (and (= (type $generated@@536) $generated@@64) (= (type $generated@@537) $generated@@64)) (= (type $generated@@538) $generated@@153)) ($generated@@232 $generated@@538 ($generated@@143 $generated@@536 $generated@@537))) (and (= ($generated@@280 ($generated@@371 $generated@@144 $generated@@538)) $generated@@538) ($generated@@140 ($generated@@371 $generated@@144 $generated@@538) ($generated@@143 $generated@@536 $generated@@537))))
 :pattern ( ($generated@@232 $generated@@538 ($generated@@143 $generated@@536 $generated@@537)))
)))
(assert (forall (($generated@@539 T@U) ) (! (let (($generated@@540 (type $generated@@539)))
 (not ($generated@@0 ($generated@@81 ($generated@@420 $generated@@540) $generated@@539))))
 :pattern ( (let (($generated@@540 (type $generated@@539)))
($generated@@81 ($generated@@420 $generated@@540) $generated@@539)))
)))
(assert (forall (($generated@@542 T@U) ) (! (= (type ($generated@@541 $generated@@542)) $generated@@69)
 :pattern ( ($generated@@541 $generated@@542))
)))
(assert (forall (($generated@@543 T@U) ($generated@@544 T@U) ) (!  (=> (and (= (type $generated@@543) $generated@@64) (= (type $generated@@544) $generated@@64)) (and (= ($generated@@72 ($generated@@143 $generated@@543 $generated@@544)) $generated@@62) (= ($generated@@541 ($generated@@143 $generated@@543 $generated@@544)) $generated@@63)))
 :pattern ( ($generated@@143 $generated@@543 $generated@@544))
)))
(assert (forall (($generated@@545 T@U) ) (!  (=> (= (type $generated@@545) $generated@@144) (= ($generated@@524 ($generated@@280 $generated@@545)) ($generated@@525 $generated@@545)))
 :pattern ( ($generated@@524 ($generated@@280 $generated@@545)))
)))
(assert (forall (($generated@@546 T@U) ) (!  (=> (and (= (type $generated@@546) $generated@@153) ($generated@@232 $generated@@546 ($generated@@75 0))) (and (= ($generated@@280 ($generated@@371 $generated@@2 $generated@@546)) $generated@@546) ($generated@@140 ($generated@@371 ($generated@@76 $generated@@153 $generated@@4) $generated@@546) ($generated@@75 0))))
 :pattern ( ($generated@@232 $generated@@546 ($generated@@75 0)))
)))
(assert (forall (($generated@@547 T@U) ($generated@@548 T@U) ) (!  (=> (and (and (= (type $generated@@547) $generated@@153) (= (type $generated@@548) $generated@@64)) ($generated@@232 $generated@@547 ($generated@@241 $generated@@548))) (and (= ($generated@@280 ($generated@@371 ($generated@@76 $generated@@153 $generated@@4) $generated@@547)) $generated@@547) ($generated@@140 ($generated@@371 ($generated@@76 $generated@@153 $generated@@4) $generated@@547) ($generated@@241 $generated@@548))))
 :pattern ( ($generated@@232 $generated@@547 ($generated@@241 $generated@@548)))
)))
(assert (forall (($generated@@549 T@U) ($generated@@550 T@U) ) (!  (=> (and (and (= (type $generated@@549) $generated@@153) (= (type $generated@@550) $generated@@64)) ($generated@@232 $generated@@549 ($generated@@246 $generated@@550))) (and (= ($generated@@280 ($generated@@371 ($generated@@76 $generated@@153 $generated@@4) $generated@@549)) $generated@@549) ($generated@@140 ($generated@@371 ($generated@@76 $generated@@153 $generated@@4) $generated@@549) ($generated@@246 $generated@@550))))
 :pattern ( ($generated@@232 $generated@@549 ($generated@@246 $generated@@550)))
)))
(assert (forall (($generated@@551 T@U) ($generated@@552 T@U) ) (!  (=> (and (and (= (type $generated@@551) $generated@@153) (= (type $generated@@552) $generated@@64)) ($generated@@232 $generated@@551 ($generated@@158 $generated@@552))) (and (= ($generated@@280 ($generated@@371 ($generated@@76 $generated@@153 $generated@@2) $generated@@551)) $generated@@551) ($generated@@140 ($generated@@371 ($generated@@76 $generated@@153 $generated@@2) $generated@@551) ($generated@@158 $generated@@552))))
 :pattern ( ($generated@@232 $generated@@551 ($generated@@158 $generated@@552)))
)))
(assert (forall (($generated@@553 T@U) ($generated@@554 T@U) ) (!  (=> (and (and (= (type $generated@@553) $generated@@153) (= (type $generated@@554) $generated@@64)) ($generated@@232 $generated@@553 ($generated@@486 $generated@@554))) (and (= ($generated@@280 ($generated@@371 ($generated@@274 $generated@@153) $generated@@553)) $generated@@553) ($generated@@140 ($generated@@371 ($generated@@274 $generated@@153) $generated@@553) ($generated@@486 $generated@@554))))
 :pattern ( ($generated@@232 $generated@@553 ($generated@@486 $generated@@554)))
)))
(assert (forall (($generated@@555 T@U) ($generated@@556 T@U) ($generated@@557 T@U) ) (!  (=> (and (and (= (type $generated@@555) ($generated@@76 $generated@@153 $generated@@2)) (= (type $generated@@556) $generated@@64)) (= (type $generated@@557) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@74 $generated@@555 ($generated@@158 $generated@@556) $generated@@557) (forall (($generated@@558 T@U) ) (!  (=> (and (= (type $generated@@558) $generated@@153) (< 0 ($generated ($generated@@81 $generated@@555 $generated@@558)))) ($generated@@260 $generated@@558 $generated@@556 $generated@@557))
 :pattern ( ($generated@@81 $generated@@555 $generated@@558))
))))
 :pattern ( ($generated@@74 $generated@@555 ($generated@@158 $generated@@556) $generated@@557))
)))
(assert (forall (($generated@@559 T@U) ($generated@@560 T@U) ($generated@@561 T@U) ) (!  (=> (and (and (and (= (type $generated@@559) $generated@@144) (= (type $generated@@560) $generated@@64)) (= (type $generated@@561) ($generated@@76 $generated@@77 $generated@@78))) (and ($generated@@259 $generated@@561) (and ($generated@@142 $generated@@559) (exists (($generated@@562 T@U) ) (!  (and (= (type $generated@@562) $generated@@64) ($generated@@74 $generated@@559 ($generated@@143 $generated@@560 $generated@@562) $generated@@561))
 :pattern ( ($generated@@74 $generated@@559 ($generated@@143 $generated@@560 $generated@@562) $generated@@561))
))))) ($generated@@260 ($generated@@151 $generated@@559) $generated@@560 $generated@@561))
 :pattern ( ($generated@@260 ($generated@@151 $generated@@559) $generated@@560 $generated@@561))
)))
(assert (forall (($generated@@563 T@U) ($generated@@564 T@U) ($generated@@565 T@U) ) (!  (=> (and (and (and (= (type $generated@@563) $generated@@144) (= (type $generated@@564) $generated@@64)) (= (type $generated@@565) ($generated@@76 $generated@@77 $generated@@78))) (and ($generated@@259 $generated@@565) (and ($generated@@142 $generated@@563) (exists (($generated@@566 T@U) ) (!  (and (= (type $generated@@566) $generated@@64) ($generated@@74 $generated@@563 ($generated@@143 $generated@@566 $generated@@564) $generated@@565))
 :pattern ( ($generated@@74 $generated@@563 ($generated@@143 $generated@@566 $generated@@564) $generated@@565))
))))) ($generated@@260 ($generated@@152 $generated@@563) $generated@@564 $generated@@565))
 :pattern ( ($generated@@260 ($generated@@152 $generated@@563) $generated@@564 $generated@@565))
)))
(assert (forall (($generated@@567 T@U) ($generated@@568 T@U) ) (!  (=> (and (= (type $generated@@567) $generated@@153) (= (type $generated@@568) $generated@@153)) (= ($generated@@231 ($generated@@255 $generated@@567) ($generated@@255 $generated@@568)) ($generated@@255 ($generated@@231 $generated@@567 $generated@@568))))
 :pattern ( ($generated@@231 ($generated@@255 $generated@@567) ($generated@@255 $generated@@568)))
)))
(assert (forall (($generated@@569 Int) ) (! (= ($generated@@280 ($generated@@8 ($generated@@251 $generated@@569))) ($generated@@255 ($generated@@280 ($generated@@8 $generated@@569))))
 :pattern ( ($generated@@280 ($generated@@8 ($generated@@251 $generated@@569))))
)))
(assert (forall (($generated@@570 Real) ) (! (= ($generated@@280 ($generated@@9 ($generated@@253 $generated@@570))) ($generated@@255 ($generated@@280 ($generated@@9 $generated@@570))))
 :pattern ( ($generated@@280 ($generated@@9 ($generated@@253 $generated@@570))))
)))
(assert (forall (($generated@@571 T@U) ) (! (= ($generated@@280 ($generated@@255 $generated@@571)) ($generated@@255 ($generated@@280 $generated@@571)))
 :pattern ( ($generated@@280 ($generated@@255 $generated@@571)))
)))
(assert  (=> (<= 0 $generated@@415) (forall (($generated@@572 T@U) ($generated@@573 Int) ($generated@@574 Real) ) (!  (=> (and (= (type $generated@@572) $generated@@134) (or ($generated@@416 ($generated@@251 $generated@@573) ($generated@@253 $generated@@574)) (not (= 0 $generated@@415)))) (and (=> (not ($generated@@0 ($generated@@255 ($generated@@11 (< $generated@@573 0))))) ($generated@@416 ($generated@@251 (- $generated@@573 1)) ($generated@@253 $generated@@574))) (= ($generated@@132 ($generated@@352 $generated@@572) ($generated@@251 $generated@@573) ($generated@@253 $generated@@574)) (ite (< $generated@@573 0) 5 ($generated@@132 ($generated@@352 $generated@@572) ($generated@@251 (- $generated@@573 1)) ($generated@@253 $generated@@574))))))
 :weight 3
 :pattern ( ($generated@@132 ($generated@@352 $generated@@572) ($generated@@251 $generated@@573) ($generated@@253 $generated@@574)))
))))
(assert (forall (($generated@@575 T@U) ) (! (let (($generated@@576 ($generated@@275 (type $generated@@575))))
 (=> (and (= (type $generated@@575) ($generated@@274 $generated@@576)) (= ($generated@@273 $generated@@575) 0)) (= $generated@@575 ($generated@@272 $generated@@576))))
 :pattern ( ($generated@@273 $generated@@575))
)))
(assert (forall (($generated@@577 T@U) ($generated@@578 T@U) ($generated@@579 T@U) ) (! (let (($generated@@580 (type $generated@@578)))
 (=> (and (and (= (type $generated@@577) ($generated@@76 $generated@@580 $generated@@2)) (= (type $generated@@579) $generated@@2)) (<= 0 ($generated $generated@@579))) (= ($generated@@285 ($generated@@82 $generated@@577 $generated@@578 $generated@@579)) (+ (- ($generated@@285 $generated@@577) ($generated ($generated@@81 $generated@@577 $generated@@578))) ($generated $generated@@579)))))
 :pattern ( ($generated@@285 ($generated@@82 $generated@@577 $generated@@578 $generated@@579)))
)))
(assert (forall (($generated@@581 T@U) ($generated@@582 T@U) ) (!  (=> (and (= (type $generated@@581) ($generated@@76 $generated@@77 $generated@@78)) (= (type $generated@@582) $generated@@2)) ($generated@@74 $generated@@582 $generated@@46 $generated@@581))
 :pattern ( ($generated@@74 $generated@@582 $generated@@46 $generated@@581))
)))
(assert (forall (($generated@@583 T@U) ($generated@@584 T@U) ) (!  (=> (and (= (type $generated@@583) ($generated@@76 $generated@@77 $generated@@78)) (= (type $generated@@584) $generated@@3)) ($generated@@74 $generated@@584 $generated@@47 $generated@@583))
 :pattern ( ($generated@@74 $generated@@584 $generated@@47 $generated@@583))
)))
(assert (forall (($generated@@585 T@U) ($generated@@586 T@U) ) (!  (=> (and (= (type $generated@@585) ($generated@@76 $generated@@77 $generated@@78)) (= (type $generated@@586) $generated@@4)) ($generated@@74 $generated@@586 $generated@@44 $generated@@585))
 :pattern ( ($generated@@74 $generated@@586 $generated@@44 $generated@@585))
)))
(assert (forall (($generated@@587 T@U) ($generated@@588 T@U) ) (!  (=> (and (= (type $generated@@587) ($generated@@76 $generated@@77 $generated@@78)) (= (type $generated@@588) $generated@@444)) ($generated@@74 $generated@@588 $generated@@45 $generated@@587))
 :pattern ( ($generated@@74 $generated@@588 $generated@@45 $generated@@587))
)))
(assert (forall (($generated@@589 T@U) ($generated@@590 T@U) ) (!  (=> (and (= (type $generated@@589) ($generated@@76 $generated@@77 $generated@@78)) (= (type $generated@@590) $generated@@153)) ($generated@@74 $generated@@590 $generated@@48 $generated@@589))
 :pattern ( ($generated@@74 $generated@@590 $generated@@48 $generated@@589))
)))
(assert (forall (($generated@@591 T@U) ($generated@@592 T@U) ) (!  (=> (and (= (type $generated@@591) ($generated@@274 $generated@@153)) (= (type $generated@@592) $generated@@64)) (= ($generated@@140 $generated@@591 ($generated@@486 $generated@@592)) (forall (($generated@@593 Int) ) (!  (=> (and (<= 0 $generated@@593) (< $generated@@593 ($generated@@273 $generated@@591))) ($generated@@232 ($generated@@487 $generated@@591 $generated@@593) $generated@@592))
 :pattern ( ($generated@@487 $generated@@591 $generated@@593))
))))
 :pattern ( ($generated@@140 $generated@@591 ($generated@@486 $generated@@592)))
)))
(assert (forall (($generated@@595 T@U) ($generated@@596 Int) ) (!  (=> (= (type $generated@@595) ($generated@@274 $generated@@153)) (=> (and (<= 0 $generated@@596) (< $generated@@596 ($generated@@273 $generated@@595))) (< ($generated@@525 ($generated@@371 $generated@@144 ($generated@@487 $generated@@595 $generated@@596))) ($generated@@594 $generated@@595))))
 :pattern ( ($generated@@525 ($generated@@371 $generated@@144 ($generated@@487 $generated@@595 $generated@@596))))
)))
(assert (forall (($generated@@597 T@U) ($generated@@598 T@U) ($generated@@599 T@U) ) (!  (=> (and (and (and (= (type $generated@@597) ($generated@@293 $generated@@153 $generated@@153)) (= (type $generated@@598) $generated@@64)) (= (type $generated@@599) $generated@@64)) ($generated@@140 $generated@@597 ($generated@@399 $generated@@598 $generated@@599))) (and (and ($generated@@140 ($generated@@291 $generated@@597) ($generated@@241 $generated@@598)) ($generated@@140 ($generated@@334 $generated@@597) ($generated@@241 $generated@@599))) ($generated@@140 ($generated@@370 $generated@@597) ($generated@@241 ($generated@@143 $generated@@598 $generated@@599)))))
 :pattern ( ($generated@@140 $generated@@597 ($generated@@399 $generated@@598 $generated@@599)))
)))
(assert (forall (($generated@@600 T@U) ($generated@@601 T@U) ($generated@@602 T@U) ) (!  (=> (and (and (and (= (type $generated@@600) ($generated@@311 $generated@@153 $generated@@153)) (= (type $generated@@601) $generated@@64)) (= (type $generated@@602) $generated@@64)) ($generated@@140 $generated@@600 ($generated@@407 $generated@@601 $generated@@602))) (and (and ($generated@@140 ($generated@@309 $generated@@600) ($generated@@246 $generated@@601)) ($generated@@140 ($generated@@345 $generated@@600) ($generated@@246 $generated@@602))) ($generated@@140 ($generated@@381 $generated@@600) ($generated@@246 ($generated@@143 $generated@@601 $generated@@602)))))
 :pattern ( ($generated@@140 $generated@@600 ($generated@@407 $generated@@601 $generated@@602)))
)))
(assert (forall (($generated@@603 T@U) ) (!  (=> (= (type $generated@@603) $generated@@2) ($generated@@140 $generated@@603 $generated@@46))
 :pattern ( ($generated@@140 $generated@@603 $generated@@46))
)))
(assert (forall (($generated@@604 T@U) ) (!  (=> (= (type $generated@@604) $generated@@3) ($generated@@140 $generated@@604 $generated@@47))
 :pattern ( ($generated@@140 $generated@@604 $generated@@47))
)))
(assert (forall (($generated@@605 T@U) ) (!  (=> (= (type $generated@@605) $generated@@4) ($generated@@140 $generated@@605 $generated@@44))
 :pattern ( ($generated@@140 $generated@@605 $generated@@44))
)))
(assert (forall (($generated@@606 T@U) ) (!  (=> (= (type $generated@@606) $generated@@444) ($generated@@140 $generated@@606 $generated@@45))
 :pattern ( ($generated@@140 $generated@@606 $generated@@45))
)))
(assert (forall (($generated@@607 T@U) ) (!  (=> (= (type $generated@@607) $generated@@153) ($generated@@140 $generated@@607 $generated@@48))
 :pattern ( ($generated@@140 $generated@@607 $generated@@48))
)))
(assert  (=> (<= 0 $generated@@415) (forall (($generated@@608 T@U) ($generated@@609 Int) ($generated@@610 Real) ) (!  (=> (and (= (type $generated@@608) $generated@@134) (or ($generated@@416 $generated@@609 $generated@@610) (not (= 0 $generated@@415)))) (and (=> (<= 0 $generated@@609) ($generated@@416 (- $generated@@609 1) $generated@@610)) (= ($generated@@132 ($generated@@352 $generated@@608) $generated@@609 $generated@@610) (ite (< $generated@@609 0) 5 ($generated@@132 $generated@@608 (- $generated@@609 1) $generated@@610)))))
 :pattern ( ($generated@@132 ($generated@@352 $generated@@608) $generated@@609 $generated@@610))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@611 () Int)
(declare-fun $generated@@612 () Int)
(declare-fun $generated@@613 () T@U)
(declare-fun $generated@@614 () Real)
(declare-fun $generated@@615 () T@U)
(declare-fun $generated@@616 () T@U)
(declare-fun $generated@@617 () T@U)
(declare-fun $generated@@618 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@613) ($generated@@76 $generated@@77 $generated@@78)) (= (type $generated@@615) ($generated@@165 $generated@@77 $generated@@4))) (= (type $generated@@616) $generated@@77)) (= (type $generated@@617) ($generated@@165 $generated@@77 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@619  (=> (and (and (<= 0 $generated@@611) (= $generated@@612 (- $generated@@611 1))) (and ($generated@@74 ($generated@@8 $generated@@612) $generated@@46 $generated@@613) ($generated@@74 ($generated@@9 $generated@@614) $generated@@47 $generated@@613))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (<= 0 $generated@@611) (= $generated@@612 $generated@@611))) (=> (or (<= 0 $generated@@611) (= $generated@@612 $generated@@611)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (or (<= 0.0 $generated@@614) (< $generated@@612 $generated@@611)) (= $generated@@614 $generated@@614))) (=> (or (or (<= 0.0 $generated@@614) (< $generated@@612 $generated@@611)) (= $generated@@614 $generated@@614)) (=> (= (ControlFlow 0 4) (- 0 3)) (or (< $generated@@612 $generated@@611) (and (= $generated@@612 $generated@@611) (<= $generated@@614 (- $generated@@614 1.0))))))))))))
(let (($generated@@620 true))
(let (($generated@@621  (=> (= $generated@@615 ($generated@@219 $generated@@616 $generated@@613 $generated@@60 false)) (and (=> (= (ControlFlow 0 7) 2) $generated@@620) (=> (= (ControlFlow 0 7) 4) $generated@@619)))))
(let (($generated@@622 true))
(let (($generated@@623  (=> (= $generated@@617 ($generated@@164 $generated@@616 $generated@@613 $generated@@60 false)) (and (=> (= (ControlFlow 0 8) 1) $generated@@622) (=> (= (ControlFlow 0 8) 7) $generated@@621)))))
(let (($generated@@624  (=> (and (and ($generated@@259 $generated@@613) ($generated@@618 $generated@@613)) (and (= 0 $generated@@415) (= (ControlFlow 0 9) 8))) $generated@@623)))
$generated@@624)))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Real) Int)
(declare-fun $generated@@159 (Int) Int)
(declare-fun $generated@@161 (Real) Real)
(declare-fun $generated@@163 (T@U) T@U)
(declare-fun $generated@@167 (T@U) T@U)
(declare-fun $generated@@168 (T@T T@U) T@U)
(declare-fun $generated@@169 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Real) ) (! (= ($generated@@157 $generated@@158) (to_int $generated@@158))
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 Int) ) (! (= ($generated@@159 $generated@@160) $generated@@160)
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 Real) ) (! (= ($generated@@161 $generated@@162) $generated@@162)
 :pattern ( ($generated@@161 $generated@@162))
)))
(assert (forall (($generated@@164 T@U) ) (! (let (($generated@@165 (type $generated@@164)))
(= (type ($generated@@163 $generated@@164)) $generated@@165))
 :pattern ( ($generated@@163 $generated@@164))
)))
(assert (forall (($generated@@166 T@U) ) (! (= ($generated@@163 $generated@@166) $generated@@166)
 :pattern ( ($generated@@163 $generated@@166))
)))
(assert  (and (and (= ($generated@@1 $generated@@169) 11) (forall (($generated@@170 T@U) ) (! (= (type ($generated@@167 $generated@@170)) $generated@@169)
 :pattern ( ($generated@@167 $generated@@170))
))) (forall (($generated@@171 T@T) ($generated@@172 T@U) ) (! (= (type ($generated@@168 $generated@@171 $generated@@172)) $generated@@171)
 :pattern ( ($generated@@168 $generated@@171 $generated@@172))
))))
(assert (forall (($generated@@173 T@U) ) (! (let (($generated@@174 (type $generated@@173)))
(= ($generated@@168 $generated@@174 ($generated@@167 $generated@@173)) $generated@@173))
 :pattern ( ($generated@@167 $generated@@173))
)))
(assert (forall (($generated@@175 Int) ) (! (= ($generated@@167 ($generated@@8 ($generated@@159 $generated@@175))) ($generated@@163 ($generated@@167 ($generated@@8 $generated@@175))))
 :pattern ( ($generated@@167 ($generated@@8 ($generated@@159 $generated@@175))))
)))
(assert (forall (($generated@@176 Real) ) (! (= ($generated@@167 ($generated@@9 ($generated@@161 $generated@@176))) ($generated@@163 ($generated@@167 ($generated@@9 $generated@@176))))
 :pattern ( ($generated@@167 ($generated@@9 ($generated@@161 $generated@@176))))
)))
(assert (forall (($generated@@177 T@U) ) (! (= ($generated@@167 ($generated@@163 $generated@@177)) ($generated@@163 ($generated@@167 $generated@@177)))
 :pattern ( ($generated@@167 ($generated@@163 $generated@@177)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 (T@U) Bool)
(declare-fun $generated@@183 (T@U) Bool)
(declare-fun $generated@@184 () Int)
(assert  (and (and (and (= (type $generated@@178) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@179) $generated@@47)) (= (type $generated@@180) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@181) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@185  (=> (= $generated@@178 ($generated@@45 $generated@@179 $generated@@180 $generated@@181 false)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (= ($generated@@159 ($generated@@157 ($generated@@161 51.500277))) ($generated@@159 51))) (=> (= ($generated@@159 ($generated@@157 ($generated@@161 51.500277))) ($generated@@159 51)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= ($generated@@159 ($generated@@157 ($generated@@161 (- 0.0 0.194771)))) ($generated@@159 (- 0 1)))) (=> (= ($generated@@159 ($generated@@157 ($generated@@161 (- 0.0 0.194771)))) ($generated@@159 (- 0 1))) (=> (= (ControlFlow 0 2) (- 0 1)) (= ($generated@@159 (- 0 ($generated@@157 ($generated@@161 0.194771)))) ($generated@@159 0))))))))))
(let (($generated@@186  (=> (and (and ($generated@@182 $generated@@180) ($generated@@183 $generated@@180)) (and (= 0 $generated@@184) (= (ControlFlow 0 5) 2))) $generated@@185)))
$generated@@186)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
