(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (T@U) T@U)
(declare-fun $generated@@161 (Int) T@U)
(declare-fun $generated@@162 (T@U) Bool)
(declare-fun $generated@@163 (T@U) Int)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@168 (T@U) T@U)
(declare-fun $generated@@169 (T@T T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 T@U) ) (! (let (($generated@@159 (type $generated@@158)))
(= (type ($generated@@157 $generated@@158)) $generated@@159))
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (= ($generated@@157 $generated@@160) $generated@@160)
 :pattern ( ($generated@@157 $generated@@160))
)))
(assert  (and (= ($generated@@1 $generated@@164) 11) (forall (($generated@@165 Int) ) (! (= (type ($generated@@161 $generated@@165)) $generated@@164)
 :pattern ( ($generated@@161 $generated@@165))
))))
(assert (forall (($generated@@166 Int) ) (!  (=> (<= 0 $generated@@166) (and ($generated@@162 ($generated@@161 $generated@@166)) (= ($generated@@163 ($generated@@161 $generated@@166)) $generated@@166)))
 :pattern ( ($generated@@161 $generated@@166))
)))
(assert (forall (($generated@@167 T@U) ) (!  (=> (= (type $generated@@167) $generated@@164) (<= 0 ($generated@@163 $generated@@167)))
 :pattern ( ($generated@@163 $generated@@167))
)))
(assert  (and (forall (($generated@@170 T@U) ) (! (= (type ($generated@@168 $generated@@170)) $generated@@164)
 :pattern ( ($generated@@168 $generated@@170))
)) (forall (($generated@@171 T@T) ($generated@@172 T@U) ) (! (= (type ($generated@@169 $generated@@171 $generated@@172)) $generated@@171)
 :pattern ( ($generated@@169 $generated@@171 $generated@@172))
))))
(assert (forall (($generated@@173 T@U) ) (! (let (($generated@@174 (type $generated@@173)))
(= ($generated@@169 $generated@@174 ($generated@@168 $generated@@173)) $generated@@173))
 :pattern ( ($generated@@168 $generated@@173))
)))
(assert (forall (($generated@@175 T@U) ) (!  (=> (and (= (type $generated@@175) $generated@@164) ($generated@@162 $generated@@175)) (= $generated@@175 ($generated@@161 ($generated@@163 $generated@@175))))
 :pattern ( ($generated@@163 $generated@@175))
 :pattern ( ($generated@@162 $generated@@175))
)))
(assert (forall (($generated@@176 T@U) ) (! (= ($generated@@168 ($generated@@157 $generated@@176)) ($generated@@157 ($generated@@168 $generated@@176)))
 :pattern ( ($generated@@168 ($generated@@157 $generated@@176)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 (T@U) Bool)
(declare-fun $generated@@182 (T@U) Bool)
(declare-fun $generated@@183 () Int)
(assert  (and (and (and (= (type $generated@@177) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@178) $generated@@47)) (= (type $generated@@179) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@180) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@184  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@0 ($generated@@157 ($generated@@11 (not (= ($generated@@161 0) ($generated@@161 16)))))))))
(let (($generated@@185 true))
(let (($generated@@186  (=> (= $generated@@177 ($generated@@45 $generated@@178 $generated@@179 $generated@@180 false)) (and (=> (= (ControlFlow 0 4) 1) $generated@@185) (=> (= (ControlFlow 0 4) 3) $generated@@184)))))
(let (($generated@@187  (=> (and (and ($generated@@181 $generated@@179) ($generated@@182 $generated@@179)) (and (= 0 $generated@@183) (= (ControlFlow 0 5) 4))) $generated@@186)))
$generated@@187)))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (T@U) T@U)
(declare-fun $generated@@161 (Int) T@U)
(declare-fun $generated@@162 (T@U) Bool)
(declare-fun $generated@@163 (T@U) Int)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@168 (T@U) T@U)
(declare-fun $generated@@169 (T@T T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 T@U) ) (! (let (($generated@@159 (type $generated@@158)))
(= (type ($generated@@157 $generated@@158)) $generated@@159))
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (= ($generated@@157 $generated@@160) $generated@@160)
 :pattern ( ($generated@@157 $generated@@160))
)))
(assert  (and (= ($generated@@1 $generated@@164) 11) (forall (($generated@@165 Int) ) (! (= (type ($generated@@161 $generated@@165)) $generated@@164)
 :pattern ( ($generated@@161 $generated@@165))
))))
(assert (forall (($generated@@166 Int) ) (!  (=> (<= 0 $generated@@166) (and ($generated@@162 ($generated@@161 $generated@@166)) (= ($generated@@163 ($generated@@161 $generated@@166)) $generated@@166)))
 :pattern ( ($generated@@161 $generated@@166))
)))
(assert (forall (($generated@@167 T@U) ) (!  (=> (= (type $generated@@167) $generated@@164) (<= 0 ($generated@@163 $generated@@167)))
 :pattern ( ($generated@@163 $generated@@167))
)))
(assert  (and (forall (($generated@@170 T@U) ) (! (= (type ($generated@@168 $generated@@170)) $generated@@164)
 :pattern ( ($generated@@168 $generated@@170))
)) (forall (($generated@@171 T@T) ($generated@@172 T@U) ) (! (= (type ($generated@@169 $generated@@171 $generated@@172)) $generated@@171)
 :pattern ( ($generated@@169 $generated@@171 $generated@@172))
))))
(assert (forall (($generated@@173 T@U) ) (! (let (($generated@@174 (type $generated@@173)))
(= ($generated@@169 $generated@@174 ($generated@@168 $generated@@173)) $generated@@173))
 :pattern ( ($generated@@168 $generated@@173))
)))
(assert (forall (($generated@@175 T@U) ) (!  (=> (and (= (type $generated@@175) $generated@@164) ($generated@@162 $generated@@175)) (= $generated@@175 ($generated@@161 ($generated@@163 $generated@@175))))
 :pattern ( ($generated@@163 $generated@@175))
 :pattern ( ($generated@@162 $generated@@175))
)))
(assert (forall (($generated@@176 T@U) ) (! (= ($generated@@168 ($generated@@157 $generated@@176)) ($generated@@157 ($generated@@168 $generated@@176)))
 :pattern ( ($generated@@168 ($generated@@157 $generated@@176)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 (T@U) Bool)
(declare-fun $generated@@184 (T@U) Bool)
(declare-fun $generated@@185 () Int)
(assert  (and (and (and (and (and (= (type $generated@@177) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@178) $generated@@47)) (= (type $generated@@179) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@180) ($generated@@50 $generated@@4))) (= (type $generated@@181) $generated@@164)) (= (type $generated@@182) $generated@@164)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@186  (=> (= $generated@@177 ($generated@@45 $generated@@178 $generated@@179 $generated@@180 false)) (=> (and (= $generated@@181 ($generated@@157 ($generated@@161 5))) (= (ControlFlow 0 2) (- 0 1))) (= $generated@@182 $generated@@182)))))
(let (($generated@@187  (=> (and (and ($generated@@183 $generated@@179) ($generated@@184 $generated@@179)) (and (= 0 $generated@@185) (= (ControlFlow 0 3) 2))) $generated@@186)))
$generated@@187)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 (Int) T@U)
(declare-fun $generated@@164 (T@U) Bool)
(declare-fun $generated@@165 (T@U) Int)
(declare-fun $generated@@166 () T@T)
(declare-fun $generated@@170 (T@U) T@U)
(declare-fun $generated@@171 (T@T T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (and (= ($generated@@1 $generated@@166) 11) (forall (($generated@@167 Int) ) (! (= (type ($generated@@163 $generated@@167)) $generated@@166)
 :pattern ( ($generated@@163 $generated@@167))
))))
(assert (forall (($generated@@168 Int) ) (!  (=> (<= 0 $generated@@168) (and ($generated@@164 ($generated@@163 $generated@@168)) (= ($generated@@165 ($generated@@163 $generated@@168)) $generated@@168)))
 :pattern ( ($generated@@163 $generated@@168))
)))
(assert (forall (($generated@@169 T@U) ) (!  (=> (= (type $generated@@169) $generated@@166) (<= 0 ($generated@@165 $generated@@169)))
 :pattern ( ($generated@@165 $generated@@169))
)))
(assert  (and (forall (($generated@@172 T@U) ) (! (= (type ($generated@@170 $generated@@172)) $generated@@166)
 :pattern ( ($generated@@170 $generated@@172))
)) (forall (($generated@@173 T@T) ($generated@@174 T@U) ) (! (= (type ($generated@@171 $generated@@173 $generated@@174)) $generated@@173)
 :pattern ( ($generated@@171 $generated@@173 $generated@@174))
))))
(assert (forall (($generated@@175 T@U) ) (! (let (($generated@@176 (type $generated@@175)))
(= ($generated@@171 $generated@@176 ($generated@@170 $generated@@175)) $generated@@175))
 :pattern ( ($generated@@170 $generated@@175))
)))
(assert (forall (($generated@@177 T@U) ) (!  (=> (and (= (type $generated@@177) $generated@@166) ($generated@@164 $generated@@177)) (= $generated@@177 ($generated@@163 ($generated@@165 $generated@@177))))
 :pattern ( ($generated@@165 $generated@@177))
 :pattern ( ($generated@@164 $generated@@177))
)))
(assert (forall (($generated@@178 Int) ) (! (= ($generated@@170 ($generated@@8 ($generated@@157 $generated@@178))) ($generated@@159 ($generated@@170 ($generated@@8 $generated@@178))))
 :pattern ( ($generated@@170 ($generated@@8 ($generated@@157 $generated@@178))))
)))
(assert (forall (($generated@@179 T@U) ) (! (= ($generated@@170 ($generated@@159 $generated@@179)) ($generated@@159 ($generated@@170 $generated@@179)))
 :pattern ( ($generated@@170 ($generated@@159 $generated@@179)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@180 () Int)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () Int)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 (T@U) Bool)
(declare-fun $generated@@189 (T@U) Bool)
(declare-fun $generated@@190 () Int)
(assert  (and (and (and (and (and (= (type $generated@@183) $generated@@166) (= (type $generated@@181) $generated@@166)) (= (type $generated@@184) ($generated@@57 $generated@@47 $generated@@4))) (= (type $generated@@185) $generated@@47)) (= (type $generated@@186) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@187) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@191  (=> (and (and (and (and (< $generated@@180 ($generated@@157 0)) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (= (ControlFlow 0 11) (- 0 10))) false)))
(let (($generated@@192  (=> (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= $generated@@181 ($generated@@159 ($generated@@163 67)))) (and (=> (= (ControlFlow 0 8) (- 0 9)) ($generated@@164 $generated@@181)) (=> ($generated@@164 $generated@@181) (=> (and (= $generated@@182 ($generated@@165 $generated@@181)) (= (ControlFlow 0 8) (- 0 7))) (= $generated@@182 ($generated@@157 67))))))))
(let (($generated@@193  (=> (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= (ControlFlow 0 6) (- 0 5))) ($generated@@164 $generated@@183))))
(let (($generated@@194  (=> (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= (ControlFlow 0 4) (- 0 3))) (<= 0 $generated@@180))))
(let (($generated@@195  (=> (and (<= ($generated@@157 0) $generated@@180) (= (ControlFlow 0 2) (- 0 1))) (<= 0 $generated@@180))))
(let (($generated@@196  (=> (= $generated@@184 ($generated@@45 $generated@@185 $generated@@186 $generated@@187 false)) (and (and (and (and (=> (= (ControlFlow 0 12) 2) $generated@@195) (=> (= (ControlFlow 0 12) 4) $generated@@194)) (=> (= (ControlFlow 0 12) 6) $generated@@193)) (=> (= (ControlFlow 0 12) 8) $generated@@192)) (=> (= (ControlFlow 0 12) 11) $generated@@191)))))
(let (($generated@@197  (=> (and (and ($generated@@188 $generated@@186) ($generated@@189 $generated@@186)) (and (= 0 $generated@@190) (= (ControlFlow 0 13) 12))) $generated@@196)))
$generated@@197))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U) T@U)
(declare-fun $generated@@57 (T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (Int) Int)
(declare-fun $generated@@164 (T@U) T@U)
(declare-fun $generated@@168 (Int) T@U)
(declare-fun $generated@@169 (T@U) Bool)
(declare-fun $generated@@170 (T@U) Int)
(declare-fun $generated@@173 (T@U T@U) T@U)
(declare-fun $generated@@183 (T@U) T@U)
(declare-fun $generated@@184 (T@T T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (= ($generated@@1 ($generated@@53 $generated@@66 $generated@@67)) 7)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@58 ($generated@@53 $generated@@68 $generated@@69)) $generated@@68)
 :pattern ( ($generated@@53 $generated@@68 $generated@@69))
))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@59 ($generated@@53 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@53 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@59 (type $generated@@72))))
(= (type ($generated@@57 $generated@@72 $generated@@73)) $generated@@74))
 :pattern ( ($generated@@57 $generated@@72 $generated@@73))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 (type $generated@@77)))
(let (($generated@@79 (type $generated@@76)))
(= (type ($generated@@60 $generated@@75 $generated@@76 $generated@@77)) ($generated@@53 $generated@@79 $generated@@78))))
 :pattern ( ($generated@@60 $generated@@75 $generated@@76 $generated@@77))
))) (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@59 (type $generated@@80))))
 (=> (= (type $generated@@82) $generated@@83) (= ($generated@@57 ($generated@@60 $generated@@80 $generated@@81 $generated@@82) $generated@@81) $generated@@82)))
 :weight 0
))) (and (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@86 $generated@@87) (= ($generated@@57 ($generated@@60 $generated@@85 $generated@@86 $generated@@84) $generated@@87) ($generated@@57 $generated@@85 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or true (= ($generated@@57 ($generated@@60 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@57 $generated@@89 $generated@@91)))
 :weight 0
)))) (forall (($generated@@92 T@T) ) (= ($generated@@1 ($generated@@55 $generated@@92)) 8))) (forall (($generated@@93 T@T) ) (! (= ($generated@@51 ($generated@@55 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@55 $generated@@93))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@51 (type $generated@@95))))
(= (type ($generated@@56 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@56 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@54) 9)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@61 $generated@@97 $generated@@98 $generated@@99)) $generated@@54)
 :pattern ( ($generated@@61 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@51 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@56 ($generated@@61 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@56 ($generated@@61 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@56 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@56 ($generated@@61 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@56 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@52) 10)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@112 $generated@@113)) 11))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@63 ($generated@@62 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@62 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@64 ($generated@@62 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@62 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@64 (type $generated@@118))))
(= (type ($generated@@49 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@49 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@62 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@64 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@49 ($generated@@65 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@49 ($generated@@65 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@49 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@49 ($generated@@65 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@49 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@49 ($generated@@65 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@49 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@62 $generated@@52 $generated@@4))
 :pattern ( ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@51 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@52) (= (type $generated@@156) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@157) ($generated@@55 $generated@@4))) (= (type $generated@@159) $generated@@52)) (= (type $generated@@160) ($generated@@55 $generated@@161))) (= ($generated@@0 ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@56 ($generated@@57 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 Int) ) (! (= ($generated@@162 $generated@@163) $generated@@163)
 :pattern ( ($generated@@162 $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ) (! (let (($generated@@166 (type $generated@@165)))
(= (type ($generated@@164 $generated@@165)) $generated@@166))
 :pattern ( ($generated@@164 $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! (= ($generated@@164 $generated@@167) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167))
)))
(assert (forall (($generated@@171 Int) ) (! (= (type ($generated@@168 $generated@@171)) $generated@@45)
 :pattern ( ($generated@@168 $generated@@171))
)))
(assert (forall (($generated@@172 Int) ) (!  (=> (<= 0 $generated@@172) (and ($generated@@169 ($generated@@168 $generated@@172)) (= ($generated@@170 ($generated@@168 $generated@@172)) $generated@@172)))
 :pattern ( ($generated@@168 $generated@@172))
)))
(assert (forall (($generated@@174 T@U) ($generated@@175 T@U) ) (! (= (type ($generated@@173 $generated@@174 $generated@@175)) $generated@@45)
 :pattern ( ($generated@@173 $generated@@174 $generated@@175))
)))
(assert (forall (($generated@@176 T@U) ($generated@@177 T@U) ) (!  (=> (and (= (type $generated@@176) $generated@@45) (= (type $generated@@177) $generated@@45)) (and (or (= $generated@@176 ($generated@@173 $generated@@176 $generated@@177)) ($generated@@44 $generated@@176 ($generated@@173 $generated@@176 $generated@@177))) (or (= $generated@@177 ($generated@@173 $generated@@176 $generated@@177)) ($generated@@44 $generated@@177 ($generated@@173 $generated@@176 $generated@@177)))))
 :pattern ( ($generated@@173 $generated@@176 $generated@@177))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ) (!  (=> (and (= (type $generated@@178) $generated@@45) (= (type $generated@@179) $generated@@45)) (or (or ($generated@@44 $generated@@178 $generated@@179) (= $generated@@178 $generated@@179)) ($generated@@44 $generated@@179 $generated@@178)))
 :pattern ( ($generated@@44 $generated@@178 $generated@@179) ($generated@@44 $generated@@179 $generated@@178))
)))
(assert (forall (($generated@@180 T@U) ($generated@@181 T@U) ) (!  (=> (and (= (type $generated@@180) $generated@@45) (= (type $generated@@181) $generated@@45)) (and (=> (= $generated@@180 ($generated@@168 0)) (= ($generated@@173 $generated@@180 $generated@@181) $generated@@181)) (=> (= $generated@@181 ($generated@@168 0)) (= ($generated@@173 $generated@@180 $generated@@181) $generated@@180))))
 :pattern ( ($generated@@173 $generated@@180 $generated@@181))
)))
(assert (forall (($generated@@182 T@U) ) (!  (=> (= (type $generated@@182) $generated@@45) (<= 0 ($generated@@170 $generated@@182)))
 :pattern ( ($generated@@170 $generated@@182))
)))
(assert  (and (forall (($generated@@185 T@U) ) (! (= (type ($generated@@183 $generated@@185)) $generated@@45)
 :pattern ( ($generated@@183 $generated@@185))
)) (forall (($generated@@186 T@T) ($generated@@187 T@U) ) (! (= (type ($generated@@184 $generated@@186 $generated@@187)) $generated@@186)
 :pattern ( ($generated@@184 $generated@@186 $generated@@187))
))))
(assert (forall (($generated@@188 T@U) ) (! (let (($generated@@189 (type $generated@@188)))
(= ($generated@@184 $generated@@189 ($generated@@183 $generated@@188)) $generated@@188))
 :pattern ( ($generated@@183 $generated@@188))
)))
(assert (forall (($generated@@190 T@U) ($generated@@191 T@U) ) (!  (=> (and (= (type $generated@@190) $generated@@45) (= (type $generated@@191) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@190 $generated@@191) (not (= $generated@@190 $generated@@191))) (=> (and ($generated@@169 $generated@@190) (not ($generated@@169 $generated@@191))) ($generated@@44 $generated@@190 $generated@@191))) (=> (and ($generated@@169 $generated@@190) ($generated@@169 $generated@@191)) (= ($generated@@44 $generated@@190 $generated@@191) (< ($generated@@170 $generated@@190) ($generated@@170 $generated@@191))))) (=> (and ($generated@@44 $generated@@190 $generated@@191) ($generated@@169 $generated@@191)) ($generated@@169 $generated@@190))))
 :pattern ( ($generated@@44 $generated@@190 $generated@@191))
)))
(assert (forall (($generated@@192 T@U) ($generated@@193 Int) ($generated@@194 Int) ) (!  (=> (= (type $generated@@192) $generated@@45) (=> (and (<= 0 $generated@@193) (<= 0 $generated@@194)) (= ($generated@@173 ($generated@@173 $generated@@192 ($generated@@168 $generated@@193)) ($generated@@168 $generated@@194)) ($generated@@173 $generated@@192 ($generated@@168 (+ $generated@@193 $generated@@194))))))
 :pattern ( ($generated@@173 ($generated@@173 $generated@@192 ($generated@@168 $generated@@193)) ($generated@@168 $generated@@194)))
)))
(assert (forall (($generated@@195 T@U) ) (!  (=> (and (= (type $generated@@195) $generated@@45) ($generated@@169 $generated@@195)) (= $generated@@195 ($generated@@168 ($generated@@170 $generated@@195))))
 :pattern ( ($generated@@170 $generated@@195))
 :pattern ( ($generated@@169 $generated@@195))
)))
(assert (forall (($generated@@196 T@U) ($generated@@197 T@U) ) (!  (=> (and (= (type $generated@@196) $generated@@45) (= (type $generated@@197) $generated@@45)) (and (=> ($generated@@169 ($generated@@173 $generated@@196 $generated@@197)) (and ($generated@@169 $generated@@196) ($generated@@169 $generated@@197))) (=> ($generated@@169 $generated@@197) (and (= ($generated@@169 ($generated@@173 $generated@@196 $generated@@197)) ($generated@@169 $generated@@196)) (= ($generated@@170 ($generated@@173 $generated@@196 $generated@@197)) (+ ($generated@@170 $generated@@196) ($generated@@170 $generated@@197)))))))
 :pattern ( ($generated@@173 $generated@@196 $generated@@197))
)))
(assert (forall (($generated@@198 Int) ) (! (= ($generated@@183 ($generated@@8 ($generated@@162 $generated@@198))) ($generated@@164 ($generated@@183 ($generated@@8 $generated@@198))))
 :pattern ( ($generated@@183 ($generated@@8 ($generated@@162 $generated@@198))))
)))
(assert (forall (($generated@@199 T@U) ) (! (= ($generated@@183 ($generated@@164 $generated@@199)) ($generated@@164 ($generated@@183 $generated@@199)))
 :pattern ( ($generated@@183 ($generated@@164 $generated@@199)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@200 () T@U)
(declare-fun $generated@@201 () Int)
(declare-fun $generated@@202 () T@U)
(declare-fun $generated@@203 () T@U)
(declare-fun $generated@@204 () T@U)
(declare-fun $generated@@205 () T@U)
(declare-fun $generated@@206 () T@U)
(declare-fun $generated@@207 () T@U)
(declare-fun $generated@@208 () T@U)
(declare-fun $generated@@209 () T@U)
(declare-fun $generated@@210 () T@U)
(declare-fun $generated@@211 () T@U)
(declare-fun $generated@@212 (T@U) Bool)
(declare-fun $generated@@213 (T@U) Bool)
(declare-fun $generated@@214 () Int)
(assert  (and (and (and (and (and (and (and (and (and (and (= (type $generated@@206) $generated@@45) (= (type $generated@@207) $generated@@45)) (= (type $generated@@204) $generated@@45)) (= (type $generated@@200) $generated@@45)) (= (type $generated@@205) $generated@@45)) (= (type $generated@@203) $generated@@45)) (= (type $generated@@202) $generated@@45)) (= (type $generated@@208) ($generated@@62 $generated@@52 $generated@@4))) (= (type $generated@@209) $generated@@52)) (= (type $generated@@210) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@211) ($generated@@55 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 29) (let (($generated@@215  (=> (and (and (and (not ($generated@@0 ($generated@@164 ($generated@@11 true)))) (not (= $generated@@200 ($generated@@168 $generated@@201)))) (not ($generated@@0 ($generated@@164 ($generated@@11 true))))) (= (ControlFlow 0 26) (- 0 25))) false)))
(let (($generated@@216  (=> (and ($generated@@0 ($generated@@164 ($generated@@11 true))) (= (ControlFlow 0 24) (- 0 23))) (or (= $generated@@202 $generated@@203) ($generated@@44 $generated@@202 $generated@@203)))))
(let (($generated@@217  (and (=> (= (ControlFlow 0 21) (- 0 22)) (<= 0 $generated@@201)) (=> (<= 0 $generated@@201) (=> (and (= $generated@@200 ($generated@@168 $generated@@201)) (= (ControlFlow 0 21) (- 0 20))) (or (= $generated@@200 $generated@@203) ($generated@@44 $generated@@200 $generated@@203)))))))
(let (($generated@@218  (=> (and ($generated@@0 ($generated@@164 ($generated@@11 true))) (= (ControlFlow 0 19) (- 0 18))) (or (= $generated@@200 $generated@@203) ($generated@@44 $generated@@200 $generated@@203)))))
(let (($generated@@219  (=> (and (= $generated@@202 ($generated@@164 ($generated@@168 50))) (= $generated@@203 ($generated@@173 $generated@@200 $generated@@202))) (and (and (and (=> (= (ControlFlow 0 27) 19) $generated@@218) (=> (= (ControlFlow 0 27) 21) $generated@@217)) (=> (= (ControlFlow 0 27) 24) $generated@@216)) (=> (= (ControlFlow 0 27) 26) $generated@@215)))))
(let (($generated@@220  (and (=> (= (ControlFlow 0 14) (- 0 15)) (= ($generated@@173 ($generated@@168 0) $generated@@200) $generated@@200)) (=> (= (ControlFlow 0 14) (- 0 13)) (= $generated@@200 ($generated@@173 $generated@@200 ($generated@@168 0)))))))
(let (($generated@@221  (=> (and (not (= ($generated@@173 ($generated@@168 0) $generated@@200) $generated@@200)) (= (ControlFlow 0 17) 14)) $generated@@220)))
(let (($generated@@222  (=> (and (= ($generated@@173 ($generated@@168 0) $generated@@200) $generated@@200) (= (ControlFlow 0 16) 14)) $generated@@220)))
(let (($generated@@223  (and (=> (= (ControlFlow 0 11) (- 0 12)) (or (= $generated@@200 ($generated@@173 ($generated@@168 1) $generated@@200)) ($generated@@44 $generated@@200 ($generated@@173 ($generated@@168 1) $generated@@200)))) (=> (or (= $generated@@200 ($generated@@173 ($generated@@168 1) $generated@@200)) ($generated@@44 $generated@@200 ($generated@@173 ($generated@@168 1) $generated@@200))) (=> (= (ControlFlow 0 11) (- 0 10)) ($generated@@44 $generated@@200 ($generated@@173 ($generated@@168 1) $generated@@200)))))))
(let (($generated@@224  (=> (= (ControlFlow 0 9) (- 0 8)) ($generated@@44 $generated@@200 ($generated@@173 $generated@@200 ($generated@@168 1))))))
(let (($generated@@225  (=> (and (= $generated@@204 ($generated@@173 $generated@@200 $generated@@205)) (= (ControlFlow 0 7) (- 0 6))) (or (= $generated@@200 $generated@@204) ($generated@@44 $generated@@200 $generated@@204)))))
(let (($generated@@226  (=> (and (= $generated@@206 ($generated@@164 ($generated@@168 100))) (= $generated@@207 ($generated@@164 ($generated@@168 105)))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= ($generated@@173 $generated@@206 $generated@@207) ($generated@@164 ($generated@@168 205)))) (=> (= ($generated@@173 $generated@@206 $generated@@207) ($generated@@164 ($generated@@168 205))) (and (=> (= (ControlFlow 0 2) (- 0 4)) ($generated@@44 $generated@@206 $generated@@207)) (=> ($generated@@44 $generated@@206 $generated@@207) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (= $generated@@206 $generated@@207) ($generated@@44 $generated@@206 $generated@@207))) (=> (or (= $generated@@206 $generated@@207) ($generated@@44 $generated@@206 $generated@@207)) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@44 $generated@@207 $generated@@206)))))))))))
(let (($generated@@227  (=> (= $generated@@208 ($generated@@50 $generated@@209 $generated@@210 $generated@@211 false)) (and (and (and (and (and (and (=> (= (ControlFlow 0 28) 2) $generated@@226) (=> (= (ControlFlow 0 28) 7) $generated@@225)) (=> (= (ControlFlow 0 28) 27) $generated@@219)) (=> (= (ControlFlow 0 28) 9) $generated@@224)) (=> (= (ControlFlow 0 28) 11) $generated@@223)) (=> (= (ControlFlow 0 28) 16) $generated@@222)) (=> (= (ControlFlow 0 28) 17) $generated@@221)))))
(let (($generated@@228  (=> (and (and (and ($generated@@212 $generated@@210) ($generated@@213 $generated@@210)) (<= ($generated@@162 0) $generated@@201)) (and (= 1 $generated@@214) (= (ControlFlow 0 29) 28))) $generated@@227)))
$generated@@228)))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 11) (- 10))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 (Int) T@U)
(declare-fun $generated@@51 (T@U) Int)
(declare-fun $generated@@58 (T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U) T@U)
(declare-fun $generated@@66 (T@U T@U) T@U)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@69 (T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@74 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@171 (Int) Int)
(declare-fun $generated@@173 (T@U) T@U)
(declare-fun $generated@@177 (T@U) Bool)
(declare-fun $generated@@181 (T@U T@U) T@U)
(declare-fun $generated@@191 (T@U) T@U)
(declare-fun $generated@@192 (T@T T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (! (= (type ($generated@@49 $generated@@52 $generated@@53)) $generated@@45)
 :pattern ( ($generated@@49 $generated@@52 $generated@@53))
)) (forall (($generated@@54 Int) ) (! (= (type ($generated@@50 $generated@@54)) $generated@@45)
 :pattern ( ($generated@@50 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 Int) ($generated@@57 Int) ) (!  (=> (= (type $generated@@55) $generated@@45) (=> (and (and (<= 0 $generated@@56) (<= 0 $generated@@57)) (<= (+ $generated@@56 $generated@@57) ($generated@@51 $generated@@55))) (= ($generated@@49 ($generated@@49 $generated@@55 ($generated@@50 $generated@@56)) ($generated@@50 $generated@@57)) ($generated@@49 $generated@@55 ($generated@@50 (+ $generated@@56 $generated@@57))))))
 :pattern ( ($generated@@49 ($generated@@49 $generated@@55 ($generated@@50 $generated@@56)) ($generated@@50 $generated@@57)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@75 $generated@@76)) 7)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ) (! (= ($generated@@67 ($generated@@62 $generated@@77 $generated@@78)) $generated@@77)
 :pattern ( ($generated@@62 $generated@@77 $generated@@78))
))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ) (! (= ($generated@@68 ($generated@@62 $generated@@79 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@62 $generated@@79 $generated@@80))
))) (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@68 (type $generated@@81))))
(= (type ($generated@@66 $generated@@81 $generated@@82)) $generated@@83))
 :pattern ( ($generated@@66 $generated@@81 $generated@@82))
))) (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (let (($generated@@87 (type $generated@@86)))
(let (($generated@@88 (type $generated@@85)))
(= (type ($generated@@69 $generated@@84 $generated@@85 $generated@@86)) ($generated@@62 $generated@@88 $generated@@87))))
 :pattern ( ($generated@@69 $generated@@84 $generated@@85 $generated@@86))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (let (($generated@@92 ($generated@@68 (type $generated@@89))))
 (=> (= (type $generated@@91) $generated@@92) (= ($generated@@66 ($generated@@69 $generated@@89 $generated@@90 $generated@@91) $generated@@90) $generated@@91)))
 :weight 0
))) (and (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@95 $generated@@96) (= ($generated@@66 ($generated@@69 $generated@@94 $generated@@95 $generated@@93) $generated@@96) ($generated@@66 $generated@@94 $generated@@96)))
 :weight 0
)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or true (= ($generated@@66 ($generated@@69 $generated@@98 $generated@@99 $generated@@97) $generated@@100) ($generated@@66 $generated@@98 $generated@@100)))
 :weight 0
)))) (forall (($generated@@101 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@101)) 8))) (forall (($generated@@102 T@T) ) (! (= ($generated@@60 ($generated@@64 $generated@@102)) $generated@@102)
 :pattern ( ($generated@@64 $generated@@102))
))) (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (! (let (($generated@@105 ($generated@@60 (type $generated@@104))))
(= (type ($generated@@65 $generated@@103 $generated@@104)) $generated@@105))
 :pattern ( ($generated@@65 $generated@@103 $generated@@104))
))) (= ($generated@@1 $generated@@63) 9)) (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= (type ($generated@@70 $generated@@106 $generated@@107 $generated@@108)) $generated@@63)
 :pattern ( ($generated@@70 $generated@@106 $generated@@107 $generated@@108))
))) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (let (($generated@@112 ($generated@@60 (type $generated@@110))))
 (=> (= (type $generated@@111) $generated@@112) (= ($generated@@65 ($generated@@70 $generated@@109 $generated@@110 $generated@@111) $generated@@110) $generated@@111)))
 :weight 0
))) (and (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@115 $generated@@116) (= ($generated@@65 ($generated@@70 $generated@@114 $generated@@115 $generated@@113) $generated@@116) ($generated@@65 $generated@@114 $generated@@116)))
 :weight 0
)) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or true (= ($generated@@65 ($generated@@70 $generated@@118 $generated@@119 $generated@@117) $generated@@120) ($generated@@65 $generated@@118 $generated@@120)))
 :weight 0
)))) (= ($generated@@1 $generated@@61) 10)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (= ($generated@@1 ($generated@@71 $generated@@121 $generated@@122)) 11))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (! (= ($generated@@72 ($generated@@71 $generated@@123 $generated@@124)) $generated@@123)
 :pattern ( ($generated@@71 $generated@@123 $generated@@124))
))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@73 ($generated@@71 $generated@@125 $generated@@126)) $generated@@126)
 :pattern ( ($generated@@71 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (let (($generated@@130 ($generated@@73 (type $generated@@127))))
(= (type ($generated@@58 $generated@@127 $generated@@128 $generated@@129)) $generated@@130))
 :pattern ( ($generated@@58 $generated@@127 $generated@@128 $generated@@129))
))) (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (let (($generated@@135 (type $generated@@134)))
(let (($generated@@136 (type $generated@@132)))
(= (type ($generated@@74 $generated@@131 $generated@@132 $generated@@133 $generated@@134)) ($generated@@71 $generated@@136 $generated@@135))))
 :pattern ( ($generated@@74 $generated@@131 $generated@@132 $generated@@133 $generated@@134))
))) (forall (($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (let (($generated@@141 ($generated@@73 (type $generated@@137))))
 (=> (= (type $generated@@140) $generated@@141) (= ($generated@@58 ($generated@@74 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@138 $generated@@139) $generated@@140)))
 :weight 0
))) (and (and (forall (($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (!  (or (= $generated@@144 $generated@@146) (= ($generated@@58 ($generated@@74 $generated@@143 $generated@@144 $generated@@145 $generated@@142) $generated@@146 $generated@@147) ($generated@@58 $generated@@143 $generated@@146 $generated@@147)))
 :weight 0
)) (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ) (!  (or (= $generated@@151 $generated@@153) (= ($generated@@58 ($generated@@74 $generated@@149 $generated@@150 $generated@@151 $generated@@148) $generated@@152 $generated@@153) ($generated@@58 $generated@@149 $generated@@152 $generated@@153)))
 :weight 0
))) (forall (($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ) (!  (or true (= ($generated@@58 ($generated@@74 $generated@@155 $generated@@156 $generated@@157 $generated@@154) $generated@@158 $generated@@159) ($generated@@58 $generated@@155 $generated@@158 $generated@@159)))
 :weight 0
)))) (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 Bool) ) (! (= (type ($generated@@59 $generated@@160 $generated@@161 $generated@@162 $generated@@163)) ($generated@@71 $generated@@61 $generated@@4))
 :pattern ( ($generated@@59 $generated@@160 $generated@@161 $generated@@162 $generated@@163))
))))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ($generated@@166 T@U) ($generated@@167 Bool) ($generated@@168 T@U) ($generated@@169 T@U) ) (! (let (($generated@@170 ($generated@@60 (type $generated@@169))))
 (=> (and (and (and (and (= (type $generated@@164) $generated@@61) (= (type $generated@@165) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@166) ($generated@@64 $generated@@4))) (= (type $generated@@168) $generated@@61)) (= (type $generated@@169) ($generated@@64 $generated@@170))) (= ($generated@@0 ($generated@@58 ($generated@@59 $generated@@164 $generated@@165 $generated@@166 $generated@@167) $generated@@168 $generated@@169))  (=> (and (not (= $generated@@168 $generated@@164)) ($generated@@0 ($generated@@65 ($generated@@66 $generated@@165 $generated@@168) $generated@@166))) $generated@@167))))
 :pattern ( ($generated@@58 ($generated@@59 $generated@@164 $generated@@165 $generated@@166 $generated@@167) $generated@@168 $generated@@169))
)))
(assert (forall (($generated@@172 Int) ) (! (= ($generated@@171 $generated@@172) $generated@@172)
 :pattern ( ($generated@@171 $generated@@172))
)))
(assert (forall (($generated@@174 T@U) ) (! (let (($generated@@175 (type $generated@@174)))
(= (type ($generated@@173 $generated@@174)) $generated@@175))
 :pattern ( ($generated@@173 $generated@@174))
)))
(assert (forall (($generated@@176 T@U) ) (! (= ($generated@@173 $generated@@176) $generated@@176)
 :pattern ( ($generated@@173 $generated@@176))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ) (!  (=> (and (and (= (type $generated@@178) $generated@@45) (= (type $generated@@179) $generated@@45)) (and ($generated@@177 $generated@@179) (<= ($generated@@51 $generated@@179) ($generated@@51 $generated@@178)))) (and (= ($generated@@177 ($generated@@49 $generated@@178 $generated@@179)) ($generated@@177 $generated@@178)) (= ($generated@@51 ($generated@@49 $generated@@178 $generated@@179)) (- ($generated@@51 $generated@@178) ($generated@@51 $generated@@179)))))
 :pattern ( ($generated@@49 $generated@@178 $generated@@179))
)))
(assert (forall (($generated@@180 Int) ) (!  (=> (<= 0 $generated@@180) (and ($generated@@177 ($generated@@50 $generated@@180)) (= ($generated@@51 ($generated@@50 $generated@@180)) $generated@@180)))
 :pattern ( ($generated@@50 $generated@@180))
)))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@U) ) (! (= (type ($generated@@181 $generated@@182 $generated@@183)) $generated@@45)
 :pattern ( ($generated@@181 $generated@@182 $generated@@183))
)))
(assert (forall (($generated@@184 T@U) ($generated@@185 T@U) ) (!  (=> (and (= (type $generated@@184) $generated@@45) (= (type $generated@@185) $generated@@45)) (and (or (= $generated@@184 ($generated@@181 $generated@@184 $generated@@185)) ($generated@@44 $generated@@184 ($generated@@181 $generated@@184 $generated@@185))) (or (= $generated@@185 ($generated@@181 $generated@@184 $generated@@185)) ($generated@@44 $generated@@185 ($generated@@181 $generated@@184 $generated@@185)))))
 :pattern ( ($generated@@181 $generated@@184 $generated@@185))
)))
(assert (forall (($generated@@186 T@U) ($generated@@187 T@U) ) (!  (=> (and (= (type $generated@@186) $generated@@45) (= (type $generated@@187) $generated@@45)) (or (or ($generated@@44 $generated@@186 $generated@@187) (= $generated@@186 $generated@@187)) ($generated@@44 $generated@@187 $generated@@186)))
 :pattern ( ($generated@@44 $generated@@186 $generated@@187) ($generated@@44 $generated@@187 $generated@@186))
)))
(assert (forall (($generated@@188 T@U) ($generated@@189 T@U) ) (!  (=> (and (= (type $generated@@188) $generated@@45) (= (type $generated@@189) $generated@@45)) (and (=> (= $generated@@188 ($generated@@50 0)) (= ($generated@@181 $generated@@188 $generated@@189) $generated@@189)) (=> (= $generated@@189 ($generated@@50 0)) (= ($generated@@181 $generated@@188 $generated@@189) $generated@@188))))
 :pattern ( ($generated@@181 $generated@@188 $generated@@189))
)))
(assert (forall (($generated@@190 T@U) ) (!  (=> (= (type $generated@@190) $generated@@45) (<= 0 ($generated@@51 $generated@@190)))
 :pattern ( ($generated@@51 $generated@@190))
)))
(assert  (and (forall (($generated@@193 T@U) ) (! (= (type ($generated@@191 $generated@@193)) $generated@@45)
 :pattern ( ($generated@@191 $generated@@193))
)) (forall (($generated@@194 T@T) ($generated@@195 T@U) ) (! (= (type ($generated@@192 $generated@@194 $generated@@195)) $generated@@194)
 :pattern ( ($generated@@192 $generated@@194 $generated@@195))
))))
(assert (forall (($generated@@196 T@U) ) (! (let (($generated@@197 (type $generated@@196)))
(= ($generated@@192 $generated@@197 ($generated@@191 $generated@@196)) $generated@@196))
 :pattern ( ($generated@@191 $generated@@196))
)))
(assert (forall (($generated@@198 T@U) ($generated@@199 T@U) ) (!  (=> (and (= (type $generated@@198) $generated@@45) (= (type $generated@@199) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@198 $generated@@199) (not (= $generated@@198 $generated@@199))) (=> (and ($generated@@177 $generated@@198) (not ($generated@@177 $generated@@199))) ($generated@@44 $generated@@198 $generated@@199))) (=> (and ($generated@@177 $generated@@198) ($generated@@177 $generated@@199)) (= ($generated@@44 $generated@@198 $generated@@199) (< ($generated@@51 $generated@@198) ($generated@@51 $generated@@199))))) (=> (and ($generated@@44 $generated@@198 $generated@@199) ($generated@@177 $generated@@199)) ($generated@@177 $generated@@198))))
 :pattern ( ($generated@@44 $generated@@198 $generated@@199))
)))
(assert (forall (($generated@@200 T@U) ($generated@@201 Int) ($generated@@202 Int) ) (!  (=> (= (type $generated@@200) $generated@@45) (=> (and (<= 0 $generated@@201) (<= 0 $generated@@202)) (= ($generated@@181 ($generated@@181 $generated@@200 ($generated@@50 $generated@@201)) ($generated@@50 $generated@@202)) ($generated@@181 $generated@@200 ($generated@@50 (+ $generated@@201 $generated@@202))))))
 :pattern ( ($generated@@181 ($generated@@181 $generated@@200 ($generated@@50 $generated@@201)) ($generated@@50 $generated@@202)))
)))
(assert (forall (($generated@@203 T@U) ($generated@@204 Int) ($generated@@205 Int) ) (!  (=> (= (type $generated@@203) $generated@@45) (=> (and (and (<= 0 $generated@@204) (<= 0 $generated@@205)) (<= $generated@@205 (+ ($generated@@51 $generated@@203) $generated@@204))) (and (=> (<= 0 (- $generated@@204 $generated@@205)) (= ($generated@@49 ($generated@@181 $generated@@203 ($generated@@50 $generated@@204)) ($generated@@50 $generated@@205)) ($generated@@181 $generated@@203 ($generated@@50 (- $generated@@204 $generated@@205))))) (=> (<= (- $generated@@204 $generated@@205) 0) (= ($generated@@49 ($generated@@181 $generated@@203 ($generated@@50 $generated@@204)) ($generated@@50 $generated@@205)) ($generated@@49 $generated@@203 ($generated@@50 (- $generated@@205 $generated@@204))))))))
 :pattern ( ($generated@@49 ($generated@@181 $generated@@203 ($generated@@50 $generated@@204)) ($generated@@50 $generated@@205)))
)))
(assert (forall (($generated@@206 T@U) ($generated@@207 Int) ($generated@@208 Int) ) (!  (=> (= (type $generated@@206) $generated@@45) (=> (and (and (<= 0 $generated@@207) (<= 0 $generated@@208)) (<= $generated@@208 (+ ($generated@@51 $generated@@206) $generated@@207))) (and (=> (<= 0 (- $generated@@207 $generated@@208)) (= ($generated@@181 ($generated@@49 $generated@@206 ($generated@@50 $generated@@207)) ($generated@@50 $generated@@208)) ($generated@@49 $generated@@206 ($generated@@50 (- $generated@@207 $generated@@208))))) (=> (<= (- $generated@@207 $generated@@208) 0) (= ($generated@@181 ($generated@@49 $generated@@206 ($generated@@50 $generated@@207)) ($generated@@50 $generated@@208)) ($generated@@181 $generated@@206 ($generated@@50 (- $generated@@208 $generated@@207))))))))
 :pattern ( ($generated@@181 ($generated@@49 $generated@@206 ($generated@@50 $generated@@207)) ($generated@@50 $generated@@208)))
)))
(assert (forall (($generated@@209 T@U) ) (!  (=> (and (= (type $generated@@209) $generated@@45) ($generated@@177 $generated@@209)) (= $generated@@209 ($generated@@50 ($generated@@51 $generated@@209))))
 :pattern ( ($generated@@51 $generated@@209))
 :pattern ( ($generated@@177 $generated@@209))
)))
(assert (forall (($generated@@210 T@U) ($generated@@211 T@U) ) (!  (=> (and (and (= (type $generated@@210) $generated@@45) (= (type $generated@@211) $generated@@45)) (and ($generated@@177 $generated@@211) (<= ($generated@@51 $generated@@211) ($generated@@51 $generated@@210)))) (or (and (= $generated@@211 ($generated@@50 0)) (= ($generated@@49 $generated@@210 $generated@@211) $generated@@210)) (and (not (= $generated@@211 ($generated@@50 0))) ($generated@@44 ($generated@@49 $generated@@210 $generated@@211) $generated@@210))))
 :pattern ( ($generated@@49 $generated@@210 $generated@@211))
)))
(assert (forall (($generated@@212 T@U) ($generated@@213 T@U) ) (!  (=> (and (= (type $generated@@212) $generated@@45) (= (type $generated@@213) $generated@@45)) (and (=> ($generated@@177 ($generated@@181 $generated@@212 $generated@@213)) (and ($generated@@177 $generated@@212) ($generated@@177 $generated@@213))) (=> ($generated@@177 $generated@@213) (and (= ($generated@@177 ($generated@@181 $generated@@212 $generated@@213)) ($generated@@177 $generated@@212)) (= ($generated@@51 ($generated@@181 $generated@@212 $generated@@213)) (+ ($generated@@51 $generated@@212) ($generated@@51 $generated@@213)))))))
 :pattern ( ($generated@@181 $generated@@212 $generated@@213))
)))
(assert (forall (($generated@@214 Int) ) (! (= ($generated@@191 ($generated@@8 ($generated@@171 $generated@@214))) ($generated@@173 ($generated@@191 ($generated@@8 $generated@@214))))
 :pattern ( ($generated@@191 ($generated@@8 ($generated@@171 $generated@@214))))
)))
(assert (forall (($generated@@215 T@U) ) (! (= ($generated@@191 ($generated@@173 $generated@@215)) ($generated@@173 ($generated@@191 $generated@@215)))
 :pattern ( ($generated@@191 ($generated@@173 $generated@@215)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@216 () T@U)
(declare-fun $generated@@217 () T@U)
(declare-fun $generated@@218 () Int)
(declare-fun $generated@@219 () T@U)
(declare-fun $generated@@220 () T@U)
(declare-fun $generated@@221 () T@U)
(declare-fun $generated@@222 () T@U)
(declare-fun $generated@@223 () T@U)
(declare-fun $generated@@224 () T@U)
(declare-fun $generated@@225 (T@U) Bool)
(declare-fun $generated@@226 (T@U) Bool)
(declare-fun $generated@@227 () Int)
(assert  (and (and (and (and (and (and (and (= (type $generated@@217) $generated@@45) (= (type $generated@@216) $generated@@45)) (= (type $generated@@220) $generated@@45)) (= (type $generated@@219) $generated@@45)) (= (type $generated@@221) ($generated@@71 $generated@@61 $generated@@4))) (= (type $generated@@222) $generated@@61)) (= (type $generated@@223) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@224) ($generated@@64 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 44) (let (($generated@@228  (=> (and ($generated@@44 $generated@@216 $generated@@217) (= $generated@@217 ($generated@@50 $generated@@218))) (and (=> (= (ControlFlow 0 38) (- 0 39)) ($generated@@177 ($generated@@173 ($generated@@50 1)))) (=> ($generated@@177 ($generated@@173 ($generated@@50 1))) (=> (= (ControlFlow 0 38) (- 0 37)) (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 $generated@@217))))))))
(let (($generated@@229  (=> (and (not ($generated@@44 $generated@@216 $generated@@217)) (= (ControlFlow 0 42) 38)) $generated@@228)))
(let (($generated@@230  (=> ($generated@@44 $generated@@216 $generated@@217) (and (=> (= (ControlFlow 0 40) (- 0 41)) (<= 0 $generated@@218)) (=> (<= 0 $generated@@218) (=> (= (ControlFlow 0 40) 38) $generated@@228))))))
(let (($generated@@231  (=> (and (and (and (and (and (and (and (and (and (not ($generated@@0 ($generated@@173 ($generated@@11 true)))) (not ($generated@@0 ($generated@@173 ($generated@@11 true))))) (not ($generated@@0 ($generated@@173 ($generated@@11 true))))) (not (= $generated@@216 ($generated@@50 $generated@@218)))) (not ($generated@@44 $generated@@216 $generated@@217))) (not (and ($generated@@44 $generated@@216 $generated@@217) (= $generated@@217 ($generated@@50 $generated@@218))))) (not (= $generated@@216 ($generated@@50 $generated@@218)))) (< ($generated@@51 $generated@@219) ($generated@@171 10))) (not ($generated@@0 ($generated@@173 ($generated@@11 true))))) (= (ControlFlow 0 36) (- 0 35))) false)))
(let (($generated@@232  (=> ($generated@@0 ($generated@@173 ($generated@@11 true))) (and (=> (= (ControlFlow 0 32) (- 0 34)) ($generated@@177 ($generated@@173 ($generated@@50 0)))) (=> ($generated@@177 ($generated@@173 ($generated@@50 0))) (and (=> (= (ControlFlow 0 32) (- 0 33)) (<= ($generated@@51 ($generated@@173 ($generated@@50 0))) ($generated@@51 $generated@@219))) (=> (<= ($generated@@51 ($generated@@173 ($generated@@50 0))) ($generated@@51 $generated@@219)) (=> (= (ControlFlow 0 32) (- 0 31)) (= $generated@@219 ($generated@@49 $generated@@219 ($generated@@50 0)))))))))))
(let (($generated@@233  (=> (<= ($generated@@171 10) ($generated@@51 $generated@@219)) (and (=> (= (ControlFlow 0 28) (- 0 30)) ($generated@@177 ($generated@@173 ($generated@@50 1)))) (=> ($generated@@177 ($generated@@173 ($generated@@50 1))) (and (=> (= (ControlFlow 0 28) (- 0 29)) (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 $generated@@219))) (=> (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 $generated@@219)) (=> (= (ControlFlow 0 28) (- 0 27)) ($generated@@44 ($generated@@49 $generated@@219 ($generated@@50 1)) $generated@@219)))))))))
(let (($generated@@234  (and (=> (= (ControlFlow 0 19) (- 0 26)) (<= 0 $generated@@218)) (=> (<= 0 $generated@@218) (=> (= $generated@@216 ($generated@@50 $generated@@218)) (and (=> (= (ControlFlow 0 19) (- 0 25)) ($generated@@177 ($generated@@173 ($generated@@50 1)))) (=> ($generated@@177 ($generated@@173 ($generated@@50 1))) (and (=> (= (ControlFlow 0 19) (- 0 24)) (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 $generated@@216))) (=> (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 $generated@@216)) (and (=> (= (ControlFlow 0 19) (- 0 23)) ($generated@@177 ($generated@@173 ($generated@@50 1)))) (=> ($generated@@177 ($generated@@173 ($generated@@50 1))) (and (=> (= (ControlFlow 0 19) (- 0 22)) (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 ($generated@@49 $generated@@216 ($generated@@50 1))))) (=> (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 ($generated@@49 $generated@@216 ($generated@@50 1)))) (and (=> (= (ControlFlow 0 19) (- 0 21)) ($generated@@177 ($generated@@173 ($generated@@50 2)))) (=> ($generated@@177 ($generated@@173 ($generated@@50 2))) (and (=> (= (ControlFlow 0 19) (- 0 20)) (<= ($generated@@51 ($generated@@173 ($generated@@50 2))) ($generated@@51 $generated@@216))) (=> (<= ($generated@@51 ($generated@@173 ($generated@@50 2))) ($generated@@51 $generated@@216)) (=> (= (ControlFlow 0 19) (- 0 18)) (= ($generated@@49 ($generated@@49 $generated@@216 ($generated@@50 1)) ($generated@@50 1)) ($generated@@49 $generated@@216 ($generated@@50 2)))))))))))))))))))))
(let (($generated@@235  (=> ($generated@@44 $generated@@216 $generated@@217) (and (=> (= (ControlFlow 0 16) (- 0 17)) ($generated@@177 ($generated@@173 ($generated@@50 1)))) (=> ($generated@@177 ($generated@@173 ($generated@@50 1))) (=> (= (ControlFlow 0 16) (- 0 15)) (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 $generated@@217))))))))
(let (($generated@@236  (and (=> (= (ControlFlow 0 11) (- 0 14)) (<= 0 $generated@@218)) (=> (<= 0 $generated@@218) (=> (= $generated@@216 ($generated@@50 $generated@@218)) (and (=> (= (ControlFlow 0 11) (- 0 13)) ($generated@@177 ($generated@@173 ($generated@@50 1)))) (=> ($generated@@177 ($generated@@173 ($generated@@50 1))) (and (=> (= (ControlFlow 0 11) (- 0 12)) (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 $generated@@216))) (=> (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 $generated@@216)) (=> (and (= $generated@@220 ($generated@@49 $generated@@216 ($generated@@50 1))) (= (ControlFlow 0 11) (- 0 10))) (= ($generated@@181 $generated@@220 ($generated@@50 1)) $generated@@216)))))))))))
(let (($generated@@237  (=> ($generated@@0 ($generated@@173 ($generated@@11 true))) (and (=> (= (ControlFlow 0 8) (- 0 9)) ($generated@@177 ($generated@@173 ($generated@@50 1)))) (=> ($generated@@177 ($generated@@173 ($generated@@50 1))) (=> (= (ControlFlow 0 8) (- 0 7)) (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 $generated@@216))))))))
(let (($generated@@238  (=> ($generated@@0 ($generated@@173 ($generated@@11 true))) (and (=> (= (ControlFlow 0 5) (- 0 6)) ($generated@@177 ($generated@@173 ($generated@@50 12)))) (=> ($generated@@177 ($generated@@173 ($generated@@50 12))) (=> (= (ControlFlow 0 5) (- 0 4)) (<= ($generated@@51 ($generated@@173 ($generated@@50 12))) ($generated@@51 $generated@@216))))))))
(let (($generated@@239  (=> ($generated@@0 ($generated@@173 ($generated@@11 true))) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@177 ($generated@@173 ($generated@@50 1)))) (=> ($generated@@177 ($generated@@173 ($generated@@50 1))) (=> (= (ControlFlow 0 2) (- 0 1)) (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 $generated@@217))))))))
(let (($generated@@240  (=> (= $generated@@221 ($generated@@59 $generated@@222 $generated@@223 $generated@@224 false)) (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 43) 2) $generated@@239) (=> (= (ControlFlow 0 43) 5) $generated@@238)) (=> (= (ControlFlow 0 43) 8) $generated@@237)) (=> (= (ControlFlow 0 43) 11) $generated@@236)) (=> (= (ControlFlow 0 43) 16) $generated@@235)) (=> (= (ControlFlow 0 43) 19) $generated@@234)) (=> (= (ControlFlow 0 43) 28) $generated@@233)) (=> (= (ControlFlow 0 43) 32) $generated@@232)) (=> (= (ControlFlow 0 43) 36) $generated@@231)) (=> (= (ControlFlow 0 43) 40) $generated@@230)) (=> (= (ControlFlow 0 43) 42) $generated@@229)))))
(let (($generated@@241  (=> (and ($generated@@225 $generated@@223) ($generated@@226 $generated@@223)) (=> (and (and (<= ($generated@@171 0) $generated@@218) (= 1 $generated@@227)) (and (or (= ($generated@@50 10) $generated@@216) ($generated@@44 ($generated@@50 10) $generated@@216)) (= (ControlFlow 0 44) 43))) $generated@@240))))
$generated@@241)))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 16) (- 15))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 8) (- 7))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U) T@U)
(declare-fun $generated@@57 (T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@166 (Int) T@U)
(declare-fun $generated@@167 (T@U) Bool)
(declare-fun $generated@@168 (T@U) Int)
(declare-fun $generated@@174 (T@U) T@U)
(declare-fun $generated@@175 (T@T T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (= ($generated@@1 ($generated@@53 $generated@@66 $generated@@67)) 7)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@58 ($generated@@53 $generated@@68 $generated@@69)) $generated@@68)
 :pattern ( ($generated@@53 $generated@@68 $generated@@69))
))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@59 ($generated@@53 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@53 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@59 (type $generated@@72))))
(= (type ($generated@@57 $generated@@72 $generated@@73)) $generated@@74))
 :pattern ( ($generated@@57 $generated@@72 $generated@@73))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 (type $generated@@77)))
(let (($generated@@79 (type $generated@@76)))
(= (type ($generated@@60 $generated@@75 $generated@@76 $generated@@77)) ($generated@@53 $generated@@79 $generated@@78))))
 :pattern ( ($generated@@60 $generated@@75 $generated@@76 $generated@@77))
))) (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@59 (type $generated@@80))))
 (=> (= (type $generated@@82) $generated@@83) (= ($generated@@57 ($generated@@60 $generated@@80 $generated@@81 $generated@@82) $generated@@81) $generated@@82)))
 :weight 0
))) (and (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@86 $generated@@87) (= ($generated@@57 ($generated@@60 $generated@@85 $generated@@86 $generated@@84) $generated@@87) ($generated@@57 $generated@@85 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or true (= ($generated@@57 ($generated@@60 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@57 $generated@@89 $generated@@91)))
 :weight 0
)))) (forall (($generated@@92 T@T) ) (= ($generated@@1 ($generated@@55 $generated@@92)) 8))) (forall (($generated@@93 T@T) ) (! (= ($generated@@51 ($generated@@55 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@55 $generated@@93))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@51 (type $generated@@95))))
(= (type ($generated@@56 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@56 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@54) 9)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@61 $generated@@97 $generated@@98 $generated@@99)) $generated@@54)
 :pattern ( ($generated@@61 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@51 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@56 ($generated@@61 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@56 ($generated@@61 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@56 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@56 ($generated@@61 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@56 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@52) 10)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@112 $generated@@113)) 11))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@63 ($generated@@62 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@62 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@64 ($generated@@62 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@62 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@64 (type $generated@@118))))
(= (type ($generated@@49 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@49 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@62 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@64 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@49 ($generated@@65 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@49 ($generated@@65 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@49 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@49 ($generated@@65 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@49 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@49 ($generated@@65 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@49 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@62 $generated@@52 $generated@@4))
 :pattern ( ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@51 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@52) (= (type $generated@@156) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@157) ($generated@@55 $generated@@4))) (= (type $generated@@159) $generated@@52)) (= (type $generated@@160) ($generated@@55 $generated@@161))) (= ($generated@@0 ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@56 ($generated@@57 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 T@U) ) (! (let (($generated@@164 (type $generated@@163)))
(= (type ($generated@@162 $generated@@163)) $generated@@164))
 :pattern ( ($generated@@162 $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ) (! (= ($generated@@162 $generated@@165) $generated@@165)
 :pattern ( ($generated@@162 $generated@@165))
)))
(assert (forall (($generated@@169 Int) ) (! (= (type ($generated@@166 $generated@@169)) $generated@@45)
 :pattern ( ($generated@@166 $generated@@169))
)))
(assert (forall (($generated@@170 Int) ) (!  (=> (<= 0 $generated@@170) (and ($generated@@167 ($generated@@166 $generated@@170)) (= ($generated@@168 ($generated@@166 $generated@@170)) $generated@@170)))
 :pattern ( ($generated@@166 $generated@@170))
)))
(assert (forall (($generated@@171 T@U) ($generated@@172 T@U) ) (!  (=> (and (= (type $generated@@171) $generated@@45) (= (type $generated@@172) $generated@@45)) (or (or ($generated@@44 $generated@@171 $generated@@172) (= $generated@@171 $generated@@172)) ($generated@@44 $generated@@172 $generated@@171)))
 :pattern ( ($generated@@44 $generated@@171 $generated@@172) ($generated@@44 $generated@@172 $generated@@171))
)))
(assert (forall (($generated@@173 T@U) ) (!  (=> (= (type $generated@@173) $generated@@45) (<= 0 ($generated@@168 $generated@@173)))
 :pattern ( ($generated@@168 $generated@@173))
)))
(assert  (and (forall (($generated@@176 T@U) ) (! (= (type ($generated@@174 $generated@@176)) $generated@@45)
 :pattern ( ($generated@@174 $generated@@176))
)) (forall (($generated@@177 T@T) ($generated@@178 T@U) ) (! (= (type ($generated@@175 $generated@@177 $generated@@178)) $generated@@177)
 :pattern ( ($generated@@175 $generated@@177 $generated@@178))
))))
(assert (forall (($generated@@179 T@U) ) (! (let (($generated@@180 (type $generated@@179)))
(= ($generated@@175 $generated@@180 ($generated@@174 $generated@@179)) $generated@@179))
 :pattern ( ($generated@@174 $generated@@179))
)))
(assert (forall (($generated@@181 T@U) ($generated@@182 T@U) ) (!  (=> (and (= (type $generated@@181) $generated@@45) (= (type $generated@@182) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@181 $generated@@182) (not (= $generated@@181 $generated@@182))) (=> (and ($generated@@167 $generated@@181) (not ($generated@@167 $generated@@182))) ($generated@@44 $generated@@181 $generated@@182))) (=> (and ($generated@@167 $generated@@181) ($generated@@167 $generated@@182)) (= ($generated@@44 $generated@@181 $generated@@182) (< ($generated@@168 $generated@@181) ($generated@@168 $generated@@182))))) (=> (and ($generated@@44 $generated@@181 $generated@@182) ($generated@@167 $generated@@182)) ($generated@@167 $generated@@181))))
 :pattern ( ($generated@@44 $generated@@181 $generated@@182))
)))
(assert (forall (($generated@@183 T@U) ) (!  (=> (and (= (type $generated@@183) $generated@@45) ($generated@@167 $generated@@183)) (= $generated@@183 ($generated@@166 ($generated@@168 $generated@@183))))
 :pattern ( ($generated@@168 $generated@@183))
 :pattern ( ($generated@@167 $generated@@183))
)))
(assert (forall (($generated@@184 T@U) ) (! (= ($generated@@174 ($generated@@162 $generated@@184)) ($generated@@162 ($generated@@174 $generated@@184)))
 :pattern ( ($generated@@174 ($generated@@162 $generated@@184)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 () T@U)
(declare-fun $generated@@189 () T@U)
(declare-fun $generated@@190 () T@U)
(declare-fun $generated@@191 () T@U)
(declare-fun $generated@@192 (T@U) Bool)
(declare-fun $generated@@193 (T@U) Bool)
(declare-fun $generated@@194 () Int)
(assert  (and (and (and (and (and (and (= (type $generated@@185) $generated@@45) (= (type $generated@@186) $generated@@45)) (= (type $generated@@187) $generated@@45)) (= (type $generated@@188) ($generated@@62 $generated@@52 $generated@@4))) (= (type $generated@@189) $generated@@52)) (= (type $generated@@190) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@191) ($generated@@55 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 32) (let (($generated@@195  (=> (= (ControlFlow 0 25) (- 0 24)) (or (or ($generated@@44 $generated@@185 $generated@@186) (= $generated@@185 $generated@@186)) ($generated@@44 $generated@@186 $generated@@185)))))
(let (($generated@@196  (=> (and (or ($generated@@44 $generated@@185 $generated@@186) (= $generated@@185 $generated@@186)) (= (ControlFlow 0 27) 25)) $generated@@195)))
(let (($generated@@197  (=> (and (not (or ($generated@@44 $generated@@185 $generated@@186) (= $generated@@185 $generated@@186))) (= (ControlFlow 0 26) 25)) $generated@@195)))
(let (($generated@@198  (=> ($generated@@44 $generated@@185 $generated@@186) (and (=> (= (ControlFlow 0 29) 26) $generated@@197) (=> (= (ControlFlow 0 29) 27) $generated@@196)))))
(let (($generated@@199  (=> (not ($generated@@44 $generated@@185 $generated@@186)) (and (=> (= (ControlFlow 0 28) 26) $generated@@197) (=> (= (ControlFlow 0 28) 27) $generated@@196)))))
(let (($generated@@200  (=> ($generated@@0 ($generated@@162 ($generated@@11 true))) (and (=> (= (ControlFlow 0 30) 28) $generated@@199) (=> (= (ControlFlow 0 30) 29) $generated@@198)))))
(let (($generated@@201  (=> (= (ControlFlow 0 20) (- 0 19)) (or (or (= $generated@@185 $generated@@186) ($generated@@44 $generated@@185 $generated@@186)) (or (= $generated@@186 $generated@@185) ($generated@@44 $generated@@186 $generated@@185))))))
(let (($generated@@202  (=> (and (or (= $generated@@185 $generated@@186) ($generated@@44 $generated@@185 $generated@@186)) (= (ControlFlow 0 22) 20)) $generated@@201)))
(let (($generated@@203  (=> (and (not (or (= $generated@@185 $generated@@186) ($generated@@44 $generated@@185 $generated@@186))) (= (ControlFlow 0 21) 20)) $generated@@201)))
(let (($generated@@204  (=> ($generated@@0 ($generated@@162 ($generated@@11 true))) (and (=> (= (ControlFlow 0 23) 21) $generated@@203) (=> (= (ControlFlow 0 23) 22) $generated@@202)))))
(let (($generated@@205  (=> (and (and (or (= $generated@@185 $generated@@186) ($generated@@44 $generated@@185 $generated@@186)) (or (= $generated@@186 $generated@@187) ($generated@@44 $generated@@186 $generated@@187))) (= (ControlFlow 0 16) (- 0 15))) (or (= $generated@@185 $generated@@187) ($generated@@44 $generated@@185 $generated@@187)))))
(let (($generated@@206  (=> (and (not (or (= $generated@@185 $generated@@186) ($generated@@44 $generated@@185 $generated@@186))) (= (ControlFlow 0 18) 16)) $generated@@205)))
(let (($generated@@207  (=> (and (or (= $generated@@185 $generated@@186) ($generated@@44 $generated@@185 $generated@@186)) (= (ControlFlow 0 17) 16)) $generated@@205)))
(let (($generated@@208  (=> (and (and ($generated@@44 $generated@@185 $generated@@186) ($generated@@44 $generated@@186 $generated@@187)) (= (ControlFlow 0 12) (- 0 11))) ($generated@@44 $generated@@185 $generated@@187))))
(let (($generated@@209  (=> (and (not ($generated@@44 $generated@@185 $generated@@186)) (= (ControlFlow 0 14) 12)) $generated@@208)))
(let (($generated@@210  (=> (and ($generated@@44 $generated@@185 $generated@@186) (= (ControlFlow 0 13) 12)) $generated@@208)))
(let (($generated@@211  (=> (and (and (and (and (and (and (and (and (not ($generated@@0 ($generated@@162 ($generated@@11 true)))) (not ($generated@@0 ($generated@@162 ($generated@@11 true))))) (not ($generated@@0 ($generated@@162 ($generated@@11 true))))) (not ($generated@@0 ($generated@@162 ($generated@@11 true))))) (not (and ($generated@@44 $generated@@185 $generated@@186) ($generated@@44 $generated@@186 $generated@@187)))) (not (and (or (= $generated@@185 $generated@@186) ($generated@@44 $generated@@185 $generated@@186)) (or (= $generated@@186 $generated@@187) ($generated@@44 $generated@@186 $generated@@187))))) (not ($generated@@0 ($generated@@162 ($generated@@11 true))))) (= $generated@@185 ($generated@@166 0))) (= (ControlFlow 0 10) (- 0 9))) false)))
(let (($generated@@212  (=> (and (not (= $generated@@185 ($generated@@166 0))) (= (ControlFlow 0 8) (- 0 7))) ($generated@@44 ($generated@@166 0) $generated@@185))))
(let (($generated@@213  (=> (and ($generated@@0 ($generated@@162 ($generated@@11 true))) (= (ControlFlow 0 6) (- 0 5))) (or (= ($generated@@166 0) $generated@@185) ($generated@@44 ($generated@@166 0) $generated@@185)))))
(let (($generated@@214  (=> (and ($generated@@0 ($generated@@162 ($generated@@11 true))) (= (ControlFlow 0 4) (- 0 3))) (or (= $generated@@185 $generated@@185) ($generated@@44 $generated@@185 $generated@@185)))))
(let (($generated@@215  (=> (and ($generated@@0 ($generated@@162 ($generated@@11 true))) (= (ControlFlow 0 2) (- 0 1))) ($generated@@44 $generated@@185 $generated@@185))))
(let (($generated@@216  (=> (= $generated@@188 ($generated@@50 $generated@@189 $generated@@190 $generated@@191 false)) (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 31) 2) $generated@@215) (=> (= (ControlFlow 0 31) 4) $generated@@214)) (=> (= (ControlFlow 0 31) 30) $generated@@200)) (=> (= (ControlFlow 0 31) 23) $generated@@204)) (=> (= (ControlFlow 0 31) 6) $generated@@213)) (=> (= (ControlFlow 0 31) 8) $generated@@212)) (=> (= (ControlFlow 0 31) 10) $generated@@211)) (=> (= (ControlFlow 0 31) 17) $generated@@207)) (=> (= (ControlFlow 0 31) 18) $generated@@206)) (=> (= (ControlFlow 0 31) 13) $generated@@210)) (=> (= (ControlFlow 0 31) 14) $generated@@209)))))
(let (($generated@@217  (=> (and (and ($generated@@192 $generated@@190) ($generated@@193 $generated@@190)) (and (= 0 $generated@@194) (= (ControlFlow 0 32) 31))) $generated@@216)))
$generated@@217))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@55 () T@U)
(declare-fun $generated@@56 () T@U)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@58 () T@U)
(declare-fun $generated@@59 () T@U)
(declare-fun $generated@@60 () T@U)
(declare-fun $generated@@61 () T@U)
(declare-fun $generated@@62 () T@U)
(declare-fun $generated@@63 () T@U)
(declare-fun $generated@@64 () T@U)
(declare-fun $generated@@65 () T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@69 (T@T) T@T)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@74 (T@U) T@U)
(declare-fun $generated@@76 (T@U T@U T@U) Bool)
(declare-fun $generated@@77 (Int) T@U)
(declare-fun $generated@@78 (T@T T@T) T@T)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 (T@T) T@T)
(declare-fun $generated@@82 (T@T) T@T)
(declare-fun $generated@@83 (T@U T@U) T@U)
(declare-fun $generated@@84 (T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@U T@U) T@U)
(declare-fun $generated@@86 (T@U T@U T@U) T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@T)
(declare-fun $generated@@138 (T@U T@U) Bool)
(declare-fun $generated@@140 (T@U) Bool)
(declare-fun $generated@@141 (T@U T@U) T@U)
(declare-fun $generated@@142 () T@T)
(declare-fun $generated@@148 (T@U T@U) Bool)
(declare-fun $generated@@149 (T@U) T@U)
(declare-fun $generated@@150 (T@U) T@U)
(declare-fun $generated@@155 (T@U) T@U)
(declare-fun $generated@@156 (T@U) Bool)
(declare-fun $generated@@160 (T@U T@U T@U) T@U)
(declare-fun $generated@@161 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@162 (T@T T@T) T@T)
(declare-fun $generated@@163 (T@T) T@T)
(declare-fun $generated@@164 (T@T) T@T)
(declare-fun $generated@@165 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@216 (T@U T@U) T@U)
(declare-fun $generated@@217 (T@U T@U) Bool)
(declare-fun $generated@@226 (T@U) T@U)
(declare-fun $generated@@231 (T@U) T@U)
(declare-fun $generated@@236 (T@U) T@U)
(declare-fun $generated@@240 (T@U) Bool)
(declare-fun $generated@@241 (T@U T@U T@U) Bool)
(declare-fun $generated@@247 (T@U) T@U)
(declare-fun $generated@@253 (T@T) T@U)
(declare-fun $generated@@254 (T@U) Int)
(declare-fun $generated@@255 (T@T) T@T)
(declare-fun $generated@@256 (T@T) T@T)
(declare-fun $generated@@261 (T@U) T@U)
(declare-fun $generated@@266 (T@U) Int)
(declare-fun $generated@@267 (T@T) T@U)
(declare-fun $generated@@272 (T@U) T@U)
(declare-fun $generated@@273 (T@T T@T) T@U)
(declare-fun $generated@@274 (T@T T@T) T@T)
(declare-fun $generated@@275 (T@T) T@T)
(declare-fun $generated@@276 (T@T) T@T)
(declare-fun $generated@@290 (T@U) T@U)
(declare-fun $generated@@291 (T@T T@T) T@U)
(declare-fun $generated@@292 (T@T T@T) T@T)
(declare-fun $generated@@293 (T@T) T@T)
(declare-fun $generated@@294 (T@T) T@T)
(declare-fun $generated@@308 (Int) T@U)
(declare-fun $generated@@309 (T@U) Bool)
(declare-fun $generated@@310 (T@U) Int)
(declare-fun $generated@@316 (T@T T@U) T@U)
(declare-fun $generated@@325 (T@U) T@U)
(declare-fun $generated@@336 (T@U) T@U)
(declare-fun $generated@@356 (T@U) T@U)
(declare-fun $generated@@357 (T@U) T@U)
(declare-fun $generated@@364 (T@U) T@U)
(declare-fun $generated@@365 (T@U) T@U)
(declare-fun $generated@@382 (T@U T@U) T@U)
(declare-fun $generated@@390 (T@U T@U) T@U)
(declare-fun $generated@@398 (T@T) T@U)
(declare-fun $generated@@422 () T@T)
(declare-fun $generated@@431 (T@U) T@U)
(declare-fun $generated@@435 (T@U) T@U)
(declare-fun $generated@@441 (T@U) T@U)
(declare-fun $generated@@445 (T@U) T@U)
(declare-fun $generated@@453 (T@U) T@U)
(declare-fun $generated@@457 (T@U) T@U)
(declare-fun $generated@@465 (T@U) T@U)
(declare-fun $generated@@466 (T@U Int) T@U)
(declare-fun $generated@@475 (T@U) Int)
(declare-fun $generated@@477 (T@U) T@U)
(declare-fun $generated@@481 (T@U) T@U)
(declare-fun $generated@@485 (T@U) T@U)
(declare-fun $generated@@489 (T@U) T@U)
(declare-fun $generated@@503 (T@U) Int)
(declare-fun $generated@@504 (T@U) Int)
(declare-fun $generated@@520 (T@U) T@U)
(declare-fun $generated@@569 (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@66) 6) (= (type $generated@@44) $generated@@66)) (= (type $generated@@45) $generated@@66)) (= (type $generated@@46) $generated@@66)) (= (type $generated@@47) $generated@@66)) (= (type $generated@@48) $generated@@66)) (= ($generated@@1 $generated@@67) 7)) (= (type $generated@@49) $generated@@67)) (= (type $generated@@50) $generated@@67)) (= (type $generated@@51) $generated@@67)) (= (type $generated@@52) $generated@@67)) (= (type $generated@@53) $generated@@67)) (= (type $generated@@54) $generated@@67)) (= (type $generated@@55) $generated@@67)) (= (type $generated@@56) $generated@@67)) (= (type $generated@@57) $generated@@67)) (= (type $generated@@58) $generated@@67)) (= (type $generated@@59) $generated@@67)) (forall (($generated@@72 T@T) ) (= ($generated@@1 ($generated@@68 $generated@@72)) 8))) (forall (($generated@@73 T@T) ) (! (= ($generated@@69 ($generated@@68 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@68 $generated@@73))
))) (= (type $generated@@60) ($generated@@68 $generated@@4))) (= ($generated@@1 $generated@@70) 9)) (= (type $generated@@61) $generated@@70)) (= (type $generated@@62) $generated@@67)) (= (type $generated@@63) $generated@@67)) (= ($generated@@1 $generated@@71) 10)) (= (type $generated@@64) $generated@@71)) (= (type $generated@@65) $generated@@71)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46 $generated@@47 $generated@@48 $generated@@49 $generated@@50 $generated@@51 $generated@@52 $generated@@53 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60 $generated@@61 $generated@@62 $generated@@63 $generated@@64 $generated@@65)
)
(assert (forall (($generated@@75 T@U) ) (! (= (type ($generated@@74 $generated@@75)) $generated@@67)
 :pattern ( ($generated@@74 $generated@@75))
)))
(assert (= ($generated@@74 $generated@@44) $generated@@49))
(assert (= ($generated@@74 $generated@@45) $generated@@50))
(assert (= ($generated@@74 $generated@@46) $generated@@51))
(assert (= ($generated@@74 $generated@@47) $generated@@52))
(assert (= ($generated@@74 $generated@@48) $generated@@53))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ) (= ($generated@@1 ($generated@@78 $generated@@87 $generated@@88)) 11)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ) (! (= ($generated@@81 ($generated@@78 $generated@@89 $generated@@90)) $generated@@89)
 :pattern ( ($generated@@78 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@T) ($generated@@92 T@T) ) (! (= ($generated@@82 ($generated@@78 $generated@@91 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@78 $generated@@91 $generated@@92))
))) (forall (($generated@@93 T@U) ($generated@@94 T@U) ) (! (let (($generated@@95 ($generated@@82 (type $generated@@93))))
(= (type ($generated@@83 $generated@@93 $generated@@94)) $generated@@95))
 :pattern ( ($generated@@83 $generated@@93 $generated@@94))
))) (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (let (($generated@@99 (type $generated@@98)))
(let (($generated@@100 (type $generated@@97)))
(= (type ($generated@@84 $generated@@96 $generated@@97 $generated@@98)) ($generated@@78 $generated@@100 $generated@@99))))
 :pattern ( ($generated@@84 $generated@@96 $generated@@97 $generated@@98))
))) (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (let (($generated@@104 ($generated@@82 (type $generated@@101))))
 (=> (= (type $generated@@103) $generated@@104) (= ($generated@@83 ($generated@@84 $generated@@101 $generated@@102 $generated@@103) $generated@@102) $generated@@103)))
 :weight 0
))) (and (forall (($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@107 $generated@@108) (= ($generated@@83 ($generated@@84 $generated@@106 $generated@@107 $generated@@105) $generated@@108) ($generated@@83 $generated@@106 $generated@@108)))
 :weight 0
)) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or true (= ($generated@@83 ($generated@@84 $generated@@110 $generated@@111 $generated@@109) $generated@@112) ($generated@@83 $generated@@110 $generated@@112)))
 :weight 0
)))) (= ($generated@@1 $generated@@79) 12)) (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (! (let (($generated@@115 ($generated@@69 (type $generated@@114))))
(= (type ($generated@@85 $generated@@113 $generated@@114)) $generated@@115))
 :pattern ( ($generated@@85 $generated@@113 $generated@@114))
))) (= ($generated@@1 $generated@@80) 13)) (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= (type ($generated@@86 $generated@@116 $generated@@117 $generated@@118)) $generated@@80)
 :pattern ( ($generated@@86 $generated@@116 $generated@@117 $generated@@118))
))) (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (let (($generated@@122 ($generated@@69 (type $generated@@120))))
 (=> (= (type $generated@@121) $generated@@122) (= ($generated@@85 ($generated@@86 $generated@@119 $generated@@120 $generated@@121) $generated@@120) $generated@@121)))
 :weight 0
))) (and (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (!  (or (= $generated@@125 $generated@@126) (= ($generated@@85 ($generated@@86 $generated@@124 $generated@@125 $generated@@123) $generated@@126) ($generated@@85 $generated@@124 $generated@@126)))
 :weight 0
)) (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or true (= ($generated@@85 ($generated@@86 $generated@@128 $generated@@129 $generated@@127) $generated@@130) ($generated@@85 $generated@@128 $generated@@130)))
 :weight 0
)))) (forall (($generated@@131 Int) ) (! (= (type ($generated@@77 $generated@@131)) $generated@@66)
 :pattern ( ($generated@@77 $generated@@131))
))))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (!  (=> (and (= (type $generated@@132) $generated@@2) (= (type $generated@@133) ($generated@@78 $generated@@79 $generated@@80))) ($generated@@76 $generated@@132 ($generated@@77 0) $generated@@133))
 :pattern ( ($generated@@76 $generated@@132 ($generated@@77 0) $generated@@133))
)))
(assert  (and (= ($generated@@1 $generated@@135) 14) (= (type $generated@@134) $generated@@66)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (!  (=> (and (= (type $generated@@136) $generated@@135) (= (type $generated@@137) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@136 $generated@@134 $generated@@137) ($generated@@76 $generated@@136 $generated@@48 $generated@@137)))
 :pattern ( ($generated@@76 $generated@@136 $generated@@134 $generated@@137))
)))
(assert (forall (($generated@@139 T@U) ) (!  (=> (= (type $generated@@139) $generated@@2) ($generated@@138 $generated@@139 ($generated@@77 0)))
 :pattern ( ($generated@@138 $generated@@139 ($generated@@77 0)))
)))
(assert  (and (= ($generated@@1 $generated@@142) 15) (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (! (= (type ($generated@@141 $generated@@143 $generated@@144)) $generated@@66)
 :pattern ( ($generated@@141 $generated@@143 $generated@@144))
))))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (!  (=> (and (and (and (= (type $generated@@145) $generated@@66) (= (type $generated@@146) $generated@@66)) (= (type $generated@@147) $generated@@142)) ($generated@@138 $generated@@147 ($generated@@141 $generated@@145 $generated@@146))) ($generated@@140 $generated@@147))
 :pattern ( ($generated@@140 $generated@@147) ($generated@@138 $generated@@147 ($generated@@141 $generated@@145 $generated@@146)))
)))
(assert  (and (forall (($generated@@151 T@U) ) (! (= (type ($generated@@149 $generated@@151)) $generated@@135)
 :pattern ( ($generated@@149 $generated@@151))
)) (forall (($generated@@152 T@U) ) (! (= (type ($generated@@150 $generated@@152)) $generated@@135)
 :pattern ( ($generated@@150 $generated@@152))
))))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (=> (and (and (= (type $generated@@153) $generated@@142) (= (type $generated@@154) $generated@@142)) true) (= ($generated@@148 $generated@@153 $generated@@154)  (and (= ($generated@@149 $generated@@153) ($generated@@149 $generated@@154)) (= ($generated@@150 $generated@@153) ($generated@@150 $generated@@154)))))
 :pattern ( ($generated@@148 $generated@@153 $generated@@154))
)))
(assert (forall (($generated@@157 T@U) ) (! (= (type ($generated@@155 $generated@@157)) $generated@@66)
 :pattern ( ($generated@@155 $generated@@157))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ) (!  (=> (and (and (= (type $generated@@158) ($generated@@78 $generated@@135 $generated@@2)) (= (type $generated@@159) $generated@@66)) ($generated@@138 $generated@@158 ($generated@@155 $generated@@159))) ($generated@@156 $generated@@158))
 :pattern ( ($generated@@138 $generated@@158 ($generated@@155 $generated@@159)))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@166 T@T) ($generated@@167 T@T) ) (= ($generated@@1 ($generated@@162 $generated@@166 $generated@@167)) 16)) (forall (($generated@@168 T@T) ($generated@@169 T@T) ) (! (= ($generated@@163 ($generated@@162 $generated@@168 $generated@@169)) $generated@@168)
 :pattern ( ($generated@@162 $generated@@168 $generated@@169))
))) (forall (($generated@@170 T@T) ($generated@@171 T@T) ) (! (= ($generated@@164 ($generated@@162 $generated@@170 $generated@@171)) $generated@@171)
 :pattern ( ($generated@@162 $generated@@170 $generated@@171))
))) (forall (($generated@@172 T@U) ($generated@@173 T@U) ($generated@@174 T@U) ) (! (let (($generated@@175 ($generated@@164 (type $generated@@172))))
(= (type ($generated@@160 $generated@@172 $generated@@173 $generated@@174)) $generated@@175))
 :pattern ( ($generated@@160 $generated@@172 $generated@@173 $generated@@174))
))) (forall (($generated@@176 T@U) ($generated@@177 T@U) ($generated@@178 T@U) ($generated@@179 T@U) ) (! (let (($generated@@180 (type $generated@@179)))
(let (($generated@@181 (type $generated@@177)))
(= (type ($generated@@165 $generated@@176 $generated@@177 $generated@@178 $generated@@179)) ($generated@@162 $generated@@181 $generated@@180))))
 :pattern ( ($generated@@165 $generated@@176 $generated@@177 $generated@@178 $generated@@179))
))) (forall (($generated@@182 T@U) ($generated@@183 T@U) ($generated@@184 T@U) ($generated@@185 T@U) ) (! (let (($generated@@186 ($generated@@164 (type $generated@@182))))
 (=> (= (type $generated@@185) $generated@@186) (= ($generated@@160 ($generated@@165 $generated@@182 $generated@@183 $generated@@184 $generated@@185) $generated@@183 $generated@@184) $generated@@185)))
 :weight 0
))) (and (and (forall (($generated@@187 T@U) ($generated@@188 T@U) ($generated@@189 T@U) ($generated@@190 T@U) ($generated@@191 T@U) ($generated@@192 T@U) ) (!  (or (= $generated@@189 $generated@@191) (= ($generated@@160 ($generated@@165 $generated@@188 $generated@@189 $generated@@190 $generated@@187) $generated@@191 $generated@@192) ($generated@@160 $generated@@188 $generated@@191 $generated@@192)))
 :weight 0
)) (forall (($generated@@193 T@U) ($generated@@194 T@U) ($generated@@195 T@U) ($generated@@196 T@U) ($generated@@197 T@U) ($generated@@198 T@U) ) (!  (or (= $generated@@196 $generated@@198) (= ($generated@@160 ($generated@@165 $generated@@194 $generated@@195 $generated@@196 $generated@@193) $generated@@197 $generated@@198) ($generated@@160 $generated@@194 $generated@@197 $generated@@198)))
 :weight 0
))) (forall (($generated@@199 T@U) ($generated@@200 T@U) ($generated@@201 T@U) ($generated@@202 T@U) ($generated@@203 T@U) ($generated@@204 T@U) ) (!  (or true (= ($generated@@160 ($generated@@165 $generated@@200 $generated@@201 $generated@@202 $generated@@199) $generated@@203 $generated@@204) ($generated@@160 $generated@@200 $generated@@203 $generated@@204)))
 :weight 0
)))) (forall (($generated@@205 T@U) ($generated@@206 T@U) ($generated@@207 T@U) ($generated@@208 Bool) ) (! (= (type ($generated@@161 $generated@@205 $generated@@206 $generated@@207 $generated@@208)) ($generated@@162 $generated@@79 $generated@@4))
 :pattern ( ($generated@@161 $generated@@205 $generated@@206 $generated@@207 $generated@@208))
))))
(assert (forall (($generated@@209 T@U) ($generated@@210 T@U) ($generated@@211 T@U) ($generated@@212 Bool) ($generated@@213 T@U) ($generated@@214 T@U) ) (! (let (($generated@@215 ($generated@@69 (type $generated@@214))))
 (=> (and (and (and (and (= (type $generated@@209) $generated@@79) (= (type $generated@@210) ($generated@@78 $generated@@79 $generated@@80))) (= (type $generated@@211) ($generated@@68 $generated@@4))) (= (type $generated@@213) $generated@@79)) (= (type $generated@@214) ($generated@@68 $generated@@215))) (= ($generated@@0 ($generated@@160 ($generated@@161 $generated@@209 $generated@@210 $generated@@211 $generated@@212) $generated@@213 $generated@@214))  (=> (and (not (= $generated@@213 $generated@@209)) ($generated@@0 ($generated@@85 ($generated@@83 $generated@@210 $generated@@213) $generated@@211))) $generated@@212))))
 :pattern ( ($generated@@160 ($generated@@161 $generated@@209 $generated@@210 $generated@@211 $generated@@212) $generated@@213 $generated@@214))
)))
(assert (forall (($generated@@218 T@U) ($generated@@219 T@U) ) (! (= (type ($generated@@216 $generated@@218 $generated@@219)) $generated@@142)
 :pattern ( ($generated@@216 $generated@@218 $generated@@219))
)))
(assert (forall (($generated@@220 T@U) ($generated@@221 T@U) ($generated@@222 T@U) ($generated@@223 T@U) ) (!  (=> (and (and (and (= (type $generated@@220) $generated@@66) (= (type $generated@@221) $generated@@66)) (= (type $generated@@222) $generated@@135)) (= (type $generated@@223) $generated@@135)) (= ($generated@@138 ($generated@@216 $generated@@222 $generated@@223) ($generated@@141 $generated@@220 $generated@@221))  (and ($generated@@217 $generated@@222 $generated@@220) ($generated@@217 $generated@@223 $generated@@221))))
 :pattern ( ($generated@@138 ($generated@@216 $generated@@222 $generated@@223) ($generated@@141 $generated@@220 $generated@@221)))
)))
(assert (forall (($generated@@224 T@U) ($generated@@225 T@U) ) (!  (=> (and (= (type $generated@@224) $generated@@142) (= (type $generated@@225) $generated@@142)) (= ($generated@@148 $generated@@224 $generated@@225) (= $generated@@224 $generated@@225)))
 :pattern ( ($generated@@148 $generated@@224 $generated@@225))
)))
(assert (forall (($generated@@227 T@U) ) (! (= (type ($generated@@226 $generated@@227)) $generated@@66)
 :pattern ( ($generated@@226 $generated@@227))
)))
(assert (forall (($generated@@228 T@U) ($generated@@229 T@U) ) (!  (=> (and (= (type $generated@@228) ($generated@@78 $generated@@135 $generated@@4)) (= (type $generated@@229) $generated@@66)) (= ($generated@@138 $generated@@228 ($generated@@226 $generated@@229)) (forall (($generated@@230 T@U) ) (!  (=> (and (= (type $generated@@230) $generated@@135) ($generated@@0 ($generated@@83 $generated@@228 $generated@@230))) ($generated@@217 $generated@@230 $generated@@229))
 :pattern ( ($generated@@83 $generated@@228 $generated@@230))
))))
 :pattern ( ($generated@@138 $generated@@228 ($generated@@226 $generated@@229)))
)))
(assert (forall (($generated@@232 T@U) ) (! (= (type ($generated@@231 $generated@@232)) $generated@@66)
 :pattern ( ($generated@@231 $generated@@232))
)))
(assert (forall (($generated@@233 T@U) ($generated@@234 T@U) ) (!  (=> (and (= (type $generated@@233) ($generated@@78 $generated@@135 $generated@@4)) (= (type $generated@@234) $generated@@66)) (= ($generated@@138 $generated@@233 ($generated@@231 $generated@@234)) (forall (($generated@@235 T@U) ) (!  (=> (and (= (type $generated@@235) $generated@@135) ($generated@@0 ($generated@@83 $generated@@233 $generated@@235))) ($generated@@217 $generated@@235 $generated@@234))
 :pattern ( ($generated@@83 $generated@@233 $generated@@235))
))))
 :pattern ( ($generated@@138 $generated@@233 ($generated@@231 $generated@@234)))
)))
(assert (forall (($generated@@237 T@U) ) (! (let (($generated@@238 (type $generated@@237)))
(= (type ($generated@@236 $generated@@237)) $generated@@238))
 :pattern ( ($generated@@236 $generated@@237))
)))
(assert (forall (($generated@@239 T@U) ) (! (= ($generated@@236 $generated@@239) $generated@@239)
 :pattern ( ($generated@@236 $generated@@239))
)))
(assert (forall (($generated@@242 T@U) ($generated@@243 T@U) ($generated@@244 T@U) ($generated@@245 T@U) ($generated@@246 T@U) ) (!  (=> (and (and (and (and (and (= (type $generated@@242) $generated@@66) (= (type $generated@@243) $generated@@66)) (= (type $generated@@244) $generated@@135)) (= (type $generated@@245) $generated@@135)) (= (type $generated@@246) ($generated@@78 $generated@@79 $generated@@80))) ($generated@@240 $generated@@246)) (= ($generated@@76 ($generated@@216 $generated@@244 $generated@@245) ($generated@@141 $generated@@242 $generated@@243) $generated@@246)  (and ($generated@@241 $generated@@244 $generated@@242 $generated@@246) ($generated@@241 $generated@@245 $generated@@243 $generated@@246))))
 :pattern ( ($generated@@76 ($generated@@216 $generated@@244 $generated@@245) ($generated@@141 $generated@@242 $generated@@243) $generated@@246))
)))
(assert (forall (($generated@@248 T@U) ) (! (= (type ($generated@@247 $generated@@248)) $generated@@70)
 :pattern ( ($generated@@247 $generated@@248))
)))
(assert (forall (($generated@@249 T@U) ) (!  (=> (= (type $generated@@249) $generated@@142) (= ($generated@@140 $generated@@249) (= ($generated@@247 $generated@@249) $generated@@61)))
 :pattern ( ($generated@@140 $generated@@249))
)))
(assert (forall (($generated@@250 T@U) ) (!  (=> (and (= (type $generated@@250) $generated@@142) ($generated@@140 $generated@@250)) (exists (($generated@@251 T@U) ($generated@@252 T@U) ) (!  (and (and (= (type $generated@@251) $generated@@135) (= (type $generated@@252) $generated@@135)) (= $generated@@250 ($generated@@216 $generated@@251 $generated@@252)))
 :no-pattern (type $generated@@251)
 :no-pattern (type $generated@@252)
 :no-pattern ($generated $generated@@251)
 :no-pattern ($generated@@0 $generated@@251)
 :no-pattern ($generated $generated@@252)
 :no-pattern ($generated@@0 $generated@@252)
)))
 :pattern ( ($generated@@140 $generated@@250))
)))
(assert  (and (and (forall (($generated@@257 T@T) ) (= ($generated@@1 ($generated@@255 $generated@@257)) 17)) (forall (($generated@@258 T@T) ) (! (= ($generated@@256 ($generated@@255 $generated@@258)) $generated@@258)
 :pattern ( ($generated@@255 $generated@@258))
))) (forall (($generated@@259 T@T) ) (! (= (type ($generated@@253 $generated@@259)) ($generated@@255 $generated@@259))
 :pattern ( ($generated@@253 $generated@@259))
))))
(assert (forall (($generated@@260 T@T) ) (! (= ($generated@@254 ($generated@@253 $generated@@260)) 0)
 :pattern ( ($generated@@253 $generated@@260))
)))
(assert (forall (($generated@@262 T@U) ) (! (= (type ($generated@@261 $generated@@262)) $generated@@135)
 :pattern ( ($generated@@261 $generated@@262))
)))
(assert (forall (($generated@@263 T@U) ($generated@@264 T@U) ($generated@@265 T@U) ) (!  (=> (and (= (type $generated@@264) $generated@@66) (= (type $generated@@265) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@241 ($generated@@261 $generated@@263) $generated@@264 $generated@@265) ($generated@@76 $generated@@263 $generated@@264 $generated@@265)))
 :pattern ( ($generated@@241 ($generated@@261 $generated@@263) $generated@@264 $generated@@265))
)))
(assert (forall (($generated@@268 T@T) ) (! (= (type ($generated@@267 $generated@@268)) ($generated@@78 $generated@@268 $generated@@2))
 :pattern ( ($generated@@267 $generated@@268))
)))
(assert (forall (($generated@@269 T@U) ) (! (let (($generated@@270 ($generated@@81 (type $generated@@269))))
 (=> (= (type $generated@@269) ($generated@@78 $generated@@270 $generated@@2)) (and (= (= ($generated@@266 $generated@@269) 0) (= $generated@@269 ($generated@@267 $generated@@270))) (=> (not (= ($generated@@266 $generated@@269) 0)) (exists (($generated@@271 T@U) ) (!  (and (= (type $generated@@271) $generated@@270) (< 0 ($generated ($generated@@83 $generated@@269 $generated@@271))))
 :no-pattern (type $generated@@271)
 :no-pattern ($generated $generated@@271)
 :no-pattern ($generated@@0 $generated@@271)
))))))
 :pattern ( ($generated@@266 $generated@@269))
)))
(assert  (and (and (and (and (forall (($generated@@277 T@T) ($generated@@278 T@T) ) (= ($generated@@1 ($generated@@274 $generated@@277 $generated@@278)) 18)) (forall (($generated@@279 T@T) ($generated@@280 T@T) ) (! (= ($generated@@275 ($generated@@274 $generated@@279 $generated@@280)) $generated@@279)
 :pattern ( ($generated@@274 $generated@@279 $generated@@280))
))) (forall (($generated@@281 T@T) ($generated@@282 T@T) ) (! (= ($generated@@276 ($generated@@274 $generated@@281 $generated@@282)) $generated@@282)
 :pattern ( ($generated@@274 $generated@@281 $generated@@282))
))) (forall (($generated@@283 T@U) ) (! (let (($generated@@284 ($generated@@275 (type $generated@@283))))
(= (type ($generated@@272 $generated@@283)) ($generated@@78 $generated@@284 $generated@@4)))
 :pattern ( ($generated@@272 $generated@@283))
))) (forall (($generated@@285 T@T) ($generated@@286 T@T) ) (! (= (type ($generated@@273 $generated@@285 $generated@@286)) ($generated@@274 $generated@@285 $generated@@286))
 :pattern ( ($generated@@273 $generated@@285 $generated@@286))
))))
(assert (forall (($generated@@287 T@U) ($generated@@288 T@T) ) (! (let (($generated@@289 (type $generated@@287)))
 (not ($generated@@0 ($generated@@83 ($generated@@272 ($generated@@273 $generated@@289 $generated@@288)) $generated@@287))))
 :pattern ( (let (($generated@@289 (type $generated@@287)))
($generated@@83 ($generated@@272 ($generated@@273 $generated@@289 $generated@@288)) $generated@@287)))
)))
(assert  (and (and (and (and (forall (($generated@@295 T@T) ($generated@@296 T@T) ) (= ($generated@@1 ($generated@@292 $generated@@295 $generated@@296)) 19)) (forall (($generated@@297 T@T) ($generated@@298 T@T) ) (! (= ($generated@@293 ($generated@@292 $generated@@297 $generated@@298)) $generated@@297)
 :pattern ( ($generated@@292 $generated@@297 $generated@@298))
))) (forall (($generated@@299 T@T) ($generated@@300 T@T) ) (! (= ($generated@@294 ($generated@@292 $generated@@299 $generated@@300)) $generated@@300)
 :pattern ( ($generated@@292 $generated@@299 $generated@@300))
))) (forall (($generated@@301 T@U) ) (! (let (($generated@@302 ($generated@@293 (type $generated@@301))))
(= (type ($generated@@290 $generated@@301)) ($generated@@78 $generated@@302 $generated@@4)))
 :pattern ( ($generated@@290 $generated@@301))
))) (forall (($generated@@303 T@T) ($generated@@304 T@T) ) (! (= (type ($generated@@291 $generated@@303 $generated@@304)) ($generated@@292 $generated@@303 $generated@@304))
 :pattern ( ($generated@@291 $generated@@303 $generated@@304))
))))
(assert (forall (($generated@@305 T@U) ($generated@@306 T@T) ) (! (let (($generated@@307 (type $generated@@305)))
 (not ($generated@@0 ($generated@@83 ($generated@@290 ($generated@@291 $generated@@307 $generated@@306)) $generated@@305))))
 :pattern ( (let (($generated@@307 (type $generated@@305)))
($generated@@83 ($generated@@290 ($generated@@291 $generated@@307 $generated@@306)) $generated@@305)))
)))
(assert (forall (($generated@@311 Int) ) (! (= (type ($generated@@308 $generated@@311)) $generated@@135)
 :pattern ( ($generated@@308 $generated@@311))
)))
(assert (forall (($generated@@312 Int) ) (!  (=> (<= 0 $generated@@312) (and ($generated@@309 ($generated@@308 $generated@@312)) (= ($generated@@310 ($generated@@308 $generated@@312)) $generated@@312)))
 :pattern ( ($generated@@308 $generated@@312))
)))
(assert (forall (($generated@@313 T@U) ) (! (let (($generated@@314 ($generated@@81 (type $generated@@313))))
 (=> (= (type $generated@@313) ($generated@@78 $generated@@314 $generated@@2)) (= ($generated@@156 $generated@@313) (forall (($generated@@315 T@U) ) (!  (=> (= (type $generated@@315) $generated@@314) (and (<= 0 ($generated ($generated@@83 $generated@@313 $generated@@315))) (<= ($generated ($generated@@83 $generated@@313 $generated@@315)) ($generated@@266 $generated@@313))))
 :pattern ( ($generated@@83 $generated@@313 $generated@@315))
)))))
 :pattern ( ($generated@@156 $generated@@313))
)))
(assert (forall (($generated@@317 T@T) ($generated@@318 T@U) ) (! (= (type ($generated@@316 $generated@@317 $generated@@318)) $generated@@317)
 :pattern ( ($generated@@316 $generated@@317 $generated@@318))
)))
(assert (forall (($generated@@319 T@U) ) (!  (=> (and (= (type $generated@@319) $generated@@135) ($generated@@217 $generated@@319 $generated@@134)) (and (= ($generated@@261 ($generated@@316 $generated@@135 $generated@@319)) $generated@@319) ($generated@@138 ($generated@@316 $generated@@135 $generated@@319) $generated@@134)))
 :pattern ( ($generated@@217 $generated@@319 $generated@@134))
)))
(assert (forall (($generated@@320 T@U) ) (!  (=> (= (type $generated@@320) $generated@@135) (= ($generated@@138 $generated@@320 $generated@@134)  (and ($generated@@138 $generated@@320 $generated@@48) (not (= $generated@@320 ($generated@@308 16))))))
 :pattern ( ($generated@@138 $generated@@320 $generated@@134))
)))
(assert (forall (($generated@@321 T@U) ) (! (let (($generated@@322 ($generated@@276 (type $generated@@321))))
(let (($generated@@323 ($generated@@275 (type $generated@@321))))
 (=> (= (type $generated@@321) ($generated@@274 $generated@@323 $generated@@322)) (or (= $generated@@321 ($generated@@273 $generated@@323 $generated@@322)) (exists (($generated@@324 T@U) ) (!  (and (= (type $generated@@324) $generated@@323) ($generated@@0 ($generated@@83 ($generated@@272 $generated@@321) $generated@@324)))
 :no-pattern (type $generated@@324)
 :no-pattern ($generated $generated@@324)
 :no-pattern ($generated@@0 $generated@@324)
))))))
 :pattern ( ($generated@@272 $generated@@321))
)))
(assert (forall (($generated@@326 T@U) ) (! (let (($generated@@327 ($generated@@276 (type $generated@@326))))
(= (type ($generated@@325 $generated@@326)) ($generated@@78 $generated@@327 $generated@@4)))
 :pattern ( ($generated@@325 $generated@@326))
)))
(assert (forall (($generated@@328 T@U) ) (! (let (($generated@@329 ($generated@@276 (type $generated@@328))))
(let (($generated@@330 ($generated@@275 (type $generated@@328))))
 (=> (= (type $generated@@328) ($generated@@274 $generated@@330 $generated@@329)) (or (= $generated@@328 ($generated@@273 $generated@@330 $generated@@329)) (exists (($generated@@331 T@U) ) (!  (and (= (type $generated@@331) $generated@@329) ($generated@@0 ($generated@@83 ($generated@@325 $generated@@328) $generated@@331)))
 :no-pattern (type $generated@@331)
 :no-pattern ($generated $generated@@331)
 :no-pattern ($generated@@0 $generated@@331)
))))))
 :pattern ( ($generated@@325 $generated@@328))
)))
(assert (forall (($generated@@332 T@U) ) (! (let (($generated@@333 ($generated@@294 (type $generated@@332))))
(let (($generated@@334 ($generated@@293 (type $generated@@332))))
 (=> (= (type $generated@@332) ($generated@@292 $generated@@334 $generated@@333)) (or (= $generated@@332 ($generated@@291 $generated@@334 $generated@@333)) (exists (($generated@@335 T@U) ) (!  (and (= (type $generated@@335) $generated@@334) ($generated@@0 ($generated@@83 ($generated@@290 $generated@@332) $generated@@335)))
 :no-pattern (type $generated@@335)
 :no-pattern ($generated $generated@@335)
 :no-pattern ($generated@@0 $generated@@335)
))))))
 :pattern ( ($generated@@290 $generated@@332))
)))
(assert (forall (($generated@@337 T@U) ) (! (let (($generated@@338 ($generated@@294 (type $generated@@337))))
(= (type ($generated@@336 $generated@@337)) ($generated@@78 $generated@@338 $generated@@4)))
 :pattern ( ($generated@@336 $generated@@337))
)))
(assert (forall (($generated@@339 T@U) ) (! (let (($generated@@340 ($generated@@294 (type $generated@@339))))
(let (($generated@@341 ($generated@@293 (type $generated@@339))))
 (=> (= (type $generated@@339) ($generated@@292 $generated@@341 $generated@@340)) (or (= $generated@@339 ($generated@@291 $generated@@341 $generated@@340)) (exists (($generated@@342 T@U) ) (!  (and (= (type $generated@@342) $generated@@340) ($generated@@0 ($generated@@83 ($generated@@336 $generated@@339) $generated@@342)))
 :no-pattern (type $generated@@342)
 :no-pattern ($generated $generated@@342)
 :no-pattern ($generated@@0 $generated@@342)
))))))
 :pattern ( ($generated@@336 $generated@@339))
)))
(assert (forall (($generated@@343 T@U) ($generated@@344 T@U) ) (!  (=> (and (= (type $generated@@343) ($generated@@78 $generated@@135 $generated@@2)) (= (type $generated@@344) $generated@@66)) (= ($generated@@138 $generated@@343 ($generated@@155 $generated@@344)) (forall (($generated@@345 T@U) ) (!  (=> (and (= (type $generated@@345) $generated@@135) (< 0 ($generated ($generated@@83 $generated@@343 $generated@@345)))) ($generated@@217 $generated@@345 $generated@@344))
 :pattern ( ($generated@@83 $generated@@343 $generated@@345))
))))
 :pattern ( ($generated@@138 $generated@@343 ($generated@@155 $generated@@344)))
)))
(assert (forall (($generated@@346 T@U) ($generated@@347 T@U) ($generated@@348 T@U) ) (!  (=> (and (and (= (type $generated@@346) ($generated@@78 $generated@@135 $generated@@4)) (= (type $generated@@347) $generated@@66)) (= (type $generated@@348) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@346 ($generated@@226 $generated@@347) $generated@@348) (forall (($generated@@349 T@U) ) (!  (=> (and (= (type $generated@@349) $generated@@135) ($generated@@0 ($generated@@83 $generated@@346 $generated@@349))) ($generated@@241 $generated@@349 $generated@@347 $generated@@348))
 :pattern ( ($generated@@83 $generated@@346 $generated@@349))
))))
 :pattern ( ($generated@@76 $generated@@346 ($generated@@226 $generated@@347) $generated@@348))
)))
(assert (forall (($generated@@350 T@U) ($generated@@351 T@U) ($generated@@352 T@U) ) (!  (=> (and (and (= (type $generated@@350) ($generated@@78 $generated@@135 $generated@@4)) (= (type $generated@@351) $generated@@66)) (= (type $generated@@352) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@350 ($generated@@231 $generated@@351) $generated@@352) (forall (($generated@@353 T@U) ) (!  (=> (and (= (type $generated@@353) $generated@@135) ($generated@@0 ($generated@@83 $generated@@350 $generated@@353))) ($generated@@241 $generated@@353 $generated@@351 $generated@@352))
 :pattern ( ($generated@@83 $generated@@350 $generated@@353))
))))
 :pattern ( ($generated@@76 $generated@@350 ($generated@@231 $generated@@351) $generated@@352))
)))
(assert (forall (($generated@@354 T@U) ) (! (let (($generated@@355 (type $generated@@354)))
(= ($generated ($generated@@83 ($generated@@267 $generated@@355) $generated@@354)) 0))
 :pattern ( (let (($generated@@355 (type $generated@@354)))
($generated@@83 ($generated@@267 $generated@@355) $generated@@354)))
)))
(assert  (and (forall (($generated@@358 T@U) ) (! (= (type ($generated@@356 $generated@@358)) ($generated@@78 $generated@@135 $generated@@4))
 :pattern ( ($generated@@356 $generated@@358))
)) (forall (($generated@@359 T@U) ) (! (let (($generated@@360 ($generated@@276 (type $generated@@359))))
(let (($generated@@361 ($generated@@275 (type $generated@@359))))
(= (type ($generated@@357 $generated@@359)) ($generated@@78 $generated@@361 $generated@@360))))
 :pattern ( ($generated@@357 $generated@@359))
))))
(assert (forall (($generated@@362 T@U) ($generated@@363 T@U) ) (!  (=> (and (= (type $generated@@362) ($generated@@274 $generated@@135 $generated@@135)) (= (type $generated@@363) $generated@@135)) (= ($generated@@0 ($generated@@83 ($generated@@356 $generated@@362) $generated@@363))  (and ($generated@@0 ($generated@@83 ($generated@@272 $generated@@362) ($generated@@149 ($generated@@316 $generated@@142 $generated@@363)))) (= ($generated@@83 ($generated@@357 $generated@@362) ($generated@@149 ($generated@@316 $generated@@142 $generated@@363))) ($generated@@150 ($generated@@316 $generated@@142 $generated@@363))))))
 :pattern ( ($generated@@83 ($generated@@356 $generated@@362) $generated@@363))
)))
(assert  (and (forall (($generated@@366 T@U) ) (! (= (type ($generated@@364 $generated@@366)) ($generated@@78 $generated@@135 $generated@@4))
 :pattern ( ($generated@@364 $generated@@366))
)) (forall (($generated@@367 T@U) ) (! (let (($generated@@368 ($generated@@294 (type $generated@@367))))
(let (($generated@@369 ($generated@@293 (type $generated@@367))))
(= (type ($generated@@365 $generated@@367)) ($generated@@78 $generated@@369 $generated@@368))))
 :pattern ( ($generated@@365 $generated@@367))
))))
(assert (forall (($generated@@370 T@U) ($generated@@371 T@U) ) (!  (=> (and (= (type $generated@@370) ($generated@@292 $generated@@135 $generated@@135)) (= (type $generated@@371) $generated@@135)) (= ($generated@@0 ($generated@@83 ($generated@@364 $generated@@370) $generated@@371))  (and ($generated@@0 ($generated@@83 ($generated@@290 $generated@@370) ($generated@@149 ($generated@@316 $generated@@142 $generated@@371)))) (= ($generated@@83 ($generated@@365 $generated@@370) ($generated@@149 ($generated@@316 $generated@@142 $generated@@371))) ($generated@@150 ($generated@@316 $generated@@142 $generated@@371))))))
 :pattern ( ($generated@@83 ($generated@@364 $generated@@370) $generated@@371))
)))
(assert (forall (($generated@@372 T@U) ($generated@@373 T@U) ) (! (let (($generated@@374 (type $generated@@373)))
(let (($generated@@375 ($generated@@275 (type $generated@@372))))
 (=> (= (type $generated@@372) ($generated@@274 $generated@@375 $generated@@374)) (= ($generated@@0 ($generated@@83 ($generated@@325 $generated@@372) $generated@@373)) (exists (($generated@@376 T@U) ) (!  (and (= (type $generated@@376) $generated@@375) (and ($generated@@0 ($generated@@83 ($generated@@272 $generated@@372) $generated@@376)) (= $generated@@373 ($generated@@83 ($generated@@357 $generated@@372) $generated@@376))))
 :pattern ( ($generated@@83 ($generated@@272 $generated@@372) $generated@@376))
 :pattern ( ($generated@@83 ($generated@@357 $generated@@372) $generated@@376))
))))))
 :pattern ( ($generated@@83 ($generated@@325 $generated@@372) $generated@@373))
)))
(assert (forall (($generated@@377 T@U) ($generated@@378 T@U) ) (! (let (($generated@@379 (type $generated@@378)))
(let (($generated@@380 ($generated@@293 (type $generated@@377))))
 (=> (= (type $generated@@377) ($generated@@292 $generated@@380 $generated@@379)) (= ($generated@@0 ($generated@@83 ($generated@@336 $generated@@377) $generated@@378)) (exists (($generated@@381 T@U) ) (!  (and (= (type $generated@@381) $generated@@380) (and ($generated@@0 ($generated@@83 ($generated@@290 $generated@@377) $generated@@381)) (= $generated@@378 ($generated@@83 ($generated@@365 $generated@@377) $generated@@381))))
 :pattern ( ($generated@@83 ($generated@@290 $generated@@377) $generated@@381))
 :pattern ( ($generated@@83 ($generated@@365 $generated@@377) $generated@@381))
))))))
 :pattern ( ($generated@@83 ($generated@@336 $generated@@377) $generated@@378))
)))
(assert (forall (($generated@@383 T@U) ($generated@@384 T@U) ) (! (= (type ($generated@@382 $generated@@383 $generated@@384)) $generated@@66)
 :pattern ( ($generated@@382 $generated@@383 $generated@@384))
)))
(assert (forall (($generated@@385 T@U) ($generated@@386 T@U) ($generated@@387 T@U) ($generated@@388 T@U) ) (!  (=> (and (and (and (= (type $generated@@385) ($generated@@274 $generated@@135 $generated@@135)) (= (type $generated@@386) $generated@@66)) (= (type $generated@@387) $generated@@66)) (= (type $generated@@388) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@385 ($generated@@382 $generated@@386 $generated@@387) $generated@@388) (forall (($generated@@389 T@U) ) (!  (=> (and (= (type $generated@@389) $generated@@135) ($generated@@0 ($generated@@83 ($generated@@272 $generated@@385) $generated@@389))) (and ($generated@@241 ($generated@@83 ($generated@@357 $generated@@385) $generated@@389) $generated@@387 $generated@@388) ($generated@@241 $generated@@389 $generated@@386 $generated@@388)))
 :pattern ( ($generated@@83 ($generated@@357 $generated@@385) $generated@@389))
 :pattern ( ($generated@@83 ($generated@@272 $generated@@385) $generated@@389))
))))
 :pattern ( ($generated@@76 $generated@@385 ($generated@@382 $generated@@386 $generated@@387) $generated@@388))
)))
(assert (forall (($generated@@391 T@U) ($generated@@392 T@U) ) (! (= (type ($generated@@390 $generated@@391 $generated@@392)) $generated@@66)
 :pattern ( ($generated@@390 $generated@@391 $generated@@392))
)))
(assert (forall (($generated@@393 T@U) ($generated@@394 T@U) ($generated@@395 T@U) ($generated@@396 T@U) ) (!  (=> (and (and (and (= (type $generated@@393) ($generated@@292 $generated@@135 $generated@@135)) (= (type $generated@@394) $generated@@66)) (= (type $generated@@395) $generated@@66)) (= (type $generated@@396) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@393 ($generated@@390 $generated@@394 $generated@@395) $generated@@396) (forall (($generated@@397 T@U) ) (!  (=> (and (= (type $generated@@397) $generated@@135) ($generated@@0 ($generated@@83 ($generated@@290 $generated@@393) $generated@@397))) (and ($generated@@241 ($generated@@83 ($generated@@365 $generated@@393) $generated@@397) $generated@@395 $generated@@396) ($generated@@241 $generated@@397 $generated@@394 $generated@@396)))
 :pattern ( ($generated@@83 ($generated@@365 $generated@@393) $generated@@397))
 :pattern ( ($generated@@83 ($generated@@290 $generated@@393) $generated@@397))
))))
 :pattern ( ($generated@@76 $generated@@393 ($generated@@390 $generated@@394 $generated@@395) $generated@@396))
)))
(assert (forall (($generated@@399 T@T) ) (! (= (type ($generated@@398 $generated@@399)) ($generated@@78 $generated@@399 $generated@@4))
 :pattern ( ($generated@@398 $generated@@399))
)))
(assert (forall (($generated@@400 T@U) ) (! (let (($generated@@401 ($generated@@294 (type $generated@@400))))
(let (($generated@@402 ($generated@@293 (type $generated@@400))))
 (=> (= (type $generated@@400) ($generated@@292 $generated@@402 $generated@@401)) (= (= $generated@@400 ($generated@@291 $generated@@402 $generated@@401)) (= ($generated@@290 $generated@@400) ($generated@@398 $generated@@402))))))
 :pattern ( ($generated@@290 $generated@@400))
)))
(assert (forall (($generated@@403 T@U) ) (! (let (($generated@@404 ($generated@@294 (type $generated@@403))))
(let (($generated@@405 ($generated@@293 (type $generated@@403))))
 (=> (= (type $generated@@403) ($generated@@292 $generated@@405 $generated@@404)) (= (= $generated@@403 ($generated@@291 $generated@@405 $generated@@404)) (= ($generated@@336 $generated@@403) ($generated@@398 $generated@@404))))))
 :pattern ( ($generated@@336 $generated@@403))
)))
(assert (forall (($generated@@406 T@U) ) (! (let (($generated@@407 ($generated@@294 (type $generated@@406))))
(let (($generated@@408 ($generated@@293 (type $generated@@406))))
 (=> (= (type $generated@@406) ($generated@@292 $generated@@408 $generated@@407)) (= (= $generated@@406 ($generated@@291 $generated@@408 $generated@@407)) (= ($generated@@364 $generated@@406) ($generated@@398 $generated@@135))))))
 :pattern ( ($generated@@364 $generated@@406))
)))
(assert (forall (($generated@@409 T@U) ) (! (let (($generated@@410 ($generated@@276 (type $generated@@409))))
(let (($generated@@411 ($generated@@275 (type $generated@@409))))
 (=> (= (type $generated@@409) ($generated@@274 $generated@@411 $generated@@410)) (or (= $generated@@409 ($generated@@273 $generated@@411 $generated@@410)) (exists (($generated@@412 T@U) ($generated@@413 T@U) ) (!  (and (and (= (type $generated@@412) $generated@@135) (= (type $generated@@413) $generated@@135)) ($generated@@0 ($generated@@83 ($generated@@356 $generated@@409) ($generated@@261 ($generated@@216 $generated@@412 $generated@@413)))))
 :no-pattern (type $generated@@412)
 :no-pattern (type $generated@@413)
 :no-pattern ($generated $generated@@412)
 :no-pattern ($generated@@0 $generated@@412)
 :no-pattern ($generated $generated@@413)
 :no-pattern ($generated@@0 $generated@@413)
))))))
 :pattern ( ($generated@@356 $generated@@409))
)))
(assert (forall (($generated@@414 T@U) ) (! (let (($generated@@415 ($generated@@294 (type $generated@@414))))
(let (($generated@@416 ($generated@@293 (type $generated@@414))))
 (=> (= (type $generated@@414) ($generated@@292 $generated@@416 $generated@@415)) (or (= $generated@@414 ($generated@@291 $generated@@416 $generated@@415)) (exists (($generated@@417 T@U) ($generated@@418 T@U) ) (!  (and (and (= (type $generated@@417) $generated@@135) (= (type $generated@@418) $generated@@135)) ($generated@@0 ($generated@@83 ($generated@@364 $generated@@414) ($generated@@261 ($generated@@216 $generated@@417 $generated@@418)))))
 :no-pattern (type $generated@@417)
 :no-pattern (type $generated@@418)
 :no-pattern ($generated $generated@@417)
 :no-pattern ($generated@@0 $generated@@417)
 :no-pattern ($generated $generated@@418)
 :no-pattern ($generated@@0 $generated@@418)
))))))
 :pattern ( ($generated@@364 $generated@@414))
)))
(assert (forall (($generated@@419 T@U) ) (!  (=> (and (= (type $generated@@419) $generated@@135) ($generated@@217 $generated@@419 $generated@@46)) (and (= ($generated@@261 ($generated@@316 $generated@@2 $generated@@419)) $generated@@419) ($generated@@138 ($generated@@316 $generated@@2 $generated@@419) $generated@@46)))
 :pattern ( ($generated@@217 $generated@@419 $generated@@46))
)))
(assert (forall (($generated@@420 T@U) ) (!  (=> (and (= (type $generated@@420) $generated@@135) ($generated@@217 $generated@@420 $generated@@47)) (and (= ($generated@@261 ($generated@@316 $generated@@3 $generated@@420)) $generated@@420) ($generated@@138 ($generated@@316 $generated@@3 $generated@@420) $generated@@47)))
 :pattern ( ($generated@@217 $generated@@420 $generated@@47))
)))
(assert (forall (($generated@@421 T@U) ) (!  (=> (and (= (type $generated@@421) $generated@@135) ($generated@@217 $generated@@421 $generated@@44)) (and (= ($generated@@261 ($generated@@316 $generated@@4 $generated@@421)) $generated@@421) ($generated@@138 ($generated@@316 $generated@@4 $generated@@421) $generated@@44)))
 :pattern ( ($generated@@217 $generated@@421 $generated@@44))
)))
(assert (= ($generated@@1 $generated@@422) 20))
(assert (forall (($generated@@423 T@U) ) (!  (=> (and (= (type $generated@@423) $generated@@135) ($generated@@217 $generated@@423 $generated@@45)) (and (= ($generated@@261 ($generated@@316 $generated@@422 $generated@@423)) $generated@@423) ($generated@@138 ($generated@@316 $generated@@422 $generated@@423) $generated@@45)))
 :pattern ( ($generated@@217 $generated@@423 $generated@@45))
)))
(assert (forall (($generated@@424 T@U) ($generated@@425 T@U) ) (!  (=> (= (type $generated@@425) $generated@@66) (= ($generated@@217 ($generated@@261 $generated@@424) $generated@@425) ($generated@@138 $generated@@424 $generated@@425)))
 :pattern ( ($generated@@217 ($generated@@261 $generated@@424) $generated@@425))
)))
(assert (forall (($generated@@426 T@U) ) (!  (=> (= (type $generated@@426) $generated@@135) (<= 0 ($generated@@310 $generated@@426)))
 :pattern ( ($generated@@310 $generated@@426))
)))
(assert (forall (($generated@@427 T@U) ) (! (let (($generated@@428 ($generated@@81 (type $generated@@427))))
 (=> (= (type $generated@@427) ($generated@@78 $generated@@428 $generated@@2)) (<= 0 ($generated@@266 $generated@@427))))
 :pattern ( ($generated@@266 $generated@@427))
)))
(assert (forall (($generated@@429 T@U) ) (! (let (($generated@@430 ($generated@@256 (type $generated@@429))))
 (=> (= (type $generated@@429) ($generated@@255 $generated@@430)) (<= 0 ($generated@@254 $generated@@429))))
 :pattern ( ($generated@@254 $generated@@429))
)))
(assert (forall (($generated@@432 T@U) ) (! (= (type ($generated@@431 $generated@@432)) $generated@@66)
 :pattern ( ($generated@@431 $generated@@432))
)))
(assert (forall (($generated@@433 T@U) ($generated@@434 T@U) ) (!  (=> (and (= (type $generated@@433) $generated@@66) (= (type $generated@@434) $generated@@66)) (= ($generated@@431 ($generated@@382 $generated@@433 $generated@@434)) $generated@@433))
 :pattern ( ($generated@@382 $generated@@433 $generated@@434))
)))
(assert (forall (($generated@@436 T@U) ) (! (= (type ($generated@@435 $generated@@436)) $generated@@66)
 :pattern ( ($generated@@435 $generated@@436))
)))
(assert (forall (($generated@@437 T@U) ($generated@@438 T@U) ) (!  (=> (and (= (type $generated@@437) $generated@@66) (= (type $generated@@438) $generated@@66)) (= ($generated@@435 ($generated@@382 $generated@@437 $generated@@438)) $generated@@438))
 :pattern ( ($generated@@382 $generated@@437 $generated@@438))
)))
(assert (forall (($generated@@439 T@U) ($generated@@440 T@U) ) (!  (=> (and (= (type $generated@@439) $generated@@66) (= (type $generated@@440) $generated@@66)) (= ($generated@@74 ($generated@@382 $generated@@439 $generated@@440)) $generated@@58))
 :pattern ( ($generated@@382 $generated@@439 $generated@@440))
)))
(assert (forall (($generated@@442 T@U) ) (! (= (type ($generated@@441 $generated@@442)) $generated@@66)
 :pattern ( ($generated@@441 $generated@@442))
)))
(assert (forall (($generated@@443 T@U) ($generated@@444 T@U) ) (!  (=> (and (= (type $generated@@443) $generated@@66) (= (type $generated@@444) $generated@@66)) (= ($generated@@441 ($generated@@390 $generated@@443 $generated@@444)) $generated@@443))
 :pattern ( ($generated@@390 $generated@@443 $generated@@444))
)))
(assert (forall (($generated@@446 T@U) ) (! (= (type ($generated@@445 $generated@@446)) $generated@@66)
 :pattern ( ($generated@@445 $generated@@446))
)))
(assert (forall (($generated@@447 T@U) ($generated@@448 T@U) ) (!  (=> (and (= (type $generated@@447) $generated@@66) (= (type $generated@@448) $generated@@66)) (= ($generated@@445 ($generated@@390 $generated@@447 $generated@@448)) $generated@@448))
 :pattern ( ($generated@@390 $generated@@447 $generated@@448))
)))
(assert (forall (($generated@@449 T@U) ($generated@@450 T@U) ) (!  (=> (and (= (type $generated@@449) $generated@@66) (= (type $generated@@450) $generated@@66)) (= ($generated@@74 ($generated@@390 $generated@@449 $generated@@450)) $generated@@59))
 :pattern ( ($generated@@390 $generated@@449 $generated@@450))
)))
(assert (forall (($generated@@451 T@U) ($generated@@452 T@U) ) (!  (=> (and (= (type $generated@@451) $generated@@135) (= (type $generated@@452) $generated@@135)) (= ($generated@@247 ($generated@@216 $generated@@451 $generated@@452)) $generated@@61))
 :pattern ( ($generated@@216 $generated@@451 $generated@@452))
)))
(assert (forall (($generated@@454 T@U) ) (! (= (type ($generated@@453 $generated@@454)) $generated@@66)
 :pattern ( ($generated@@453 $generated@@454))
)))
(assert (forall (($generated@@455 T@U) ($generated@@456 T@U) ) (!  (=> (and (= (type $generated@@455) $generated@@66) (= (type $generated@@456) $generated@@66)) (= ($generated@@453 ($generated@@141 $generated@@455 $generated@@456)) $generated@@455))
 :pattern ( ($generated@@141 $generated@@455 $generated@@456))
)))
(assert (forall (($generated@@458 T@U) ) (! (= (type ($generated@@457 $generated@@458)) $generated@@66)
 :pattern ( ($generated@@457 $generated@@458))
)))
(assert (forall (($generated@@459 T@U) ($generated@@460 T@U) ) (!  (=> (and (= (type $generated@@459) $generated@@66) (= (type $generated@@460) $generated@@66)) (= ($generated@@457 ($generated@@141 $generated@@459 $generated@@460)) $generated@@460))
 :pattern ( ($generated@@141 $generated@@459 $generated@@460))
)))
(assert (forall (($generated@@461 T@U) ($generated@@462 T@U) ) (!  (=> (and (= (type $generated@@461) $generated@@135) (= (type $generated@@462) $generated@@135)) (= ($generated@@149 ($generated@@216 $generated@@461 $generated@@462)) $generated@@461))
 :pattern ( ($generated@@216 $generated@@461 $generated@@462))
)))
(assert (forall (($generated@@463 T@U) ($generated@@464 T@U) ) (!  (=> (and (= (type $generated@@463) $generated@@135) (= (type $generated@@464) $generated@@135)) (= ($generated@@150 ($generated@@216 $generated@@463 $generated@@464)) $generated@@464))
 :pattern ( ($generated@@216 $generated@@463 $generated@@464))
)))
(assert  (and (forall (($generated@@467 T@U) ) (! (= (type ($generated@@465 $generated@@467)) $generated@@66)
 :pattern ( ($generated@@465 $generated@@467))
)) (forall (($generated@@468 T@U) ($generated@@469 Int) ) (! (let (($generated@@470 ($generated@@256 (type $generated@@468))))
(= (type ($generated@@466 $generated@@468 $generated@@469)) $generated@@470))
 :pattern ( ($generated@@466 $generated@@468 $generated@@469))
))))
(assert (forall (($generated@@471 T@U) ($generated@@472 T@U) ($generated@@473 T@U) ) (!  (=> (and (and (= (type $generated@@471) ($generated@@255 $generated@@135)) (= (type $generated@@472) $generated@@66)) (= (type $generated@@473) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@471 ($generated@@465 $generated@@472) $generated@@473) (forall (($generated@@474 Int) ) (!  (=> (and (<= 0 $generated@@474) (< $generated@@474 ($generated@@254 $generated@@471))) ($generated@@241 ($generated@@466 $generated@@471 $generated@@474) $generated@@472 $generated@@473))
 :pattern ( ($generated@@466 $generated@@471 $generated@@474))
))))
 :pattern ( ($generated@@76 $generated@@471 ($generated@@465 $generated@@472) $generated@@473))
)))
(assert (forall (($generated@@476 Int) ) (! (= ($generated@@475 ($generated@@77 $generated@@476)) $generated@@476)
 :pattern ( ($generated@@77 $generated@@476))
)))
(assert (forall (($generated@@478 T@U) ) (! (= (type ($generated@@477 $generated@@478)) $generated@@66)
 :pattern ( ($generated@@477 $generated@@478))
)))
(assert (forall (($generated@@479 T@U) ) (!  (=> (= (type $generated@@479) $generated@@66) (= ($generated@@477 ($generated@@226 $generated@@479)) $generated@@479))
 :pattern ( ($generated@@226 $generated@@479))
)))
(assert (forall (($generated@@480 T@U) ) (!  (=> (= (type $generated@@480) $generated@@66) (= ($generated@@74 ($generated@@226 $generated@@480)) $generated@@54))
 :pattern ( ($generated@@226 $generated@@480))
)))
(assert (forall (($generated@@482 T@U) ) (! (= (type ($generated@@481 $generated@@482)) $generated@@66)
 :pattern ( ($generated@@481 $generated@@482))
)))
(assert (forall (($generated@@483 T@U) ) (!  (=> (= (type $generated@@483) $generated@@66) (= ($generated@@481 ($generated@@231 $generated@@483)) $generated@@483))
 :pattern ( ($generated@@231 $generated@@483))
)))
(assert (forall (($generated@@484 T@U) ) (!  (=> (= (type $generated@@484) $generated@@66) (= ($generated@@74 ($generated@@231 $generated@@484)) $generated@@55))
 :pattern ( ($generated@@231 $generated@@484))
)))
(assert (forall (($generated@@486 T@U) ) (! (= (type ($generated@@485 $generated@@486)) $generated@@66)
 :pattern ( ($generated@@485 $generated@@486))
)))
(assert (forall (($generated@@487 T@U) ) (!  (=> (= (type $generated@@487) $generated@@66) (= ($generated@@485 ($generated@@155 $generated@@487)) $generated@@487))
 :pattern ( ($generated@@155 $generated@@487))
)))
(assert (forall (($generated@@488 T@U) ) (!  (=> (= (type $generated@@488) $generated@@66) (= ($generated@@74 ($generated@@155 $generated@@488)) $generated@@56))
 :pattern ( ($generated@@155 $generated@@488))
)))
(assert (forall (($generated@@490 T@U) ) (! (= (type ($generated@@489 $generated@@490)) $generated@@66)
 :pattern ( ($generated@@489 $generated@@490))
)))
(assert (forall (($generated@@491 T@U) ) (!  (=> (= (type $generated@@491) $generated@@66) (= ($generated@@489 ($generated@@465 $generated@@491)) $generated@@491))
 :pattern ( ($generated@@465 $generated@@491))
)))
(assert (forall (($generated@@492 T@U) ) (!  (=> (= (type $generated@@492) $generated@@66) (= ($generated@@74 ($generated@@465 $generated@@492)) $generated@@57))
 :pattern ( ($generated@@465 $generated@@492))
)))
(assert (forall (($generated@@493 T@U) ) (! (let (($generated@@494 (type $generated@@493)))
(= ($generated@@316 $generated@@494 ($generated@@261 $generated@@493)) $generated@@493))
 :pattern ( ($generated@@261 $generated@@493))
)))
(assert (forall (($generated@@495 T@U) ($generated@@496 T@U) ($generated@@497 T@U) ) (!  (=> (and (and (= (type $generated@@495) ($generated@@274 $generated@@135 $generated@@135)) (= (type $generated@@496) $generated@@66)) (= (type $generated@@497) $generated@@66)) (= ($generated@@138 $generated@@495 ($generated@@382 $generated@@496 $generated@@497)) (forall (($generated@@498 T@U) ) (!  (=> (and (= (type $generated@@498) $generated@@135) ($generated@@0 ($generated@@83 ($generated@@272 $generated@@495) $generated@@498))) (and ($generated@@217 ($generated@@83 ($generated@@357 $generated@@495) $generated@@498) $generated@@497) ($generated@@217 $generated@@498 $generated@@496)))
 :pattern ( ($generated@@83 ($generated@@357 $generated@@495) $generated@@498))
 :pattern ( ($generated@@83 ($generated@@272 $generated@@495) $generated@@498))
))))
 :pattern ( ($generated@@138 $generated@@495 ($generated@@382 $generated@@496 $generated@@497)))
)))
(assert (forall (($generated@@499 T@U) ($generated@@500 T@U) ($generated@@501 T@U) ) (!  (=> (and (and (= (type $generated@@499) ($generated@@292 $generated@@135 $generated@@135)) (= (type $generated@@500) $generated@@66)) (= (type $generated@@501) $generated@@66)) (= ($generated@@138 $generated@@499 ($generated@@390 $generated@@500 $generated@@501)) (forall (($generated@@502 T@U) ) (!  (=> (and (= (type $generated@@502) $generated@@135) ($generated@@0 ($generated@@83 ($generated@@290 $generated@@499) $generated@@502))) (and ($generated@@217 ($generated@@83 ($generated@@365 $generated@@499) $generated@@502) $generated@@501) ($generated@@217 $generated@@502 $generated@@500)))
 :pattern ( ($generated@@83 ($generated@@365 $generated@@499) $generated@@502))
 :pattern ( ($generated@@83 ($generated@@290 $generated@@499) $generated@@502))
))))
 :pattern ( ($generated@@138 $generated@@499 ($generated@@390 $generated@@500 $generated@@501)))
)))
(assert (forall (($generated@@505 T@U) ($generated@@506 T@U) ) (!  (=> (and (= (type $generated@@505) $generated@@135) (= (type $generated@@506) $generated@@135)) (< ($generated@@503 $generated@@505) ($generated@@504 ($generated@@216 $generated@@505 $generated@@506))))
 :pattern ( ($generated@@216 $generated@@505 $generated@@506))
)))
(assert (forall (($generated@@507 T@U) ($generated@@508 T@U) ) (!  (=> (and (= (type $generated@@507) $generated@@135) (= (type $generated@@508) $generated@@135)) (< ($generated@@503 $generated@@508) ($generated@@504 ($generated@@216 $generated@@507 $generated@@508))))
 :pattern ( ($generated@@216 $generated@@507 $generated@@508))
)))
(assert (forall (($generated@@509 T@U) ($generated@@510 T@U) ($generated@@511 T@U) ) (!  (=> (and (and (and (= (type $generated@@509) $generated@@135) (= (type $generated@@510) $generated@@66)) (= (type $generated@@511) $generated@@66)) ($generated@@217 $generated@@509 ($generated@@382 $generated@@510 $generated@@511))) (and (= ($generated@@261 ($generated@@316 ($generated@@274 $generated@@135 $generated@@135) $generated@@509)) $generated@@509) ($generated@@138 ($generated@@316 ($generated@@274 $generated@@135 $generated@@135) $generated@@509) ($generated@@382 $generated@@510 $generated@@511))))
 :pattern ( ($generated@@217 $generated@@509 ($generated@@382 $generated@@510 $generated@@511)))
)))
(assert (forall (($generated@@512 T@U) ($generated@@513 T@U) ($generated@@514 T@U) ) (!  (=> (and (and (and (= (type $generated@@512) $generated@@135) (= (type $generated@@513) $generated@@66)) (= (type $generated@@514) $generated@@66)) ($generated@@217 $generated@@512 ($generated@@390 $generated@@513 $generated@@514))) (and (= ($generated@@261 ($generated@@316 ($generated@@292 $generated@@135 $generated@@135) $generated@@512)) $generated@@512) ($generated@@138 ($generated@@316 ($generated@@292 $generated@@135 $generated@@135) $generated@@512) ($generated@@390 $generated@@513 $generated@@514))))
 :pattern ( ($generated@@217 $generated@@512 ($generated@@390 $generated@@513 $generated@@514)))
)))
(assert (forall (($generated@@515 T@U) ($generated@@516 T@U) ($generated@@517 T@U) ) (!  (=> (and (and (and (= (type $generated@@515) $generated@@66) (= (type $generated@@516) $generated@@66)) (= (type $generated@@517) $generated@@135)) ($generated@@217 $generated@@517 ($generated@@141 $generated@@515 $generated@@516))) (and (= ($generated@@261 ($generated@@316 $generated@@142 $generated@@517)) $generated@@517) ($generated@@138 ($generated@@316 $generated@@142 $generated@@517) ($generated@@141 $generated@@515 $generated@@516))))
 :pattern ( ($generated@@217 $generated@@517 ($generated@@141 $generated@@515 $generated@@516)))
)))
(assert (forall (($generated@@518 T@U) ) (! (let (($generated@@519 (type $generated@@518)))
 (not ($generated@@0 ($generated@@83 ($generated@@398 $generated@@519) $generated@@518))))
 :pattern ( (let (($generated@@519 (type $generated@@518)))
($generated@@83 ($generated@@398 $generated@@519) $generated@@518)))
)))
(assert (forall (($generated@@521 T@U) ) (! (= (type ($generated@@520 $generated@@521)) $generated@@71)
 :pattern ( ($generated@@520 $generated@@521))
)))
(assert (forall (($generated@@522 T@U) ($generated@@523 T@U) ) (!  (=> (and (= (type $generated@@522) $generated@@66) (= (type $generated@@523) $generated@@66)) (and (= ($generated@@74 ($generated@@141 $generated@@522 $generated@@523)) $generated@@62) (= ($generated@@520 ($generated@@141 $generated@@522 $generated@@523)) $generated@@64)))
 :pattern ( ($generated@@141 $generated@@522 $generated@@523))
)))
(assert (forall (($generated@@524 T@U) ) (!  (=> (= (type $generated@@524) $generated@@142) (= ($generated@@503 ($generated@@261 $generated@@524)) ($generated@@504 $generated@@524)))
 :pattern ( ($generated@@503 ($generated@@261 $generated@@524)))
)))
(assert (forall (($generated@@525 T@U) ) (!  (=> (and (= (type $generated@@525) $generated@@135) ($generated@@217 $generated@@525 ($generated@@77 0))) (and (= ($generated@@261 ($generated@@316 $generated@@2 $generated@@525)) $generated@@525) ($generated@@138 ($generated@@316 ($generated@@78 $generated@@135 $generated@@4) $generated@@525) ($generated@@77 0))))
 :pattern ( ($generated@@217 $generated@@525 ($generated@@77 0)))
)))
(assert (forall (($generated@@526 T@U) ($generated@@527 T@U) ) (!  (=> (and (and (= (type $generated@@526) $generated@@135) (= (type $generated@@527) $generated@@66)) ($generated@@217 $generated@@526 ($generated@@226 $generated@@527))) (and (= ($generated@@261 ($generated@@316 ($generated@@78 $generated@@135 $generated@@4) $generated@@526)) $generated@@526) ($generated@@138 ($generated@@316 ($generated@@78 $generated@@135 $generated@@4) $generated@@526) ($generated@@226 $generated@@527))))
 :pattern ( ($generated@@217 $generated@@526 ($generated@@226 $generated@@527)))
)))
(assert (forall (($generated@@528 T@U) ($generated@@529 T@U) ) (!  (=> (and (and (= (type $generated@@528) $generated@@135) (= (type $generated@@529) $generated@@66)) ($generated@@217 $generated@@528 ($generated@@231 $generated@@529))) (and (= ($generated@@261 ($generated@@316 ($generated@@78 $generated@@135 $generated@@4) $generated@@528)) $generated@@528) ($generated@@138 ($generated@@316 ($generated@@78 $generated@@135 $generated@@4) $generated@@528) ($generated@@231 $generated@@529))))
 :pattern ( ($generated@@217 $generated@@528 ($generated@@231 $generated@@529)))
)))
(assert (forall (($generated@@530 T@U) ($generated@@531 T@U) ) (!  (=> (and (and (= (type $generated@@530) $generated@@135) (= (type $generated@@531) $generated@@66)) ($generated@@217 $generated@@530 ($generated@@155 $generated@@531))) (and (= ($generated@@261 ($generated@@316 ($generated@@78 $generated@@135 $generated@@2) $generated@@530)) $generated@@530) ($generated@@138 ($generated@@316 ($generated@@78 $generated@@135 $generated@@2) $generated@@530) ($generated@@155 $generated@@531))))
 :pattern ( ($generated@@217 $generated@@530 ($generated@@155 $generated@@531)))
)))
(assert (forall (($generated@@532 T@U) ($generated@@533 T@U) ) (!  (=> (and (and (= (type $generated@@532) $generated@@135) (= (type $generated@@533) $generated@@66)) ($generated@@217 $generated@@532 ($generated@@465 $generated@@533))) (and (= ($generated@@261 ($generated@@316 ($generated@@255 $generated@@135) $generated@@532)) $generated@@532) ($generated@@138 ($generated@@316 ($generated@@255 $generated@@135) $generated@@532) ($generated@@465 $generated@@533))))
 :pattern ( ($generated@@217 $generated@@532 ($generated@@465 $generated@@533)))
)))
(assert (forall (($generated@@534 T@U) ) (!  (=> (and (= (type $generated@@534) $generated@@135) ($generated@@309 $generated@@534)) (= $generated@@534 ($generated@@308 ($generated@@310 $generated@@534))))
 :pattern ( ($generated@@310 $generated@@534))
 :pattern ( ($generated@@309 $generated@@534))
)))
(assert (= ($generated@@74 $generated@@134) $generated@@63))
(assert (= ($generated@@520 $generated@@134) $generated@@65))
(assert (forall (($generated@@535 T@U) ($generated@@536 T@U) ($generated@@537 T@U) ) (!  (=> (and (and (= (type $generated@@535) ($generated@@78 $generated@@135 $generated@@2)) (= (type $generated@@536) $generated@@66)) (= (type $generated@@537) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@535 ($generated@@155 $generated@@536) $generated@@537) (forall (($generated@@538 T@U) ) (!  (=> (and (= (type $generated@@538) $generated@@135) (< 0 ($generated ($generated@@83 $generated@@535 $generated@@538)))) ($generated@@241 $generated@@538 $generated@@536 $generated@@537))
 :pattern ( ($generated@@83 $generated@@535 $generated@@538))
))))
 :pattern ( ($generated@@76 $generated@@535 ($generated@@155 $generated@@536) $generated@@537))
)))
(assert (forall (($generated@@539 T@U) ($generated@@540 T@U) ($generated@@541 T@U) ) (!  (=> (and (and (and (= (type $generated@@539) $generated@@142) (= (type $generated@@540) $generated@@66)) (= (type $generated@@541) ($generated@@78 $generated@@79 $generated@@80))) (and ($generated@@240 $generated@@541) (and ($generated@@140 $generated@@539) (exists (($generated@@542 T@U) ) (!  (and (= (type $generated@@542) $generated@@66) ($generated@@76 $generated@@539 ($generated@@141 $generated@@540 $generated@@542) $generated@@541))
 :pattern ( ($generated@@76 $generated@@539 ($generated@@141 $generated@@540 $generated@@542) $generated@@541))
))))) ($generated@@241 ($generated@@149 $generated@@539) $generated@@540 $generated@@541))
 :pattern ( ($generated@@241 ($generated@@149 $generated@@539) $generated@@540 $generated@@541))
)))
(assert (forall (($generated@@543 T@U) ($generated@@544 T@U) ($generated@@545 T@U) ) (!  (=> (and (and (and (= (type $generated@@543) $generated@@142) (= (type $generated@@544) $generated@@66)) (= (type $generated@@545) ($generated@@78 $generated@@79 $generated@@80))) (and ($generated@@240 $generated@@545) (and ($generated@@140 $generated@@543) (exists (($generated@@546 T@U) ) (!  (and (= (type $generated@@546) $generated@@66) ($generated@@76 $generated@@543 ($generated@@141 $generated@@546 $generated@@544) $generated@@545))
 :pattern ( ($generated@@76 $generated@@543 ($generated@@141 $generated@@546 $generated@@544) $generated@@545))
))))) ($generated@@241 ($generated@@150 $generated@@543) $generated@@544 $generated@@545))
 :pattern ( ($generated@@241 ($generated@@150 $generated@@543) $generated@@544 $generated@@545))
)))
(assert (forall (($generated@@547 T@U) ($generated@@548 T@U) ) (!  (=> (and (= (type $generated@@547) $generated@@135) (= (type $generated@@548) $generated@@135)) (= ($generated@@216 ($generated@@236 $generated@@547) ($generated@@236 $generated@@548)) ($generated@@236 ($generated@@216 $generated@@547 $generated@@548))))
 :pattern ( ($generated@@216 ($generated@@236 $generated@@547) ($generated@@236 $generated@@548)))
)))
(assert (forall (($generated@@549 T@U) ) (! (= ($generated@@261 ($generated@@236 $generated@@549)) ($generated@@236 ($generated@@261 $generated@@549)))
 :pattern ( ($generated@@261 ($generated@@236 $generated@@549)))
)))
(assert (forall (($generated@@550 T@U) ) (! (let (($generated@@551 ($generated@@256 (type $generated@@550))))
 (=> (and (= (type $generated@@550) ($generated@@255 $generated@@551)) (= ($generated@@254 $generated@@550) 0)) (= $generated@@550 ($generated@@253 $generated@@551))))
 :pattern ( ($generated@@254 $generated@@550))
)))
(assert (forall (($generated@@552 T@U) ($generated@@553 T@U) ($generated@@554 T@U) ) (! (let (($generated@@555 (type $generated@@553)))
 (=> (and (and (= (type $generated@@552) ($generated@@78 $generated@@555 $generated@@2)) (= (type $generated@@554) $generated@@2)) (<= 0 ($generated $generated@@554))) (= ($generated@@266 ($generated@@84 $generated@@552 $generated@@553 $generated@@554)) (+ (- ($generated@@266 $generated@@552) ($generated ($generated@@83 $generated@@552 $generated@@553))) ($generated $generated@@554)))))
 :pattern ( ($generated@@266 ($generated@@84 $generated@@552 $generated@@553 $generated@@554)))
)))
(assert (forall (($generated@@556 T@U) ($generated@@557 T@U) ) (!  (=> (and (= (type $generated@@556) ($generated@@78 $generated@@79 $generated@@80)) (= (type $generated@@557) $generated@@2)) ($generated@@76 $generated@@557 $generated@@46 $generated@@556))
 :pattern ( ($generated@@76 $generated@@557 $generated@@46 $generated@@556))
)))
(assert (forall (($generated@@558 T@U) ($generated@@559 T@U) ) (!  (=> (and (= (type $generated@@558) ($generated@@78 $generated@@79 $generated@@80)) (= (type $generated@@559) $generated@@3)) ($generated@@76 $generated@@559 $generated@@47 $generated@@558))
 :pattern ( ($generated@@76 $generated@@559 $generated@@47 $generated@@558))
)))
(assert (forall (($generated@@560 T@U) ($generated@@561 T@U) ) (!  (=> (and (= (type $generated@@560) ($generated@@78 $generated@@79 $generated@@80)) (= (type $generated@@561) $generated@@4)) ($generated@@76 $generated@@561 $generated@@44 $generated@@560))
 :pattern ( ($generated@@76 $generated@@561 $generated@@44 $generated@@560))
)))
(assert (forall (($generated@@562 T@U) ($generated@@563 T@U) ) (!  (=> (and (= (type $generated@@562) ($generated@@78 $generated@@79 $generated@@80)) (= (type $generated@@563) $generated@@422)) ($generated@@76 $generated@@563 $generated@@45 $generated@@562))
 :pattern ( ($generated@@76 $generated@@563 $generated@@45 $generated@@562))
)))
(assert (forall (($generated@@564 T@U) ($generated@@565 T@U) ) (!  (=> (and (= (type $generated@@564) ($generated@@78 $generated@@79 $generated@@80)) (= (type $generated@@565) $generated@@135)) ($generated@@76 $generated@@565 $generated@@48 $generated@@564))
 :pattern ( ($generated@@76 $generated@@565 $generated@@48 $generated@@564))
)))
(assert (forall (($generated@@566 T@U) ($generated@@567 T@U) ) (!  (=> (and (= (type $generated@@566) ($generated@@255 $generated@@135)) (= (type $generated@@567) $generated@@66)) (= ($generated@@138 $generated@@566 ($generated@@465 $generated@@567)) (forall (($generated@@568 Int) ) (!  (=> (and (<= 0 $generated@@568) (< $generated@@568 ($generated@@254 $generated@@566))) ($generated@@217 ($generated@@466 $generated@@566 $generated@@568) $generated@@567))
 :pattern ( ($generated@@466 $generated@@566 $generated@@568))
))))
 :pattern ( ($generated@@138 $generated@@566 ($generated@@465 $generated@@567)))
)))
(assert (forall (($generated@@570 T@U) ($generated@@571 Int) ) (!  (=> (= (type $generated@@570) ($generated@@255 $generated@@135)) (=> (and (<= 0 $generated@@571) (< $generated@@571 ($generated@@254 $generated@@570))) (< ($generated@@504 ($generated@@316 $generated@@142 ($generated@@466 $generated@@570 $generated@@571))) ($generated@@569 $generated@@570))))
 :pattern ( ($generated@@504 ($generated@@316 $generated@@142 ($generated@@466 $generated@@570 $generated@@571))))
)))
(assert (forall (($generated@@572 T@U) ($generated@@573 T@U) ($generated@@574 T@U) ) (!  (=> (and (and (and (= (type $generated@@572) ($generated@@274 $generated@@135 $generated@@135)) (= (type $generated@@573) $generated@@66)) (= (type $generated@@574) $generated@@66)) ($generated@@138 $generated@@572 ($generated@@382 $generated@@573 $generated@@574))) (and (and ($generated@@138 ($generated@@272 $generated@@572) ($generated@@226 $generated@@573)) ($generated@@138 ($generated@@325 $generated@@572) ($generated@@226 $generated@@574))) ($generated@@138 ($generated@@356 $generated@@572) ($generated@@226 ($generated@@141 $generated@@573 $generated@@574)))))
 :pattern ( ($generated@@138 $generated@@572 ($generated@@382 $generated@@573 $generated@@574)))
)))
(assert (forall (($generated@@575 T@U) ($generated@@576 T@U) ($generated@@577 T@U) ) (!  (=> (and (and (and (= (type $generated@@575) ($generated@@292 $generated@@135 $generated@@135)) (= (type $generated@@576) $generated@@66)) (= (type $generated@@577) $generated@@66)) ($generated@@138 $generated@@575 ($generated@@390 $generated@@576 $generated@@577))) (and (and ($generated@@138 ($generated@@290 $generated@@575) ($generated@@231 $generated@@576)) ($generated@@138 ($generated@@336 $generated@@575) ($generated@@231 $generated@@577))) ($generated@@138 ($generated@@364 $generated@@575) ($generated@@231 ($generated@@141 $generated@@576 $generated@@577)))))
 :pattern ( ($generated@@138 $generated@@575 ($generated@@390 $generated@@576 $generated@@577)))
)))
(assert (forall (($generated@@578 T@U) ) (!  (=> (= (type $generated@@578) $generated@@2) ($generated@@138 $generated@@578 $generated@@46))
 :pattern ( ($generated@@138 $generated@@578 $generated@@46))
)))
(assert (forall (($generated@@579 T@U) ) (!  (=> (= (type $generated@@579) $generated@@3) ($generated@@138 $generated@@579 $generated@@47))
 :pattern ( ($generated@@138 $generated@@579 $generated@@47))
)))
(assert (forall (($generated@@580 T@U) ) (!  (=> (= (type $generated@@580) $generated@@4) ($generated@@138 $generated@@580 $generated@@44))
 :pattern ( ($generated@@138 $generated@@580 $generated@@44))
)))
(assert (forall (($generated@@581 T@U) ) (!  (=> (= (type $generated@@581) $generated@@422) ($generated@@138 $generated@@581 $generated@@45))
 :pattern ( ($generated@@138 $generated@@581 $generated@@45))
)))
(assert (forall (($generated@@582 T@U) ) (!  (=> (= (type $generated@@582) $generated@@135) ($generated@@138 $generated@@582 $generated@@48))
 :pattern ( ($generated@@138 $generated@@582 $generated@@48))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@583 () T@U)
(declare-fun $generated@@584 () T@U)
(declare-fun $generated@@585 () T@U)
(declare-fun $generated@@586 () T@U)
(declare-fun $generated@@587 () T@U)
(declare-fun $generated@@588 () T@U)
(declare-fun $generated@@589 (T@U) Bool)
(declare-fun $generated@@590 () T@U)
(declare-fun $generated@@591 () Int)
(assert  (and (and (and (and (and (and (= (type $generated@@583) $generated@@135) (= (type $generated@@585) $generated@@135)) (= (type $generated@@584) $generated@@135)) (= (type $generated@@586) ($generated@@162 $generated@@79 $generated@@4))) (= (type $generated@@587) $generated@@79)) (= (type $generated@@588) ($generated@@78 $generated@@79 $generated@@80))) (= (type $generated@@590) $generated@@135)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@592  (=> (and (and (and (and (and (not ($generated@@0 ($generated@@236 ($generated@@11 true)))) (not ($generated@@0 ($generated@@236 ($generated@@11 true))))) (= $generated@@583 ($generated@@308 16))) (not ($generated@@0 ($generated@@236 ($generated@@11 true))))) (not ($generated@@0 ($generated@@236 ($generated@@11 true))))) (= (ControlFlow 0 11) (- 0 10))) false)))
(let (($generated@@593  (=> ($generated@@0 ($generated@@236 ($generated@@11 true))) (=> (and (= $generated@@584 ($generated@@236 ($generated@@308 16))) (= (ControlFlow 0 9) (- 0 8))) ($generated@@138 ($generated@@236 ($generated@@308 16)) $generated@@134)))))
(let (($generated@@594  (=> ($generated@@0 ($generated@@236 ($generated@@11 true))) (=> (and (= $generated@@585 ($generated@@236 ($generated@@308 27))) (= (ControlFlow 0 7) (- 0 6))) ($generated@@138 ($generated@@236 ($generated@@308 27)) $generated@@134)))))
(let (($generated@@595  (=> (and (not (= $generated@@583 ($generated@@308 16))) (= (ControlFlow 0 5) (- 0 4))) ($generated@@138 $generated@@583 $generated@@134))))
(let (($generated@@596  (=> (and ($generated@@0 ($generated@@236 ($generated@@11 true))) (= (ControlFlow 0 3) (- 0 2))) ($generated@@138 $generated@@583 $generated@@134))))
(let (($generated@@597 true))
(let (($generated@@598  (=> (= $generated@@586 ($generated@@161 $generated@@587 $generated@@588 $generated@@60 false)) (and (and (and (and (and (=> (= (ControlFlow 0 12) 1) $generated@@597) (=> (= (ControlFlow 0 12) 3) $generated@@596)) (=> (= (ControlFlow 0 12) 5) $generated@@595)) (=> (= (ControlFlow 0 12) 7) $generated@@594)) (=> (= (ControlFlow 0 12) 9) $generated@@593)) (=> (= (ControlFlow 0 12) 11) $generated@@592)))))
(let (($generated@@599  (=> (and (and (and ($generated@@240 $generated@@588) ($generated@@589 $generated@@588)) ($generated@@138 $generated@@590 $generated@@134)) (and (= 1 $generated@@591) (= (ControlFlow 0 13) 12))) $generated@@598)))
$generated@@599)))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 9) (- 8))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 (Int) T@U)
(declare-fun $generated@@51 (T@U) Int)
(declare-fun $generated@@58 (T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U) T@U)
(declare-fun $generated@@66 (T@U T@U) T@U)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@69 (T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@74 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@171 (Int) Int)
(declare-fun $generated@@173 (T@U) T@U)
(declare-fun $generated@@177 (T@U) Bool)
(declare-fun $generated@@184 (T@U) T@U)
(declare-fun $generated@@185 (T@T T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (! (= (type ($generated@@49 $generated@@52 $generated@@53)) $generated@@45)
 :pattern ( ($generated@@49 $generated@@52 $generated@@53))
)) (forall (($generated@@54 Int) ) (! (= (type ($generated@@50 $generated@@54)) $generated@@45)
 :pattern ( ($generated@@50 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 Int) ($generated@@57 Int) ) (!  (=> (= (type $generated@@55) $generated@@45) (=> (and (and (<= 0 $generated@@56) (<= 0 $generated@@57)) (<= (+ $generated@@56 $generated@@57) ($generated@@51 $generated@@55))) (= ($generated@@49 ($generated@@49 $generated@@55 ($generated@@50 $generated@@56)) ($generated@@50 $generated@@57)) ($generated@@49 $generated@@55 ($generated@@50 (+ $generated@@56 $generated@@57))))))
 :pattern ( ($generated@@49 ($generated@@49 $generated@@55 ($generated@@50 $generated@@56)) ($generated@@50 $generated@@57)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@75 $generated@@76)) 7)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ) (! (= ($generated@@67 ($generated@@62 $generated@@77 $generated@@78)) $generated@@77)
 :pattern ( ($generated@@62 $generated@@77 $generated@@78))
))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ) (! (= ($generated@@68 ($generated@@62 $generated@@79 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@62 $generated@@79 $generated@@80))
))) (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@68 (type $generated@@81))))
(= (type ($generated@@66 $generated@@81 $generated@@82)) $generated@@83))
 :pattern ( ($generated@@66 $generated@@81 $generated@@82))
))) (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (let (($generated@@87 (type $generated@@86)))
(let (($generated@@88 (type $generated@@85)))
(= (type ($generated@@69 $generated@@84 $generated@@85 $generated@@86)) ($generated@@62 $generated@@88 $generated@@87))))
 :pattern ( ($generated@@69 $generated@@84 $generated@@85 $generated@@86))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (let (($generated@@92 ($generated@@68 (type $generated@@89))))
 (=> (= (type $generated@@91) $generated@@92) (= ($generated@@66 ($generated@@69 $generated@@89 $generated@@90 $generated@@91) $generated@@90) $generated@@91)))
 :weight 0
))) (and (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@95 $generated@@96) (= ($generated@@66 ($generated@@69 $generated@@94 $generated@@95 $generated@@93) $generated@@96) ($generated@@66 $generated@@94 $generated@@96)))
 :weight 0
)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or true (= ($generated@@66 ($generated@@69 $generated@@98 $generated@@99 $generated@@97) $generated@@100) ($generated@@66 $generated@@98 $generated@@100)))
 :weight 0
)))) (forall (($generated@@101 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@101)) 8))) (forall (($generated@@102 T@T) ) (! (= ($generated@@60 ($generated@@64 $generated@@102)) $generated@@102)
 :pattern ( ($generated@@64 $generated@@102))
))) (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (! (let (($generated@@105 ($generated@@60 (type $generated@@104))))
(= (type ($generated@@65 $generated@@103 $generated@@104)) $generated@@105))
 :pattern ( ($generated@@65 $generated@@103 $generated@@104))
))) (= ($generated@@1 $generated@@63) 9)) (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= (type ($generated@@70 $generated@@106 $generated@@107 $generated@@108)) $generated@@63)
 :pattern ( ($generated@@70 $generated@@106 $generated@@107 $generated@@108))
))) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (let (($generated@@112 ($generated@@60 (type $generated@@110))))
 (=> (= (type $generated@@111) $generated@@112) (= ($generated@@65 ($generated@@70 $generated@@109 $generated@@110 $generated@@111) $generated@@110) $generated@@111)))
 :weight 0
))) (and (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@115 $generated@@116) (= ($generated@@65 ($generated@@70 $generated@@114 $generated@@115 $generated@@113) $generated@@116) ($generated@@65 $generated@@114 $generated@@116)))
 :weight 0
)) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or true (= ($generated@@65 ($generated@@70 $generated@@118 $generated@@119 $generated@@117) $generated@@120) ($generated@@65 $generated@@118 $generated@@120)))
 :weight 0
)))) (= ($generated@@1 $generated@@61) 10)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (= ($generated@@1 ($generated@@71 $generated@@121 $generated@@122)) 11))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (! (= ($generated@@72 ($generated@@71 $generated@@123 $generated@@124)) $generated@@123)
 :pattern ( ($generated@@71 $generated@@123 $generated@@124))
))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@73 ($generated@@71 $generated@@125 $generated@@126)) $generated@@126)
 :pattern ( ($generated@@71 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (let (($generated@@130 ($generated@@73 (type $generated@@127))))
(= (type ($generated@@58 $generated@@127 $generated@@128 $generated@@129)) $generated@@130))
 :pattern ( ($generated@@58 $generated@@127 $generated@@128 $generated@@129))
))) (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (let (($generated@@135 (type $generated@@134)))
(let (($generated@@136 (type $generated@@132)))
(= (type ($generated@@74 $generated@@131 $generated@@132 $generated@@133 $generated@@134)) ($generated@@71 $generated@@136 $generated@@135))))
 :pattern ( ($generated@@74 $generated@@131 $generated@@132 $generated@@133 $generated@@134))
))) (forall (($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (let (($generated@@141 ($generated@@73 (type $generated@@137))))
 (=> (= (type $generated@@140) $generated@@141) (= ($generated@@58 ($generated@@74 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@138 $generated@@139) $generated@@140)))
 :weight 0
))) (and (and (forall (($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (!  (or (= $generated@@144 $generated@@146) (= ($generated@@58 ($generated@@74 $generated@@143 $generated@@144 $generated@@145 $generated@@142) $generated@@146 $generated@@147) ($generated@@58 $generated@@143 $generated@@146 $generated@@147)))
 :weight 0
)) (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ) (!  (or (= $generated@@151 $generated@@153) (= ($generated@@58 ($generated@@74 $generated@@149 $generated@@150 $generated@@151 $generated@@148) $generated@@152 $generated@@153) ($generated@@58 $generated@@149 $generated@@152 $generated@@153)))
 :weight 0
))) (forall (($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ) (!  (or true (= ($generated@@58 ($generated@@74 $generated@@155 $generated@@156 $generated@@157 $generated@@154) $generated@@158 $generated@@159) ($generated@@58 $generated@@155 $generated@@158 $generated@@159)))
 :weight 0
)))) (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 Bool) ) (! (= (type ($generated@@59 $generated@@160 $generated@@161 $generated@@162 $generated@@163)) ($generated@@71 $generated@@61 $generated@@4))
 :pattern ( ($generated@@59 $generated@@160 $generated@@161 $generated@@162 $generated@@163))
))))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ($generated@@166 T@U) ($generated@@167 Bool) ($generated@@168 T@U) ($generated@@169 T@U) ) (! (let (($generated@@170 ($generated@@60 (type $generated@@169))))
 (=> (and (and (and (and (= (type $generated@@164) $generated@@61) (= (type $generated@@165) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@166) ($generated@@64 $generated@@4))) (= (type $generated@@168) $generated@@61)) (= (type $generated@@169) ($generated@@64 $generated@@170))) (= ($generated@@0 ($generated@@58 ($generated@@59 $generated@@164 $generated@@165 $generated@@166 $generated@@167) $generated@@168 $generated@@169))  (=> (and (not (= $generated@@168 $generated@@164)) ($generated@@0 ($generated@@65 ($generated@@66 $generated@@165 $generated@@168) $generated@@166))) $generated@@167))))
 :pattern ( ($generated@@58 ($generated@@59 $generated@@164 $generated@@165 $generated@@166 $generated@@167) $generated@@168 $generated@@169))
)))
(assert (forall (($generated@@172 Int) ) (! (= ($generated@@171 $generated@@172) $generated@@172)
 :pattern ( ($generated@@171 $generated@@172))
)))
(assert (forall (($generated@@174 T@U) ) (! (let (($generated@@175 (type $generated@@174)))
(= (type ($generated@@173 $generated@@174)) $generated@@175))
 :pattern ( ($generated@@173 $generated@@174))
)))
(assert (forall (($generated@@176 T@U) ) (! (= ($generated@@173 $generated@@176) $generated@@176)
 :pattern ( ($generated@@173 $generated@@176))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ) (!  (=> (and (and (= (type $generated@@178) $generated@@45) (= (type $generated@@179) $generated@@45)) (and ($generated@@177 $generated@@179) (<= ($generated@@51 $generated@@179) ($generated@@51 $generated@@178)))) (and (= ($generated@@177 ($generated@@49 $generated@@178 $generated@@179)) ($generated@@177 $generated@@178)) (= ($generated@@51 ($generated@@49 $generated@@178 $generated@@179)) (- ($generated@@51 $generated@@178) ($generated@@51 $generated@@179)))))
 :pattern ( ($generated@@49 $generated@@178 $generated@@179))
)))
(assert (forall (($generated@@180 Int) ) (!  (=> (<= 0 $generated@@180) (and ($generated@@177 ($generated@@50 $generated@@180)) (= ($generated@@51 ($generated@@50 $generated@@180)) $generated@@180)))
 :pattern ( ($generated@@50 $generated@@180))
)))
(assert (forall (($generated@@181 T@U) ($generated@@182 T@U) ) (!  (=> (and (= (type $generated@@181) $generated@@45) (= (type $generated@@182) $generated@@45)) (or (or ($generated@@44 $generated@@181 $generated@@182) (= $generated@@181 $generated@@182)) ($generated@@44 $generated@@182 $generated@@181)))
 :pattern ( ($generated@@44 $generated@@181 $generated@@182) ($generated@@44 $generated@@182 $generated@@181))
)))
(assert (forall (($generated@@183 T@U) ) (!  (=> (= (type $generated@@183) $generated@@45) (<= 0 ($generated@@51 $generated@@183)))
 :pattern ( ($generated@@51 $generated@@183))
)))
(assert  (and (forall (($generated@@186 T@U) ) (! (= (type ($generated@@184 $generated@@186)) $generated@@45)
 :pattern ( ($generated@@184 $generated@@186))
)) (forall (($generated@@187 T@T) ($generated@@188 T@U) ) (! (= (type ($generated@@185 $generated@@187 $generated@@188)) $generated@@187)
 :pattern ( ($generated@@185 $generated@@187 $generated@@188))
))))
(assert (forall (($generated@@189 T@U) ) (! (let (($generated@@190 (type $generated@@189)))
(= ($generated@@185 $generated@@190 ($generated@@184 $generated@@189)) $generated@@189))
 :pattern ( ($generated@@184 $generated@@189))
)))
(assert (forall (($generated@@191 T@U) ($generated@@192 T@U) ) (!  (=> (and (= (type $generated@@191) $generated@@45) (= (type $generated@@192) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@191 $generated@@192) (not (= $generated@@191 $generated@@192))) (=> (and ($generated@@177 $generated@@191) (not ($generated@@177 $generated@@192))) ($generated@@44 $generated@@191 $generated@@192))) (=> (and ($generated@@177 $generated@@191) ($generated@@177 $generated@@192)) (= ($generated@@44 $generated@@191 $generated@@192) (< ($generated@@51 $generated@@191) ($generated@@51 $generated@@192))))) (=> (and ($generated@@44 $generated@@191 $generated@@192) ($generated@@177 $generated@@192)) ($generated@@177 $generated@@191))))
 :pattern ( ($generated@@44 $generated@@191 $generated@@192))
)))
(assert (forall (($generated@@193 T@U) ) (!  (=> (and (= (type $generated@@193) $generated@@45) ($generated@@177 $generated@@193)) (= $generated@@193 ($generated@@50 ($generated@@51 $generated@@193))))
 :pattern ( ($generated@@51 $generated@@193))
 :pattern ( ($generated@@177 $generated@@193))
)))
(assert (forall (($generated@@194 T@U) ($generated@@195 T@U) ) (!  (=> (and (and (= (type $generated@@194) $generated@@45) (= (type $generated@@195) $generated@@45)) (and ($generated@@177 $generated@@195) (<= ($generated@@51 $generated@@195) ($generated@@51 $generated@@194)))) (or (and (= $generated@@195 ($generated@@50 0)) (= ($generated@@49 $generated@@194 $generated@@195) $generated@@194)) (and (not (= $generated@@195 ($generated@@50 0))) ($generated@@44 ($generated@@49 $generated@@194 $generated@@195) $generated@@194))))
 :pattern ( ($generated@@49 $generated@@194 $generated@@195))
)))
(assert (forall (($generated@@196 Int) ) (! (= ($generated@@184 ($generated@@8 ($generated@@171 $generated@@196))) ($generated@@173 ($generated@@184 ($generated@@8 $generated@@196))))
 :pattern ( ($generated@@184 ($generated@@8 ($generated@@171 $generated@@196))))
)))
(assert (forall (($generated@@197 T@U) ) (! (= ($generated@@184 ($generated@@173 $generated@@197)) ($generated@@173 ($generated@@184 $generated@@197)))
 :pattern ( ($generated@@184 ($generated@@173 $generated@@197)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@198 () T@U)
(declare-fun $generated@@199 () T@U)
(declare-fun $generated@@200 () Int)
(declare-fun $generated@@201 () T@U)
(declare-fun $generated@@202 () Int)
(declare-fun $generated@@203 () Int)
(declare-fun $generated@@204 () T@U)
(declare-fun $generated@@205 () T@U)
(declare-fun $generated@@206 () T@U)
(declare-fun $generated@@207 () T@U)
(declare-fun $generated@@208 () T@U)
(declare-fun $generated@@209 (T@U) Bool)
(declare-fun $generated@@210 (T@U) Bool)
(declare-fun $generated@@211 () Int)
(assert  (and (and (and (and (and (and (and (= (type $generated@@199) $generated@@45) (= (type $generated@@201) $generated@@45)) (= (type $generated@@198) $generated@@45)) (= (type $generated@@204) ($generated@@71 $generated@@61 $generated@@4))) (= (type $generated@@205) $generated@@61)) (= (type $generated@@206) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@207) ($generated@@64 $generated@@4))) (= (type $generated@@208) $generated@@45)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 43) (let (($generated@@212 true))
(let (($generated@@213  (=> ($generated@@44 $generated@@198 $generated@@199) (and (=> (= (ControlFlow 0 7) (- 0 8)) (or (or (<= 0 $generated@@200) ($generated@@44 $generated@@198 $generated@@199)) (= $generated@@200 $generated@@200))) (=> (or (or (<= 0 $generated@@200) ($generated@@44 $generated@@198 $generated@@199)) (= $generated@@200 $generated@@200)) (=> (= (ControlFlow 0 7) (- 0 6)) (or ($generated@@44 $generated@@198 $generated@@199) (and (= $generated@@198 $generated@@199) (< $generated@@200 $generated@@200)))))))))
(let (($generated@@214  (=> (= ($generated@@51 $generated@@199) 0) (and (=> (= (ControlFlow 0 10) 7) $generated@@213) (=> (= (ControlFlow 0 10) 9) $generated@@212)))))
(let (($generated@@215  (=> (not (= ($generated@@51 $generated@@199) 0)) (and (=> (= (ControlFlow 0 2) (- 0 5)) ($generated@@177 ($generated@@173 ($generated@@50 1)))) (=> ($generated@@177 ($generated@@173 ($generated@@50 1))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 $generated@@199))) (=> (<= ($generated@@51 ($generated@@173 ($generated@@50 1))) ($generated@@51 $generated@@199)) (=> (= $generated@@201 ($generated@@49 $generated@@199 ($generated@@50 1))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (or (<= 0 $generated@@200) ($generated@@44 $generated@@201 $generated@@199)) (= $generated@@200 $generated@@200))) (=> (or (or (<= 0 $generated@@200) ($generated@@44 $generated@@201 $generated@@199)) (= $generated@@200 $generated@@200)) (=> (= (ControlFlow 0 2) (- 0 1)) (or ($generated@@44 $generated@@201 $generated@@199) (and (= $generated@@201 $generated@@199) (< $generated@@200 $generated@@200))))))))))))))
(let (($generated@@216  (and (=> (= (ControlFlow 0 11) (- 0 12)) (=> ($generated@@177 $generated@@199) (= $generated@@199 ($generated@@50 ($generated@@51 $generated@@199))))) (=> (=> ($generated@@177 $generated@@199) (= $generated@@199 ($generated@@50 ($generated@@51 $generated@@199)))) (and (=> (= (ControlFlow 0 11) 2) $generated@@215) (=> (= (ControlFlow 0 11) 10) $generated@@214))))))
(let (($generated@@217  (=> (and (not ($generated@@177 $generated@@199)) (= (ControlFlow 0 15) 11)) $generated@@216)))
(let (($generated@@218  (=> (and ($generated@@177 $generated@@199) (= $generated@@202 ($generated@@51 $generated@@199))) (and (=> (= (ControlFlow 0 13) (- 0 14)) (<= 0 $generated@@202)) (=> (<= 0 $generated@@202) (=> (= (ControlFlow 0 13) 11) $generated@@216))))))
(let (($generated@@219  (and (=> (= (ControlFlow 0 16) (- 0 19)) (=> ($generated@@177 $generated@@199) (= ($generated@@51 $generated@@199) ($generated@@51 $generated@@199)))) (=> (=> ($generated@@177 $generated@@199) (= ($generated@@51 $generated@@199) ($generated@@51 $generated@@199))) (and (=> (= (ControlFlow 0 16) (- 0 18)) (= (= ($generated@@51 $generated@@199) ($generated@@171 0)) (= ($generated@@51 $generated@@199) 0))) (=> (= (= ($generated@@51 $generated@@199) ($generated@@171 0)) (= ($generated@@51 $generated@@199) 0)) (and (=> (= (ControlFlow 0 16) (- 0 17)) (= (> ($generated@@51 $generated@@199) 0) (< 0 ($generated@@51 $generated@@199)))) (=> (= (> ($generated@@51 $generated@@199) 0) (< 0 ($generated@@51 $generated@@199))) (and (=> (= (ControlFlow 0 16) 13) $generated@@218) (=> (= (ControlFlow 0 16) 15) $generated@@217))))))))))
(let (($generated@@220  (=> (and (not ($generated@@177 $generated@@199)) (= (ControlFlow 0 22) 16)) $generated@@219)))
(let (($generated@@221  (=> ($generated@@177 $generated@@199) (and (=> (= (ControlFlow 0 20) (- 0 21)) ($generated@@177 $generated@@199)) (=> ($generated@@177 $generated@@199) (=> (= (ControlFlow 0 20) 16) $generated@@219))))))
(let (($generated@@222  (and (=> (= (ControlFlow 0 23) (- 0 24)) (=> ($generated@@177 $generated@@199) (exists (($generated@@223 Int) ) (!  (and (<= ($generated@@171 0) $generated@@223) (= $generated@@199 ($generated@@50 $generated@@223)))
 :pattern ( ($generated@@50 $generated@@223))
)))) (=> (=> ($generated@@177 $generated@@199) (exists (($generated@@224 Int) ) (!  (and (<= ($generated@@171 0) $generated@@224) (= $generated@@199 ($generated@@50 $generated@@224)))
 :pattern ( ($generated@@50 $generated@@224))
))) (and (=> (= (ControlFlow 0 23) 20) $generated@@221) (=> (= (ControlFlow 0 23) 22) $generated@@220))))))
(let (($generated@@225  (=> (and (< $generated@@203 ($generated@@171 0)) (= (ControlFlow 0 28) 23)) $generated@@222)))
(let (($generated@@226  (=> (<= ($generated@@171 0) $generated@@203) (and (=> (= (ControlFlow 0 26) (- 0 27)) (<= 0 $generated@@203)) (=> (<= 0 $generated@@203) (=> (= (ControlFlow 0 26) 23) $generated@@222))))))
(let (($generated@@227  (=> ($generated@@177 $generated@@199) (and (=> (= (ControlFlow 0 29) 26) $generated@@226) (=> (= (ControlFlow 0 29) 28) $generated@@225)))))
(let (($generated@@228  (=> (and (not ($generated@@177 $generated@@199)) (= (ControlFlow 0 25) 23)) $generated@@222)))
(let (($generated@@229  (and (=> (= (ControlFlow 0 30) (- 0 32)) (=> (= $generated@@199 ($generated@@50 $generated@@200)) ($generated@@177 $generated@@199))) (and (=> (= (ControlFlow 0 30) (- 0 31)) (=> (= $generated@@199 ($generated@@50 $generated@@200)) (= ($generated@@51 $generated@@199) $generated@@200))) (=> (=> (= $generated@@199 ($generated@@50 $generated@@200)) (and ($generated@@177 $generated@@199) (= ($generated@@51 $generated@@199) $generated@@200))) (and (=> (= (ControlFlow 0 30) 29) $generated@@227) (=> (= (ControlFlow 0 30) 25) $generated@@228)))))))
(let (($generated@@230  (=> (and (not ($generated@@177 $generated@@199)) (= (ControlFlow 0 35) 30)) $generated@@229)))
(let (($generated@@231  (=> (and ($generated@@177 $generated@@199) (= (ControlFlow 0 34) 30)) $generated@@229)))
(let (($generated@@232  (=> (= $generated@@199 ($generated@@50 $generated@@200)) (and (=> (= (ControlFlow 0 36) 34) $generated@@231) (=> (= (ControlFlow 0 36) 35) $generated@@230)))))
(let (($generated@@233  (=> (and (not (= $generated@@199 ($generated@@50 $generated@@200))) (= (ControlFlow 0 33) 30)) $generated@@229)))
(let (($generated@@234  (=> (and (= $generated@@204 ($generated@@59 $generated@@205 $generated@@206 $generated@@207 false)) (= $generated@@208 ($generated@@173 ($generated@@50 25)))) (and (=> (= (ControlFlow 0 37) (- 0 42)) ($generated@@177 $generated@@208)) (=> ($generated@@177 $generated@@208) (and (=> (= (ControlFlow 0 37) (- 0 41)) (= ($generated@@51 $generated@@208) ($generated@@171 25))) (=> (= ($generated@@51 $generated@@208) ($generated@@171 25)) (and (=> (= (ControlFlow 0 37) (- 0 40)) (not (= ($generated@@51 $generated@@208) 0))) (=> (not (= ($generated@@51 $generated@@208) 0)) (and (=> (= (ControlFlow 0 37) (- 0 39)) (< 0 ($generated@@51 $generated@@208))) (=> (< 0 ($generated@@51 $generated@@208)) (and (=> (= (ControlFlow 0 37) (- 0 38)) (<= 0 $generated@@200)) (=> (<= 0 $generated@@200) (and (=> (= (ControlFlow 0 37) 36) $generated@@232) (=> (= (ControlFlow 0 37) 33) $generated@@233)))))))))))))))
(let (($generated@@235  (=> (and (and (and ($generated@@209 $generated@@206) ($generated@@210 $generated@@206)) (<= ($generated@@171 0) $generated@@200)) (and (= 1 $generated@@211) (= (ControlFlow 0 43) 37))) $generated@@234)))
$generated@@235)))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
