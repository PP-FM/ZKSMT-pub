(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@55 () T@U)
(declare-fun $generated@@56 () T@U)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@58 () T@U)
(declare-fun $generated@@59 () T@U)
(declare-fun $generated@@60 () T@U)
(declare-fun $generated@@61 () T@U)
(declare-fun $generated@@62 () T@U)
(declare-fun $generated@@63 () T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@74 (T@U T@U T@U) Bool)
(declare-fun $generated@@75 (Int) T@U)
(declare-fun $generated@@76 (T@T T@T) T@T)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@T) T@T)
(declare-fun $generated@@80 (T@T) T@T)
(declare-fun $generated@@81 (T@U T@U) T@U)
(declare-fun $generated@@82 (T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@U T@U) T@U)
(declare-fun $generated@@84 (T@U T@U T@U) T@U)
(declare-fun $generated@@132 (T@U T@U) Bool)
(declare-fun $generated@@134 (T@U) Bool)
(declare-fun $generated@@135 (T@U T@U) T@U)
(declare-fun $generated@@136 () T@T)
(declare-fun $generated@@142 (T@U T@U) Bool)
(declare-fun $generated@@143 (T@U) T@U)
(declare-fun $generated@@144 (T@U) T@U)
(declare-fun $generated@@145 () T@T)
(declare-fun $generated@@150 (T@U) T@U)
(declare-fun $generated@@151 (T@U) Bool)
(declare-fun $generated@@155 (T@U T@U T@U) T@U)
(declare-fun $generated@@156 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@157 (T@T T@T) T@T)
(declare-fun $generated@@158 (T@T) T@T)
(declare-fun $generated@@159 (T@T) T@T)
(declare-fun $generated@@160 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@211 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@223 (T@U T@U) T@U)
(declare-fun $generated@@224 (T@U T@U) Bool)
(declare-fun $generated@@231 () Int)
(declare-fun $generated@@232 (T@U Int) Bool)
(declare-fun $generated@@233 (T@U) T@U)
(declare-fun $generated@@234 (Int) Int)
(declare-fun $generated@@235 (T@T T@T) T@T)
(declare-fun $generated@@236 (T@U Int) Bool)
(declare-fun $generated@@237 (T@U T@U) T@U)
(declare-fun $generated@@238 (T@U) T@U)
(declare-fun $generated@@239 (T@U) T@U)
(declare-fun $generated@@240 (T@T T@U) T@U)
(declare-fun $generated@@241 (T@U) T@U)
(declare-fun $generated@@242 (Int) Real)
(declare-fun $generated@@243 (T@T) T@T)
(declare-fun $generated@@244 (T@T) T@T)
(declare-fun $generated@@267 (T@U) T@U)
(declare-fun $generated@@272 (T@U) T@U)
(declare-fun $generated@@279 (T@U) Bool)
(declare-fun $generated@@280 (T@U T@U T@U) Bool)
(declare-fun $generated@@286 (T@U) T@U)
(declare-fun $generated@@292 (T@T) T@U)
(declare-fun $generated@@293 (T@U) Int)
(declare-fun $generated@@294 (T@T) T@T)
(declare-fun $generated@@295 (T@T) T@T)
(declare-fun $generated@@303 (T@U) Int)
(declare-fun $generated@@304 (T@T) T@U)
(declare-fun $generated@@309 (T@T T@T) T@U)
(declare-fun $generated@@315 (T@U) T@U)
(declare-fun $generated@@316 (T@T T@T) T@U)
(declare-fun $generated@@317 (T@T T@T) T@T)
(declare-fun $generated@@318 (T@T) T@T)
(declare-fun $generated@@319 (T@T) T@T)
(declare-fun $generated@@342 (T@U) T@U)
(declare-fun $generated@@353 (T@U) T@U)
(declare-fun $generated@@373 (T@U) T@U)
(declare-fun $generated@@377 (T@U) T@U)
(declare-fun $generated@@378 (T@U) T@U)
(declare-fun $generated@@400 (T@U T@U) T@U)
(declare-fun $generated@@409 (T@T) T@U)
(declare-fun $generated@@433 () T@T)
(declare-fun $generated@@441 (T@U) T@U)
(declare-fun $generated@@445 (T@U) T@U)
(declare-fun $generated@@451 (T@U) T@U)
(declare-fun $generated@@455 (T@U) T@U)
(declare-fun $generated@@463 (T@U) T@U)
(declare-fun $generated@@467 (T@U) T@U)
(declare-fun $generated@@475 (T@U) T@U)
(declare-fun $generated@@476 (T@U Int) T@U)
(declare-fun $generated@@485 (T@U) Int)
(declare-fun $generated@@487 (T@U) T@U)
(declare-fun $generated@@491 (T@U) T@U)
(declare-fun $generated@@495 (T@U) T@U)
(declare-fun $generated@@499 (T@U) T@U)
(declare-fun $generated@@513 (T@U) Int)
(declare-fun $generated@@514 (T@U) Int)
(declare-fun $generated@@530 (T@U) T@U)
(declare-fun $generated@@581 (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@64) 6) (= (type $generated@@44) $generated@@64)) (= (type $generated@@45) $generated@@64)) (= (type $generated@@46) $generated@@64)) (= (type $generated@@47) $generated@@64)) (= (type $generated@@48) $generated@@64)) (= ($generated@@1 $generated@@65) 7)) (= (type $generated@@49) $generated@@65)) (= (type $generated@@50) $generated@@65)) (= (type $generated@@51) $generated@@65)) (= (type $generated@@52) $generated@@65)) (= (type $generated@@53) $generated@@65)) (= (type $generated@@54) $generated@@65)) (= (type $generated@@55) $generated@@65)) (= (type $generated@@56) $generated@@65)) (= (type $generated@@57) $generated@@65)) (= (type $generated@@58) $generated@@65)) (= (type $generated@@59) $generated@@65)) (forall (($generated@@70 T@T) ) (= ($generated@@1 ($generated@@66 $generated@@70)) 8))) (forall (($generated@@71 T@T) ) (! (= ($generated@@67 ($generated@@66 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@66 $generated@@71))
))) (= (type $generated@@60) ($generated@@66 $generated@@4))) (= ($generated@@1 $generated@@68) 9)) (= (type $generated@@61) $generated@@68)) (= (type $generated@@62) $generated@@65)) (= ($generated@@1 $generated@@69) 10)) (= (type $generated@@63) $generated@@69)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46 $generated@@47 $generated@@48 $generated@@49 $generated@@50 $generated@@51 $generated@@52 $generated@@53 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60 $generated@@61 $generated@@62 $generated@@63)
)
(assert (forall (($generated@@73 T@U) ) (! (= (type ($generated@@72 $generated@@73)) $generated@@65)
 :pattern ( ($generated@@72 $generated@@73))
)))
(assert (= ($generated@@72 $generated@@44) $generated@@49))
(assert (= ($generated@@72 $generated@@45) $generated@@50))
(assert (= ($generated@@72 $generated@@46) $generated@@51))
(assert (= ($generated@@72 $generated@@47) $generated@@52))
(assert (= ($generated@@72 $generated@@48) $generated@@53))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ) (= ($generated@@1 ($generated@@76 $generated@@85 $generated@@86)) 11)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ) (! (= ($generated@@79 ($generated@@76 $generated@@87 $generated@@88)) $generated@@87)
 :pattern ( ($generated@@76 $generated@@87 $generated@@88))
))) (forall (($generated@@89 T@T) ($generated@@90 T@T) ) (! (= ($generated@@80 ($generated@@76 $generated@@89 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@76 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@U) ($generated@@92 T@U) ) (! (let (($generated@@93 ($generated@@80 (type $generated@@91))))
(= (type ($generated@@81 $generated@@91 $generated@@92)) $generated@@93))
 :pattern ( ($generated@@81 $generated@@91 $generated@@92))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (let (($generated@@97 (type $generated@@96)))
(let (($generated@@98 (type $generated@@95)))
(= (type ($generated@@82 $generated@@94 $generated@@95 $generated@@96)) ($generated@@76 $generated@@98 $generated@@97))))
 :pattern ( ($generated@@82 $generated@@94 $generated@@95 $generated@@96))
))) (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (let (($generated@@102 ($generated@@80 (type $generated@@99))))
 (=> (= (type $generated@@101) $generated@@102) (= ($generated@@81 ($generated@@82 $generated@@99 $generated@@100 $generated@@101) $generated@@100) $generated@@101)))
 :weight 0
))) (and (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@105 $generated@@106) (= ($generated@@81 ($generated@@82 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@81 $generated@@104 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or true (= ($generated@@81 ($generated@@82 $generated@@108 $generated@@109 $generated@@107) $generated@@110) ($generated@@81 $generated@@108 $generated@@110)))
 :weight 0
)))) (= ($generated@@1 $generated@@77) 12)) (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (! (let (($generated@@113 ($generated@@67 (type $generated@@112))))
(= (type ($generated@@83 $generated@@111 $generated@@112)) $generated@@113))
 :pattern ( ($generated@@83 $generated@@111 $generated@@112))
))) (= ($generated@@1 $generated@@78) 13)) (forall (($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= (type ($generated@@84 $generated@@114 $generated@@115 $generated@@116)) $generated@@78)
 :pattern ( ($generated@@84 $generated@@114 $generated@@115 $generated@@116))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (let (($generated@@120 ($generated@@67 (type $generated@@118))))
 (=> (= (type $generated@@119) $generated@@120) (= ($generated@@83 ($generated@@84 $generated@@117 $generated@@118 $generated@@119) $generated@@118) $generated@@119)))
 :weight 0
))) (and (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@123 $generated@@124) (= ($generated@@83 ($generated@@84 $generated@@122 $generated@@123 $generated@@121) $generated@@124) ($generated@@83 $generated@@122 $generated@@124)))
 :weight 0
)) (forall (($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or true (= ($generated@@83 ($generated@@84 $generated@@126 $generated@@127 $generated@@125) $generated@@128) ($generated@@83 $generated@@126 $generated@@128)))
 :weight 0
)))) (forall (($generated@@129 Int) ) (! (= (type ($generated@@75 $generated@@129)) $generated@@64)
 :pattern ( ($generated@@75 $generated@@129))
))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> (and (= (type $generated@@130) $generated@@2) (= (type $generated@@131) ($generated@@76 $generated@@77 $generated@@78))) ($generated@@74 $generated@@130 ($generated@@75 0) $generated@@131))
 :pattern ( ($generated@@74 $generated@@130 ($generated@@75 0) $generated@@131))
)))
(assert (forall (($generated@@133 T@U) ) (!  (=> (= (type $generated@@133) $generated@@2) ($generated@@132 $generated@@133 ($generated@@75 0)))
 :pattern ( ($generated@@132 $generated@@133 ($generated@@75 0)))
)))
(assert  (and (= ($generated@@1 $generated@@136) 14) (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (! (= (type ($generated@@135 $generated@@137 $generated@@138)) $generated@@64)
 :pattern ( ($generated@@135 $generated@@137 $generated@@138))
))))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> (and (and (and (= (type $generated@@139) $generated@@64) (= (type $generated@@140) $generated@@64)) (= (type $generated@@141) $generated@@136)) ($generated@@132 $generated@@141 ($generated@@135 $generated@@139 $generated@@140))) ($generated@@134 $generated@@141))
 :pattern ( ($generated@@134 $generated@@141) ($generated@@132 $generated@@141 ($generated@@135 $generated@@139 $generated@@140)))
)))
(assert  (and (and (= ($generated@@1 $generated@@145) 15) (forall (($generated@@146 T@U) ) (! (= (type ($generated@@143 $generated@@146)) $generated@@145)
 :pattern ( ($generated@@143 $generated@@146))
))) (forall (($generated@@147 T@U) ) (! (= (type ($generated@@144 $generated@@147)) $generated@@145)
 :pattern ( ($generated@@144 $generated@@147))
))))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (!  (=> (and (and (= (type $generated@@148) $generated@@136) (= (type $generated@@149) $generated@@136)) true) (= ($generated@@142 $generated@@148 $generated@@149)  (and (= ($generated@@143 $generated@@148) ($generated@@143 $generated@@149)) (= ($generated@@144 $generated@@148) ($generated@@144 $generated@@149)))))
 :pattern ( ($generated@@142 $generated@@148 $generated@@149))
)))
(assert (forall (($generated@@152 T@U) ) (! (= (type ($generated@@150 $generated@@152)) $generated@@64)
 :pattern ( ($generated@@150 $generated@@152))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (=> (and (and (= (type $generated@@153) ($generated@@76 $generated@@145 $generated@@2)) (= (type $generated@@154) $generated@@64)) ($generated@@132 $generated@@153 ($generated@@150 $generated@@154))) ($generated@@151 $generated@@153))
 :pattern ( ($generated@@132 $generated@@153 ($generated@@150 $generated@@154)))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@161 T@T) ($generated@@162 T@T) ) (= ($generated@@1 ($generated@@157 $generated@@161 $generated@@162)) 16)) (forall (($generated@@163 T@T) ($generated@@164 T@T) ) (! (= ($generated@@158 ($generated@@157 $generated@@163 $generated@@164)) $generated@@163)
 :pattern ( ($generated@@157 $generated@@163 $generated@@164))
))) (forall (($generated@@165 T@T) ($generated@@166 T@T) ) (! (= ($generated@@159 ($generated@@157 $generated@@165 $generated@@166)) $generated@@166)
 :pattern ( ($generated@@157 $generated@@165 $generated@@166))
))) (forall (($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 T@U) ) (! (let (($generated@@170 ($generated@@159 (type $generated@@167))))
(= (type ($generated@@155 $generated@@167 $generated@@168 $generated@@169)) $generated@@170))
 :pattern ( ($generated@@155 $generated@@167 $generated@@168 $generated@@169))
))) (forall (($generated@@171 T@U) ($generated@@172 T@U) ($generated@@173 T@U) ($generated@@174 T@U) ) (! (let (($generated@@175 (type $generated@@174)))
(let (($generated@@176 (type $generated@@172)))
(= (type ($generated@@160 $generated@@171 $generated@@172 $generated@@173 $generated@@174)) ($generated@@157 $generated@@176 $generated@@175))))
 :pattern ( ($generated@@160 $generated@@171 $generated@@172 $generated@@173 $generated@@174))
))) (forall (($generated@@177 T@U) ($generated@@178 T@U) ($generated@@179 T@U) ($generated@@180 T@U) ) (! (let (($generated@@181 ($generated@@159 (type $generated@@177))))
 (=> (= (type $generated@@180) $generated@@181) (= ($generated@@155 ($generated@@160 $generated@@177 $generated@@178 $generated@@179 $generated@@180) $generated@@178 $generated@@179) $generated@@180)))
 :weight 0
))) (and (and (forall (($generated@@182 T@U) ($generated@@183 T@U) ($generated@@184 T@U) ($generated@@185 T@U) ($generated@@186 T@U) ($generated@@187 T@U) ) (!  (or (= $generated@@184 $generated@@186) (= ($generated@@155 ($generated@@160 $generated@@183 $generated@@184 $generated@@185 $generated@@182) $generated@@186 $generated@@187) ($generated@@155 $generated@@183 $generated@@186 $generated@@187)))
 :weight 0
)) (forall (($generated@@188 T@U) ($generated@@189 T@U) ($generated@@190 T@U) ($generated@@191 T@U) ($generated@@192 T@U) ($generated@@193 T@U) ) (!  (or (= $generated@@191 $generated@@193) (= ($generated@@155 ($generated@@160 $generated@@189 $generated@@190 $generated@@191 $generated@@188) $generated@@192 $generated@@193) ($generated@@155 $generated@@189 $generated@@192 $generated@@193)))
 :weight 0
))) (forall (($generated@@194 T@U) ($generated@@195 T@U) ($generated@@196 T@U) ($generated@@197 T@U) ($generated@@198 T@U) ($generated@@199 T@U) ) (!  (or true (= ($generated@@155 ($generated@@160 $generated@@195 $generated@@196 $generated@@197 $generated@@194) $generated@@198 $generated@@199) ($generated@@155 $generated@@195 $generated@@198 $generated@@199)))
 :weight 0
)))) (forall (($generated@@200 T@U) ($generated@@201 T@U) ($generated@@202 T@U) ($generated@@203 Bool) ) (! (= (type ($generated@@156 $generated@@200 $generated@@201 $generated@@202 $generated@@203)) ($generated@@157 $generated@@77 $generated@@4))
 :pattern ( ($generated@@156 $generated@@200 $generated@@201 $generated@@202 $generated@@203))
))))
(assert (forall (($generated@@204 T@U) ($generated@@205 T@U) ($generated@@206 T@U) ($generated@@207 Bool) ($generated@@208 T@U) ($generated@@209 T@U) ) (! (let (($generated@@210 ($generated@@67 (type $generated@@209))))
 (=> (and (and (and (and (= (type $generated@@204) $generated@@77) (= (type $generated@@205) ($generated@@76 $generated@@77 $generated@@78))) (= (type $generated@@206) ($generated@@66 $generated@@4))) (= (type $generated@@208) $generated@@77)) (= (type $generated@@209) ($generated@@66 $generated@@210))) (= ($generated@@0 ($generated@@155 ($generated@@156 $generated@@204 $generated@@205 $generated@@206 $generated@@207) $generated@@208 $generated@@209))  (=> (and (not (= $generated@@208 $generated@@204)) ($generated@@0 ($generated@@83 ($generated@@81 $generated@@205 $generated@@208) $generated@@206))) $generated@@207))))
 :pattern ( ($generated@@155 ($generated@@156 $generated@@204 $generated@@205 $generated@@206 $generated@@207) $generated@@208 $generated@@209))
)))
(assert (forall (($generated@@212 T@U) ($generated@@213 T@U) ($generated@@214 T@U) ($generated@@215 Bool) ) (! (= (type ($generated@@211 $generated@@212 $generated@@213 $generated@@214 $generated@@215)) ($generated@@157 $generated@@77 $generated@@4))
 :pattern ( ($generated@@211 $generated@@212 $generated@@213 $generated@@214 $generated@@215))
)))
(assert (forall (($generated@@216 T@U) ($generated@@217 T@U) ($generated@@218 T@U) ($generated@@219 Bool) ($generated@@220 T@U) ($generated@@221 T@U) ) (! (let (($generated@@222 ($generated@@67 (type $generated@@221))))
 (=> (and (and (and (and (= (type $generated@@216) $generated@@77) (= (type $generated@@217) ($generated@@76 $generated@@77 $generated@@78))) (= (type $generated@@218) ($generated@@66 $generated@@4))) (= (type $generated@@220) $generated@@77)) (= (type $generated@@221) ($generated@@66 $generated@@222))) (= ($generated@@0 ($generated@@155 ($generated@@211 $generated@@216 $generated@@217 $generated@@218 $generated@@219) $generated@@220 $generated@@221))  (=> (and (not (= $generated@@220 $generated@@216)) ($generated@@0 ($generated@@83 ($generated@@81 $generated@@217 $generated@@220) $generated@@218))) $generated@@219))))
 :pattern ( ($generated@@155 ($generated@@211 $generated@@216 $generated@@217 $generated@@218 $generated@@219) $generated@@220 $generated@@221))
)))
(assert (forall (($generated@@225 T@U) ($generated@@226 T@U) ) (! (= (type ($generated@@223 $generated@@225 $generated@@226)) $generated@@136)
 :pattern ( ($generated@@223 $generated@@225 $generated@@226))
)))
(assert (forall (($generated@@227 T@U) ($generated@@228 T@U) ($generated@@229 T@U) ($generated@@230 T@U) ) (!  (=> (and (and (and (= (type $generated@@227) $generated@@64) (= (type $generated@@228) $generated@@64)) (= (type $generated@@229) $generated@@145)) (= (type $generated@@230) $generated@@145)) (= ($generated@@132 ($generated@@223 $generated@@229 $generated@@230) ($generated@@135 $generated@@227 $generated@@228))  (and ($generated@@224 $generated@@229 $generated@@227) ($generated@@224 $generated@@230 $generated@@228))))
 :pattern ( ($generated@@132 ($generated@@223 $generated@@229 $generated@@230) ($generated@@135 $generated@@227 $generated@@228)))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@245 T@T) ($generated@@246 T@T) ) (= ($generated@@1 ($generated@@235 $generated@@245 $generated@@246)) 17)) (forall (($generated@@247 T@T) ($generated@@248 T@T) ) (! (= ($generated@@243 ($generated@@235 $generated@@247 $generated@@248)) $generated@@247)
 :pattern ( ($generated@@235 $generated@@247 $generated@@248))
))) (forall (($generated@@249 T@T) ($generated@@250 T@T) ) (! (= ($generated@@244 ($generated@@235 $generated@@249 $generated@@250)) $generated@@250)
 :pattern ( ($generated@@235 $generated@@249 $generated@@250))
))) (forall (($generated@@251 T@U) ) (! (let (($generated@@252 (type $generated@@251)))
(= (type ($generated@@233 $generated@@251)) $generated@@252))
 :pattern ( ($generated@@233 $generated@@251))
))) (forall (($generated@@253 T@U) ($generated@@254 T@U) ) (! (= (type ($generated@@237 $generated@@253 $generated@@254)) $generated@@64)
 :pattern ( ($generated@@237 $generated@@253 $generated@@254))
))) (forall (($generated@@255 T@U) ) (! (let (($generated@@256 ($generated@@243 (type $generated@@255))))
(= (type ($generated@@238 $generated@@255)) ($generated@@76 $generated@@256 $generated@@4)))
 :pattern ( ($generated@@238 $generated@@255))
))) (forall (($generated@@257 T@U) ) (! (= (type ($generated@@239 $generated@@257)) $generated@@145)
 :pattern ( ($generated@@239 $generated@@257))
))) (forall (($generated@@258 T@T) ($generated@@259 T@U) ) (! (= (type ($generated@@240 $generated@@258 $generated@@259)) $generated@@258)
 :pattern ( ($generated@@240 $generated@@258 $generated@@259))
))) (forall (($generated@@260 T@U) ) (! (let (($generated@@261 ($generated@@244 (type $generated@@260))))
(let (($generated@@262 ($generated@@243 (type $generated@@260))))
(= (type ($generated@@241 $generated@@260)) ($generated@@76 $generated@@262 $generated@@261))))
 :pattern ( ($generated@@241 $generated@@260))
))))
(assert  (=> (<= 1 $generated@@231) (forall (($generated@@263 T@U) ($generated@@264 Int) ) (!  (=> (and (= (type $generated@@263) ($generated@@235 $generated@@145 $generated@@145)) (or ($generated@@236 ($generated@@233 $generated@@263) ($generated@@234 $generated@@264)) (and (not (= 1 $generated@@231)) ($generated@@132 $generated@@263 ($generated@@237 $generated@@46 ($generated@@237 $generated@@47 $generated@@44)))))) (= ($generated@@232 ($generated@@233 $generated@@263) ($generated@@234 $generated@@264))  (and (and ($generated@@0 ($generated@@81 ($generated@@238 $generated@@263) ($generated@@239 ($generated@@8 $generated@@264)))) ($generated@@0 ($generated@@81 ($generated@@238 ($generated@@240 ($generated@@235 $generated@@145 $generated@@145) ($generated@@81 ($generated@@241 ($generated@@233 $generated@@263)) ($generated@@239 ($generated@@8 ($generated@@234 $generated@@264)))))) ($generated@@239 ($generated@@9 ($generated@@242 ($generated@@234 $generated@@264))))))) ($generated@@0 ($generated@@240 $generated@@4 ($generated@@81 ($generated@@241 ($generated@@240 ($generated@@235 $generated@@145 $generated@@145) ($generated@@81 ($generated@@241 ($generated@@233 $generated@@263)) ($generated@@239 ($generated@@8 ($generated@@234 $generated@@264)))))) ($generated@@239 ($generated@@9 ($generated@@242 ($generated@@234 $generated@@264))))))))))
 :weight 3
 :pattern ( ($generated@@232 ($generated@@233 $generated@@263) ($generated@@234 $generated@@264)))
))))
(assert (forall (($generated@@265 T@U) ($generated@@266 T@U) ) (!  (=> (and (= (type $generated@@265) $generated@@136) (= (type $generated@@266) $generated@@136)) (= ($generated@@142 $generated@@265 $generated@@266) (= $generated@@265 $generated@@266)))
 :pattern ( ($generated@@142 $generated@@265 $generated@@266))
)))
(assert (forall (($generated@@268 T@U) ) (! (= (type ($generated@@267 $generated@@268)) $generated@@64)
 :pattern ( ($generated@@267 $generated@@268))
)))
(assert (forall (($generated@@269 T@U) ($generated@@270 T@U) ) (!  (=> (and (= (type $generated@@269) ($generated@@76 $generated@@145 $generated@@4)) (= (type $generated@@270) $generated@@64)) (= ($generated@@132 $generated@@269 ($generated@@267 $generated@@270)) (forall (($generated@@271 T@U) ) (!  (=> (and (= (type $generated@@271) $generated@@145) ($generated@@0 ($generated@@81 $generated@@269 $generated@@271))) ($generated@@224 $generated@@271 $generated@@270))
 :pattern ( ($generated@@81 $generated@@269 $generated@@271))
))))
 :pattern ( ($generated@@132 $generated@@269 ($generated@@267 $generated@@270)))
)))
(assert (forall (($generated@@273 T@U) ) (! (= (type ($generated@@272 $generated@@273)) $generated@@64)
 :pattern ( ($generated@@272 $generated@@273))
)))
(assert (forall (($generated@@274 T@U) ($generated@@275 T@U) ) (!  (=> (and (= (type $generated@@274) ($generated@@76 $generated@@145 $generated@@4)) (= (type $generated@@275) $generated@@64)) (= ($generated@@132 $generated@@274 ($generated@@272 $generated@@275)) (forall (($generated@@276 T@U) ) (!  (=> (and (= (type $generated@@276) $generated@@145) ($generated@@0 ($generated@@81 $generated@@274 $generated@@276))) ($generated@@224 $generated@@276 $generated@@275))
 :pattern ( ($generated@@81 $generated@@274 $generated@@276))
))))
 :pattern ( ($generated@@132 $generated@@274 ($generated@@272 $generated@@275)))
)))
(assert (forall (($generated@@277 Int) ) (! (= ($generated@@234 $generated@@277) $generated@@277)
 :pattern ( ($generated@@234 $generated@@277))
)))
(assert (forall (($generated@@278 T@U) ) (! (= ($generated@@233 $generated@@278) $generated@@278)
 :pattern ( ($generated@@233 $generated@@278))
)))
(assert (forall (($generated@@281 T@U) ($generated@@282 T@U) ($generated@@283 T@U) ($generated@@284 T@U) ($generated@@285 T@U) ) (!  (=> (and (and (and (and (and (= (type $generated@@281) $generated@@64) (= (type $generated@@282) $generated@@64)) (= (type $generated@@283) $generated@@145)) (= (type $generated@@284) $generated@@145)) (= (type $generated@@285) ($generated@@76 $generated@@77 $generated@@78))) ($generated@@279 $generated@@285)) (= ($generated@@74 ($generated@@223 $generated@@283 $generated@@284) ($generated@@135 $generated@@281 $generated@@282) $generated@@285)  (and ($generated@@280 $generated@@283 $generated@@281 $generated@@285) ($generated@@280 $generated@@284 $generated@@282 $generated@@285))))
 :pattern ( ($generated@@74 ($generated@@223 $generated@@283 $generated@@284) ($generated@@135 $generated@@281 $generated@@282) $generated@@285))
)))
(assert (forall (($generated@@287 T@U) ) (! (= (type ($generated@@286 $generated@@287)) $generated@@68)
 :pattern ( ($generated@@286 $generated@@287))
)))
(assert (forall (($generated@@288 T@U) ) (!  (=> (= (type $generated@@288) $generated@@136) (= ($generated@@134 $generated@@288) (= ($generated@@286 $generated@@288) $generated@@61)))
 :pattern ( ($generated@@134 $generated@@288))
)))
(assert (forall (($generated@@289 T@U) ) (!  (=> (and (= (type $generated@@289) $generated@@136) ($generated@@134 $generated@@289)) (exists (($generated@@290 T@U) ($generated@@291 T@U) ) (!  (and (and (= (type $generated@@290) $generated@@145) (= (type $generated@@291) $generated@@145)) (= $generated@@289 ($generated@@223 $generated@@290 $generated@@291)))
 :no-pattern (type $generated@@290)
 :no-pattern (type $generated@@291)
 :no-pattern ($generated $generated@@290)
 :no-pattern ($generated@@0 $generated@@290)
 :no-pattern ($generated $generated@@291)
 :no-pattern ($generated@@0 $generated@@291)
)))
 :pattern ( ($generated@@134 $generated@@289))
)))
(assert  (and (and (forall (($generated@@296 T@T) ) (= ($generated@@1 ($generated@@294 $generated@@296)) 18)) (forall (($generated@@297 T@T) ) (! (= ($generated@@295 ($generated@@294 $generated@@297)) $generated@@297)
 :pattern ( ($generated@@294 $generated@@297))
))) (forall (($generated@@298 T@T) ) (! (= (type ($generated@@292 $generated@@298)) ($generated@@294 $generated@@298))
 :pattern ( ($generated@@292 $generated@@298))
))))
(assert (forall (($generated@@299 T@T) ) (! (= ($generated@@293 ($generated@@292 $generated@@299)) 0)
 :pattern ( ($generated@@292 $generated@@299))
)))
(assert (forall (($generated@@300 T@U) ($generated@@301 T@U) ($generated@@302 T@U) ) (!  (=> (and (= (type $generated@@301) $generated@@64) (= (type $generated@@302) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@280 ($generated@@239 $generated@@300) $generated@@301 $generated@@302) ($generated@@74 $generated@@300 $generated@@301 $generated@@302)))
 :pattern ( ($generated@@280 ($generated@@239 $generated@@300) $generated@@301 $generated@@302))
)))
(assert (forall (($generated@@305 T@T) ) (! (= (type ($generated@@304 $generated@@305)) ($generated@@76 $generated@@305 $generated@@2))
 :pattern ( ($generated@@304 $generated@@305))
)))
(assert (forall (($generated@@306 T@U) ) (! (let (($generated@@307 ($generated@@79 (type $generated@@306))))
 (=> (= (type $generated@@306) ($generated@@76 $generated@@307 $generated@@2)) (and (= (= ($generated@@303 $generated@@306) 0) (= $generated@@306 ($generated@@304 $generated@@307))) (=> (not (= ($generated@@303 $generated@@306) 0)) (exists (($generated@@308 T@U) ) (!  (and (= (type $generated@@308) $generated@@307) (< 0 ($generated ($generated@@81 $generated@@306 $generated@@308))))
 :no-pattern (type $generated@@308)
 :no-pattern ($generated $generated@@308)
 :no-pattern ($generated@@0 $generated@@308)
))))))
 :pattern ( ($generated@@303 $generated@@306))
)))
(assert (forall (($generated@@310 T@T) ($generated@@311 T@T) ) (! (= (type ($generated@@309 $generated@@310 $generated@@311)) ($generated@@235 $generated@@310 $generated@@311))
 :pattern ( ($generated@@309 $generated@@310 $generated@@311))
)))
(assert (forall (($generated@@312 T@U) ($generated@@313 T@T) ) (! (let (($generated@@314 (type $generated@@312)))
 (not ($generated@@0 ($generated@@81 ($generated@@238 ($generated@@309 $generated@@314 $generated@@313)) $generated@@312))))
 :pattern ( (let (($generated@@314 (type $generated@@312)))
($generated@@81 ($generated@@238 ($generated@@309 $generated@@314 $generated@@313)) $generated@@312)))
)))
(assert  (and (and (and (and (forall (($generated@@320 T@T) ($generated@@321 T@T) ) (= ($generated@@1 ($generated@@317 $generated@@320 $generated@@321)) 19)) (forall (($generated@@322 T@T) ($generated@@323 T@T) ) (! (= ($generated@@318 ($generated@@317 $generated@@322 $generated@@323)) $generated@@322)
 :pattern ( ($generated@@317 $generated@@322 $generated@@323))
))) (forall (($generated@@324 T@T) ($generated@@325 T@T) ) (! (= ($generated@@319 ($generated@@317 $generated@@324 $generated@@325)) $generated@@325)
 :pattern ( ($generated@@317 $generated@@324 $generated@@325))
))) (forall (($generated@@326 T@U) ) (! (let (($generated@@327 ($generated@@318 (type $generated@@326))))
(= (type ($generated@@315 $generated@@326)) ($generated@@76 $generated@@327 $generated@@4)))
 :pattern ( ($generated@@315 $generated@@326))
))) (forall (($generated@@328 T@T) ($generated@@329 T@T) ) (! (= (type ($generated@@316 $generated@@328 $generated@@329)) ($generated@@317 $generated@@328 $generated@@329))
 :pattern ( ($generated@@316 $generated@@328 $generated@@329))
))))
(assert (forall (($generated@@330 T@U) ($generated@@331 T@T) ) (! (let (($generated@@332 (type $generated@@330)))
 (not ($generated@@0 ($generated@@81 ($generated@@315 ($generated@@316 $generated@@332 $generated@@331)) $generated@@330))))
 :pattern ( (let (($generated@@332 (type $generated@@330)))
($generated@@81 ($generated@@315 ($generated@@316 $generated@@332 $generated@@331)) $generated@@330)))
)))
(assert (forall (($generated@@333 T@U) ) (! (let (($generated@@334 ($generated@@79 (type $generated@@333))))
 (=> (= (type $generated@@333) ($generated@@76 $generated@@334 $generated@@2)) (= ($generated@@151 $generated@@333) (forall (($generated@@335 T@U) ) (!  (=> (= (type $generated@@335) $generated@@334) (and (<= 0 ($generated ($generated@@81 $generated@@333 $generated@@335))) (<= ($generated ($generated@@81 $generated@@333 $generated@@335)) ($generated@@303 $generated@@333))))
 :pattern ( ($generated@@81 $generated@@333 $generated@@335))
)))))
 :pattern ( ($generated@@151 $generated@@333))
)))
(assert  (=> (<= 1 $generated@@231) (forall (($generated@@336 T@U) ($generated@@337 Int) ) (!  (=> (and (= (type $generated@@336) ($generated@@235 $generated@@145 $generated@@145)) (or ($generated@@236 $generated@@336 $generated@@337) (and (not (= 1 $generated@@231)) ($generated@@132 $generated@@336 ($generated@@237 $generated@@46 ($generated@@237 $generated@@47 $generated@@44)))))) true)
 :pattern ( ($generated@@232 $generated@@336 $generated@@337))
))))
(assert (forall (($generated@@338 T@U) ) (! (let (($generated@@339 ($generated@@244 (type $generated@@338))))
(let (($generated@@340 ($generated@@243 (type $generated@@338))))
 (=> (= (type $generated@@338) ($generated@@235 $generated@@340 $generated@@339)) (or (= $generated@@338 ($generated@@309 $generated@@340 $generated@@339)) (exists (($generated@@341 T@U) ) (!  (and (= (type $generated@@341) $generated@@340) ($generated@@0 ($generated@@81 ($generated@@238 $generated@@338) $generated@@341)))
 :no-pattern (type $generated@@341)
 :no-pattern ($generated $generated@@341)
 :no-pattern ($generated@@0 $generated@@341)
))))))
 :pattern ( ($generated@@238 $generated@@338))
)))
(assert (forall (($generated@@343 T@U) ) (! (let (($generated@@344 ($generated@@244 (type $generated@@343))))
(= (type ($generated@@342 $generated@@343)) ($generated@@76 $generated@@344 $generated@@4)))
 :pattern ( ($generated@@342 $generated@@343))
)))
(assert (forall (($generated@@345 T@U) ) (! (let (($generated@@346 ($generated@@244 (type $generated@@345))))
(let (($generated@@347 ($generated@@243 (type $generated@@345))))
 (=> (= (type $generated@@345) ($generated@@235 $generated@@347 $generated@@346)) (or (= $generated@@345 ($generated@@309 $generated@@347 $generated@@346)) (exists (($generated@@348 T@U) ) (!  (and (= (type $generated@@348) $generated@@346) ($generated@@0 ($generated@@81 ($generated@@342 $generated@@345) $generated@@348)))
 :no-pattern (type $generated@@348)
 :no-pattern ($generated $generated@@348)
 :no-pattern ($generated@@0 $generated@@348)
))))))
 :pattern ( ($generated@@342 $generated@@345))
)))
(assert (forall (($generated@@349 T@U) ) (! (let (($generated@@350 ($generated@@319 (type $generated@@349))))
(let (($generated@@351 ($generated@@318 (type $generated@@349))))
 (=> (= (type $generated@@349) ($generated@@317 $generated@@351 $generated@@350)) (or (= $generated@@349 ($generated@@316 $generated@@351 $generated@@350)) (exists (($generated@@352 T@U) ) (!  (and (= (type $generated@@352) $generated@@351) ($generated@@0 ($generated@@81 ($generated@@315 $generated@@349) $generated@@352)))
 :no-pattern (type $generated@@352)
 :no-pattern ($generated $generated@@352)
 :no-pattern ($generated@@0 $generated@@352)
))))))
 :pattern ( ($generated@@315 $generated@@349))
)))
(assert (forall (($generated@@354 T@U) ) (! (let (($generated@@355 ($generated@@319 (type $generated@@354))))
(= (type ($generated@@353 $generated@@354)) ($generated@@76 $generated@@355 $generated@@4)))
 :pattern ( ($generated@@353 $generated@@354))
)))
(assert (forall (($generated@@356 T@U) ) (! (let (($generated@@357 ($generated@@319 (type $generated@@356))))
(let (($generated@@358 ($generated@@318 (type $generated@@356))))
 (=> (= (type $generated@@356) ($generated@@317 $generated@@358 $generated@@357)) (or (= $generated@@356 ($generated@@316 $generated@@358 $generated@@357)) (exists (($generated@@359 T@U) ) (!  (and (= (type $generated@@359) $generated@@357) ($generated@@0 ($generated@@81 ($generated@@353 $generated@@356) $generated@@359)))
 :no-pattern (type $generated@@359)
 :no-pattern ($generated $generated@@359)
 :no-pattern ($generated@@0 $generated@@359)
))))))
 :pattern ( ($generated@@353 $generated@@356))
)))
(assert (forall (($generated@@360 T@U) ($generated@@361 T@U) ) (!  (=> (and (= (type $generated@@360) ($generated@@76 $generated@@145 $generated@@2)) (= (type $generated@@361) $generated@@64)) (= ($generated@@132 $generated@@360 ($generated@@150 $generated@@361)) (forall (($generated@@362 T@U) ) (!  (=> (and (= (type $generated@@362) $generated@@145) (< 0 ($generated ($generated@@81 $generated@@360 $generated@@362)))) ($generated@@224 $generated@@362 $generated@@361))
 :pattern ( ($generated@@81 $generated@@360 $generated@@362))
))))
 :pattern ( ($generated@@132 $generated@@360 ($generated@@150 $generated@@361)))
)))
(assert (forall (($generated@@363 T@U) ($generated@@364 T@U) ($generated@@365 T@U) ) (!  (=> (and (and (= (type $generated@@363) ($generated@@76 $generated@@145 $generated@@4)) (= (type $generated@@364) $generated@@64)) (= (type $generated@@365) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@74 $generated@@363 ($generated@@267 $generated@@364) $generated@@365) (forall (($generated@@366 T@U) ) (!  (=> (and (= (type $generated@@366) $generated@@145) ($generated@@0 ($generated@@81 $generated@@363 $generated@@366))) ($generated@@280 $generated@@366 $generated@@364 $generated@@365))
 :pattern ( ($generated@@81 $generated@@363 $generated@@366))
))))
 :pattern ( ($generated@@74 $generated@@363 ($generated@@267 $generated@@364) $generated@@365))
)))
(assert (forall (($generated@@367 T@U) ($generated@@368 T@U) ($generated@@369 T@U) ) (!  (=> (and (and (= (type $generated@@367) ($generated@@76 $generated@@145 $generated@@4)) (= (type $generated@@368) $generated@@64)) (= (type $generated@@369) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@74 $generated@@367 ($generated@@272 $generated@@368) $generated@@369) (forall (($generated@@370 T@U) ) (!  (=> (and (= (type $generated@@370) $generated@@145) ($generated@@0 ($generated@@81 $generated@@367 $generated@@370))) ($generated@@280 $generated@@370 $generated@@368 $generated@@369))
 :pattern ( ($generated@@81 $generated@@367 $generated@@370))
))))
 :pattern ( ($generated@@74 $generated@@367 ($generated@@272 $generated@@368) $generated@@369))
)))
(assert (forall (($generated@@371 T@U) ) (! (let (($generated@@372 (type $generated@@371)))
(= ($generated ($generated@@81 ($generated@@304 $generated@@372) $generated@@371)) 0))
 :pattern ( (let (($generated@@372 (type $generated@@371)))
($generated@@81 ($generated@@304 $generated@@372) $generated@@371)))
)))
(assert (forall (($generated@@374 T@U) ) (! (= (type ($generated@@373 $generated@@374)) ($generated@@76 $generated@@145 $generated@@4))
 :pattern ( ($generated@@373 $generated@@374))
)))
(assert (forall (($generated@@375 T@U) ($generated@@376 T@U) ) (!  (=> (and (= (type $generated@@375) ($generated@@235 $generated@@145 $generated@@145)) (= (type $generated@@376) $generated@@145)) (= ($generated@@0 ($generated@@81 ($generated@@373 $generated@@375) $generated@@376))  (and ($generated@@0 ($generated@@81 ($generated@@238 $generated@@375) ($generated@@143 ($generated@@240 $generated@@136 $generated@@376)))) (= ($generated@@81 ($generated@@241 $generated@@375) ($generated@@143 ($generated@@240 $generated@@136 $generated@@376))) ($generated@@144 ($generated@@240 $generated@@136 $generated@@376))))))
 :pattern ( ($generated@@81 ($generated@@373 $generated@@375) $generated@@376))
)))
(assert  (and (forall (($generated@@379 T@U) ) (! (= (type ($generated@@377 $generated@@379)) ($generated@@76 $generated@@145 $generated@@4))
 :pattern ( ($generated@@377 $generated@@379))
)) (forall (($generated@@380 T@U) ) (! (let (($generated@@381 ($generated@@319 (type $generated@@380))))
(let (($generated@@382 ($generated@@318 (type $generated@@380))))
(= (type ($generated@@378 $generated@@380)) ($generated@@76 $generated@@382 $generated@@381))))
 :pattern ( ($generated@@378 $generated@@380))
))))
(assert (forall (($generated@@383 T@U) ($generated@@384 T@U) ) (!  (=> (and (= (type $generated@@383) ($generated@@317 $generated@@145 $generated@@145)) (= (type $generated@@384) $generated@@145)) (= ($generated@@0 ($generated@@81 ($generated@@377 $generated@@383) $generated@@384))  (and ($generated@@0 ($generated@@81 ($generated@@315 $generated@@383) ($generated@@143 ($generated@@240 $generated@@136 $generated@@384)))) (= ($generated@@81 ($generated@@378 $generated@@383) ($generated@@143 ($generated@@240 $generated@@136 $generated@@384))) ($generated@@144 ($generated@@240 $generated@@136 $generated@@384))))))
 :pattern ( ($generated@@81 ($generated@@377 $generated@@383) $generated@@384))
)))
(assert (forall (($generated@@385 T@U) ($generated@@386 T@U) ) (! (let (($generated@@387 (type $generated@@386)))
(let (($generated@@388 ($generated@@243 (type $generated@@385))))
 (=> (= (type $generated@@385) ($generated@@235 $generated@@388 $generated@@387)) (= ($generated@@0 ($generated@@81 ($generated@@342 $generated@@385) $generated@@386)) (exists (($generated@@389 T@U) ) (!  (and (= (type $generated@@389) $generated@@388) (and ($generated@@0 ($generated@@81 ($generated@@238 $generated@@385) $generated@@389)) (= $generated@@386 ($generated@@81 ($generated@@241 $generated@@385) $generated@@389))))
 :pattern ( ($generated@@81 ($generated@@238 $generated@@385) $generated@@389))
 :pattern ( ($generated@@81 ($generated@@241 $generated@@385) $generated@@389))
))))))
 :pattern ( ($generated@@81 ($generated@@342 $generated@@385) $generated@@386))
)))
(assert (forall (($generated@@390 T@U) ($generated@@391 T@U) ) (! (let (($generated@@392 (type $generated@@391)))
(let (($generated@@393 ($generated@@318 (type $generated@@390))))
 (=> (= (type $generated@@390) ($generated@@317 $generated@@393 $generated@@392)) (= ($generated@@0 ($generated@@81 ($generated@@353 $generated@@390) $generated@@391)) (exists (($generated@@394 T@U) ) (!  (and (= (type $generated@@394) $generated@@393) (and ($generated@@0 ($generated@@81 ($generated@@315 $generated@@390) $generated@@394)) (= $generated@@391 ($generated@@81 ($generated@@378 $generated@@390) $generated@@394))))
 :pattern ( ($generated@@81 ($generated@@315 $generated@@390) $generated@@394))
 :pattern ( ($generated@@81 ($generated@@378 $generated@@390) $generated@@394))
))))))
 :pattern ( ($generated@@81 ($generated@@353 $generated@@390) $generated@@391))
)))
(assert (forall (($generated@@395 T@U) ($generated@@396 T@U) ($generated@@397 T@U) ($generated@@398 T@U) ) (!  (=> (and (and (and (= (type $generated@@395) ($generated@@235 $generated@@145 $generated@@145)) (= (type $generated@@396) $generated@@64)) (= (type $generated@@397) $generated@@64)) (= (type $generated@@398) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@74 $generated@@395 ($generated@@237 $generated@@396 $generated@@397) $generated@@398) (forall (($generated@@399 T@U) ) (!  (=> (and (= (type $generated@@399) $generated@@145) ($generated@@0 ($generated@@81 ($generated@@238 $generated@@395) $generated@@399))) (and ($generated@@280 ($generated@@81 ($generated@@241 $generated@@395) $generated@@399) $generated@@397 $generated@@398) ($generated@@280 $generated@@399 $generated@@396 $generated@@398)))
 :pattern ( ($generated@@81 ($generated@@241 $generated@@395) $generated@@399))
 :pattern ( ($generated@@81 ($generated@@238 $generated@@395) $generated@@399))
))))
 :pattern ( ($generated@@74 $generated@@395 ($generated@@237 $generated@@396 $generated@@397) $generated@@398))
)))
(assert (forall (($generated@@401 T@U) ($generated@@402 T@U) ) (! (= (type ($generated@@400 $generated@@401 $generated@@402)) $generated@@64)
 :pattern ( ($generated@@400 $generated@@401 $generated@@402))
)))
(assert (forall (($generated@@403 T@U) ($generated@@404 T@U) ($generated@@405 T@U) ($generated@@406 T@U) ) (!  (=> (and (and (and (= (type $generated@@403) ($generated@@317 $generated@@145 $generated@@145)) (= (type $generated@@404) $generated@@64)) (= (type $generated@@405) $generated@@64)) (= (type $generated@@406) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@74 $generated@@403 ($generated@@400 $generated@@404 $generated@@405) $generated@@406) (forall (($generated@@407 T@U) ) (!  (=> (and (= (type $generated@@407) $generated@@145) ($generated@@0 ($generated@@81 ($generated@@315 $generated@@403) $generated@@407))) (and ($generated@@280 ($generated@@81 ($generated@@378 $generated@@403) $generated@@407) $generated@@405 $generated@@406) ($generated@@280 $generated@@407 $generated@@404 $generated@@406)))
 :pattern ( ($generated@@81 ($generated@@378 $generated@@403) $generated@@407))
 :pattern ( ($generated@@81 ($generated@@315 $generated@@403) $generated@@407))
))))
 :pattern ( ($generated@@74 $generated@@403 ($generated@@400 $generated@@404 $generated@@405) $generated@@406))
)))
(assert (forall (($generated@@408 Int) ) (! (= ($generated@@242 $generated@@408) (to_real $generated@@408))
 :pattern ( ($generated@@242 $generated@@408))
)))
(assert (forall (($generated@@410 T@T) ) (! (= (type ($generated@@409 $generated@@410)) ($generated@@76 $generated@@410 $generated@@4))
 :pattern ( ($generated@@409 $generated@@410))
)))
(assert (forall (($generated@@411 T@U) ) (! (let (($generated@@412 ($generated@@319 (type $generated@@411))))
(let (($generated@@413 ($generated@@318 (type $generated@@411))))
 (=> (= (type $generated@@411) ($generated@@317 $generated@@413 $generated@@412)) (= (= $generated@@411 ($generated@@316 $generated@@413 $generated@@412)) (= ($generated@@315 $generated@@411) ($generated@@409 $generated@@413))))))
 :pattern ( ($generated@@315 $generated@@411))
)))
(assert (forall (($generated@@414 T@U) ) (! (let (($generated@@415 ($generated@@319 (type $generated@@414))))
(let (($generated@@416 ($generated@@318 (type $generated@@414))))
 (=> (= (type $generated@@414) ($generated@@317 $generated@@416 $generated@@415)) (= (= $generated@@414 ($generated@@316 $generated@@416 $generated@@415)) (= ($generated@@353 $generated@@414) ($generated@@409 $generated@@415))))))
 :pattern ( ($generated@@353 $generated@@414))
)))
(assert (forall (($generated@@417 T@U) ) (! (let (($generated@@418 ($generated@@319 (type $generated@@417))))
(let (($generated@@419 ($generated@@318 (type $generated@@417))))
 (=> (= (type $generated@@417) ($generated@@317 $generated@@419 $generated@@418)) (= (= $generated@@417 ($generated@@316 $generated@@419 $generated@@418)) (= ($generated@@377 $generated@@417) ($generated@@409 $generated@@145))))))
 :pattern ( ($generated@@377 $generated@@417))
)))
(assert (forall (($generated@@420 T@U) ) (! (let (($generated@@421 ($generated@@244 (type $generated@@420))))
(let (($generated@@422 ($generated@@243 (type $generated@@420))))
 (=> (= (type $generated@@420) ($generated@@235 $generated@@422 $generated@@421)) (or (= $generated@@420 ($generated@@309 $generated@@422 $generated@@421)) (exists (($generated@@423 T@U) ($generated@@424 T@U) ) (!  (and (and (= (type $generated@@423) $generated@@145) (= (type $generated@@424) $generated@@145)) ($generated@@0 ($generated@@81 ($generated@@373 $generated@@420) ($generated@@239 ($generated@@223 $generated@@423 $generated@@424)))))
 :no-pattern (type $generated@@423)
 :no-pattern (type $generated@@424)
 :no-pattern ($generated $generated@@423)
 :no-pattern ($generated@@0 $generated@@423)
 :no-pattern ($generated $generated@@424)
 :no-pattern ($generated@@0 $generated@@424)
))))))
 :pattern ( ($generated@@373 $generated@@420))
)))
(assert (forall (($generated@@425 T@U) ) (! (let (($generated@@426 ($generated@@319 (type $generated@@425))))
(let (($generated@@427 ($generated@@318 (type $generated@@425))))
 (=> (= (type $generated@@425) ($generated@@317 $generated@@427 $generated@@426)) (or (= $generated@@425 ($generated@@316 $generated@@427 $generated@@426)) (exists (($generated@@428 T@U) ($generated@@429 T@U) ) (!  (and (and (= (type $generated@@428) $generated@@145) (= (type $generated@@429) $generated@@145)) ($generated@@0 ($generated@@81 ($generated@@377 $generated@@425) ($generated@@239 ($generated@@223 $generated@@428 $generated@@429)))))
 :no-pattern (type $generated@@428)
 :no-pattern (type $generated@@429)
 :no-pattern ($generated $generated@@428)
 :no-pattern ($generated@@0 $generated@@428)
 :no-pattern ($generated $generated@@429)
 :no-pattern ($generated@@0 $generated@@429)
))))))
 :pattern ( ($generated@@377 $generated@@425))
)))
(assert (forall (($generated@@430 T@U) ) (!  (=> (and (= (type $generated@@430) $generated@@145) ($generated@@224 $generated@@430 $generated@@46)) (and (= ($generated@@239 ($generated@@240 $generated@@2 $generated@@430)) $generated@@430) ($generated@@132 ($generated@@240 $generated@@2 $generated@@430) $generated@@46)))
 :pattern ( ($generated@@224 $generated@@430 $generated@@46))
)))
(assert (forall (($generated@@431 T@U) ) (!  (=> (and (= (type $generated@@431) $generated@@145) ($generated@@224 $generated@@431 $generated@@47)) (and (= ($generated@@239 ($generated@@240 $generated@@3 $generated@@431)) $generated@@431) ($generated@@132 ($generated@@240 $generated@@3 $generated@@431) $generated@@47)))
 :pattern ( ($generated@@224 $generated@@431 $generated@@47))
)))
(assert (forall (($generated@@432 T@U) ) (!  (=> (and (= (type $generated@@432) $generated@@145) ($generated@@224 $generated@@432 $generated@@44)) (and (= ($generated@@239 ($generated@@240 $generated@@4 $generated@@432)) $generated@@432) ($generated@@132 ($generated@@240 $generated@@4 $generated@@432) $generated@@44)))
 :pattern ( ($generated@@224 $generated@@432 $generated@@44))
)))
(assert (= ($generated@@1 $generated@@433) 20))
(assert (forall (($generated@@434 T@U) ) (!  (=> (and (= (type $generated@@434) $generated@@145) ($generated@@224 $generated@@434 $generated@@45)) (and (= ($generated@@239 ($generated@@240 $generated@@433 $generated@@434)) $generated@@434) ($generated@@132 ($generated@@240 $generated@@433 $generated@@434) $generated@@45)))
 :pattern ( ($generated@@224 $generated@@434 $generated@@45))
)))
(assert (forall (($generated@@435 T@U) ($generated@@436 T@U) ) (!  (=> (= (type $generated@@436) $generated@@64) (= ($generated@@224 ($generated@@239 $generated@@435) $generated@@436) ($generated@@132 $generated@@435 $generated@@436)))
 :pattern ( ($generated@@224 ($generated@@239 $generated@@435) $generated@@436))
)))
(assert (forall (($generated@@437 T@U) ) (! (let (($generated@@438 ($generated@@79 (type $generated@@437))))
 (=> (= (type $generated@@437) ($generated@@76 $generated@@438 $generated@@2)) (<= 0 ($generated@@303 $generated@@437))))
 :pattern ( ($generated@@303 $generated@@437))
)))
(assert (forall (($generated@@439 T@U) ) (! (let (($generated@@440 ($generated@@295 (type $generated@@439))))
 (=> (= (type $generated@@439) ($generated@@294 $generated@@440)) (<= 0 ($generated@@293 $generated@@439))))
 :pattern ( ($generated@@293 $generated@@439))
)))
(assert (forall (($generated@@442 T@U) ) (! (= (type ($generated@@441 $generated@@442)) $generated@@64)
 :pattern ( ($generated@@441 $generated@@442))
)))
(assert (forall (($generated@@443 T@U) ($generated@@444 T@U) ) (!  (=> (and (= (type $generated@@443) $generated@@64) (= (type $generated@@444) $generated@@64)) (= ($generated@@441 ($generated@@237 $generated@@443 $generated@@444)) $generated@@443))
 :pattern ( ($generated@@237 $generated@@443 $generated@@444))
)))
(assert (forall (($generated@@446 T@U) ) (! (= (type ($generated@@445 $generated@@446)) $generated@@64)
 :pattern ( ($generated@@445 $generated@@446))
)))
(assert (forall (($generated@@447 T@U) ($generated@@448 T@U) ) (!  (=> (and (= (type $generated@@447) $generated@@64) (= (type $generated@@448) $generated@@64)) (= ($generated@@445 ($generated@@237 $generated@@447 $generated@@448)) $generated@@448))
 :pattern ( ($generated@@237 $generated@@447 $generated@@448))
)))
(assert (forall (($generated@@449 T@U) ($generated@@450 T@U) ) (!  (=> (and (= (type $generated@@449) $generated@@64) (= (type $generated@@450) $generated@@64)) (= ($generated@@72 ($generated@@237 $generated@@449 $generated@@450)) $generated@@58))
 :pattern ( ($generated@@237 $generated@@449 $generated@@450))
)))
(assert (forall (($generated@@452 T@U) ) (! (= (type ($generated@@451 $generated@@452)) $generated@@64)
 :pattern ( ($generated@@451 $generated@@452))
)))
(assert (forall (($generated@@453 T@U) ($generated@@454 T@U) ) (!  (=> (and (= (type $generated@@453) $generated@@64) (= (type $generated@@454) $generated@@64)) (= ($generated@@451 ($generated@@400 $generated@@453 $generated@@454)) $generated@@453))
 :pattern ( ($generated@@400 $generated@@453 $generated@@454))
)))
(assert (forall (($generated@@456 T@U) ) (! (= (type ($generated@@455 $generated@@456)) $generated@@64)
 :pattern ( ($generated@@455 $generated@@456))
)))
(assert (forall (($generated@@457 T@U) ($generated@@458 T@U) ) (!  (=> (and (= (type $generated@@457) $generated@@64) (= (type $generated@@458) $generated@@64)) (= ($generated@@455 ($generated@@400 $generated@@457 $generated@@458)) $generated@@458))
 :pattern ( ($generated@@400 $generated@@457 $generated@@458))
)))
(assert (forall (($generated@@459 T@U) ($generated@@460 T@U) ) (!  (=> (and (= (type $generated@@459) $generated@@64) (= (type $generated@@460) $generated@@64)) (= ($generated@@72 ($generated@@400 $generated@@459 $generated@@460)) $generated@@59))
 :pattern ( ($generated@@400 $generated@@459 $generated@@460))
)))
(assert (forall (($generated@@461 T@U) ($generated@@462 T@U) ) (!  (=> (and (= (type $generated@@461) $generated@@145) (= (type $generated@@462) $generated@@145)) (= ($generated@@286 ($generated@@223 $generated@@461 $generated@@462)) $generated@@61))
 :pattern ( ($generated@@223 $generated@@461 $generated@@462))
)))
(assert (forall (($generated@@464 T@U) ) (! (= (type ($generated@@463 $generated@@464)) $generated@@64)
 :pattern ( ($generated@@463 $generated@@464))
)))
(assert (forall (($generated@@465 T@U) ($generated@@466 T@U) ) (!  (=> (and (= (type $generated@@465) $generated@@64) (= (type $generated@@466) $generated@@64)) (= ($generated@@463 ($generated@@135 $generated@@465 $generated@@466)) $generated@@465))
 :pattern ( ($generated@@135 $generated@@465 $generated@@466))
)))
(assert (forall (($generated@@468 T@U) ) (! (= (type ($generated@@467 $generated@@468)) $generated@@64)
 :pattern ( ($generated@@467 $generated@@468))
)))
(assert (forall (($generated@@469 T@U) ($generated@@470 T@U) ) (!  (=> (and (= (type $generated@@469) $generated@@64) (= (type $generated@@470) $generated@@64)) (= ($generated@@467 ($generated@@135 $generated@@469 $generated@@470)) $generated@@470))
 :pattern ( ($generated@@135 $generated@@469 $generated@@470))
)))
(assert (forall (($generated@@471 T@U) ($generated@@472 T@U) ) (!  (=> (and (= (type $generated@@471) $generated@@145) (= (type $generated@@472) $generated@@145)) (= ($generated@@143 ($generated@@223 $generated@@471 $generated@@472)) $generated@@471))
 :pattern ( ($generated@@223 $generated@@471 $generated@@472))
)))
(assert (forall (($generated@@473 T@U) ($generated@@474 T@U) ) (!  (=> (and (= (type $generated@@473) $generated@@145) (= (type $generated@@474) $generated@@145)) (= ($generated@@144 ($generated@@223 $generated@@473 $generated@@474)) $generated@@474))
 :pattern ( ($generated@@223 $generated@@473 $generated@@474))
)))
(assert  (and (forall (($generated@@477 T@U) ) (! (= (type ($generated@@475 $generated@@477)) $generated@@64)
 :pattern ( ($generated@@475 $generated@@477))
)) (forall (($generated@@478 T@U) ($generated@@479 Int) ) (! (let (($generated@@480 ($generated@@295 (type $generated@@478))))
(= (type ($generated@@476 $generated@@478 $generated@@479)) $generated@@480))
 :pattern ( ($generated@@476 $generated@@478 $generated@@479))
))))
(assert (forall (($generated@@481 T@U) ($generated@@482 T@U) ($generated@@483 T@U) ) (!  (=> (and (and (= (type $generated@@481) ($generated@@294 $generated@@145)) (= (type $generated@@482) $generated@@64)) (= (type $generated@@483) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@74 $generated@@481 ($generated@@475 $generated@@482) $generated@@483) (forall (($generated@@484 Int) ) (!  (=> (and (<= 0 $generated@@484) (< $generated@@484 ($generated@@293 $generated@@481))) ($generated@@280 ($generated@@476 $generated@@481 $generated@@484) $generated@@482 $generated@@483))
 :pattern ( ($generated@@476 $generated@@481 $generated@@484))
))))
 :pattern ( ($generated@@74 $generated@@481 ($generated@@475 $generated@@482) $generated@@483))
)))
(assert (forall (($generated@@486 Int) ) (! (= ($generated@@485 ($generated@@75 $generated@@486)) $generated@@486)
 :pattern ( ($generated@@75 $generated@@486))
)))
(assert (forall (($generated@@488 T@U) ) (! (= (type ($generated@@487 $generated@@488)) $generated@@64)
 :pattern ( ($generated@@487 $generated@@488))
)))
(assert (forall (($generated@@489 T@U) ) (!  (=> (= (type $generated@@489) $generated@@64) (= ($generated@@487 ($generated@@267 $generated@@489)) $generated@@489))
 :pattern ( ($generated@@267 $generated@@489))
)))
(assert (forall (($generated@@490 T@U) ) (!  (=> (= (type $generated@@490) $generated@@64) (= ($generated@@72 ($generated@@267 $generated@@490)) $generated@@54))
 :pattern ( ($generated@@267 $generated@@490))
)))
(assert (forall (($generated@@492 T@U) ) (! (= (type ($generated@@491 $generated@@492)) $generated@@64)
 :pattern ( ($generated@@491 $generated@@492))
)))
(assert (forall (($generated@@493 T@U) ) (!  (=> (= (type $generated@@493) $generated@@64) (= ($generated@@491 ($generated@@272 $generated@@493)) $generated@@493))
 :pattern ( ($generated@@272 $generated@@493))
)))
(assert (forall (($generated@@494 T@U) ) (!  (=> (= (type $generated@@494) $generated@@64) (= ($generated@@72 ($generated@@272 $generated@@494)) $generated@@55))
 :pattern ( ($generated@@272 $generated@@494))
)))
(assert (forall (($generated@@496 T@U) ) (! (= (type ($generated@@495 $generated@@496)) $generated@@64)
 :pattern ( ($generated@@495 $generated@@496))
)))
(assert (forall (($generated@@497 T@U) ) (!  (=> (= (type $generated@@497) $generated@@64) (= ($generated@@495 ($generated@@150 $generated@@497)) $generated@@497))
 :pattern ( ($generated@@150 $generated@@497))
)))
(assert (forall (($generated@@498 T@U) ) (!  (=> (= (type $generated@@498) $generated@@64) (= ($generated@@72 ($generated@@150 $generated@@498)) $generated@@56))
 :pattern ( ($generated@@150 $generated@@498))
)))
(assert (forall (($generated@@500 T@U) ) (! (= (type ($generated@@499 $generated@@500)) $generated@@64)
 :pattern ( ($generated@@499 $generated@@500))
)))
(assert (forall (($generated@@501 T@U) ) (!  (=> (= (type $generated@@501) $generated@@64) (= ($generated@@499 ($generated@@475 $generated@@501)) $generated@@501))
 :pattern ( ($generated@@475 $generated@@501))
)))
(assert (forall (($generated@@502 T@U) ) (!  (=> (= (type $generated@@502) $generated@@64) (= ($generated@@72 ($generated@@475 $generated@@502)) $generated@@57))
 :pattern ( ($generated@@475 $generated@@502))
)))
(assert (forall (($generated@@503 T@U) ) (! (let (($generated@@504 (type $generated@@503)))
(= ($generated@@240 $generated@@504 ($generated@@239 $generated@@503)) $generated@@503))
 :pattern ( ($generated@@239 $generated@@503))
)))
(assert (forall (($generated@@505 T@U) ($generated@@506 T@U) ($generated@@507 T@U) ) (!  (=> (and (and (= (type $generated@@505) ($generated@@235 $generated@@145 $generated@@145)) (= (type $generated@@506) $generated@@64)) (= (type $generated@@507) $generated@@64)) (= ($generated@@132 $generated@@505 ($generated@@237 $generated@@506 $generated@@507)) (forall (($generated@@508 T@U) ) (!  (=> (and (= (type $generated@@508) $generated@@145) ($generated@@0 ($generated@@81 ($generated@@238 $generated@@505) $generated@@508))) (and ($generated@@224 ($generated@@81 ($generated@@241 $generated@@505) $generated@@508) $generated@@507) ($generated@@224 $generated@@508 $generated@@506)))
 :pattern ( ($generated@@81 ($generated@@241 $generated@@505) $generated@@508))
 :pattern ( ($generated@@81 ($generated@@238 $generated@@505) $generated@@508))
))))
 :pattern ( ($generated@@132 $generated@@505 ($generated@@237 $generated@@506 $generated@@507)))
)))
(assert (forall (($generated@@509 T@U) ($generated@@510 T@U) ($generated@@511 T@U) ) (!  (=> (and (and (= (type $generated@@509) ($generated@@317 $generated@@145 $generated@@145)) (= (type $generated@@510) $generated@@64)) (= (type $generated@@511) $generated@@64)) (= ($generated@@132 $generated@@509 ($generated@@400 $generated@@510 $generated@@511)) (forall (($generated@@512 T@U) ) (!  (=> (and (= (type $generated@@512) $generated@@145) ($generated@@0 ($generated@@81 ($generated@@315 $generated@@509) $generated@@512))) (and ($generated@@224 ($generated@@81 ($generated@@378 $generated@@509) $generated@@512) $generated@@511) ($generated@@224 $generated@@512 $generated@@510)))
 :pattern ( ($generated@@81 ($generated@@378 $generated@@509) $generated@@512))
 :pattern ( ($generated@@81 ($generated@@315 $generated@@509) $generated@@512))
))))
 :pattern ( ($generated@@132 $generated@@509 ($generated@@400 $generated@@510 $generated@@511)))
)))
(assert (forall (($generated@@515 T@U) ($generated@@516 T@U) ) (!  (=> (and (= (type $generated@@515) $generated@@145) (= (type $generated@@516) $generated@@145)) (< ($generated@@513 $generated@@515) ($generated@@514 ($generated@@223 $generated@@515 $generated@@516))))
 :pattern ( ($generated@@223 $generated@@515 $generated@@516))
)))
(assert (forall (($generated@@517 T@U) ($generated@@518 T@U) ) (!  (=> (and (= (type $generated@@517) $generated@@145) (= (type $generated@@518) $generated@@145)) (< ($generated@@513 $generated@@518) ($generated@@514 ($generated@@223 $generated@@517 $generated@@518))))
 :pattern ( ($generated@@223 $generated@@517 $generated@@518))
)))
(assert (forall (($generated@@519 T@U) ($generated@@520 T@U) ($generated@@521 T@U) ) (!  (=> (and (and (and (= (type $generated@@519) $generated@@145) (= (type $generated@@520) $generated@@64)) (= (type $generated@@521) $generated@@64)) ($generated@@224 $generated@@519 ($generated@@237 $generated@@520 $generated@@521))) (and (= ($generated@@239 ($generated@@240 ($generated@@235 $generated@@145 $generated@@145) $generated@@519)) $generated@@519) ($generated@@132 ($generated@@240 ($generated@@235 $generated@@145 $generated@@145) $generated@@519) ($generated@@237 $generated@@520 $generated@@521))))
 :pattern ( ($generated@@224 $generated@@519 ($generated@@237 $generated@@520 $generated@@521)))
)))
(assert (forall (($generated@@522 T@U) ($generated@@523 T@U) ($generated@@524 T@U) ) (!  (=> (and (and (and (= (type $generated@@522) $generated@@145) (= (type $generated@@523) $generated@@64)) (= (type $generated@@524) $generated@@64)) ($generated@@224 $generated@@522 ($generated@@400 $generated@@523 $generated@@524))) (and (= ($generated@@239 ($generated@@240 ($generated@@317 $generated@@145 $generated@@145) $generated@@522)) $generated@@522) ($generated@@132 ($generated@@240 ($generated@@317 $generated@@145 $generated@@145) $generated@@522) ($generated@@400 $generated@@523 $generated@@524))))
 :pattern ( ($generated@@224 $generated@@522 ($generated@@400 $generated@@523 $generated@@524)))
)))
(assert (forall (($generated@@525 T@U) ($generated@@526 T@U) ($generated@@527 T@U) ) (!  (=> (and (and (and (= (type $generated@@525) $generated@@64) (= (type $generated@@526) $generated@@64)) (= (type $generated@@527) $generated@@145)) ($generated@@224 $generated@@527 ($generated@@135 $generated@@525 $generated@@526))) (and (= ($generated@@239 ($generated@@240 $generated@@136 $generated@@527)) $generated@@527) ($generated@@132 ($generated@@240 $generated@@136 $generated@@527) ($generated@@135 $generated@@525 $generated@@526))))
 :pattern ( ($generated@@224 $generated@@527 ($generated@@135 $generated@@525 $generated@@526)))
)))
(assert (forall (($generated@@528 T@U) ) (! (let (($generated@@529 (type $generated@@528)))
 (not ($generated@@0 ($generated@@81 ($generated@@409 $generated@@529) $generated@@528))))
 :pattern ( (let (($generated@@529 (type $generated@@528)))
($generated@@81 ($generated@@409 $generated@@529) $generated@@528)))
)))
(assert (forall (($generated@@531 T@U) ) (! (= (type ($generated@@530 $generated@@531)) $generated@@69)
 :pattern ( ($generated@@530 $generated@@531))
)))
(assert (forall (($generated@@532 T@U) ($generated@@533 T@U) ) (!  (=> (and (= (type $generated@@532) $generated@@64) (= (type $generated@@533) $generated@@64)) (and (= ($generated@@72 ($generated@@135 $generated@@532 $generated@@533)) $generated@@62) (= ($generated@@530 ($generated@@135 $generated@@532 $generated@@533)) $generated@@63)))
 :pattern ( ($generated@@135 $generated@@532 $generated@@533))
)))
(assert (forall (($generated@@534 T@U) ) (!  (=> (= (type $generated@@534) $generated@@136) (= ($generated@@513 ($generated@@239 $generated@@534)) ($generated@@514 $generated@@534)))
 :pattern ( ($generated@@513 ($generated@@239 $generated@@534)))
)))
(assert (forall (($generated@@535 T@U) ) (!  (=> (and (= (type $generated@@535) $generated@@145) ($generated@@224 $generated@@535 ($generated@@75 0))) (and (= ($generated@@239 ($generated@@240 $generated@@2 $generated@@535)) $generated@@535) ($generated@@132 ($generated@@240 ($generated@@76 $generated@@145 $generated@@4) $generated@@535) ($generated@@75 0))))
 :pattern ( ($generated@@224 $generated@@535 ($generated@@75 0)))
)))
(assert (forall (($generated@@536 T@U) ($generated@@537 T@U) ) (!  (=> (and (and (= (type $generated@@536) $generated@@145) (= (type $generated@@537) $generated@@64)) ($generated@@224 $generated@@536 ($generated@@267 $generated@@537))) (and (= ($generated@@239 ($generated@@240 ($generated@@76 $generated@@145 $generated@@4) $generated@@536)) $generated@@536) ($generated@@132 ($generated@@240 ($generated@@76 $generated@@145 $generated@@4) $generated@@536) ($generated@@267 $generated@@537))))
 :pattern ( ($generated@@224 $generated@@536 ($generated@@267 $generated@@537)))
)))
(assert (forall (($generated@@538 T@U) ($generated@@539 T@U) ) (!  (=> (and (and (= (type $generated@@538) $generated@@145) (= (type $generated@@539) $generated@@64)) ($generated@@224 $generated@@538 ($generated@@272 $generated@@539))) (and (= ($generated@@239 ($generated@@240 ($generated@@76 $generated@@145 $generated@@4) $generated@@538)) $generated@@538) ($generated@@132 ($generated@@240 ($generated@@76 $generated@@145 $generated@@4) $generated@@538) ($generated@@272 $generated@@539))))
 :pattern ( ($generated@@224 $generated@@538 ($generated@@272 $generated@@539)))
)))
(assert (forall (($generated@@540 T@U) ($generated@@541 T@U) ) (!  (=> (and (and (= (type $generated@@540) $generated@@145) (= (type $generated@@541) $generated@@64)) ($generated@@224 $generated@@540 ($generated@@150 $generated@@541))) (and (= ($generated@@239 ($generated@@240 ($generated@@76 $generated@@145 $generated@@2) $generated@@540)) $generated@@540) ($generated@@132 ($generated@@240 ($generated@@76 $generated@@145 $generated@@2) $generated@@540) ($generated@@150 $generated@@541))))
 :pattern ( ($generated@@224 $generated@@540 ($generated@@150 $generated@@541)))
)))
(assert (forall (($generated@@542 T@U) ($generated@@543 T@U) ) (!  (=> (and (and (= (type $generated@@542) $generated@@145) (= (type $generated@@543) $generated@@64)) ($generated@@224 $generated@@542 ($generated@@475 $generated@@543))) (and (= ($generated@@239 ($generated@@240 ($generated@@294 $generated@@145) $generated@@542)) $generated@@542) ($generated@@132 ($generated@@240 ($generated@@294 $generated@@145) $generated@@542) ($generated@@475 $generated@@543))))
 :pattern ( ($generated@@224 $generated@@542 ($generated@@475 $generated@@543)))
)))
(assert  (=> (<= 1 $generated@@231) (forall (($generated@@544 T@U) ($generated@@545 Int) ) (!  (=> (and (= (type $generated@@544) ($generated@@235 $generated@@145 $generated@@145)) (or ($generated@@236 $generated@@544 $generated@@545) (and (not (= 1 $generated@@231)) ($generated@@132 $generated@@544 ($generated@@237 $generated@@46 ($generated@@237 $generated@@47 $generated@@44)))))) (= ($generated@@232 $generated@@544 $generated@@545)  (and (and ($generated@@0 ($generated@@81 ($generated@@238 $generated@@544) ($generated@@239 ($generated@@8 $generated@@545)))) ($generated@@0 ($generated@@81 ($generated@@238 ($generated@@240 ($generated@@235 $generated@@145 $generated@@145) ($generated@@81 ($generated@@241 $generated@@544) ($generated@@239 ($generated@@8 $generated@@545))))) ($generated@@239 ($generated@@9 ($generated@@242 $generated@@545)))))) ($generated@@0 ($generated@@240 $generated@@4 ($generated@@81 ($generated@@241 ($generated@@240 ($generated@@235 $generated@@145 $generated@@145) ($generated@@81 ($generated@@241 $generated@@544) ($generated@@239 ($generated@@8 $generated@@545))))) ($generated@@239 ($generated@@9 ($generated@@242 $generated@@545)))))))))
 :pattern ( ($generated@@232 $generated@@544 $generated@@545))
))))
(assert (forall (($generated@@546 T@U) ($generated@@547 T@U) ($generated@@548 T@U) ) (!  (=> (and (and (= (type $generated@@546) ($generated@@76 $generated@@145 $generated@@2)) (= (type $generated@@547) $generated@@64)) (= (type $generated@@548) ($generated@@76 $generated@@77 $generated@@78))) (= ($generated@@74 $generated@@546 ($generated@@150 $generated@@547) $generated@@548) (forall (($generated@@549 T@U) ) (!  (=> (and (= (type $generated@@549) $generated@@145) (< 0 ($generated ($generated@@81 $generated@@546 $generated@@549)))) ($generated@@280 $generated@@549 $generated@@547 $generated@@548))
 :pattern ( ($generated@@81 $generated@@546 $generated@@549))
))))
 :pattern ( ($generated@@74 $generated@@546 ($generated@@150 $generated@@547) $generated@@548))
)))
(assert (forall (($generated@@550 T@U) ($generated@@551 T@U) ($generated@@552 T@U) ) (!  (=> (and (and (and (= (type $generated@@550) $generated@@136) (= (type $generated@@551) $generated@@64)) (= (type $generated@@552) ($generated@@76 $generated@@77 $generated@@78))) (and ($generated@@279 $generated@@552) (and ($generated@@134 $generated@@550) (exists (($generated@@553 T@U) ) (!  (and (= (type $generated@@553) $generated@@64) ($generated@@74 $generated@@550 ($generated@@135 $generated@@551 $generated@@553) $generated@@552))
 :pattern ( ($generated@@74 $generated@@550 ($generated@@135 $generated@@551 $generated@@553) $generated@@552))
))))) ($generated@@280 ($generated@@143 $generated@@550) $generated@@551 $generated@@552))
 :pattern ( ($generated@@280 ($generated@@143 $generated@@550) $generated@@551 $generated@@552))
)))
(assert (forall (($generated@@554 T@U) ($generated@@555 T@U) ($generated@@556 T@U) ) (!  (=> (and (and (and (= (type $generated@@554) $generated@@136) (= (type $generated@@555) $generated@@64)) (= (type $generated@@556) ($generated@@76 $generated@@77 $generated@@78))) (and ($generated@@279 $generated@@556) (and ($generated@@134 $generated@@554) (exists (($generated@@557 T@U) ) (!  (and (= (type $generated@@557) $generated@@64) ($generated@@74 $generated@@554 ($generated@@135 $generated@@557 $generated@@555) $generated@@556))
 :pattern ( ($generated@@74 $generated@@554 ($generated@@135 $generated@@557 $generated@@555) $generated@@556))
))))) ($generated@@280 ($generated@@144 $generated@@554) $generated@@555 $generated@@556))
 :pattern ( ($generated@@280 ($generated@@144 $generated@@554) $generated@@555 $generated@@556))
)))
(assert (forall (($generated@@558 T@U) ($generated@@559 T@U) ) (!  (=> (and (= (type $generated@@558) $generated@@145) (= (type $generated@@559) $generated@@145)) (= ($generated@@223 ($generated@@233 $generated@@558) ($generated@@233 $generated@@559)) ($generated@@233 ($generated@@223 $generated@@558 $generated@@559))))
 :pattern ( ($generated@@223 ($generated@@233 $generated@@558) ($generated@@233 $generated@@559)))
)))
(assert (forall (($generated@@560 Int) ) (! (= ($generated@@239 ($generated@@8 ($generated@@234 $generated@@560))) ($generated@@233 ($generated@@239 ($generated@@8 $generated@@560))))
 :pattern ( ($generated@@239 ($generated@@8 ($generated@@234 $generated@@560))))
)))
(assert (forall (($generated@@561 T@U) ) (! (= ($generated@@239 ($generated@@233 $generated@@561)) ($generated@@233 ($generated@@239 $generated@@561)))
 :pattern ( ($generated@@239 ($generated@@233 $generated@@561)))
)))
(assert (forall (($generated@@562 T@U) ) (! (let (($generated@@563 ($generated@@295 (type $generated@@562))))
 (=> (and (= (type $generated@@562) ($generated@@294 $generated@@563)) (= ($generated@@293 $generated@@562) 0)) (= $generated@@562 ($generated@@292 $generated@@563))))
 :pattern ( ($generated@@293 $generated@@562))
)))
(assert (forall (($generated@@564 T@U) ($generated@@565 T@U) ($generated@@566 T@U) ) (! (let (($generated@@567 (type $generated@@565)))
 (=> (and (and (= (type $generated@@564) ($generated@@76 $generated@@567 $generated@@2)) (= (type $generated@@566) $generated@@2)) (<= 0 ($generated $generated@@566))) (= ($generated@@303 ($generated@@82 $generated@@564 $generated@@565 $generated@@566)) (+ (- ($generated@@303 $generated@@564) ($generated ($generated@@81 $generated@@564 $generated@@565))) ($generated $generated@@566)))))
 :pattern ( ($generated@@303 ($generated@@82 $generated@@564 $generated@@565 $generated@@566)))
)))
(assert (forall (($generated@@568 T@U) ($generated@@569 T@U) ) (!  (=> (and (= (type $generated@@568) ($generated@@76 $generated@@77 $generated@@78)) (= (type $generated@@569) $generated@@2)) ($generated@@74 $generated@@569 $generated@@46 $generated@@568))
 :pattern ( ($generated@@74 $generated@@569 $generated@@46 $generated@@568))
)))
(assert (forall (($generated@@570 T@U) ($generated@@571 T@U) ) (!  (=> (and (= (type $generated@@570) ($generated@@76 $generated@@77 $generated@@78)) (= (type $generated@@571) $generated@@3)) ($generated@@74 $generated@@571 $generated@@47 $generated@@570))
 :pattern ( ($generated@@74 $generated@@571 $generated@@47 $generated@@570))
)))
(assert (forall (($generated@@572 T@U) ($generated@@573 T@U) ) (!  (=> (and (= (type $generated@@572) ($generated@@76 $generated@@77 $generated@@78)) (= (type $generated@@573) $generated@@4)) ($generated@@74 $generated@@573 $generated@@44 $generated@@572))
 :pattern ( ($generated@@74 $generated@@573 $generated@@44 $generated@@572))
)))
(assert (forall (($generated@@574 T@U) ($generated@@575 T@U) ) (!  (=> (and (= (type $generated@@574) ($generated@@76 $generated@@77 $generated@@78)) (= (type $generated@@575) $generated@@433)) ($generated@@74 $generated@@575 $generated@@45 $generated@@574))
 :pattern ( ($generated@@74 $generated@@575 $generated@@45 $generated@@574))
)))
(assert (forall (($generated@@576 T@U) ($generated@@577 T@U) ) (!  (=> (and (= (type $generated@@576) ($generated@@76 $generated@@77 $generated@@78)) (= (type $generated@@577) $generated@@145)) ($generated@@74 $generated@@577 $generated@@48 $generated@@576))
 :pattern ( ($generated@@74 $generated@@577 $generated@@48 $generated@@576))
)))
(assert (forall (($generated@@578 T@U) ($generated@@579 T@U) ) (!  (=> (and (= (type $generated@@578) ($generated@@294 $generated@@145)) (= (type $generated@@579) $generated@@64)) (= ($generated@@132 $generated@@578 ($generated@@475 $generated@@579)) (forall (($generated@@580 Int) ) (!  (=> (and (<= 0 $generated@@580) (< $generated@@580 ($generated@@293 $generated@@578))) ($generated@@224 ($generated@@476 $generated@@578 $generated@@580) $generated@@579))
 :pattern ( ($generated@@476 $generated@@578 $generated@@580))
))))
 :pattern ( ($generated@@132 $generated@@578 ($generated@@475 $generated@@579)))
)))
(assert (forall (($generated@@582 T@U) ($generated@@583 Int) ) (!  (=> (= (type $generated@@582) ($generated@@294 $generated@@145)) (=> (and (<= 0 $generated@@583) (< $generated@@583 ($generated@@293 $generated@@582))) (< ($generated@@514 ($generated@@240 $generated@@136 ($generated@@476 $generated@@582 $generated@@583))) ($generated@@581 $generated@@582))))
 :pattern ( ($generated@@514 ($generated@@240 $generated@@136 ($generated@@476 $generated@@582 $generated@@583))))
)))
(assert (forall (($generated@@584 T@U) ($generated@@585 T@U) ($generated@@586 T@U) ) (!  (=> (and (and (and (= (type $generated@@584) ($generated@@235 $generated@@145 $generated@@145)) (= (type $generated@@585) $generated@@64)) (= (type $generated@@586) $generated@@64)) ($generated@@132 $generated@@584 ($generated@@237 $generated@@585 $generated@@586))) (and (and ($generated@@132 ($generated@@238 $generated@@584) ($generated@@267 $generated@@585)) ($generated@@132 ($generated@@342 $generated@@584) ($generated@@267 $generated@@586))) ($generated@@132 ($generated@@373 $generated@@584) ($generated@@267 ($generated@@135 $generated@@585 $generated@@586)))))
 :pattern ( ($generated@@132 $generated@@584 ($generated@@237 $generated@@585 $generated@@586)))
)))
(assert (forall (($generated@@587 T@U) ($generated@@588 T@U) ($generated@@589 T@U) ) (!  (=> (and (and (and (= (type $generated@@587) ($generated@@317 $generated@@145 $generated@@145)) (= (type $generated@@588) $generated@@64)) (= (type $generated@@589) $generated@@64)) ($generated@@132 $generated@@587 ($generated@@400 $generated@@588 $generated@@589))) (and (and ($generated@@132 ($generated@@315 $generated@@587) ($generated@@272 $generated@@588)) ($generated@@132 ($generated@@353 $generated@@587) ($generated@@272 $generated@@589))) ($generated@@132 ($generated@@377 $generated@@587) ($generated@@272 ($generated@@135 $generated@@588 $generated@@589)))))
 :pattern ( ($generated@@132 $generated@@587 ($generated@@400 $generated@@588 $generated@@589)))
)))
(assert (forall (($generated@@590 T@U) ) (!  (=> (= (type $generated@@590) $generated@@2) ($generated@@132 $generated@@590 $generated@@46))
 :pattern ( ($generated@@132 $generated@@590 $generated@@46))
)))
(assert (forall (($generated@@591 T@U) ) (!  (=> (= (type $generated@@591) $generated@@3) ($generated@@132 $generated@@591 $generated@@47))
 :pattern ( ($generated@@132 $generated@@591 $generated@@47))
)))
(assert (forall (($generated@@592 T@U) ) (!  (=> (= (type $generated@@592) $generated@@4) ($generated@@132 $generated@@592 $generated@@44))
 :pattern ( ($generated@@132 $generated@@592 $generated@@44))
)))
(assert (forall (($generated@@593 T@U) ) (!  (=> (= (type $generated@@593) $generated@@433) ($generated@@132 $generated@@593 $generated@@45))
 :pattern ( ($generated@@132 $generated@@593 $generated@@45))
)))
(assert (forall (($generated@@594 T@U) ) (!  (=> (= (type $generated@@594) $generated@@145) ($generated@@132 $generated@@594 $generated@@48))
 :pattern ( ($generated@@132 $generated@@594 $generated@@48))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@595 () T@U)
(declare-fun $generated@@596 () Int)
(declare-fun $generated@@597 () T@U)
(declare-fun $generated@@598 () T@U)
(declare-fun $generated@@599 () T@U)
(declare-fun $generated@@600 () T@U)
(declare-fun $generated@@601 (T@U) Bool)
(assert  (and (and (and (and (= (type $generated@@595) ($generated@@235 $generated@@145 $generated@@145)) (= (type $generated@@597) ($generated@@157 $generated@@77 $generated@@4))) (= (type $generated@@598) $generated@@77)) (= (type $generated@@599) ($generated@@76 $generated@@77 $generated@@78))) (= (type $generated@@600) ($generated@@157 $generated@@77 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@602 true))
(let (($generated@@603  (=> (and (not (and ($generated@@0 ($generated@@81 ($generated@@238 $generated@@595) ($generated@@239 ($generated@@8 $generated@@596)))) ($generated@@0 ($generated@@81 ($generated@@238 ($generated@@240 ($generated@@235 $generated@@145 $generated@@145) ($generated@@81 ($generated@@241 $generated@@595) ($generated@@239 ($generated@@8 $generated@@596))))) ($generated@@239 ($generated@@9 ($generated@@242 $generated@@596))))))) (= (ControlFlow 0 6) 2)) $generated@@602)))
(let (($generated@@604  (=> (and ($generated@@0 ($generated@@81 ($generated@@238 $generated@@595) ($generated@@239 ($generated@@8 $generated@@596)))) ($generated@@0 ($generated@@81 ($generated@@238 ($generated@@240 ($generated@@235 $generated@@145 $generated@@145) ($generated@@81 ($generated@@241 $generated@@595) ($generated@@239 ($generated@@8 $generated@@596))))) ($generated@@239 ($generated@@9 ($generated@@242 $generated@@596)))))) (and (=> (= (ControlFlow 0 3) (- 0 5)) ($generated@@0 ($generated@@81 ($generated@@238 $generated@@595) ($generated@@239 ($generated@@8 $generated@@596))))) (=> ($generated@@0 ($generated@@81 ($generated@@238 $generated@@595) ($generated@@239 ($generated@@8 $generated@@596)))) (and (=> (= (ControlFlow 0 3) (- 0 4)) ($generated@@0 ($generated@@81 ($generated@@238 ($generated@@240 ($generated@@235 $generated@@145 $generated@@145) ($generated@@81 ($generated@@241 $generated@@595) ($generated@@239 ($generated@@8 $generated@@596))))) ($generated@@239 ($generated@@9 ($generated@@242 $generated@@596)))))) (=> ($generated@@0 ($generated@@81 ($generated@@238 ($generated@@240 ($generated@@235 $generated@@145 $generated@@145) ($generated@@81 ($generated@@241 $generated@@595) ($generated@@239 ($generated@@8 $generated@@596))))) ($generated@@239 ($generated@@9 ($generated@@242 $generated@@596))))) (=> (= (ControlFlow 0 3) 2) $generated@@602))))))))
(let (($generated@@605  (=> (not ($generated@@0 ($generated@@81 ($generated@@238 $generated@@595) ($generated@@239 ($generated@@8 $generated@@596))))) (and (=> (= (ControlFlow 0 9) 3) $generated@@604) (=> (= (ControlFlow 0 9) 6) $generated@@603)))))
(let (($generated@@606  (=> ($generated@@0 ($generated@@81 ($generated@@238 $generated@@595) ($generated@@239 ($generated@@8 $generated@@596)))) (and (=> (= (ControlFlow 0 7) (- 0 8)) ($generated@@0 ($generated@@81 ($generated@@238 $generated@@595) ($generated@@239 ($generated@@8 $generated@@596))))) (=> ($generated@@0 ($generated@@81 ($generated@@238 $generated@@595) ($generated@@239 ($generated@@8 $generated@@596)))) (and (=> (= (ControlFlow 0 7) 3) $generated@@604) (=> (= (ControlFlow 0 7) 6) $generated@@603)))))))
(let (($generated@@607  (=> (= $generated@@597 ($generated@@211 $generated@@598 $generated@@599 $generated@@60 false)) (and (=> (= (ControlFlow 0 10) 7) $generated@@606) (=> (= (ControlFlow 0 10) 9) $generated@@605)))))
(let (($generated@@608 true))
(let (($generated@@609  (=> (= $generated@@600 ($generated@@156 $generated@@598 $generated@@599 $generated@@60 false)) (and (=> (= (ControlFlow 0 11) 1) $generated@@608) (=> (= (ControlFlow 0 11) 10) $generated@@607)))))
(let (($generated@@610  (=> (and (and (and ($generated@@279 $generated@@599) ($generated@@601 $generated@@599)) ($generated@@132 $generated@@595 ($generated@@237 $generated@@46 ($generated@@237 $generated@@47 $generated@@44)))) (and (= 1 $generated@@231) (= (ControlFlow 0 12) 11))) $generated@@609)))
$generated@@610))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (T@U) T@U)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@162 (T@T T@U) T@U)
(declare-fun $generated@@163 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 T@U) ) (! (let (($generated@@159 (type $generated@@158)))
(= (type ($generated@@157 $generated@@158)) $generated@@159))
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (= ($generated@@157 $generated@@160) $generated@@160)
 :pattern ( ($generated@@157 $generated@@160))
)))
(assert  (and (and (= ($generated@@1 $generated@@163) 11) (forall (($generated@@164 T@U) ) (! (= (type ($generated@@161 $generated@@164)) $generated@@163)
 :pattern ( ($generated@@161 $generated@@164))
))) (forall (($generated@@165 T@T) ($generated@@166 T@U) ) (! (= (type ($generated@@162 $generated@@165 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@162 $generated@@165 $generated@@166))
))))
(assert (forall (($generated@@167 T@U) ) (! (let (($generated@@168 (type $generated@@167)))
(= ($generated@@162 $generated@@168 ($generated@@161 $generated@@167)) $generated@@167))
 :pattern ( ($generated@@161 $generated@@167))
)))
(assert (forall (($generated@@169 T@U) ) (! (= ($generated@@161 ($generated@@157 $generated@@169)) ($generated@@157 ($generated@@161 $generated@@169)))
 :pattern ( ($generated@@161 ($generated@@157 $generated@@169)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 (T@U) Bool)
(declare-fun $generated@@176 () Int)
(assert  (and (and (and (= (type $generated@@170) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@171) $generated@@47)) (= (type $generated@@172) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@173) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@177  (=> (and (= $generated@@170 ($generated@@45 $generated@@171 $generated@@172 $generated@@173 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@0 ($generated@@157 ($generated@@11 false))))))
(let (($generated@@178  (=> (and (and (and ($generated@@174 $generated@@172) ($generated@@175 $generated@@172)) ($generated@@0 ($generated@@157 ($generated@@11 false)))) (and (= 1 $generated@@176) (= (ControlFlow 0 3) 2))) $generated@@177)))
$generated@@178)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@166 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ) (= ($generated@@1 ($generated@@47 $generated@@51)) 6)) (forall (($generated@@52 T@T) ) (! (= ($generated@@48 ($generated@@47 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@47 $generated@@52))
))) (= (type $generated@@44) ($generated@@47 $generated@@4))) (= ($generated@@1 $generated@@49) 7)) (= (type $generated@@45) $generated@@49)) (= ($generated@@1 $generated@@50) 8)) (= (type $generated@@46) $generated@@50)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@1 ($generated@@56 $generated@@68 $generated@@69)) 9)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@56 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@61 ($generated@@56 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@56 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (let (($generated@@76 ($generated@@61 (type $generated@@74))))
(= (type ($generated@@59 $generated@@74 $generated@@75)) $generated@@76))
 :pattern ( ($generated@@59 $generated@@74 $generated@@75))
))) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (let (($generated@@80 (type $generated@@79)))
(let (($generated@@81 (type $generated@@78)))
(= (type ($generated@@62 $generated@@77 $generated@@78 $generated@@79)) ($generated@@56 $generated@@81 $generated@@80))))
 :pattern ( ($generated@@62 $generated@@77 $generated@@78 $generated@@79))
))) (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (let (($generated@@85 ($generated@@61 (type $generated@@82))))
 (=> (= (type $generated@@84) $generated@@85) (= ($generated@@59 ($generated@@62 $generated@@82 $generated@@83 $generated@@84) $generated@@83) $generated@@84)))
 :weight 0
))) (and (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@59 ($generated@@62 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@59 $generated@@87 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or true (= ($generated@@59 ($generated@@62 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@59 $generated@@91 $generated@@93)))
 :weight 0
)))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@48 (type $generated@@95))))
(= (type ($generated@@58 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@58 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@57) 10)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@63 $generated@@97 $generated@@98 $generated@@99)) $generated@@57)
 :pattern ( ($generated@@63 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@48 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@58 ($generated@@63 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@58 ($generated@@63 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@58 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@58 ($generated@@63 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@58 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@55) 11)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@112 $generated@@113)) 12))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@65 ($generated@@64 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@64 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@66 ($generated@@64 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@64 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@66 (type $generated@@118))))
(= (type ($generated@@53 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@53 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@64 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@66 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@53 ($generated@@67 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@53 ($generated@@67 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@53 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@53 ($generated@@67 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@53 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@53 ($generated@@67 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@53 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@64 $generated@@55 $generated@@4))
 :pattern ( ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@48 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@55) (= (type $generated@@156) ($generated@@56 $generated@@55 $generated@@57))) (= (type $generated@@157) ($generated@@47 $generated@@4))) (= (type $generated@@159) $generated@@55)) (= (type $generated@@160) ($generated@@47 $generated@@161))) (= ($generated@@0 ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@58 ($generated@@59 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (and (and (forall (($generated@@165 T@U) ) (! (= (type ($generated@@162 $generated@@165)) $generated@@49)
 :pattern ( ($generated@@162 $generated@@165))
)) (= ($generated@@1 $generated@@164) 13)) (= (type $generated@@163) $generated@@164)))
(assert (= ($generated@@162 $generated@@163) $generated@@45))
(assert (forall (($generated@@167 T@U) ) (! (= (type ($generated@@166 $generated@@167)) $generated@@50)
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (= ($generated@@166 $generated@@163) $generated@@46))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Bool)
(declare-fun $generated@@172 () Bool)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 (T@U T@U) Bool)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 (T@U T@U T@U) Bool)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () T@T)
(assert  (and (and (and (and (and (= (type $generated@@168) ($generated@@64 $generated@@55 $generated@@4)) (= (type $generated@@169) $generated@@55)) (= (type $generated@@170) ($generated@@56 $generated@@55 $generated@@57))) (= ($generated@@1 $generated@@180) 14)) (= (type $generated@@176) $generated@@180)) (= (type $generated@@178) $generated@@180)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@181  (=> (= $generated@@168 ($generated@@54 $generated@@169 $generated@@170 $generated@@44 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) $generated@@171) (=> $generated@@171 (=> (= (ControlFlow 0 2) (- 0 1)) $generated@@172))))))
(let (($generated@@182  (=> (and ($generated@@173 $generated@@170) ($generated@@174 $generated@@170)) (=> (and (and (=> $generated@@171 (and ($generated@@175 $generated@@176 $generated@@163) ($generated@@177 $generated@@176 $generated@@163 $generated@@170))) (=> $generated@@172 (and ($generated@@175 $generated@@178 $generated@@163) ($generated@@177 $generated@@178 $generated@@163 $generated@@170)))) (and (= 1 $generated@@179) (= (ControlFlow 0 4) 2))) $generated@@181))))
$generated@@182)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@55 () T@U)
(declare-fun $generated@@56 () T@U)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@58 () T@U)
(declare-fun $generated@@59 () T@U)
(declare-fun $generated@@60 () T@U)
(declare-fun $generated@@61 () T@U)
(declare-fun $generated@@62 () T@U)
(declare-fun $generated@@63 () T@U)
(declare-fun $generated@@64 () T@U)
(declare-fun $generated@@65 () T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@69 (T@T) T@T)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@74 (T@U) T@U)
(declare-fun $generated@@76 (T@U T@U T@U) Bool)
(declare-fun $generated@@77 (Int) T@U)
(declare-fun $generated@@78 (T@T T@T) T@T)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 (T@T) T@T)
(declare-fun $generated@@82 (T@T) T@T)
(declare-fun $generated@@83 (T@U T@U) T@U)
(declare-fun $generated@@84 (T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@U T@U) T@U)
(declare-fun $generated@@86 (T@U T@U T@U) T@U)
(declare-fun $generated@@134 (T@U T@U) Bool)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 (T@U T@U) T@U)
(declare-fun $generated@@138 () T@T)
(declare-fun $generated@@144 (T@U T@U) Bool)
(declare-fun $generated@@145 (T@U) T@U)
(declare-fun $generated@@146 (T@U) T@U)
(declare-fun $generated@@147 () T@T)
(declare-fun $generated@@152 (T@U) T@U)
(declare-fun $generated@@153 (T@U) Bool)
(declare-fun $generated@@157 (T@U T@U T@U) T@U)
(declare-fun $generated@@158 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@159 (T@T T@T) T@T)
(declare-fun $generated@@160 (T@T) T@T)
(declare-fun $generated@@161 (T@T) T@T)
(declare-fun $generated@@162 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@213 (T@U T@U) T@U)
(declare-fun $generated@@214 (T@U T@U) Bool)
(declare-fun $generated@@223 (T@U) T@U)
(declare-fun $generated@@228 (T@U) T@U)
(declare-fun $generated@@233 (T@U) T@U)
(declare-fun $generated@@237 (T@U) Bool)
(declare-fun $generated@@238 (T@U T@U T@U) Bool)
(declare-fun $generated@@244 (T@U) T@U)
(declare-fun $generated@@250 (T@T) T@U)
(declare-fun $generated@@251 (T@U) Int)
(declare-fun $generated@@252 (T@T) T@T)
(declare-fun $generated@@253 (T@T) T@T)
(declare-fun $generated@@258 (T@U) T@U)
(declare-fun $generated@@263 (T@U) Int)
(declare-fun $generated@@264 (T@T) T@U)
(declare-fun $generated@@269 (T@U) T@U)
(declare-fun $generated@@270 (T@T T@T) T@U)
(declare-fun $generated@@271 (T@T T@T) T@T)
(declare-fun $generated@@272 (T@T) T@T)
(declare-fun $generated@@273 (T@T) T@T)
(declare-fun $generated@@287 (T@U) T@U)
(declare-fun $generated@@288 (T@T T@T) T@U)
(declare-fun $generated@@289 (T@T T@T) T@T)
(declare-fun $generated@@290 (T@T) T@T)
(declare-fun $generated@@291 (T@T) T@T)
(declare-fun $generated@@312 (T@U) T@U)
(declare-fun $generated@@323 (T@U) T@U)
(declare-fun $generated@@343 (T@U) T@U)
(declare-fun $generated@@344 (T@T T@U) T@U)
(declare-fun $generated@@345 (T@U) T@U)
(declare-fun $generated@@354 (T@U) T@U)
(declare-fun $generated@@355 (T@U) T@U)
(declare-fun $generated@@372 (T@U T@U) T@U)
(declare-fun $generated@@380 (T@U T@U) T@U)
(declare-fun $generated@@388 (T@T) T@U)
(declare-fun $generated@@412 () T@T)
(declare-fun $generated@@420 (T@U) T@U)
(declare-fun $generated@@424 (T@U) T@U)
(declare-fun $generated@@430 (T@U) T@U)
(declare-fun $generated@@434 (T@U) T@U)
(declare-fun $generated@@442 (T@U) T@U)
(declare-fun $generated@@446 (T@U) T@U)
(declare-fun $generated@@454 (T@U) T@U)
(declare-fun $generated@@455 (T@U Int) T@U)
(declare-fun $generated@@464 (T@U) Int)
(declare-fun $generated@@466 (T@U) T@U)
(declare-fun $generated@@470 (T@U) T@U)
(declare-fun $generated@@474 (T@U) T@U)
(declare-fun $generated@@478 (T@U) T@U)
(declare-fun $generated@@492 (T@U) Int)
(declare-fun $generated@@493 (T@U) Int)
(declare-fun $generated@@509 (T@U) T@U)
(declare-fun $generated@@523 () T@U)
(declare-fun $generated@@558 (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@66) 6) (= (type $generated@@44) $generated@@66)) (= (type $generated@@45) $generated@@66)) (= (type $generated@@46) $generated@@66)) (= (type $generated@@47) $generated@@66)) (= (type $generated@@48) $generated@@66)) (= ($generated@@1 $generated@@67) 7)) (= (type $generated@@49) $generated@@67)) (= (type $generated@@50) $generated@@67)) (= (type $generated@@51) $generated@@67)) (= (type $generated@@52) $generated@@67)) (= (type $generated@@53) $generated@@67)) (= (type $generated@@54) $generated@@67)) (= (type $generated@@55) $generated@@67)) (= (type $generated@@56) $generated@@67)) (= (type $generated@@57) $generated@@67)) (= (type $generated@@58) $generated@@67)) (= (type $generated@@59) $generated@@67)) (forall (($generated@@72 T@T) ) (= ($generated@@1 ($generated@@68 $generated@@72)) 8))) (forall (($generated@@73 T@T) ) (! (= ($generated@@69 ($generated@@68 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@68 $generated@@73))
))) (= (type $generated@@60) ($generated@@68 $generated@@4))) (= ($generated@@1 $generated@@70) 9)) (= (type $generated@@61) $generated@@70)) (= (type $generated@@62) $generated@@67)) (= (type $generated@@63) $generated@@67)) (= ($generated@@1 $generated@@71) 10)) (= (type $generated@@64) $generated@@71)) (= (type $generated@@65) $generated@@71)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46 $generated@@47 $generated@@48 $generated@@49 $generated@@50 $generated@@51 $generated@@52 $generated@@53 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60 $generated@@61 $generated@@62 $generated@@63 $generated@@64 $generated@@65)
)
(assert (forall (($generated@@75 T@U) ) (! (= (type ($generated@@74 $generated@@75)) $generated@@67)
 :pattern ( ($generated@@74 $generated@@75))
)))
(assert (= ($generated@@74 $generated@@44) $generated@@49))
(assert (= ($generated@@74 $generated@@45) $generated@@50))
(assert (= ($generated@@74 $generated@@46) $generated@@51))
(assert (= ($generated@@74 $generated@@47) $generated@@52))
(assert (= ($generated@@74 $generated@@48) $generated@@53))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ) (= ($generated@@1 ($generated@@78 $generated@@87 $generated@@88)) 11)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ) (! (= ($generated@@81 ($generated@@78 $generated@@89 $generated@@90)) $generated@@89)
 :pattern ( ($generated@@78 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@T) ($generated@@92 T@T) ) (! (= ($generated@@82 ($generated@@78 $generated@@91 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@78 $generated@@91 $generated@@92))
))) (forall (($generated@@93 T@U) ($generated@@94 T@U) ) (! (let (($generated@@95 ($generated@@82 (type $generated@@93))))
(= (type ($generated@@83 $generated@@93 $generated@@94)) $generated@@95))
 :pattern ( ($generated@@83 $generated@@93 $generated@@94))
))) (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (let (($generated@@99 (type $generated@@98)))
(let (($generated@@100 (type $generated@@97)))
(= (type ($generated@@84 $generated@@96 $generated@@97 $generated@@98)) ($generated@@78 $generated@@100 $generated@@99))))
 :pattern ( ($generated@@84 $generated@@96 $generated@@97 $generated@@98))
))) (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (let (($generated@@104 ($generated@@82 (type $generated@@101))))
 (=> (= (type $generated@@103) $generated@@104) (= ($generated@@83 ($generated@@84 $generated@@101 $generated@@102 $generated@@103) $generated@@102) $generated@@103)))
 :weight 0
))) (and (forall (($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@107 $generated@@108) (= ($generated@@83 ($generated@@84 $generated@@106 $generated@@107 $generated@@105) $generated@@108) ($generated@@83 $generated@@106 $generated@@108)))
 :weight 0
)) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or true (= ($generated@@83 ($generated@@84 $generated@@110 $generated@@111 $generated@@109) $generated@@112) ($generated@@83 $generated@@110 $generated@@112)))
 :weight 0
)))) (= ($generated@@1 $generated@@79) 12)) (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (! (let (($generated@@115 ($generated@@69 (type $generated@@114))))
(= (type ($generated@@85 $generated@@113 $generated@@114)) $generated@@115))
 :pattern ( ($generated@@85 $generated@@113 $generated@@114))
))) (= ($generated@@1 $generated@@80) 13)) (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= (type ($generated@@86 $generated@@116 $generated@@117 $generated@@118)) $generated@@80)
 :pattern ( ($generated@@86 $generated@@116 $generated@@117 $generated@@118))
))) (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (let (($generated@@122 ($generated@@69 (type $generated@@120))))
 (=> (= (type $generated@@121) $generated@@122) (= ($generated@@85 ($generated@@86 $generated@@119 $generated@@120 $generated@@121) $generated@@120) $generated@@121)))
 :weight 0
))) (and (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (!  (or (= $generated@@125 $generated@@126) (= ($generated@@85 ($generated@@86 $generated@@124 $generated@@125 $generated@@123) $generated@@126) ($generated@@85 $generated@@124 $generated@@126)))
 :weight 0
)) (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or true (= ($generated@@85 ($generated@@86 $generated@@128 $generated@@129 $generated@@127) $generated@@130) ($generated@@85 $generated@@128 $generated@@130)))
 :weight 0
)))) (forall (($generated@@131 Int) ) (! (= (type ($generated@@77 $generated@@131)) $generated@@66)
 :pattern ( ($generated@@77 $generated@@131))
))))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (!  (=> (and (= (type $generated@@132) $generated@@2) (= (type $generated@@133) ($generated@@78 $generated@@79 $generated@@80))) ($generated@@76 $generated@@132 ($generated@@77 0) $generated@@133))
 :pattern ( ($generated@@76 $generated@@132 ($generated@@77 0) $generated@@133))
)))
(assert (forall (($generated@@135 T@U) ) (!  (=> (= (type $generated@@135) $generated@@2) ($generated@@134 $generated@@135 ($generated@@77 0)))
 :pattern ( ($generated@@134 $generated@@135 ($generated@@77 0)))
)))
(assert  (and (= ($generated@@1 $generated@@138) 14) (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (! (= (type ($generated@@137 $generated@@139 $generated@@140)) $generated@@66)
 :pattern ( ($generated@@137 $generated@@139 $generated@@140))
))))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> (and (and (and (= (type $generated@@141) $generated@@66) (= (type $generated@@142) $generated@@66)) (= (type $generated@@143) $generated@@138)) ($generated@@134 $generated@@143 ($generated@@137 $generated@@141 $generated@@142))) ($generated@@136 $generated@@143))
 :pattern ( ($generated@@136 $generated@@143) ($generated@@134 $generated@@143 ($generated@@137 $generated@@141 $generated@@142)))
)))
(assert  (and (and (= ($generated@@1 $generated@@147) 15) (forall (($generated@@148 T@U) ) (! (= (type ($generated@@145 $generated@@148)) $generated@@147)
 :pattern ( ($generated@@145 $generated@@148))
))) (forall (($generated@@149 T@U) ) (! (= (type ($generated@@146 $generated@@149)) $generated@@147)
 :pattern ( ($generated@@146 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (!  (=> (and (and (= (type $generated@@150) $generated@@138) (= (type $generated@@151) $generated@@138)) true) (= ($generated@@144 $generated@@150 $generated@@151)  (and (= ($generated@@145 $generated@@150) ($generated@@145 $generated@@151)) (= ($generated@@146 $generated@@150) ($generated@@146 $generated@@151)))))
 :pattern ( ($generated@@144 $generated@@150 $generated@@151))
)))
(assert (forall (($generated@@154 T@U) ) (! (= (type ($generated@@152 $generated@@154)) $generated@@66)
 :pattern ( ($generated@@152 $generated@@154))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (=> (and (and (= (type $generated@@155) ($generated@@78 $generated@@147 $generated@@2)) (= (type $generated@@156) $generated@@66)) ($generated@@134 $generated@@155 ($generated@@152 $generated@@156))) ($generated@@153 $generated@@155))
 :pattern ( ($generated@@134 $generated@@155 ($generated@@152 $generated@@156)))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@163 T@T) ($generated@@164 T@T) ) (= ($generated@@1 ($generated@@159 $generated@@163 $generated@@164)) 16)) (forall (($generated@@165 T@T) ($generated@@166 T@T) ) (! (= ($generated@@160 ($generated@@159 $generated@@165 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@159 $generated@@165 $generated@@166))
))) (forall (($generated@@167 T@T) ($generated@@168 T@T) ) (! (= ($generated@@161 ($generated@@159 $generated@@167 $generated@@168)) $generated@@168)
 :pattern ( ($generated@@159 $generated@@167 $generated@@168))
))) (forall (($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 T@U) ) (! (let (($generated@@172 ($generated@@161 (type $generated@@169))))
(= (type ($generated@@157 $generated@@169 $generated@@170 $generated@@171)) $generated@@172))
 :pattern ( ($generated@@157 $generated@@169 $generated@@170 $generated@@171))
))) (forall (($generated@@173 T@U) ($generated@@174 T@U) ($generated@@175 T@U) ($generated@@176 T@U) ) (! (let (($generated@@177 (type $generated@@176)))
(let (($generated@@178 (type $generated@@174)))
(= (type ($generated@@162 $generated@@173 $generated@@174 $generated@@175 $generated@@176)) ($generated@@159 $generated@@178 $generated@@177))))
 :pattern ( ($generated@@162 $generated@@173 $generated@@174 $generated@@175 $generated@@176))
))) (forall (($generated@@179 T@U) ($generated@@180 T@U) ($generated@@181 T@U) ($generated@@182 T@U) ) (! (let (($generated@@183 ($generated@@161 (type $generated@@179))))
 (=> (= (type $generated@@182) $generated@@183) (= ($generated@@157 ($generated@@162 $generated@@179 $generated@@180 $generated@@181 $generated@@182) $generated@@180 $generated@@181) $generated@@182)))
 :weight 0
))) (and (and (forall (($generated@@184 T@U) ($generated@@185 T@U) ($generated@@186 T@U) ($generated@@187 T@U) ($generated@@188 T@U) ($generated@@189 T@U) ) (!  (or (= $generated@@186 $generated@@188) (= ($generated@@157 ($generated@@162 $generated@@185 $generated@@186 $generated@@187 $generated@@184) $generated@@188 $generated@@189) ($generated@@157 $generated@@185 $generated@@188 $generated@@189)))
 :weight 0
)) (forall (($generated@@190 T@U) ($generated@@191 T@U) ($generated@@192 T@U) ($generated@@193 T@U) ($generated@@194 T@U) ($generated@@195 T@U) ) (!  (or (= $generated@@193 $generated@@195) (= ($generated@@157 ($generated@@162 $generated@@191 $generated@@192 $generated@@193 $generated@@190) $generated@@194 $generated@@195) ($generated@@157 $generated@@191 $generated@@194 $generated@@195)))
 :weight 0
))) (forall (($generated@@196 T@U) ($generated@@197 T@U) ($generated@@198 T@U) ($generated@@199 T@U) ($generated@@200 T@U) ($generated@@201 T@U) ) (!  (or true (= ($generated@@157 ($generated@@162 $generated@@197 $generated@@198 $generated@@199 $generated@@196) $generated@@200 $generated@@201) ($generated@@157 $generated@@197 $generated@@200 $generated@@201)))
 :weight 0
)))) (forall (($generated@@202 T@U) ($generated@@203 T@U) ($generated@@204 T@U) ($generated@@205 Bool) ) (! (= (type ($generated@@158 $generated@@202 $generated@@203 $generated@@204 $generated@@205)) ($generated@@159 $generated@@79 $generated@@4))
 :pattern ( ($generated@@158 $generated@@202 $generated@@203 $generated@@204 $generated@@205))
))))
(assert (forall (($generated@@206 T@U) ($generated@@207 T@U) ($generated@@208 T@U) ($generated@@209 Bool) ($generated@@210 T@U) ($generated@@211 T@U) ) (! (let (($generated@@212 ($generated@@69 (type $generated@@211))))
 (=> (and (and (and (and (= (type $generated@@206) $generated@@79) (= (type $generated@@207) ($generated@@78 $generated@@79 $generated@@80))) (= (type $generated@@208) ($generated@@68 $generated@@4))) (= (type $generated@@210) $generated@@79)) (= (type $generated@@211) ($generated@@68 $generated@@212))) (= ($generated@@0 ($generated@@157 ($generated@@158 $generated@@206 $generated@@207 $generated@@208 $generated@@209) $generated@@210 $generated@@211))  (=> (and (not (= $generated@@210 $generated@@206)) ($generated@@0 ($generated@@85 ($generated@@83 $generated@@207 $generated@@210) $generated@@208))) $generated@@209))))
 :pattern ( ($generated@@157 ($generated@@158 $generated@@206 $generated@@207 $generated@@208 $generated@@209) $generated@@210 $generated@@211))
)))
(assert (forall (($generated@@215 T@U) ($generated@@216 T@U) ) (! (= (type ($generated@@213 $generated@@215 $generated@@216)) $generated@@138)
 :pattern ( ($generated@@213 $generated@@215 $generated@@216))
)))
(assert (forall (($generated@@217 T@U) ($generated@@218 T@U) ($generated@@219 T@U) ($generated@@220 T@U) ) (!  (=> (and (and (and (= (type $generated@@217) $generated@@66) (= (type $generated@@218) $generated@@66)) (= (type $generated@@219) $generated@@147)) (= (type $generated@@220) $generated@@147)) (= ($generated@@134 ($generated@@213 $generated@@219 $generated@@220) ($generated@@137 $generated@@217 $generated@@218))  (and ($generated@@214 $generated@@219 $generated@@217) ($generated@@214 $generated@@220 $generated@@218))))
 :pattern ( ($generated@@134 ($generated@@213 $generated@@219 $generated@@220) ($generated@@137 $generated@@217 $generated@@218)))
)))
(assert (forall (($generated@@221 T@U) ($generated@@222 T@U) ) (!  (=> (and (= (type $generated@@221) $generated@@138) (= (type $generated@@222) $generated@@138)) (= ($generated@@144 $generated@@221 $generated@@222) (= $generated@@221 $generated@@222)))
 :pattern ( ($generated@@144 $generated@@221 $generated@@222))
)))
(assert (forall (($generated@@224 T@U) ) (! (= (type ($generated@@223 $generated@@224)) $generated@@66)
 :pattern ( ($generated@@223 $generated@@224))
)))
(assert (forall (($generated@@225 T@U) ($generated@@226 T@U) ) (!  (=> (and (= (type $generated@@225) ($generated@@78 $generated@@147 $generated@@4)) (= (type $generated@@226) $generated@@66)) (= ($generated@@134 $generated@@225 ($generated@@223 $generated@@226)) (forall (($generated@@227 T@U) ) (!  (=> (and (= (type $generated@@227) $generated@@147) ($generated@@0 ($generated@@83 $generated@@225 $generated@@227))) ($generated@@214 $generated@@227 $generated@@226))
 :pattern ( ($generated@@83 $generated@@225 $generated@@227))
))))
 :pattern ( ($generated@@134 $generated@@225 ($generated@@223 $generated@@226)))
)))
(assert (forall (($generated@@229 T@U) ) (! (= (type ($generated@@228 $generated@@229)) $generated@@66)
 :pattern ( ($generated@@228 $generated@@229))
)))
(assert (forall (($generated@@230 T@U) ($generated@@231 T@U) ) (!  (=> (and (= (type $generated@@230) ($generated@@78 $generated@@147 $generated@@4)) (= (type $generated@@231) $generated@@66)) (= ($generated@@134 $generated@@230 ($generated@@228 $generated@@231)) (forall (($generated@@232 T@U) ) (!  (=> (and (= (type $generated@@232) $generated@@147) ($generated@@0 ($generated@@83 $generated@@230 $generated@@232))) ($generated@@214 $generated@@232 $generated@@231))
 :pattern ( ($generated@@83 $generated@@230 $generated@@232))
))))
 :pattern ( ($generated@@134 $generated@@230 ($generated@@228 $generated@@231)))
)))
(assert (forall (($generated@@234 T@U) ) (! (let (($generated@@235 (type $generated@@234)))
(= (type ($generated@@233 $generated@@234)) $generated@@235))
 :pattern ( ($generated@@233 $generated@@234))
)))
(assert (forall (($generated@@236 T@U) ) (! (= ($generated@@233 $generated@@236) $generated@@236)
 :pattern ( ($generated@@233 $generated@@236))
)))
(assert (forall (($generated@@239 T@U) ($generated@@240 T@U) ($generated@@241 T@U) ($generated@@242 T@U) ($generated@@243 T@U) ) (!  (=> (and (and (and (and (and (= (type $generated@@239) $generated@@66) (= (type $generated@@240) $generated@@66)) (= (type $generated@@241) $generated@@147)) (= (type $generated@@242) $generated@@147)) (= (type $generated@@243) ($generated@@78 $generated@@79 $generated@@80))) ($generated@@237 $generated@@243)) (= ($generated@@76 ($generated@@213 $generated@@241 $generated@@242) ($generated@@137 $generated@@239 $generated@@240) $generated@@243)  (and ($generated@@238 $generated@@241 $generated@@239 $generated@@243) ($generated@@238 $generated@@242 $generated@@240 $generated@@243))))
 :pattern ( ($generated@@76 ($generated@@213 $generated@@241 $generated@@242) ($generated@@137 $generated@@239 $generated@@240) $generated@@243))
)))
(assert (forall (($generated@@245 T@U) ) (! (= (type ($generated@@244 $generated@@245)) $generated@@70)
 :pattern ( ($generated@@244 $generated@@245))
)))
(assert (forall (($generated@@246 T@U) ) (!  (=> (= (type $generated@@246) $generated@@138) (= ($generated@@136 $generated@@246) (= ($generated@@244 $generated@@246) $generated@@61)))
 :pattern ( ($generated@@136 $generated@@246))
)))
(assert (forall (($generated@@247 T@U) ) (!  (=> (and (= (type $generated@@247) $generated@@138) ($generated@@136 $generated@@247)) (exists (($generated@@248 T@U) ($generated@@249 T@U) ) (!  (and (and (= (type $generated@@248) $generated@@147) (= (type $generated@@249) $generated@@147)) (= $generated@@247 ($generated@@213 $generated@@248 $generated@@249)))
 :no-pattern (type $generated@@248)
 :no-pattern (type $generated@@249)
 :no-pattern ($generated $generated@@248)
 :no-pattern ($generated@@0 $generated@@248)
 :no-pattern ($generated $generated@@249)
 :no-pattern ($generated@@0 $generated@@249)
)))
 :pattern ( ($generated@@136 $generated@@247))
)))
(assert  (and (and (forall (($generated@@254 T@T) ) (= ($generated@@1 ($generated@@252 $generated@@254)) 17)) (forall (($generated@@255 T@T) ) (! (= ($generated@@253 ($generated@@252 $generated@@255)) $generated@@255)
 :pattern ( ($generated@@252 $generated@@255))
))) (forall (($generated@@256 T@T) ) (! (= (type ($generated@@250 $generated@@256)) ($generated@@252 $generated@@256))
 :pattern ( ($generated@@250 $generated@@256))
))))
(assert (forall (($generated@@257 T@T) ) (! (= ($generated@@251 ($generated@@250 $generated@@257)) 0)
 :pattern ( ($generated@@250 $generated@@257))
)))
(assert (forall (($generated@@259 T@U) ) (! (= (type ($generated@@258 $generated@@259)) $generated@@147)
 :pattern ( ($generated@@258 $generated@@259))
)))
(assert (forall (($generated@@260 T@U) ($generated@@261 T@U) ($generated@@262 T@U) ) (!  (=> (and (= (type $generated@@261) $generated@@66) (= (type $generated@@262) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@238 ($generated@@258 $generated@@260) $generated@@261 $generated@@262) ($generated@@76 $generated@@260 $generated@@261 $generated@@262)))
 :pattern ( ($generated@@238 ($generated@@258 $generated@@260) $generated@@261 $generated@@262))
)))
(assert (forall (($generated@@265 T@T) ) (! (= (type ($generated@@264 $generated@@265)) ($generated@@78 $generated@@265 $generated@@2))
 :pattern ( ($generated@@264 $generated@@265))
)))
(assert (forall (($generated@@266 T@U) ) (! (let (($generated@@267 ($generated@@81 (type $generated@@266))))
 (=> (= (type $generated@@266) ($generated@@78 $generated@@267 $generated@@2)) (and (= (= ($generated@@263 $generated@@266) 0) (= $generated@@266 ($generated@@264 $generated@@267))) (=> (not (= ($generated@@263 $generated@@266) 0)) (exists (($generated@@268 T@U) ) (!  (and (= (type $generated@@268) $generated@@267) (< 0 ($generated ($generated@@83 $generated@@266 $generated@@268))))
 :no-pattern (type $generated@@268)
 :no-pattern ($generated $generated@@268)
 :no-pattern ($generated@@0 $generated@@268)
))))))
 :pattern ( ($generated@@263 $generated@@266))
)))
(assert  (and (and (and (and (forall (($generated@@274 T@T) ($generated@@275 T@T) ) (= ($generated@@1 ($generated@@271 $generated@@274 $generated@@275)) 18)) (forall (($generated@@276 T@T) ($generated@@277 T@T) ) (! (= ($generated@@272 ($generated@@271 $generated@@276 $generated@@277)) $generated@@276)
 :pattern ( ($generated@@271 $generated@@276 $generated@@277))
))) (forall (($generated@@278 T@T) ($generated@@279 T@T) ) (! (= ($generated@@273 ($generated@@271 $generated@@278 $generated@@279)) $generated@@279)
 :pattern ( ($generated@@271 $generated@@278 $generated@@279))
))) (forall (($generated@@280 T@U) ) (! (let (($generated@@281 ($generated@@272 (type $generated@@280))))
(= (type ($generated@@269 $generated@@280)) ($generated@@78 $generated@@281 $generated@@4)))
 :pattern ( ($generated@@269 $generated@@280))
))) (forall (($generated@@282 T@T) ($generated@@283 T@T) ) (! (= (type ($generated@@270 $generated@@282 $generated@@283)) ($generated@@271 $generated@@282 $generated@@283))
 :pattern ( ($generated@@270 $generated@@282 $generated@@283))
))))
(assert (forall (($generated@@284 T@U) ($generated@@285 T@T) ) (! (let (($generated@@286 (type $generated@@284)))
 (not ($generated@@0 ($generated@@83 ($generated@@269 ($generated@@270 $generated@@286 $generated@@285)) $generated@@284))))
 :pattern ( (let (($generated@@286 (type $generated@@284)))
($generated@@83 ($generated@@269 ($generated@@270 $generated@@286 $generated@@285)) $generated@@284)))
)))
(assert  (and (and (and (and (forall (($generated@@292 T@T) ($generated@@293 T@T) ) (= ($generated@@1 ($generated@@289 $generated@@292 $generated@@293)) 19)) (forall (($generated@@294 T@T) ($generated@@295 T@T) ) (! (= ($generated@@290 ($generated@@289 $generated@@294 $generated@@295)) $generated@@294)
 :pattern ( ($generated@@289 $generated@@294 $generated@@295))
))) (forall (($generated@@296 T@T) ($generated@@297 T@T) ) (! (= ($generated@@291 ($generated@@289 $generated@@296 $generated@@297)) $generated@@297)
 :pattern ( ($generated@@289 $generated@@296 $generated@@297))
))) (forall (($generated@@298 T@U) ) (! (let (($generated@@299 ($generated@@290 (type $generated@@298))))
(= (type ($generated@@287 $generated@@298)) ($generated@@78 $generated@@299 $generated@@4)))
 :pattern ( ($generated@@287 $generated@@298))
))) (forall (($generated@@300 T@T) ($generated@@301 T@T) ) (! (= (type ($generated@@288 $generated@@300 $generated@@301)) ($generated@@289 $generated@@300 $generated@@301))
 :pattern ( ($generated@@288 $generated@@300 $generated@@301))
))))
(assert (forall (($generated@@302 T@U) ($generated@@303 T@T) ) (! (let (($generated@@304 (type $generated@@302)))
 (not ($generated@@0 ($generated@@83 ($generated@@287 ($generated@@288 $generated@@304 $generated@@303)) $generated@@302))))
 :pattern ( (let (($generated@@304 (type $generated@@302)))
($generated@@83 ($generated@@287 ($generated@@288 $generated@@304 $generated@@303)) $generated@@302)))
)))
(assert (forall (($generated@@305 T@U) ) (! (let (($generated@@306 ($generated@@81 (type $generated@@305))))
 (=> (= (type $generated@@305) ($generated@@78 $generated@@306 $generated@@2)) (= ($generated@@153 $generated@@305) (forall (($generated@@307 T@U) ) (!  (=> (= (type $generated@@307) $generated@@306) (and (<= 0 ($generated ($generated@@83 $generated@@305 $generated@@307))) (<= ($generated ($generated@@83 $generated@@305 $generated@@307)) ($generated@@263 $generated@@305))))
 :pattern ( ($generated@@83 $generated@@305 $generated@@307))
)))))
 :pattern ( ($generated@@153 $generated@@305))
)))
(assert (forall (($generated@@308 T@U) ) (! (let (($generated@@309 ($generated@@273 (type $generated@@308))))
(let (($generated@@310 ($generated@@272 (type $generated@@308))))
 (=> (= (type $generated@@308) ($generated@@271 $generated@@310 $generated@@309)) (or (= $generated@@308 ($generated@@270 $generated@@310 $generated@@309)) (exists (($generated@@311 T@U) ) (!  (and (= (type $generated@@311) $generated@@310) ($generated@@0 ($generated@@83 ($generated@@269 $generated@@308) $generated@@311)))
 :no-pattern (type $generated@@311)
 :no-pattern ($generated $generated@@311)
 :no-pattern ($generated@@0 $generated@@311)
))))))
 :pattern ( ($generated@@269 $generated@@308))
)))
(assert (forall (($generated@@313 T@U) ) (! (let (($generated@@314 ($generated@@273 (type $generated@@313))))
(= (type ($generated@@312 $generated@@313)) ($generated@@78 $generated@@314 $generated@@4)))
 :pattern ( ($generated@@312 $generated@@313))
)))
(assert (forall (($generated@@315 T@U) ) (! (let (($generated@@316 ($generated@@273 (type $generated@@315))))
(let (($generated@@317 ($generated@@272 (type $generated@@315))))
 (=> (= (type $generated@@315) ($generated@@271 $generated@@317 $generated@@316)) (or (= $generated@@315 ($generated@@270 $generated@@317 $generated@@316)) (exists (($generated@@318 T@U) ) (!  (and (= (type $generated@@318) $generated@@316) ($generated@@0 ($generated@@83 ($generated@@312 $generated@@315) $generated@@318)))
 :no-pattern (type $generated@@318)
 :no-pattern ($generated $generated@@318)
 :no-pattern ($generated@@0 $generated@@318)
))))))
 :pattern ( ($generated@@312 $generated@@315))
)))
(assert (forall (($generated@@319 T@U) ) (! (let (($generated@@320 ($generated@@291 (type $generated@@319))))
(let (($generated@@321 ($generated@@290 (type $generated@@319))))
 (=> (= (type $generated@@319) ($generated@@289 $generated@@321 $generated@@320)) (or (= $generated@@319 ($generated@@288 $generated@@321 $generated@@320)) (exists (($generated@@322 T@U) ) (!  (and (= (type $generated@@322) $generated@@321) ($generated@@0 ($generated@@83 ($generated@@287 $generated@@319) $generated@@322)))
 :no-pattern (type $generated@@322)
 :no-pattern ($generated $generated@@322)
 :no-pattern ($generated@@0 $generated@@322)
))))))
 :pattern ( ($generated@@287 $generated@@319))
)))
(assert (forall (($generated@@324 T@U) ) (! (let (($generated@@325 ($generated@@291 (type $generated@@324))))
(= (type ($generated@@323 $generated@@324)) ($generated@@78 $generated@@325 $generated@@4)))
 :pattern ( ($generated@@323 $generated@@324))
)))
(assert (forall (($generated@@326 T@U) ) (! (let (($generated@@327 ($generated@@291 (type $generated@@326))))
(let (($generated@@328 ($generated@@290 (type $generated@@326))))
 (=> (= (type $generated@@326) ($generated@@289 $generated@@328 $generated@@327)) (or (= $generated@@326 ($generated@@288 $generated@@328 $generated@@327)) (exists (($generated@@329 T@U) ) (!  (and (= (type $generated@@329) $generated@@327) ($generated@@0 ($generated@@83 ($generated@@323 $generated@@326) $generated@@329)))
 :no-pattern (type $generated@@329)
 :no-pattern ($generated $generated@@329)
 :no-pattern ($generated@@0 $generated@@329)
))))))
 :pattern ( ($generated@@323 $generated@@326))
)))
(assert (forall (($generated@@330 T@U) ($generated@@331 T@U) ) (!  (=> (and (= (type $generated@@330) ($generated@@78 $generated@@147 $generated@@2)) (= (type $generated@@331) $generated@@66)) (= ($generated@@134 $generated@@330 ($generated@@152 $generated@@331)) (forall (($generated@@332 T@U) ) (!  (=> (and (= (type $generated@@332) $generated@@147) (< 0 ($generated ($generated@@83 $generated@@330 $generated@@332)))) ($generated@@214 $generated@@332 $generated@@331))
 :pattern ( ($generated@@83 $generated@@330 $generated@@332))
))))
 :pattern ( ($generated@@134 $generated@@330 ($generated@@152 $generated@@331)))
)))
(assert (forall (($generated@@333 T@U) ($generated@@334 T@U) ($generated@@335 T@U) ) (!  (=> (and (and (= (type $generated@@333) ($generated@@78 $generated@@147 $generated@@4)) (= (type $generated@@334) $generated@@66)) (= (type $generated@@335) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@333 ($generated@@223 $generated@@334) $generated@@335) (forall (($generated@@336 T@U) ) (!  (=> (and (= (type $generated@@336) $generated@@147) ($generated@@0 ($generated@@83 $generated@@333 $generated@@336))) ($generated@@238 $generated@@336 $generated@@334 $generated@@335))
 :pattern ( ($generated@@83 $generated@@333 $generated@@336))
))))
 :pattern ( ($generated@@76 $generated@@333 ($generated@@223 $generated@@334) $generated@@335))
)))
(assert (forall (($generated@@337 T@U) ($generated@@338 T@U) ($generated@@339 T@U) ) (!  (=> (and (and (= (type $generated@@337) ($generated@@78 $generated@@147 $generated@@4)) (= (type $generated@@338) $generated@@66)) (= (type $generated@@339) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@337 ($generated@@228 $generated@@338) $generated@@339) (forall (($generated@@340 T@U) ) (!  (=> (and (= (type $generated@@340) $generated@@147) ($generated@@0 ($generated@@83 $generated@@337 $generated@@340))) ($generated@@238 $generated@@340 $generated@@338 $generated@@339))
 :pattern ( ($generated@@83 $generated@@337 $generated@@340))
))))
 :pattern ( ($generated@@76 $generated@@337 ($generated@@228 $generated@@338) $generated@@339))
)))
(assert (forall (($generated@@341 T@U) ) (! (let (($generated@@342 (type $generated@@341)))
(= ($generated ($generated@@83 ($generated@@264 $generated@@342) $generated@@341)) 0))
 :pattern ( (let (($generated@@342 (type $generated@@341)))
($generated@@83 ($generated@@264 $generated@@342) $generated@@341)))
)))
(assert  (and (and (forall (($generated@@346 T@U) ) (! (= (type ($generated@@343 $generated@@346)) ($generated@@78 $generated@@147 $generated@@4))
 :pattern ( ($generated@@343 $generated@@346))
)) (forall (($generated@@347 T@T) ($generated@@348 T@U) ) (! (= (type ($generated@@344 $generated@@347 $generated@@348)) $generated@@347)
 :pattern ( ($generated@@344 $generated@@347 $generated@@348))
))) (forall (($generated@@349 T@U) ) (! (let (($generated@@350 ($generated@@273 (type $generated@@349))))
(let (($generated@@351 ($generated@@272 (type $generated@@349))))
(= (type ($generated@@345 $generated@@349)) ($generated@@78 $generated@@351 $generated@@350))))
 :pattern ( ($generated@@345 $generated@@349))
))))
(assert (forall (($generated@@352 T@U) ($generated@@353 T@U) ) (!  (=> (and (= (type $generated@@352) ($generated@@271 $generated@@147 $generated@@147)) (= (type $generated@@353) $generated@@147)) (= ($generated@@0 ($generated@@83 ($generated@@343 $generated@@352) $generated@@353))  (and ($generated@@0 ($generated@@83 ($generated@@269 $generated@@352) ($generated@@145 ($generated@@344 $generated@@138 $generated@@353)))) (= ($generated@@83 ($generated@@345 $generated@@352) ($generated@@145 ($generated@@344 $generated@@138 $generated@@353))) ($generated@@146 ($generated@@344 $generated@@138 $generated@@353))))))
 :pattern ( ($generated@@83 ($generated@@343 $generated@@352) $generated@@353))
)))
(assert  (and (forall (($generated@@356 T@U) ) (! (= (type ($generated@@354 $generated@@356)) ($generated@@78 $generated@@147 $generated@@4))
 :pattern ( ($generated@@354 $generated@@356))
)) (forall (($generated@@357 T@U) ) (! (let (($generated@@358 ($generated@@291 (type $generated@@357))))
(let (($generated@@359 ($generated@@290 (type $generated@@357))))
(= (type ($generated@@355 $generated@@357)) ($generated@@78 $generated@@359 $generated@@358))))
 :pattern ( ($generated@@355 $generated@@357))
))))
(assert (forall (($generated@@360 T@U) ($generated@@361 T@U) ) (!  (=> (and (= (type $generated@@360) ($generated@@289 $generated@@147 $generated@@147)) (= (type $generated@@361) $generated@@147)) (= ($generated@@0 ($generated@@83 ($generated@@354 $generated@@360) $generated@@361))  (and ($generated@@0 ($generated@@83 ($generated@@287 $generated@@360) ($generated@@145 ($generated@@344 $generated@@138 $generated@@361)))) (= ($generated@@83 ($generated@@355 $generated@@360) ($generated@@145 ($generated@@344 $generated@@138 $generated@@361))) ($generated@@146 ($generated@@344 $generated@@138 $generated@@361))))))
 :pattern ( ($generated@@83 ($generated@@354 $generated@@360) $generated@@361))
)))
(assert (forall (($generated@@362 T@U) ($generated@@363 T@U) ) (! (let (($generated@@364 (type $generated@@363)))
(let (($generated@@365 ($generated@@272 (type $generated@@362))))
 (=> (= (type $generated@@362) ($generated@@271 $generated@@365 $generated@@364)) (= ($generated@@0 ($generated@@83 ($generated@@312 $generated@@362) $generated@@363)) (exists (($generated@@366 T@U) ) (!  (and (= (type $generated@@366) $generated@@365) (and ($generated@@0 ($generated@@83 ($generated@@269 $generated@@362) $generated@@366)) (= $generated@@363 ($generated@@83 ($generated@@345 $generated@@362) $generated@@366))))
 :pattern ( ($generated@@83 ($generated@@269 $generated@@362) $generated@@366))
 :pattern ( ($generated@@83 ($generated@@345 $generated@@362) $generated@@366))
))))))
 :pattern ( ($generated@@83 ($generated@@312 $generated@@362) $generated@@363))
)))
(assert (forall (($generated@@367 T@U) ($generated@@368 T@U) ) (! (let (($generated@@369 (type $generated@@368)))
(let (($generated@@370 ($generated@@290 (type $generated@@367))))
 (=> (= (type $generated@@367) ($generated@@289 $generated@@370 $generated@@369)) (= ($generated@@0 ($generated@@83 ($generated@@323 $generated@@367) $generated@@368)) (exists (($generated@@371 T@U) ) (!  (and (= (type $generated@@371) $generated@@370) (and ($generated@@0 ($generated@@83 ($generated@@287 $generated@@367) $generated@@371)) (= $generated@@368 ($generated@@83 ($generated@@355 $generated@@367) $generated@@371))))
 :pattern ( ($generated@@83 ($generated@@287 $generated@@367) $generated@@371))
 :pattern ( ($generated@@83 ($generated@@355 $generated@@367) $generated@@371))
))))))
 :pattern ( ($generated@@83 ($generated@@323 $generated@@367) $generated@@368))
)))
(assert (forall (($generated@@373 T@U) ($generated@@374 T@U) ) (! (= (type ($generated@@372 $generated@@373 $generated@@374)) $generated@@66)
 :pattern ( ($generated@@372 $generated@@373 $generated@@374))
)))
(assert (forall (($generated@@375 T@U) ($generated@@376 T@U) ($generated@@377 T@U) ($generated@@378 T@U) ) (!  (=> (and (and (and (= (type $generated@@375) ($generated@@271 $generated@@147 $generated@@147)) (= (type $generated@@376) $generated@@66)) (= (type $generated@@377) $generated@@66)) (= (type $generated@@378) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@375 ($generated@@372 $generated@@376 $generated@@377) $generated@@378) (forall (($generated@@379 T@U) ) (!  (=> (and (= (type $generated@@379) $generated@@147) ($generated@@0 ($generated@@83 ($generated@@269 $generated@@375) $generated@@379))) (and ($generated@@238 ($generated@@83 ($generated@@345 $generated@@375) $generated@@379) $generated@@377 $generated@@378) ($generated@@238 $generated@@379 $generated@@376 $generated@@378)))
 :pattern ( ($generated@@83 ($generated@@345 $generated@@375) $generated@@379))
 :pattern ( ($generated@@83 ($generated@@269 $generated@@375) $generated@@379))
))))
 :pattern ( ($generated@@76 $generated@@375 ($generated@@372 $generated@@376 $generated@@377) $generated@@378))
)))
(assert (forall (($generated@@381 T@U) ($generated@@382 T@U) ) (! (= (type ($generated@@380 $generated@@381 $generated@@382)) $generated@@66)
 :pattern ( ($generated@@380 $generated@@381 $generated@@382))
)))
(assert (forall (($generated@@383 T@U) ($generated@@384 T@U) ($generated@@385 T@U) ($generated@@386 T@U) ) (!  (=> (and (and (and (= (type $generated@@383) ($generated@@289 $generated@@147 $generated@@147)) (= (type $generated@@384) $generated@@66)) (= (type $generated@@385) $generated@@66)) (= (type $generated@@386) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@383 ($generated@@380 $generated@@384 $generated@@385) $generated@@386) (forall (($generated@@387 T@U) ) (!  (=> (and (= (type $generated@@387) $generated@@147) ($generated@@0 ($generated@@83 ($generated@@287 $generated@@383) $generated@@387))) (and ($generated@@238 ($generated@@83 ($generated@@355 $generated@@383) $generated@@387) $generated@@385 $generated@@386) ($generated@@238 $generated@@387 $generated@@384 $generated@@386)))
 :pattern ( ($generated@@83 ($generated@@355 $generated@@383) $generated@@387))
 :pattern ( ($generated@@83 ($generated@@287 $generated@@383) $generated@@387))
))))
 :pattern ( ($generated@@76 $generated@@383 ($generated@@380 $generated@@384 $generated@@385) $generated@@386))
)))
(assert (forall (($generated@@389 T@T) ) (! (= (type ($generated@@388 $generated@@389)) ($generated@@78 $generated@@389 $generated@@4))
 :pattern ( ($generated@@388 $generated@@389))
)))
(assert (forall (($generated@@390 T@U) ) (! (let (($generated@@391 ($generated@@291 (type $generated@@390))))
(let (($generated@@392 ($generated@@290 (type $generated@@390))))
 (=> (= (type $generated@@390) ($generated@@289 $generated@@392 $generated@@391)) (= (= $generated@@390 ($generated@@288 $generated@@392 $generated@@391)) (= ($generated@@287 $generated@@390) ($generated@@388 $generated@@392))))))
 :pattern ( ($generated@@287 $generated@@390))
)))
(assert (forall (($generated@@393 T@U) ) (! (let (($generated@@394 ($generated@@291 (type $generated@@393))))
(let (($generated@@395 ($generated@@290 (type $generated@@393))))
 (=> (= (type $generated@@393) ($generated@@289 $generated@@395 $generated@@394)) (= (= $generated@@393 ($generated@@288 $generated@@395 $generated@@394)) (= ($generated@@323 $generated@@393) ($generated@@388 $generated@@394))))))
 :pattern ( ($generated@@323 $generated@@393))
)))
(assert (forall (($generated@@396 T@U) ) (! (let (($generated@@397 ($generated@@291 (type $generated@@396))))
(let (($generated@@398 ($generated@@290 (type $generated@@396))))
 (=> (= (type $generated@@396) ($generated@@289 $generated@@398 $generated@@397)) (= (= $generated@@396 ($generated@@288 $generated@@398 $generated@@397)) (= ($generated@@354 $generated@@396) ($generated@@388 $generated@@147))))))
 :pattern ( ($generated@@354 $generated@@396))
)))
(assert (forall (($generated@@399 T@U) ) (! (let (($generated@@400 ($generated@@273 (type $generated@@399))))
(let (($generated@@401 ($generated@@272 (type $generated@@399))))
 (=> (= (type $generated@@399) ($generated@@271 $generated@@401 $generated@@400)) (or (= $generated@@399 ($generated@@270 $generated@@401 $generated@@400)) (exists (($generated@@402 T@U) ($generated@@403 T@U) ) (!  (and (and (= (type $generated@@402) $generated@@147) (= (type $generated@@403) $generated@@147)) ($generated@@0 ($generated@@83 ($generated@@343 $generated@@399) ($generated@@258 ($generated@@213 $generated@@402 $generated@@403)))))
 :no-pattern (type $generated@@402)
 :no-pattern (type $generated@@403)
 :no-pattern ($generated $generated@@402)
 :no-pattern ($generated@@0 $generated@@402)
 :no-pattern ($generated $generated@@403)
 :no-pattern ($generated@@0 $generated@@403)
))))))
 :pattern ( ($generated@@343 $generated@@399))
)))
(assert (forall (($generated@@404 T@U) ) (! (let (($generated@@405 ($generated@@291 (type $generated@@404))))
(let (($generated@@406 ($generated@@290 (type $generated@@404))))
 (=> (= (type $generated@@404) ($generated@@289 $generated@@406 $generated@@405)) (or (= $generated@@404 ($generated@@288 $generated@@406 $generated@@405)) (exists (($generated@@407 T@U) ($generated@@408 T@U) ) (!  (and (and (= (type $generated@@407) $generated@@147) (= (type $generated@@408) $generated@@147)) ($generated@@0 ($generated@@83 ($generated@@354 $generated@@404) ($generated@@258 ($generated@@213 $generated@@407 $generated@@408)))))
 :no-pattern (type $generated@@407)
 :no-pattern (type $generated@@408)
 :no-pattern ($generated $generated@@407)
 :no-pattern ($generated@@0 $generated@@407)
 :no-pattern ($generated $generated@@408)
 :no-pattern ($generated@@0 $generated@@408)
))))))
 :pattern ( ($generated@@354 $generated@@404))
)))
(assert (forall (($generated@@409 T@U) ) (!  (=> (and (= (type $generated@@409) $generated@@147) ($generated@@214 $generated@@409 $generated@@46)) (and (= ($generated@@258 ($generated@@344 $generated@@2 $generated@@409)) $generated@@409) ($generated@@134 ($generated@@344 $generated@@2 $generated@@409) $generated@@46)))
 :pattern ( ($generated@@214 $generated@@409 $generated@@46))
)))
(assert (forall (($generated@@410 T@U) ) (!  (=> (and (= (type $generated@@410) $generated@@147) ($generated@@214 $generated@@410 $generated@@47)) (and (= ($generated@@258 ($generated@@344 $generated@@3 $generated@@410)) $generated@@410) ($generated@@134 ($generated@@344 $generated@@3 $generated@@410) $generated@@47)))
 :pattern ( ($generated@@214 $generated@@410 $generated@@47))
)))
(assert (forall (($generated@@411 T@U) ) (!  (=> (and (= (type $generated@@411) $generated@@147) ($generated@@214 $generated@@411 $generated@@44)) (and (= ($generated@@258 ($generated@@344 $generated@@4 $generated@@411)) $generated@@411) ($generated@@134 ($generated@@344 $generated@@4 $generated@@411) $generated@@44)))
 :pattern ( ($generated@@214 $generated@@411 $generated@@44))
)))
(assert (= ($generated@@1 $generated@@412) 20))
(assert (forall (($generated@@413 T@U) ) (!  (=> (and (= (type $generated@@413) $generated@@147) ($generated@@214 $generated@@413 $generated@@45)) (and (= ($generated@@258 ($generated@@344 $generated@@412 $generated@@413)) $generated@@413) ($generated@@134 ($generated@@344 $generated@@412 $generated@@413) $generated@@45)))
 :pattern ( ($generated@@214 $generated@@413 $generated@@45))
)))
(assert (forall (($generated@@414 T@U) ($generated@@415 T@U) ) (!  (=> (= (type $generated@@415) $generated@@66) (= ($generated@@214 ($generated@@258 $generated@@414) $generated@@415) ($generated@@134 $generated@@414 $generated@@415)))
 :pattern ( ($generated@@214 ($generated@@258 $generated@@414) $generated@@415))
)))
(assert (forall (($generated@@416 T@U) ) (! (let (($generated@@417 ($generated@@81 (type $generated@@416))))
 (=> (= (type $generated@@416) ($generated@@78 $generated@@417 $generated@@2)) (<= 0 ($generated@@263 $generated@@416))))
 :pattern ( ($generated@@263 $generated@@416))
)))
(assert (forall (($generated@@418 T@U) ) (! (let (($generated@@419 ($generated@@253 (type $generated@@418))))
 (=> (= (type $generated@@418) ($generated@@252 $generated@@419)) (<= 0 ($generated@@251 $generated@@418))))
 :pattern ( ($generated@@251 $generated@@418))
)))
(assert (forall (($generated@@421 T@U) ) (! (= (type ($generated@@420 $generated@@421)) $generated@@66)
 :pattern ( ($generated@@420 $generated@@421))
)))
(assert (forall (($generated@@422 T@U) ($generated@@423 T@U) ) (!  (=> (and (= (type $generated@@422) $generated@@66) (= (type $generated@@423) $generated@@66)) (= ($generated@@420 ($generated@@372 $generated@@422 $generated@@423)) $generated@@422))
 :pattern ( ($generated@@372 $generated@@422 $generated@@423))
)))
(assert (forall (($generated@@425 T@U) ) (! (= (type ($generated@@424 $generated@@425)) $generated@@66)
 :pattern ( ($generated@@424 $generated@@425))
)))
(assert (forall (($generated@@426 T@U) ($generated@@427 T@U) ) (!  (=> (and (= (type $generated@@426) $generated@@66) (= (type $generated@@427) $generated@@66)) (= ($generated@@424 ($generated@@372 $generated@@426 $generated@@427)) $generated@@427))
 :pattern ( ($generated@@372 $generated@@426 $generated@@427))
)))
(assert (forall (($generated@@428 T@U) ($generated@@429 T@U) ) (!  (=> (and (= (type $generated@@428) $generated@@66) (= (type $generated@@429) $generated@@66)) (= ($generated@@74 ($generated@@372 $generated@@428 $generated@@429)) $generated@@58))
 :pattern ( ($generated@@372 $generated@@428 $generated@@429))
)))
(assert (forall (($generated@@431 T@U) ) (! (= (type ($generated@@430 $generated@@431)) $generated@@66)
 :pattern ( ($generated@@430 $generated@@431))
)))
(assert (forall (($generated@@432 T@U) ($generated@@433 T@U) ) (!  (=> (and (= (type $generated@@432) $generated@@66) (= (type $generated@@433) $generated@@66)) (= ($generated@@430 ($generated@@380 $generated@@432 $generated@@433)) $generated@@432))
 :pattern ( ($generated@@380 $generated@@432 $generated@@433))
)))
(assert (forall (($generated@@435 T@U) ) (! (= (type ($generated@@434 $generated@@435)) $generated@@66)
 :pattern ( ($generated@@434 $generated@@435))
)))
(assert (forall (($generated@@436 T@U) ($generated@@437 T@U) ) (!  (=> (and (= (type $generated@@436) $generated@@66) (= (type $generated@@437) $generated@@66)) (= ($generated@@434 ($generated@@380 $generated@@436 $generated@@437)) $generated@@437))
 :pattern ( ($generated@@380 $generated@@436 $generated@@437))
)))
(assert (forall (($generated@@438 T@U) ($generated@@439 T@U) ) (!  (=> (and (= (type $generated@@438) $generated@@66) (= (type $generated@@439) $generated@@66)) (= ($generated@@74 ($generated@@380 $generated@@438 $generated@@439)) $generated@@59))
 :pattern ( ($generated@@380 $generated@@438 $generated@@439))
)))
(assert (forall (($generated@@440 T@U) ($generated@@441 T@U) ) (!  (=> (and (= (type $generated@@440) $generated@@147) (= (type $generated@@441) $generated@@147)) (= ($generated@@244 ($generated@@213 $generated@@440 $generated@@441)) $generated@@61))
 :pattern ( ($generated@@213 $generated@@440 $generated@@441))
)))
(assert (forall (($generated@@443 T@U) ) (! (= (type ($generated@@442 $generated@@443)) $generated@@66)
 :pattern ( ($generated@@442 $generated@@443))
)))
(assert (forall (($generated@@444 T@U) ($generated@@445 T@U) ) (!  (=> (and (= (type $generated@@444) $generated@@66) (= (type $generated@@445) $generated@@66)) (= ($generated@@442 ($generated@@137 $generated@@444 $generated@@445)) $generated@@444))
 :pattern ( ($generated@@137 $generated@@444 $generated@@445))
)))
(assert (forall (($generated@@447 T@U) ) (! (= (type ($generated@@446 $generated@@447)) $generated@@66)
 :pattern ( ($generated@@446 $generated@@447))
)))
(assert (forall (($generated@@448 T@U) ($generated@@449 T@U) ) (!  (=> (and (= (type $generated@@448) $generated@@66) (= (type $generated@@449) $generated@@66)) (= ($generated@@446 ($generated@@137 $generated@@448 $generated@@449)) $generated@@449))
 :pattern ( ($generated@@137 $generated@@448 $generated@@449))
)))
(assert (forall (($generated@@450 T@U) ($generated@@451 T@U) ) (!  (=> (and (= (type $generated@@450) $generated@@147) (= (type $generated@@451) $generated@@147)) (= ($generated@@145 ($generated@@213 $generated@@450 $generated@@451)) $generated@@450))
 :pattern ( ($generated@@213 $generated@@450 $generated@@451))
)))
(assert (forall (($generated@@452 T@U) ($generated@@453 T@U) ) (!  (=> (and (= (type $generated@@452) $generated@@147) (= (type $generated@@453) $generated@@147)) (= ($generated@@146 ($generated@@213 $generated@@452 $generated@@453)) $generated@@453))
 :pattern ( ($generated@@213 $generated@@452 $generated@@453))
)))
(assert  (and (forall (($generated@@456 T@U) ) (! (= (type ($generated@@454 $generated@@456)) $generated@@66)
 :pattern ( ($generated@@454 $generated@@456))
)) (forall (($generated@@457 T@U) ($generated@@458 Int) ) (! (let (($generated@@459 ($generated@@253 (type $generated@@457))))
(= (type ($generated@@455 $generated@@457 $generated@@458)) $generated@@459))
 :pattern ( ($generated@@455 $generated@@457 $generated@@458))
))))
(assert (forall (($generated@@460 T@U) ($generated@@461 T@U) ($generated@@462 T@U) ) (!  (=> (and (and (= (type $generated@@460) ($generated@@252 $generated@@147)) (= (type $generated@@461) $generated@@66)) (= (type $generated@@462) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@460 ($generated@@454 $generated@@461) $generated@@462) (forall (($generated@@463 Int) ) (!  (=> (and (<= 0 $generated@@463) (< $generated@@463 ($generated@@251 $generated@@460))) ($generated@@238 ($generated@@455 $generated@@460 $generated@@463) $generated@@461 $generated@@462))
 :pattern ( ($generated@@455 $generated@@460 $generated@@463))
))))
 :pattern ( ($generated@@76 $generated@@460 ($generated@@454 $generated@@461) $generated@@462))
)))
(assert (forall (($generated@@465 Int) ) (! (= ($generated@@464 ($generated@@77 $generated@@465)) $generated@@465)
 :pattern ( ($generated@@77 $generated@@465))
)))
(assert (forall (($generated@@467 T@U) ) (! (= (type ($generated@@466 $generated@@467)) $generated@@66)
 :pattern ( ($generated@@466 $generated@@467))
)))
(assert (forall (($generated@@468 T@U) ) (!  (=> (= (type $generated@@468) $generated@@66) (= ($generated@@466 ($generated@@223 $generated@@468)) $generated@@468))
 :pattern ( ($generated@@223 $generated@@468))
)))
(assert (forall (($generated@@469 T@U) ) (!  (=> (= (type $generated@@469) $generated@@66) (= ($generated@@74 ($generated@@223 $generated@@469)) $generated@@54))
 :pattern ( ($generated@@223 $generated@@469))
)))
(assert (forall (($generated@@471 T@U) ) (! (= (type ($generated@@470 $generated@@471)) $generated@@66)
 :pattern ( ($generated@@470 $generated@@471))
)))
(assert (forall (($generated@@472 T@U) ) (!  (=> (= (type $generated@@472) $generated@@66) (= ($generated@@470 ($generated@@228 $generated@@472)) $generated@@472))
 :pattern ( ($generated@@228 $generated@@472))
)))
(assert (forall (($generated@@473 T@U) ) (!  (=> (= (type $generated@@473) $generated@@66) (= ($generated@@74 ($generated@@228 $generated@@473)) $generated@@55))
 :pattern ( ($generated@@228 $generated@@473))
)))
(assert (forall (($generated@@475 T@U) ) (! (= (type ($generated@@474 $generated@@475)) $generated@@66)
 :pattern ( ($generated@@474 $generated@@475))
)))
(assert (forall (($generated@@476 T@U) ) (!  (=> (= (type $generated@@476) $generated@@66) (= ($generated@@474 ($generated@@152 $generated@@476)) $generated@@476))
 :pattern ( ($generated@@152 $generated@@476))
)))
(assert (forall (($generated@@477 T@U) ) (!  (=> (= (type $generated@@477) $generated@@66) (= ($generated@@74 ($generated@@152 $generated@@477)) $generated@@56))
 :pattern ( ($generated@@152 $generated@@477))
)))
(assert (forall (($generated@@479 T@U) ) (! (= (type ($generated@@478 $generated@@479)) $generated@@66)
 :pattern ( ($generated@@478 $generated@@479))
)))
(assert (forall (($generated@@480 T@U) ) (!  (=> (= (type $generated@@480) $generated@@66) (= ($generated@@478 ($generated@@454 $generated@@480)) $generated@@480))
 :pattern ( ($generated@@454 $generated@@480))
)))
(assert (forall (($generated@@481 T@U) ) (!  (=> (= (type $generated@@481) $generated@@66) (= ($generated@@74 ($generated@@454 $generated@@481)) $generated@@57))
 :pattern ( ($generated@@454 $generated@@481))
)))
(assert (forall (($generated@@482 T@U) ) (! (let (($generated@@483 (type $generated@@482)))
(= ($generated@@344 $generated@@483 ($generated@@258 $generated@@482)) $generated@@482))
 :pattern ( ($generated@@258 $generated@@482))
)))
(assert (forall (($generated@@484 T@U) ($generated@@485 T@U) ($generated@@486 T@U) ) (!  (=> (and (and (= (type $generated@@484) ($generated@@271 $generated@@147 $generated@@147)) (= (type $generated@@485) $generated@@66)) (= (type $generated@@486) $generated@@66)) (= ($generated@@134 $generated@@484 ($generated@@372 $generated@@485 $generated@@486)) (forall (($generated@@487 T@U) ) (!  (=> (and (= (type $generated@@487) $generated@@147) ($generated@@0 ($generated@@83 ($generated@@269 $generated@@484) $generated@@487))) (and ($generated@@214 ($generated@@83 ($generated@@345 $generated@@484) $generated@@487) $generated@@486) ($generated@@214 $generated@@487 $generated@@485)))
 :pattern ( ($generated@@83 ($generated@@345 $generated@@484) $generated@@487))
 :pattern ( ($generated@@83 ($generated@@269 $generated@@484) $generated@@487))
))))
 :pattern ( ($generated@@134 $generated@@484 ($generated@@372 $generated@@485 $generated@@486)))
)))
(assert (forall (($generated@@488 T@U) ($generated@@489 T@U) ($generated@@490 T@U) ) (!  (=> (and (and (= (type $generated@@488) ($generated@@289 $generated@@147 $generated@@147)) (= (type $generated@@489) $generated@@66)) (= (type $generated@@490) $generated@@66)) (= ($generated@@134 $generated@@488 ($generated@@380 $generated@@489 $generated@@490)) (forall (($generated@@491 T@U) ) (!  (=> (and (= (type $generated@@491) $generated@@147) ($generated@@0 ($generated@@83 ($generated@@287 $generated@@488) $generated@@491))) (and ($generated@@214 ($generated@@83 ($generated@@355 $generated@@488) $generated@@491) $generated@@490) ($generated@@214 $generated@@491 $generated@@489)))
 :pattern ( ($generated@@83 ($generated@@355 $generated@@488) $generated@@491))
 :pattern ( ($generated@@83 ($generated@@287 $generated@@488) $generated@@491))
))))
 :pattern ( ($generated@@134 $generated@@488 ($generated@@380 $generated@@489 $generated@@490)))
)))
(assert (forall (($generated@@494 T@U) ($generated@@495 T@U) ) (!  (=> (and (= (type $generated@@494) $generated@@147) (= (type $generated@@495) $generated@@147)) (< ($generated@@492 $generated@@494) ($generated@@493 ($generated@@213 $generated@@494 $generated@@495))))
 :pattern ( ($generated@@213 $generated@@494 $generated@@495))
)))
(assert (forall (($generated@@496 T@U) ($generated@@497 T@U) ) (!  (=> (and (= (type $generated@@496) $generated@@147) (= (type $generated@@497) $generated@@147)) (< ($generated@@492 $generated@@497) ($generated@@493 ($generated@@213 $generated@@496 $generated@@497))))
 :pattern ( ($generated@@213 $generated@@496 $generated@@497))
)))
(assert (forall (($generated@@498 T@U) ($generated@@499 T@U) ($generated@@500 T@U) ) (!  (=> (and (and (and (= (type $generated@@498) $generated@@147) (= (type $generated@@499) $generated@@66)) (= (type $generated@@500) $generated@@66)) ($generated@@214 $generated@@498 ($generated@@372 $generated@@499 $generated@@500))) (and (= ($generated@@258 ($generated@@344 ($generated@@271 $generated@@147 $generated@@147) $generated@@498)) $generated@@498) ($generated@@134 ($generated@@344 ($generated@@271 $generated@@147 $generated@@147) $generated@@498) ($generated@@372 $generated@@499 $generated@@500))))
 :pattern ( ($generated@@214 $generated@@498 ($generated@@372 $generated@@499 $generated@@500)))
)))
(assert (forall (($generated@@501 T@U) ($generated@@502 T@U) ($generated@@503 T@U) ) (!  (=> (and (and (and (= (type $generated@@501) $generated@@147) (= (type $generated@@502) $generated@@66)) (= (type $generated@@503) $generated@@66)) ($generated@@214 $generated@@501 ($generated@@380 $generated@@502 $generated@@503))) (and (= ($generated@@258 ($generated@@344 ($generated@@289 $generated@@147 $generated@@147) $generated@@501)) $generated@@501) ($generated@@134 ($generated@@344 ($generated@@289 $generated@@147 $generated@@147) $generated@@501) ($generated@@380 $generated@@502 $generated@@503))))
 :pattern ( ($generated@@214 $generated@@501 ($generated@@380 $generated@@502 $generated@@503)))
)))
(assert (forall (($generated@@504 T@U) ($generated@@505 T@U) ($generated@@506 T@U) ) (!  (=> (and (and (and (= (type $generated@@504) $generated@@66) (= (type $generated@@505) $generated@@66)) (= (type $generated@@506) $generated@@147)) ($generated@@214 $generated@@506 ($generated@@137 $generated@@504 $generated@@505))) (and (= ($generated@@258 ($generated@@344 $generated@@138 $generated@@506)) $generated@@506) ($generated@@134 ($generated@@344 $generated@@138 $generated@@506) ($generated@@137 $generated@@504 $generated@@505))))
 :pattern ( ($generated@@214 $generated@@506 ($generated@@137 $generated@@504 $generated@@505)))
)))
(assert (forall (($generated@@507 T@U) ) (! (let (($generated@@508 (type $generated@@507)))
 (not ($generated@@0 ($generated@@83 ($generated@@388 $generated@@508) $generated@@507))))
 :pattern ( (let (($generated@@508 (type $generated@@507)))
($generated@@83 ($generated@@388 $generated@@508) $generated@@507)))
)))
(assert (forall (($generated@@510 T@U) ) (! (= (type ($generated@@509 $generated@@510)) $generated@@71)
 :pattern ( ($generated@@509 $generated@@510))
)))
(assert (forall (($generated@@511 T@U) ($generated@@512 T@U) ) (!  (=> (and (= (type $generated@@511) $generated@@66) (= (type $generated@@512) $generated@@66)) (and (= ($generated@@74 ($generated@@137 $generated@@511 $generated@@512)) $generated@@62) (= ($generated@@509 ($generated@@137 $generated@@511 $generated@@512)) $generated@@64)))
 :pattern ( ($generated@@137 $generated@@511 $generated@@512))
)))
(assert (forall (($generated@@513 T@U) ) (!  (=> (= (type $generated@@513) $generated@@138) (= ($generated@@492 ($generated@@258 $generated@@513)) ($generated@@493 $generated@@513)))
 :pattern ( ($generated@@492 ($generated@@258 $generated@@513)))
)))
(assert (forall (($generated@@514 T@U) ) (!  (=> (and (= (type $generated@@514) $generated@@147) ($generated@@214 $generated@@514 ($generated@@77 0))) (and (= ($generated@@258 ($generated@@344 $generated@@2 $generated@@514)) $generated@@514) ($generated@@134 ($generated@@344 ($generated@@78 $generated@@147 $generated@@4) $generated@@514) ($generated@@77 0))))
 :pattern ( ($generated@@214 $generated@@514 ($generated@@77 0)))
)))
(assert (forall (($generated@@515 T@U) ($generated@@516 T@U) ) (!  (=> (and (and (= (type $generated@@515) $generated@@147) (= (type $generated@@516) $generated@@66)) ($generated@@214 $generated@@515 ($generated@@223 $generated@@516))) (and (= ($generated@@258 ($generated@@344 ($generated@@78 $generated@@147 $generated@@4) $generated@@515)) $generated@@515) ($generated@@134 ($generated@@344 ($generated@@78 $generated@@147 $generated@@4) $generated@@515) ($generated@@223 $generated@@516))))
 :pattern ( ($generated@@214 $generated@@515 ($generated@@223 $generated@@516)))
)))
(assert (forall (($generated@@517 T@U) ($generated@@518 T@U) ) (!  (=> (and (and (= (type $generated@@517) $generated@@147) (= (type $generated@@518) $generated@@66)) ($generated@@214 $generated@@517 ($generated@@228 $generated@@518))) (and (= ($generated@@258 ($generated@@344 ($generated@@78 $generated@@147 $generated@@4) $generated@@517)) $generated@@517) ($generated@@134 ($generated@@344 ($generated@@78 $generated@@147 $generated@@4) $generated@@517) ($generated@@228 $generated@@518))))
 :pattern ( ($generated@@214 $generated@@517 ($generated@@228 $generated@@518)))
)))
(assert (forall (($generated@@519 T@U) ($generated@@520 T@U) ) (!  (=> (and (and (= (type $generated@@519) $generated@@147) (= (type $generated@@520) $generated@@66)) ($generated@@214 $generated@@519 ($generated@@152 $generated@@520))) (and (= ($generated@@258 ($generated@@344 ($generated@@78 $generated@@147 $generated@@2) $generated@@519)) $generated@@519) ($generated@@134 ($generated@@344 ($generated@@78 $generated@@147 $generated@@2) $generated@@519) ($generated@@152 $generated@@520))))
 :pattern ( ($generated@@214 $generated@@519 ($generated@@152 $generated@@520)))
)))
(assert (forall (($generated@@521 T@U) ($generated@@522 T@U) ) (!  (=> (and (and (= (type $generated@@521) $generated@@147) (= (type $generated@@522) $generated@@66)) ($generated@@214 $generated@@521 ($generated@@454 $generated@@522))) (and (= ($generated@@258 ($generated@@344 ($generated@@252 $generated@@147) $generated@@521)) $generated@@521) ($generated@@134 ($generated@@344 ($generated@@252 $generated@@147) $generated@@521) ($generated@@454 $generated@@522))))
 :pattern ( ($generated@@214 $generated@@521 ($generated@@454 $generated@@522)))
)))
(assert (= (type $generated@@523) $generated@@66))
(assert (= ($generated@@74 $generated@@523) $generated@@63))
(assert (= ($generated@@509 $generated@@523) $generated@@65))
(assert (forall (($generated@@524 T@U) ($generated@@525 T@U) ($generated@@526 T@U) ) (!  (=> (and (and (= (type $generated@@524) ($generated@@78 $generated@@147 $generated@@2)) (= (type $generated@@525) $generated@@66)) (= (type $generated@@526) ($generated@@78 $generated@@79 $generated@@80))) (= ($generated@@76 $generated@@524 ($generated@@152 $generated@@525) $generated@@526) (forall (($generated@@527 T@U) ) (!  (=> (and (= (type $generated@@527) $generated@@147) (< 0 ($generated ($generated@@83 $generated@@524 $generated@@527)))) ($generated@@238 $generated@@527 $generated@@525 $generated@@526))
 :pattern ( ($generated@@83 $generated@@524 $generated@@527))
))))
 :pattern ( ($generated@@76 $generated@@524 ($generated@@152 $generated@@525) $generated@@526))
)))
(assert (forall (($generated@@528 T@U) ($generated@@529 T@U) ($generated@@530 T@U) ) (!  (=> (and (and (and (= (type $generated@@528) $generated@@138) (= (type $generated@@529) $generated@@66)) (= (type $generated@@530) ($generated@@78 $generated@@79 $generated@@80))) (and ($generated@@237 $generated@@530) (and ($generated@@136 $generated@@528) (exists (($generated@@531 T@U) ) (!  (and (= (type $generated@@531) $generated@@66) ($generated@@76 $generated@@528 ($generated@@137 $generated@@529 $generated@@531) $generated@@530))
 :pattern ( ($generated@@76 $generated@@528 ($generated@@137 $generated@@529 $generated@@531) $generated@@530))
))))) ($generated@@238 ($generated@@145 $generated@@528) $generated@@529 $generated@@530))
 :pattern ( ($generated@@238 ($generated@@145 $generated@@528) $generated@@529 $generated@@530))
)))
(assert (forall (($generated@@532 T@U) ($generated@@533 T@U) ($generated@@534 T@U) ) (!  (=> (and (and (and (= (type $generated@@532) $generated@@138) (= (type $generated@@533) $generated@@66)) (= (type $generated@@534) ($generated@@78 $generated@@79 $generated@@80))) (and ($generated@@237 $generated@@534) (and ($generated@@136 $generated@@532) (exists (($generated@@535 T@U) ) (!  (and (= (type $generated@@535) $generated@@66) ($generated@@76 $generated@@532 ($generated@@137 $generated@@535 $generated@@533) $generated@@534))
 :pattern ( ($generated@@76 $generated@@532 ($generated@@137 $generated@@535 $generated@@533) $generated@@534))
))))) ($generated@@238 ($generated@@146 $generated@@532) $generated@@533 $generated@@534))
 :pattern ( ($generated@@238 ($generated@@146 $generated@@532) $generated@@533 $generated@@534))
)))
(assert (forall (($generated@@536 T@U) ($generated@@537 T@U) ) (!  (=> (and (= (type $generated@@536) $generated@@147) (= (type $generated@@537) $generated@@147)) (= ($generated@@213 ($generated@@233 $generated@@536) ($generated@@233 $generated@@537)) ($generated@@233 ($generated@@213 $generated@@536 $generated@@537))))
 :pattern ( ($generated@@213 ($generated@@233 $generated@@536) ($generated@@233 $generated@@537)))
)))
(assert (forall (($generated@@538 T@U) ) (! (= ($generated@@258 ($generated@@233 $generated@@538)) ($generated@@233 ($generated@@258 $generated@@538)))
 :pattern ( ($generated@@258 ($generated@@233 $generated@@538)))
)))
(assert (forall (($generated@@539 T@U) ) (! (let (($generated@@540 ($generated@@253 (type $generated@@539))))
 (=> (and (= (type $generated@@539) ($generated@@252 $generated@@540)) (= ($generated@@251 $generated@@539) 0)) (= $generated@@539 ($generated@@250 $generated@@540))))
 :pattern ( ($generated@@251 $generated@@539))
)))
(assert (forall (($generated@@541 T@U) ($generated@@542 T@U) ($generated@@543 T@U) ) (! (let (($generated@@544 (type $generated@@542)))
 (=> (and (and (= (type $generated@@541) ($generated@@78 $generated@@544 $generated@@2)) (= (type $generated@@543) $generated@@2)) (<= 0 ($generated $generated@@543))) (= ($generated@@263 ($generated@@84 $generated@@541 $generated@@542 $generated@@543)) (+ (- ($generated@@263 $generated@@541) ($generated ($generated@@83 $generated@@541 $generated@@542))) ($generated $generated@@543)))))
 :pattern ( ($generated@@263 ($generated@@84 $generated@@541 $generated@@542 $generated@@543)))
)))
(assert (forall (($generated@@545 T@U) ($generated@@546 T@U) ) (!  (=> (and (= (type $generated@@545) ($generated@@78 $generated@@79 $generated@@80)) (= (type $generated@@546) $generated@@2)) ($generated@@76 $generated@@546 $generated@@46 $generated@@545))
 :pattern ( ($generated@@76 $generated@@546 $generated@@46 $generated@@545))
)))
(assert (forall (($generated@@547 T@U) ($generated@@548 T@U) ) (!  (=> (and (= (type $generated@@547) ($generated@@78 $generated@@79 $generated@@80)) (= (type $generated@@548) $generated@@3)) ($generated@@76 $generated@@548 $generated@@47 $generated@@547))
 :pattern ( ($generated@@76 $generated@@548 $generated@@47 $generated@@547))
)))
(assert (forall (($generated@@549 T@U) ($generated@@550 T@U) ) (!  (=> (and (= (type $generated@@549) ($generated@@78 $generated@@79 $generated@@80)) (= (type $generated@@550) $generated@@4)) ($generated@@76 $generated@@550 $generated@@44 $generated@@549))
 :pattern ( ($generated@@76 $generated@@550 $generated@@44 $generated@@549))
)))
(assert (forall (($generated@@551 T@U) ($generated@@552 T@U) ) (!  (=> (and (= (type $generated@@551) ($generated@@78 $generated@@79 $generated@@80)) (= (type $generated@@552) $generated@@412)) ($generated@@76 $generated@@552 $generated@@45 $generated@@551))
 :pattern ( ($generated@@76 $generated@@552 $generated@@45 $generated@@551))
)))
(assert (forall (($generated@@553 T@U) ($generated@@554 T@U) ) (!  (=> (and (= (type $generated@@553) ($generated@@78 $generated@@79 $generated@@80)) (= (type $generated@@554) $generated@@147)) ($generated@@76 $generated@@554 $generated@@48 $generated@@553))
 :pattern ( ($generated@@76 $generated@@554 $generated@@48 $generated@@553))
)))
(assert (forall (($generated@@555 T@U) ($generated@@556 T@U) ) (!  (=> (and (= (type $generated@@555) ($generated@@252 $generated@@147)) (= (type $generated@@556) $generated@@66)) (= ($generated@@134 $generated@@555 ($generated@@454 $generated@@556)) (forall (($generated@@557 Int) ) (!  (=> (and (<= 0 $generated@@557) (< $generated@@557 ($generated@@251 $generated@@555))) ($generated@@214 ($generated@@455 $generated@@555 $generated@@557) $generated@@556))
 :pattern ( ($generated@@455 $generated@@555 $generated@@557))
))))
 :pattern ( ($generated@@134 $generated@@555 ($generated@@454 $generated@@556)))
)))
(assert (forall (($generated@@559 T@U) ($generated@@560 Int) ) (!  (=> (= (type $generated@@559) ($generated@@252 $generated@@147)) (=> (and (<= 0 $generated@@560) (< $generated@@560 ($generated@@251 $generated@@559))) (< ($generated@@493 ($generated@@344 $generated@@138 ($generated@@455 $generated@@559 $generated@@560))) ($generated@@558 $generated@@559))))
 :pattern ( ($generated@@493 ($generated@@344 $generated@@138 ($generated@@455 $generated@@559 $generated@@560))))
)))
(assert (forall (($generated@@561 T@U) ($generated@@562 T@U) ($generated@@563 T@U) ) (!  (=> (and (and (and (= (type $generated@@561) ($generated@@271 $generated@@147 $generated@@147)) (= (type $generated@@562) $generated@@66)) (= (type $generated@@563) $generated@@66)) ($generated@@134 $generated@@561 ($generated@@372 $generated@@562 $generated@@563))) (and (and ($generated@@134 ($generated@@269 $generated@@561) ($generated@@223 $generated@@562)) ($generated@@134 ($generated@@312 $generated@@561) ($generated@@223 $generated@@563))) ($generated@@134 ($generated@@343 $generated@@561) ($generated@@223 ($generated@@137 $generated@@562 $generated@@563)))))
 :pattern ( ($generated@@134 $generated@@561 ($generated@@372 $generated@@562 $generated@@563)))
)))
(assert (forall (($generated@@564 T@U) ($generated@@565 T@U) ($generated@@566 T@U) ) (!  (=> (and (and (and (= (type $generated@@564) ($generated@@289 $generated@@147 $generated@@147)) (= (type $generated@@565) $generated@@66)) (= (type $generated@@566) $generated@@66)) ($generated@@134 $generated@@564 ($generated@@380 $generated@@565 $generated@@566))) (and (and ($generated@@134 ($generated@@287 $generated@@564) ($generated@@228 $generated@@565)) ($generated@@134 ($generated@@323 $generated@@564) ($generated@@228 $generated@@566))) ($generated@@134 ($generated@@354 $generated@@564) ($generated@@228 ($generated@@137 $generated@@565 $generated@@566)))))
 :pattern ( ($generated@@134 $generated@@564 ($generated@@380 $generated@@565 $generated@@566)))
)))
(assert (forall (($generated@@567 T@U) ) (!  (=> (= (type $generated@@567) $generated@@2) ($generated@@134 $generated@@567 $generated@@46))
 :pattern ( ($generated@@134 $generated@@567 $generated@@46))
)))
(assert (forall (($generated@@568 T@U) ) (!  (=> (= (type $generated@@568) $generated@@3) ($generated@@134 $generated@@568 $generated@@47))
 :pattern ( ($generated@@134 $generated@@568 $generated@@47))
)))
(assert (forall (($generated@@569 T@U) ) (!  (=> (= (type $generated@@569) $generated@@4) ($generated@@134 $generated@@569 $generated@@44))
 :pattern ( ($generated@@134 $generated@@569 $generated@@44))
)))
(assert (forall (($generated@@570 T@U) ) (!  (=> (= (type $generated@@570) $generated@@412) ($generated@@134 $generated@@570 $generated@@45))
 :pattern ( ($generated@@134 $generated@@570 $generated@@45))
)))
(assert (forall (($generated@@571 T@U) ) (!  (=> (= (type $generated@@571) $generated@@147) ($generated@@134 $generated@@571 $generated@@48))
 :pattern ( ($generated@@134 $generated@@571 $generated@@48))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@572 () T@U)
(declare-fun $generated@@573 () T@U)
(declare-fun $generated@@574 () T@U)
(declare-fun $generated@@575 (T@U) Bool)
(declare-fun $generated@@576 () T@U)
(declare-fun $generated@@577 () Int)
(assert  (and (and (and (= (type $generated@@572) ($generated@@159 $generated@@79 $generated@@4)) (= (type $generated@@573) $generated@@79)) (= (type $generated@@574) ($generated@@78 $generated@@79 $generated@@80))) (= (type $generated@@576) $generated@@147)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@578  (=> (and (= $generated@@572 ($generated@@158 $generated@@573 $generated@@574 $generated@@60 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@0 ($generated@@233 ($generated@@11 false))))))
(let (($generated@@579  (=> (and ($generated@@237 $generated@@574) ($generated@@575 $generated@@574)) (=> (and (and ($generated@@214 $generated@@576 $generated@@523) ($generated@@238 $generated@@576 $generated@@523 $generated@@574)) (and (= 1 $generated@@577) (= (ControlFlow 0 3) 2))) $generated@@578))))
$generated@@579)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@166 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ) (= ($generated@@1 ($generated@@47 $generated@@51)) 6)) (forall (($generated@@52 T@T) ) (! (= ($generated@@48 ($generated@@47 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@47 $generated@@52))
))) (= (type $generated@@44) ($generated@@47 $generated@@4))) (= ($generated@@1 $generated@@49) 7)) (= (type $generated@@45) $generated@@49)) (= ($generated@@1 $generated@@50) 8)) (= (type $generated@@46) $generated@@50)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@1 ($generated@@56 $generated@@68 $generated@@69)) 9)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@56 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@61 ($generated@@56 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@56 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (let (($generated@@76 ($generated@@61 (type $generated@@74))))
(= (type ($generated@@59 $generated@@74 $generated@@75)) $generated@@76))
 :pattern ( ($generated@@59 $generated@@74 $generated@@75))
))) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (let (($generated@@80 (type $generated@@79)))
(let (($generated@@81 (type $generated@@78)))
(= (type ($generated@@62 $generated@@77 $generated@@78 $generated@@79)) ($generated@@56 $generated@@81 $generated@@80))))
 :pattern ( ($generated@@62 $generated@@77 $generated@@78 $generated@@79))
))) (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (let (($generated@@85 ($generated@@61 (type $generated@@82))))
 (=> (= (type $generated@@84) $generated@@85) (= ($generated@@59 ($generated@@62 $generated@@82 $generated@@83 $generated@@84) $generated@@83) $generated@@84)))
 :weight 0
))) (and (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@59 ($generated@@62 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@59 $generated@@87 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or true (= ($generated@@59 ($generated@@62 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@59 $generated@@91 $generated@@93)))
 :weight 0
)))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@48 (type $generated@@95))))
(= (type ($generated@@58 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@58 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@57) 10)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@63 $generated@@97 $generated@@98 $generated@@99)) $generated@@57)
 :pattern ( ($generated@@63 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@48 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@58 ($generated@@63 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@58 ($generated@@63 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@58 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@58 ($generated@@63 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@58 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@55) 11)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@112 $generated@@113)) 12))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@65 ($generated@@64 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@64 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@66 ($generated@@64 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@64 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@66 (type $generated@@118))))
(= (type ($generated@@53 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@53 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@64 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@66 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@53 ($generated@@67 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@53 ($generated@@67 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@53 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@53 ($generated@@67 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@53 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@53 ($generated@@67 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@53 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@64 $generated@@55 $generated@@4))
 :pattern ( ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@48 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@55) (= (type $generated@@156) ($generated@@56 $generated@@55 $generated@@57))) (= (type $generated@@157) ($generated@@47 $generated@@4))) (= (type $generated@@159) $generated@@55)) (= (type $generated@@160) ($generated@@47 $generated@@161))) (= ($generated@@0 ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@58 ($generated@@59 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (and (and (forall (($generated@@165 T@U) ) (! (= (type ($generated@@162 $generated@@165)) $generated@@49)
 :pattern ( ($generated@@162 $generated@@165))
)) (= ($generated@@1 $generated@@164) 13)) (= (type $generated@@163) $generated@@164)))
(assert (= ($generated@@162 $generated@@163) $generated@@45))
(assert (forall (($generated@@167 T@U) ) (! (= (type ($generated@@166 $generated@@167)) $generated@@50)
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (= ($generated@@166 $generated@@163) $generated@@46))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Bool)
(declare-fun $generated@@172 () Bool)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 (T@U T@U) Bool)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 (T@U T@U T@U) Bool)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () T@T)
(assert  (and (and (and (and (and (= (type $generated@@168) ($generated@@64 $generated@@55 $generated@@4)) (= (type $generated@@169) $generated@@55)) (= (type $generated@@170) ($generated@@56 $generated@@55 $generated@@57))) (= ($generated@@1 $generated@@180) 14)) (= (type $generated@@176) $generated@@180)) (= (type $generated@@178) $generated@@180)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@181  (=> (= $generated@@168 ($generated@@54 $generated@@169 $generated@@170 $generated@@44 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) $generated@@171) (=> $generated@@171 (=> (= (ControlFlow 0 2) (- 0 1)) $generated@@172))))))
(let (($generated@@182  (=> (and ($generated@@173 $generated@@170) ($generated@@174 $generated@@170)) (=> (and (and (=> $generated@@171 (and ($generated@@175 $generated@@176 $generated@@163) ($generated@@177 $generated@@176 $generated@@163 $generated@@170))) (=> $generated@@172 (and ($generated@@175 $generated@@178 $generated@@163) ($generated@@177 $generated@@178 $generated@@163 $generated@@170)))) (and (= 1 $generated@@179) (= (ControlFlow 0 4) 2))) $generated@@181))))
$generated@@182)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@166 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ) (= ($generated@@1 ($generated@@47 $generated@@51)) 6)) (forall (($generated@@52 T@T) ) (! (= ($generated@@48 ($generated@@47 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@47 $generated@@52))
))) (= (type $generated@@44) ($generated@@47 $generated@@4))) (= ($generated@@1 $generated@@49) 7)) (= (type $generated@@45) $generated@@49)) (= ($generated@@1 $generated@@50) 8)) (= (type $generated@@46) $generated@@50)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@1 ($generated@@56 $generated@@68 $generated@@69)) 9)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@56 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@61 ($generated@@56 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@56 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (let (($generated@@76 ($generated@@61 (type $generated@@74))))
(= (type ($generated@@59 $generated@@74 $generated@@75)) $generated@@76))
 :pattern ( ($generated@@59 $generated@@74 $generated@@75))
))) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (let (($generated@@80 (type $generated@@79)))
(let (($generated@@81 (type $generated@@78)))
(= (type ($generated@@62 $generated@@77 $generated@@78 $generated@@79)) ($generated@@56 $generated@@81 $generated@@80))))
 :pattern ( ($generated@@62 $generated@@77 $generated@@78 $generated@@79))
))) (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (let (($generated@@85 ($generated@@61 (type $generated@@82))))
 (=> (= (type $generated@@84) $generated@@85) (= ($generated@@59 ($generated@@62 $generated@@82 $generated@@83 $generated@@84) $generated@@83) $generated@@84)))
 :weight 0
))) (and (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@59 ($generated@@62 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@59 $generated@@87 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or true (= ($generated@@59 ($generated@@62 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@59 $generated@@91 $generated@@93)))
 :weight 0
)))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@48 (type $generated@@95))))
(= (type ($generated@@58 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@58 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@57) 10)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@63 $generated@@97 $generated@@98 $generated@@99)) $generated@@57)
 :pattern ( ($generated@@63 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@48 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@58 ($generated@@63 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@58 ($generated@@63 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@58 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@58 ($generated@@63 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@58 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@55) 11)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@112 $generated@@113)) 12))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@65 ($generated@@64 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@64 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@66 ($generated@@64 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@64 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@66 (type $generated@@118))))
(= (type ($generated@@53 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@53 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@64 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@66 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@53 ($generated@@67 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@53 ($generated@@67 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@53 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@53 ($generated@@67 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@53 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@53 ($generated@@67 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@53 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@64 $generated@@55 $generated@@4))
 :pattern ( ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@48 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@55) (= (type $generated@@156) ($generated@@56 $generated@@55 $generated@@57))) (= (type $generated@@157) ($generated@@47 $generated@@4))) (= (type $generated@@159) $generated@@55)) (= (type $generated@@160) ($generated@@47 $generated@@161))) (= ($generated@@0 ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@58 ($generated@@59 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (and (and (forall (($generated@@165 T@U) ) (! (= (type ($generated@@162 $generated@@165)) $generated@@49)
 :pattern ( ($generated@@162 $generated@@165))
)) (= ($generated@@1 $generated@@164) 13)) (= (type $generated@@163) $generated@@164)))
(assert (= ($generated@@162 $generated@@163) $generated@@45))
(assert (forall (($generated@@167 T@U) ) (! (= (type ($generated@@166 $generated@@167)) $generated@@50)
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (= ($generated@@166 $generated@@163) $generated@@46))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Bool)
(declare-fun $generated@@172 () Bool)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 (T@U T@U) Bool)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 (T@U T@U T@U) Bool)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () T@T)
(assert  (and (and (and (and (and (= (type $generated@@168) ($generated@@64 $generated@@55 $generated@@4)) (= (type $generated@@169) $generated@@55)) (= (type $generated@@170) ($generated@@56 $generated@@55 $generated@@57))) (= ($generated@@1 $generated@@180) 14)) (= (type $generated@@176) $generated@@180)) (= (type $generated@@178) $generated@@180)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@181  (=> (= $generated@@168 ($generated@@54 $generated@@169 $generated@@170 $generated@@44 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) $generated@@171) (=> $generated@@171 (=> (= (ControlFlow 0 2) (- 0 1)) $generated@@172))))))
(let (($generated@@182  (=> (and ($generated@@173 $generated@@170) ($generated@@174 $generated@@170)) (=> (and (and (=> $generated@@171 (and ($generated@@175 $generated@@176 $generated@@163) ($generated@@177 $generated@@176 $generated@@163 $generated@@170))) (=> $generated@@172 (and ($generated@@175 $generated@@178 $generated@@163) ($generated@@177 $generated@@178 $generated@@163 $generated@@170)))) (and (= 1 $generated@@179) (= (ControlFlow 0 4) 2))) $generated@@181))))
$generated@@182)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@166 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ) (= ($generated@@1 ($generated@@47 $generated@@51)) 6)) (forall (($generated@@52 T@T) ) (! (= ($generated@@48 ($generated@@47 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@47 $generated@@52))
))) (= (type $generated@@44) ($generated@@47 $generated@@4))) (= ($generated@@1 $generated@@49) 7)) (= (type $generated@@45) $generated@@49)) (= ($generated@@1 $generated@@50) 8)) (= (type $generated@@46) $generated@@50)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@1 ($generated@@56 $generated@@68 $generated@@69)) 9)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@56 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@61 ($generated@@56 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@56 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (let (($generated@@76 ($generated@@61 (type $generated@@74))))
(= (type ($generated@@59 $generated@@74 $generated@@75)) $generated@@76))
 :pattern ( ($generated@@59 $generated@@74 $generated@@75))
))) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (let (($generated@@80 (type $generated@@79)))
(let (($generated@@81 (type $generated@@78)))
(= (type ($generated@@62 $generated@@77 $generated@@78 $generated@@79)) ($generated@@56 $generated@@81 $generated@@80))))
 :pattern ( ($generated@@62 $generated@@77 $generated@@78 $generated@@79))
))) (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (let (($generated@@85 ($generated@@61 (type $generated@@82))))
 (=> (= (type $generated@@84) $generated@@85) (= ($generated@@59 ($generated@@62 $generated@@82 $generated@@83 $generated@@84) $generated@@83) $generated@@84)))
 :weight 0
))) (and (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@59 ($generated@@62 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@59 $generated@@87 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or true (= ($generated@@59 ($generated@@62 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@59 $generated@@91 $generated@@93)))
 :weight 0
)))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@48 (type $generated@@95))))
(= (type ($generated@@58 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@58 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@57) 10)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@63 $generated@@97 $generated@@98 $generated@@99)) $generated@@57)
 :pattern ( ($generated@@63 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@48 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@58 ($generated@@63 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@58 ($generated@@63 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@58 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@58 ($generated@@63 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@58 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@55) 11)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@112 $generated@@113)) 12))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@65 ($generated@@64 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@64 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@66 ($generated@@64 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@64 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@66 (type $generated@@118))))
(= (type ($generated@@53 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@53 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@64 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@66 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@53 ($generated@@67 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@53 ($generated@@67 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@53 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@53 ($generated@@67 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@53 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@53 ($generated@@67 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@53 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@64 $generated@@55 $generated@@4))
 :pattern ( ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@48 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@55) (= (type $generated@@156) ($generated@@56 $generated@@55 $generated@@57))) (= (type $generated@@157) ($generated@@47 $generated@@4))) (= (type $generated@@159) $generated@@55)) (= (type $generated@@160) ($generated@@47 $generated@@161))) (= ($generated@@0 ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@58 ($generated@@59 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (and (and (forall (($generated@@165 T@U) ) (! (= (type ($generated@@162 $generated@@165)) $generated@@49)
 :pattern ( ($generated@@162 $generated@@165))
)) (= ($generated@@1 $generated@@164) 13)) (= (type $generated@@163) $generated@@164)))
(assert (= ($generated@@162 $generated@@163) $generated@@45))
(assert (forall (($generated@@167 T@U) ) (! (= (type ($generated@@166 $generated@@167)) $generated@@50)
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (= ($generated@@166 $generated@@163) $generated@@46))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Bool)
(declare-fun $generated@@172 () Bool)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 (T@U T@U) Bool)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 (T@U T@U T@U) Bool)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () T@T)
(assert  (and (and (and (and (and (= (type $generated@@168) ($generated@@64 $generated@@55 $generated@@4)) (= (type $generated@@169) $generated@@55)) (= (type $generated@@170) ($generated@@56 $generated@@55 $generated@@57))) (= ($generated@@1 $generated@@180) 14)) (= (type $generated@@176) $generated@@180)) (= (type $generated@@178) $generated@@180)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@181  (=> (= $generated@@168 ($generated@@54 $generated@@169 $generated@@170 $generated@@44 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) $generated@@171) (=> $generated@@171 (=> (= (ControlFlow 0 2) (- 0 1)) $generated@@172))))))
(let (($generated@@182  (=> (and ($generated@@173 $generated@@170) ($generated@@174 $generated@@170)) (=> (and (and (=> $generated@@171 (and ($generated@@175 $generated@@176 $generated@@163) ($generated@@177 $generated@@176 $generated@@163 $generated@@170))) (=> $generated@@172 (and ($generated@@175 $generated@@178 $generated@@163) ($generated@@177 $generated@@178 $generated@@163 $generated@@170)))) (and (= 1 $generated@@179) (= (ControlFlow 0 4) 2))) $generated@@181))))
$generated@@182)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@166 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ) (= ($generated@@1 ($generated@@47 $generated@@51)) 6)) (forall (($generated@@52 T@T) ) (! (= ($generated@@48 ($generated@@47 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@47 $generated@@52))
))) (= (type $generated@@44) ($generated@@47 $generated@@4))) (= ($generated@@1 $generated@@49) 7)) (= (type $generated@@45) $generated@@49)) (= ($generated@@1 $generated@@50) 8)) (= (type $generated@@46) $generated@@50)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@1 ($generated@@56 $generated@@68 $generated@@69)) 9)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@56 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@61 ($generated@@56 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@56 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (let (($generated@@76 ($generated@@61 (type $generated@@74))))
(= (type ($generated@@59 $generated@@74 $generated@@75)) $generated@@76))
 :pattern ( ($generated@@59 $generated@@74 $generated@@75))
))) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (let (($generated@@80 (type $generated@@79)))
(let (($generated@@81 (type $generated@@78)))
(= (type ($generated@@62 $generated@@77 $generated@@78 $generated@@79)) ($generated@@56 $generated@@81 $generated@@80))))
 :pattern ( ($generated@@62 $generated@@77 $generated@@78 $generated@@79))
))) (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (let (($generated@@85 ($generated@@61 (type $generated@@82))))
 (=> (= (type $generated@@84) $generated@@85) (= ($generated@@59 ($generated@@62 $generated@@82 $generated@@83 $generated@@84) $generated@@83) $generated@@84)))
 :weight 0
))) (and (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@59 ($generated@@62 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@59 $generated@@87 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or true (= ($generated@@59 ($generated@@62 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@59 $generated@@91 $generated@@93)))
 :weight 0
)))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@48 (type $generated@@95))))
(= (type ($generated@@58 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@58 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@57) 10)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@63 $generated@@97 $generated@@98 $generated@@99)) $generated@@57)
 :pattern ( ($generated@@63 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@48 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@58 ($generated@@63 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@58 ($generated@@63 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@58 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@58 ($generated@@63 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@58 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@55) 11)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@112 $generated@@113)) 12))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@65 ($generated@@64 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@64 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@66 ($generated@@64 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@64 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@66 (type $generated@@118))))
(= (type ($generated@@53 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@53 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@64 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@66 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@53 ($generated@@67 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@53 ($generated@@67 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@53 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@53 ($generated@@67 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@53 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@53 ($generated@@67 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@53 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@64 $generated@@55 $generated@@4))
 :pattern ( ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@48 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@55) (= (type $generated@@156) ($generated@@56 $generated@@55 $generated@@57))) (= (type $generated@@157) ($generated@@47 $generated@@4))) (= (type $generated@@159) $generated@@55)) (= (type $generated@@160) ($generated@@47 $generated@@161))) (= ($generated@@0 ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@58 ($generated@@59 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (and (and (forall (($generated@@165 T@U) ) (! (= (type ($generated@@162 $generated@@165)) $generated@@49)
 :pattern ( ($generated@@162 $generated@@165))
)) (= ($generated@@1 $generated@@164) 13)) (= (type $generated@@163) $generated@@164)))
(assert (= ($generated@@162 $generated@@163) $generated@@45))
(assert (forall (($generated@@167 T@U) ) (! (= (type ($generated@@166 $generated@@167)) $generated@@50)
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (= ($generated@@166 $generated@@163) $generated@@46))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Bool)
(declare-fun $generated@@172 () Bool)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 (T@U T@U) Bool)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 (T@U T@U T@U) Bool)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () T@T)
(assert  (and (and (and (and (and (= (type $generated@@168) ($generated@@64 $generated@@55 $generated@@4)) (= (type $generated@@169) $generated@@55)) (= (type $generated@@170) ($generated@@56 $generated@@55 $generated@@57))) (= ($generated@@1 $generated@@180) 14)) (= (type $generated@@176) $generated@@180)) (= (type $generated@@178) $generated@@180)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@181  (=> (= $generated@@168 ($generated@@54 $generated@@169 $generated@@170 $generated@@44 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) $generated@@171) (=> $generated@@171 (=> (= (ControlFlow 0 2) (- 0 1)) $generated@@172))))))
(let (($generated@@182  (=> (and ($generated@@173 $generated@@170) ($generated@@174 $generated@@170)) (=> (and (and (=> $generated@@171 (and ($generated@@175 $generated@@176 $generated@@163) ($generated@@177 $generated@@176 $generated@@163 $generated@@170))) (=> $generated@@172 (and ($generated@@175 $generated@@178 $generated@@163) ($generated@@177 $generated@@178 $generated@@163 $generated@@170)))) (and (= 1 $generated@@179) (= (ControlFlow 0 4) 2))) $generated@@181))))
$generated@@182)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@166 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ) (= ($generated@@1 ($generated@@47 $generated@@51)) 6)) (forall (($generated@@52 T@T) ) (! (= ($generated@@48 ($generated@@47 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@47 $generated@@52))
))) (= (type $generated@@44) ($generated@@47 $generated@@4))) (= ($generated@@1 $generated@@49) 7)) (= (type $generated@@45) $generated@@49)) (= ($generated@@1 $generated@@50) 8)) (= (type $generated@@46) $generated@@50)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@1 ($generated@@56 $generated@@68 $generated@@69)) 9)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@56 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@61 ($generated@@56 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@56 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (let (($generated@@76 ($generated@@61 (type $generated@@74))))
(= (type ($generated@@59 $generated@@74 $generated@@75)) $generated@@76))
 :pattern ( ($generated@@59 $generated@@74 $generated@@75))
))) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (let (($generated@@80 (type $generated@@79)))
(let (($generated@@81 (type $generated@@78)))
(= (type ($generated@@62 $generated@@77 $generated@@78 $generated@@79)) ($generated@@56 $generated@@81 $generated@@80))))
 :pattern ( ($generated@@62 $generated@@77 $generated@@78 $generated@@79))
))) (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (let (($generated@@85 ($generated@@61 (type $generated@@82))))
 (=> (= (type $generated@@84) $generated@@85) (= ($generated@@59 ($generated@@62 $generated@@82 $generated@@83 $generated@@84) $generated@@83) $generated@@84)))
 :weight 0
))) (and (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@59 ($generated@@62 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@59 $generated@@87 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or true (= ($generated@@59 ($generated@@62 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@59 $generated@@91 $generated@@93)))
 :weight 0
)))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@48 (type $generated@@95))))
(= (type ($generated@@58 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@58 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@57) 10)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@63 $generated@@97 $generated@@98 $generated@@99)) $generated@@57)
 :pattern ( ($generated@@63 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@48 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@58 ($generated@@63 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@58 ($generated@@63 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@58 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@58 ($generated@@63 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@58 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@55) 11)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@112 $generated@@113)) 12))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@65 ($generated@@64 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@64 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@66 ($generated@@64 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@64 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@66 (type $generated@@118))))
(= (type ($generated@@53 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@53 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@64 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@66 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@53 ($generated@@67 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@53 ($generated@@67 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@53 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@53 ($generated@@67 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@53 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@53 ($generated@@67 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@53 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@64 $generated@@55 $generated@@4))
 :pattern ( ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@48 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@55) (= (type $generated@@156) ($generated@@56 $generated@@55 $generated@@57))) (= (type $generated@@157) ($generated@@47 $generated@@4))) (= (type $generated@@159) $generated@@55)) (= (type $generated@@160) ($generated@@47 $generated@@161))) (= ($generated@@0 ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@58 ($generated@@59 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (and (and (forall (($generated@@165 T@U) ) (! (= (type ($generated@@162 $generated@@165)) $generated@@49)
 :pattern ( ($generated@@162 $generated@@165))
)) (= ($generated@@1 $generated@@164) 13)) (= (type $generated@@163) $generated@@164)))
(assert (= ($generated@@162 $generated@@163) $generated@@45))
(assert (forall (($generated@@167 T@U) ) (! (= (type ($generated@@166 $generated@@167)) $generated@@50)
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (= ($generated@@166 $generated@@163) $generated@@46))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Bool)
(declare-fun $generated@@172 () Bool)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 (T@U T@U) Bool)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 (T@U T@U T@U) Bool)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () T@T)
(assert  (and (and (and (and (and (= (type $generated@@168) ($generated@@64 $generated@@55 $generated@@4)) (= (type $generated@@169) $generated@@55)) (= (type $generated@@170) ($generated@@56 $generated@@55 $generated@@57))) (= ($generated@@1 $generated@@180) 14)) (= (type $generated@@176) $generated@@180)) (= (type $generated@@178) $generated@@180)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@181  (=> (= $generated@@168 ($generated@@54 $generated@@169 $generated@@170 $generated@@44 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) $generated@@171) (=> $generated@@171 (=> (= (ControlFlow 0 2) (- 0 1)) $generated@@172))))))
(let (($generated@@182  (=> (and ($generated@@173 $generated@@170) ($generated@@174 $generated@@170)) (=> (and (and (=> $generated@@171 (and ($generated@@175 $generated@@176 $generated@@163) ($generated@@177 $generated@@176 $generated@@163 $generated@@170))) (=> $generated@@172 (and ($generated@@175 $generated@@178 $generated@@163) ($generated@@177 $generated@@178 $generated@@163 $generated@@170)))) (and (= 1 $generated@@179) (= (ControlFlow 0 4) 2))) $generated@@181))))
$generated@@182)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@166 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ) (= ($generated@@1 ($generated@@47 $generated@@51)) 6)) (forall (($generated@@52 T@T) ) (! (= ($generated@@48 ($generated@@47 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@47 $generated@@52))
))) (= (type $generated@@44) ($generated@@47 $generated@@4))) (= ($generated@@1 $generated@@49) 7)) (= (type $generated@@45) $generated@@49)) (= ($generated@@1 $generated@@50) 8)) (= (type $generated@@46) $generated@@50)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@1 ($generated@@56 $generated@@68 $generated@@69)) 9)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@56 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@61 ($generated@@56 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@56 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (let (($generated@@76 ($generated@@61 (type $generated@@74))))
(= (type ($generated@@59 $generated@@74 $generated@@75)) $generated@@76))
 :pattern ( ($generated@@59 $generated@@74 $generated@@75))
))) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (let (($generated@@80 (type $generated@@79)))
(let (($generated@@81 (type $generated@@78)))
(= (type ($generated@@62 $generated@@77 $generated@@78 $generated@@79)) ($generated@@56 $generated@@81 $generated@@80))))
 :pattern ( ($generated@@62 $generated@@77 $generated@@78 $generated@@79))
))) (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (let (($generated@@85 ($generated@@61 (type $generated@@82))))
 (=> (= (type $generated@@84) $generated@@85) (= ($generated@@59 ($generated@@62 $generated@@82 $generated@@83 $generated@@84) $generated@@83) $generated@@84)))
 :weight 0
))) (and (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@59 ($generated@@62 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@59 $generated@@87 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or true (= ($generated@@59 ($generated@@62 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@59 $generated@@91 $generated@@93)))
 :weight 0
)))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@48 (type $generated@@95))))
(= (type ($generated@@58 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@58 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@57) 10)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@63 $generated@@97 $generated@@98 $generated@@99)) $generated@@57)
 :pattern ( ($generated@@63 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@48 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@58 ($generated@@63 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@58 ($generated@@63 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@58 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@58 ($generated@@63 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@58 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@55) 11)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@112 $generated@@113)) 12))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@65 ($generated@@64 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@64 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@66 ($generated@@64 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@64 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@66 (type $generated@@118))))
(= (type ($generated@@53 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@53 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@64 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@66 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@53 ($generated@@67 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@53 ($generated@@67 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@53 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@53 ($generated@@67 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@53 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@53 ($generated@@67 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@53 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@64 $generated@@55 $generated@@4))
 :pattern ( ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@48 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@55) (= (type $generated@@156) ($generated@@56 $generated@@55 $generated@@57))) (= (type $generated@@157) ($generated@@47 $generated@@4))) (= (type $generated@@159) $generated@@55)) (= (type $generated@@160) ($generated@@47 $generated@@161))) (= ($generated@@0 ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@58 ($generated@@59 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (and (and (forall (($generated@@165 T@U) ) (! (= (type ($generated@@162 $generated@@165)) $generated@@49)
 :pattern ( ($generated@@162 $generated@@165))
)) (= ($generated@@1 $generated@@164) 13)) (= (type $generated@@163) $generated@@164)))
(assert (= ($generated@@162 $generated@@163) $generated@@45))
(assert (forall (($generated@@167 T@U) ) (! (= (type ($generated@@166 $generated@@167)) $generated@@50)
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (= ($generated@@166 $generated@@163) $generated@@46))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Bool)
(declare-fun $generated@@172 (T@U) Bool)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 (T@U T@U) Bool)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 (T@U T@U T@U) Bool)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () Int)
(declare-fun $generated@@179 () T@T)
(assert  (and (and (and (and (and (= (type $generated@@168) ($generated@@64 $generated@@55 $generated@@4)) (= (type $generated@@169) $generated@@55)) (= (type $generated@@170) ($generated@@56 $generated@@55 $generated@@57))) (= ($generated@@1 $generated@@179) 14)) (= (type $generated@@175) $generated@@179)) (= (type $generated@@177) $generated@@179)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@180  (=> (and (= $generated@@168 ($generated@@54 $generated@@169 $generated@@170 $generated@@44 false)) (= (ControlFlow 0 2) (- 0 1))) $generated@@171)))
(let (($generated@@181  (=> (and (and (and ($generated@@172 $generated@@170) ($generated@@173 $generated@@170)) (=> $generated@@171 (and ($generated@@174 $generated@@175 $generated@@163) ($generated@@176 $generated@@175 $generated@@163 $generated@@170)))) (and (and ($generated@@174 $generated@@177 $generated@@163) ($generated@@176 $generated@@177 $generated@@163 $generated@@170)) (and (= 1 $generated@@178) (= (ControlFlow 0 3) 2)))) $generated@@180)))
$generated@@181)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@166 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ) (= ($generated@@1 ($generated@@47 $generated@@51)) 6)) (forall (($generated@@52 T@T) ) (! (= ($generated@@48 ($generated@@47 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@47 $generated@@52))
))) (= (type $generated@@44) ($generated@@47 $generated@@4))) (= ($generated@@1 $generated@@49) 7)) (= (type $generated@@45) $generated@@49)) (= ($generated@@1 $generated@@50) 8)) (= (type $generated@@46) $generated@@50)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@1 ($generated@@56 $generated@@68 $generated@@69)) 9)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@56 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@61 ($generated@@56 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@56 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (let (($generated@@76 ($generated@@61 (type $generated@@74))))
(= (type ($generated@@59 $generated@@74 $generated@@75)) $generated@@76))
 :pattern ( ($generated@@59 $generated@@74 $generated@@75))
))) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (let (($generated@@80 (type $generated@@79)))
(let (($generated@@81 (type $generated@@78)))
(= (type ($generated@@62 $generated@@77 $generated@@78 $generated@@79)) ($generated@@56 $generated@@81 $generated@@80))))
 :pattern ( ($generated@@62 $generated@@77 $generated@@78 $generated@@79))
))) (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (let (($generated@@85 ($generated@@61 (type $generated@@82))))
 (=> (= (type $generated@@84) $generated@@85) (= ($generated@@59 ($generated@@62 $generated@@82 $generated@@83 $generated@@84) $generated@@83) $generated@@84)))
 :weight 0
))) (and (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@59 ($generated@@62 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@59 $generated@@87 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or true (= ($generated@@59 ($generated@@62 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@59 $generated@@91 $generated@@93)))
 :weight 0
)))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@48 (type $generated@@95))))
(= (type ($generated@@58 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@58 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@57) 10)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@63 $generated@@97 $generated@@98 $generated@@99)) $generated@@57)
 :pattern ( ($generated@@63 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@48 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@58 ($generated@@63 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@58 ($generated@@63 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@58 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@58 ($generated@@63 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@58 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@55) 11)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@112 $generated@@113)) 12))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@65 ($generated@@64 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@64 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@66 ($generated@@64 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@64 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@66 (type $generated@@118))))
(= (type ($generated@@53 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@53 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@64 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@66 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@53 ($generated@@67 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@53 ($generated@@67 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@53 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@53 ($generated@@67 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@53 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@53 ($generated@@67 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@53 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@64 $generated@@55 $generated@@4))
 :pattern ( ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@48 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@55) (= (type $generated@@156) ($generated@@56 $generated@@55 $generated@@57))) (= (type $generated@@157) ($generated@@47 $generated@@4))) (= (type $generated@@159) $generated@@55)) (= (type $generated@@160) ($generated@@47 $generated@@161))) (= ($generated@@0 ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@58 ($generated@@59 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (and (and (forall (($generated@@165 T@U) ) (! (= (type ($generated@@162 $generated@@165)) $generated@@49)
 :pattern ( ($generated@@162 $generated@@165))
)) (= ($generated@@1 $generated@@164) 13)) (= (type $generated@@163) $generated@@164)))
(assert (= ($generated@@162 $generated@@163) $generated@@45))
(assert (forall (($generated@@167 T@U) ) (! (= (type ($generated@@166 $generated@@167)) $generated@@50)
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (= ($generated@@166 $generated@@163) $generated@@46))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Bool)
(declare-fun $generated@@172 () Bool)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 (T@U T@U) Bool)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 (T@U T@U T@U) Bool)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () T@T)
(assert  (and (and (and (and (and (= (type $generated@@168) ($generated@@64 $generated@@55 $generated@@4)) (= (type $generated@@169) $generated@@55)) (= (type $generated@@170) ($generated@@56 $generated@@55 $generated@@57))) (= ($generated@@1 $generated@@180) 14)) (= (type $generated@@176) $generated@@180)) (= (type $generated@@178) $generated@@180)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@181  (=> (= $generated@@168 ($generated@@54 $generated@@169 $generated@@170 $generated@@44 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) $generated@@171) (=> $generated@@171 (=> (= (ControlFlow 0 2) (- 0 1)) $generated@@172))))))
(let (($generated@@182  (=> (and ($generated@@173 $generated@@170) ($generated@@174 $generated@@170)) (=> (and (and (=> $generated@@171 (and ($generated@@175 $generated@@176 $generated@@163) ($generated@@177 $generated@@176 $generated@@163 $generated@@170))) (=> $generated@@172 (and ($generated@@175 $generated@@178 $generated@@163) ($generated@@177 $generated@@178 $generated@@163 $generated@@170)))) (and (= 1 $generated@@179) (= (ControlFlow 0 4) 2))) $generated@@181))))
$generated@@182)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@166 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ) (= ($generated@@1 ($generated@@47 $generated@@51)) 6)) (forall (($generated@@52 T@T) ) (! (= ($generated@@48 ($generated@@47 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@47 $generated@@52))
))) (= (type $generated@@44) ($generated@@47 $generated@@4))) (= ($generated@@1 $generated@@49) 7)) (= (type $generated@@45) $generated@@49)) (= ($generated@@1 $generated@@50) 8)) (= (type $generated@@46) $generated@@50)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@1 ($generated@@56 $generated@@68 $generated@@69)) 9)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@56 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@61 ($generated@@56 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@56 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (let (($generated@@76 ($generated@@61 (type $generated@@74))))
(= (type ($generated@@59 $generated@@74 $generated@@75)) $generated@@76))
 :pattern ( ($generated@@59 $generated@@74 $generated@@75))
))) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (let (($generated@@80 (type $generated@@79)))
(let (($generated@@81 (type $generated@@78)))
(= (type ($generated@@62 $generated@@77 $generated@@78 $generated@@79)) ($generated@@56 $generated@@81 $generated@@80))))
 :pattern ( ($generated@@62 $generated@@77 $generated@@78 $generated@@79))
))) (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (let (($generated@@85 ($generated@@61 (type $generated@@82))))
 (=> (= (type $generated@@84) $generated@@85) (= ($generated@@59 ($generated@@62 $generated@@82 $generated@@83 $generated@@84) $generated@@83) $generated@@84)))
 :weight 0
))) (and (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@59 ($generated@@62 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@59 $generated@@87 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or true (= ($generated@@59 ($generated@@62 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@59 $generated@@91 $generated@@93)))
 :weight 0
)))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@48 (type $generated@@95))))
(= (type ($generated@@58 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@58 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@57) 10)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@63 $generated@@97 $generated@@98 $generated@@99)) $generated@@57)
 :pattern ( ($generated@@63 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@48 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@58 ($generated@@63 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@58 ($generated@@63 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@58 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@58 ($generated@@63 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@58 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@55) 11)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@112 $generated@@113)) 12))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@65 ($generated@@64 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@64 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@66 ($generated@@64 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@64 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@66 (type $generated@@118))))
(= (type ($generated@@53 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@53 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@64 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@66 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@53 ($generated@@67 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@53 ($generated@@67 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@53 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@53 ($generated@@67 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@53 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@53 ($generated@@67 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@53 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@64 $generated@@55 $generated@@4))
 :pattern ( ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@48 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@55) (= (type $generated@@156) ($generated@@56 $generated@@55 $generated@@57))) (= (type $generated@@157) ($generated@@47 $generated@@4))) (= (type $generated@@159) $generated@@55)) (= (type $generated@@160) ($generated@@47 $generated@@161))) (= ($generated@@0 ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@58 ($generated@@59 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (and (and (forall (($generated@@165 T@U) ) (! (= (type ($generated@@162 $generated@@165)) $generated@@49)
 :pattern ( ($generated@@162 $generated@@165))
)) (= ($generated@@1 $generated@@164) 13)) (= (type $generated@@163) $generated@@164)))
(assert (= ($generated@@162 $generated@@163) $generated@@45))
(assert (forall (($generated@@167 T@U) ) (! (= (type ($generated@@166 $generated@@167)) $generated@@50)
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (= ($generated@@166 $generated@@163) $generated@@46))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Bool)
(declare-fun $generated@@172 (T@U) Bool)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 (T@U T@U) Bool)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 (T@U T@U T@U) Bool)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () Int)
(declare-fun $generated@@179 () T@T)
(assert  (and (and (and (and (and (= (type $generated@@168) ($generated@@64 $generated@@55 $generated@@4)) (= (type $generated@@169) $generated@@55)) (= (type $generated@@170) ($generated@@56 $generated@@55 $generated@@57))) (= ($generated@@1 $generated@@179) 14)) (= (type $generated@@175) $generated@@179)) (= (type $generated@@177) $generated@@179)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@180  (=> (and (= $generated@@168 ($generated@@54 $generated@@169 $generated@@170 $generated@@44 false)) (= (ControlFlow 0 2) (- 0 1))) $generated@@171)))
(let (($generated@@181  (=> (and (and (and ($generated@@172 $generated@@170) ($generated@@173 $generated@@170)) (=> $generated@@171 (and ($generated@@174 $generated@@175 $generated@@163) ($generated@@176 $generated@@175 $generated@@163 $generated@@170)))) (and (and ($generated@@174 $generated@@177 $generated@@163) ($generated@@176 $generated@@177 $generated@@163 $generated@@170)) (and (= 1 $generated@@178) (= (ControlFlow 0 3) 2)))) $generated@@180)))
$generated@@181)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@166 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ) (= ($generated@@1 ($generated@@47 $generated@@51)) 6)) (forall (($generated@@52 T@T) ) (! (= ($generated@@48 ($generated@@47 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@47 $generated@@52))
))) (= (type $generated@@44) ($generated@@47 $generated@@4))) (= ($generated@@1 $generated@@49) 7)) (= (type $generated@@45) $generated@@49)) (= ($generated@@1 $generated@@50) 8)) (= (type $generated@@46) $generated@@50)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@1 ($generated@@56 $generated@@68 $generated@@69)) 9)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@56 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@61 ($generated@@56 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@56 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (let (($generated@@76 ($generated@@61 (type $generated@@74))))
(= (type ($generated@@59 $generated@@74 $generated@@75)) $generated@@76))
 :pattern ( ($generated@@59 $generated@@74 $generated@@75))
))) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (let (($generated@@80 (type $generated@@79)))
(let (($generated@@81 (type $generated@@78)))
(= (type ($generated@@62 $generated@@77 $generated@@78 $generated@@79)) ($generated@@56 $generated@@81 $generated@@80))))
 :pattern ( ($generated@@62 $generated@@77 $generated@@78 $generated@@79))
))) (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (let (($generated@@85 ($generated@@61 (type $generated@@82))))
 (=> (= (type $generated@@84) $generated@@85) (= ($generated@@59 ($generated@@62 $generated@@82 $generated@@83 $generated@@84) $generated@@83) $generated@@84)))
 :weight 0
))) (and (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@59 ($generated@@62 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@59 $generated@@87 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or true (= ($generated@@59 ($generated@@62 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@59 $generated@@91 $generated@@93)))
 :weight 0
)))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@48 (type $generated@@95))))
(= (type ($generated@@58 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@58 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@57) 10)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@63 $generated@@97 $generated@@98 $generated@@99)) $generated@@57)
 :pattern ( ($generated@@63 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@48 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@58 ($generated@@63 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@58 ($generated@@63 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@58 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@58 ($generated@@63 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@58 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@55) 11)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@112 $generated@@113)) 12))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@65 ($generated@@64 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@64 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@66 ($generated@@64 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@64 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@66 (type $generated@@118))))
(= (type ($generated@@53 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@53 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@64 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@66 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@53 ($generated@@67 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@53 ($generated@@67 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@53 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@53 ($generated@@67 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@53 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@53 ($generated@@67 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@53 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@64 $generated@@55 $generated@@4))
 :pattern ( ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@48 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@55) (= (type $generated@@156) ($generated@@56 $generated@@55 $generated@@57))) (= (type $generated@@157) ($generated@@47 $generated@@4))) (= (type $generated@@159) $generated@@55)) (= (type $generated@@160) ($generated@@47 $generated@@161))) (= ($generated@@0 ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@58 ($generated@@59 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (and (and (forall (($generated@@165 T@U) ) (! (= (type ($generated@@162 $generated@@165)) $generated@@49)
 :pattern ( ($generated@@162 $generated@@165))
)) (= ($generated@@1 $generated@@164) 13)) (= (type $generated@@163) $generated@@164)))
(assert (= ($generated@@162 $generated@@163) $generated@@45))
(assert (forall (($generated@@167 T@U) ) (! (= (type ($generated@@166 $generated@@167)) $generated@@50)
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (= ($generated@@166 $generated@@163) $generated@@46))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Bool)
(declare-fun $generated@@172 () Bool)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 (T@U T@U) Bool)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 (T@U T@U T@U) Bool)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () T@T)
(assert  (and (and (and (and (and (= (type $generated@@168) ($generated@@64 $generated@@55 $generated@@4)) (= (type $generated@@169) $generated@@55)) (= (type $generated@@170) ($generated@@56 $generated@@55 $generated@@57))) (= ($generated@@1 $generated@@180) 14)) (= (type $generated@@176) $generated@@180)) (= (type $generated@@178) $generated@@180)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@181  (=> (= $generated@@168 ($generated@@54 $generated@@169 $generated@@170 $generated@@44 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) $generated@@171) (=> $generated@@171 (=> (= (ControlFlow 0 2) (- 0 1)) $generated@@172))))))
(let (($generated@@182  (=> (and ($generated@@173 $generated@@170) ($generated@@174 $generated@@170)) (=> (and (and (=> $generated@@171 (and ($generated@@175 $generated@@176 $generated@@163) ($generated@@177 $generated@@176 $generated@@163 $generated@@170))) (=> $generated@@172 (and ($generated@@175 $generated@@178 $generated@@163) ($generated@@177 $generated@@178 $generated@@163 $generated@@170)))) (and (= 1 $generated@@179) (= (ControlFlow 0 4) 2))) $generated@@181))))
$generated@@182)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@T T@T) T@T)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@T)
(declare-fun $generated@@166 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ) (= ($generated@@1 ($generated@@47 $generated@@51)) 6)) (forall (($generated@@52 T@T) ) (! (= ($generated@@48 ($generated@@47 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@47 $generated@@52))
))) (= (type $generated@@44) ($generated@@47 $generated@@4))) (= ($generated@@1 $generated@@49) 7)) (= (type $generated@@45) $generated@@49)) (= ($generated@@1 $generated@@50) 8)) (= (type $generated@@46) $generated@@50)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@1 ($generated@@56 $generated@@68 $generated@@69)) 9)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@60 ($generated@@56 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@56 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@61 ($generated@@56 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@56 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (let (($generated@@76 ($generated@@61 (type $generated@@74))))
(= (type ($generated@@59 $generated@@74 $generated@@75)) $generated@@76))
 :pattern ( ($generated@@59 $generated@@74 $generated@@75))
))) (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (let (($generated@@80 (type $generated@@79)))
(let (($generated@@81 (type $generated@@78)))
(= (type ($generated@@62 $generated@@77 $generated@@78 $generated@@79)) ($generated@@56 $generated@@81 $generated@@80))))
 :pattern ( ($generated@@62 $generated@@77 $generated@@78 $generated@@79))
))) (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (let (($generated@@85 ($generated@@61 (type $generated@@82))))
 (=> (= (type $generated@@84) $generated@@85) (= ($generated@@59 ($generated@@62 $generated@@82 $generated@@83 $generated@@84) $generated@@83) $generated@@84)))
 :weight 0
))) (and (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@59 ($generated@@62 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@59 $generated@@87 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or true (= ($generated@@59 ($generated@@62 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@59 $generated@@91 $generated@@93)))
 :weight 0
)))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@48 (type $generated@@95))))
(= (type ($generated@@58 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@58 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@57) 10)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@63 $generated@@97 $generated@@98 $generated@@99)) $generated@@57)
 :pattern ( ($generated@@63 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@48 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@58 ($generated@@63 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@58 ($generated@@63 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@58 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@58 ($generated@@63 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@58 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@55) 11)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@112 $generated@@113)) 12))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@65 ($generated@@64 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@64 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@66 ($generated@@64 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@64 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@66 (type $generated@@118))))
(= (type ($generated@@53 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@53 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@64 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@67 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@66 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@53 ($generated@@67 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@53 ($generated@@67 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@53 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@53 ($generated@@67 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@53 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@53 ($generated@@67 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@53 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@64 $generated@@55 $generated@@4))
 :pattern ( ($generated@@54 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@48 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@55) (= (type $generated@@156) ($generated@@56 $generated@@55 $generated@@57))) (= (type $generated@@157) ($generated@@47 $generated@@4))) (= (type $generated@@159) $generated@@55)) (= (type $generated@@160) ($generated@@47 $generated@@161))) (= ($generated@@0 ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@58 ($generated@@59 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@53 ($generated@@54 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (and (and (forall (($generated@@165 T@U) ) (! (= (type ($generated@@162 $generated@@165)) $generated@@49)
 :pattern ( ($generated@@162 $generated@@165))
)) (= ($generated@@1 $generated@@164) 13)) (= (type $generated@@163) $generated@@164)))
(assert (= ($generated@@162 $generated@@163) $generated@@45))
(assert (forall (($generated@@167 T@U) ) (! (= (type ($generated@@166 $generated@@167)) $generated@@50)
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (= ($generated@@166 $generated@@163) $generated@@46))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Bool)
(declare-fun $generated@@172 (T@U) Bool)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 (T@U T@U) Bool)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 (T@U T@U T@U) Bool)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () Int)
(declare-fun $generated@@179 () T@T)
(assert  (and (and (and (and (and (= (type $generated@@168) ($generated@@64 $generated@@55 $generated@@4)) (= (type $generated@@169) $generated@@55)) (= (type $generated@@170) ($generated@@56 $generated@@55 $generated@@57))) (= ($generated@@1 $generated@@179) 14)) (= (type $generated@@175) $generated@@179)) (= (type $generated@@177) $generated@@179)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@180  (=> (and (= $generated@@168 ($generated@@54 $generated@@169 $generated@@170 $generated@@44 false)) (= (ControlFlow 0 2) (- 0 1))) $generated@@171)))
(let (($generated@@181  (=> (and (and (and ($generated@@172 $generated@@170) ($generated@@173 $generated@@170)) (=> $generated@@171 (and ($generated@@174 $generated@@175 $generated@@163) ($generated@@176 $generated@@175 $generated@@163 $generated@@170)))) (and (and ($generated@@174 $generated@@177 $generated@@163) ($generated@@176 $generated@@177 $generated@@163 $generated@@170)) (and (= 1 $generated@@178) (= (ControlFlow 0 3) 2)))) $generated@@180)))
$generated@@181)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
