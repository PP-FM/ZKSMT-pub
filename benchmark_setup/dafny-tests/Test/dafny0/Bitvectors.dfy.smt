(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 (T@U) T@U)
(declare-fun $generated@@164 (T@T T@U) T@U)
(declare-fun $generated@@165 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (and (and (= ($generated@@1 $generated@@165) 11) (forall (($generated@@166 T@U) ) (! (= (type ($generated@@163 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@163 $generated@@166))
))) (forall (($generated@@167 T@T) ($generated@@168 T@U) ) (! (= (type ($generated@@164 $generated@@167 $generated@@168)) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167 $generated@@168))
))))
(assert (forall (($generated@@169 T@U) ) (! (let (($generated@@170 (type $generated@@169)))
(= ($generated@@164 $generated@@170 ($generated@@163 $generated@@169)) $generated@@169))
 :pattern ( ($generated@@163 $generated@@169))
)))
(assert (forall (($generated@@171 Int) ) (! (= ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))) ($generated@@159 ($generated@@163 ($generated@@8 $generated@@171))))
 :pattern ( ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))))
)))
(assert (forall (($generated@@172 T@U) ) (! (= ($generated@@163 ($generated@@159 $generated@@172)) ($generated@@159 ($generated@@163 $generated@@172)))
 :pattern ( ($generated@@163 ($generated@@159 $generated@@172)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@173 () Int)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 (T@U) Bool)
(declare-fun $generated@@179 (T@U) Bool)
(declare-fun $generated@@180 () Int)
(assert  (and (and (and (= (type $generated@@174) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@175) $generated@@47)) (= (type $generated@@176) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@177) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@181 true))
(let (($generated@@182  (=> (and (< $generated@@173 ($generated@@157 0)) (= (ControlFlow 0 6) 4)) $generated@@181)))
(let (($generated@@183  (=> (and (<= ($generated@@157 0) $generated@@173) (= (ControlFlow 0 5) 4)) $generated@@181)))
(let (($generated@@184  (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@157 0) ($generated@@157 0))) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@0 ($generated@@159 ($generated@@11 (< 0 80))))))))
(let (($generated@@185  (=> (= $generated@@174 ($generated@@45 $generated@@175 $generated@@176 $generated@@177 false)) (and (and (=> (= (ControlFlow 0 7) 2) $generated@@184) (=> (= (ControlFlow 0 7) 5) $generated@@183)) (=> (= (ControlFlow 0 7) 6) $generated@@182)))))
(let (($generated@@186  (=> (and (and ($generated@@178 $generated@@176) ($generated@@179 $generated@@176)) (and (= 0 $generated@@180) (= (ControlFlow 0 8) 7))) $generated@@185)))
$generated@@186)))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 (T@T T@T) T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U T@U) T@U)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@108 (T@T T@T) T@T)
(declare-fun $generated@@109 (T@T) T@T)
(declare-fun $generated@@110 (T@T) T@T)
(declare-fun $generated@@111 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (Int) Int)
(declare-fun $generated@@164 (T@U) T@U)
(declare-fun $generated@@171 (T@U) T@U)
(declare-fun $generated@@172 (T@T T@U) T@U)
(declare-fun $generated@@173 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@1 ($generated@@45 $generated@@57 $generated@@58)) 6)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@51 ($generated@@45 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@45 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@52 ($generated@@45 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@45 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (let (($generated@@65 ($generated@@52 (type $generated@@63))))
(= (type ($generated@@49 $generated@@63 $generated@@64)) $generated@@65))
 :pattern ( ($generated@@49 $generated@@63 $generated@@64))
))) (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 (type $generated@@68)))
(let (($generated@@70 (type $generated@@67)))
(= (type ($generated@@53 $generated@@66 $generated@@67 $generated@@68)) ($generated@@45 $generated@@70 $generated@@69))))
 :pattern ( ($generated@@53 $generated@@66 $generated@@67 $generated@@68))
))) (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@52 (type $generated@@71))))
 (=> (= (type $generated@@73) $generated@@74) (= ($generated@@49 ($generated@@53 $generated@@71 $generated@@72 $generated@@73) $generated@@72) $generated@@73)))
 :weight 0
))) (and (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@77 $generated@@78) (= ($generated@@49 ($generated@@53 $generated@@76 $generated@@77 $generated@@75) $generated@@78) ($generated@@49 $generated@@76 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or true (= ($generated@@49 ($generated@@53 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@49 $generated@@80 $generated@@82)))
 :weight 0
)))) (= ($generated@@1 $generated@@46) 7)) (forall (($generated@@83 T@T) ) (= ($generated@@1 ($generated@@54 $generated@@83)) 8))) (forall (($generated@@84 T@T) ) (! (= ($generated@@55 ($generated@@54 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@54 $generated@@84))
))) (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (! (let (($generated@@87 ($generated@@55 (type $generated@@86))))
(= (type ($generated@@48 $generated@@85 $generated@@86)) $generated@@87))
 :pattern ( ($generated@@48 $generated@@85 $generated@@86))
))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= (type ($generated@@56 $generated@@88 $generated@@89 $generated@@90)) $generated@@47)
 :pattern ( ($generated@@56 $generated@@88 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (let (($generated@@94 ($generated@@55 (type $generated@@92))))
 (=> (= (type $generated@@93) $generated@@94) (= ($generated@@48 ($generated@@56 $generated@@91 $generated@@92 $generated@@93) $generated@@92) $generated@@93)))
 :weight 0
))) (and (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@97 $generated@@98) (= ($generated@@48 ($generated@@56 $generated@@96 $generated@@97 $generated@@95) $generated@@98) ($generated@@48 $generated@@96 $generated@@98)))
 :weight 0
)) (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or true (= ($generated@@48 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@48 $generated@@100 $generated@@102)))
 :weight 0
)))) (= (type $generated@@50) ($generated@@54 $generated@@4))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (and (and (= (type $generated@@103) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@104) ($generated@@45 $generated@@46 $generated@@47))) ($generated@@44 $generated@@103 $generated@@104)) (forall (($generated@@105 T@U) ) (!  (=> (and (= (type $generated@@105) $generated@@46) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@103 $generated@@105) $generated@@50))) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50)))
 :pattern ( ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50))
)))
 :pattern ( ($generated@@44 $generated@@103 $generated@@104))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@108 $generated@@112 $generated@@113)) 10)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@109 ($generated@@108 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@108 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@110 ($generated@@108 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@108 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@110 (type $generated@@118))))
(= (type ($generated@@106 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@106 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@108 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@110 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@106 ($generated@@111 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@106 ($generated@@111 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@106 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@106 ($generated@@111 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@106 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@106 ($generated@@111 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@106 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@108 $generated@@46 $generated@@4))
 :pattern ( ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@55 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@46) (= (type $generated@@156) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@157) ($generated@@54 $generated@@4))) (= (type $generated@@159) $generated@@46)) (= (type $generated@@160) ($generated@@54 $generated@@161))) (= ($generated@@0 ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 Int) ) (! (= ($generated@@162 $generated@@163) $generated@@163)
 :pattern ( ($generated@@162 $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ) (! (let (($generated@@166 (type $generated@@165)))
(= (type ($generated@@164 $generated@@165)) $generated@@166))
 :pattern ( ($generated@@164 $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! (= ($generated@@164 $generated@@167) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167))
)))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 T@U) ) (!  (=> (and (and (and (and (= (type $generated@@168) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@169) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@170) ($generated@@45 $generated@@46 $generated@@47))) (not (= $generated@@168 $generated@@170))) (and ($generated@@44 $generated@@168 $generated@@169) ($generated@@44 $generated@@169 $generated@@170))) ($generated@@44 $generated@@168 $generated@@170))
 :pattern ( ($generated@@44 $generated@@168 $generated@@169) ($generated@@44 $generated@@169 $generated@@170))
)))
(assert  (and (and (= ($generated@@1 $generated@@173) 11) (forall (($generated@@174 T@U) ) (! (= (type ($generated@@171 $generated@@174)) $generated@@173)
 :pattern ( ($generated@@171 $generated@@174))
))) (forall (($generated@@175 T@T) ($generated@@176 T@U) ) (! (= (type ($generated@@172 $generated@@175 $generated@@176)) $generated@@175)
 :pattern ( ($generated@@172 $generated@@175 $generated@@176))
))))
(assert (forall (($generated@@177 T@U) ) (! (let (($generated@@178 (type $generated@@177)))
(= ($generated@@172 $generated@@178 ($generated@@171 $generated@@177)) $generated@@177))
 :pattern ( ($generated@@171 $generated@@177))
)))
(assert (forall (($generated@@179 Int) ) (! (= ($generated@@171 ($generated@@8 ($generated@@162 $generated@@179))) ($generated@@164 ($generated@@171 ($generated@@8 $generated@@179))))
 :pattern ( ($generated@@171 ($generated@@8 ($generated@@162 $generated@@179))))
)))
(assert (forall (($generated@@180 T@U) ) (! (= ($generated@@171 ($generated@@164 $generated@@180)) ($generated@@164 ($generated@@171 $generated@@180)))
 :pattern ( ($generated@@171 ($generated@@164 $generated@@180)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 5) true)
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () (_ BitVec 32))
(declare-fun $generated@@162 () (_ BitVec 32))
(declare-fun $generated@@163 () (_ BitVec 32))
(declare-fun $generated@@164 () (_ BitVec 32))
(declare-fun $generated@@165 (T@U) Bool)
(declare-fun $generated@@166 (T@U) Bool)
(declare-fun $generated@@167 () Int)
(assert  (and (and (and (= (type $generated@@157) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@158) $generated@@47)) (= (type $generated@@159) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@160) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@168  (=> (= $generated@@157 ($generated@@45 $generated@@158 $generated@@159 $generated@@160 false)) (=> (and (= $generated@@161 (bvadd $generated@@162 $generated@@163)) (= $generated@@164 (bvsub $generated@@163 $generated@@162))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= $generated@@161 (bvadd $generated@@162 $generated@@163))) (=> (= $generated@@161 (bvadd $generated@@162 $generated@@163)) (=> (= (ControlFlow 0 2) (- 0 1)) (= $generated@@164 (bvsub $generated@@163 $generated@@162)))))))))
(let (($generated@@169  (=> (and (and ($generated@@165 $generated@@159) ($generated@@166 $generated@@159)) (and (= 0 $generated@@167) (= (ControlFlow 0 4) 2))) $generated@@168)))
$generated@@169)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 (T@T T@T) T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U T@U) T@U)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@108 (T@T T@T) T@T)
(declare-fun $generated@@109 (T@T) T@T)
(declare-fun $generated@@110 (T@T) T@T)
(declare-fun $generated@@111 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U) T@U)
(declare-fun $generated@@169 (T@U) T@U)
(declare-fun $generated@@170 (T@T T@U) T@U)
(declare-fun $generated@@171 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@1 ($generated@@45 $generated@@57 $generated@@58)) 6)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@51 ($generated@@45 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@45 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@52 ($generated@@45 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@45 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (let (($generated@@65 ($generated@@52 (type $generated@@63))))
(= (type ($generated@@49 $generated@@63 $generated@@64)) $generated@@65))
 :pattern ( ($generated@@49 $generated@@63 $generated@@64))
))) (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 (type $generated@@68)))
(let (($generated@@70 (type $generated@@67)))
(= (type ($generated@@53 $generated@@66 $generated@@67 $generated@@68)) ($generated@@45 $generated@@70 $generated@@69))))
 :pattern ( ($generated@@53 $generated@@66 $generated@@67 $generated@@68))
))) (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@52 (type $generated@@71))))
 (=> (= (type $generated@@73) $generated@@74) (= ($generated@@49 ($generated@@53 $generated@@71 $generated@@72 $generated@@73) $generated@@72) $generated@@73)))
 :weight 0
))) (and (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@77 $generated@@78) (= ($generated@@49 ($generated@@53 $generated@@76 $generated@@77 $generated@@75) $generated@@78) ($generated@@49 $generated@@76 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or true (= ($generated@@49 ($generated@@53 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@49 $generated@@80 $generated@@82)))
 :weight 0
)))) (= ($generated@@1 $generated@@46) 7)) (forall (($generated@@83 T@T) ) (= ($generated@@1 ($generated@@54 $generated@@83)) 8))) (forall (($generated@@84 T@T) ) (! (= ($generated@@55 ($generated@@54 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@54 $generated@@84))
))) (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (! (let (($generated@@87 ($generated@@55 (type $generated@@86))))
(= (type ($generated@@48 $generated@@85 $generated@@86)) $generated@@87))
 :pattern ( ($generated@@48 $generated@@85 $generated@@86))
))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= (type ($generated@@56 $generated@@88 $generated@@89 $generated@@90)) $generated@@47)
 :pattern ( ($generated@@56 $generated@@88 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (let (($generated@@94 ($generated@@55 (type $generated@@92))))
 (=> (= (type $generated@@93) $generated@@94) (= ($generated@@48 ($generated@@56 $generated@@91 $generated@@92 $generated@@93) $generated@@92) $generated@@93)))
 :weight 0
))) (and (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@97 $generated@@98) (= ($generated@@48 ($generated@@56 $generated@@96 $generated@@97 $generated@@95) $generated@@98) ($generated@@48 $generated@@96 $generated@@98)))
 :weight 0
)) (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or true (= ($generated@@48 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@48 $generated@@100 $generated@@102)))
 :weight 0
)))) (= (type $generated@@50) ($generated@@54 $generated@@4))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (and (and (= (type $generated@@103) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@104) ($generated@@45 $generated@@46 $generated@@47))) ($generated@@44 $generated@@103 $generated@@104)) (forall (($generated@@105 T@U) ) (!  (=> (and (= (type $generated@@105) $generated@@46) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@103 $generated@@105) $generated@@50))) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50)))
 :pattern ( ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50))
)))
 :pattern ( ($generated@@44 $generated@@103 $generated@@104))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@108 $generated@@112 $generated@@113)) 10)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@109 ($generated@@108 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@108 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@110 ($generated@@108 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@108 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@110 (type $generated@@118))))
(= (type ($generated@@106 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@106 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@108 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@110 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@106 ($generated@@111 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@106 ($generated@@111 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@106 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@106 ($generated@@111 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@106 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@106 ($generated@@111 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@106 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@108 $generated@@46 $generated@@4))
 :pattern ( ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@55 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@46) (= (type $generated@@156) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@157) ($generated@@54 $generated@@4))) (= (type $generated@@159) $generated@@46)) (= (type $generated@@160) ($generated@@54 $generated@@161))) (= ($generated@@0 ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 T@U) ) (! (let (($generated@@164 (type $generated@@163)))
(= (type ($generated@@162 $generated@@163)) $generated@@164))
 :pattern ( ($generated@@162 $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ) (! (= ($generated@@162 $generated@@165) $generated@@165)
 :pattern ( ($generated@@162 $generated@@165))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 T@U) ) (!  (=> (and (and (and (and (= (type $generated@@166) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@167) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@168) ($generated@@45 $generated@@46 $generated@@47))) (not (= $generated@@166 $generated@@168))) (and ($generated@@44 $generated@@166 $generated@@167) ($generated@@44 $generated@@167 $generated@@168))) ($generated@@44 $generated@@166 $generated@@168))
 :pattern ( ($generated@@44 $generated@@166 $generated@@167) ($generated@@44 $generated@@167 $generated@@168))
)))
(assert  (and (and (= ($generated@@1 $generated@@171) 11) (forall (($generated@@172 T@U) ) (! (= (type ($generated@@169 $generated@@172)) $generated@@171)
 :pattern ( ($generated@@169 $generated@@172))
))) (forall (($generated@@173 T@T) ($generated@@174 T@U) ) (! (= (type ($generated@@170 $generated@@173 $generated@@174)) $generated@@173)
 :pattern ( ($generated@@170 $generated@@173 $generated@@174))
))))
(assert (forall (($generated@@175 T@U) ) (! (let (($generated@@176 (type $generated@@175)))
(= ($generated@@170 $generated@@176 ($generated@@169 $generated@@175)) $generated@@175))
 :pattern ( ($generated@@169 $generated@@175))
)))
(assert (forall (($generated@@177 T@U) ) (! (= ($generated@@169 ($generated@@162 $generated@@177)) ($generated@@162 ($generated@@169 $generated@@177)))
 :pattern ( ($generated@@169 ($generated@@162 $generated@@177)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@178 () (_ BitVec 32))
(declare-fun $generated@@179 () (_ BitVec 32))
(declare-fun $generated@@180 () (_ BitVec 32))
(declare-fun $generated@@181 (T@U) (_ BitVec 32))
(declare-fun $generated@@182 ((_ BitVec 32)) T@U)
(declare-fun $generated@@183 () (_ BitVec 32))
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () (_ BitVec 32))
(declare-fun $generated@@188 () (_ BitVec 32))
(declare-fun $generated@@189 (T@U) Bool)
(declare-fun $generated@@190 () T@U)
(declare-fun $generated@@191 (T@U) Bool)
(declare-fun $generated@@192 () (_ BitVec 32))
(declare-fun $generated@@193 () (_ BitVec 32))
(declare-fun $generated@@194 () T@U)
(declare-fun $generated@@195 () Int)
(declare-fun $generated@@196 () T@T)
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@197 (_ BitVec 32)) ) (! (= ($generated@@181 ($generated@@182 $generated@@197)) $generated@@197)
 :pattern ( ($generated@@182 $generated@@197))
)) (= ($generated@@1 $generated@@196) 12)) (forall (($generated@@198 T@U) ) (!  (=> (= (type $generated@@198) $generated@@196) (= ($generated@@182 ($generated@@181 $generated@@198)) $generated@@198))
 :pattern ( ($generated@@181 $generated@@198))
))) (forall (($generated@@199 (_ BitVec 32)) ) (! (= (type ($generated@@182 $generated@@199)) $generated@@196)
 :pattern ( ($generated@@182 $generated@@199))
))) (= (type $generated@@184) ($generated@@108 $generated@@46 $generated@@4))) (= (type $generated@@185) $generated@@46)) (= (type $generated@@186) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@190) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@194) ($generated@@45 $generated@@46 $generated@@47))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let (($generated@@200  (and (=> (= (ControlFlow 0 2) (- 0 5)) (bvult $generated@@178 $generated@@179)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (bvule $generated@@178 $generated@@179)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (bvuge $generated@@179 $generated@@178)) (=> (= (ControlFlow 0 2) (- 0 1)) (bvugt $generated@@179 $generated@@178)))))))
(let (($generated@@201  (=> (and (not (and (and (bvult $generated@@178 $generated@@179) (bvule $generated@@178 $generated@@179)) (bvuge $generated@@179 $generated@@178))) (= (ControlFlow 0 7) 2)) $generated@@200)))
(let (($generated@@202  (=> (and (and (and (bvult $generated@@178 $generated@@179) (bvule $generated@@178 $generated@@179)) (bvuge $generated@@179 $generated@@178)) (= (ControlFlow 0 6) 2)) $generated@@200)))
(let (($generated@@203  (=> (not (and (bvult $generated@@178 $generated@@179) (bvule $generated@@178 $generated@@179))) (and (=> (= (ControlFlow 0 9) 6) $generated@@202) (=> (= (ControlFlow 0 9) 7) $generated@@201)))))
(let (($generated@@204  (=> (and (bvult $generated@@178 $generated@@179) (bvule $generated@@178 $generated@@179)) (and (=> (= (ControlFlow 0 8) 6) $generated@@202) (=> (= (ControlFlow 0 8) 7) $generated@@201)))))
(let (($generated@@205  (=> (not (bvult $generated@@178 $generated@@179)) (and (=> (= (ControlFlow 0 11) 8) $generated@@204) (=> (= (ControlFlow 0 11) 9) $generated@@203)))))
(let (($generated@@206  (=> (bvult $generated@@178 $generated@@179) (and (=> (= (ControlFlow 0 10) 8) $generated@@204) (=> (= (ControlFlow 0 10) 9) $generated@@203)))))
(let (($generated@@207  (and (=> (= (ControlFlow 0 12) (- 0 14)) (= $generated@@180 ($generated@@181 ($generated@@162 ($generated@@182 #x00000002))))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (= $generated@@183 ($generated@@181 ($generated@@162 ($generated@@182 #x00000004))))) (=> (and (= $generated@@180 ($generated@@181 ($generated@@162 ($generated@@182 #x00000002)))) (= $generated@@183 ($generated@@181 ($generated@@162 ($generated@@182 #x00000004))))) (and (=> (= (ControlFlow 0 12) 10) $generated@@206) (=> (= (ControlFlow 0 12) 11) $generated@@205)))))))
(let (($generated@@208  (=> (and (not (= $generated@@180 ($generated@@181 ($generated@@162 ($generated@@182 #x00000002))))) (= (ControlFlow 0 16) 12)) $generated@@207)))
(let (($generated@@209  (=> (and (= $generated@@180 ($generated@@181 ($generated@@162 ($generated@@182 #x00000002)))) (= (ControlFlow 0 15) 12)) $generated@@207)))
(let (($generated@@210  (=> (= $generated@@184 ($generated@@107 $generated@@185 $generated@@186 $generated@@50 false)) (=> (and (and (and (and (= $generated@@187 ($generated@@181 ($generated@@162 ($generated@@182 #x00000041)))) (= $generated@@188 ($generated@@181 ($generated@@162 ($generated@@182 #x00000078))))) (and ($generated@@189 $generated@@190) ($generated@@191 $generated@@190))) (and (and (= $generated@@192 (bvadd $generated@@187 $generated@@188)) (= $generated@@193 (bvsub $generated@@188 $generated@@187))) (and (forall (($generated@@211 T@U) ) (!  (=> (= (type $generated@@211) $generated@@46) (=> (and (not (= $generated@@211 $generated@@185)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@186 $generated@@211) $generated@@50))) (= ($generated@@49 $generated@@190 $generated@@211) ($generated@@49 $generated@@186 $generated@@211))))
 :pattern ( ($generated@@49 $generated@@190 $generated@@211))
)) ($generated@@44 $generated@@186 $generated@@190)))) (and (and (and (= $generated@@178 ($generated@@181 ($generated@@162 ($generated@@182 #x7fffffff)))) (= $generated@@179 ($generated@@181 ($generated@@162 ($generated@@182 #x80000003))))) (and ($generated@@189 $generated@@194) ($generated@@191 $generated@@194))) (and (and (= $generated@@180 (bvadd $generated@@178 $generated@@179)) (= $generated@@183 (bvsub $generated@@179 $generated@@178))) (and (forall (($generated@@212 T@U) ) (!  (=> (= (type $generated@@212) $generated@@46) (=> (and (not (= $generated@@212 $generated@@185)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@190 $generated@@212) $generated@@50))) (= ($generated@@49 $generated@@194 $generated@@212) ($generated@@49 $generated@@190 $generated@@212))))
 :pattern ( ($generated@@49 $generated@@194 $generated@@212))
)) ($generated@@44 $generated@@190 $generated@@194))))) (and (=> (= (ControlFlow 0 17) 15) $generated@@209) (=> (= (ControlFlow 0 17) 16) $generated@@208))))))
(let (($generated@@213  (=> (and (and ($generated@@189 $generated@@186) ($generated@@191 $generated@@186)) (and (= 1 $generated@@195) (= (ControlFlow 0 18) 17))) $generated@@210)))
$generated@@213)))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (T@U) T@U)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@162 (T@T T@U) T@U)
(declare-fun $generated@@163 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 T@U) ) (! (let (($generated@@159 (type $generated@@158)))
(= (type ($generated@@157 $generated@@158)) $generated@@159))
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (= ($generated@@157 $generated@@160) $generated@@160)
 :pattern ( ($generated@@157 $generated@@160))
)))
(assert  (and (and (= ($generated@@1 $generated@@163) 11) (forall (($generated@@164 T@U) ) (! (= (type ($generated@@161 $generated@@164)) $generated@@163)
 :pattern ( ($generated@@161 $generated@@164))
))) (forall (($generated@@165 T@T) ($generated@@166 T@U) ) (! (= (type ($generated@@162 $generated@@165 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@162 $generated@@165 $generated@@166))
))))
(assert (forall (($generated@@167 T@U) ) (! (let (($generated@@168 (type $generated@@167)))
(= ($generated@@162 $generated@@168 ($generated@@161 $generated@@167)) $generated@@167))
 :pattern ( ($generated@@161 $generated@@167))
)))
(assert (forall (($generated@@169 T@U) ) (! (= ($generated@@161 ($generated@@157 $generated@@169)) ($generated@@157 ($generated@@161 $generated@@169)))
 :pattern ( ($generated@@161 ($generated@@157 $generated@@169)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@170 () (_ BitVec 16))
(declare-fun $generated@@171 () (_ BitVec 16))
(declare-fun $generated@@172 () (_ BitVec 16))
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () (_ BitVec 16))
(declare-fun $generated@@178 (T@U) (_ BitVec 16))
(declare-fun $generated@@179 ((_ BitVec 16)) T@U)
(declare-fun $generated@@180 (T@U) Bool)
(declare-fun $generated@@181 (T@U) Bool)
(declare-fun $generated@@182 () Int)
(declare-fun $generated@@183 () T@T)
(assert  (and (and (and (and (and (and (and (= (type $generated@@173) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@174) $generated@@47)) (= (type $generated@@175) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@176) ($generated@@50 $generated@@4))) (forall (($generated@@184 (_ BitVec 16)) ) (! (= ($generated@@178 ($generated@@179 $generated@@184)) $generated@@184)
 :pattern ( ($generated@@179 $generated@@184))
))) (= ($generated@@1 $generated@@183) 12)) (forall (($generated@@185 T@U) ) (!  (=> (= (type $generated@@185) $generated@@183) (= ($generated@@179 ($generated@@178 $generated@@185)) $generated@@185))
 :pattern ( ($generated@@178 $generated@@185))
))) (forall (($generated@@186 (_ BitVec 16)) ) (! (= (type ($generated@@179 $generated@@186)) $generated@@183)
 :pattern ( ($generated@@179 $generated@@186))
))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 28) (let (($generated@@187  (and (=> (= (ControlFlow 0 21) (- 0 23)) (= (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170)))) (bvsub #x0000 (bvsub #x0000 $generated@@170)))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (= (bvsub #x0000 (bvsub #x0000 $generated@@170)) $generated@@170)) (=> (and (and (= (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170)))) (bvsub #x0000 (bvsub #x0000 $generated@@170))) (= (bvsub #x0000 (bvsub #x0000 $generated@@170)) $generated@@170)) (= (ControlFlow 0 21) (- 0 20))) (= (bvadd (bvadd $generated@@171 $generated@@171) (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170))))) (bvadd (bvadd $generated@@171 $generated@@171) $generated@@170)))))))
(let (($generated@@188  (=> (and (not (= (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170)))) (bvsub #x0000 (bvsub #x0000 $generated@@170)))) (= (ControlFlow 0 25) 21)) $generated@@187)))
(let (($generated@@189  (=> (and (= (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170)))) (bvsub #x0000 (bvsub #x0000 $generated@@170))) (= (ControlFlow 0 24) 21)) $generated@@187)))
(let (($generated@@190  (and (=> (= (ControlFlow 0 26) 24) $generated@@189) (=> (= (ControlFlow 0 26) 25) $generated@@188))))
(let (($generated@@191  (=> (= (ControlFlow 0 18) (- 0 17)) (= $generated@@172 (bvsub $generated@@170 #x0002)))))
(let (($generated@@192  (=> (and (= $generated@@172 (bvsub $generated@@170 #x0002)) (= (ControlFlow 0 19) 18)) $generated@@191)))
(let (($generated@@193  (=> (= (ControlFlow 0 16) (- 0 15)) (= (bvadd (bvadd $generated@@171 $generated@@171) $generated@@170) (bvsub $generated@@170 #x0002)))))
(let (($generated@@194  (=> (= (ControlFlow 0 14) (- 0 13)) (= (bvsub (bvadd $generated@@171 $generated@@171) (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170)))))) (bvadd (bvadd $generated@@171 $generated@@171) (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170)))))))))
(let (($generated@@195  (=> (= (ControlFlow 0 12) (- 0 11)) (= (bvadd $generated@@171 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170))))))) (bvsub (bvadd $generated@@171 $generated@@171) (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170))))))))))
(let (($generated@@196  (=> (= (ControlFlow 0 10) (- 0 9)) (= (bvsub $generated@@171 (bvsub #x0000 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170)))))))) (bvadd $generated@@171 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170)))))))))))
(let (($generated@@197  (and (=> (= (ControlFlow 0 7) (- 0 8)) (= (bvsub #x0000 (bvsub #x0000 (bvsub #x0000 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170))))))))) (bvsub #x0000 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170))))))))) (=> (= (bvsub #x0000 (bvsub #x0000 (bvsub #x0000 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170))))))))) (bvsub #x0000 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170)))))))) (=> (= (ControlFlow 0 7) (- 0 6)) (= (bvsub $generated@@171 (bvsub #x0000 (bvsub #x0000 (bvsub #x0000 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170)))))))))) (bvsub $generated@@171 (bvsub #x0000 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170))))))))))))))
(let (($generated@@198  (=> (= (ControlFlow 0 5) (- 0 4)) (= (bvnot (bvsub #x0000 (bvsub #x0000 (bvsub #x0000 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170)))))))))) (bvsub $generated@@171 (bvsub #x0000 (bvsub #x0000 (bvsub #x0000 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170))))))))))))))
(let (($generated@@199  (=> (= (ControlFlow 0 3) (- 0 2)) (= $generated@@172 (bvnot (bvsub #x0000 (bvsub #x0000 (bvsub #x0000 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170))))))))))))))
(let (($generated@@200 true))
(let (($generated@@201  (=> (and (and (= $generated@@173 ($generated@@45 $generated@@174 $generated@@175 $generated@@176 false)) (= $generated@@177 (bvsub #x0000 (bvsub #x0000 (bvnot (bvsub #x0000 (bvnot (bvnot (bvsub #x0000 (bvsub #x0000 $generated@@170)))))))))) (and (= $generated@@172 (bvnot (bvsub #x0000 $generated@@177))) (= $generated@@171 ($generated@@178 ($generated@@157 ($generated@@179 #xffff)))))) (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 27) 1) $generated@@200) (=> (= (ControlFlow 0 27) 3) $generated@@199)) (=> (= (ControlFlow 0 27) 5) $generated@@198)) (=> (= (ControlFlow 0 27) 7) $generated@@197)) (=> (= (ControlFlow 0 27) 10) $generated@@196)) (=> (= (ControlFlow 0 27) 12) $generated@@195)) (=> (= (ControlFlow 0 27) 14) $generated@@194)) (=> (= (ControlFlow 0 27) 26) $generated@@190)) (=> (= (ControlFlow 0 27) 16) $generated@@193)) (=> (= (ControlFlow 0 27) 19) $generated@@192)))))
(let (($generated@@202  (=> (and (and ($generated@@180 $generated@@175) ($generated@@181 $generated@@175)) (and (= 0 $generated@@182) (= (ControlFlow 0 28) 27))) $generated@@201)))
$generated@@202)))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (T@U) T@U)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@162 (T@T T@U) T@U)
(declare-fun $generated@@163 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 T@U) ) (! (let (($generated@@159 (type $generated@@158)))
(= (type ($generated@@157 $generated@@158)) $generated@@159))
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (= ($generated@@157 $generated@@160) $generated@@160)
 :pattern ( ($generated@@157 $generated@@160))
)))
(assert  (and (and (= ($generated@@1 $generated@@163) 11) (forall (($generated@@164 T@U) ) (! (= (type ($generated@@161 $generated@@164)) $generated@@163)
 :pattern ( ($generated@@161 $generated@@164))
))) (forall (($generated@@165 T@T) ($generated@@166 T@U) ) (! (= (type ($generated@@162 $generated@@165 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@162 $generated@@165 $generated@@166))
))))
(assert (forall (($generated@@167 T@U) ) (! (let (($generated@@168 (type $generated@@167)))
(= ($generated@@162 $generated@@168 ($generated@@161 $generated@@167)) $generated@@167))
 :pattern ( ($generated@@161 $generated@@167))
)))
(assert (forall (($generated@@169 T@U) ) (! (= ($generated@@161 ($generated@@157 $generated@@169)) ($generated@@157 ($generated@@161 $generated@@169)))
 :pattern ( ($generated@@161 ($generated@@157 $generated@@169)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@170 () (_ BitVec 64))
(declare-fun $generated@@171 (T@U) (_ BitVec 64))
(declare-fun $generated@@172 ((_ BitVec 64)) T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () (_ BitVec 64))
(declare-fun $generated@@178 () (_ BitVec 64))
(declare-fun $generated@@179 (T@U) Bool)
(declare-fun $generated@@180 (T@U) Bool)
(declare-fun $generated@@181 () Int)
(declare-fun $generated@@182 () T@T)
(assert  (and (and (and (and (and (and (and (forall (($generated@@183 (_ BitVec 64)) ) (! (= ($generated@@171 ($generated@@172 $generated@@183)) $generated@@183)
 :pattern ( ($generated@@172 $generated@@183))
)) (= ($generated@@1 $generated@@182) 12)) (forall (($generated@@184 T@U) ) (!  (=> (= (type $generated@@184) $generated@@182) (= ($generated@@172 ($generated@@171 $generated@@184)) $generated@@184))
 :pattern ( ($generated@@171 $generated@@184))
))) (forall (($generated@@185 (_ BitVec 64)) ) (! (= (type ($generated@@172 $generated@@185)) $generated@@182)
 :pattern ( ($generated@@172 $generated@@185))
))) (= (type $generated@@173) ($generated@@57 $generated@@47 $generated@@4))) (= (type $generated@@174) $generated@@47)) (= (type $generated@@175) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@176) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let (($generated@@186  (and (=> (= (ControlFlow 0 2) (- 0 5)) (= (bvurem $generated@@170 #x0000000000000003) ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000001))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (= (bvurem $generated@@170 #x0000000000000004) ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000002))))) (=> (and (= (bvurem $generated@@170 #x0000000000000003) ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000001)))) (= (bvurem $generated@@170 #x0000000000000004) ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000002))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (not (= ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000003))) #x0000000000000000))) (=> (= (ControlFlow 0 2) (- 0 1)) (not (= ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000004))) #x0000000000000000)))))))))
(let (($generated@@187  (=> (and (not (= (bvurem $generated@@170 #x0000000000000003) ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000001))))) (= (ControlFlow 0 8) 2)) $generated@@186)))
(let (($generated@@188  (=> (= (bvurem $generated@@170 #x0000000000000003) ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000001)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (not (= ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000004))) #x0000000000000000))) (=> (= (ControlFlow 0 6) 2) $generated@@186)))))
(let (($generated@@189  (and (=> (= (ControlFlow 0 9) (- 0 12)) (= (bvudiv $generated@@170 #x0000000000000003) ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000003))))) (and (=> (= (ControlFlow 0 9) (- 0 11)) (= (bvudiv $generated@@170 #x0000000000000004) ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000002))))) (=> (and (= (bvudiv $generated@@170 #x0000000000000003) ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000003)))) (= (bvudiv $generated@@170 #x0000000000000004) ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000002))))) (and (=> (= (ControlFlow 0 9) (- 0 10)) (not (= ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000003))) #x0000000000000000))) (and (=> (= (ControlFlow 0 9) 6) $generated@@188) (=> (= (ControlFlow 0 9) 8) $generated@@187))))))))
(let (($generated@@190  (=> (and (not (= (bvudiv $generated@@170 #x0000000000000003) ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000003))))) (= (ControlFlow 0 15) 9)) $generated@@189)))
(let (($generated@@191  (=> (= (bvudiv $generated@@170 #x0000000000000003) ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000003)))) (and (=> (= (ControlFlow 0 13) (- 0 14)) (not (= ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000004))) #x0000000000000000))) (=> (= (ControlFlow 0 13) 9) $generated@@189)))))
(let (($generated@@192  (=> (= $generated@@173 ($generated@@45 $generated@@174 $generated@@175 $generated@@176 false)) (=> (and (= $generated@@177 ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000005)))) (= $generated@@178 (bvmul (bvmul (bvmul (bvmul (bvmul (bvmul (bvmul #x0000000000000002 #x0000000000000002) #x0000000000000002) (bvmul #x0000000000000002 #x0000000000000002)) $generated@@177) #x0000000000000002) (bvmul (bvmul #x0000000000000002 #x0000000000000002) #x0000000000000002)) #x0000000000000002))) (and (=> (= (ControlFlow 0 16) (- 0 19)) (not (= ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000200))) #x0000000000000000))) (=> (not (= ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000200))) #x0000000000000000)) (=> (= $generated@@170 (bvudiv $generated@@178 #x0000000000000200)) (and (=> (= (ControlFlow 0 16) (- 0 18)) (= $generated@@170 ($generated@@171 ($generated@@157 ($generated@@172 #x000000000000000a))))) (=> (= $generated@@170 ($generated@@171 ($generated@@157 ($generated@@172 #x000000000000000a)))) (and (=> (= (ControlFlow 0 16) (- 0 17)) (not (= ($generated@@171 ($generated@@157 ($generated@@172 #x0000000000000003))) #x0000000000000000))) (and (=> (= (ControlFlow 0 16) 13) $generated@@191) (=> (= (ControlFlow 0 16) 15) $generated@@190))))))))))))
(let (($generated@@193  (=> (and (and ($generated@@179 $generated@@175) ($generated@@180 $generated@@175)) (and (= 1 $generated@@181) (= (ControlFlow 0 20) 16))) $generated@@192)))
$generated@@193)))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 (T@U) T@U)
(declare-fun $generated@@164 (T@T T@U) T@U)
(declare-fun $generated@@165 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (and (and (= ($generated@@1 $generated@@165) 11) (forall (($generated@@166 T@U) ) (! (= (type ($generated@@163 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@163 $generated@@166))
))) (forall (($generated@@167 T@T) ($generated@@168 T@U) ) (! (= (type ($generated@@164 $generated@@167 $generated@@168)) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167 $generated@@168))
))))
(assert (forall (($generated@@169 T@U) ) (! (let (($generated@@170 (type $generated@@169)))
(= ($generated@@164 $generated@@170 ($generated@@163 $generated@@169)) $generated@@169))
 :pattern ( ($generated@@163 $generated@@169))
)))
(assert (forall (($generated@@171 Int) ) (! (= ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))) ($generated@@159 ($generated@@163 ($generated@@8 $generated@@171))))
 :pattern ( ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))))
)))
(assert (forall (($generated@@172 T@U) ) (! (= ($generated@@163 ($generated@@159 $generated@@172)) ($generated@@159 ($generated@@163 $generated@@172)))
 :pattern ( ($generated@@163 ($generated@@159 $generated@@172)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () Int)
(declare-fun $generated@@178 () Int)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () Int)
(declare-fun $generated@@181 (T@U) Bool)
(declare-fun $generated@@182 (T@U) Bool)
(declare-fun $generated@@183 () Int)
(declare-fun $generated@@184 () Int)
(declare-fun $generated@@185 () Int)
(declare-fun $generated@@186 () Int)
(assert  (and (and (and (= (type $generated@@173) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@174) $generated@@47)) (= (type $generated@@175) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@176) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@187  (=> (and (= $generated@@173 ($generated@@45 $generated@@174 $generated@@175 $generated@@176 false)) (= $generated@@177 0)) (=> (and (and (= $generated@@178 0) (= $generated@@179 0)) (and (= $generated@@180 0) (= (ControlFlow 0 2) (- 0 1)))) (= $generated@@180 ($generated@@157 0))))))
(let (($generated@@188  (=> (and (and (and ($generated@@181 $generated@@175) ($generated@@182 $generated@@175)) (= 0 $generated@@183)) (and (and (= 0 $generated@@184) (= 0 $generated@@185)) (and (= 0 $generated@@186) (= (ControlFlow 0 3) 2)))) $generated@@187)))
$generated@@188)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 (T@T T@T) T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U T@U) T@U)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@108 (T@T T@T) T@T)
(declare-fun $generated@@109 (T@T) T@T)
(declare-fun $generated@@110 (T@T) T@T)
(declare-fun $generated@@111 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (Int) Int)
(declare-fun $generated@@164 (T@U) T@U)
(declare-fun $generated@@171 (T@U) T@U)
(declare-fun $generated@@172 (T@T T@U) T@U)
(declare-fun $generated@@173 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@1 ($generated@@45 $generated@@57 $generated@@58)) 6)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@51 ($generated@@45 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@45 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@52 ($generated@@45 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@45 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (let (($generated@@65 ($generated@@52 (type $generated@@63))))
(= (type ($generated@@49 $generated@@63 $generated@@64)) $generated@@65))
 :pattern ( ($generated@@49 $generated@@63 $generated@@64))
))) (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 (type $generated@@68)))
(let (($generated@@70 (type $generated@@67)))
(= (type ($generated@@53 $generated@@66 $generated@@67 $generated@@68)) ($generated@@45 $generated@@70 $generated@@69))))
 :pattern ( ($generated@@53 $generated@@66 $generated@@67 $generated@@68))
))) (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@52 (type $generated@@71))))
 (=> (= (type $generated@@73) $generated@@74) (= ($generated@@49 ($generated@@53 $generated@@71 $generated@@72 $generated@@73) $generated@@72) $generated@@73)))
 :weight 0
))) (and (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@77 $generated@@78) (= ($generated@@49 ($generated@@53 $generated@@76 $generated@@77 $generated@@75) $generated@@78) ($generated@@49 $generated@@76 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or true (= ($generated@@49 ($generated@@53 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@49 $generated@@80 $generated@@82)))
 :weight 0
)))) (= ($generated@@1 $generated@@46) 7)) (forall (($generated@@83 T@T) ) (= ($generated@@1 ($generated@@54 $generated@@83)) 8))) (forall (($generated@@84 T@T) ) (! (= ($generated@@55 ($generated@@54 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@54 $generated@@84))
))) (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (! (let (($generated@@87 ($generated@@55 (type $generated@@86))))
(= (type ($generated@@48 $generated@@85 $generated@@86)) $generated@@87))
 :pattern ( ($generated@@48 $generated@@85 $generated@@86))
))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= (type ($generated@@56 $generated@@88 $generated@@89 $generated@@90)) $generated@@47)
 :pattern ( ($generated@@56 $generated@@88 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (let (($generated@@94 ($generated@@55 (type $generated@@92))))
 (=> (= (type $generated@@93) $generated@@94) (= ($generated@@48 ($generated@@56 $generated@@91 $generated@@92 $generated@@93) $generated@@92) $generated@@93)))
 :weight 0
))) (and (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@97 $generated@@98) (= ($generated@@48 ($generated@@56 $generated@@96 $generated@@97 $generated@@95) $generated@@98) ($generated@@48 $generated@@96 $generated@@98)))
 :weight 0
)) (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or true (= ($generated@@48 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@48 $generated@@100 $generated@@102)))
 :weight 0
)))) (= (type $generated@@50) ($generated@@54 $generated@@4))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (and (and (= (type $generated@@103) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@104) ($generated@@45 $generated@@46 $generated@@47))) ($generated@@44 $generated@@103 $generated@@104)) (forall (($generated@@105 T@U) ) (!  (=> (and (= (type $generated@@105) $generated@@46) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@103 $generated@@105) $generated@@50))) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50)))
 :pattern ( ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50))
)))
 :pattern ( ($generated@@44 $generated@@103 $generated@@104))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@108 $generated@@112 $generated@@113)) 10)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@109 ($generated@@108 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@108 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@110 ($generated@@108 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@108 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@110 (type $generated@@118))))
(= (type ($generated@@106 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@106 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@108 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@110 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@106 ($generated@@111 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@106 ($generated@@111 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@106 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@106 ($generated@@111 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@106 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@106 ($generated@@111 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@106 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@108 $generated@@46 $generated@@4))
 :pattern ( ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@55 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@46) (= (type $generated@@156) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@157) ($generated@@54 $generated@@4))) (= (type $generated@@159) $generated@@46)) (= (type $generated@@160) ($generated@@54 $generated@@161))) (= ($generated@@0 ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 Int) ) (! (= ($generated@@162 $generated@@163) $generated@@163)
 :pattern ( ($generated@@162 $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ) (! (let (($generated@@166 (type $generated@@165)))
(= (type ($generated@@164 $generated@@165)) $generated@@166))
 :pattern ( ($generated@@164 $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! (= ($generated@@164 $generated@@167) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167))
)))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 T@U) ) (!  (=> (and (and (and (and (= (type $generated@@168) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@169) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@170) ($generated@@45 $generated@@46 $generated@@47))) (not (= $generated@@168 $generated@@170))) (and ($generated@@44 $generated@@168 $generated@@169) ($generated@@44 $generated@@169 $generated@@170))) ($generated@@44 $generated@@168 $generated@@170))
 :pattern ( ($generated@@44 $generated@@168 $generated@@169) ($generated@@44 $generated@@169 $generated@@170))
)))
(assert  (and (and (= ($generated@@1 $generated@@173) 11) (forall (($generated@@174 T@U) ) (! (= (type ($generated@@171 $generated@@174)) $generated@@173)
 :pattern ( ($generated@@171 $generated@@174))
))) (forall (($generated@@175 T@T) ($generated@@176 T@U) ) (! (= (type ($generated@@172 $generated@@175 $generated@@176)) $generated@@175)
 :pattern ( ($generated@@172 $generated@@175 $generated@@176))
))))
(assert (forall (($generated@@177 T@U) ) (! (let (($generated@@178 (type $generated@@177)))
(= ($generated@@172 $generated@@178 ($generated@@171 $generated@@177)) $generated@@177))
 :pattern ( ($generated@@171 $generated@@177))
)))
(assert (forall (($generated@@179 Int) ) (! (= ($generated@@171 ($generated@@8 ($generated@@162 $generated@@179))) ($generated@@164 ($generated@@171 ($generated@@8 $generated@@179))))
 :pattern ( ($generated@@171 ($generated@@8 ($generated@@162 $generated@@179))))
)))
(assert (forall (($generated@@180 T@U) ) (! (= ($generated@@171 ($generated@@164 $generated@@180)) ($generated@@164 ($generated@@171 $generated@@180)))
 :pattern ( ($generated@@171 ($generated@@164 $generated@@180)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 () (_ BitVec 67))
(declare-fun $generated@@185 (T@U) (_ BitVec 67))
(declare-fun $generated@@186 ((_ BitVec 67)) T@U)
(declare-fun $generated@@187 () (_ BitVec 67))
(declare-fun $generated@@188 (T@U) Bool)
(declare-fun $generated@@189 () T@U)
(declare-fun $generated@@190 (T@U) Bool)
(declare-fun $generated@@191 () (_ BitVec 64))
(declare-fun $generated@@192 (T@U) (_ BitVec 64))
(declare-fun $generated@@193 ((_ BitVec 64)) T@U)
(declare-fun $generated@@194 () (_ BitVec 64))
(declare-fun $generated@@195 () T@U)
(declare-fun $generated@@196 () (_ BitVec 53))
(declare-fun $generated@@197 (T@U) (_ BitVec 53))
(declare-fun $generated@@198 ((_ BitVec 53)) T@U)
(declare-fun $generated@@199 () (_ BitVec 53))
(declare-fun $generated@@200 () T@U)
(declare-fun $generated@@201 () (_ BitVec 33))
(declare-fun $generated@@202 (T@U) (_ BitVec 33))
(declare-fun $generated@@203 ((_ BitVec 33)) T@U)
(declare-fun $generated@@204 () (_ BitVec 33))
(declare-fun $generated@@205 () T@U)
(declare-fun $generated@@206 () (_ BitVec 32))
(declare-fun $generated@@207 (T@U) (_ BitVec 32))
(declare-fun $generated@@208 ((_ BitVec 32)) T@U)
(declare-fun $generated@@209 () (_ BitVec 32))
(declare-fun $generated@@210 () T@U)
(declare-fun $generated@@211 () (_ BitVec 31))
(declare-fun $generated@@212 (T@U) (_ BitVec 31))
(declare-fun $generated@@213 ((_ BitVec 31)) T@U)
(declare-fun $generated@@214 () (_ BitVec 31))
(declare-fun $generated@@215 () T@U)
(declare-fun $generated@@216 () (_ BitVec 16))
(declare-fun $generated@@217 (T@U) (_ BitVec 16))
(declare-fun $generated@@218 ((_ BitVec 16)) T@U)
(declare-fun $generated@@219 () (_ BitVec 16))
(declare-fun $generated@@220 () T@U)
(declare-fun $generated@@221 () (_ BitVec 15))
(declare-fun $generated@@222 (T@U) (_ BitVec 15))
(declare-fun $generated@@223 ((_ BitVec 15)) T@U)
(declare-fun $generated@@224 () (_ BitVec 15))
(declare-fun $generated@@225 () T@U)
(declare-fun $generated@@226 () (_ BitVec 8))
(declare-fun $generated@@227 (T@U) (_ BitVec 8))
(declare-fun $generated@@228 ((_ BitVec 8)) T@U)
(declare-fun $generated@@229 () (_ BitVec 8))
(declare-fun $generated@@230 () T@U)
(declare-fun $generated@@231 () (_ BitVec 6))
(declare-fun $generated@@232 (T@U) (_ BitVec 6))
(declare-fun $generated@@233 ((_ BitVec 6)) T@U)
(declare-fun $generated@@234 () (_ BitVec 6))
(declare-fun $generated@@235 () T@U)
(declare-fun $generated@@236 () (_ BitVec 1))
(declare-fun $generated@@237 (T@U) (_ BitVec 1))
(declare-fun $generated@@238 ((_ BitVec 1)) T@U)
(declare-fun $generated@@239 () (_ BitVec 1))
(declare-fun $generated@@240 () T@U)
(declare-fun $generated@@241 () Int)
(declare-fun $generated@@242 () Int)
(declare-fun $generated@@243 () T@U)
(declare-fun $generated@@244 () (_ BitVec 2))
(declare-fun $generated@@245 (T@U) (_ BitVec 2))
(declare-fun $generated@@246 ((_ BitVec 2)) T@U)
(declare-fun $generated@@247 () (_ BitVec 2))
(declare-fun $generated@@248 () Int)
(declare-fun $generated@@249 () T@T)
(declare-fun $generated@@250 () T@T)
(declare-fun $generated@@251 () T@T)
(declare-fun $generated@@252 () T@T)
(declare-fun $generated@@253 () T@T)
(declare-fun $generated@@254 () T@T)
(declare-fun $generated@@255 () T@T)
(declare-fun $generated@@256 () T@T)
(declare-fun $generated@@257 () T@T)
(declare-fun $generated@@258 () T@T)
(declare-fun $generated@@259 () T@T)
(declare-fun $generated@@260 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type $generated@@181) ($generated@@108 $generated@@46 $generated@@4)) (= (type $generated@@182) $generated@@46)) (= (type $generated@@183) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@261 (_ BitVec 67)) ) (! (= ($generated@@185 ($generated@@186 $generated@@261)) $generated@@261)
 :pattern ( ($generated@@186 $generated@@261))
))) (= ($generated@@1 $generated@@249) 12)) (forall (($generated@@262 T@U) ) (!  (=> (= (type $generated@@262) $generated@@249) (= ($generated@@186 ($generated@@185 $generated@@262)) $generated@@262))
 :pattern ( ($generated@@185 $generated@@262))
))) (forall (($generated@@263 (_ BitVec 67)) ) (! (= (type ($generated@@186 $generated@@263)) $generated@@249)
 :pattern ( ($generated@@186 $generated@@263))
))) (= (type $generated@@189) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@264 (_ BitVec 64)) ) (! (= ($generated@@192 ($generated@@193 $generated@@264)) $generated@@264)
 :pattern ( ($generated@@193 $generated@@264))
))) (= ($generated@@1 $generated@@250) 13)) (forall (($generated@@265 T@U) ) (!  (=> (= (type $generated@@265) $generated@@250) (= ($generated@@193 ($generated@@192 $generated@@265)) $generated@@265))
 :pattern ( ($generated@@192 $generated@@265))
))) (forall (($generated@@266 (_ BitVec 64)) ) (! (= (type ($generated@@193 $generated@@266)) $generated@@250)
 :pattern ( ($generated@@193 $generated@@266))
))) (= (type $generated@@195) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@267 (_ BitVec 53)) ) (! (= ($generated@@197 ($generated@@198 $generated@@267)) $generated@@267)
 :pattern ( ($generated@@198 $generated@@267))
))) (= ($generated@@1 $generated@@251) 14)) (forall (($generated@@268 T@U) ) (!  (=> (= (type $generated@@268) $generated@@251) (= ($generated@@198 ($generated@@197 $generated@@268)) $generated@@268))
 :pattern ( ($generated@@197 $generated@@268))
))) (forall (($generated@@269 (_ BitVec 53)) ) (! (= (type ($generated@@198 $generated@@269)) $generated@@251)
 :pattern ( ($generated@@198 $generated@@269))
))) (= (type $generated@@200) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@270 (_ BitVec 33)) ) (! (= ($generated@@202 ($generated@@203 $generated@@270)) $generated@@270)
 :pattern ( ($generated@@203 $generated@@270))
))) (= ($generated@@1 $generated@@252) 15)) (forall (($generated@@271 T@U) ) (!  (=> (= (type $generated@@271) $generated@@252) (= ($generated@@203 ($generated@@202 $generated@@271)) $generated@@271))
 :pattern ( ($generated@@202 $generated@@271))
))) (forall (($generated@@272 (_ BitVec 33)) ) (! (= (type ($generated@@203 $generated@@272)) $generated@@252)
 :pattern ( ($generated@@203 $generated@@272))
))) (= (type $generated@@205) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@273 (_ BitVec 32)) ) (! (= ($generated@@207 ($generated@@208 $generated@@273)) $generated@@273)
 :pattern ( ($generated@@208 $generated@@273))
))) (= ($generated@@1 $generated@@253) 16)) (forall (($generated@@274 T@U) ) (!  (=> (= (type $generated@@274) $generated@@253) (= ($generated@@208 ($generated@@207 $generated@@274)) $generated@@274))
 :pattern ( ($generated@@207 $generated@@274))
))) (forall (($generated@@275 (_ BitVec 32)) ) (! (= (type ($generated@@208 $generated@@275)) $generated@@253)
 :pattern ( ($generated@@208 $generated@@275))
))) (= (type $generated@@210) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@276 (_ BitVec 31)) ) (! (= ($generated@@212 ($generated@@213 $generated@@276)) $generated@@276)
 :pattern ( ($generated@@213 $generated@@276))
))) (= ($generated@@1 $generated@@254) 17)) (forall (($generated@@277 T@U) ) (!  (=> (= (type $generated@@277) $generated@@254) (= ($generated@@213 ($generated@@212 $generated@@277)) $generated@@277))
 :pattern ( ($generated@@212 $generated@@277))
))) (forall (($generated@@278 (_ BitVec 31)) ) (! (= (type ($generated@@213 $generated@@278)) $generated@@254)
 :pattern ( ($generated@@213 $generated@@278))
))) (= (type $generated@@215) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@279 (_ BitVec 16)) ) (! (= ($generated@@217 ($generated@@218 $generated@@279)) $generated@@279)
 :pattern ( ($generated@@218 $generated@@279))
))) (= ($generated@@1 $generated@@255) 18)) (forall (($generated@@280 T@U) ) (!  (=> (= (type $generated@@280) $generated@@255) (= ($generated@@218 ($generated@@217 $generated@@280)) $generated@@280))
 :pattern ( ($generated@@217 $generated@@280))
))) (forall (($generated@@281 (_ BitVec 16)) ) (! (= (type ($generated@@218 $generated@@281)) $generated@@255)
 :pattern ( ($generated@@218 $generated@@281))
))) (= (type $generated@@220) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@282 (_ BitVec 15)) ) (! (= ($generated@@222 ($generated@@223 $generated@@282)) $generated@@282)
 :pattern ( ($generated@@223 $generated@@282))
))) (= ($generated@@1 $generated@@256) 19)) (forall (($generated@@283 T@U) ) (!  (=> (= (type $generated@@283) $generated@@256) (= ($generated@@223 ($generated@@222 $generated@@283)) $generated@@283))
 :pattern ( ($generated@@222 $generated@@283))
))) (forall (($generated@@284 (_ BitVec 15)) ) (! (= (type ($generated@@223 $generated@@284)) $generated@@256)
 :pattern ( ($generated@@223 $generated@@284))
))) (= (type $generated@@225) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@285 (_ BitVec 8)) ) (! (= ($generated@@227 ($generated@@228 $generated@@285)) $generated@@285)
 :pattern ( ($generated@@228 $generated@@285))
))) (= ($generated@@1 $generated@@257) 20)) (forall (($generated@@286 T@U) ) (!  (=> (= (type $generated@@286) $generated@@257) (= ($generated@@228 ($generated@@227 $generated@@286)) $generated@@286))
 :pattern ( ($generated@@227 $generated@@286))
))) (forall (($generated@@287 (_ BitVec 8)) ) (! (= (type ($generated@@228 $generated@@287)) $generated@@257)
 :pattern ( ($generated@@228 $generated@@287))
))) (= (type $generated@@230) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@288 (_ BitVec 6)) ) (! (= ($generated@@232 ($generated@@233 $generated@@288)) $generated@@288)
 :pattern ( ($generated@@233 $generated@@288))
))) (= ($generated@@1 $generated@@258) 21)) (forall (($generated@@289 T@U) ) (!  (=> (= (type $generated@@289) $generated@@258) (= ($generated@@233 ($generated@@232 $generated@@289)) $generated@@289))
 :pattern ( ($generated@@232 $generated@@289))
))) (forall (($generated@@290 (_ BitVec 6)) ) (! (= (type ($generated@@233 $generated@@290)) $generated@@258)
 :pattern ( ($generated@@233 $generated@@290))
))) (= (type $generated@@235) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@291 (_ BitVec 1)) ) (! (= ($generated@@237 ($generated@@238 $generated@@291)) $generated@@291)
 :pattern ( ($generated@@238 $generated@@291))
))) (= ($generated@@1 $generated@@259) 22)) (forall (($generated@@292 T@U) ) (!  (=> (= (type $generated@@292) $generated@@259) (= ($generated@@238 ($generated@@237 $generated@@292)) $generated@@292))
 :pattern ( ($generated@@237 $generated@@292))
))) (forall (($generated@@293 (_ BitVec 1)) ) (! (= (type ($generated@@238 $generated@@293)) $generated@@259)
 :pattern ( ($generated@@238 $generated@@293))
))) (= (type $generated@@240) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@243) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@294 (_ BitVec 2)) ) (! (= ($generated@@245 ($generated@@246 $generated@@294)) $generated@@294)
 :pattern ( ($generated@@246 $generated@@294))
))) (= ($generated@@1 $generated@@260) 23)) (forall (($generated@@295 T@U) ) (!  (=> (= (type $generated@@295) $generated@@260) (= ($generated@@246 ($generated@@245 $generated@@295)) $generated@@295))
 :pattern ( ($generated@@245 $generated@@295))
))) (forall (($generated@@296 (_ BitVec 2)) ) (! (= (type ($generated@@246 $generated@@296)) $generated@@260)
 :pattern ( ($generated@@246 $generated@@296))
))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@297  (=> (= $generated@@181 ($generated@@107 $generated@@182 $generated@@183 $generated@@50 false)) (=> (and (and (= $generated@@184 ($generated@@185 ($generated@@164 ($generated@@186 (bvsub #b0000000000000000000000000000000000000000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000001))))) (= $generated@@187 ($generated@@185 ($generated@@164 ($generated@@186 #b0000000000000000000000000000000000000000000000000000000000000000011))))) (and ($generated@@188 $generated@@189) ($generated@@190 $generated@@189))) (=> (and (and (and (forall (($generated@@298 T@U) ) (!  (=> (= (type $generated@@298) $generated@@46) (=> (and (not (= $generated@@298 $generated@@182)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@183 $generated@@298) $generated@@50))) (= ($generated@@49 $generated@@189 $generated@@298) ($generated@@49 $generated@@183 $generated@@298))))
 :pattern ( ($generated@@49 $generated@@189 $generated@@298))
)) ($generated@@44 $generated@@183 $generated@@189)) (and (= $generated@@191 ($generated@@192 ($generated@@164 ($generated@@193 (bvsub #x0000000000000000 #x0000000000000001))))) (= $generated@@194 ($generated@@192 ($generated@@164 ($generated@@193 #x0000000000000003)))))) (and (and ($generated@@188 $generated@@195) ($generated@@190 $generated@@195)) (and (forall (($generated@@299 T@U) ) (!  (=> (= (type $generated@@299) $generated@@46) (=> (and (not (= $generated@@299 $generated@@182)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@189 $generated@@299) $generated@@50))) (= ($generated@@49 $generated@@195 $generated@@299) ($generated@@49 $generated@@189 $generated@@299))))
 :pattern ( ($generated@@49 $generated@@195 $generated@@299))
)) ($generated@@44 $generated@@189 $generated@@195)))) (=> (and (and (and (and (and (and (= $generated@@196 ($generated@@197 ($generated@@164 ($generated@@198 (bvsub #b00000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000000000000000000000001))))) (= $generated@@199 ($generated@@197 ($generated@@164 ($generated@@198 #b00000000000000000000000000000000000000000000000000011))))) (and ($generated@@188 $generated@@200) ($generated@@190 $generated@@200))) (and (and (forall (($generated@@300 T@U) ) (!  (=> (= (type $generated@@300) $generated@@46) (=> (and (not (= $generated@@300 $generated@@182)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@195 $generated@@300) $generated@@50))) (= ($generated@@49 $generated@@200 $generated@@300) ($generated@@49 $generated@@195 $generated@@300))))
 :pattern ( ($generated@@49 $generated@@200 $generated@@300))
)) ($generated@@44 $generated@@195 $generated@@200)) (and (= $generated@@201 ($generated@@202 ($generated@@164 ($generated@@203 (bvsub #b000000000000000000000000000000000 #b000000000000000000000000000000001))))) (= $generated@@204 ($generated@@202 ($generated@@164 ($generated@@203 #b000000000000000000000000000000011))))))) (and (and (and ($generated@@188 $generated@@205) ($generated@@190 $generated@@205)) (and (forall (($generated@@301 T@U) ) (!  (=> (= (type $generated@@301) $generated@@46) (=> (and (not (= $generated@@301 $generated@@182)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@200 $generated@@301) $generated@@50))) (= ($generated@@49 $generated@@205 $generated@@301) ($generated@@49 $generated@@200 $generated@@301))))
 :pattern ( ($generated@@49 $generated@@205 $generated@@301))
)) ($generated@@44 $generated@@200 $generated@@205))) (and (and (= $generated@@206 ($generated@@207 ($generated@@164 ($generated@@208 (bvsub #x00000000 #x00000001))))) (= $generated@@209 ($generated@@207 ($generated@@164 ($generated@@208 #x00000003))))) (and ($generated@@188 $generated@@210) ($generated@@190 $generated@@210))))) (and (and (and (and (forall (($generated@@302 T@U) ) (!  (=> (= (type $generated@@302) $generated@@46) (=> (and (not (= $generated@@302 $generated@@182)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@205 $generated@@302) $generated@@50))) (= ($generated@@49 $generated@@210 $generated@@302) ($generated@@49 $generated@@205 $generated@@302))))
 :pattern ( ($generated@@49 $generated@@210 $generated@@302))
)) ($generated@@44 $generated@@205 $generated@@210)) (and (= $generated@@211 ($generated@@212 ($generated@@164 ($generated@@213 (bvsub #b0000000000000000000000000000000 #b0000000000000000000000000000001))))) (= $generated@@214 ($generated@@212 ($generated@@164 ($generated@@213 #b0000000000000000000000000000011)))))) (and (and ($generated@@188 $generated@@215) ($generated@@190 $generated@@215)) (and (forall (($generated@@303 T@U) ) (!  (=> (= (type $generated@@303) $generated@@46) (=> (and (not (= $generated@@303 $generated@@182)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@210 $generated@@303) $generated@@50))) (= ($generated@@49 $generated@@215 $generated@@303) ($generated@@49 $generated@@210 $generated@@303))))
 :pattern ( ($generated@@49 $generated@@215 $generated@@303))
)) ($generated@@44 $generated@@210 $generated@@215)))) (and (and (and (= $generated@@216 ($generated@@217 ($generated@@164 ($generated@@218 (bvsub #x0000 #x0001))))) (= $generated@@219 ($generated@@217 ($generated@@164 ($generated@@218 #x0003))))) (and ($generated@@188 $generated@@220) ($generated@@190 $generated@@220))) (and (and (forall (($generated@@304 T@U) ) (!  (=> (= (type $generated@@304) $generated@@46) (=> (and (not (= $generated@@304 $generated@@182)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@215 $generated@@304) $generated@@50))) (= ($generated@@49 $generated@@220 $generated@@304) ($generated@@49 $generated@@215 $generated@@304))))
 :pattern ( ($generated@@49 $generated@@220 $generated@@304))
)) ($generated@@44 $generated@@215 $generated@@220)) (and (= $generated@@221 ($generated@@222 ($generated@@164 ($generated@@223 (bvsub #b000000000000000 #b000000000000001))))) (= $generated@@224 ($generated@@222 ($generated@@164 ($generated@@223 #b000000000000011))))))))) (and (and (and (and (and ($generated@@188 $generated@@225) ($generated@@190 $generated@@225)) (and (forall (($generated@@305 T@U) ) (!  (=> (= (type $generated@@305) $generated@@46) (=> (and (not (= $generated@@305 $generated@@182)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@220 $generated@@305) $generated@@50))) (= ($generated@@49 $generated@@225 $generated@@305) ($generated@@49 $generated@@220 $generated@@305))))
 :pattern ( ($generated@@49 $generated@@225 $generated@@305))
)) ($generated@@44 $generated@@220 $generated@@225))) (and (and (= $generated@@226 ($generated@@227 ($generated@@164 ($generated@@228 (bvsub #x00 #x01))))) (= $generated@@229 ($generated@@227 ($generated@@164 ($generated@@228 #x03))))) (and ($generated@@188 $generated@@230) ($generated@@190 $generated@@230)))) (and (and (and (forall (($generated@@306 T@U) ) (!  (=> (= (type $generated@@306) $generated@@46) (=> (and (not (= $generated@@306 $generated@@182)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@225 $generated@@306) $generated@@50))) (= ($generated@@49 $generated@@230 $generated@@306) ($generated@@49 $generated@@225 $generated@@306))))
 :pattern ( ($generated@@49 $generated@@230 $generated@@306))
)) ($generated@@44 $generated@@225 $generated@@230)) (and (= $generated@@231 ($generated@@232 ($generated@@164 ($generated@@233 (bvsub #b000000 #b000001))))) (= $generated@@234 ($generated@@232 ($generated@@164 ($generated@@233 #b000011)))))) (and (and ($generated@@188 $generated@@235) ($generated@@190 $generated@@235)) (and (forall (($generated@@307 T@U) ) (!  (=> (= (type $generated@@307) $generated@@46) (=> (and (not (= $generated@@307 $generated@@182)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@230 $generated@@307) $generated@@50))) (= ($generated@@49 $generated@@235 $generated@@307) ($generated@@49 $generated@@230 $generated@@307))))
 :pattern ( ($generated@@49 $generated@@235 $generated@@307))
)) ($generated@@44 $generated@@230 $generated@@235))))) (and (and (and (and (= $generated@@236 ($generated@@237 ($generated@@164 ($generated@@238 #b1)))) (= $generated@@239 ($generated@@237 ($generated@@164 ($generated@@238 #b1))))) (and ($generated@@188 $generated@@240) ($generated@@190 $generated@@240))) (and (and (forall (($generated@@308 T@U) ) (!  (=> (= (type $generated@@308) $generated@@46) (=> (and (not (= $generated@@308 $generated@@182)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@235 $generated@@308) $generated@@50))) (= ($generated@@49 $generated@@240 $generated@@308) ($generated@@49 $generated@@235 $generated@@308))))
 :pattern ( ($generated@@49 $generated@@240 $generated@@308))
)) ($generated@@44 $generated@@235 $generated@@240)) (and (= $generated@@241 ($generated@@162 0)) (= $generated@@242 ($generated@@162 0))))) (and (and (and ($generated@@188 $generated@@243) ($generated@@190 $generated@@243)) (forall (($generated@@309 T@U) ) (!  (=> (= (type $generated@@309) $generated@@46) (=> (and (not (= $generated@@309 $generated@@182)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@240 $generated@@309) $generated@@50))) (= ($generated@@49 $generated@@243 $generated@@309) ($generated@@49 $generated@@240 $generated@@309))))
 :pattern ( ($generated@@49 $generated@@243 $generated@@309))
))) (and (and ($generated@@44 $generated@@240 $generated@@243) (= $generated@@244 ($generated@@245 ($generated@@164 ($generated@@246 #b11))))) (and (= $generated@@247 ($generated@@245 ($generated@@164 ($generated@@246 #b10)))) (= (ControlFlow 0 2) (- 0 1)))))))) (not (= $generated@@247 #b00))))))))
(let (($generated@@310  (=> (and (and ($generated@@188 $generated@@183) ($generated@@190 $generated@@183)) (and (= 2 $generated@@248) (= (ControlFlow 0 3) 2))) $generated@@297)))
$generated@@310)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () (_ BitVec 2))
(declare-fun $generated@@162 (T@U) Bool)
(declare-fun $generated@@163 (T@U) Bool)
(declare-fun $generated@@164 () Int)
(assert  (and (and (and (= (type $generated@@157) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@158) $generated@@47)) (= (type $generated@@159) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@160) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@165  (=> (= $generated@@157 ($generated@@45 $generated@@158 $generated@@159 $generated@@160 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (not (= $generated@@161 #b00))) (=> (= (ControlFlow 0 2) (- 0 1)) (not (= $generated@@161 #b00)))))))
(let (($generated@@166  (=> (and (and (and ($generated@@162 $generated@@159) ($generated@@163 $generated@@159)) (= 1 $generated@@164)) (and (not (= $generated@@161 #b00)) (= (ControlFlow 0 4) 2))) $generated@@165)))
$generated@@166)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 (T@T T@T) T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U T@U) T@U)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@108 (T@T T@T) T@T)
(declare-fun $generated@@109 (T@T) T@T)
(declare-fun $generated@@110 (T@T) T@T)
(declare-fun $generated@@111 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (Int) Int)
(declare-fun $generated@@164 (T@U) T@U)
(declare-fun $generated@@168 (Int) T@U)
(declare-fun $generated@@169 (T@U) Int)
(declare-fun $generated@@170 () T@T)
(declare-fun $generated@@173 (T@T) T@U)
(declare-fun $generated@@174 (T@U) Int)
(declare-fun $generated@@175 (T@T) T@T)
(declare-fun $generated@@176 (T@T) T@T)
(declare-fun $generated@@181 (T@U T@U) T@U)
(declare-fun $generated@@194 (Int) T@U)
(declare-fun $generated@@195 (T@U) Int)
(declare-fun $generated@@196 () T@T)
(declare-fun $generated@@199 (T@U) T@U)
(declare-fun $generated@@200 (T@T T@U) T@U)
(declare-fun $generated@@201 () T@T)
(declare-fun $generated@@207 (T@U) T@U)
(declare-fun $generated@@208 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@1 ($generated@@45 $generated@@57 $generated@@58)) 6)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@51 ($generated@@45 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@45 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@52 ($generated@@45 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@45 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (let (($generated@@65 ($generated@@52 (type $generated@@63))))
(= (type ($generated@@49 $generated@@63 $generated@@64)) $generated@@65))
 :pattern ( ($generated@@49 $generated@@63 $generated@@64))
))) (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 (type $generated@@68)))
(let (($generated@@70 (type $generated@@67)))
(= (type ($generated@@53 $generated@@66 $generated@@67 $generated@@68)) ($generated@@45 $generated@@70 $generated@@69))))
 :pattern ( ($generated@@53 $generated@@66 $generated@@67 $generated@@68))
))) (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@52 (type $generated@@71))))
 (=> (= (type $generated@@73) $generated@@74) (= ($generated@@49 ($generated@@53 $generated@@71 $generated@@72 $generated@@73) $generated@@72) $generated@@73)))
 :weight 0
))) (and (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@77 $generated@@78) (= ($generated@@49 ($generated@@53 $generated@@76 $generated@@77 $generated@@75) $generated@@78) ($generated@@49 $generated@@76 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or true (= ($generated@@49 ($generated@@53 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@49 $generated@@80 $generated@@82)))
 :weight 0
)))) (= ($generated@@1 $generated@@46) 7)) (forall (($generated@@83 T@T) ) (= ($generated@@1 ($generated@@54 $generated@@83)) 8))) (forall (($generated@@84 T@T) ) (! (= ($generated@@55 ($generated@@54 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@54 $generated@@84))
))) (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (! (let (($generated@@87 ($generated@@55 (type $generated@@86))))
(= (type ($generated@@48 $generated@@85 $generated@@86)) $generated@@87))
 :pattern ( ($generated@@48 $generated@@85 $generated@@86))
))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= (type ($generated@@56 $generated@@88 $generated@@89 $generated@@90)) $generated@@47)
 :pattern ( ($generated@@56 $generated@@88 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (let (($generated@@94 ($generated@@55 (type $generated@@92))))
 (=> (= (type $generated@@93) $generated@@94) (= ($generated@@48 ($generated@@56 $generated@@91 $generated@@92 $generated@@93) $generated@@92) $generated@@93)))
 :weight 0
))) (and (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@97 $generated@@98) (= ($generated@@48 ($generated@@56 $generated@@96 $generated@@97 $generated@@95) $generated@@98) ($generated@@48 $generated@@96 $generated@@98)))
 :weight 0
)) (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or true (= ($generated@@48 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@48 $generated@@100 $generated@@102)))
 :weight 0
)))) (= (type $generated@@50) ($generated@@54 $generated@@4))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (and (and (= (type $generated@@103) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@104) ($generated@@45 $generated@@46 $generated@@47))) ($generated@@44 $generated@@103 $generated@@104)) (forall (($generated@@105 T@U) ) (!  (=> (and (= (type $generated@@105) $generated@@46) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@103 $generated@@105) $generated@@50))) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50)))
 :pattern ( ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50))
)))
 :pattern ( ($generated@@44 $generated@@103 $generated@@104))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@108 $generated@@112 $generated@@113)) 10)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@109 ($generated@@108 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@108 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@110 ($generated@@108 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@108 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@110 (type $generated@@118))))
(= (type ($generated@@106 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@106 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@108 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@110 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@106 ($generated@@111 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@106 ($generated@@111 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@106 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@106 ($generated@@111 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@106 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@106 ($generated@@111 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@106 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@108 $generated@@46 $generated@@4))
 :pattern ( ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@55 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@46) (= (type $generated@@156) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@157) ($generated@@54 $generated@@4))) (= (type $generated@@159) $generated@@46)) (= (type $generated@@160) ($generated@@54 $generated@@161))) (= ($generated@@0 ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 Int) ) (! (= ($generated@@162 $generated@@163) $generated@@163)
 :pattern ( ($generated@@162 $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ) (! (let (($generated@@166 (type $generated@@165)))
(= (type ($generated@@164 $generated@@165)) $generated@@166))
 :pattern ( ($generated@@164 $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! (= ($generated@@164 $generated@@167) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167))
)))
(assert  (and (= ($generated@@1 $generated@@170) 11) (forall (($generated@@171 Int) ) (! (= (type ($generated@@168 $generated@@171)) $generated@@170)
 :pattern ( ($generated@@168 $generated@@171))
))))
(assert (forall (($generated@@172 Int) ) (!  (=> (and (<= 0 $generated@@172) (< $generated@@172 65536)) (= ($generated@@169 ($generated@@168 $generated@@172)) $generated@@172))
 :pattern ( ($generated@@168 $generated@@172))
)))
(assert  (and (and (forall (($generated@@177 T@T) ) (= ($generated@@1 ($generated@@175 $generated@@177)) 12)) (forall (($generated@@178 T@T) ) (! (= ($generated@@176 ($generated@@175 $generated@@178)) $generated@@178)
 :pattern ( ($generated@@175 $generated@@178))
))) (forall (($generated@@179 T@T) ) (! (= (type ($generated@@173 $generated@@179)) ($generated@@175 $generated@@179))
 :pattern ( ($generated@@173 $generated@@179))
))))
(assert (forall (($generated@@180 T@T) ) (! (= ($generated@@174 ($generated@@173 $generated@@180)) 0)
 :pattern ( ($generated@@173 $generated@@180))
)))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@U) ) (! (let (($generated@@184 (type $generated@@183)))
(= (type ($generated@@181 $generated@@182 $generated@@183)) ($generated@@175 $generated@@184)))
 :pattern ( ($generated@@181 $generated@@182 $generated@@183))
)))
(assert (forall (($generated@@185 T@U) ($generated@@186 T@U) ) (! (let (($generated@@187 (type $generated@@186)))
 (=> (= (type $generated@@185) ($generated@@175 $generated@@187)) (= ($generated@@174 ($generated@@181 $generated@@185 $generated@@186)) (+ 1 ($generated@@174 $generated@@185)))))
 :pattern ( ($generated@@181 $generated@@185 $generated@@186))
)))
(assert (forall (($generated@@188 T@U) ) (!  (=> (= (type $generated@@188) $generated@@170) (and (and (= ($generated@@168 ($generated@@169 $generated@@188)) $generated@@188) (<= 0 ($generated@@169 $generated@@188))) (< ($generated@@169 $generated@@188) 65536)))
 :pattern ( ($generated@@169 $generated@@188))
)))
(assert (forall (($generated@@189 T@U) ($generated@@190 T@U) ($generated@@191 T@U) ) (!  (=> (and (and (and (and (= (type $generated@@189) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@190) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@191) ($generated@@45 $generated@@46 $generated@@47))) (not (= $generated@@189 $generated@@191))) (and ($generated@@44 $generated@@189 $generated@@190) ($generated@@44 $generated@@190 $generated@@191))) ($generated@@44 $generated@@189 $generated@@191))
 :pattern ( ($generated@@44 $generated@@189 $generated@@190) ($generated@@44 $generated@@190 $generated@@191))
)))
(assert (forall (($generated@@192 T@U) ) (! (let (($generated@@193 ($generated@@176 (type $generated@@192))))
 (=> (= (type $generated@@192) ($generated@@175 $generated@@193)) (<= 0 ($generated@@174 $generated@@192))))
 :pattern ( ($generated@@174 $generated@@192))
)))
(assert  (and (= ($generated@@1 $generated@@196) 13) (forall (($generated@@197 Int) ) (! (= (type ($generated@@194 $generated@@197)) $generated@@196)
 :pattern ( ($generated@@194 $generated@@197))
))))
(assert (forall (($generated@@198 Int) ) (! (= ($generated@@195 ($generated@@194 $generated@@198)) $generated@@198)
 :pattern ( ($generated@@194 $generated@@198))
)))
(assert  (and (and (= ($generated@@1 $generated@@201) 14) (forall (($generated@@202 T@U) ) (! (= (type ($generated@@199 $generated@@202)) $generated@@201)
 :pattern ( ($generated@@199 $generated@@202))
))) (forall (($generated@@203 T@T) ($generated@@204 T@U) ) (! (= (type ($generated@@200 $generated@@203 $generated@@204)) $generated@@203)
 :pattern ( ($generated@@200 $generated@@203 $generated@@204))
))))
(assert (forall (($generated@@205 T@U) ) (! (let (($generated@@206 (type $generated@@205)))
(= ($generated@@200 $generated@@206 ($generated@@199 $generated@@205)) $generated@@205))
 :pattern ( ($generated@@199 $generated@@205))
)))
(assert  (and (forall (($generated@@209 T@U) ) (! (let (($generated@@210 ($generated@@176 (type $generated@@209))))
(= (type ($generated@@207 $generated@@209)) ($generated@@175 $generated@@210)))
 :pattern ( ($generated@@207 $generated@@209))
)) (forall (($generated@@211 T@U) ) (! (let (($generated@@212 ($generated@@176 (type $generated@@211))))
(= (type ($generated@@208 $generated@@211)) $generated@@212))
 :pattern ( ($generated@@208 $generated@@211))
))))
(assert (forall (($generated@@213 T@U) ($generated@@214 T@U) ) (! (let (($generated@@215 (type $generated@@214)))
 (=> (= (type $generated@@213) ($generated@@175 $generated@@215)) (and (= ($generated@@207 ($generated@@181 $generated@@213 $generated@@214)) $generated@@213) (= ($generated@@208 ($generated@@181 $generated@@213 $generated@@214)) $generated@@214))))
 :pattern ( ($generated@@181 $generated@@213 $generated@@214))
)))
(assert (forall (($generated@@216 Int) ) (! (= ($generated@@199 ($generated@@8 ($generated@@162 $generated@@216))) ($generated@@164 ($generated@@199 ($generated@@8 $generated@@216))))
 :pattern ( ($generated@@199 ($generated@@8 ($generated@@162 $generated@@216))))
)))
(assert (forall (($generated@@217 T@U) ) (! (= ($generated@@199 ($generated@@164 $generated@@217)) ($generated@@164 ($generated@@199 $generated@@217)))
 :pattern ( ($generated@@199 ($generated@@164 $generated@@217)))
)))
(assert (forall (($generated@@218 T@U) ) (! (let (($generated@@219 ($generated@@176 (type $generated@@218))))
 (=> (and (= (type $generated@@218) ($generated@@175 $generated@@219)) (= ($generated@@174 $generated@@218) 0)) (= $generated@@218 ($generated@@173 $generated@@219))))
 :pattern ( ($generated@@174 $generated@@218))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@220 () T@U)
(declare-fun $generated@@221 () T@U)
(declare-fun $generated@@222 () T@U)
(declare-fun $generated@@223 () Int)
(declare-fun $generated@@224 () Int)
(declare-fun $generated@@225 () Int)
(declare-fun $generated@@226 () Int)
(declare-fun $generated@@227 () Int)
(declare-fun $generated@@228 () (_ BitVec 67))
(declare-fun $generated@@229 (T@U) (_ BitVec 67))
(declare-fun $generated@@230 ((_ BitVec 67)) T@U)
(declare-fun $generated@@231 () (_ BitVec 32))
(declare-fun $generated@@232 (T@U) (_ BitVec 32))
(declare-fun $generated@@233 ((_ BitVec 32)) T@U)
(declare-fun $generated@@234 () (_ BitVec 7))
(declare-fun $generated@@235 (T@U) (_ BitVec 7))
(declare-fun $generated@@236 ((_ BitVec 7)) T@U)
(declare-fun $generated@@237 () T@U)
(declare-fun $generated@@238 () (_ BitVec 67))
(declare-fun $generated@@239 () (_ BitVec 67))
(declare-fun $generated@@240 () (_ BitVec 67))
(declare-fun $generated@@241 () T@U)
(declare-fun $generated@@242 () T@U)
(declare-fun $generated@@243 () T@U)
(declare-fun $generated@@244 () T@U)
(declare-fun $generated@@245 () T@U)
(declare-fun $generated@@246 (T@U) Bool)
(declare-fun $generated@@247 () T@U)
(declare-fun $generated@@248 (T@U) Bool)
(declare-fun $generated@@249 () T@U)
(declare-fun $generated@@250 () (_ BitVec 32))
(declare-fun $generated@@251 () (_ BitVec 32))
(declare-fun $generated@@252 () (_ BitVec 32))
(declare-fun $generated@@253 () T@U)
(declare-fun $generated@@254 () T@U)
(declare-fun $generated@@255 () T@U)
(declare-fun $generated@@256 () T@U)
(declare-fun $generated@@257 () T@U)
(declare-fun $generated@@258 () T@U)
(declare-fun $generated@@259 () T@U)
(declare-fun $generated@@260 () (_ BitVec 7))
(declare-fun $generated@@261 () (_ BitVec 7))
(declare-fun $generated@@262 () (_ BitVec 7))
(declare-fun $generated@@263 () T@U)
(declare-fun $generated@@264 () T@U)
(declare-fun $generated@@265 () T@U)
(declare-fun $generated@@266 () T@U)
(declare-fun $generated@@267 () T@U)
(declare-fun $generated@@268 () T@U)
(declare-fun $generated@@269 () (_ BitVec 2))
(declare-fun $generated@@270 (T@U) (_ BitVec 2))
(declare-fun $generated@@271 ((_ BitVec 2)) T@U)
(declare-fun $generated@@272 () Int)
(declare-fun $generated@@273 () Int)
(declare-fun $generated@@274 () Int)
(declare-fun $generated@@275 () T@U)
(declare-fun $generated@@276 () (_ BitVec 2))
(declare-fun $generated@@277 () (_ BitVec 2))
(declare-fun $generated@@278 () (_ BitVec 2))
(declare-fun $generated@@279 () T@U)
(declare-fun $generated@@280 () T@U)
(declare-fun $generated@@281 () T@U)
(declare-fun $generated@@282 () T@U)
(declare-fun $generated@@283 () T@U)
(declare-fun $generated@@284 () T@U)
(declare-fun $generated@@285 () Int)
(declare-fun $generated@@286 () Int)
(declare-fun $generated@@287 () Int)
(declare-fun $generated@@288 () T@U)
(declare-fun $generated@@289 () Int)
(declare-fun $generated@@290 () Int)
(declare-fun $generated@@291 () Int)
(declare-fun $generated@@292 () T@U)
(declare-fun $generated@@293 () T@U)
(declare-fun $generated@@294 () T@U)
(declare-fun $generated@@295 () T@U)
(declare-fun $generated@@296 () T@U)
(declare-fun $generated@@297 () T@U)
(declare-fun $generated@@298 () (_ BitVec 67))
(declare-fun $generated@@299 () (_ BitVec 32))
(declare-fun $generated@@300 () (_ BitVec 2))
(declare-fun $generated@@301 () Int)
(declare-fun $generated@@302 () (_ BitVec 67))
(declare-fun $generated@@303 () T@U)
(declare-fun $generated@@304 () (_ BitVec 67))
(declare-fun $generated@@305 () (_ BitVec 67))
(declare-fun $generated@@306 () (_ BitVec 67))
(declare-fun $generated@@307 () (_ BitVec 67))
(declare-fun $generated@@308 () T@U)
(declare-fun $generated@@309 () T@U)
(declare-fun $generated@@310 () T@U)
(declare-fun $generated@@311 () T@U)
(declare-fun $generated@@312 () T@U)
(declare-fun $generated@@313 () T@U)
(declare-fun $generated@@314 () (_ BitVec 67))
(declare-fun $generated@@315 () (_ BitVec 32))
(declare-fun $generated@@316 () (_ BitVec 2))
(declare-fun $generated@@317 () Int)
(declare-fun $generated@@318 () (_ BitVec 32))
(declare-fun $generated@@319 () T@U)
(declare-fun $generated@@320 () (_ BitVec 32))
(declare-fun $generated@@321 () (_ BitVec 32))
(declare-fun $generated@@322 () (_ BitVec 32))
(declare-fun $generated@@323 () (_ BitVec 32))
(declare-fun $generated@@324 () T@U)
(declare-fun $generated@@325 () T@U)
(declare-fun $generated@@326 () T@U)
(declare-fun $generated@@327 () T@U)
(declare-fun $generated@@328 () T@U)
(declare-fun $generated@@329 () T@U)
(declare-fun $generated@@330 () (_ BitVec 7))
(declare-fun $generated@@331 () (_ BitVec 67))
(declare-fun $generated@@332 () (_ BitVec 32))
(declare-fun $generated@@333 () (_ BitVec 2))
(declare-fun $generated@@334 () Int)
(declare-fun $generated@@335 () T@U)
(declare-fun $generated@@336 () (_ BitVec 7))
(declare-fun $generated@@337 () (_ BitVec 7))
(declare-fun $generated@@338 () (_ BitVec 7))
(declare-fun $generated@@339 () (_ BitVec 7))
(declare-fun $generated@@340 () T@U)
(declare-fun $generated@@341 () T@U)
(declare-fun $generated@@342 () T@U)
(declare-fun $generated@@343 () T@U)
(declare-fun $generated@@344 () T@U)
(declare-fun $generated@@345 () T@U)
(declare-fun $generated@@346 () (_ BitVec 67))
(declare-fun $generated@@347 () (_ BitVec 32))
(declare-fun $generated@@348 () (_ BitVec 2))
(declare-fun $generated@@349 () T@U)
(declare-fun $generated@@350 () Int)
(declare-fun $generated@@351 () Int)
(declare-fun $generated@@352 () Int)
(declare-fun $generated@@353 () Int)
(declare-fun $generated@@354 () Int)
(declare-fun $generated@@355 () Int)
(declare-fun $generated@@356 () T@T)
(declare-fun $generated@@357 () T@T)
(declare-fun $generated@@358 () T@T)
(declare-fun $generated@@359 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type $generated@@220) ($generated@@108 $generated@@46 $generated@@4)) (= (type $generated@@221) $generated@@46)) (= (type $generated@@222) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@360 (_ BitVec 67)) ) (! (= ($generated@@229 ($generated@@230 $generated@@360)) $generated@@360)
 :pattern ( ($generated@@230 $generated@@360))
))) (= ($generated@@1 $generated@@356) 15)) (forall (($generated@@361 T@U) ) (!  (=> (= (type $generated@@361) $generated@@356) (= ($generated@@230 ($generated@@229 $generated@@361)) $generated@@361))
 :pattern ( ($generated@@229 $generated@@361))
))) (forall (($generated@@362 (_ BitVec 67)) ) (! (= (type ($generated@@230 $generated@@362)) $generated@@356)
 :pattern ( ($generated@@230 $generated@@362))
))) (forall (($generated@@363 (_ BitVec 32)) ) (! (= ($generated@@232 ($generated@@233 $generated@@363)) $generated@@363)
 :pattern ( ($generated@@233 $generated@@363))
))) (= ($generated@@1 $generated@@357) 16)) (forall (($generated@@364 T@U) ) (!  (=> (= (type $generated@@364) $generated@@357) (= ($generated@@233 ($generated@@232 $generated@@364)) $generated@@364))
 :pattern ( ($generated@@232 $generated@@364))
))) (forall (($generated@@365 (_ BitVec 32)) ) (! (= (type ($generated@@233 $generated@@365)) $generated@@357)
 :pattern ( ($generated@@233 $generated@@365))
))) (forall (($generated@@366 (_ BitVec 7)) ) (! (= ($generated@@235 ($generated@@236 $generated@@366)) $generated@@366)
 :pattern ( ($generated@@236 $generated@@366))
))) (= ($generated@@1 $generated@@358) 17)) (forall (($generated@@367 T@U) ) (!  (=> (= (type $generated@@367) $generated@@358) (= ($generated@@236 ($generated@@235 $generated@@367)) $generated@@367))
 :pattern ( ($generated@@235 $generated@@367))
))) (forall (($generated@@368 (_ BitVec 7)) ) (! (= (type ($generated@@236 $generated@@368)) $generated@@358)
 :pattern ( ($generated@@236 $generated@@368))
))) (= (type $generated@@237) ($generated@@175 $generated@@201))) (= (type $generated@@241) $generated@@196)) (= (type $generated@@242) $generated@@201)) (= (type $generated@@243) $generated@@201)) (= (type $generated@@244) $generated@@201)) (= (type $generated@@245) $generated@@201)) (= (type $generated@@247) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@249) ($generated@@175 $generated@@201))) (= (type $generated@@253) $generated@@196)) (= (type $generated@@254) $generated@@201)) (= (type $generated@@255) $generated@@201)) (= (type $generated@@256) $generated@@201)) (= (type $generated@@257) $generated@@201)) (= (type $generated@@258) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@259) ($generated@@175 $generated@@201))) (= (type $generated@@263) $generated@@196)) (= (type $generated@@264) $generated@@201)) (= (type $generated@@265) $generated@@201)) (= (type $generated@@266) $generated@@201)) (= (type $generated@@267) $generated@@201)) (= (type $generated@@268) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@369 (_ BitVec 2)) ) (! (= ($generated@@270 ($generated@@271 $generated@@369)) $generated@@369)
 :pattern ( ($generated@@271 $generated@@369))
))) (= ($generated@@1 $generated@@359) 18)) (forall (($generated@@370 T@U) ) (!  (=> (= (type $generated@@370) $generated@@359) (= ($generated@@271 ($generated@@270 $generated@@370)) $generated@@370))
 :pattern ( ($generated@@270 $generated@@370))
))) (forall (($generated@@371 (_ BitVec 2)) ) (! (= (type ($generated@@271 $generated@@371)) $generated@@359)
 :pattern ( ($generated@@271 $generated@@371))
))) (= (type $generated@@275) ($generated@@175 $generated@@201))) (= (type $generated@@279) $generated@@196)) (= (type $generated@@280) $generated@@201)) (= (type $generated@@281) $generated@@201)) (= (type $generated@@282) $generated@@201)) (= (type $generated@@283) $generated@@201)) (= (type $generated@@284) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@288) ($generated@@175 $generated@@201))) (= (type $generated@@292) $generated@@196)) (= (type $generated@@293) $generated@@201)) (= (type $generated@@294) $generated@@201)) (= (type $generated@@295) $generated@@201)) (= (type $generated@@296) $generated@@201)) (= (type $generated@@297) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@303) ($generated@@175 $generated@@201))) (= (type $generated@@308) $generated@@196)) (= (type $generated@@309) $generated@@201)) (= (type $generated@@310) $generated@@201)) (= (type $generated@@311) $generated@@201)) (= (type $generated@@312) $generated@@201)) (= (type $generated@@313) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@319) ($generated@@175 $generated@@201))) (= (type $generated@@324) $generated@@196)) (= (type $generated@@325) $generated@@201)) (= (type $generated@@326) $generated@@201)) (= (type $generated@@327) $generated@@201)) (= (type $generated@@328) $generated@@201)) (= (type $generated@@329) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@335) ($generated@@175 $generated@@201))) (= (type $generated@@340) $generated@@196)) (= (type $generated@@341) $generated@@201)) (= (type $generated@@342) $generated@@201)) (= (type $generated@@343) $generated@@201)) (= (type $generated@@344) $generated@@201)) (= (type $generated@@345) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@349) ($generated@@175 $generated@@201))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 50) (let (($generated@@372  (=> (= $generated@@220 ($generated@@107 $generated@@221 $generated@@222 $generated@@50 false)) (=> (and (and (and (<= ($generated@@162 0) $generated@@223) (< $generated@@223 80)) (= 0 $generated@@224)) (and (= $generated@@225 ($generated@@162 3)) (= $generated@@226 ($generated@@162 3)))) (and (=> (= (ControlFlow 0 2) (- 0 49)) (and (<= ($generated@@162 0) $generated@@226) (< $generated@@226 80))) (=> (and (<= ($generated@@162 0) $generated@@226) (< $generated@@226 80)) (=> (and (= $generated@@227 ($generated@@162 3)) (= $generated@@228 ($generated@@229 ($generated@@164 ($generated@@230 #b0000000000000000000000000000000000000000000000000000000000000000101))))) (=> (and (and (= $generated@@231 ($generated@@232 ($generated@@164 ($generated@@233 #x00000005)))) (= $generated@@234 ($generated@@235 ($generated@@164 ($generated@@236 #b0000101))))) (and (= $generated@@237 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 54))) ($generated@@199 ($generated@@168 55))))) (= $generated@@238 (bvmul #b0000000000000000000000000000000000000000000000000000000000000001000 $generated@@228)))) (and (=> (= (ControlFlow 0 2) (- 0 48)) (and (<= 0 $generated@@225) (< $generated@@225 128))) (=> (and (<= 0 $generated@@225) (< $generated@@225 128)) (and (=> (= (ControlFlow 0 2) (- 0 47)) (bvule ((_ int2bv 7) $generated@@225) #b1000011)) (=> (bvule ((_ int2bv 7) $generated@@225) #b1000011) (=> (= $generated@@239 (bvshl $generated@@228 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) $generated@@225)))) (and (=> (= (ControlFlow 0 2) (- 0 46)) (and (<= 0 $generated@@227) (< $generated@@227 128))) (=> (and (<= 0 $generated@@227) (< $generated@@227 128)) (and (=> (= (ControlFlow 0 2) (- 0 45)) (bvule ((_ int2bv 7) $generated@@227) #b1000011)) (=> (bvule ((_ int2bv 7) $generated@@227) #b1000011) (=> (and (and (= $generated@@240 (bvshl $generated@@228 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) $generated@@227)))) (= $generated@@241 ($generated@@194 67))) (and (= $generated@@242 ($generated@@199 ($generated@@230 $generated@@228))) (= $generated@@243 ($generated@@199 ($generated@@230 $generated@@238))))) (=> (and (and (and (= $generated@@244 ($generated@@199 ($generated@@230 $generated@@239))) (= $generated@@245 ($generated@@199 ($generated@@230 $generated@@240)))) (and ($generated@@246 $generated@@247) ($generated@@248 $generated@@247))) (and (and (forall (($generated@@373 T@U) ) (!  (=> (= (type $generated@@373) $generated@@46) (=> (and (not (= $generated@@373 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@222 $generated@@373) $generated@@50))) (= ($generated@@49 $generated@@247 $generated@@373) ($generated@@49 $generated@@222 $generated@@373))))
 :pattern ( ($generated@@49 $generated@@247 $generated@@373))
)) ($generated@@44 $generated@@222 $generated@@247)) (and (= $generated@@249 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 51))) ($generated@@199 ($generated@@168 50))))) (= $generated@@250 (bvmul #x00000008 $generated@@231))))) (and (=> (= (ControlFlow 0 2) (- 0 44)) (and (<= 0 $generated@@225) (< $generated@@225 64))) (=> (and (<= 0 $generated@@225) (< $generated@@225 64)) (and (=> (= (ControlFlow 0 2) (- 0 43)) (bvule ((_ int2bv 6) $generated@@225) #b100000)) (=> (bvule ((_ int2bv 6) $generated@@225) #b100000) (=> (= $generated@@251 (bvshl $generated@@231 (concat #b00000000000000000000000000 ((_ int2bv 6) $generated@@225)))) (and (=> (= (ControlFlow 0 2) (- 0 42)) (and (<= 0 $generated@@227) (< $generated@@227 64))) (=> (and (<= 0 $generated@@227) (< $generated@@227 64)) (and (=> (= (ControlFlow 0 2) (- 0 41)) (bvule ((_ int2bv 6) $generated@@227) #b100000)) (=> (bvule ((_ int2bv 6) $generated@@227) #b100000) (=> (and (and (= $generated@@252 (bvshl $generated@@231 (concat #b00000000000000000000000000 ((_ int2bv 6) $generated@@227)))) (= $generated@@253 ($generated@@194 32))) (and (= $generated@@254 ($generated@@199 ($generated@@233 $generated@@231))) (= $generated@@255 ($generated@@199 ($generated@@233 $generated@@250))))) (=> (and (and (and (= $generated@@256 ($generated@@199 ($generated@@233 $generated@@251))) (= $generated@@257 ($generated@@199 ($generated@@233 $generated@@252)))) (and ($generated@@246 $generated@@258) ($generated@@248 $generated@@258))) (and (and (forall (($generated@@374 T@U) ) (!  (=> (= (type $generated@@374) $generated@@46) (=> (and (not (= $generated@@374 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@247 $generated@@374) $generated@@50))) (= ($generated@@49 $generated@@258 $generated@@374) ($generated@@49 $generated@@247 $generated@@374))))
 :pattern ( ($generated@@49 $generated@@258 $generated@@374))
)) ($generated@@44 $generated@@247 $generated@@258)) (and (= $generated@@259 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 55))))) (= $generated@@260 (bvmul #b0001000 $generated@@234))))) (and (=> (= (ControlFlow 0 2) (- 0 40)) (and (<= 0 $generated@@225) (< $generated@@225 8))) (=> (and (<= 0 $generated@@225) (< $generated@@225 8)) (and (=> (= (ControlFlow 0 2) (- 0 39)) (bvule ((_ int2bv 3) $generated@@225) #b111)) (=> (bvule ((_ int2bv 3) $generated@@225) #b111) (=> (= $generated@@261 (bvshl $generated@@234 (concat #b0000 ((_ int2bv 3) $generated@@225)))) (and (=> (= (ControlFlow 0 2) (- 0 38)) (and (<= 0 $generated@@227) (< $generated@@227 8))) (=> (and (<= 0 $generated@@227) (< $generated@@227 8)) (and (=> (= (ControlFlow 0 2) (- 0 37)) (bvule ((_ int2bv 3) $generated@@227) #b111)) (=> (bvule ((_ int2bv 3) $generated@@227) #b111) (=> (and (= $generated@@262 (bvshl $generated@@234 (concat #b0000 ((_ int2bv 3) $generated@@227)))) (= $generated@@263 ($generated@@194 7))) (=> (and (and (= $generated@@264 ($generated@@199 ($generated@@236 $generated@@234))) (= $generated@@265 ($generated@@199 ($generated@@236 $generated@@260)))) (and (= $generated@@266 ($generated@@199 ($generated@@236 $generated@@261))) (= $generated@@267 ($generated@@199 ($generated@@236 $generated@@262))))) (=> (and (and (and ($generated@@246 $generated@@268) ($generated@@248 $generated@@268)) (forall (($generated@@375 T@U) ) (!  (=> (= (type $generated@@375) $generated@@46) (=> (and (not (= $generated@@375 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@258 $generated@@375) $generated@@50))) (= ($generated@@49 $generated@@268 $generated@@375) ($generated@@49 $generated@@258 $generated@@375))))
 :pattern ( ($generated@@49 $generated@@268 $generated@@375))
))) (and (and ($generated@@44 $generated@@258 $generated@@268) (= $generated@@269 ($generated@@270 ($generated@@164 ($generated@@271 #b01))))) (and (= $generated@@272 ($generated@@162 1)) (= $generated@@273 ($generated@@162 1))))) (and (=> (= (ControlFlow 0 2) (- 0 36)) (and (<= ($generated@@162 0) $generated@@273) (< $generated@@273 80))) (=> (and (<= ($generated@@162 0) $generated@@273) (< $generated@@273 80)) (=> (= $generated@@274 ($generated@@162 1)) (=> (and (= $generated@@275 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 50))))) (= $generated@@276 (bvmul #b10 $generated@@269))) (and (=> (= (ControlFlow 0 2) (- 0 35)) (and (<= 0 $generated@@272) (< $generated@@272 4))) (=> (and (<= 0 $generated@@272) (< $generated@@272 4)) (and (=> (= (ControlFlow 0 2) (- 0 34)) (bvule ((_ int2bv 2) $generated@@272) #b10)) (=> (bvule ((_ int2bv 2) $generated@@272) #b10) (=> (= $generated@@277 (bvshl $generated@@269 ((_ int2bv 2) $generated@@272))) (and (=> (= (ControlFlow 0 2) (- 0 33)) (and (<= 0 $generated@@274) (< $generated@@274 4))) (=> (and (<= 0 $generated@@274) (< $generated@@274 4)) (and (=> (= (ControlFlow 0 2) (- 0 32)) (bvule ((_ int2bv 2) $generated@@274) #b10)) (=> (bvule ((_ int2bv 2) $generated@@274) #b10) (=> (and (and (= $generated@@278 (bvshl $generated@@269 ((_ int2bv 2) $generated@@274))) (= $generated@@279 ($generated@@194 2))) (and (= $generated@@280 ($generated@@199 ($generated@@271 $generated@@269))) (= $generated@@281 ($generated@@199 ($generated@@271 $generated@@276))))) (=> (and (and (and (= $generated@@282 ($generated@@199 ($generated@@271 $generated@@277))) (= $generated@@283 ($generated@@199 ($generated@@271 $generated@@278)))) (and ($generated@@246 $generated@@284) ($generated@@248 $generated@@284))) (and (and (forall (($generated@@376 T@U) ) (!  (=> (= (type $generated@@376) $generated@@46) (=> (and (not (= $generated@@376 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@268 $generated@@376) $generated@@50))) (= ($generated@@49 $generated@@284 $generated@@376) ($generated@@49 $generated@@268 $generated@@376))))
 :pattern ( ($generated@@49 $generated@@284 $generated@@376))
)) ($generated@@44 $generated@@268 $generated@@284)) (and (= $generated@@285 ($generated@@162 0)) (= $generated@@286 ($generated@@162 0))))) (and (=> (= (ControlFlow 0 2) (- 0 31)) (and (<= ($generated@@162 0) $generated@@286) (< $generated@@286 80))) (=> (and (<= ($generated@@162 0) $generated@@286) (< $generated@@286 80)) (=> (= $generated@@287 ($generated@@162 0)) (=> (and (= $generated@@288 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 48))))) (= $generated@@289 0)) (and (=> (= (ControlFlow 0 2) (- 0 30)) (and (<= 0 $generated@@285) (< $generated@@285 1))) (=> (and (<= 0 $generated@@285) (< $generated@@285 1)) (and (=> (= (ControlFlow 0 2) (- 0 29)) true) (=> (= $generated@@290 0) (and (=> (= (ControlFlow 0 2) (- 0 28)) (and (<= 0 $generated@@287) (< $generated@@287 1))) (=> (and (<= 0 $generated@@287) (< $generated@@287 1)) (and (=> (= (ControlFlow 0 2) (- 0 27)) true) (=> (and (and (and (and (= $generated@@291 0) (= $generated@@292 ($generated@@194 0))) (and (= $generated@@293 ($generated@@199 ($generated@@8 $generated@@224))) (= $generated@@294 ($generated@@199 ($generated@@8 $generated@@289))))) (and (and (= $generated@@295 ($generated@@199 ($generated@@8 $generated@@290))) (= $generated@@296 ($generated@@199 ($generated@@8 $generated@@291)))) (and ($generated@@246 $generated@@297) ($generated@@248 $generated@@297)))) (and (and (and (forall (($generated@@377 T@U) ) (!  (=> (= (type $generated@@377) $generated@@46) (=> (and (not (= $generated@@377 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@284 $generated@@377) $generated@@50))) (= ($generated@@49 $generated@@297 $generated@@377) ($generated@@49 $generated@@284 $generated@@377))))
 :pattern ( ($generated@@49 $generated@@297 $generated@@377))
)) ($generated@@44 $generated@@284 $generated@@297)) (and (= $generated@@298 ($generated@@229 ($generated@@164 ($generated@@230 #b1000000000000000000000000000000000000000000000000000000000000000001)))) (= $generated@@299 ($generated@@232 ($generated@@164 ($generated@@233 #x00000001)))))) (and (and (= $generated@@300 ($generated@@270 ($generated@@164 ($generated@@271 #b01)))) (= $generated@@301 ($generated@@162 0))) (and (= $generated@@302 ($generated@@229 ($generated@@164 ($generated@@230 #b0000000000000000000000000000000000000000000000000000000000000000001)))) (= $generated@@303 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 54))) ($generated@@199 ($generated@@168 55))) ($generated@@199 ($generated@@168 32))) ($generated@@199 ($generated@@168 97))) ($generated@@199 ($generated@@168 103))) ($generated@@199 ($generated@@168 97))) ($generated@@199 ($generated@@168 105))) ($generated@@199 ($generated@@168 110))))))))) (and (=> (= (ControlFlow 0 2) (- 0 26)) (bvult $generated@@302 #b0000000000000000000000000000000000000000000000000000000000010000000)) (=> (bvult $generated@@302 #b0000000000000000000000000000000000000000000000000000000000010000000) (and (=> (= (ControlFlow 0 2) (- 0 25)) (bvule ((_ extract 6 0) $generated@@302) #b1000011)) (=> (bvule ((_ extract 6 0) $generated@@302) #b1000011) (=> (= $generated@@304 (bvshl $generated@@298 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ extract 6 0) $generated@@302)))) (and (=> (= (ControlFlow 0 2) (- 0 24)) (bvult $generated@@299 #x00000080)) (=> (bvult $generated@@299 #x00000080) (and (=> (= (ControlFlow 0 2) (- 0 23)) (bvule ((_ extract 6 0) $generated@@299) #b1000011)) (=> (bvule ((_ extract 6 0) $generated@@299) #b1000011) (=> (= $generated@@305 (bvshl $generated@@298 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ extract 6 0) $generated@@299)))) (and (=> (= (ControlFlow 0 2) (- 0 22)) (bvule (concat #b00000 $generated@@300) #b1000011)) (=> (bvule (concat #b00000 $generated@@300) #b1000011) (=> (= $generated@@306 (bvshl $generated@@298 (concat #b000000000000000000000000000000000000000000000000000000000000 (concat #b00000 $generated@@300)))) (and (=> (= (ControlFlow 0 2) (- 0 21)) (bvule #b0000000 #b1000011)) (=> (bvule #b0000000 #b1000011) (=> (and (and (and (and (= $generated@@307 (bvshl $generated@@298 (concat #b000000000000000000000000000000000000000000000000000000000000 #b0000000))) (= $generated@@308 ($generated@@194 67))) (and (= $generated@@309 ($generated@@199 ($generated@@230 $generated@@304))) (= $generated@@310 ($generated@@199 ($generated@@230 $generated@@305))))) (and (and (= $generated@@311 ($generated@@199 ($generated@@230 $generated@@306))) (= $generated@@312 ($generated@@199 ($generated@@230 $generated@@307)))) (and ($generated@@246 $generated@@313) ($generated@@248 $generated@@313)))) (and (and (and (forall (($generated@@378 T@U) ) (!  (=> (= (type $generated@@378) $generated@@46) (=> (and (not (= $generated@@378 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@297 $generated@@378) $generated@@50))) (= ($generated@@49 $generated@@313 $generated@@378) ($generated@@49 $generated@@297 $generated@@378))))
 :pattern ( ($generated@@49 $generated@@313 $generated@@378))
)) ($generated@@44 $generated@@297 $generated@@313)) (and (= $generated@@314 ($generated@@229 ($generated@@164 ($generated@@230 #b0000000000000000000000000000000000000000000000000000000000000000010)))) (= $generated@@315 ($generated@@232 ($generated@@164 ($generated@@233 (bvadd #xc0000000 #x000007d0))))))) (and (and (= $generated@@316 ($generated@@270 ($generated@@164 ($generated@@271 #b01)))) (= $generated@@317 ($generated@@162 0))) (and (= $generated@@318 ($generated@@232 ($generated@@164 ($generated@@233 #x00000002)))) (= $generated@@319 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 51))) ($generated@@199 ($generated@@168 50))) ($generated@@199 ($generated@@168 32))) ($generated@@199 ($generated@@168 97))) ($generated@@199 ($generated@@168 103))) ($generated@@199 ($generated@@168 97))) ($generated@@199 ($generated@@168 105))) ($generated@@199 ($generated@@168 110))))))))) (and (=> (= (ControlFlow 0 2) (- 0 20)) (bvult $generated@@314 #b0000000000000000000000000000000000000000000000000000000000001000000)) (=> (bvult $generated@@314 #b0000000000000000000000000000000000000000000000000000000000001000000) (and (=> (= (ControlFlow 0 2) (- 0 19)) (bvule ((_ extract 5 0) $generated@@314) #b100000)) (=> (bvule ((_ extract 5 0) $generated@@314) #b100000) (=> (= $generated@@320 (bvshl $generated@@315 (concat #b00000000000000000000000000 ((_ extract 5 0) $generated@@314)))) (and (=> (= (ControlFlow 0 2) (- 0 18)) (bvult $generated@@318 #x00000040)) (=> (bvult $generated@@318 #x00000040) (and (=> (= (ControlFlow 0 2) (- 0 17)) (bvule ((_ extract 5 0) $generated@@318) #b100000)) (=> (bvule ((_ extract 5 0) $generated@@318) #b100000) (=> (= $generated@@321 (bvshl $generated@@315 (concat #b00000000000000000000000000 ((_ extract 5 0) $generated@@318)))) (and (=> (= (ControlFlow 0 2) (- 0 16)) (bvule (concat #b0000 $generated@@316) #b100000)) (=> (bvule (concat #b0000 $generated@@316) #b100000) (=> (= $generated@@322 (bvshl $generated@@315 (concat #b00000000000000000000000000 (concat #b0000 $generated@@316)))) (and (=> (= (ControlFlow 0 2) (- 0 15)) (bvule #b000000 #b100000)) (=> (bvule #b000000 #b100000) (=> (and (and (and (and (= $generated@@323 (bvshl $generated@@315 (concat #b00000000000000000000000000 #b000000))) (= $generated@@324 ($generated@@194 32))) (and (= $generated@@325 ($generated@@199 ($generated@@233 $generated@@320))) (= $generated@@326 ($generated@@199 ($generated@@233 $generated@@321))))) (and (and (= $generated@@327 ($generated@@199 ($generated@@233 $generated@@322))) (= $generated@@328 ($generated@@199 ($generated@@233 $generated@@323)))) (and ($generated@@246 $generated@@329) ($generated@@248 $generated@@329)))) (and (and (and (forall (($generated@@379 T@U) ) (!  (=> (= (type $generated@@379) $generated@@46) (=> (and (not (= $generated@@379 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@313 $generated@@379) $generated@@50))) (= ($generated@@49 $generated@@329 $generated@@379) ($generated@@49 $generated@@313 $generated@@379))))
 :pattern ( ($generated@@49 $generated@@329 $generated@@379))
)) ($generated@@44 $generated@@313 $generated@@329)) (and (= $generated@@330 ($generated@@235 ($generated@@164 ($generated@@236 #b1111111)))) (= $generated@@331 ($generated@@229 ($generated@@164 ($generated@@230 #b0000000000000000000000000000000000000000000000000000000000000000010)))))) (and (and (= $generated@@332 ($generated@@232 ($generated@@164 ($generated@@233 #x00000002)))) (= $generated@@333 ($generated@@270 ($generated@@164 ($generated@@271 #b10))))) (and (= $generated@@334 ($generated@@162 0)) (= $generated@@335 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 55))) ($generated@@199 ($generated@@168 32))) ($generated@@199 ($generated@@168 97))) ($generated@@199 ($generated@@168 103))) ($generated@@199 ($generated@@168 97))) ($generated@@199 ($generated@@168 105))) ($generated@@199 ($generated@@168 110))))))))) (and (=> (= (ControlFlow 0 2) (- 0 14)) (bvult $generated@@331 #b0000000000000000000000000000000000000000000000000000000000000001000)) (=> (bvult $generated@@331 #b0000000000000000000000000000000000000000000000000000000000000001000) (and (=> (= (ControlFlow 0 2) (- 0 13)) (bvule ((_ extract 2 0) $generated@@331) #b111)) (=> (bvule ((_ extract 2 0) $generated@@331) #b111) (=> (= $generated@@336 (bvshl $generated@@330 (concat #b0000 ((_ extract 2 0) $generated@@331)))) (and (=> (= (ControlFlow 0 2) (- 0 12)) (bvult $generated@@332 #x00000008)) (=> (bvult $generated@@332 #x00000008) (and (=> (= (ControlFlow 0 2) (- 0 11)) (bvule ((_ extract 2 0) $generated@@332) #b111)) (=> (bvule ((_ extract 2 0) $generated@@332) #b111) (=> (= $generated@@337 (bvshl $generated@@330 (concat #b0000 ((_ extract 2 0) $generated@@332)))) (and (=> (= (ControlFlow 0 2) (- 0 10)) (bvule (concat #b0 $generated@@333) #b111)) (=> (bvule (concat #b0 $generated@@333) #b111) (=> (= $generated@@338 (bvshl $generated@@330 (concat #b0000 (concat #b0 $generated@@333)))) (and (=> (= (ControlFlow 0 2) (- 0 9)) (bvule #b000 #b111)) (=> (bvule #b000 #b111) (=> (and (= $generated@@339 (bvshl $generated@@330 (concat #b0000 #b000))) (= $generated@@340 ($generated@@194 7))) (=> (and (and (= $generated@@341 ($generated@@199 ($generated@@236 $generated@@336))) (= $generated@@342 ($generated@@199 ($generated@@236 $generated@@337)))) (and (= $generated@@343 ($generated@@199 ($generated@@236 $generated@@338))) (= $generated@@344 ($generated@@199 ($generated@@236 $generated@@339))))) (=> (and (and (and ($generated@@246 $generated@@345) ($generated@@248 $generated@@345)) (and (forall (($generated@@380 T@U) ) (!  (=> (= (type $generated@@380) $generated@@46) (=> (and (not (= $generated@@380 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@329 $generated@@380) $generated@@50))) (= ($generated@@49 $generated@@345 $generated@@380) ($generated@@49 $generated@@329 $generated@@380))))
 :pattern ( ($generated@@49 $generated@@345 $generated@@380))
)) ($generated@@44 $generated@@329 $generated@@345))) (and (and (= $generated@@346 ($generated@@229 ($generated@@164 ($generated@@230 #b0000000000000000000000000000000000000000000000000000000000000000000)))) (= $generated@@347 ($generated@@232 ($generated@@164 ($generated@@233 #x00000000))))) (and (= $generated@@348 ($generated@@270 ($generated@@164 ($generated@@271 #b00)))) (= $generated@@349 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 48))) ($generated@@199 ($generated@@168 32))) ($generated@@199 ($generated@@168 97))) ($generated@@199 ($generated@@168 103))) ($generated@@199 ($generated@@168 97))) ($generated@@199 ($generated@@168 105))) ($generated@@199 ($generated@@168 110)))))))) (and (=> (= (ControlFlow 0 2) (- 0 8)) (bvult $generated@@346 #b0000000000000000000000000000000000000000000000000000000000000000001)) (=> (bvult $generated@@346 #b0000000000000000000000000000000000000000000000000000000000000000001) (and (=> (= (ControlFlow 0 2) (- 0 7)) true) (=> (= $generated@@350 0) (and (=> (= (ControlFlow 0 2) (- 0 6)) (bvult $generated@@347 #x00000001)) (=> (bvult $generated@@347 #x00000001) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (=> (= $generated@@351 0) (and (=> (= (ControlFlow 0 2) (- 0 4)) (bvult $generated@@348 #b01)) (=> (bvult $generated@@348 #b01) (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (and (= $generated@@352 0) (= (ControlFlow 0 2) (- 0 1))) true)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let (($generated@@381  (=> (and ($generated@@246 $generated@@222) ($generated@@248 $generated@@222)) (=> (and (and (and (<= ($generated@@162 0) $generated@@353) (< $generated@@353 80)) true) (and (and (= 0 $generated@@354) true) (and (= 2 $generated@@355) (= (ControlFlow 0 50) 2)))) $generated@@372))))
$generated@@381)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 (T@T T@T) T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U T@U) T@U)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@108 (T@T T@T) T@T)
(declare-fun $generated@@109 (T@T) T@T)
(declare-fun $generated@@110 (T@T) T@T)
(declare-fun $generated@@111 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (Int) Int)
(declare-fun $generated@@164 (T@U) T@U)
(declare-fun $generated@@168 (Int) T@U)
(declare-fun $generated@@169 (T@U) Int)
(declare-fun $generated@@170 () T@T)
(declare-fun $generated@@173 (T@T) T@U)
(declare-fun $generated@@174 (T@U) Int)
(declare-fun $generated@@175 (T@T) T@T)
(declare-fun $generated@@176 (T@T) T@T)
(declare-fun $generated@@181 (T@U T@U) T@U)
(declare-fun $generated@@194 (Int) T@U)
(declare-fun $generated@@195 (T@U) Int)
(declare-fun $generated@@196 () T@T)
(declare-fun $generated@@199 (T@U) T@U)
(declare-fun $generated@@200 (T@T T@U) T@U)
(declare-fun $generated@@201 () T@T)
(declare-fun $generated@@207 (T@U) T@U)
(declare-fun $generated@@208 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@1 ($generated@@45 $generated@@57 $generated@@58)) 6)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@51 ($generated@@45 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@45 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@52 ($generated@@45 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@45 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (let (($generated@@65 ($generated@@52 (type $generated@@63))))
(= (type ($generated@@49 $generated@@63 $generated@@64)) $generated@@65))
 :pattern ( ($generated@@49 $generated@@63 $generated@@64))
))) (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 (type $generated@@68)))
(let (($generated@@70 (type $generated@@67)))
(= (type ($generated@@53 $generated@@66 $generated@@67 $generated@@68)) ($generated@@45 $generated@@70 $generated@@69))))
 :pattern ( ($generated@@53 $generated@@66 $generated@@67 $generated@@68))
))) (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@52 (type $generated@@71))))
 (=> (= (type $generated@@73) $generated@@74) (= ($generated@@49 ($generated@@53 $generated@@71 $generated@@72 $generated@@73) $generated@@72) $generated@@73)))
 :weight 0
))) (and (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@77 $generated@@78) (= ($generated@@49 ($generated@@53 $generated@@76 $generated@@77 $generated@@75) $generated@@78) ($generated@@49 $generated@@76 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or true (= ($generated@@49 ($generated@@53 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@49 $generated@@80 $generated@@82)))
 :weight 0
)))) (= ($generated@@1 $generated@@46) 7)) (forall (($generated@@83 T@T) ) (= ($generated@@1 ($generated@@54 $generated@@83)) 8))) (forall (($generated@@84 T@T) ) (! (= ($generated@@55 ($generated@@54 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@54 $generated@@84))
))) (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (! (let (($generated@@87 ($generated@@55 (type $generated@@86))))
(= (type ($generated@@48 $generated@@85 $generated@@86)) $generated@@87))
 :pattern ( ($generated@@48 $generated@@85 $generated@@86))
))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= (type ($generated@@56 $generated@@88 $generated@@89 $generated@@90)) $generated@@47)
 :pattern ( ($generated@@56 $generated@@88 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (let (($generated@@94 ($generated@@55 (type $generated@@92))))
 (=> (= (type $generated@@93) $generated@@94) (= ($generated@@48 ($generated@@56 $generated@@91 $generated@@92 $generated@@93) $generated@@92) $generated@@93)))
 :weight 0
))) (and (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@97 $generated@@98) (= ($generated@@48 ($generated@@56 $generated@@96 $generated@@97 $generated@@95) $generated@@98) ($generated@@48 $generated@@96 $generated@@98)))
 :weight 0
)) (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or true (= ($generated@@48 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@48 $generated@@100 $generated@@102)))
 :weight 0
)))) (= (type $generated@@50) ($generated@@54 $generated@@4))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (and (and (= (type $generated@@103) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@104) ($generated@@45 $generated@@46 $generated@@47))) ($generated@@44 $generated@@103 $generated@@104)) (forall (($generated@@105 T@U) ) (!  (=> (and (= (type $generated@@105) $generated@@46) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@103 $generated@@105) $generated@@50))) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50)))
 :pattern ( ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50))
)))
 :pattern ( ($generated@@44 $generated@@103 $generated@@104))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@108 $generated@@112 $generated@@113)) 10)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@109 ($generated@@108 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@108 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@110 ($generated@@108 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@108 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@110 (type $generated@@118))))
(= (type ($generated@@106 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@106 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@108 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@110 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@106 ($generated@@111 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@106 ($generated@@111 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@106 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@106 ($generated@@111 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@106 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@106 ($generated@@111 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@106 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@108 $generated@@46 $generated@@4))
 :pattern ( ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@55 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@46) (= (type $generated@@156) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@157) ($generated@@54 $generated@@4))) (= (type $generated@@159) $generated@@46)) (= (type $generated@@160) ($generated@@54 $generated@@161))) (= ($generated@@0 ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 Int) ) (! (= ($generated@@162 $generated@@163) $generated@@163)
 :pattern ( ($generated@@162 $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ) (! (let (($generated@@166 (type $generated@@165)))
(= (type ($generated@@164 $generated@@165)) $generated@@166))
 :pattern ( ($generated@@164 $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! (= ($generated@@164 $generated@@167) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167))
)))
(assert  (and (= ($generated@@1 $generated@@170) 11) (forall (($generated@@171 Int) ) (! (= (type ($generated@@168 $generated@@171)) $generated@@170)
 :pattern ( ($generated@@168 $generated@@171))
))))
(assert (forall (($generated@@172 Int) ) (!  (=> (and (<= 0 $generated@@172) (< $generated@@172 65536)) (= ($generated@@169 ($generated@@168 $generated@@172)) $generated@@172))
 :pattern ( ($generated@@168 $generated@@172))
)))
(assert  (and (and (forall (($generated@@177 T@T) ) (= ($generated@@1 ($generated@@175 $generated@@177)) 12)) (forall (($generated@@178 T@T) ) (! (= ($generated@@176 ($generated@@175 $generated@@178)) $generated@@178)
 :pattern ( ($generated@@175 $generated@@178))
))) (forall (($generated@@179 T@T) ) (! (= (type ($generated@@173 $generated@@179)) ($generated@@175 $generated@@179))
 :pattern ( ($generated@@173 $generated@@179))
))))
(assert (forall (($generated@@180 T@T) ) (! (= ($generated@@174 ($generated@@173 $generated@@180)) 0)
 :pattern ( ($generated@@173 $generated@@180))
)))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@U) ) (! (let (($generated@@184 (type $generated@@183)))
(= (type ($generated@@181 $generated@@182 $generated@@183)) ($generated@@175 $generated@@184)))
 :pattern ( ($generated@@181 $generated@@182 $generated@@183))
)))
(assert (forall (($generated@@185 T@U) ($generated@@186 T@U) ) (! (let (($generated@@187 (type $generated@@186)))
 (=> (= (type $generated@@185) ($generated@@175 $generated@@187)) (= ($generated@@174 ($generated@@181 $generated@@185 $generated@@186)) (+ 1 ($generated@@174 $generated@@185)))))
 :pattern ( ($generated@@181 $generated@@185 $generated@@186))
)))
(assert (forall (($generated@@188 T@U) ) (!  (=> (= (type $generated@@188) $generated@@170) (and (and (= ($generated@@168 ($generated@@169 $generated@@188)) $generated@@188) (<= 0 ($generated@@169 $generated@@188))) (< ($generated@@169 $generated@@188) 65536)))
 :pattern ( ($generated@@169 $generated@@188))
)))
(assert (forall (($generated@@189 T@U) ($generated@@190 T@U) ($generated@@191 T@U) ) (!  (=> (and (and (and (and (= (type $generated@@189) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@190) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@191) ($generated@@45 $generated@@46 $generated@@47))) (not (= $generated@@189 $generated@@191))) (and ($generated@@44 $generated@@189 $generated@@190) ($generated@@44 $generated@@190 $generated@@191))) ($generated@@44 $generated@@189 $generated@@191))
 :pattern ( ($generated@@44 $generated@@189 $generated@@190) ($generated@@44 $generated@@190 $generated@@191))
)))
(assert (forall (($generated@@192 T@U) ) (! (let (($generated@@193 ($generated@@176 (type $generated@@192))))
 (=> (= (type $generated@@192) ($generated@@175 $generated@@193)) (<= 0 ($generated@@174 $generated@@192))))
 :pattern ( ($generated@@174 $generated@@192))
)))
(assert  (and (= ($generated@@1 $generated@@196) 13) (forall (($generated@@197 Int) ) (! (= (type ($generated@@194 $generated@@197)) $generated@@196)
 :pattern ( ($generated@@194 $generated@@197))
))))
(assert (forall (($generated@@198 Int) ) (! (= ($generated@@195 ($generated@@194 $generated@@198)) $generated@@198)
 :pattern ( ($generated@@194 $generated@@198))
)))
(assert  (and (and (= ($generated@@1 $generated@@201) 14) (forall (($generated@@202 T@U) ) (! (= (type ($generated@@199 $generated@@202)) $generated@@201)
 :pattern ( ($generated@@199 $generated@@202))
))) (forall (($generated@@203 T@T) ($generated@@204 T@U) ) (! (= (type ($generated@@200 $generated@@203 $generated@@204)) $generated@@203)
 :pattern ( ($generated@@200 $generated@@203 $generated@@204))
))))
(assert (forall (($generated@@205 T@U) ) (! (let (($generated@@206 (type $generated@@205)))
(= ($generated@@200 $generated@@206 ($generated@@199 $generated@@205)) $generated@@205))
 :pattern ( ($generated@@199 $generated@@205))
)))
(assert  (and (forall (($generated@@209 T@U) ) (! (let (($generated@@210 ($generated@@176 (type $generated@@209))))
(= (type ($generated@@207 $generated@@209)) ($generated@@175 $generated@@210)))
 :pattern ( ($generated@@207 $generated@@209))
)) (forall (($generated@@211 T@U) ) (! (let (($generated@@212 ($generated@@176 (type $generated@@211))))
(= (type ($generated@@208 $generated@@211)) $generated@@212))
 :pattern ( ($generated@@208 $generated@@211))
))))
(assert (forall (($generated@@213 T@U) ($generated@@214 T@U) ) (! (let (($generated@@215 (type $generated@@214)))
 (=> (= (type $generated@@213) ($generated@@175 $generated@@215)) (and (= ($generated@@207 ($generated@@181 $generated@@213 $generated@@214)) $generated@@213) (= ($generated@@208 ($generated@@181 $generated@@213 $generated@@214)) $generated@@214))))
 :pattern ( ($generated@@181 $generated@@213 $generated@@214))
)))
(assert (forall (($generated@@216 Int) ) (! (= ($generated@@199 ($generated@@8 ($generated@@162 $generated@@216))) ($generated@@164 ($generated@@199 ($generated@@8 $generated@@216))))
 :pattern ( ($generated@@199 ($generated@@8 ($generated@@162 $generated@@216))))
)))
(assert (forall (($generated@@217 T@U) ) (! (= ($generated@@199 ($generated@@164 $generated@@217)) ($generated@@164 ($generated@@199 $generated@@217)))
 :pattern ( ($generated@@199 ($generated@@164 $generated@@217)))
)))
(assert (forall (($generated@@218 T@U) ) (! (let (($generated@@219 ($generated@@176 (type $generated@@218))))
 (=> (and (= (type $generated@@218) ($generated@@175 $generated@@219)) (= ($generated@@174 $generated@@218) 0)) (= $generated@@218 ($generated@@173 $generated@@219))))
 :pattern ( ($generated@@174 $generated@@218))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@220 () T@U)
(declare-fun $generated@@221 () T@U)
(declare-fun $generated@@222 () T@U)
(declare-fun $generated@@223 () Int)
(declare-fun $generated@@224 () Int)
(declare-fun $generated@@225 () (_ BitVec 12))
(declare-fun $generated@@226 (T@U) (_ BitVec 12))
(declare-fun $generated@@227 ((_ BitVec 12)) T@U)
(declare-fun $generated@@228 () (_ BitVec 7))
(declare-fun $generated@@229 (T@U) (_ BitVec 7))
(declare-fun $generated@@230 ((_ BitVec 7)) T@U)
(declare-fun $generated@@231 () Int)
(declare-fun $generated@@232 () T@U)
(declare-fun $generated@@233 () (_ BitVec 12))
(declare-fun $generated@@234 () T@U)
(declare-fun $generated@@235 () T@U)
(declare-fun $generated@@236 () T@U)
(declare-fun $generated@@237 (T@U) Bool)
(declare-fun $generated@@238 () T@U)
(declare-fun $generated@@239 (T@U) Bool)
(declare-fun $generated@@240 () T@U)
(declare-fun $generated@@241 () (_ BitVec 7))
(declare-fun $generated@@242 () T@U)
(declare-fun $generated@@243 () T@U)
(declare-fun $generated@@244 () T@U)
(declare-fun $generated@@245 () T@U)
(declare-fun $generated@@246 () (_ BitVec 2))
(declare-fun $generated@@247 (T@U) (_ BitVec 2))
(declare-fun $generated@@248 ((_ BitVec 2)) T@U)
(declare-fun $generated@@249 () Int)
(declare-fun $generated@@250 () T@U)
(declare-fun $generated@@251 () (_ BitVec 2))
(declare-fun $generated@@252 () T@U)
(declare-fun $generated@@253 () T@U)
(declare-fun $generated@@254 () T@U)
(declare-fun $generated@@255 () T@U)
(declare-fun $generated@@256 () Int)
(declare-fun $generated@@257 () T@U)
(declare-fun $generated@@258 () Int)
(declare-fun $generated@@259 () T@U)
(declare-fun $generated@@260 () T@U)
(declare-fun $generated@@261 () T@U)
(declare-fun $generated@@262 () T@U)
(declare-fun $generated@@263 () Int)
(declare-fun $generated@@264 () (_ BitVec 12))
(declare-fun $generated@@265 () (_ BitVec 7))
(declare-fun $generated@@266 () T@U)
(declare-fun $generated@@267 () (_ BitVec 12))
(declare-fun $generated@@268 () T@U)
(declare-fun $generated@@269 () T@U)
(declare-fun $generated@@270 () T@U)
(declare-fun $generated@@271 () T@U)
(declare-fun $generated@@272 () T@U)
(declare-fun $generated@@273 () Int)
(declare-fun $generated@@274 () Int)
(declare-fun $generated@@275 () T@T)
(declare-fun $generated@@276 () T@T)
(declare-fun $generated@@277 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type $generated@@220) ($generated@@108 $generated@@46 $generated@@4)) (= (type $generated@@221) $generated@@46)) (= (type $generated@@222) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@278 (_ BitVec 12)) ) (! (= ($generated@@226 ($generated@@227 $generated@@278)) $generated@@278)
 :pattern ( ($generated@@227 $generated@@278))
))) (= ($generated@@1 $generated@@275) 15)) (forall (($generated@@279 T@U) ) (!  (=> (= (type $generated@@279) $generated@@275) (= ($generated@@227 ($generated@@226 $generated@@279)) $generated@@279))
 :pattern ( ($generated@@226 $generated@@279))
))) (forall (($generated@@280 (_ BitVec 12)) ) (! (= (type ($generated@@227 $generated@@280)) $generated@@275)
 :pattern ( ($generated@@227 $generated@@280))
))) (forall (($generated@@281 (_ BitVec 7)) ) (! (= ($generated@@229 ($generated@@230 $generated@@281)) $generated@@281)
 :pattern ( ($generated@@230 $generated@@281))
))) (= ($generated@@1 $generated@@276) 16)) (forall (($generated@@282 T@U) ) (!  (=> (= (type $generated@@282) $generated@@276) (= ($generated@@230 ($generated@@229 $generated@@282)) $generated@@282))
 :pattern ( ($generated@@229 $generated@@282))
))) (forall (($generated@@283 (_ BitVec 7)) ) (! (= (type ($generated@@230 $generated@@283)) $generated@@276)
 :pattern ( ($generated@@230 $generated@@283))
))) (= (type $generated@@232) ($generated@@175 $generated@@201))) (= (type $generated@@234) $generated@@196)) (= (type $generated@@235) $generated@@201)) (= (type $generated@@236) $generated@@201)) (= (type $generated@@238) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@240) ($generated@@175 $generated@@201))) (= (type $generated@@242) $generated@@196)) (= (type $generated@@243) $generated@@201)) (= (type $generated@@244) $generated@@201)) (= (type $generated@@245) ($generated@@45 $generated@@46 $generated@@47))) (forall (($generated@@284 (_ BitVec 2)) ) (! (= ($generated@@247 ($generated@@248 $generated@@284)) $generated@@284)
 :pattern ( ($generated@@248 $generated@@284))
))) (= ($generated@@1 $generated@@277) 17)) (forall (($generated@@285 T@U) ) (!  (=> (= (type $generated@@285) $generated@@277) (= ($generated@@248 ($generated@@247 $generated@@285)) $generated@@285))
 :pattern ( ($generated@@247 $generated@@285))
))) (forall (($generated@@286 (_ BitVec 2)) ) (! (= (type ($generated@@248 $generated@@286)) $generated@@277)
 :pattern ( ($generated@@248 $generated@@286))
))) (= (type $generated@@250) ($generated@@175 $generated@@201))) (= (type $generated@@252) $generated@@196)) (= (type $generated@@253) $generated@@201)) (= (type $generated@@254) $generated@@201)) (= (type $generated@@255) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@257) ($generated@@175 $generated@@201))) (= (type $generated@@259) $generated@@196)) (= (type $generated@@260) $generated@@201)) (= (type $generated@@261) $generated@@201)) (= (type $generated@@262) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@266) ($generated@@175 $generated@@201))) (= (type $generated@@268) $generated@@196)) (= (type $generated@@269) $generated@@201)) (= (type $generated@@270) $generated@@201)) (= (type $generated@@271) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@272) ($generated@@175 $generated@@201))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 26) (let (($generated@@287  (=> (= $generated@@220 ($generated@@107 $generated@@221 $generated@@222 $generated@@50 false)) (=> (and (= 0 $generated@@223) (= $generated@@224 ($generated@@162 3))) (=> (and (and (= $generated@@225 ($generated@@226 ($generated@@164 ($generated@@227 #b000000000101)))) (= $generated@@228 ($generated@@229 ($generated@@164 ($generated@@230 #b0000101))))) (and (= $generated@@231 ($generated@@162 0)) (= $generated@@232 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 49))) ($generated@@199 ($generated@@168 50))))))) (and (=> (= (ControlFlow 0 2) (- 0 25)) (<= 0 $generated@@224)) (=> (<= 0 $generated@@224) (and (=> (= (ControlFlow 0 2) (- 0 24)) (<= $generated@@224 12)) (=> (<= $generated@@224 12) (and (=> (= (ControlFlow 0 2) (- 0 23)) (<= 0 $generated@@224)) (=> (<= 0 $generated@@224) (and (=> (= (ControlFlow 0 2) (- 0 22)) (<= $generated@@224 12)) (=> (<= $generated@@224 12) (=> (and (and (= $generated@@233 (ext_rotate_right (ext_rotate_left $generated@@225 ((_ int2bv 12) $generated@@224)) ((_ int2bv 12) $generated@@224))) (= $generated@@234 ($generated@@194 12))) (and (= $generated@@235 ($generated@@199 ($generated@@227 $generated@@225))) (= $generated@@236 ($generated@@199 ($generated@@227 $generated@@233))))) (=> (and (and (and ($generated@@237 $generated@@238) ($generated@@239 $generated@@238)) (forall (($generated@@288 T@U) ) (!  (=> (= (type $generated@@288) $generated@@46) (=> (and (not (= $generated@@288 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@222 $generated@@288) $generated@@50))) (= ($generated@@49 $generated@@238 $generated@@288) ($generated@@49 $generated@@222 $generated@@288))))
 :pattern ( ($generated@@49 $generated@@238 $generated@@288))
))) (and ($generated@@44 $generated@@222 $generated@@238) (= $generated@@240 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 55))))))) (and (=> (= (ControlFlow 0 2) (- 0 21)) (<= 0 $generated@@224)) (=> (<= 0 $generated@@224) (and (=> (= (ControlFlow 0 2) (- 0 20)) (<= $generated@@224 7)) (=> (<= $generated@@224 7) (and (=> (= (ControlFlow 0 2) (- 0 19)) (<= 0 $generated@@224)) (=> (<= 0 $generated@@224) (and (=> (= (ControlFlow 0 2) (- 0 18)) (<= $generated@@224 7)) (=> (<= $generated@@224 7) (=> (and (and (= $generated@@241 (ext_rotate_right (ext_rotate_left $generated@@228 ((_ int2bv 7) $generated@@224)) ((_ int2bv 7) $generated@@224))) (= $generated@@242 ($generated@@194 7))) (and (= $generated@@243 ($generated@@199 ($generated@@230 $generated@@228))) (= $generated@@244 ($generated@@199 ($generated@@230 $generated@@241))))) (=> (and (and (and ($generated@@237 $generated@@245) ($generated@@239 $generated@@245)) (forall (($generated@@289 T@U) ) (!  (=> (= (type $generated@@289) $generated@@46) (=> (and (not (= $generated@@289 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@238 $generated@@289) $generated@@50))) (= ($generated@@49 $generated@@245 $generated@@289) ($generated@@49 $generated@@238 $generated@@289))))
 :pattern ( ($generated@@49 $generated@@245 $generated@@289))
))) (and (and ($generated@@44 $generated@@238 $generated@@245) (= $generated@@246 ($generated@@247 ($generated@@164 ($generated@@248 #b01))))) (and (= $generated@@249 ($generated@@162 1)) (= $generated@@250 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 50)))))))) (and (=> (= (ControlFlow 0 2) (- 0 17)) (<= 0 $generated@@249)) (=> (<= 0 $generated@@249) (and (=> (= (ControlFlow 0 2) (- 0 16)) (<= $generated@@249 2)) (=> (<= $generated@@249 2) (and (=> (= (ControlFlow 0 2) (- 0 15)) (<= 0 $generated@@249)) (=> (<= 0 $generated@@249) (and (=> (= (ControlFlow 0 2) (- 0 14)) (<= $generated@@249 2)) (=> (<= $generated@@249 2) (=> (and (= $generated@@251 (ext_rotate_right (ext_rotate_left $generated@@246 ((_ int2bv 2) $generated@@249)) ((_ int2bv 2) $generated@@249))) (= $generated@@252 ($generated@@194 2))) (=> (and (and (and (= $generated@@253 ($generated@@199 ($generated@@248 $generated@@246))) (= $generated@@254 ($generated@@199 ($generated@@248 $generated@@251)))) (and ($generated@@237 $generated@@255) ($generated@@239 $generated@@255))) (and (and (forall (($generated@@290 T@U) ) (!  (=> (= (type $generated@@290) $generated@@46) (=> (and (not (= $generated@@290 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@245 $generated@@290) $generated@@50))) (= ($generated@@49 $generated@@255 $generated@@290) ($generated@@49 $generated@@245 $generated@@290))))
 :pattern ( ($generated@@49 $generated@@255 $generated@@290))
)) ($generated@@44 $generated@@245 $generated@@255)) (and (= $generated@@256 ($generated@@162 0)) (= $generated@@257 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 48)))))))) (and (=> (= (ControlFlow 0 2) (- 0 13)) (<= 0 $generated@@256)) (=> (<= 0 $generated@@256) (and (=> (= (ControlFlow 0 2) (- 0 12)) (<= $generated@@256 0)) (=> (<= $generated@@256 0) (and (=> (= (ControlFlow 0 2) (- 0 11)) (<= 0 $generated@@256)) (=> (<= 0 $generated@@256) (and (=> (= (ControlFlow 0 2) (- 0 10)) (<= $generated@@256 0)) (=> (<= $generated@@256 0) (=> (and (and (= $generated@@258 0) (= $generated@@259 ($generated@@194 0))) (and (= $generated@@260 ($generated@@199 ($generated@@8 $generated@@231))) (= $generated@@261 ($generated@@199 ($generated@@8 $generated@@258))))) (=> (and (and (and ($generated@@237 $generated@@262) ($generated@@239 $generated@@262)) (and (forall (($generated@@291 T@U) ) (!  (=> (= (type $generated@@291) $generated@@46) (=> (and (not (= $generated@@291 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@255 $generated@@291) $generated@@50))) (= ($generated@@49 $generated@@262 $generated@@291) ($generated@@49 $generated@@255 $generated@@291))))
 :pattern ( ($generated@@49 $generated@@262 $generated@@291))
)) ($generated@@44 $generated@@255 $generated@@262))) (and (and (= $generated@@263 ($generated@@162 5)) (= $generated@@264 ($generated@@226 ($generated@@164 ($generated@@227 (bvadd #b110000000000 #b011111010000)))))) (and (= $generated@@265 ($generated@@229 ($generated@@164 ($generated@@230 #b1111111)))) (= $generated@@266 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 49))) ($generated@@199 ($generated@@168 50))) ($generated@@199 ($generated@@168 32))) ($generated@@199 ($generated@@168 97))) ($generated@@199 ($generated@@168 103))) ($generated@@199 ($generated@@168 97))) ($generated@@199 ($generated@@168 105))) ($generated@@199 ($generated@@168 110)))))))) (and (=> (= (ControlFlow 0 2) (- 0 9)) (<= 0 $generated@@263)) (=> (<= 0 $generated@@263) (and (=> (= (ControlFlow 0 2) (- 0 8)) (<= $generated@@263 12)) (=> (<= $generated@@263 12) (and (=> (= (ControlFlow 0 2) (- 0 7)) (<= 0 $generated@@263)) (=> (<= 0 $generated@@263) (and (=> (= (ControlFlow 0 2) (- 0 6)) (<= $generated@@263 12)) (=> (<= $generated@@263 12) (=> (and (and (= $generated@@267 (ext_rotate_right (ext_rotate_left $generated@@264 ((_ int2bv 12) $generated@@263)) ((_ int2bv 12) $generated@@263))) (= $generated@@268 ($generated@@194 12))) (and (= $generated@@269 ($generated@@199 ($generated@@227 $generated@@264))) (= $generated@@270 ($generated@@199 ($generated@@227 $generated@@267))))) (=> (and (and (and ($generated@@237 $generated@@271) ($generated@@239 $generated@@271)) (forall (($generated@@292 T@U) ) (!  (=> (= (type $generated@@292) $generated@@46) (=> (and (not (= $generated@@292 $generated@@221)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@262 $generated@@292) $generated@@50))) (= ($generated@@49 $generated@@271 $generated@@292) ($generated@@49 $generated@@262 $generated@@292))))
 :pattern ( ($generated@@49 $generated@@271 $generated@@292))
))) (and ($generated@@44 $generated@@262 $generated@@271) (= $generated@@272 ($generated@@164 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@181 ($generated@@173 $generated@@201) ($generated@@199 ($generated@@168 98))) ($generated@@199 ($generated@@168 118))) ($generated@@199 ($generated@@168 55))) ($generated@@199 ($generated@@168 32))) ($generated@@199 ($generated@@168 97))) ($generated@@199 ($generated@@168 103))) ($generated@@199 ($generated@@168 97))) ($generated@@199 ($generated@@168 105))) ($generated@@199 ($generated@@168 110))))))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (<= 0 $generated@@263)) (=> (<= 0 $generated@@263) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= $generated@@263 7)) (=> (<= $generated@@263 7) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= 0 $generated@@263)) (=> (<= 0 $generated@@263) (=> (= (ControlFlow 0 2) (- 0 1)) (<= $generated@@263 7)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let (($generated@@293  (=> (and ($generated@@237 $generated@@222) ($generated@@239 $generated@@222)) (=> (and (and (= 0 $generated@@273) true) (and (= 2 $generated@@274) (= (ControlFlow 0 26) 2))) $generated@@287))))
$generated@@293)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
