(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 (T@U) T@U)
(declare-fun $generated@@164 (T@T T@U) T@U)
(declare-fun $generated@@165 () T@T)
(declare-fun $generated@@171 (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (and (and (= ($generated@@1 $generated@@165) 11) (forall (($generated@@166 T@U) ) (! (= (type ($generated@@163 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@163 $generated@@166))
))) (forall (($generated@@167 T@T) ($generated@@168 T@U) ) (! (= (type ($generated@@164 $generated@@167 $generated@@168)) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167 $generated@@168))
))))
(assert (forall (($generated@@169 T@U) ) (! (let (($generated@@170 (type $generated@@169)))
(= ($generated@@164 $generated@@170 ($generated@@163 $generated@@169)) $generated@@169))
 :pattern ( ($generated@@163 $generated@@169))
)))
(assert (forall (($generated@@172 Int) ($generated@@173 Int) ) (! (= ($generated@@171 $generated@@172 $generated@@173) (mod $generated@@172 $generated@@173))
 :pattern ( ($generated@@171 $generated@@172 $generated@@173))
)))
(assert (forall (($generated@@174 Int) ) (! (= ($generated@@163 ($generated@@8 ($generated@@157 $generated@@174))) ($generated@@159 ($generated@@163 ($generated@@8 $generated@@174))))
 :pattern ( ($generated@@163 ($generated@@8 ($generated@@157 $generated@@174))))
)))
(assert (forall (($generated@@175 T@U) ) (! (= ($generated@@163 ($generated@@159 $generated@@175)) ($generated@@159 ($generated@@163 $generated@@175)))
 :pattern ( ($generated@@163 ($generated@@159 $generated@@175)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 (T@U) Bool)
(declare-fun $generated@@181 (T@U) Bool)
(declare-fun $generated@@182 () Int)
(assert  (and (and (and (= (type $generated@@176) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@177) $generated@@47)) (= (type $generated@@178) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@179) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@183  (=> (= (ControlFlow 0 4) (- 0 3)) (= ($generated@@157 ($generated@@171 0 ($generated@@157 2))) ($generated@@157 0)))))
(let (($generated@@184  (=> (= (ControlFlow 0 2) (- 0 1)) (not (= ($generated@@157 2) 0)))))
(let (($generated@@185  (=> (= $generated@@176 ($generated@@45 $generated@@177 $generated@@178 $generated@@179 false)) (and (=> (= (ControlFlow 0 5) 2) $generated@@184) (=> (= (ControlFlow 0 5) 4) $generated@@183)))))
(let (($generated@@186  (=> (and (and ($generated@@180 $generated@@178) ($generated@@181 $generated@@178)) (and (= 0 $generated@@182) (= (ControlFlow 0 6) 5))) $generated@@185)))
$generated@@186)))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Real) Real)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 (T@U) T@U)
(declare-fun $generated@@164 (T@T T@U) T@U)
(declare-fun $generated@@165 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Real) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (and (and (= ($generated@@1 $generated@@165) 11) (forall (($generated@@166 T@U) ) (! (= (type ($generated@@163 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@163 $generated@@166))
))) (forall (($generated@@167 T@T) ($generated@@168 T@U) ) (! (= (type ($generated@@164 $generated@@167 $generated@@168)) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167 $generated@@168))
))))
(assert (forall (($generated@@169 T@U) ) (! (let (($generated@@170 (type $generated@@169)))
(= ($generated@@164 $generated@@170 ($generated@@163 $generated@@169)) $generated@@169))
 :pattern ( ($generated@@163 $generated@@169))
)))
(assert (forall (($generated@@171 Real) ) (! (= ($generated@@163 ($generated@@9 ($generated@@157 $generated@@171))) ($generated@@159 ($generated@@163 ($generated@@9 $generated@@171))))
 :pattern ( ($generated@@163 ($generated@@9 ($generated@@157 $generated@@171))))
)))
(assert (forall (($generated@@172 T@U) ) (! (= ($generated@@163 ($generated@@159 $generated@@172)) ($generated@@159 ($generated@@163 $generated@@172)))
 :pattern ( ($generated@@163 ($generated@@159 $generated@@172)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@173 () Real)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 (T@U) Bool)
(declare-fun $generated@@179 (T@U) Bool)
(declare-fun $generated@@180 () Int)
(assert  (and (and (and (= (type $generated@@174) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@175) $generated@@47)) (= (type $generated@@176) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@177) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@181 true))
(let (($generated@@182  (=> (and (< $generated@@173 ($generated@@157 (- 0.0 4.0))) (= (ControlFlow 0 6) 4)) $generated@@181)))
(let (($generated@@183  (=> (and (<= ($generated@@157 (- 0.0 4.0)) $generated@@173) (= (ControlFlow 0 5) 4)) $generated@@181)))
(let (($generated@@184  (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@157 (- 0.0 4.0)) ($generated@@157 0.0))) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@0 ($generated@@159 ($generated@@11 (< 0.0 300.0))))))))
(let (($generated@@185  (=> (= $generated@@174 ($generated@@45 $generated@@175 $generated@@176 $generated@@177 false)) (and (and (=> (= (ControlFlow 0 7) 2) $generated@@184) (=> (= (ControlFlow 0 7) 5) $generated@@183)) (=> (= (ControlFlow 0 7) 6) $generated@@182)))))
(let (($generated@@186  (=> (and (and ($generated@@178 $generated@@176) ($generated@@179 $generated@@176)) (and (= 0 $generated@@180) (= (ControlFlow 0 8) 7))) $generated@@185)))
$generated@@186)))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 (T@U) T@U)
(declare-fun $generated@@164 (T@T T@U) T@U)
(declare-fun $generated@@165 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (and (and (= ($generated@@1 $generated@@165) 11) (forall (($generated@@166 T@U) ) (! (= (type ($generated@@163 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@163 $generated@@166))
))) (forall (($generated@@167 T@T) ($generated@@168 T@U) ) (! (= (type ($generated@@164 $generated@@167 $generated@@168)) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167 $generated@@168))
))))
(assert (forall (($generated@@169 T@U) ) (! (let (($generated@@170 (type $generated@@169)))
(= ($generated@@164 $generated@@170 ($generated@@163 $generated@@169)) $generated@@169))
 :pattern ( ($generated@@163 $generated@@169))
)))
(assert (forall (($generated@@171 Int) ) (! (= ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))) ($generated@@159 ($generated@@163 ($generated@@8 $generated@@171))))
 :pattern ( ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))))
)))
(assert (forall (($generated@@172 T@U) ) (! (= ($generated@@163 ($generated@@159 $generated@@172)) ($generated@@159 ($generated@@163 $generated@@172)))
 :pattern ( ($generated@@163 ($generated@@159 $generated@@172)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@173 () Int)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 (T@U) Bool)
(declare-fun $generated@@179 (T@U) Bool)
(declare-fun $generated@@180 () Int)
(assert  (and (and (and (= (type $generated@@174) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@175) $generated@@47)) (= (type $generated@@176) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@177) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@181 true))
(let (($generated@@182  (=> (and (< $generated@@173 ($generated@@157 0)) (= (ControlFlow 0 6) 4)) $generated@@181)))
(let (($generated@@183  (=> (and (<= ($generated@@157 0) $generated@@173) (= (ControlFlow 0 5) 4)) $generated@@181)))
(let (($generated@@184  (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@157 0) ($generated@@157 0))) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@0 ($generated@@159 ($generated@@11 (< 0 80))))))))
(let (($generated@@185  (=> (= $generated@@174 ($generated@@45 $generated@@175 $generated@@176 $generated@@177 false)) (and (and (=> (= (ControlFlow 0 7) 2) $generated@@184) (=> (= (ControlFlow 0 7) 5) $generated@@183)) (=> (= (ControlFlow 0 7) 6) $generated@@182)))))
(let (($generated@@186  (=> (and (and ($generated@@178 $generated@@176) ($generated@@179 $generated@@176)) (and (= 0 $generated@@180) (= (ControlFlow 0 8) 7))) $generated@@185)))
$generated@@186)))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (T@U) T@U)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@162 (T@T T@U) T@U)
(declare-fun $generated@@163 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 T@U) ) (! (let (($generated@@159 (type $generated@@158)))
(= (type ($generated@@157 $generated@@158)) $generated@@159))
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (= ($generated@@157 $generated@@160) $generated@@160)
 :pattern ( ($generated@@157 $generated@@160))
)))
(assert  (and (and (= ($generated@@1 $generated@@163) 11) (forall (($generated@@164 T@U) ) (! (= (type ($generated@@161 $generated@@164)) $generated@@163)
 :pattern ( ($generated@@161 $generated@@164))
))) (forall (($generated@@165 T@T) ($generated@@166 T@U) ) (! (= (type ($generated@@162 $generated@@165 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@162 $generated@@165 $generated@@166))
))))
(assert (forall (($generated@@167 T@U) ) (! (let (($generated@@168 (type $generated@@167)))
(= ($generated@@162 $generated@@168 ($generated@@161 $generated@@167)) $generated@@167))
 :pattern ( ($generated@@161 $generated@@167))
)))
(assert (forall (($generated@@169 T@U) ) (! (= ($generated@@161 ($generated@@157 $generated@@169)) ($generated@@157 ($generated@@161 $generated@@169)))
 :pattern ( ($generated@@161 ($generated@@157 $generated@@169)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () (_ BitVec 8))
(declare-fun $generated@@175 (T@U) (_ BitVec 8))
(declare-fun $generated@@176 ((_ BitVec 8)) T@U)
(declare-fun $generated@@177 () (_ BitVec 8))
(declare-fun $generated@@178 () (_ BitVec 8))
(declare-fun $generated@@179 () (_ BitVec 8))
(declare-fun $generated@@180 () (_ BitVec 8))
(declare-fun $generated@@181 (T@U) Bool)
(declare-fun $generated@@182 (T@U) Bool)
(declare-fun $generated@@183 () Int)
(declare-fun $generated@@184 () T@T)
(assert  (and (and (and (and (and (and (and (= (type $generated@@170) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@171) $generated@@47)) (= (type $generated@@172) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@173) ($generated@@50 $generated@@4))) (forall (($generated@@185 (_ BitVec 8)) ) (! (= ($generated@@175 ($generated@@176 $generated@@185)) $generated@@185)
 :pattern ( ($generated@@176 $generated@@185))
))) (= ($generated@@1 $generated@@184) 12)) (forall (($generated@@186 T@U) ) (!  (=> (= (type $generated@@186) $generated@@184) (= ($generated@@176 ($generated@@175 $generated@@186)) $generated@@186))
 :pattern ( ($generated@@175 $generated@@186))
))) (forall (($generated@@187 (_ BitVec 8)) ) (! (= (type ($generated@@176 $generated@@187)) $generated@@184)
 :pattern ( ($generated@@176 $generated@@187))
))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@188  (=> (and (= $generated@@170 ($generated@@45 $generated@@171 $generated@@172 $generated@@173 false)) (= $generated@@174 ($generated@@175 ($generated@@157 ($generated@@176 #x05))))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (not (= ($generated@@175 ($generated@@157 ($generated@@176 #x80))) #x00))) (=> (not (= ($generated@@175 ($generated@@157 ($generated@@176 #x80))) #x00)) (=> (= $generated@@177 (bvudiv (bvmul $generated@@174 #x80) #x80)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= $generated@@177 ($generated@@175 ($generated@@157 ($generated@@176 #x01))))) (=> (= $generated@@177 ($generated@@175 ($generated@@157 ($generated@@176 #x01)))) (=> (= $generated@@178 ($generated@@175 ($generated@@157 ($generated@@176 #x03)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (not (= ($generated@@175 ($generated@@157 ($generated@@176 #x80))) #x00))) (=> (not (= ($generated@@175 ($generated@@157 ($generated@@176 #x80))) #x00)) (=> (= $generated@@179 (bvudiv (bvmul $generated@@178 #x80) #x80)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= $generated@@179 ($generated@@175 ($generated@@157 ($generated@@176 #x01))))) (=> (= $generated@@179 ($generated@@175 ($generated@@157 ($generated@@176 #x01)))) (=> (= (ControlFlow 0 2) (- 0 1)) (not (= $generated@@180 #x00)))))))))))))))))
(let (($generated@@189  (=> (and (and ($generated@@181 $generated@@172) ($generated@@182 $generated@@172)) (and (= 0 $generated@@183) (= (ControlFlow 0 7) 2))) $generated@@188)))
$generated@@189)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () (_ BitVec 7))
(declare-fun $generated@@162 (T@U) Bool)
(declare-fun $generated@@163 (T@U) Bool)
(declare-fun $generated@@164 () Int)
(assert  (and (and (and (= (type $generated@@157) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@158) $generated@@47)) (= (type $generated@@159) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@160) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@165  (=> (and (= $generated@@157 ($generated@@45 $generated@@158 $generated@@159 $generated@@160 false)) (= (ControlFlow 0 2) (- 0 1))) (not (= $generated@@161 #b0000000)))))
(let (($generated@@166  (=> (and (and ($generated@@162 $generated@@159) ($generated@@163 $generated@@159)) (and (= 0 $generated@@164) (= (ControlFlow 0 3) 2))) $generated@@165)))
$generated@@166)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () (_ BitVec 7))
(declare-fun $generated@@162 (T@U) Bool)
(declare-fun $generated@@163 (T@U) Bool)
(declare-fun $generated@@164 () Int)
(assert  (and (and (and (= (type $generated@@157) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@158) $generated@@47)) (= (type $generated@@159) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@160) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@165  (=> (and (= $generated@@157 ($generated@@45 $generated@@158 $generated@@159 $generated@@160 false)) (= (ControlFlow 0 2) (- 0 1))) (not (= $generated@@161 #b0000000)))))
(let (($generated@@166  (=> (and (and ($generated@@162 $generated@@159) ($generated@@163 $generated@@159)) (and (= 0 $generated@@164) (= (ControlFlow 0 3) 2))) $generated@@165)))
$generated@@166)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () (_ BitVec 137))
(declare-fun $generated@@162 (T@U) Bool)
(declare-fun $generated@@163 (T@U) Bool)
(declare-fun $generated@@164 () Int)
(assert  (and (and (and (= (type $generated@@157) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@158) $generated@@47)) (= (type $generated@@159) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@160) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@165  (=> (and (= $generated@@157 ($generated@@45 $generated@@158 $generated@@159 $generated@@160 false)) (= (ControlFlow 0 2) (- 0 1))) (not (= $generated@@161 #b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))))
(let (($generated@@166  (=> (and (and ($generated@@162 $generated@@159) ($generated@@163 $generated@@159)) (and (= 0 $generated@@164) (= (ControlFlow 0 3) 2))) $generated@@165)))
$generated@@166)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@157 () Int)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 (T@U) Bool)
(declare-fun $generated@@163 (T@U) Bool)
(declare-fun $generated@@164 () Int)
(declare-fun $generated@@165 () Int)
(declare-fun $generated@@166 () Int)
(declare-fun $generated@@167 () Int)
(assert  (and (and (and (= (type $generated@@158) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@159) $generated@@47)) (= (type $generated@@160) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@161) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@168  (=> (= (ControlFlow 0 4) (- 0 3)) (not (= $generated@@157 0)))))
(let (($generated@@169  (=> (= (ControlFlow 0 2) (- 0 1)) (not (= $generated@@157 0)))))
(let (($generated@@170  (=> (= $generated@@158 ($generated@@45 $generated@@159 $generated@@160 $generated@@161 false)) (and (=> (= (ControlFlow 0 5) 2) $generated@@169) (=> (= (ControlFlow 0 5) 4) $generated@@168)))))
(let (($generated@@171  (=> (and ($generated@@162 $generated@@160) ($generated@@163 $generated@@160)) (=> (and (and (and (= 0 $generated@@164) (= 0 $generated@@157)) (and (= 0 $generated@@165) true)) (and (and (= 0 $generated@@166) true) (and (= 0 $generated@@167) (= (ControlFlow 0 6) 5)))) $generated@@170))))
$generated@@171)))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 (T@U) T@U)
(declare-fun $generated@@164 (T@T T@U) T@U)
(declare-fun $generated@@165 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (and (and (= ($generated@@1 $generated@@165) 11) (forall (($generated@@166 T@U) ) (! (= (type ($generated@@163 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@163 $generated@@166))
))) (forall (($generated@@167 T@T) ($generated@@168 T@U) ) (! (= (type ($generated@@164 $generated@@167 $generated@@168)) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167 $generated@@168))
))))
(assert (forall (($generated@@169 T@U) ) (! (let (($generated@@170 (type $generated@@169)))
(= ($generated@@164 $generated@@170 ($generated@@163 $generated@@169)) $generated@@169))
 :pattern ( ($generated@@163 $generated@@169))
)))
(assert (forall (($generated@@171 Int) ) (! (= ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))) ($generated@@159 ($generated@@163 ($generated@@8 $generated@@171))))
 :pattern ( ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))))
)))
(assert (forall (($generated@@172 T@U) ) (! (= ($generated@@163 ($generated@@159 $generated@@172)) ($generated@@159 ($generated@@163 $generated@@172)))
 :pattern ( ($generated@@163 ($generated@@159 $generated@@172)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@173 () Int)
(declare-fun $generated@@174 () Int)
(declare-fun $generated@@175 () Int)
(declare-fun $generated@@176 () Int)
(declare-fun $generated@@177 () Int)
(declare-fun $generated@@178 () Int)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () Int)
(declare-fun $generated@@181 () Int)
(declare-fun $generated@@182 () Int)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 (T@U) Bool)
(declare-fun $generated@@188 (T@U) Bool)
(declare-fun $generated@@189 () Int)
(declare-fun $generated@@190 () Int)
(declare-fun $generated@@191 () Int)
(assert  (and (and (and (= (type $generated@@183) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@184) $generated@@47)) (= (type $generated@@185) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@186) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 23) (let (($generated@@192  (=> (= (ControlFlow 0 4) (- 0 3)) (= $generated@@173 ($generated@@157 0)))))
(let (($generated@@193  (=> ($generated@@0 ($generated@@159 ($generated@@11 true))) (and (=> (= (ControlFlow 0 20) (- 0 21)) (not false)) (=> (not false) (=> (and (= $generated@@173 $generated@@174) (= (ControlFlow 0 20) 4)) $generated@@192))))))
(let (($generated@@194  (=> ($generated@@0 ($generated@@159 ($generated@@11 true))) (and (=> (= (ControlFlow 0 18) (- 0 19)) true) (=> (and (= $generated@@173 $generated@@174) (= (ControlFlow 0 18) 4)) $generated@@192)))))
(let (($generated@@195  (=> ($generated@@0 ($generated@@159 ($generated@@11 true))) (and (=> (= (ControlFlow 0 16) (- 0 17)) true) (=> (and (= $generated@@173 $generated@@174) (= (ControlFlow 0 16) 4)) $generated@@192)))))
(let (($generated@@196  (=> ($generated@@0 ($generated@@159 ($generated@@11 true))) (and (=> (= (ControlFlow 0 14) (- 0 15)) (not false)) (=> (not false) (=> (and (= $generated@@173 $generated@@174) (= (ControlFlow 0 14) 4)) $generated@@192))))))
(let (($generated@@197  (=> ($generated@@0 ($generated@@159 ($generated@@11 true))) (=> (and (= $generated@@173 $generated@@174) (= (ControlFlow 0 13) 4)) $generated@@192))))
(let (($generated@@198  (=> (and (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= $generated@@175 0)) (and (= $generated@@173 $generated@@175) (= (ControlFlow 0 12) 4))) $generated@@192)))
(let (($generated@@199  (=> (and (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= $generated@@176 0)) (and (= $generated@@173 $generated@@176) (= (ControlFlow 0 11) 4))) $generated@@192)))
(let (($generated@@200  (=> (and (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= $generated@@177 0)) (and (= $generated@@173 $generated@@177) (= (ControlFlow 0 10) 4))) $generated@@192)))
(let (($generated@@201  (=> (and (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= $generated@@178 0)) (and (= $generated@@173 $generated@@178) (= (ControlFlow 0 9) 4))) $generated@@192)))
(let (($generated@@202  (=> (and (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= $generated@@179 0)) (and (= $generated@@173 $generated@@179) (= (ControlFlow 0 8) 4))) $generated@@192)))
(let (($generated@@203  (=> (and (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= $generated@@180 0)) (and (= $generated@@173 $generated@@180) (= (ControlFlow 0 7) 4))) $generated@@192)))
(let (($generated@@204  (=> (and (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= $generated@@181 0)) (and (= $generated@@173 $generated@@181) (= (ControlFlow 0 6) 4))) $generated@@192)))
(let (($generated@@205  (=> (and (and ($generated@@0 ($generated@@159 ($generated@@11 true))) (= $generated@@182 0)) (and (= $generated@@173 $generated@@182) (= (ControlFlow 0 5) 4))) $generated@@192)))
(let (($generated@@206  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (not ($generated@@0 ($generated@@159 ($generated@@11 true)))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@207  (=> (= $generated@@183 ($generated@@45 $generated@@184 $generated@@185 $generated@@186 false)) (and (and (and (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 22) 5) $generated@@205) (=> (= (ControlFlow 0 22) 6) $generated@@204)) (=> (= (ControlFlow 0 22) 7) $generated@@203)) (=> (= (ControlFlow 0 22) 8) $generated@@202)) (=> (= (ControlFlow 0 22) 9) $generated@@201)) (=> (= (ControlFlow 0 22) 10) $generated@@200)) (=> (= (ControlFlow 0 22) 11) $generated@@199)) (=> (= (ControlFlow 0 22) 12) $generated@@198)) (=> (= (ControlFlow 0 22) 13) $generated@@197)) (=> (= (ControlFlow 0 22) 14) $generated@@196)) (=> (= (ControlFlow 0 22) 16) $generated@@195)) (=> (= (ControlFlow 0 22) 18) $generated@@194)) (=> (= (ControlFlow 0 22) 20) $generated@@193)) (=> (= (ControlFlow 0 22) 2) $generated@@206)))))
(let (($generated@@208  (=> (and (and (and ($generated@@187 $generated@@185) ($generated@@188 $generated@@185)) (= 0 $generated@@189)) (and (and (= 0 $generated@@190) (= 0 $generated@@174)) (and (= 0 $generated@@191) (= (ControlFlow 0 23) 22)))) $generated@@207)))
$generated@@208))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (T@U) T@U)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@162 (T@T T@U) T@U)
(declare-fun $generated@@163 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 T@U) ) (! (let (($generated@@159 (type $generated@@158)))
(= (type ($generated@@157 $generated@@158)) $generated@@159))
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (= ($generated@@157 $generated@@160) $generated@@160)
 :pattern ( ($generated@@157 $generated@@160))
)))
(assert  (and (and (= ($generated@@1 $generated@@163) 11) (forall (($generated@@164 T@U) ) (! (= (type ($generated@@161 $generated@@164)) $generated@@163)
 :pattern ( ($generated@@161 $generated@@164))
))) (forall (($generated@@165 T@T) ($generated@@166 T@U) ) (! (= (type ($generated@@162 $generated@@165 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@162 $generated@@165 $generated@@166))
))))
(assert (forall (($generated@@167 T@U) ) (! (let (($generated@@168 (type $generated@@167)))
(= ($generated@@162 $generated@@168 ($generated@@161 $generated@@167)) $generated@@167))
 :pattern ( ($generated@@161 $generated@@167))
)))
(assert (forall (($generated@@169 T@U) ) (! (= ($generated@@161 ($generated@@157 $generated@@169)) ($generated@@157 ($generated@@161 $generated@@169)))
 :pattern ( ($generated@@161 ($generated@@157 $generated@@169)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 (T@U) Bool)
(declare-fun $generated@@176 () Int)
(declare-fun $generated@@177 () Int)
(declare-fun $generated@@178 () Int)
(assert  (and (and (and (= (type $generated@@170) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@171) $generated@@47)) (= (type $generated@@172) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@173) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@179  (=> (and (= $generated@@170 ($generated@@45 $generated@@171 $generated@@172 $generated@@173 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@0 ($generated@@157 ($generated@@11 false))))))
(let (($generated@@180  (=> (and (and (and ($generated@@174 $generated@@172) ($generated@@175 $generated@@172)) (= 0 $generated@@176)) (and (and (= 0 $generated@@177) (= 0 $generated@@178)) (and (not (= $generated@@176 $generated@@177)) (= (ControlFlow 0 3) 2)))) $generated@@179)))
$generated@@180)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@157 () (_ BitVec 10))
(declare-fun $generated@@158 () (_ BitVec 10))
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 (T@U) Bool)
(declare-fun $generated@@164 (T@U) Bool)
(declare-fun $generated@@165 () Int)
(assert  (and (and (and (= (type $generated@@159) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@160) $generated@@47)) (= (type $generated@@161) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@162) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@166 true))
(let (($generated@@167  (=> (and (bvult $generated@@157 #b0000000000) (= (ControlFlow 0 2) (- 0 1))) (not (= $generated@@158 #b0000000000)))))
(let (($generated@@168  (=> (= $generated@@159 ($generated@@45 $generated@@160 $generated@@161 $generated@@162 false)) (and (=> (= (ControlFlow 0 4) 2) $generated@@167) (=> (= (ControlFlow 0 4) 3) $generated@@166)))))
(let (($generated@@169  (=> (and (and ($generated@@163 $generated@@161) ($generated@@164 $generated@@161)) (and (= 0 $generated@@165) (= (ControlFlow 0 5) 4))) $generated@@168)))
$generated@@169)))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () Bool)
(declare-fun $generated@@162 () (_ BitVec 60))
(declare-fun $generated@@163 () (_ BitVec 60))
(declare-fun $generated@@164 () Bool)
(declare-fun $generated@@165 () Bool)
(declare-fun $generated@@166 () Bool)
(declare-fun $generated@@167 (T@U) Bool)
(declare-fun $generated@@168 (T@U) Bool)
(declare-fun $generated@@169 () Int)
(assert  (and (and (and (= (type $generated@@157) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@158) $generated@@47)) (= (type $generated@@159) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@160) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@170  (=> (= $generated@@157 ($generated@@45 $generated@@158 $generated@@159 $generated@@160 false)) (=> (and (= $generated@@161 (bvult $generated@@162 $generated@@163)) (= $generated@@164 (bvugt $generated@@163 $generated@@162))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= $generated@@161 $generated@@164)) (=> (= $generated@@161 $generated@@164) (=> (= $generated@@165 (bvule $generated@@162 $generated@@163)) (=> (and (= $generated@@166 (bvuge $generated@@163 $generated@@162)) (= (ControlFlow 0 2) (- 0 1))) (= $generated@@165 $generated@@166)))))))))
(let (($generated@@171  (=> (and (and ($generated@@167 $generated@@159) ($generated@@168 $generated@@159)) (and (= 0 $generated@@169) (= (ControlFlow 0 4) 2))) $generated@@170)))
$generated@@171)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (Real) Real)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@165 () Int)
(declare-fun $generated@@166 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@167 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@168 (Int Int) Int)
(declare-fun $generated@@191 (T@U) T@U)
(declare-fun $generated@@192 (T@T T@U) T@U)
(declare-fun $generated@@193 () T@T)
(declare-fun $generated@@204 (T@U) (_ BitVec 67))
(declare-fun $generated@@205 (T@U) (_ BitVec 32))
(declare-fun $generated@@206 (T@U) (_ BitVec 7))
(declare-fun $generated@@207 (T@U) (_ BitVec 2))
(declare-fun $generated@@208 () T@T)
(declare-fun $generated@@209 () T@T)
(declare-fun $generated@@210 () T@T)
(declare-fun $generated@@211 () T@T)
(declare-fun $generated@@212 ((_ BitVec 67)) T@U)
(declare-fun $generated@@213 ((_ BitVec 32)) T@U)
(declare-fun $generated@@214 ((_ BitVec 7)) T@U)
(declare-fun $generated@@215 ((_ BitVec 2)) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 Real) ) (! (= ($generated@@159 $generated@@160) $generated@@160)
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (let (($generated@@163 (type $generated@@162)))
(= (type ($generated@@161 $generated@@162)) $generated@@163))
 :pattern ( ($generated@@161 $generated@@162))
)))
(assert (forall (($generated@@164 T@U) ) (! (= ($generated@@161 $generated@@164) $generated@@164)
 :pattern ( ($generated@@161 $generated@@164))
)))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@169 Int) ($generated@@170 Int) ($generated@@171 Real) ($generated@@172 Int) ($generated@@173 Real) ($generated@@174 (_ BitVec 67)) ($generated@@175 (_ BitVec 32)) ($generated@@176 (_ BitVec 7)) ($generated@@177 (_ BitVec 2)) ($generated@@178 Int) ($generated@@179 Int) ) (!  (=> (or ($generated@@167 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@170) (= ($generated@@168 $generated@@172 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@173) (< $generated@@173 300.0))) (= 0 $generated@@178)) (and (<= ($generated@@157 0) $generated@@179) (< $generated@@179 80))))) (= ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179)  (and (and (and (and (and (and (and (and (and (and (= $generated@@169 $generated@@169) (= $generated@@170 $generated@@170)) (= $generated@@171 $generated@@171)) (= $generated@@172 $generated@@172)) (= $generated@@173 $generated@@173)) (= $generated@@174 $generated@@174)) (= $generated@@175 $generated@@175)) (= $generated@@176 $generated@@176)) (= $generated@@177 $generated@@177)) (= $generated@@178 $generated@@178)) (= $generated@@179 $generated@@179))))
 :pattern ( ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@180 Int) ($generated@@181 Int) ($generated@@182 Real) ($generated@@183 Int) ($generated@@184 Real) ($generated@@185 (_ BitVec 67)) ($generated@@186 (_ BitVec 32)) ($generated@@187 (_ BitVec 7)) ($generated@@188 (_ BitVec 2)) ($generated@@189 Int) ($generated@@190 Int) ) (!  (=> (or ($generated@@167 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@181) (= ($generated@@168 $generated@@183 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@184) (< $generated@@184 300.0))) (= 0 $generated@@189)) (and (<= ($generated@@157 0) $generated@@190) (< $generated@@190 80))))) true)
 :pattern ( ($generated@@166 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190))
))))
(assert  (and (and (= ($generated@@1 $generated@@193) 11) (forall (($generated@@194 T@U) ) (! (= (type ($generated@@191 $generated@@194)) $generated@@193)
 :pattern ( ($generated@@191 $generated@@194))
))) (forall (($generated@@195 T@T) ($generated@@196 T@U) ) (! (= (type ($generated@@192 $generated@@195 $generated@@196)) $generated@@195)
 :pattern ( ($generated@@192 $generated@@195 $generated@@196))
))))
(assert (forall (($generated@@197 T@U) ) (! (let (($generated@@198 (type $generated@@197)))
(= ($generated@@192 $generated@@198 ($generated@@191 $generated@@197)) $generated@@197))
 :pattern ( ($generated@@191 $generated@@197))
)))
(assert (forall (($generated@@199 Int) ($generated@@200 Int) ) (! (= ($generated@@168 $generated@@199 $generated@@200) (mod $generated@@199 $generated@@200))
 :pattern ( ($generated@@168 $generated@@199 $generated@@200))
)))
(assert (forall (($generated@@201 Int) ) (! (= ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))) ($generated@@161 ($generated@@191 ($generated@@8 $generated@@201))))
 :pattern ( ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))))
)))
(assert (forall (($generated@@202 Real) ) (! (= ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))) ($generated@@161 ($generated@@191 ($generated@@9 $generated@@202))))
 :pattern ( ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))))
)))
(assert (forall (($generated@@203 T@U) ) (! (= ($generated@@191 ($generated@@161 $generated@@203)) ($generated@@161 ($generated@@191 $generated@@203)))
 :pattern ( ($generated@@191 ($generated@@161 $generated@@203)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@216 (_ BitVec 67)) ) (! (= ($generated@@204 ($generated@@212 $generated@@216)) $generated@@216)
 :pattern ( ($generated@@212 $generated@@216))
)) (= ($generated@@1 $generated@@208) 12)) (forall (($generated@@217 T@U) ) (!  (=> (= (type $generated@@217) $generated@@208) (= ($generated@@212 ($generated@@204 $generated@@217)) $generated@@217))
 :pattern ( ($generated@@204 $generated@@217))
))) (forall (($generated@@218 (_ BitVec 67)) ) (! (= (type ($generated@@212 $generated@@218)) $generated@@208)
 :pattern ( ($generated@@212 $generated@@218))
))) (forall (($generated@@219 (_ BitVec 32)) ) (! (= ($generated@@205 ($generated@@213 $generated@@219)) $generated@@219)
 :pattern ( ($generated@@213 $generated@@219))
))) (= ($generated@@1 $generated@@209) 13)) (forall (($generated@@220 T@U) ) (!  (=> (= (type $generated@@220) $generated@@209) (= ($generated@@213 ($generated@@205 $generated@@220)) $generated@@220))
 :pattern ( ($generated@@205 $generated@@220))
))) (forall (($generated@@221 (_ BitVec 32)) ) (! (= (type ($generated@@213 $generated@@221)) $generated@@209)
 :pattern ( ($generated@@213 $generated@@221))
))) (forall (($generated@@222 (_ BitVec 7)) ) (! (= ($generated@@206 ($generated@@214 $generated@@222)) $generated@@222)
 :pattern ( ($generated@@214 $generated@@222))
))) (= ($generated@@1 $generated@@210) 14)) (forall (($generated@@223 T@U) ) (!  (=> (= (type $generated@@223) $generated@@210) (= ($generated@@214 ($generated@@206 $generated@@223)) $generated@@223))
 :pattern ( ($generated@@206 $generated@@223))
))) (forall (($generated@@224 (_ BitVec 7)) ) (! (= (type ($generated@@214 $generated@@224)) $generated@@210)
 :pattern ( ($generated@@214 $generated@@224))
))) (forall (($generated@@225 (_ BitVec 2)) ) (! (= ($generated@@207 ($generated@@215 $generated@@225)) $generated@@225)
 :pattern ( ($generated@@215 $generated@@225))
))) (= ($generated@@1 $generated@@211) 15)) (forall (($generated@@226 T@U) ) (!  (=> (= (type $generated@@226) $generated@@211) (= ($generated@@215 ($generated@@207 $generated@@226)) $generated@@226))
 :pattern ( ($generated@@207 $generated@@226))
))) (forall (($generated@@227 (_ BitVec 2)) ) (! (= (type ($generated@@215 $generated@@227)) $generated@@211)
 :pattern ( ($generated@@215 $generated@@227))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@228 Int) ($generated@@229 Int) ($generated@@230 Real) ($generated@@231 Int) ($generated@@232 Real) ($generated@@233 T@U) ($generated@@234 T@U) ($generated@@235 T@U) ($generated@@236 T@U) ($generated@@237 Int) ($generated@@238 Int) ) (!  (=> (and (and (and (and (= (type $generated@@233) $generated@@208) (= (type $generated@@234) $generated@@209)) (= (type $generated@@235) $generated@@210)) (= (type $generated@@236) $generated@@211)) (or ($generated@@167 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@229) (= ($generated@@168 $generated@@231 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@232) (< $generated@@232 300.0))) (= 0 $generated@@237)) (and (<= ($generated@@157 0) $generated@@238) (< $generated@@238 80)))))) (= ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238))  (and (and (and (and (and (and (and (and (and (and (= ($generated@@157 $generated@@228) ($generated@@157 $generated@@228)) (= ($generated@@157 $generated@@229) ($generated@@157 $generated@@229))) (= ($generated@@159 $generated@@230) ($generated@@159 $generated@@230))) (= ($generated@@157 $generated@@231) ($generated@@157 $generated@@231))) (= ($generated@@159 $generated@@232) ($generated@@159 $generated@@232))) (= ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@204 ($generated@@161 $generated@@233)))) (= ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@205 ($generated@@161 $generated@@234)))) (= ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@206 ($generated@@161 $generated@@235)))) (= ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@207 ($generated@@161 $generated@@236)))) (= ($generated@@157 $generated@@237) ($generated@@157 $generated@@237))) (= ($generated@@157 $generated@@238) ($generated@@157 $generated@@238)))))
 :weight 3
 :pattern ( ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@239 () Int)
(declare-fun $generated@@240 () Int)
(declare-fun $generated@@241 () Real)
(declare-fun $generated@@242 () Int)
(declare-fun $generated@@243 () Real)
(declare-fun $generated@@244 () (_ BitVec 67))
(declare-fun $generated@@245 () (_ BitVec 32))
(declare-fun $generated@@246 () (_ BitVec 7))
(declare-fun $generated@@247 () (_ BitVec 2))
(declare-fun $generated@@248 () Int)
(declare-fun $generated@@249 () Int)
(declare-fun $generated@@250 () (_ BitVec 67))
(declare-fun $generated@@251 () (_ BitVec 67))
(declare-fun $generated@@252 () (_ BitVec 67))
(declare-fun $generated@@253 () (_ BitVec 67))
(declare-fun $generated@@254 () (_ BitVec 67))
(declare-fun $generated@@255 () (_ BitVec 67))
(declare-fun $generated@@256 () T@U)
(declare-fun $generated@@257 () T@U)
(declare-fun $generated@@258 () T@U)
(declare-fun $generated@@259 () T@U)
(declare-fun $generated@@260 (T@U) Bool)
(declare-fun $generated@@261 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@256) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@257) $generated@@47)) (= (type $generated@@258) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@259) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 33) (let (($generated@@262  (and (=> (= (ControlFlow 0 4) (- 0 14)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239))) (and (=> (= (ControlFlow 0 4) (- 0 13)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240))) (and (=> (= (ControlFlow 0 4) (- 0 12)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241))) (and (=> (= (ControlFlow 0 4) (- 0 11)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242))) (and (=> (= (ControlFlow 0 4) (- 0 10)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243))) (and (=> (= (ControlFlow 0 4) (- 0 9)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244))) (and (=> (= (ControlFlow 0 4) (- 0 8)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245))) (and (=> (= (ControlFlow 0 4) (- 0 7)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248))) (=> (= (ControlFlow 0 4) (- 0 3)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@249 $generated@@249))))))))))))))))))))))))))
(let (($generated@@263  (=> (and (<= ($generated@@157 0) $generated@@239) (< $generated@@239 67)) (and (=> (= (ControlFlow 0 27) (- 0 29)) (and (<= 0 $generated@@239) (< $generated@@239 128))) (=> (and (<= 0 $generated@@239) (< $generated@@239 128)) (and (=> (= (ControlFlow 0 27) (- 0 28)) (bvule ((_ int2bv 7) $generated@@239) #b1000011)) (=> (bvule ((_ int2bv 7) $generated@@239) #b1000011) (=> (= $generated@@250 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) $generated@@239)))) (=> (and (= $generated@@244 $generated@@250) (= (ControlFlow 0 27) 4)) $generated@@262)))))))))
(let (($generated@@264  (=> (and (< $generated@@239 ($generated@@157 0)) (= (ControlFlow 0 31) 27)) $generated@@263)))
(let (($generated@@265  (=> (and (<= ($generated@@157 0) $generated@@239) (= (ControlFlow 0 30) 27)) $generated@@263)))
(let (($generated@@266  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 24) (- 0 26)) (and (<= 0 $generated@@249) (< $generated@@249 128))) (=> (and (<= 0 $generated@@249) (< $generated@@249 128)) (and (=> (= (ControlFlow 0 24) (- 0 25)) (bvule ((_ int2bv 7) $generated@@249) #b1000011)) (=> (bvule ((_ int2bv 7) $generated@@249) #b1000011) (=> (= $generated@@252 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) $generated@@249)))) (=> (and (= $generated@@244 $generated@@252) (= (ControlFlow 0 24) 4)) $generated@@262)))))))))
(let (($generated@@267  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 21) (- 0 23)) (and (<= 0 $generated@@240) (< $generated@@240 128))) (=> (and (<= 0 $generated@@240) (< $generated@@240 128)) (and (=> (= (ControlFlow 0 21) (- 0 22)) (bvule ((_ int2bv 7) $generated@@240) #b1000011)) (=> (bvule ((_ int2bv 7) $generated@@240) #b1000011) (=> (= $generated@@253 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) $generated@@240)))) (=> (and (= $generated@@244 $generated@@253) (= (ControlFlow 0 21) 4)) $generated@@262)))))))))
(let (($generated@@268  (=> (<= ($generated@@157 0) $generated@@239) (and (=> (= (ControlFlow 0 18) (- 0 20)) (and (<= 0 $generated@@239) (< $generated@@239 128))) (=> (and (<= 0 $generated@@239) (< $generated@@239 128)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (bvule ((_ int2bv 7) $generated@@239) #b1000011)) (=> (bvule ((_ int2bv 7) $generated@@239) #b1000011) (=> (= $generated@@254 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) $generated@@239)))) (=> (and (= $generated@@244 $generated@@254) (= (ControlFlow 0 18) 4)) $generated@@262)))))))))
(let (($generated@@269  (=> (< $generated@@239 20) (and (=> (= (ControlFlow 0 15) (- 0 17)) (and (<= 0 $generated@@239) (< $generated@@239 128))) (=> (and (<= 0 $generated@@239) (< $generated@@239 128)) (and (=> (= (ControlFlow 0 15) (- 0 16)) (bvule ((_ int2bv 7) $generated@@239) #b1000011)) (=> (bvule ((_ int2bv 7) $generated@@239) #b1000011) (=> (= $generated@@255 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) $generated@@239)))) (=> (and (= $generated@@244 $generated@@255) (= (ControlFlow 0 15) 4)) $generated@@262)))))))))
(let (($generated@@270  (=> (and (and (and (and (and (<= 20 $generated@@239) (< $generated@@239 ($generated@@157 0))) (not (and (<= ($generated@@157 0) $generated@@239) (< $generated@@239 67)))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@271  (=> (= $generated@@256 ($generated@@45 $generated@@257 $generated@@258 $generated@@259 false)) (and (and (and (and (and (and (=> (= (ControlFlow 0 32) 15) $generated@@269) (=> (= (ControlFlow 0 32) 18) $generated@@268)) (=> (= (ControlFlow 0 32) 21) $generated@@267)) (=> (= (ControlFlow 0 32) 24) $generated@@266)) (=> (= (ControlFlow 0 32) 2) $generated@@270)) (=> (= (ControlFlow 0 32) 30) $generated@@265)) (=> (= (ControlFlow 0 32) 31) $generated@@264)))))
(let (($generated@@272  (=> (and (and ($generated@@260 $generated@@258) ($generated@@261 $generated@@258)) (and (<= ($generated@@157 0) $generated@@240) (= ($generated@@168 $generated@@242 ($generated@@157 2)) ($generated@@157 0)))) (=> (and (and (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@243) (< $generated@@243 300.0)) (= 0 $generated@@248)) (and (and (<= ($generated@@157 0) $generated@@249) (< $generated@@249 80)) (and (= 2 $generated@@165) (= (ControlFlow 0 33) 32)))) $generated@@271))))
$generated@@272))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 15) (- 17))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 18) (- 20))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 18) (- 19))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 21) (- 23))))
(check-sat)
(get-info :reason-unknown)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (Real) Real)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@165 () Int)
(declare-fun $generated@@166 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@167 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@168 (Int Int) Int)
(declare-fun $generated@@191 (T@U) T@U)
(declare-fun $generated@@192 (T@T T@U) T@U)
(declare-fun $generated@@193 () T@T)
(declare-fun $generated@@204 (T@U) (_ BitVec 67))
(declare-fun $generated@@205 (T@U) (_ BitVec 32))
(declare-fun $generated@@206 (T@U) (_ BitVec 7))
(declare-fun $generated@@207 (T@U) (_ BitVec 2))
(declare-fun $generated@@208 () T@T)
(declare-fun $generated@@209 () T@T)
(declare-fun $generated@@210 () T@T)
(declare-fun $generated@@211 () T@T)
(declare-fun $generated@@212 ((_ BitVec 67)) T@U)
(declare-fun $generated@@213 ((_ BitVec 32)) T@U)
(declare-fun $generated@@214 ((_ BitVec 7)) T@U)
(declare-fun $generated@@215 ((_ BitVec 2)) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 Real) ) (! (= ($generated@@159 $generated@@160) $generated@@160)
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (let (($generated@@163 (type $generated@@162)))
(= (type ($generated@@161 $generated@@162)) $generated@@163))
 :pattern ( ($generated@@161 $generated@@162))
)))
(assert (forall (($generated@@164 T@U) ) (! (= ($generated@@161 $generated@@164) $generated@@164)
 :pattern ( ($generated@@161 $generated@@164))
)))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@169 Int) ($generated@@170 Int) ($generated@@171 Real) ($generated@@172 Int) ($generated@@173 Real) ($generated@@174 (_ BitVec 67)) ($generated@@175 (_ BitVec 32)) ($generated@@176 (_ BitVec 7)) ($generated@@177 (_ BitVec 2)) ($generated@@178 Int) ($generated@@179 Int) ) (!  (=> (or ($generated@@167 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@170) (= ($generated@@168 $generated@@172 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@173) (< $generated@@173 300.0))) (= 0 $generated@@178)) (and (<= ($generated@@157 0) $generated@@179) (< $generated@@179 80))))) (= ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179)  (and (and (and (and (and (and (and (and (and (and (= $generated@@169 $generated@@169) (= $generated@@170 $generated@@170)) (= $generated@@171 $generated@@171)) (= $generated@@172 $generated@@172)) (= $generated@@173 $generated@@173)) (= $generated@@174 $generated@@174)) (= $generated@@175 $generated@@175)) (= $generated@@176 $generated@@176)) (= $generated@@177 $generated@@177)) (= $generated@@178 $generated@@178)) (= $generated@@179 $generated@@179))))
 :pattern ( ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@180 Int) ($generated@@181 Int) ($generated@@182 Real) ($generated@@183 Int) ($generated@@184 Real) ($generated@@185 (_ BitVec 67)) ($generated@@186 (_ BitVec 32)) ($generated@@187 (_ BitVec 7)) ($generated@@188 (_ BitVec 2)) ($generated@@189 Int) ($generated@@190 Int) ) (!  (=> (or ($generated@@167 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@181) (= ($generated@@168 $generated@@183 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@184) (< $generated@@184 300.0))) (= 0 $generated@@189)) (and (<= ($generated@@157 0) $generated@@190) (< $generated@@190 80))))) true)
 :pattern ( ($generated@@166 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190))
))))
(assert  (and (and (= ($generated@@1 $generated@@193) 11) (forall (($generated@@194 T@U) ) (! (= (type ($generated@@191 $generated@@194)) $generated@@193)
 :pattern ( ($generated@@191 $generated@@194))
))) (forall (($generated@@195 T@T) ($generated@@196 T@U) ) (! (= (type ($generated@@192 $generated@@195 $generated@@196)) $generated@@195)
 :pattern ( ($generated@@192 $generated@@195 $generated@@196))
))))
(assert (forall (($generated@@197 T@U) ) (! (let (($generated@@198 (type $generated@@197)))
(= ($generated@@192 $generated@@198 ($generated@@191 $generated@@197)) $generated@@197))
 :pattern ( ($generated@@191 $generated@@197))
)))
(assert (forall (($generated@@199 Int) ($generated@@200 Int) ) (! (= ($generated@@168 $generated@@199 $generated@@200) (mod $generated@@199 $generated@@200))
 :pattern ( ($generated@@168 $generated@@199 $generated@@200))
)))
(assert (forall (($generated@@201 Int) ) (! (= ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))) ($generated@@161 ($generated@@191 ($generated@@8 $generated@@201))))
 :pattern ( ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))))
)))
(assert (forall (($generated@@202 Real) ) (! (= ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))) ($generated@@161 ($generated@@191 ($generated@@9 $generated@@202))))
 :pattern ( ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))))
)))
(assert (forall (($generated@@203 T@U) ) (! (= ($generated@@191 ($generated@@161 $generated@@203)) ($generated@@161 ($generated@@191 $generated@@203)))
 :pattern ( ($generated@@191 ($generated@@161 $generated@@203)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@216 (_ BitVec 67)) ) (! (= ($generated@@204 ($generated@@212 $generated@@216)) $generated@@216)
 :pattern ( ($generated@@212 $generated@@216))
)) (= ($generated@@1 $generated@@208) 12)) (forall (($generated@@217 T@U) ) (!  (=> (= (type $generated@@217) $generated@@208) (= ($generated@@212 ($generated@@204 $generated@@217)) $generated@@217))
 :pattern ( ($generated@@204 $generated@@217))
))) (forall (($generated@@218 (_ BitVec 67)) ) (! (= (type ($generated@@212 $generated@@218)) $generated@@208)
 :pattern ( ($generated@@212 $generated@@218))
))) (forall (($generated@@219 (_ BitVec 32)) ) (! (= ($generated@@205 ($generated@@213 $generated@@219)) $generated@@219)
 :pattern ( ($generated@@213 $generated@@219))
))) (= ($generated@@1 $generated@@209) 13)) (forall (($generated@@220 T@U) ) (!  (=> (= (type $generated@@220) $generated@@209) (= ($generated@@213 ($generated@@205 $generated@@220)) $generated@@220))
 :pattern ( ($generated@@205 $generated@@220))
))) (forall (($generated@@221 (_ BitVec 32)) ) (! (= (type ($generated@@213 $generated@@221)) $generated@@209)
 :pattern ( ($generated@@213 $generated@@221))
))) (forall (($generated@@222 (_ BitVec 7)) ) (! (= ($generated@@206 ($generated@@214 $generated@@222)) $generated@@222)
 :pattern ( ($generated@@214 $generated@@222))
))) (= ($generated@@1 $generated@@210) 14)) (forall (($generated@@223 T@U) ) (!  (=> (= (type $generated@@223) $generated@@210) (= ($generated@@214 ($generated@@206 $generated@@223)) $generated@@223))
 :pattern ( ($generated@@206 $generated@@223))
))) (forall (($generated@@224 (_ BitVec 7)) ) (! (= (type ($generated@@214 $generated@@224)) $generated@@210)
 :pattern ( ($generated@@214 $generated@@224))
))) (forall (($generated@@225 (_ BitVec 2)) ) (! (= ($generated@@207 ($generated@@215 $generated@@225)) $generated@@225)
 :pattern ( ($generated@@215 $generated@@225))
))) (= ($generated@@1 $generated@@211) 15)) (forall (($generated@@226 T@U) ) (!  (=> (= (type $generated@@226) $generated@@211) (= ($generated@@215 ($generated@@207 $generated@@226)) $generated@@226))
 :pattern ( ($generated@@207 $generated@@226))
))) (forall (($generated@@227 (_ BitVec 2)) ) (! (= (type ($generated@@215 $generated@@227)) $generated@@211)
 :pattern ( ($generated@@215 $generated@@227))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@228 Int) ($generated@@229 Int) ($generated@@230 Real) ($generated@@231 Int) ($generated@@232 Real) ($generated@@233 T@U) ($generated@@234 T@U) ($generated@@235 T@U) ($generated@@236 T@U) ($generated@@237 Int) ($generated@@238 Int) ) (!  (=> (and (and (and (and (= (type $generated@@233) $generated@@208) (= (type $generated@@234) $generated@@209)) (= (type $generated@@235) $generated@@210)) (= (type $generated@@236) $generated@@211)) (or ($generated@@167 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@229) (= ($generated@@168 $generated@@231 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@232) (< $generated@@232 300.0))) (= 0 $generated@@237)) (and (<= ($generated@@157 0) $generated@@238) (< $generated@@238 80)))))) (= ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238))  (and (and (and (and (and (and (and (and (and (and (= ($generated@@157 $generated@@228) ($generated@@157 $generated@@228)) (= ($generated@@157 $generated@@229) ($generated@@157 $generated@@229))) (= ($generated@@159 $generated@@230) ($generated@@159 $generated@@230))) (= ($generated@@157 $generated@@231) ($generated@@157 $generated@@231))) (= ($generated@@159 $generated@@232) ($generated@@159 $generated@@232))) (= ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@204 ($generated@@161 $generated@@233)))) (= ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@205 ($generated@@161 $generated@@234)))) (= ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@206 ($generated@@161 $generated@@235)))) (= ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@207 ($generated@@161 $generated@@236)))) (= ($generated@@157 $generated@@237) ($generated@@157 $generated@@237))) (= ($generated@@157 $generated@@238) ($generated@@157 $generated@@238)))))
 :weight 3
 :pattern ( ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@239 () Int)
(declare-fun $generated@@240 () Int)
(declare-fun $generated@@241 () Real)
(declare-fun $generated@@242 () Int)
(declare-fun $generated@@243 () Real)
(declare-fun $generated@@244 () (_ BitVec 67))
(declare-fun $generated@@245 () (_ BitVec 32))
(declare-fun $generated@@246 () (_ BitVec 7))
(declare-fun $generated@@247 () (_ BitVec 2))
(declare-fun $generated@@248 () Int)
(declare-fun $generated@@249 () Int)
(declare-fun $generated@@250 () (_ BitVec 67))
(declare-fun $generated@@251 () (_ BitVec 67))
(declare-fun $generated@@252 () Int)
(declare-fun $generated@@253 () Int)
(declare-fun $generated@@254 () Int)
(declare-fun $generated@@255 () (_ BitVec 67))
(declare-fun $generated@@256 () Int)
(declare-fun $generated@@257 () (_ BitVec 67))
(declare-fun $generated@@258 () T@U)
(declare-fun $generated@@259 () T@U)
(declare-fun $generated@@260 () T@U)
(declare-fun $generated@@261 () T@U)
(declare-fun $generated@@262 (T@U) Bool)
(declare-fun $generated@@263 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@258) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@259) $generated@@47)) (= (type $generated@@260) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@261) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 32) (let (($generated@@264  (and (=> (= (ControlFlow 0 4) (- 0 14)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239))) (and (=> (= (ControlFlow 0 4) (- 0 13)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240))) (and (=> (= (ControlFlow 0 4) (- 0 12)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241))) (and (=> (= (ControlFlow 0 4) (- 0 11)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242))) (and (=> (= (ControlFlow 0 4) (- 0 10)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243))) (and (=> (= (ControlFlow 0 4) (- 0 9)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244))) (and (=> (= (ControlFlow 0 4) (- 0 8)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245))) (and (=> (= (ControlFlow 0 4) (- 0 7)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248))) (=> (= (ControlFlow 0 4) (- 0 3)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@249 $generated@@249))))))))))))))))))))))))))
(let (($generated@@265  (=> (and (<= ($generated@@157 0) $generated@@242) (<= $generated@@242 ($generated@@157 66))) (and (=> (= (ControlFlow 0 23) (- 0 25)) (and (<= 0 $generated@@242) (< $generated@@242 128))) (=> (and (<= 0 $generated@@242) (< $generated@@242 128)) (and (=> (= (ControlFlow 0 23) (- 0 24)) (bvule ((_ int2bv 7) $generated@@242) #b1000011)) (=> (bvule ((_ int2bv 7) $generated@@242) #b1000011) (=> (= $generated@@250 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) $generated@@242)))) (=> (and (= $generated@@244 $generated@@250) (= (ControlFlow 0 23) 4)) $generated@@264)))))))))
(let (($generated@@266  (=> (and (< $generated@@242 ($generated@@157 0)) (= (ControlFlow 0 28) 23)) $generated@@265)))
(let (($generated@@267  (=> (and (<= ($generated@@157 0) $generated@@242) (= $generated@@252 ($generated@@157 66))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (= ($generated@@168 $generated@@252 ($generated@@157 2)) ($generated@@157 0))) (=> (= ($generated@@168 $generated@@252 ($generated@@157 2)) ($generated@@157 0)) (=> (= (ControlFlow 0 26) 23) $generated@@265))))))
(let (($generated@@268  (=> (= $generated@@253 ($generated@@157 0)) (and (=> (= (ControlFlow 0 29) (- 0 30)) (= ($generated@@168 $generated@@253 ($generated@@157 2)) ($generated@@157 0))) (=> (= ($generated@@168 $generated@@253 ($generated@@157 2)) ($generated@@157 0)) (and (=> (= (ControlFlow 0 29) 26) $generated@@267) (=> (= (ControlFlow 0 29) 28) $generated@@266)))))))
(let (($generated@@269  (=> (= $generated@@254 ($generated@@157 0)) (and (=> (= (ControlFlow 0 19) (- 0 22)) (= ($generated@@168 $generated@@254 ($generated@@157 2)) ($generated@@157 0))) (=> (= ($generated@@168 $generated@@254 ($generated@@157 2)) ($generated@@157 0)) (=> (<= ($generated@@157 0) $generated@@242) (and (=> (= (ControlFlow 0 19) (- 0 21)) (and (<= 0 $generated@@242) (< $generated@@242 128))) (=> (and (<= 0 $generated@@242) (< $generated@@242 128)) (and (=> (= (ControlFlow 0 19) (- 0 20)) (bvule ((_ int2bv 7) $generated@@242) #b1000011)) (=> (bvule ((_ int2bv 7) $generated@@242) #b1000011) (=> (= $generated@@255 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) $generated@@242)))) (=> (and (= $generated@@244 $generated@@255) (= (ControlFlow 0 19) 4)) $generated@@264))))))))))))
(let (($generated@@270  (=> (= $generated@@256 ($generated@@157 66)) (and (=> (= (ControlFlow 0 15) (- 0 18)) (= ($generated@@168 $generated@@256 ($generated@@157 2)) ($generated@@157 0))) (=> (= ($generated@@168 $generated@@256 ($generated@@157 2)) ($generated@@157 0)) (=> (<= $generated@@242 ($generated@@157 66)) (and (=> (= (ControlFlow 0 15) (- 0 17)) (and (<= 0 $generated@@242) (< $generated@@242 128))) (=> (and (<= 0 $generated@@242) (< $generated@@242 128)) (and (=> (= (ControlFlow 0 15) (- 0 16)) (bvule ((_ int2bv 7) $generated@@242) #b1000011)) (=> (bvule ((_ int2bv 7) $generated@@242) #b1000011) (=> (= $generated@@257 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) $generated@@242)))) (=> (and (= $generated@@244 $generated@@257) (= (ControlFlow 0 15) 4)) $generated@@264))))))))))))
(let (($generated@@271  (=> (and (and (and (< ($generated@@157 66) $generated@@242) (< $generated@@242 ($generated@@157 0))) (not (and (<= ($generated@@157 0) $generated@@242) (<= $generated@@242 ($generated@@157 66))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@272  (=> (= $generated@@258 ($generated@@45 $generated@@259 $generated@@260 $generated@@261 false)) (and (and (and (=> (= (ControlFlow 0 31) 15) $generated@@270) (=> (= (ControlFlow 0 31) 19) $generated@@269)) (=> (= (ControlFlow 0 31) 29) $generated@@268)) (=> (= (ControlFlow 0 31) 2) $generated@@271)))))
(let (($generated@@273  (=> (and (and ($generated@@262 $generated@@260) ($generated@@263 $generated@@260)) (and (<= ($generated@@157 0) $generated@@240) (= ($generated@@168 $generated@@242 ($generated@@157 2)) ($generated@@157 0)))) (=> (and (and (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@243) (< $generated@@243 300.0)) (= 0 $generated@@248)) (and (and (<= ($generated@@157 0) $generated@@249) (< $generated@@249 80)) (and (= 2 $generated@@165) (= (ControlFlow 0 32) 31)))) $generated@@272))))
$generated@@273)))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 15) (- 17))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 19) (- 21))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 19) (- 20))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (Real) Real)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@165 () Int)
(declare-fun $generated@@166 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@167 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@168 (Int Int) Int)
(declare-fun $generated@@191 (T@U) T@U)
(declare-fun $generated@@192 (T@T T@U) T@U)
(declare-fun $generated@@193 () T@T)
(declare-fun $generated@@204 (T@U) (_ BitVec 67))
(declare-fun $generated@@205 (T@U) (_ BitVec 32))
(declare-fun $generated@@206 (T@U) (_ BitVec 7))
(declare-fun $generated@@207 (T@U) (_ BitVec 2))
(declare-fun $generated@@208 () T@T)
(declare-fun $generated@@209 () T@T)
(declare-fun $generated@@210 () T@T)
(declare-fun $generated@@211 () T@T)
(declare-fun $generated@@212 ((_ BitVec 67)) T@U)
(declare-fun $generated@@213 ((_ BitVec 32)) T@U)
(declare-fun $generated@@214 ((_ BitVec 7)) T@U)
(declare-fun $generated@@215 ((_ BitVec 2)) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 Real) ) (! (= ($generated@@159 $generated@@160) $generated@@160)
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (let (($generated@@163 (type $generated@@162)))
(= (type ($generated@@161 $generated@@162)) $generated@@163))
 :pattern ( ($generated@@161 $generated@@162))
)))
(assert (forall (($generated@@164 T@U) ) (! (= ($generated@@161 $generated@@164) $generated@@164)
 :pattern ( ($generated@@161 $generated@@164))
)))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@169 Int) ($generated@@170 Int) ($generated@@171 Real) ($generated@@172 Int) ($generated@@173 Real) ($generated@@174 (_ BitVec 67)) ($generated@@175 (_ BitVec 32)) ($generated@@176 (_ BitVec 7)) ($generated@@177 (_ BitVec 2)) ($generated@@178 Int) ($generated@@179 Int) ) (!  (=> (or ($generated@@167 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@170) (= ($generated@@168 $generated@@172 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@173) (< $generated@@173 300.0))) (= 0 $generated@@178)) (and (<= ($generated@@157 0) $generated@@179) (< $generated@@179 80))))) (= ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179)  (and (and (and (and (and (and (and (and (and (and (= $generated@@169 $generated@@169) (= $generated@@170 $generated@@170)) (= $generated@@171 $generated@@171)) (= $generated@@172 $generated@@172)) (= $generated@@173 $generated@@173)) (= $generated@@174 $generated@@174)) (= $generated@@175 $generated@@175)) (= $generated@@176 $generated@@176)) (= $generated@@177 $generated@@177)) (= $generated@@178 $generated@@178)) (= $generated@@179 $generated@@179))))
 :pattern ( ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@180 Int) ($generated@@181 Int) ($generated@@182 Real) ($generated@@183 Int) ($generated@@184 Real) ($generated@@185 (_ BitVec 67)) ($generated@@186 (_ BitVec 32)) ($generated@@187 (_ BitVec 7)) ($generated@@188 (_ BitVec 2)) ($generated@@189 Int) ($generated@@190 Int) ) (!  (=> (or ($generated@@167 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@181) (= ($generated@@168 $generated@@183 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@184) (< $generated@@184 300.0))) (= 0 $generated@@189)) (and (<= ($generated@@157 0) $generated@@190) (< $generated@@190 80))))) true)
 :pattern ( ($generated@@166 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190))
))))
(assert  (and (and (= ($generated@@1 $generated@@193) 11) (forall (($generated@@194 T@U) ) (! (= (type ($generated@@191 $generated@@194)) $generated@@193)
 :pattern ( ($generated@@191 $generated@@194))
))) (forall (($generated@@195 T@T) ($generated@@196 T@U) ) (! (= (type ($generated@@192 $generated@@195 $generated@@196)) $generated@@195)
 :pattern ( ($generated@@192 $generated@@195 $generated@@196))
))))
(assert (forall (($generated@@197 T@U) ) (! (let (($generated@@198 (type $generated@@197)))
(= ($generated@@192 $generated@@198 ($generated@@191 $generated@@197)) $generated@@197))
 :pattern ( ($generated@@191 $generated@@197))
)))
(assert (forall (($generated@@199 Int) ($generated@@200 Int) ) (! (= ($generated@@168 $generated@@199 $generated@@200) (mod $generated@@199 $generated@@200))
 :pattern ( ($generated@@168 $generated@@199 $generated@@200))
)))
(assert (forall (($generated@@201 Int) ) (! (= ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))) ($generated@@161 ($generated@@191 ($generated@@8 $generated@@201))))
 :pattern ( ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))))
)))
(assert (forall (($generated@@202 Real) ) (! (= ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))) ($generated@@161 ($generated@@191 ($generated@@9 $generated@@202))))
 :pattern ( ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))))
)))
(assert (forall (($generated@@203 T@U) ) (! (= ($generated@@191 ($generated@@161 $generated@@203)) ($generated@@161 ($generated@@191 $generated@@203)))
 :pattern ( ($generated@@191 ($generated@@161 $generated@@203)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@216 (_ BitVec 67)) ) (! (= ($generated@@204 ($generated@@212 $generated@@216)) $generated@@216)
 :pattern ( ($generated@@212 $generated@@216))
)) (= ($generated@@1 $generated@@208) 12)) (forall (($generated@@217 T@U) ) (!  (=> (= (type $generated@@217) $generated@@208) (= ($generated@@212 ($generated@@204 $generated@@217)) $generated@@217))
 :pattern ( ($generated@@204 $generated@@217))
))) (forall (($generated@@218 (_ BitVec 67)) ) (! (= (type ($generated@@212 $generated@@218)) $generated@@208)
 :pattern ( ($generated@@212 $generated@@218))
))) (forall (($generated@@219 (_ BitVec 32)) ) (! (= ($generated@@205 ($generated@@213 $generated@@219)) $generated@@219)
 :pattern ( ($generated@@213 $generated@@219))
))) (= ($generated@@1 $generated@@209) 13)) (forall (($generated@@220 T@U) ) (!  (=> (= (type $generated@@220) $generated@@209) (= ($generated@@213 ($generated@@205 $generated@@220)) $generated@@220))
 :pattern ( ($generated@@205 $generated@@220))
))) (forall (($generated@@221 (_ BitVec 32)) ) (! (= (type ($generated@@213 $generated@@221)) $generated@@209)
 :pattern ( ($generated@@213 $generated@@221))
))) (forall (($generated@@222 (_ BitVec 7)) ) (! (= ($generated@@206 ($generated@@214 $generated@@222)) $generated@@222)
 :pattern ( ($generated@@214 $generated@@222))
))) (= ($generated@@1 $generated@@210) 14)) (forall (($generated@@223 T@U) ) (!  (=> (= (type $generated@@223) $generated@@210) (= ($generated@@214 ($generated@@206 $generated@@223)) $generated@@223))
 :pattern ( ($generated@@206 $generated@@223))
))) (forall (($generated@@224 (_ BitVec 7)) ) (! (= (type ($generated@@214 $generated@@224)) $generated@@210)
 :pattern ( ($generated@@214 $generated@@224))
))) (forall (($generated@@225 (_ BitVec 2)) ) (! (= ($generated@@207 ($generated@@215 $generated@@225)) $generated@@225)
 :pattern ( ($generated@@215 $generated@@225))
))) (= ($generated@@1 $generated@@211) 15)) (forall (($generated@@226 T@U) ) (!  (=> (= (type $generated@@226) $generated@@211) (= ($generated@@215 ($generated@@207 $generated@@226)) $generated@@226))
 :pattern ( ($generated@@207 $generated@@226))
))) (forall (($generated@@227 (_ BitVec 2)) ) (! (= (type ($generated@@215 $generated@@227)) $generated@@211)
 :pattern ( ($generated@@215 $generated@@227))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@228 Int) ($generated@@229 Int) ($generated@@230 Real) ($generated@@231 Int) ($generated@@232 Real) ($generated@@233 T@U) ($generated@@234 T@U) ($generated@@235 T@U) ($generated@@236 T@U) ($generated@@237 Int) ($generated@@238 Int) ) (!  (=> (and (and (and (and (= (type $generated@@233) $generated@@208) (= (type $generated@@234) $generated@@209)) (= (type $generated@@235) $generated@@210)) (= (type $generated@@236) $generated@@211)) (or ($generated@@167 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@229) (= ($generated@@168 $generated@@231 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@232) (< $generated@@232 300.0))) (= 0 $generated@@237)) (and (<= ($generated@@157 0) $generated@@238) (< $generated@@238 80)))))) (= ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238))  (and (and (and (and (and (and (and (and (and (and (= ($generated@@157 $generated@@228) ($generated@@157 $generated@@228)) (= ($generated@@157 $generated@@229) ($generated@@157 $generated@@229))) (= ($generated@@159 $generated@@230) ($generated@@159 $generated@@230))) (= ($generated@@157 $generated@@231) ($generated@@157 $generated@@231))) (= ($generated@@159 $generated@@232) ($generated@@159 $generated@@232))) (= ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@204 ($generated@@161 $generated@@233)))) (= ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@205 ($generated@@161 $generated@@234)))) (= ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@206 ($generated@@161 $generated@@235)))) (= ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@207 ($generated@@161 $generated@@236)))) (= ($generated@@157 $generated@@237) ($generated@@157 $generated@@237))) (= ($generated@@157 $generated@@238) ($generated@@157 $generated@@238)))))
 :weight 3
 :pattern ( ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@239 () Int)
(declare-fun $generated@@240 () Int)
(declare-fun $generated@@241 () Real)
(declare-fun $generated@@242 () Int)
(declare-fun $generated@@243 () Real)
(declare-fun $generated@@244 () (_ BitVec 67))
(declare-fun $generated@@245 () (_ BitVec 32))
(declare-fun $generated@@246 () (_ BitVec 7))
(declare-fun $generated@@247 () (_ BitVec 2))
(declare-fun $generated@@248 () Int)
(declare-fun $generated@@249 () Int)
(declare-fun $generated@@250 () (_ BitVec 67))
(declare-fun $generated@@251 () (_ BitVec 67))
(declare-fun $generated@@252 () (_ BitVec 67))
(declare-fun $generated@@253 () (_ BitVec 67))
(declare-fun $generated@@254 () (_ BitVec 67))
(declare-fun $generated@@255 () (_ BitVec 67))
(declare-fun $generated@@256 () T@U)
(declare-fun $generated@@257 () T@U)
(declare-fun $generated@@258 () T@U)
(declare-fun $generated@@259 () T@U)
(declare-fun $generated@@260 (T@U) Bool)
(declare-fun $generated@@261 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@256) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@257) $generated@@47)) (= (type $generated@@258) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@259) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 29) (let (($generated@@262  (and (=> (= (ControlFlow 0 4) (- 0 14)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239))) (and (=> (= (ControlFlow 0 4) (- 0 13)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240))) (and (=> (= (ControlFlow 0 4) (- 0 12)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241))) (and (=> (= (ControlFlow 0 4) (- 0 11)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242))) (and (=> (= (ControlFlow 0 4) (- 0 10)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243))) (and (=> (= (ControlFlow 0 4) (- 0 9)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244))) (and (=> (= (ControlFlow 0 4) (- 0 8)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245))) (and (=> (= (ControlFlow 0 4) (- 0 7)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248))) (=> (= (ControlFlow 0 4) (- 0 3)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@249 $generated@@249))))))))))))))))))))))))))
(let (($generated@@263  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (bvule #b0000000 #b1000011)) (=> (bvule #b0000000 #b1000011) (=> (= $generated@@250 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 #b0000000))) (=> (and (= $generated@@244 $generated@@250) (= (ControlFlow 0 26) 4)) $generated@@262)))))))
(let (($generated@@264  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 24) (- 0 25)) (bvule (concat #b00000 $generated@@247) #b1000011)) (=> (bvule (concat #b00000 $generated@@247) #b1000011) (=> (= $generated@@252 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 (concat #b00000 $generated@@247)))) (=> (and (= $generated@@244 $generated@@252) (= (ControlFlow 0 24) 4)) $generated@@262)))))))
(let (($generated@@265  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 21) (- 0 23)) (not (= ($generated@@206 ($generated@@161 ($generated@@214 #b0000010))) #b0000000))) (=> (not (= ($generated@@206 ($generated@@161 ($generated@@214 #b0000010))) #b0000000)) (and (=> (= (ControlFlow 0 21) (- 0 22)) (bvule (bvudiv $generated@@246 #b0000010) #b1000011)) (=> (bvule (bvudiv $generated@@246 #b0000010) #b1000011) (=> (= $generated@@253 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 (bvudiv $generated@@246 #b0000010)))) (=> (and (= $generated@@244 $generated@@253) (= (ControlFlow 0 21) 4)) $generated@@262)))))))))
(let (($generated@@266  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 18) (- 0 20)) (bvult $generated@@245 #x00000080)) (=> (bvult $generated@@245 #x00000080) (and (=> (= (ControlFlow 0 18) (- 0 19)) (bvule ((_ extract 6 0) $generated@@245) #b1000011)) (=> (bvule ((_ extract 6 0) $generated@@245) #b1000011) (=> (= $generated@@254 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ extract 6 0) $generated@@245)))) (=> (and (= $generated@@244 $generated@@254) (= (ControlFlow 0 18) 4)) $generated@@262)))))))))
(let (($generated@@267  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 15) (- 0 17)) (bvult $generated@@251 #b0000000000000000000000000000000000000000000000000000000000010000000)) (=> (bvult $generated@@251 #b0000000000000000000000000000000000000000000000000000000000010000000) (and (=> (= (ControlFlow 0 15) (- 0 16)) (bvule ((_ extract 6 0) $generated@@251) #b1000011)) (=> (bvule ((_ extract 6 0) $generated@@251) #b1000011) (=> (= $generated@@255 (bvshl $generated@@251 (concat #b000000000000000000000000000000000000000000000000000000000000 ((_ extract 6 0) $generated@@251)))) (=> (and (= $generated@@244 $generated@@255) (= (ControlFlow 0 15) 4)) $generated@@262)))))))))
(let (($generated@@268  (=> (and (and (and (and (and (not ($generated@@0 ($generated@@161 ($generated@@11 true)))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@269  (=> (= $generated@@256 ($generated@@45 $generated@@257 $generated@@258 $generated@@259 false)) (and (and (and (and (and (=> (= (ControlFlow 0 28) 15) $generated@@267) (=> (= (ControlFlow 0 28) 18) $generated@@266)) (=> (= (ControlFlow 0 28) 21) $generated@@265)) (=> (= (ControlFlow 0 28) 24) $generated@@264)) (=> (= (ControlFlow 0 28) 26) $generated@@263)) (=> (= (ControlFlow 0 28) 2) $generated@@268)))))
(let (($generated@@270  (=> (and (and ($generated@@260 $generated@@258) ($generated@@261 $generated@@258)) (and (<= ($generated@@157 0) $generated@@240) (= ($generated@@168 $generated@@242 ($generated@@157 2)) ($generated@@157 0)))) (=> (and (and (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@243) (< $generated@@243 300.0)) (= 0 $generated@@248)) (and (and (<= ($generated@@157 0) $generated@@249) (< $generated@@249 80)) (and (= 2 $generated@@165) (= (ControlFlow 0 29) 28)))) $generated@@269))))
$generated@@270))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 15) (- 17))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 15) (- 16))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 18) (- 20))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 18) (- 19))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (Real) Real)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@165 () Int)
(declare-fun $generated@@166 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@167 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@168 (Int Int) Int)
(declare-fun $generated@@191 (T@U) T@U)
(declare-fun $generated@@192 (T@T T@U) T@U)
(declare-fun $generated@@193 () T@T)
(declare-fun $generated@@204 (T@U) (_ BitVec 67))
(declare-fun $generated@@205 (T@U) (_ BitVec 32))
(declare-fun $generated@@206 (T@U) (_ BitVec 7))
(declare-fun $generated@@207 (T@U) (_ BitVec 2))
(declare-fun $generated@@208 () T@T)
(declare-fun $generated@@209 () T@T)
(declare-fun $generated@@210 () T@T)
(declare-fun $generated@@211 () T@T)
(declare-fun $generated@@212 ((_ BitVec 67)) T@U)
(declare-fun $generated@@213 ((_ BitVec 32)) T@U)
(declare-fun $generated@@214 ((_ BitVec 7)) T@U)
(declare-fun $generated@@215 ((_ BitVec 2)) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 Real) ) (! (= ($generated@@159 $generated@@160) $generated@@160)
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (let (($generated@@163 (type $generated@@162)))
(= (type ($generated@@161 $generated@@162)) $generated@@163))
 :pattern ( ($generated@@161 $generated@@162))
)))
(assert (forall (($generated@@164 T@U) ) (! (= ($generated@@161 $generated@@164) $generated@@164)
 :pattern ( ($generated@@161 $generated@@164))
)))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@169 Int) ($generated@@170 Int) ($generated@@171 Real) ($generated@@172 Int) ($generated@@173 Real) ($generated@@174 (_ BitVec 67)) ($generated@@175 (_ BitVec 32)) ($generated@@176 (_ BitVec 7)) ($generated@@177 (_ BitVec 2)) ($generated@@178 Int) ($generated@@179 Int) ) (!  (=> (or ($generated@@167 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@170) (= ($generated@@168 $generated@@172 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@173) (< $generated@@173 300.0))) (= 0 $generated@@178)) (and (<= ($generated@@157 0) $generated@@179) (< $generated@@179 80))))) (= ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179)  (and (and (and (and (and (and (and (and (and (and (= $generated@@169 $generated@@169) (= $generated@@170 $generated@@170)) (= $generated@@171 $generated@@171)) (= $generated@@172 $generated@@172)) (= $generated@@173 $generated@@173)) (= $generated@@174 $generated@@174)) (= $generated@@175 $generated@@175)) (= $generated@@176 $generated@@176)) (= $generated@@177 $generated@@177)) (= $generated@@178 $generated@@178)) (= $generated@@179 $generated@@179))))
 :pattern ( ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@180 Int) ($generated@@181 Int) ($generated@@182 Real) ($generated@@183 Int) ($generated@@184 Real) ($generated@@185 (_ BitVec 67)) ($generated@@186 (_ BitVec 32)) ($generated@@187 (_ BitVec 7)) ($generated@@188 (_ BitVec 2)) ($generated@@189 Int) ($generated@@190 Int) ) (!  (=> (or ($generated@@167 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@181) (= ($generated@@168 $generated@@183 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@184) (< $generated@@184 300.0))) (= 0 $generated@@189)) (and (<= ($generated@@157 0) $generated@@190) (< $generated@@190 80))))) true)
 :pattern ( ($generated@@166 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190))
))))
(assert  (and (and (= ($generated@@1 $generated@@193) 11) (forall (($generated@@194 T@U) ) (! (= (type ($generated@@191 $generated@@194)) $generated@@193)
 :pattern ( ($generated@@191 $generated@@194))
))) (forall (($generated@@195 T@T) ($generated@@196 T@U) ) (! (= (type ($generated@@192 $generated@@195 $generated@@196)) $generated@@195)
 :pattern ( ($generated@@192 $generated@@195 $generated@@196))
))))
(assert (forall (($generated@@197 T@U) ) (! (let (($generated@@198 (type $generated@@197)))
(= ($generated@@192 $generated@@198 ($generated@@191 $generated@@197)) $generated@@197))
 :pattern ( ($generated@@191 $generated@@197))
)))
(assert (forall (($generated@@199 Int) ($generated@@200 Int) ) (! (= ($generated@@168 $generated@@199 $generated@@200) (mod $generated@@199 $generated@@200))
 :pattern ( ($generated@@168 $generated@@199 $generated@@200))
)))
(assert (forall (($generated@@201 Int) ) (! (= ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))) ($generated@@161 ($generated@@191 ($generated@@8 $generated@@201))))
 :pattern ( ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))))
)))
(assert (forall (($generated@@202 Real) ) (! (= ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))) ($generated@@161 ($generated@@191 ($generated@@9 $generated@@202))))
 :pattern ( ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))))
)))
(assert (forall (($generated@@203 T@U) ) (! (= ($generated@@191 ($generated@@161 $generated@@203)) ($generated@@161 ($generated@@191 $generated@@203)))
 :pattern ( ($generated@@191 ($generated@@161 $generated@@203)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@216 (_ BitVec 67)) ) (! (= ($generated@@204 ($generated@@212 $generated@@216)) $generated@@216)
 :pattern ( ($generated@@212 $generated@@216))
)) (= ($generated@@1 $generated@@208) 12)) (forall (($generated@@217 T@U) ) (!  (=> (= (type $generated@@217) $generated@@208) (= ($generated@@212 ($generated@@204 $generated@@217)) $generated@@217))
 :pattern ( ($generated@@204 $generated@@217))
))) (forall (($generated@@218 (_ BitVec 67)) ) (! (= (type ($generated@@212 $generated@@218)) $generated@@208)
 :pattern ( ($generated@@212 $generated@@218))
))) (forall (($generated@@219 (_ BitVec 32)) ) (! (= ($generated@@205 ($generated@@213 $generated@@219)) $generated@@219)
 :pattern ( ($generated@@213 $generated@@219))
))) (= ($generated@@1 $generated@@209) 13)) (forall (($generated@@220 T@U) ) (!  (=> (= (type $generated@@220) $generated@@209) (= ($generated@@213 ($generated@@205 $generated@@220)) $generated@@220))
 :pattern ( ($generated@@205 $generated@@220))
))) (forall (($generated@@221 (_ BitVec 32)) ) (! (= (type ($generated@@213 $generated@@221)) $generated@@209)
 :pattern ( ($generated@@213 $generated@@221))
))) (forall (($generated@@222 (_ BitVec 7)) ) (! (= ($generated@@206 ($generated@@214 $generated@@222)) $generated@@222)
 :pattern ( ($generated@@214 $generated@@222))
))) (= ($generated@@1 $generated@@210) 14)) (forall (($generated@@223 T@U) ) (!  (=> (= (type $generated@@223) $generated@@210) (= ($generated@@214 ($generated@@206 $generated@@223)) $generated@@223))
 :pattern ( ($generated@@206 $generated@@223))
))) (forall (($generated@@224 (_ BitVec 7)) ) (! (= (type ($generated@@214 $generated@@224)) $generated@@210)
 :pattern ( ($generated@@214 $generated@@224))
))) (forall (($generated@@225 (_ BitVec 2)) ) (! (= ($generated@@207 ($generated@@215 $generated@@225)) $generated@@225)
 :pattern ( ($generated@@215 $generated@@225))
))) (= ($generated@@1 $generated@@211) 15)) (forall (($generated@@226 T@U) ) (!  (=> (= (type $generated@@226) $generated@@211) (= ($generated@@215 ($generated@@207 $generated@@226)) $generated@@226))
 :pattern ( ($generated@@207 $generated@@226))
))) (forall (($generated@@227 (_ BitVec 2)) ) (! (= (type ($generated@@215 $generated@@227)) $generated@@211)
 :pattern ( ($generated@@215 $generated@@227))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@228 Int) ($generated@@229 Int) ($generated@@230 Real) ($generated@@231 Int) ($generated@@232 Real) ($generated@@233 T@U) ($generated@@234 T@U) ($generated@@235 T@U) ($generated@@236 T@U) ($generated@@237 Int) ($generated@@238 Int) ) (!  (=> (and (and (and (and (= (type $generated@@233) $generated@@208) (= (type $generated@@234) $generated@@209)) (= (type $generated@@235) $generated@@210)) (= (type $generated@@236) $generated@@211)) (or ($generated@@167 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@229) (= ($generated@@168 $generated@@231 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@232) (< $generated@@232 300.0))) (= 0 $generated@@237)) (and (<= ($generated@@157 0) $generated@@238) (< $generated@@238 80)))))) (= ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238))  (and (and (and (and (and (and (and (and (and (and (= ($generated@@157 $generated@@228) ($generated@@157 $generated@@228)) (= ($generated@@157 $generated@@229) ($generated@@157 $generated@@229))) (= ($generated@@159 $generated@@230) ($generated@@159 $generated@@230))) (= ($generated@@157 $generated@@231) ($generated@@157 $generated@@231))) (= ($generated@@159 $generated@@232) ($generated@@159 $generated@@232))) (= ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@204 ($generated@@161 $generated@@233)))) (= ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@205 ($generated@@161 $generated@@234)))) (= ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@206 ($generated@@161 $generated@@235)))) (= ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@207 ($generated@@161 $generated@@236)))) (= ($generated@@157 $generated@@237) ($generated@@157 $generated@@237))) (= ($generated@@157 $generated@@238) ($generated@@157 $generated@@238)))))
 :weight 3
 :pattern ( ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@239 () Int)
(declare-fun $generated@@240 () Int)
(declare-fun $generated@@241 () Real)
(declare-fun $generated@@242 () Int)
(declare-fun $generated@@243 () Real)
(declare-fun $generated@@244 () (_ BitVec 67))
(declare-fun $generated@@245 () (_ BitVec 32))
(declare-fun $generated@@246 () (_ BitVec 7))
(declare-fun $generated@@247 () (_ BitVec 2))
(declare-fun $generated@@248 () Int)
(declare-fun $generated@@249 () Int)
(declare-fun $generated@@250 () (_ BitVec 32))
(declare-fun $generated@@251 () (_ BitVec 32))
(declare-fun $generated@@252 () (_ BitVec 32))
(declare-fun $generated@@253 () (_ BitVec 32))
(declare-fun $generated@@254 () (_ BitVec 32))
(declare-fun $generated@@255 () (_ BitVec 32))
(declare-fun $generated@@256 () T@U)
(declare-fun $generated@@257 () T@U)
(declare-fun $generated@@258 () T@U)
(declare-fun $generated@@259 () T@U)
(declare-fun $generated@@260 (T@U) Bool)
(declare-fun $generated@@261 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@256) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@257) $generated@@47)) (= (type $generated@@258) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@259) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 29) (let (($generated@@262  (and (=> (= (ControlFlow 0 4) (- 0 14)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239))) (and (=> (= (ControlFlow 0 4) (- 0 13)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240))) (and (=> (= (ControlFlow 0 4) (- 0 12)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241))) (and (=> (= (ControlFlow 0 4) (- 0 11)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242))) (and (=> (= (ControlFlow 0 4) (- 0 10)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243))) (and (=> (= (ControlFlow 0 4) (- 0 9)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244))) (and (=> (= (ControlFlow 0 4) (- 0 8)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245))) (and (=> (= (ControlFlow 0 4) (- 0 7)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248))) (=> (= (ControlFlow 0 4) (- 0 3)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@249 $generated@@249))))))))))))))))))))))))))
(let (($generated@@263  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (bvule #b000000 #b100000)) (=> (bvule #b000000 #b100000) (=> (= $generated@@250 (bvshl $generated@@251 (concat #b00000000000000000000000000 #b000000))) (=> (and (= $generated@@245 $generated@@250) (= (ControlFlow 0 26) 4)) $generated@@262)))))))
(let (($generated@@264  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 24) (- 0 25)) (bvule (concat #b0000 $generated@@247) #b100000)) (=> (bvule (concat #b0000 $generated@@247) #b100000) (=> (= $generated@@252 (bvshl $generated@@251 (concat #b00000000000000000000000000 (concat #b0000 $generated@@247)))) (=> (and (= $generated@@245 $generated@@252) (= (ControlFlow 0 24) 4)) $generated@@262)))))))
(let (($generated@@265  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 21) (- 0 23)) (bvult $generated@@246 #b1000000)) (=> (bvult $generated@@246 #b1000000) (and (=> (= (ControlFlow 0 21) (- 0 22)) (bvule ((_ extract 5 0) $generated@@246) #b100000)) (=> (bvule ((_ extract 5 0) $generated@@246) #b100000) (=> (= $generated@@253 (bvshl $generated@@251 (concat #b00000000000000000000000000 ((_ extract 5 0) $generated@@246)))) (=> (and (= $generated@@245 $generated@@253) (= (ControlFlow 0 21) 4)) $generated@@262)))))))))
(let (($generated@@266  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 18) (- 0 20)) (bvult $generated@@251 #x00000040)) (=> (bvult $generated@@251 #x00000040) (and (=> (= (ControlFlow 0 18) (- 0 19)) (bvule ((_ extract 5 0) $generated@@251) #b100000)) (=> (bvule ((_ extract 5 0) $generated@@251) #b100000) (=> (= $generated@@254 (bvshl $generated@@251 (concat #b00000000000000000000000000 ((_ extract 5 0) $generated@@251)))) (=> (and (= $generated@@245 $generated@@254) (= (ControlFlow 0 18) 4)) $generated@@262)))))))))
(let (($generated@@267  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 15) (- 0 17)) (bvult $generated@@244 #b0000000000000000000000000000000000000000000000000000000000001000000)) (=> (bvult $generated@@244 #b0000000000000000000000000000000000000000000000000000000000001000000) (and (=> (= (ControlFlow 0 15) (- 0 16)) (bvule ((_ extract 5 0) $generated@@244) #b100000)) (=> (bvule ((_ extract 5 0) $generated@@244) #b100000) (=> (= $generated@@255 (bvshl $generated@@251 (concat #b00000000000000000000000000 ((_ extract 5 0) $generated@@244)))) (=> (and (= $generated@@245 $generated@@255) (= (ControlFlow 0 15) 4)) $generated@@262)))))))))
(let (($generated@@268  (=> (and (and (and (and (and (not ($generated@@0 ($generated@@161 ($generated@@11 true)))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@269  (=> (= $generated@@256 ($generated@@45 $generated@@257 $generated@@258 $generated@@259 false)) (and (and (and (and (and (=> (= (ControlFlow 0 28) 15) $generated@@267) (=> (= (ControlFlow 0 28) 18) $generated@@266)) (=> (= (ControlFlow 0 28) 21) $generated@@265)) (=> (= (ControlFlow 0 28) 24) $generated@@264)) (=> (= (ControlFlow 0 28) 26) $generated@@263)) (=> (= (ControlFlow 0 28) 2) $generated@@268)))))
(let (($generated@@270  (=> (and (and ($generated@@260 $generated@@258) ($generated@@261 $generated@@258)) (and (<= ($generated@@157 0) $generated@@240) (= ($generated@@168 $generated@@242 ($generated@@157 2)) ($generated@@157 0)))) (=> (and (and (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@243) (< $generated@@243 300.0)) (= 0 $generated@@248)) (and (and (<= ($generated@@157 0) $generated@@249) (< $generated@@249 80)) (and (= 2 $generated@@165) (= (ControlFlow 0 29) 28)))) $generated@@269))))
$generated@@270))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 15) (- 17))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 15) (- 16))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 18) (- 20))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 18) (- 19))))
(check-sat)
(get-info :reason-unknown)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (Real) Real)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@165 () Int)
(declare-fun $generated@@166 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@167 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@168 (Int Int) Int)
(declare-fun $generated@@191 (T@U) T@U)
(declare-fun $generated@@192 (T@T T@U) T@U)
(declare-fun $generated@@193 () T@T)
(declare-fun $generated@@204 (T@U) (_ BitVec 67))
(declare-fun $generated@@205 (T@U) (_ BitVec 32))
(declare-fun $generated@@206 (T@U) (_ BitVec 7))
(declare-fun $generated@@207 (T@U) (_ BitVec 2))
(declare-fun $generated@@208 () T@T)
(declare-fun $generated@@209 () T@T)
(declare-fun $generated@@210 () T@T)
(declare-fun $generated@@211 () T@T)
(declare-fun $generated@@212 ((_ BitVec 67)) T@U)
(declare-fun $generated@@213 ((_ BitVec 32)) T@U)
(declare-fun $generated@@214 ((_ BitVec 7)) T@U)
(declare-fun $generated@@215 ((_ BitVec 2)) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 Real) ) (! (= ($generated@@159 $generated@@160) $generated@@160)
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (let (($generated@@163 (type $generated@@162)))
(= (type ($generated@@161 $generated@@162)) $generated@@163))
 :pattern ( ($generated@@161 $generated@@162))
)))
(assert (forall (($generated@@164 T@U) ) (! (= ($generated@@161 $generated@@164) $generated@@164)
 :pattern ( ($generated@@161 $generated@@164))
)))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@169 Int) ($generated@@170 Int) ($generated@@171 Real) ($generated@@172 Int) ($generated@@173 Real) ($generated@@174 (_ BitVec 67)) ($generated@@175 (_ BitVec 32)) ($generated@@176 (_ BitVec 7)) ($generated@@177 (_ BitVec 2)) ($generated@@178 Int) ($generated@@179 Int) ) (!  (=> (or ($generated@@167 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@170) (= ($generated@@168 $generated@@172 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@173) (< $generated@@173 300.0))) (= 0 $generated@@178)) (and (<= ($generated@@157 0) $generated@@179) (< $generated@@179 80))))) (= ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179)  (and (and (and (and (and (and (and (and (and (and (= $generated@@169 $generated@@169) (= $generated@@170 $generated@@170)) (= $generated@@171 $generated@@171)) (= $generated@@172 $generated@@172)) (= $generated@@173 $generated@@173)) (= $generated@@174 $generated@@174)) (= $generated@@175 $generated@@175)) (= $generated@@176 $generated@@176)) (= $generated@@177 $generated@@177)) (= $generated@@178 $generated@@178)) (= $generated@@179 $generated@@179))))
 :pattern ( ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@180 Int) ($generated@@181 Int) ($generated@@182 Real) ($generated@@183 Int) ($generated@@184 Real) ($generated@@185 (_ BitVec 67)) ($generated@@186 (_ BitVec 32)) ($generated@@187 (_ BitVec 7)) ($generated@@188 (_ BitVec 2)) ($generated@@189 Int) ($generated@@190 Int) ) (!  (=> (or ($generated@@167 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@181) (= ($generated@@168 $generated@@183 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@184) (< $generated@@184 300.0))) (= 0 $generated@@189)) (and (<= ($generated@@157 0) $generated@@190) (< $generated@@190 80))))) true)
 :pattern ( ($generated@@166 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190))
))))
(assert  (and (and (= ($generated@@1 $generated@@193) 11) (forall (($generated@@194 T@U) ) (! (= (type ($generated@@191 $generated@@194)) $generated@@193)
 :pattern ( ($generated@@191 $generated@@194))
))) (forall (($generated@@195 T@T) ($generated@@196 T@U) ) (! (= (type ($generated@@192 $generated@@195 $generated@@196)) $generated@@195)
 :pattern ( ($generated@@192 $generated@@195 $generated@@196))
))))
(assert (forall (($generated@@197 T@U) ) (! (let (($generated@@198 (type $generated@@197)))
(= ($generated@@192 $generated@@198 ($generated@@191 $generated@@197)) $generated@@197))
 :pattern ( ($generated@@191 $generated@@197))
)))
(assert (forall (($generated@@199 Int) ($generated@@200 Int) ) (! (= ($generated@@168 $generated@@199 $generated@@200) (mod $generated@@199 $generated@@200))
 :pattern ( ($generated@@168 $generated@@199 $generated@@200))
)))
(assert (forall (($generated@@201 Int) ) (! (= ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))) ($generated@@161 ($generated@@191 ($generated@@8 $generated@@201))))
 :pattern ( ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))))
)))
(assert (forall (($generated@@202 Real) ) (! (= ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))) ($generated@@161 ($generated@@191 ($generated@@9 $generated@@202))))
 :pattern ( ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))))
)))
(assert (forall (($generated@@203 T@U) ) (! (= ($generated@@191 ($generated@@161 $generated@@203)) ($generated@@161 ($generated@@191 $generated@@203)))
 :pattern ( ($generated@@191 ($generated@@161 $generated@@203)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@216 (_ BitVec 67)) ) (! (= ($generated@@204 ($generated@@212 $generated@@216)) $generated@@216)
 :pattern ( ($generated@@212 $generated@@216))
)) (= ($generated@@1 $generated@@208) 12)) (forall (($generated@@217 T@U) ) (!  (=> (= (type $generated@@217) $generated@@208) (= ($generated@@212 ($generated@@204 $generated@@217)) $generated@@217))
 :pattern ( ($generated@@204 $generated@@217))
))) (forall (($generated@@218 (_ BitVec 67)) ) (! (= (type ($generated@@212 $generated@@218)) $generated@@208)
 :pattern ( ($generated@@212 $generated@@218))
))) (forall (($generated@@219 (_ BitVec 32)) ) (! (= ($generated@@205 ($generated@@213 $generated@@219)) $generated@@219)
 :pattern ( ($generated@@213 $generated@@219))
))) (= ($generated@@1 $generated@@209) 13)) (forall (($generated@@220 T@U) ) (!  (=> (= (type $generated@@220) $generated@@209) (= ($generated@@213 ($generated@@205 $generated@@220)) $generated@@220))
 :pattern ( ($generated@@205 $generated@@220))
))) (forall (($generated@@221 (_ BitVec 32)) ) (! (= (type ($generated@@213 $generated@@221)) $generated@@209)
 :pattern ( ($generated@@213 $generated@@221))
))) (forall (($generated@@222 (_ BitVec 7)) ) (! (= ($generated@@206 ($generated@@214 $generated@@222)) $generated@@222)
 :pattern ( ($generated@@214 $generated@@222))
))) (= ($generated@@1 $generated@@210) 14)) (forall (($generated@@223 T@U) ) (!  (=> (= (type $generated@@223) $generated@@210) (= ($generated@@214 ($generated@@206 $generated@@223)) $generated@@223))
 :pattern ( ($generated@@206 $generated@@223))
))) (forall (($generated@@224 (_ BitVec 7)) ) (! (= (type ($generated@@214 $generated@@224)) $generated@@210)
 :pattern ( ($generated@@214 $generated@@224))
))) (forall (($generated@@225 (_ BitVec 2)) ) (! (= ($generated@@207 ($generated@@215 $generated@@225)) $generated@@225)
 :pattern ( ($generated@@215 $generated@@225))
))) (= ($generated@@1 $generated@@211) 15)) (forall (($generated@@226 T@U) ) (!  (=> (= (type $generated@@226) $generated@@211) (= ($generated@@215 ($generated@@207 $generated@@226)) $generated@@226))
 :pattern ( ($generated@@207 $generated@@226))
))) (forall (($generated@@227 (_ BitVec 2)) ) (! (= (type ($generated@@215 $generated@@227)) $generated@@211)
 :pattern ( ($generated@@215 $generated@@227))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@228 Int) ($generated@@229 Int) ($generated@@230 Real) ($generated@@231 Int) ($generated@@232 Real) ($generated@@233 T@U) ($generated@@234 T@U) ($generated@@235 T@U) ($generated@@236 T@U) ($generated@@237 Int) ($generated@@238 Int) ) (!  (=> (and (and (and (and (= (type $generated@@233) $generated@@208) (= (type $generated@@234) $generated@@209)) (= (type $generated@@235) $generated@@210)) (= (type $generated@@236) $generated@@211)) (or ($generated@@167 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@229) (= ($generated@@168 $generated@@231 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@232) (< $generated@@232 300.0))) (= 0 $generated@@237)) (and (<= ($generated@@157 0) $generated@@238) (< $generated@@238 80)))))) (= ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238))  (and (and (and (and (and (and (and (and (and (and (= ($generated@@157 $generated@@228) ($generated@@157 $generated@@228)) (= ($generated@@157 $generated@@229) ($generated@@157 $generated@@229))) (= ($generated@@159 $generated@@230) ($generated@@159 $generated@@230))) (= ($generated@@157 $generated@@231) ($generated@@157 $generated@@231))) (= ($generated@@159 $generated@@232) ($generated@@159 $generated@@232))) (= ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@204 ($generated@@161 $generated@@233)))) (= ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@205 ($generated@@161 $generated@@234)))) (= ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@206 ($generated@@161 $generated@@235)))) (= ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@207 ($generated@@161 $generated@@236)))) (= ($generated@@157 $generated@@237) ($generated@@157 $generated@@237))) (= ($generated@@157 $generated@@238) ($generated@@157 $generated@@238)))))
 :weight 3
 :pattern ( ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@239 () Int)
(declare-fun $generated@@240 () Int)
(declare-fun $generated@@241 () Real)
(declare-fun $generated@@242 () Int)
(declare-fun $generated@@243 () Real)
(declare-fun $generated@@244 () (_ BitVec 67))
(declare-fun $generated@@245 () (_ BitVec 32))
(declare-fun $generated@@246 () (_ BitVec 7))
(declare-fun $generated@@247 () (_ BitVec 2))
(declare-fun $generated@@248 () Int)
(declare-fun $generated@@249 () Int)
(declare-fun $generated@@250 () (_ BitVec 7))
(declare-fun $generated@@251 () (_ BitVec 7))
(declare-fun $generated@@252 () (_ BitVec 7))
(declare-fun $generated@@253 () (_ BitVec 7))
(declare-fun $generated@@254 () (_ BitVec 7))
(declare-fun $generated@@255 () (_ BitVec 7))
(declare-fun $generated@@256 () T@U)
(declare-fun $generated@@257 () T@U)
(declare-fun $generated@@258 () T@U)
(declare-fun $generated@@259 () T@U)
(declare-fun $generated@@260 (T@U) Bool)
(declare-fun $generated@@261 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@256) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@257) $generated@@47)) (= (type $generated@@258) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@259) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 29) (let (($generated@@262  (and (=> (= (ControlFlow 0 4) (- 0 14)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239))) (and (=> (= (ControlFlow 0 4) (- 0 13)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240))) (and (=> (= (ControlFlow 0 4) (- 0 12)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241))) (and (=> (= (ControlFlow 0 4) (- 0 11)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242))) (and (=> (= (ControlFlow 0 4) (- 0 10)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243))) (and (=> (= (ControlFlow 0 4) (- 0 9)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244))) (and (=> (= (ControlFlow 0 4) (- 0 8)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245))) (and (=> (= (ControlFlow 0 4) (- 0 7)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248))) (=> (= (ControlFlow 0 4) (- 0 3)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@249 $generated@@249))))))))))))))))))))))))))
(let (($generated@@263  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (bvule #b000 #b111)) (=> (bvule #b000 #b111) (=> (= $generated@@250 (bvshl $generated@@251 (concat #b0000 #b000))) (=> (and (= $generated@@246 $generated@@250) (= (ControlFlow 0 26) 4)) $generated@@262)))))))
(let (($generated@@264  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 24) (- 0 25)) (bvule (concat #b0 $generated@@247) #b111)) (=> (bvule (concat #b0 $generated@@247) #b111) (=> (= $generated@@252 (bvshl $generated@@251 (concat #b0000 (concat #b0 $generated@@247)))) (=> (and (= $generated@@246 $generated@@252) (= (ControlFlow 0 24) 4)) $generated@@262)))))))
(let (($generated@@265  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 21) (- 0 23)) (bvult $generated@@251 #b0001000)) (=> (bvult $generated@@251 #b0001000) (and (=> (= (ControlFlow 0 21) (- 0 22)) (bvule ((_ extract 2 0) $generated@@251) #b111)) (=> (bvule ((_ extract 2 0) $generated@@251) #b111) (=> (= $generated@@253 (bvshl $generated@@251 (concat #b0000 ((_ extract 2 0) $generated@@251)))) (=> (and (= $generated@@246 $generated@@253) (= (ControlFlow 0 21) 4)) $generated@@262)))))))))
(let (($generated@@266  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 18) (- 0 20)) (bvult $generated@@245 #x00000008)) (=> (bvult $generated@@245 #x00000008) (and (=> (= (ControlFlow 0 18) (- 0 19)) (bvule ((_ extract 2 0) $generated@@245) #b111)) (=> (bvule ((_ extract 2 0) $generated@@245) #b111) (=> (= $generated@@254 (bvshl $generated@@251 (concat #b0000 ((_ extract 2 0) $generated@@245)))) (=> (and (= $generated@@246 $generated@@254) (= (ControlFlow 0 18) 4)) $generated@@262)))))))))
(let (($generated@@267  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 15) (- 0 17)) (bvult $generated@@244 #b0000000000000000000000000000000000000000000000000000000000000001000)) (=> (bvult $generated@@244 #b0000000000000000000000000000000000000000000000000000000000000001000) (and (=> (= (ControlFlow 0 15) (- 0 16)) (bvule ((_ extract 2 0) $generated@@244) #b111)) (=> (bvule ((_ extract 2 0) $generated@@244) #b111) (=> (= $generated@@255 (bvshl $generated@@251 (concat #b0000 ((_ extract 2 0) $generated@@244)))) (=> (and (= $generated@@246 $generated@@255) (= (ControlFlow 0 15) 4)) $generated@@262)))))))))
(let (($generated@@268  (=> (and (and (and (and (and (not ($generated@@0 ($generated@@161 ($generated@@11 true)))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@269  (=> (= $generated@@256 ($generated@@45 $generated@@257 $generated@@258 $generated@@259 false)) (and (and (and (and (and (=> (= (ControlFlow 0 28) 15) $generated@@267) (=> (= (ControlFlow 0 28) 18) $generated@@266)) (=> (= (ControlFlow 0 28) 21) $generated@@265)) (=> (= (ControlFlow 0 28) 24) $generated@@264)) (=> (= (ControlFlow 0 28) 26) $generated@@263)) (=> (= (ControlFlow 0 28) 2) $generated@@268)))))
(let (($generated@@270  (=> (and (and ($generated@@260 $generated@@258) ($generated@@261 $generated@@258)) (and (<= ($generated@@157 0) $generated@@240) (= ($generated@@168 $generated@@242 ($generated@@157 2)) ($generated@@157 0)))) (=> (and (and (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@243) (< $generated@@243 300.0)) (= 0 $generated@@248)) (and (and (<= ($generated@@157 0) $generated@@249) (< $generated@@249 80)) (and (= 2 $generated@@165) (= (ControlFlow 0 29) 28)))) $generated@@269))))
$generated@@270))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 15) (- 17))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 18) (- 20))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 21) (- 23))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (Real) Real)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@165 () Int)
(declare-fun $generated@@166 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@167 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@168 (Int Int) Int)
(declare-fun $generated@@191 (T@U) T@U)
(declare-fun $generated@@192 (T@T T@U) T@U)
(declare-fun $generated@@193 () T@T)
(declare-fun $generated@@204 (T@U) (_ BitVec 67))
(declare-fun $generated@@205 (T@U) (_ BitVec 32))
(declare-fun $generated@@206 (T@U) (_ BitVec 7))
(declare-fun $generated@@207 (T@U) (_ BitVec 2))
(declare-fun $generated@@208 () T@T)
(declare-fun $generated@@209 () T@T)
(declare-fun $generated@@210 () T@T)
(declare-fun $generated@@211 () T@T)
(declare-fun $generated@@212 ((_ BitVec 67)) T@U)
(declare-fun $generated@@213 ((_ BitVec 32)) T@U)
(declare-fun $generated@@214 ((_ BitVec 7)) T@U)
(declare-fun $generated@@215 ((_ BitVec 2)) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 Real) ) (! (= ($generated@@159 $generated@@160) $generated@@160)
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (let (($generated@@163 (type $generated@@162)))
(= (type ($generated@@161 $generated@@162)) $generated@@163))
 :pattern ( ($generated@@161 $generated@@162))
)))
(assert (forall (($generated@@164 T@U) ) (! (= ($generated@@161 $generated@@164) $generated@@164)
 :pattern ( ($generated@@161 $generated@@164))
)))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@169 Int) ($generated@@170 Int) ($generated@@171 Real) ($generated@@172 Int) ($generated@@173 Real) ($generated@@174 (_ BitVec 67)) ($generated@@175 (_ BitVec 32)) ($generated@@176 (_ BitVec 7)) ($generated@@177 (_ BitVec 2)) ($generated@@178 Int) ($generated@@179 Int) ) (!  (=> (or ($generated@@167 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@170) (= ($generated@@168 $generated@@172 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@173) (< $generated@@173 300.0))) (= 0 $generated@@178)) (and (<= ($generated@@157 0) $generated@@179) (< $generated@@179 80))))) (= ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179)  (and (and (and (and (and (and (and (and (and (and (= $generated@@169 $generated@@169) (= $generated@@170 $generated@@170)) (= $generated@@171 $generated@@171)) (= $generated@@172 $generated@@172)) (= $generated@@173 $generated@@173)) (= $generated@@174 $generated@@174)) (= $generated@@175 $generated@@175)) (= $generated@@176 $generated@@176)) (= $generated@@177 $generated@@177)) (= $generated@@178 $generated@@178)) (= $generated@@179 $generated@@179))))
 :pattern ( ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@180 Int) ($generated@@181 Int) ($generated@@182 Real) ($generated@@183 Int) ($generated@@184 Real) ($generated@@185 (_ BitVec 67)) ($generated@@186 (_ BitVec 32)) ($generated@@187 (_ BitVec 7)) ($generated@@188 (_ BitVec 2)) ($generated@@189 Int) ($generated@@190 Int) ) (!  (=> (or ($generated@@167 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@181) (= ($generated@@168 $generated@@183 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@184) (< $generated@@184 300.0))) (= 0 $generated@@189)) (and (<= ($generated@@157 0) $generated@@190) (< $generated@@190 80))))) true)
 :pattern ( ($generated@@166 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190))
))))
(assert  (and (and (= ($generated@@1 $generated@@193) 11) (forall (($generated@@194 T@U) ) (! (= (type ($generated@@191 $generated@@194)) $generated@@193)
 :pattern ( ($generated@@191 $generated@@194))
))) (forall (($generated@@195 T@T) ($generated@@196 T@U) ) (! (= (type ($generated@@192 $generated@@195 $generated@@196)) $generated@@195)
 :pattern ( ($generated@@192 $generated@@195 $generated@@196))
))))
(assert (forall (($generated@@197 T@U) ) (! (let (($generated@@198 (type $generated@@197)))
(= ($generated@@192 $generated@@198 ($generated@@191 $generated@@197)) $generated@@197))
 :pattern ( ($generated@@191 $generated@@197))
)))
(assert (forall (($generated@@199 Int) ($generated@@200 Int) ) (! (= ($generated@@168 $generated@@199 $generated@@200) (mod $generated@@199 $generated@@200))
 :pattern ( ($generated@@168 $generated@@199 $generated@@200))
)))
(assert (forall (($generated@@201 Int) ) (! (= ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))) ($generated@@161 ($generated@@191 ($generated@@8 $generated@@201))))
 :pattern ( ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))))
)))
(assert (forall (($generated@@202 Real) ) (! (= ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))) ($generated@@161 ($generated@@191 ($generated@@9 $generated@@202))))
 :pattern ( ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))))
)))
(assert (forall (($generated@@203 T@U) ) (! (= ($generated@@191 ($generated@@161 $generated@@203)) ($generated@@161 ($generated@@191 $generated@@203)))
 :pattern ( ($generated@@191 ($generated@@161 $generated@@203)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@216 (_ BitVec 67)) ) (! (= ($generated@@204 ($generated@@212 $generated@@216)) $generated@@216)
 :pattern ( ($generated@@212 $generated@@216))
)) (= ($generated@@1 $generated@@208) 12)) (forall (($generated@@217 T@U) ) (!  (=> (= (type $generated@@217) $generated@@208) (= ($generated@@212 ($generated@@204 $generated@@217)) $generated@@217))
 :pattern ( ($generated@@204 $generated@@217))
))) (forall (($generated@@218 (_ BitVec 67)) ) (! (= (type ($generated@@212 $generated@@218)) $generated@@208)
 :pattern ( ($generated@@212 $generated@@218))
))) (forall (($generated@@219 (_ BitVec 32)) ) (! (= ($generated@@205 ($generated@@213 $generated@@219)) $generated@@219)
 :pattern ( ($generated@@213 $generated@@219))
))) (= ($generated@@1 $generated@@209) 13)) (forall (($generated@@220 T@U) ) (!  (=> (= (type $generated@@220) $generated@@209) (= ($generated@@213 ($generated@@205 $generated@@220)) $generated@@220))
 :pattern ( ($generated@@205 $generated@@220))
))) (forall (($generated@@221 (_ BitVec 32)) ) (! (= (type ($generated@@213 $generated@@221)) $generated@@209)
 :pattern ( ($generated@@213 $generated@@221))
))) (forall (($generated@@222 (_ BitVec 7)) ) (! (= ($generated@@206 ($generated@@214 $generated@@222)) $generated@@222)
 :pattern ( ($generated@@214 $generated@@222))
))) (= ($generated@@1 $generated@@210) 14)) (forall (($generated@@223 T@U) ) (!  (=> (= (type $generated@@223) $generated@@210) (= ($generated@@214 ($generated@@206 $generated@@223)) $generated@@223))
 :pattern ( ($generated@@206 $generated@@223))
))) (forall (($generated@@224 (_ BitVec 7)) ) (! (= (type ($generated@@214 $generated@@224)) $generated@@210)
 :pattern ( ($generated@@214 $generated@@224))
))) (forall (($generated@@225 (_ BitVec 2)) ) (! (= ($generated@@207 ($generated@@215 $generated@@225)) $generated@@225)
 :pattern ( ($generated@@215 $generated@@225))
))) (= ($generated@@1 $generated@@211) 15)) (forall (($generated@@226 T@U) ) (!  (=> (= (type $generated@@226) $generated@@211) (= ($generated@@215 ($generated@@207 $generated@@226)) $generated@@226))
 :pattern ( ($generated@@207 $generated@@226))
))) (forall (($generated@@227 (_ BitVec 2)) ) (! (= (type ($generated@@215 $generated@@227)) $generated@@211)
 :pattern ( ($generated@@215 $generated@@227))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@228 Int) ($generated@@229 Int) ($generated@@230 Real) ($generated@@231 Int) ($generated@@232 Real) ($generated@@233 T@U) ($generated@@234 T@U) ($generated@@235 T@U) ($generated@@236 T@U) ($generated@@237 Int) ($generated@@238 Int) ) (!  (=> (and (and (and (and (= (type $generated@@233) $generated@@208) (= (type $generated@@234) $generated@@209)) (= (type $generated@@235) $generated@@210)) (= (type $generated@@236) $generated@@211)) (or ($generated@@167 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@229) (= ($generated@@168 $generated@@231 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@232) (< $generated@@232 300.0))) (= 0 $generated@@237)) (and (<= ($generated@@157 0) $generated@@238) (< $generated@@238 80)))))) (= ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238))  (and (and (and (and (and (and (and (and (and (and (= ($generated@@157 $generated@@228) ($generated@@157 $generated@@228)) (= ($generated@@157 $generated@@229) ($generated@@157 $generated@@229))) (= ($generated@@159 $generated@@230) ($generated@@159 $generated@@230))) (= ($generated@@157 $generated@@231) ($generated@@157 $generated@@231))) (= ($generated@@159 $generated@@232) ($generated@@159 $generated@@232))) (= ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@204 ($generated@@161 $generated@@233)))) (= ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@205 ($generated@@161 $generated@@234)))) (= ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@206 ($generated@@161 $generated@@235)))) (= ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@207 ($generated@@161 $generated@@236)))) (= ($generated@@157 $generated@@237) ($generated@@157 $generated@@237))) (= ($generated@@157 $generated@@238) ($generated@@157 $generated@@238)))))
 :weight 3
 :pattern ( ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@239 () Int)
(declare-fun $generated@@240 () Int)
(declare-fun $generated@@241 () Real)
(declare-fun $generated@@242 () Int)
(declare-fun $generated@@243 () Real)
(declare-fun $generated@@244 () (_ BitVec 67))
(declare-fun $generated@@245 () (_ BitVec 32))
(declare-fun $generated@@246 () (_ BitVec 7))
(declare-fun $generated@@247 () (_ BitVec 2))
(declare-fun $generated@@248 () Int)
(declare-fun $generated@@249 () Int)
(declare-fun $generated@@250 () (_ BitVec 2))
(declare-fun $generated@@251 () (_ BitVec 2))
(declare-fun $generated@@252 () (_ BitVec 2))
(declare-fun $generated@@253 () (_ BitVec 2))
(declare-fun $generated@@254 () (_ BitVec 2))
(declare-fun $generated@@255 () (_ BitVec 2))
(declare-fun $generated@@256 () T@U)
(declare-fun $generated@@257 () T@U)
(declare-fun $generated@@258 () T@U)
(declare-fun $generated@@259 () T@U)
(declare-fun $generated@@260 (T@U) Bool)
(declare-fun $generated@@261 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@256) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@257) $generated@@47)) (= (type $generated@@258) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@259) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 29) (let (($generated@@262  (and (=> (= (ControlFlow 0 4) (- 0 14)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239))) (and (=> (= (ControlFlow 0 4) (- 0 13)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240))) (and (=> (= (ControlFlow 0 4) (- 0 12)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241))) (and (=> (= (ControlFlow 0 4) (- 0 11)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242))) (and (=> (= (ControlFlow 0 4) (- 0 10)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243))) (and (=> (= (ControlFlow 0 4) (- 0 9)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244))) (and (=> (= (ControlFlow 0 4) (- 0 8)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245))) (and (=> (= (ControlFlow 0 4) (- 0 7)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248))) (=> (= (ControlFlow 0 4) (- 0 3)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@249 $generated@@249))))))))))))))))))))))))))
(let (($generated@@263  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (bvule #b00 #b10)) (=> (bvule #b00 #b10) (=> (= $generated@@250 (bvshl $generated@@251 #b00)) (=> (and (= $generated@@247 $generated@@250) (= (ControlFlow 0 26) 4)) $generated@@262)))))))
(let (($generated@@264  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 24) (- 0 25)) (bvule $generated@@251 #b10)) (=> (bvule $generated@@251 #b10) (=> (= $generated@@252 (bvshl $generated@@251 $generated@@251)) (=> (and (= $generated@@247 $generated@@252) (= (ControlFlow 0 24) 4)) $generated@@262)))))))
(let (($generated@@265  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 21) (- 0 23)) (bvult $generated@@246 #b0000100)) (=> (bvult $generated@@246 #b0000100) (and (=> (= (ControlFlow 0 21) (- 0 22)) (bvule ((_ extract 1 0) $generated@@246) #b10)) (=> (bvule ((_ extract 1 0) $generated@@246) #b10) (=> (= $generated@@253 (bvshl $generated@@251 ((_ extract 1 0) $generated@@246))) (=> (and (= $generated@@247 $generated@@253) (= (ControlFlow 0 21) 4)) $generated@@262)))))))))
(let (($generated@@266  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 18) (- 0 20)) (bvult $generated@@245 #x00000004)) (=> (bvult $generated@@245 #x00000004) (and (=> (= (ControlFlow 0 18) (- 0 19)) (bvule ((_ extract 1 0) $generated@@245) #b10)) (=> (bvule ((_ extract 1 0) $generated@@245) #b10) (=> (= $generated@@254 (bvshl $generated@@251 ((_ extract 1 0) $generated@@245))) (=> (and (= $generated@@247 $generated@@254) (= (ControlFlow 0 18) 4)) $generated@@262)))))))))
(let (($generated@@267  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 15) (- 0 17)) (bvult $generated@@244 #b0000000000000000000000000000000000000000000000000000000000000000100)) (=> (bvult $generated@@244 #b0000000000000000000000000000000000000000000000000000000000000000100) (and (=> (= (ControlFlow 0 15) (- 0 16)) (bvule ((_ extract 1 0) $generated@@244) #b10)) (=> (bvule ((_ extract 1 0) $generated@@244) #b10) (=> (= $generated@@255 (bvshl $generated@@251 ((_ extract 1 0) $generated@@244))) (=> (and (= $generated@@247 $generated@@255) (= (ControlFlow 0 15) 4)) $generated@@262)))))))))
(let (($generated@@268  (=> (and (and (and (and (and (not ($generated@@0 ($generated@@161 ($generated@@11 true)))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@269  (=> (= $generated@@256 ($generated@@45 $generated@@257 $generated@@258 $generated@@259 false)) (and (and (and (and (and (=> (= (ControlFlow 0 28) 15) $generated@@267) (=> (= (ControlFlow 0 28) 18) $generated@@266)) (=> (= (ControlFlow 0 28) 21) $generated@@265)) (=> (= (ControlFlow 0 28) 24) $generated@@264)) (=> (= (ControlFlow 0 28) 26) $generated@@263)) (=> (= (ControlFlow 0 28) 2) $generated@@268)))))
(let (($generated@@270  (=> (and (and ($generated@@260 $generated@@258) ($generated@@261 $generated@@258)) (and (<= ($generated@@157 0) $generated@@240) (= ($generated@@168 $generated@@242 ($generated@@157 2)) ($generated@@157 0)))) (=> (and (and (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@243) (< $generated@@243 300.0)) (= 0 $generated@@248)) (and (and (<= ($generated@@157 0) $generated@@249) (< $generated@@249 80)) (and (= 2 $generated@@165) (= (ControlFlow 0 29) 28)))) $generated@@269))))
$generated@@270))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 15) (- 17))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 15) (- 16))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 18) (- 20))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 18) (- 19))))
(check-sat)
(get-info :reason-unknown)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (Real) Real)
(declare-fun $generated@@161 (T@U) T@U)
(declare-fun $generated@@165 () Int)
(declare-fun $generated@@166 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@167 (Int Int Real Int Real (_ BitVec 67) (_ BitVec 32) (_ BitVec 7) (_ BitVec 2) Int Int) Bool)
(declare-fun $generated@@168 (Int Int) Int)
(declare-fun $generated@@191 (T@U) T@U)
(declare-fun $generated@@192 (T@T T@U) T@U)
(declare-fun $generated@@193 () T@T)
(declare-fun $generated@@204 (T@U) (_ BitVec 67))
(declare-fun $generated@@205 (T@U) (_ BitVec 32))
(declare-fun $generated@@206 (T@U) (_ BitVec 7))
(declare-fun $generated@@207 (T@U) (_ BitVec 2))
(declare-fun $generated@@208 () T@T)
(declare-fun $generated@@209 () T@T)
(declare-fun $generated@@210 () T@T)
(declare-fun $generated@@211 () T@T)
(declare-fun $generated@@212 ((_ BitVec 67)) T@U)
(declare-fun $generated@@213 ((_ BitVec 32)) T@U)
(declare-fun $generated@@214 ((_ BitVec 7)) T@U)
(declare-fun $generated@@215 ((_ BitVec 2)) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 Real) ) (! (= ($generated@@159 $generated@@160) $generated@@160)
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (let (($generated@@163 (type $generated@@162)))
(= (type ($generated@@161 $generated@@162)) $generated@@163))
 :pattern ( ($generated@@161 $generated@@162))
)))
(assert (forall (($generated@@164 T@U) ) (! (= ($generated@@161 $generated@@164) $generated@@164)
 :pattern ( ($generated@@161 $generated@@164))
)))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@169 Int) ($generated@@170 Int) ($generated@@171 Real) ($generated@@172 Int) ($generated@@173 Real) ($generated@@174 (_ BitVec 67)) ($generated@@175 (_ BitVec 32)) ($generated@@176 (_ BitVec 7)) ($generated@@177 (_ BitVec 2)) ($generated@@178 Int) ($generated@@179 Int) ) (!  (=> (or ($generated@@167 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@170) (= ($generated@@168 $generated@@172 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@173) (< $generated@@173 300.0))) (= 0 $generated@@178)) (and (<= ($generated@@157 0) $generated@@179) (< $generated@@179 80))))) (= ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179)  (and (and (and (and (and (and (and (and (and (and (= $generated@@169 $generated@@169) (= $generated@@170 $generated@@170)) (= $generated@@171 $generated@@171)) (= $generated@@172 $generated@@172)) (= $generated@@173 $generated@@173)) (= $generated@@174 $generated@@174)) (= $generated@@175 $generated@@175)) (= $generated@@176 $generated@@176)) (= $generated@@177 $generated@@177)) (= $generated@@178 $generated@@178)) (= $generated@@179 $generated@@179))))
 :pattern ( ($generated@@166 $generated@@169 $generated@@170 $generated@@171 $generated@@172 $generated@@173 $generated@@174 $generated@@175 $generated@@176 $generated@@177 $generated@@178 $generated@@179))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@180 Int) ($generated@@181 Int) ($generated@@182 Real) ($generated@@183 Int) ($generated@@184 Real) ($generated@@185 (_ BitVec 67)) ($generated@@186 (_ BitVec 32)) ($generated@@187 (_ BitVec 7)) ($generated@@188 (_ BitVec 2)) ($generated@@189 Int) ($generated@@190 Int) ) (!  (=> (or ($generated@@167 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@181) (= ($generated@@168 $generated@@183 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@184) (< $generated@@184 300.0))) (= 0 $generated@@189)) (and (<= ($generated@@157 0) $generated@@190) (< $generated@@190 80))))) true)
 :pattern ( ($generated@@166 $generated@@180 $generated@@181 $generated@@182 $generated@@183 $generated@@184 $generated@@185 $generated@@186 $generated@@187 $generated@@188 $generated@@189 $generated@@190))
))))
(assert  (and (and (= ($generated@@1 $generated@@193) 11) (forall (($generated@@194 T@U) ) (! (= (type ($generated@@191 $generated@@194)) $generated@@193)
 :pattern ( ($generated@@191 $generated@@194))
))) (forall (($generated@@195 T@T) ($generated@@196 T@U) ) (! (= (type ($generated@@192 $generated@@195 $generated@@196)) $generated@@195)
 :pattern ( ($generated@@192 $generated@@195 $generated@@196))
))))
(assert (forall (($generated@@197 T@U) ) (! (let (($generated@@198 (type $generated@@197)))
(= ($generated@@192 $generated@@198 ($generated@@191 $generated@@197)) $generated@@197))
 :pattern ( ($generated@@191 $generated@@197))
)))
(assert (forall (($generated@@199 Int) ($generated@@200 Int) ) (! (= ($generated@@168 $generated@@199 $generated@@200) (mod $generated@@199 $generated@@200))
 :pattern ( ($generated@@168 $generated@@199 $generated@@200))
)))
(assert (forall (($generated@@201 Int) ) (! (= ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))) ($generated@@161 ($generated@@191 ($generated@@8 $generated@@201))))
 :pattern ( ($generated@@191 ($generated@@8 ($generated@@157 $generated@@201))))
)))
(assert (forall (($generated@@202 Real) ) (! (= ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))) ($generated@@161 ($generated@@191 ($generated@@9 $generated@@202))))
 :pattern ( ($generated@@191 ($generated@@9 ($generated@@159 $generated@@202))))
)))
(assert (forall (($generated@@203 T@U) ) (! (= ($generated@@191 ($generated@@161 $generated@@203)) ($generated@@161 ($generated@@191 $generated@@203)))
 :pattern ( ($generated@@191 ($generated@@161 $generated@@203)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@216 (_ BitVec 67)) ) (! (= ($generated@@204 ($generated@@212 $generated@@216)) $generated@@216)
 :pattern ( ($generated@@212 $generated@@216))
)) (= ($generated@@1 $generated@@208) 12)) (forall (($generated@@217 T@U) ) (!  (=> (= (type $generated@@217) $generated@@208) (= ($generated@@212 ($generated@@204 $generated@@217)) $generated@@217))
 :pattern ( ($generated@@204 $generated@@217))
))) (forall (($generated@@218 (_ BitVec 67)) ) (! (= (type ($generated@@212 $generated@@218)) $generated@@208)
 :pattern ( ($generated@@212 $generated@@218))
))) (forall (($generated@@219 (_ BitVec 32)) ) (! (= ($generated@@205 ($generated@@213 $generated@@219)) $generated@@219)
 :pattern ( ($generated@@213 $generated@@219))
))) (= ($generated@@1 $generated@@209) 13)) (forall (($generated@@220 T@U) ) (!  (=> (= (type $generated@@220) $generated@@209) (= ($generated@@213 ($generated@@205 $generated@@220)) $generated@@220))
 :pattern ( ($generated@@205 $generated@@220))
))) (forall (($generated@@221 (_ BitVec 32)) ) (! (= (type ($generated@@213 $generated@@221)) $generated@@209)
 :pattern ( ($generated@@213 $generated@@221))
))) (forall (($generated@@222 (_ BitVec 7)) ) (! (= ($generated@@206 ($generated@@214 $generated@@222)) $generated@@222)
 :pattern ( ($generated@@214 $generated@@222))
))) (= ($generated@@1 $generated@@210) 14)) (forall (($generated@@223 T@U) ) (!  (=> (= (type $generated@@223) $generated@@210) (= ($generated@@214 ($generated@@206 $generated@@223)) $generated@@223))
 :pattern ( ($generated@@206 $generated@@223))
))) (forall (($generated@@224 (_ BitVec 7)) ) (! (= (type ($generated@@214 $generated@@224)) $generated@@210)
 :pattern ( ($generated@@214 $generated@@224))
))) (forall (($generated@@225 (_ BitVec 2)) ) (! (= ($generated@@207 ($generated@@215 $generated@@225)) $generated@@225)
 :pattern ( ($generated@@215 $generated@@225))
))) (= ($generated@@1 $generated@@211) 15)) (forall (($generated@@226 T@U) ) (!  (=> (= (type $generated@@226) $generated@@211) (= ($generated@@215 ($generated@@207 $generated@@226)) $generated@@226))
 :pattern ( ($generated@@207 $generated@@226))
))) (forall (($generated@@227 (_ BitVec 2)) ) (! (= (type ($generated@@215 $generated@@227)) $generated@@211)
 :pattern ( ($generated@@215 $generated@@227))
))))
(assert  (=> (<= 1 $generated@@165) (forall (($generated@@228 Int) ($generated@@229 Int) ($generated@@230 Real) ($generated@@231 Int) ($generated@@232 Real) ($generated@@233 T@U) ($generated@@234 T@U) ($generated@@235 T@U) ($generated@@236 T@U) ($generated@@237 Int) ($generated@@238 Int) ) (!  (=> (and (and (and (and (= (type $generated@@233) $generated@@208) (= (type $generated@@234) $generated@@209)) (= (type $generated@@235) $generated@@210)) (= (type $generated@@236) $generated@@211)) (or ($generated@@167 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)) (and (not (= 1 $generated@@165)) (and (and (and (and (<= ($generated@@157 0) $generated@@229) (= ($generated@@168 $generated@@231 ($generated@@157 2)) ($generated@@157 0))) (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@232) (< $generated@@232 300.0))) (= 0 $generated@@237)) (and (<= ($generated@@157 0) $generated@@238) (< $generated@@238 80)))))) (= ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238))  (and (and (and (and (and (and (and (and (and (and (= ($generated@@157 $generated@@228) ($generated@@157 $generated@@228)) (= ($generated@@157 $generated@@229) ($generated@@157 $generated@@229))) (= ($generated@@159 $generated@@230) ($generated@@159 $generated@@230))) (= ($generated@@157 $generated@@231) ($generated@@157 $generated@@231))) (= ($generated@@159 $generated@@232) ($generated@@159 $generated@@232))) (= ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@204 ($generated@@161 $generated@@233)))) (= ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@205 ($generated@@161 $generated@@234)))) (= ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@206 ($generated@@161 $generated@@235)))) (= ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@207 ($generated@@161 $generated@@236)))) (= ($generated@@157 $generated@@237) ($generated@@157 $generated@@237))) (= ($generated@@157 $generated@@238) ($generated@@157 $generated@@238)))))
 :weight 3
 :pattern ( ($generated@@166 ($generated@@157 $generated@@228) ($generated@@157 $generated@@229) ($generated@@159 $generated@@230) ($generated@@157 $generated@@231) ($generated@@159 $generated@@232) ($generated@@204 ($generated@@161 $generated@@233)) ($generated@@205 ($generated@@161 $generated@@234)) ($generated@@206 ($generated@@161 $generated@@235)) ($generated@@207 ($generated@@161 $generated@@236)) ($generated@@157 $generated@@237) ($generated@@157 $generated@@238)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@239 () Int)
(declare-fun $generated@@240 () Int)
(declare-fun $generated@@241 () Real)
(declare-fun $generated@@242 () Int)
(declare-fun $generated@@243 () Real)
(declare-fun $generated@@244 () (_ BitVec 67))
(declare-fun $generated@@245 () (_ BitVec 32))
(declare-fun $generated@@246 () (_ BitVec 7))
(declare-fun $generated@@247 () (_ BitVec 2))
(declare-fun $generated@@248 () Int)
(declare-fun $generated@@249 () Int)
(declare-fun $generated@@250 () Int)
(declare-fun $generated@@251 () Int)
(declare-fun $generated@@252 () Int)
(declare-fun $generated@@253 () Int)
(declare-fun $generated@@254 () Int)
(declare-fun $generated@@255 () T@U)
(declare-fun $generated@@256 () T@U)
(declare-fun $generated@@257 () T@U)
(declare-fun $generated@@258 () T@U)
(declare-fun $generated@@259 (T@U) Bool)
(declare-fun $generated@@260 (T@U) Bool)
(declare-fun $generated@@261 () Int)
(assert  (and (and (and (= (type $generated@@255) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@256) $generated@@47)) (= (type $generated@@257) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@258) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 30) (let (($generated@@262  (and (=> (= (ControlFlow 0 4) (- 0 14)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@239 $generated@@239))) (and (=> (= (ControlFlow 0 4) (- 0 13)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@240 $generated@@240))) (and (=> (= (ControlFlow 0 4) (- 0 12)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@241 $generated@@241))) (and (=> (= (ControlFlow 0 4) (- 0 11)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@242 $generated@@242))) (and (=> (= (ControlFlow 0 4) (- 0 10)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@243 $generated@@243))) (and (=> (= (ControlFlow 0 4) (- 0 9)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@244 $generated@@244))) (and (=> (= (ControlFlow 0 4) (- 0 8)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@245 $generated@@245))) (and (=> (= (ControlFlow 0 4) (- 0 7)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@246 $generated@@246))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@247 $generated@@247))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248)))) (=> (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@248 $generated@@248))) (=> (= (ControlFlow 0 4) (- 0 3)) (=> ($generated@@167 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (or ($generated@@166 $generated@@239 $generated@@240 $generated@@241 $generated@@242 $generated@@243 $generated@@244 $generated@@245 $generated@@246 $generated@@247 $generated@@248 $generated@@249) (= $generated@@249 $generated@@249))))))))))))))))))))))))))
(let (($generated@@263  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 27) (- 0 28)) true) (=> (= $generated@@250 0) (=> (and (= $generated@@248 $generated@@250) (= (ControlFlow 0 27) 4)) $generated@@262))))))
(let (($generated@@264  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 24) (- 0 26)) (bvult $generated@@247 #b01)) (=> (bvult $generated@@247 #b01) (and (=> (= (ControlFlow 0 24) (- 0 25)) true) (=> (= $generated@@251 0) (=> (and (= $generated@@248 $generated@@251) (= (ControlFlow 0 24) 4)) $generated@@262))))))))
(let (($generated@@265  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 21) (- 0 23)) (bvult $generated@@246 #b0000001)) (=> (bvult $generated@@246 #b0000001) (and (=> (= (ControlFlow 0 21) (- 0 22)) true) (=> (= $generated@@252 0) (=> (and (= $generated@@248 $generated@@252) (= (ControlFlow 0 21) 4)) $generated@@262))))))))
(let (($generated@@266  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 18) (- 0 20)) (bvult $generated@@245 #x00000001)) (=> (bvult $generated@@245 #x00000001) (and (=> (= (ControlFlow 0 18) (- 0 19)) true) (=> (= $generated@@253 0) (=> (and (= $generated@@248 $generated@@253) (= (ControlFlow 0 18) 4)) $generated@@262))))))))
(let (($generated@@267  (=> ($generated@@0 ($generated@@161 ($generated@@11 true))) (and (=> (= (ControlFlow 0 15) (- 0 17)) (bvult $generated@@244 #b0000000000000000000000000000000000000000000000000000000000000000001)) (=> (bvult $generated@@244 #b0000000000000000000000000000000000000000000000000000000000000000001) (and (=> (= (ControlFlow 0 15) (- 0 16)) true) (=> (= $generated@@254 0) (=> (and (= $generated@@248 $generated@@254) (= (ControlFlow 0 15) 4)) $generated@@262))))))))
(let (($generated@@268  (=> (and (and (and (and (and (not ($generated@@0 ($generated@@161 ($generated@@11 true)))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (not ($generated@@0 ($generated@@161 ($generated@@11 true))))) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@269  (=> (= $generated@@255 ($generated@@45 $generated@@256 $generated@@257 $generated@@258 false)) (and (and (and (and (and (=> (= (ControlFlow 0 29) 15) $generated@@267) (=> (= (ControlFlow 0 29) 18) $generated@@266)) (=> (= (ControlFlow 0 29) 21) $generated@@265)) (=> (= (ControlFlow 0 29) 24) $generated@@264)) (=> (= (ControlFlow 0 29) 27) $generated@@263)) (=> (= (ControlFlow 0 29) 2) $generated@@268)))))
(let (($generated@@270  (=> (and (and ($generated@@259 $generated@@257) ($generated@@260 $generated@@257)) (and (<= ($generated@@157 0) $generated@@240) (= ($generated@@168 $generated@@242 ($generated@@157 2)) ($generated@@157 0)))) (=> (and (and (and (<= ($generated@@159 (- 0.0 4.0)) $generated@@243) (< $generated@@243 300.0)) (= 0 $generated@@261)) (and (and (<= ($generated@@157 0) $generated@@249) (< $generated@@249 80)) (and (= 2 $generated@@165) (= (ControlFlow 0 30) 29)))) $generated@@269))))
$generated@@270))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 15) (- 17))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 18) (- 20))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 21) (- 23))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 24) (- 26))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 (T@U) T@U)
(declare-fun $generated@@164 (T@T T@U) T@U)
(declare-fun $generated@@165 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (and (and (= ($generated@@1 $generated@@165) 11) (forall (($generated@@166 T@U) ) (! (= (type ($generated@@163 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@163 $generated@@166))
))) (forall (($generated@@167 T@T) ($generated@@168 T@U) ) (! (= (type ($generated@@164 $generated@@167 $generated@@168)) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167 $generated@@168))
))))
(assert (forall (($generated@@169 T@U) ) (! (let (($generated@@170 (type $generated@@169)))
(= ($generated@@164 $generated@@170 ($generated@@163 $generated@@169)) $generated@@169))
 :pattern ( ($generated@@163 $generated@@169))
)))
(assert (forall (($generated@@171 Int) ) (! (= ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))) ($generated@@159 ($generated@@163 ($generated@@8 $generated@@171))))
 :pattern ( ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))))
)))
(assert (forall (($generated@@172 T@U) ) (! (= ($generated@@163 ($generated@@159 $generated@@172)) ($generated@@159 ($generated@@163 $generated@@172)))
 :pattern ( ($generated@@163 ($generated@@159 $generated@@172)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () (_ BitVec 67))
(declare-fun $generated@@178 (T@U) (_ BitVec 67))
(declare-fun $generated@@179 ((_ BitVec 67)) T@U)
(declare-fun $generated@@180 () Int)
(declare-fun $generated@@181 () Int)
(declare-fun $generated@@182 () Int)
(declare-fun $generated@@183 () Int)
(declare-fun $generated@@184 () (_ BitVec 5))
(declare-fun $generated@@185 (T@U) (_ BitVec 5))
(declare-fun $generated@@186 ((_ BitVec 5)) T@U)
(declare-fun $generated@@187 () Int)
(declare-fun $generated@@188 () Int)
(declare-fun $generated@@189 () Int)
(declare-fun $generated@@190 () Int)
(declare-fun $generated@@191 (T@U) Bool)
(declare-fun $generated@@192 (T@U) Bool)
(declare-fun $generated@@193 () Int)
(declare-fun $generated@@194 () T@T)
(declare-fun $generated@@195 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (type $generated@@173) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@174) $generated@@47)) (= (type $generated@@175) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@176) ($generated@@50 $generated@@4))) (forall (($generated@@196 (_ BitVec 67)) ) (! (= ($generated@@178 ($generated@@179 $generated@@196)) $generated@@196)
 :pattern ( ($generated@@179 $generated@@196))
))) (= ($generated@@1 $generated@@194) 12)) (forall (($generated@@197 T@U) ) (!  (=> (= (type $generated@@197) $generated@@194) (= ($generated@@179 ($generated@@178 $generated@@197)) $generated@@197))
 :pattern ( ($generated@@178 $generated@@197))
))) (forall (($generated@@198 (_ BitVec 67)) ) (! (= (type ($generated@@179 $generated@@198)) $generated@@194)
 :pattern ( ($generated@@179 $generated@@198))
))) (forall (($generated@@199 (_ BitVec 5)) ) (! (= ($generated@@185 ($generated@@186 $generated@@199)) $generated@@199)
 :pattern ( ($generated@@186 $generated@@199))
))) (= ($generated@@1 $generated@@195) 13)) (forall (($generated@@200 T@U) ) (!  (=> (= (type $generated@@200) $generated@@195) (= ($generated@@186 ($generated@@185 $generated@@200)) $generated@@200))
 :pattern ( ($generated@@185 $generated@@200))
))) (forall (($generated@@201 (_ BitVec 5)) ) (! (= (type ($generated@@186 $generated@@201)) $generated@@195)
 :pattern ( ($generated@@186 $generated@@201))
))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 26) (let (($generated@@202  (=> (= $generated@@173 ($generated@@45 $generated@@174 $generated@@175 $generated@@176 false)) (=> (and (= $generated@@177 ($generated@@178 ($generated@@159 ($generated@@179 #b0000000000000000000000000000000000000000000000000000000000000000011)))) (= $generated@@180 ($generated@@157 2))) (and (=> (= (ControlFlow 0 2) (- 0 25)) (and (<= 0 $generated@@180) (< $generated@@180 128))) (=> (and (<= 0 $generated@@180) (< $generated@@180 128)) (and (=> (= (ControlFlow 0 2) (- 0 24)) (bvule #b0000010 #b1000011)) (and (=> (= (ControlFlow 0 2) (- 0 23)) (= (bvshl $generated@@177 (concat #b000000000000000000000000000000000000000000000000000000000000 #b0000010)) ($generated@@178 ($generated@@159 ($generated@@179 #b0000000000000000000000000000000000000000000000000000000000000001100))))) (=> (= (bvshl $generated@@177 (concat #b000000000000000000000000000000000000000000000000000000000000 #b0000010)) ($generated@@178 ($generated@@159 ($generated@@179 #b0000000000000000000000000000000000000000000000000000000000000001100)))) (=> (= $generated@@181 ($generated@@157 0)) (and (=> (= (ControlFlow 0 2) (- 0 22)) (and (<= 0 $generated@@181) (< $generated@@181 128))) (=> (and (<= 0 $generated@@181) (< $generated@@181 128)) (and (=> (= (ControlFlow 0 2) (- 0 21)) (bvule #b0000000 #b1000011)) (and (=> (= (ControlFlow 0 2) (- 0 20)) (= (bvlshr $generated@@177 (concat #b000000000000000000000000000000000000000000000000000000000000 #b0000000)) ($generated@@178 ($generated@@159 ($generated@@179 #b0000000000000000000000000000000000000000000000000000000000000000011))))) (=> (= (bvlshr $generated@@177 (concat #b000000000000000000000000000000000000000000000000000000000000 #b0000000)) ($generated@@178 ($generated@@159 ($generated@@179 #b0000000000000000000000000000000000000000000000000000000000000000011)))) (=> (= $generated@@182 ($generated@@157 1)) (and (=> (= (ControlFlow 0 2) (- 0 19)) (and (<= 0 $generated@@182) (< $generated@@182 128))) (=> (and (<= 0 $generated@@182) (< $generated@@182 128)) (and (=> (= (ControlFlow 0 2) (- 0 18)) (bvule #b0000001 #b1000011)) (and (=> (= (ControlFlow 0 2) (- 0 17)) (= (bvlshr $generated@@177 (concat #b000000000000000000000000000000000000000000000000000000000000 #b0000001)) ($generated@@178 ($generated@@159 ($generated@@179 #b0000000000000000000000000000000000000000000000000000000000000000001))))) (=> (= (bvlshr $generated@@177 (concat #b000000000000000000000000000000000000000000000000000000000000 #b0000001)) ($generated@@178 ($generated@@159 ($generated@@179 #b0000000000000000000000000000000000000000000000000000000000000000001)))) (=> (= $generated@@183 ($generated@@157 2)) (and (=> (= (ControlFlow 0 2) (- 0 16)) (and (<= 0 $generated@@183) (< $generated@@183 128))) (=> (and (<= 0 $generated@@183) (< $generated@@183 128)) (and (=> (= (ControlFlow 0 2) (- 0 15)) (bvule #b0000010 #b1000011)) (and (=> (= (ControlFlow 0 2) (- 0 14)) (= (bvlshr $generated@@177 (concat #b000000000000000000000000000000000000000000000000000000000000 #b0000010)) ($generated@@178 ($generated@@159 ($generated@@179 #b0000000000000000000000000000000000000000000000000000000000000000000))))) (=> (= (bvlshr $generated@@177 (concat #b000000000000000000000000000000000000000000000000000000000000 #b0000010)) ($generated@@178 ($generated@@159 ($generated@@179 #b0000000000000000000000000000000000000000000000000000000000000000000)))) (=> (and (= $generated@@184 ($generated@@185 ($generated@@159 ($generated@@186 #b11000)))) (= $generated@@187 ($generated@@157 1))) (and (=> (= (ControlFlow 0 2) (- 0 13)) (and (<= 0 $generated@@187) (< $generated@@187 8))) (=> (and (<= 0 $generated@@187) (< $generated@@187 8)) (and (=> (= (ControlFlow 0 2) (- 0 12)) (bvule #b001 #b101)) (and (=> (= (ControlFlow 0 2) (- 0 11)) (= (bvshl $generated@@184 (concat #b00 #b001)) ($generated@@185 ($generated@@159 ($generated@@186 #b10000))))) (=> (= (bvshl $generated@@184 (concat #b00 #b001)) ($generated@@185 ($generated@@159 ($generated@@186 #b10000)))) (=> (= $generated@@188 ($generated@@157 0)) (and (=> (= (ControlFlow 0 2) (- 0 10)) (and (<= 0 $generated@@188) (< $generated@@188 8))) (=> (and (<= 0 $generated@@188) (< $generated@@188 8)) (and (=> (= (ControlFlow 0 2) (- 0 9)) (bvule #b000 #b101)) (and (=> (= (ControlFlow 0 2) (- 0 8)) (= (bvlshr $generated@@184 (concat #b00 #b000)) ($generated@@185 ($generated@@159 ($generated@@186 #b11000))))) (=> (= (bvlshr $generated@@184 (concat #b00 #b000)) ($generated@@185 ($generated@@159 ($generated@@186 #b11000)))) (=> (= $generated@@189 ($generated@@157 1)) (and (=> (= (ControlFlow 0 2) (- 0 7)) (and (<= 0 $generated@@189) (< $generated@@189 8))) (=> (and (<= 0 $generated@@189) (< $generated@@189 8)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (bvule #b001 #b101)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= (bvlshr $generated@@184 (concat #b00 #b001)) ($generated@@185 ($generated@@159 ($generated@@186 #b01100))))) (=> (= (bvlshr $generated@@184 (concat #b00 #b001)) ($generated@@185 ($generated@@159 ($generated@@186 #b01100)))) (=> (= $generated@@190 ($generated@@157 2)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (<= 0 $generated@@190) (< $generated@@190 8))) (=> (and (<= 0 $generated@@190) (< $generated@@190 8)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (bvule #b010 #b101)) (=> (= (ControlFlow 0 2) (- 0 1)) (= (bvlshr $generated@@184 (concat #b00 #b010)) ($generated@@185 ($generated@@159 ($generated@@186 #b00110))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let (($generated@@203  (=> (and (and ($generated@@191 $generated@@175) ($generated@@192 $generated@@175)) (and (= 0 $generated@@193) (= (ControlFlow 0 26) 2))) $generated@@202)))
$generated@@203)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 (T@U) T@U)
(declare-fun $generated@@164 (T@T T@U) T@U)
(declare-fun $generated@@165 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (and (and (= ($generated@@1 $generated@@165) 11) (forall (($generated@@166 T@U) ) (! (= (type ($generated@@163 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@163 $generated@@166))
))) (forall (($generated@@167 T@T) ($generated@@168 T@U) ) (! (= (type ($generated@@164 $generated@@167 $generated@@168)) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167 $generated@@168))
))))
(assert (forall (($generated@@169 T@U) ) (! (let (($generated@@170 (type $generated@@169)))
(= ($generated@@164 $generated@@170 ($generated@@163 $generated@@169)) $generated@@169))
 :pattern ( ($generated@@163 $generated@@169))
)))
(assert (forall (($generated@@171 Int) ) (! (= ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))) ($generated@@159 ($generated@@163 ($generated@@8 $generated@@171))))
 :pattern ( ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))))
)))
(assert (forall (($generated@@172 T@U) ) (! (= ($generated@@163 ($generated@@159 $generated@@172)) ($generated@@159 ($generated@@163 $generated@@172)))
 :pattern ( ($generated@@163 ($generated@@159 $generated@@172)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@173 () Int)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 (T@U) Bool)
(declare-fun $generated@@179 (T@U) Bool)
(declare-fun $generated@@180 () Int)
(assert  (and (and (and (= (type $generated@@174) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@175) $generated@@47)) (= (type $generated@@176) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@177) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@181  (=> (and (and (not ($generated@@0 ($generated@@159 ($generated@@11 true)))) (not ($generated@@0 ($generated@@159 ($generated@@11 true))))) (= (ControlFlow 0 8) (- 0 7))) false)))
(let (($generated@@182  (=> ($generated@@0 ($generated@@159 ($generated@@11 true))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (<= 0 $generated@@173)) (=> (<= 0 $generated@@173) (=> (= (ControlFlow 0 5) (- 0 4)) (<= $generated@@173 5)))))))
(let (($generated@@183  (=> ($generated@@0 ($generated@@159 ($generated@@11 true))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= 0 $generated@@173)) (=> (<= 0 $generated@@173) (=> (= (ControlFlow 0 2) (- 0 1)) (<= $generated@@173 5)))))))
(let (($generated@@184  (=> (= $generated@@174 ($generated@@45 $generated@@175 $generated@@176 $generated@@177 false)) (and (and (=> (= (ControlFlow 0 9) 2) $generated@@183) (=> (= (ControlFlow 0 9) 5) $generated@@182)) (=> (= (ControlFlow 0 9) 8) $generated@@181)))))
(let (($generated@@185  (=> (and (and (and ($generated@@178 $generated@@176) ($generated@@179 $generated@@176)) (<= ($generated@@157 0) $generated@@173)) (and (= 1 $generated@@180) (= (ControlFlow 0 10) 9))) $generated@@184)))
$generated@@185))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 5) (- 4))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 (T@U) T@U)
(declare-fun $generated@@164 (T@T T@U) T@U)
(declare-fun $generated@@165 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (and (and (= ($generated@@1 $generated@@165) 11) (forall (($generated@@166 T@U) ) (! (= (type ($generated@@163 $generated@@166)) $generated@@165)
 :pattern ( ($generated@@163 $generated@@166))
))) (forall (($generated@@167 T@T) ($generated@@168 T@U) ) (! (= (type ($generated@@164 $generated@@167 $generated@@168)) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167 $generated@@168))
))))
(assert (forall (($generated@@169 T@U) ) (! (let (($generated@@170 (type $generated@@169)))
(= ($generated@@164 $generated@@170 ($generated@@163 $generated@@169)) $generated@@169))
 :pattern ( ($generated@@163 $generated@@169))
)))
(assert (forall (($generated@@171 Int) ) (! (= ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))) ($generated@@159 ($generated@@163 ($generated@@8 $generated@@171))))
 :pattern ( ($generated@@163 ($generated@@8 ($generated@@157 $generated@@171))))
)))
(assert (forall (($generated@@172 T@U) ) (! (= ($generated@@163 ($generated@@159 $generated@@172)) ($generated@@159 ($generated@@163 $generated@@172)))
 :pattern ( ($generated@@163 ($generated@@159 $generated@@172)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () (_ BitVec 5))
(declare-fun $generated@@178 (T@U) (_ BitVec 5))
(declare-fun $generated@@179 ((_ BitVec 5)) T@U)
(declare-fun $generated@@180 (T@U) Bool)
(declare-fun $generated@@181 (T@U) Bool)
(declare-fun $generated@@182 () Int)
(declare-fun $generated@@183 () T@T)
(assert  (and (and (and (and (and (and (and (= (type $generated@@173) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@174) $generated@@47)) (= (type $generated@@175) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@176) ($generated@@50 $generated@@4))) (forall (($generated@@184 (_ BitVec 5)) ) (! (= ($generated@@178 ($generated@@179 $generated@@184)) $generated@@184)
 :pattern ( ($generated@@179 $generated@@184))
))) (= ($generated@@1 $generated@@183) 12)) (forall (($generated@@185 T@U) ) (!  (=> (= (type $generated@@185) $generated@@183) (= ($generated@@179 ($generated@@178 $generated@@185)) $generated@@185))
 :pattern ( ($generated@@178 $generated@@185))
))) (forall (($generated@@186 (_ BitVec 5)) ) (! (= (type ($generated@@179 $generated@@186)) $generated@@183)
 :pattern ( ($generated@@179 $generated@@186))
))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@187  (=> (and (= $generated@@173 ($generated@@45 $generated@@174 $generated@@175 $generated@@176 false)) (= $generated@@177 ($generated@@178 ($generated@@159 ($generated@@179 #b01100))))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (<= 0 ($generated@@157 3))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (<= ($generated@@157 3) 5)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= 0 ($generated@@157 3))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@157 3) 5)) (=> (= (ControlFlow 0 2) (- 0 1)) (= $generated@@177 (ext_rotate_right (ext_rotate_left $generated@@177 #b00011) #b00011))))))))))
(let (($generated@@188  (=> (and (and ($generated@@180 $generated@@175) ($generated@@181 $generated@@175)) (and (= 0 $generated@@182) (= (ControlFlow 0 7) 2))) $generated@@187)))
$generated@@188)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
