(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@55 () T@U)
(declare-fun $generated@@56 () T@U)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@58 () T@U)
(declare-fun $generated@@59 () T@U)
(declare-fun $generated@@60 () T@U)
(declare-fun $generated@@61 () T@U)
(declare-fun $generated@@62 () T@U)
(declare-fun $generated@@63 () T@U)
(declare-fun $generated@@64 () T@U)
(declare-fun $generated@@65 () T@U)
(declare-fun $generated@@66 () T@U)
(declare-fun $generated@@67 () T@U)
(declare-fun $generated@@68 () T@U)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 () T@T)
(declare-fun $generated@@77 (T@U) T@U)
(declare-fun $generated@@79 (T@U T@U T@U) Bool)
(declare-fun $generated@@80 (Int) T@U)
(declare-fun $generated@@81 (T@T T@T) T@T)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 (T@T) T@T)
(declare-fun $generated@@85 (T@T) T@T)
(declare-fun $generated@@86 (T@U T@U) T@U)
(declare-fun $generated@@87 (T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@U T@U) T@U)
(declare-fun $generated@@89 (T@U T@U T@U) T@U)
(declare-fun $generated@@137 (T@U T@U) Bool)
(declare-fun $generated@@139 (T@U) Bool)
(declare-fun $generated@@140 (T@U T@U) T@U)
(declare-fun $generated@@141 () T@T)
(declare-fun $generated@@147 (T@U T@U) Bool)
(declare-fun $generated@@148 (T@U) T@U)
(declare-fun $generated@@149 (T@U) T@U)
(declare-fun $generated@@150 () T@T)
(declare-fun $generated@@155 (T@U) T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 (T@U) T@U)
(declare-fun $generated@@161 (T@U) Bool)
(declare-fun $generated@@165 (T@U T@U T@U) T@U)
(declare-fun $generated@@166 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@167 (T@T T@T) T@T)
(declare-fun $generated@@168 (T@T) T@T)
(declare-fun $generated@@169 (T@T) T@T)
(declare-fun $generated@@170 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@221 (T@U T@U) T@U)
(declare-fun $generated@@222 (T@U T@U) Bool)
(declare-fun $generated@@229 () T@U)
(declare-fun $generated@@230 (T@U) Bool)
(declare-fun $generated@@236 (T@U T@U) Bool)
(declare-fun $generated@@239 (T@U) T@U)
(declare-fun $generated@@244 (T@U) T@U)
(declare-fun $generated@@249 (Int) Int)
(declare-fun $generated@@251 (T@U) T@U)
(declare-fun $generated@@255 (T@U) Bool)
(declare-fun $generated@@258 (T@U) Bool)
(declare-fun $generated@@261 (T@U) Bool)
(declare-fun $generated@@264 (T@U T@U T@U) Bool)
(declare-fun $generated@@277 (T@T) T@U)
(declare-fun $generated@@278 (T@U) Int)
(declare-fun $generated@@279 (T@T) T@T)
(declare-fun $generated@@280 (T@T) T@T)
(declare-fun $generated@@288 (T@U) T@U)
(declare-fun $generated@@293 () Int)
(declare-fun $generated@@294 (Int Int T@U) Bool)
(declare-fun $generated@@295 (Int Int T@U) Bool)
(declare-fun $generated@@299 (Int Int T@U) Bool)
(declare-fun $generated@@300 (Int Int T@U) Bool)
(declare-fun $generated@@304 (T@U) Int)
(declare-fun $generated@@305 (T@T) T@U)
(declare-fun $generated@@310 (T@U) T@U)
(declare-fun $generated@@311 (T@T T@T) T@U)
(declare-fun $generated@@312 (T@T T@T) T@T)
(declare-fun $generated@@313 (T@T) T@T)
(declare-fun $generated@@314 (T@T) T@T)
(declare-fun $generated@@328 (T@U) T@U)
(declare-fun $generated@@329 (T@T T@T) T@U)
(declare-fun $generated@@330 (T@T T@T) T@T)
(declare-fun $generated@@331 (T@T) T@T)
(declare-fun $generated@@332 (T@T) T@T)
(declare-fun $generated@@349 (T@T T@U) T@U)
(declare-fun $generated@@353 (T@U) Bool)
(declare-fun $generated@@364 (T@U) T@U)
(declare-fun $generated@@375 (T@U) T@U)
(declare-fun $generated@@395 (T@U) T@U)
(declare-fun $generated@@396 (T@U) T@U)
(declare-fun $generated@@403 (T@U) T@U)
(declare-fun $generated@@404 (T@U) T@U)
(declare-fun $generated@@421 (T@U T@U) T@U)
(declare-fun $generated@@429 (T@U T@U) T@U)
(declare-fun $generated@@437 (T@T) T@U)
(declare-fun $generated@@461 () T@T)
(declare-fun $generated@@469 (T@U) T@U)
(declare-fun $generated@@473 (T@U) T@U)
(declare-fun $generated@@479 (T@U) T@U)
(declare-fun $generated@@483 (T@U) T@U)
(declare-fun $generated@@491 (T@U) T@U)
(declare-fun $generated@@495 (T@U) T@U)
(declare-fun $generated@@503 (T@U) T@U)
(declare-fun $generated@@504 (T@U Int) T@U)
(declare-fun $generated@@513 (T@U) Int)
(declare-fun $generated@@515 (T@U) T@U)
(declare-fun $generated@@519 (T@U) T@U)
(declare-fun $generated@@523 (T@U) T@U)
(declare-fun $generated@@527 (T@U) T@U)
(declare-fun $generated@@542 (T@U) Int)
(declare-fun $generated@@543 (T@U) Int)
(declare-fun $generated@@559 (T@U) T@U)
(declare-fun $generated@@615 (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@69) 6) (= (type $generated@@44) $generated@@69)) (= (type $generated@@45) $generated@@69)) (= (type $generated@@46) $generated@@69)) (= (type $generated@@47) $generated@@69)) (= (type $generated@@48) $generated@@69)) (= ($generated@@1 $generated@@70) 7)) (= (type $generated@@49) $generated@@70)) (= (type $generated@@50) $generated@@70)) (= (type $generated@@51) $generated@@70)) (= (type $generated@@52) $generated@@70)) (= (type $generated@@53) $generated@@70)) (= (type $generated@@54) $generated@@70)) (= (type $generated@@55) $generated@@70)) (= (type $generated@@56) $generated@@70)) (= (type $generated@@57) $generated@@70)) (= (type $generated@@58) $generated@@70)) (= (type $generated@@59) $generated@@70)) (forall (($generated@@75 T@T) ) (= ($generated@@1 ($generated@@71 $generated@@75)) 8))) (forall (($generated@@76 T@T) ) (! (= ($generated@@72 ($generated@@71 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@71 $generated@@76))
))) (= (type $generated@@60) ($generated@@71 $generated@@4))) (= ($generated@@1 $generated@@73) 9)) (= (type $generated@@61) $generated@@73)) (= (type $generated@@62) $generated@@70)) (= (type $generated@@63) $generated@@73)) (= (type $generated@@64) $generated@@70)) (= (type $generated@@65) $generated@@73)) (= (type $generated@@66) $generated@@73)) (= ($generated@@1 $generated@@74) 10)) (= (type $generated@@67) $generated@@74)) (= (type $generated@@68) $generated@@74)))
(assert (distinct $generated@@44 $generated@@45 $generated@@46 $generated@@47 $generated@@48 $generated@@49 $generated@@50 $generated@@51 $generated@@52 $generated@@53 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60 $generated@@61 $generated@@62 $generated@@63 $generated@@64 $generated@@65 $generated@@66 $generated@@67 $generated@@68)
)
(assert (forall (($generated@@78 T@U) ) (! (= (type ($generated@@77 $generated@@78)) $generated@@70)
 :pattern ( ($generated@@77 $generated@@78))
)))
(assert (= ($generated@@77 $generated@@44) $generated@@49))
(assert (= ($generated@@77 $generated@@45) $generated@@50))
(assert (= ($generated@@77 $generated@@46) $generated@@51))
(assert (= ($generated@@77 $generated@@47) $generated@@52))
(assert (= ($generated@@77 $generated@@48) $generated@@53))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ) (= ($generated@@1 ($generated@@81 $generated@@90 $generated@@91)) 11)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ) (! (= ($generated@@84 ($generated@@81 $generated@@92 $generated@@93)) $generated@@92)
 :pattern ( ($generated@@81 $generated@@92 $generated@@93))
))) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (! (= ($generated@@85 ($generated@@81 $generated@@94 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@81 $generated@@94 $generated@@95))
))) (forall (($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@85 (type $generated@@96))))
(= (type ($generated@@86 $generated@@96 $generated@@97)) $generated@@98))
 :pattern ( ($generated@@86 $generated@@96 $generated@@97))
))) (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (let (($generated@@102 (type $generated@@101)))
(let (($generated@@103 (type $generated@@100)))
(= (type ($generated@@87 $generated@@99 $generated@@100 $generated@@101)) ($generated@@81 $generated@@103 $generated@@102))))
 :pattern ( ($generated@@87 $generated@@99 $generated@@100 $generated@@101))
))) (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (let (($generated@@107 ($generated@@85 (type $generated@@104))))
 (=> (= (type $generated@@106) $generated@@107) (= ($generated@@86 ($generated@@87 $generated@@104 $generated@@105 $generated@@106) $generated@@105) $generated@@106)))
 :weight 0
))) (and (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@110 $generated@@111) (= ($generated@@86 ($generated@@87 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@86 $generated@@109 $generated@@111)))
 :weight 0
)) (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or true (= ($generated@@86 ($generated@@87 $generated@@113 $generated@@114 $generated@@112) $generated@@115) ($generated@@86 $generated@@113 $generated@@115)))
 :weight 0
)))) (= ($generated@@1 $generated@@82) 12)) (forall (($generated@@116 T@U) ($generated@@117 T@U) ) (! (let (($generated@@118 ($generated@@72 (type $generated@@117))))
(= (type ($generated@@88 $generated@@116 $generated@@117)) $generated@@118))
 :pattern ( ($generated@@88 $generated@@116 $generated@@117))
))) (= ($generated@@1 $generated@@83) 13)) (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= (type ($generated@@89 $generated@@119 $generated@@120 $generated@@121)) $generated@@83)
 :pattern ( ($generated@@89 $generated@@119 $generated@@120 $generated@@121))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (let (($generated@@125 ($generated@@72 (type $generated@@123))))
 (=> (= (type $generated@@124) $generated@@125) (= ($generated@@88 ($generated@@89 $generated@@122 $generated@@123 $generated@@124) $generated@@123) $generated@@124)))
 :weight 0
))) (and (forall (($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@128 $generated@@129) (= ($generated@@88 ($generated@@89 $generated@@127 $generated@@128 $generated@@126) $generated@@129) ($generated@@88 $generated@@127 $generated@@129)))
 :weight 0
)) (forall (($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or true (= ($generated@@88 ($generated@@89 $generated@@131 $generated@@132 $generated@@130) $generated@@133) ($generated@@88 $generated@@131 $generated@@133)))
 :weight 0
)))) (forall (($generated@@134 Int) ) (! (= (type ($generated@@80 $generated@@134)) $generated@@69)
 :pattern ( ($generated@@80 $generated@@134))
))))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (!  (=> (and (= (type $generated@@135) $generated@@2) (= (type $generated@@136) ($generated@@81 $generated@@82 $generated@@83))) ($generated@@79 $generated@@135 ($generated@@80 0) $generated@@136))
 :pattern ( ($generated@@79 $generated@@135 ($generated@@80 0) $generated@@136))
)))
(assert (forall (($generated@@138 T@U) ) (!  (=> (= (type $generated@@138) $generated@@2) ($generated@@137 $generated@@138 ($generated@@80 0)))
 :pattern ( ($generated@@137 $generated@@138 ($generated@@80 0)))
)))
(assert  (and (= ($generated@@1 $generated@@141) 14) (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (! (= (type ($generated@@140 $generated@@142 $generated@@143)) $generated@@69)
 :pattern ( ($generated@@140 $generated@@142 $generated@@143))
))))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ) (!  (=> (and (and (and (= (type $generated@@144) $generated@@69) (= (type $generated@@145) $generated@@69)) (= (type $generated@@146) $generated@@141)) ($generated@@137 $generated@@146 ($generated@@140 $generated@@144 $generated@@145))) ($generated@@139 $generated@@146))
 :pattern ( ($generated@@139 $generated@@146) ($generated@@137 $generated@@146 ($generated@@140 $generated@@144 $generated@@145)))
)))
(assert  (and (and (= ($generated@@1 $generated@@150) 15) (forall (($generated@@151 T@U) ) (! (= (type ($generated@@148 $generated@@151)) $generated@@150)
 :pattern ( ($generated@@148 $generated@@151))
))) (forall (($generated@@152 T@U) ) (! (= (type ($generated@@149 $generated@@152)) $generated@@150)
 :pattern ( ($generated@@149 $generated@@152))
))))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (=> (and (and (= (type $generated@@153) $generated@@141) (= (type $generated@@154) $generated@@141)) true) (= ($generated@@147 $generated@@153 $generated@@154)  (and (= ($generated@@148 $generated@@153) ($generated@@148 $generated@@154)) (= ($generated@@149 $generated@@153) ($generated@@149 $generated@@154)))))
 :pattern ( ($generated@@147 $generated@@153 $generated@@154))
)))
(assert  (and (forall (($generated@@157 T@U) ) (! (= (type ($generated@@155 $generated@@157)) $generated@@73)
 :pattern ( ($generated@@155 $generated@@157))
)) (= (type $generated@@156) $generated@@141)))
(assert (= ($generated@@155 $generated@@156) $generated@@63))
(assert (= (type $generated@@158) $generated@@141))
(assert (= ($generated@@155 $generated@@158) $generated@@65))
(assert (= (type $generated@@159) $generated@@141))
(assert (= ($generated@@155 $generated@@159) $generated@@66))
(assert (forall (($generated@@162 T@U) ) (! (= (type ($generated@@160 $generated@@162)) $generated@@69)
 :pattern ( ($generated@@160 $generated@@162))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@U) ) (!  (=> (and (and (= (type $generated@@163) ($generated@@81 $generated@@150 $generated@@2)) (= (type $generated@@164) $generated@@69)) ($generated@@137 $generated@@163 ($generated@@160 $generated@@164))) ($generated@@161 $generated@@163))
 :pattern ( ($generated@@137 $generated@@163 ($generated@@160 $generated@@164)))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@171 T@T) ($generated@@172 T@T) ) (= ($generated@@1 ($generated@@167 $generated@@171 $generated@@172)) 16)) (forall (($generated@@173 T@T) ($generated@@174 T@T) ) (! (= ($generated@@168 ($generated@@167 $generated@@173 $generated@@174)) $generated@@173)
 :pattern ( ($generated@@167 $generated@@173 $generated@@174))
))) (forall (($generated@@175 T@T) ($generated@@176 T@T) ) (! (= ($generated@@169 ($generated@@167 $generated@@175 $generated@@176)) $generated@@176)
 :pattern ( ($generated@@167 $generated@@175 $generated@@176))
))) (forall (($generated@@177 T@U) ($generated@@178 T@U) ($generated@@179 T@U) ) (! (let (($generated@@180 ($generated@@169 (type $generated@@177))))
(= (type ($generated@@165 $generated@@177 $generated@@178 $generated@@179)) $generated@@180))
 :pattern ( ($generated@@165 $generated@@177 $generated@@178 $generated@@179))
))) (forall (($generated@@181 T@U) ($generated@@182 T@U) ($generated@@183 T@U) ($generated@@184 T@U) ) (! (let (($generated@@185 (type $generated@@184)))
(let (($generated@@186 (type $generated@@182)))
(= (type ($generated@@170 $generated@@181 $generated@@182 $generated@@183 $generated@@184)) ($generated@@167 $generated@@186 $generated@@185))))
 :pattern ( ($generated@@170 $generated@@181 $generated@@182 $generated@@183 $generated@@184))
))) (forall (($generated@@187 T@U) ($generated@@188 T@U) ($generated@@189 T@U) ($generated@@190 T@U) ) (! (let (($generated@@191 ($generated@@169 (type $generated@@187))))
 (=> (= (type $generated@@190) $generated@@191) (= ($generated@@165 ($generated@@170 $generated@@187 $generated@@188 $generated@@189 $generated@@190) $generated@@188 $generated@@189) $generated@@190)))
 :weight 0
))) (and (and (forall (($generated@@192 T@U) ($generated@@193 T@U) ($generated@@194 T@U) ($generated@@195 T@U) ($generated@@196 T@U) ($generated@@197 T@U) ) (!  (or (= $generated@@194 $generated@@196) (= ($generated@@165 ($generated@@170 $generated@@193 $generated@@194 $generated@@195 $generated@@192) $generated@@196 $generated@@197) ($generated@@165 $generated@@193 $generated@@196 $generated@@197)))
 :weight 0
)) (forall (($generated@@198 T@U) ($generated@@199 T@U) ($generated@@200 T@U) ($generated@@201 T@U) ($generated@@202 T@U) ($generated@@203 T@U) ) (!  (or (= $generated@@201 $generated@@203) (= ($generated@@165 ($generated@@170 $generated@@199 $generated@@200 $generated@@201 $generated@@198) $generated@@202 $generated@@203) ($generated@@165 $generated@@199 $generated@@202 $generated@@203)))
 :weight 0
))) (forall (($generated@@204 T@U) ($generated@@205 T@U) ($generated@@206 T@U) ($generated@@207 T@U) ($generated@@208 T@U) ($generated@@209 T@U) ) (!  (or true (= ($generated@@165 ($generated@@170 $generated@@205 $generated@@206 $generated@@207 $generated@@204) $generated@@208 $generated@@209) ($generated@@165 $generated@@205 $generated@@208 $generated@@209)))
 :weight 0
)))) (forall (($generated@@210 T@U) ($generated@@211 T@U) ($generated@@212 T@U) ($generated@@213 Bool) ) (! (= (type ($generated@@166 $generated@@210 $generated@@211 $generated@@212 $generated@@213)) ($generated@@167 $generated@@82 $generated@@4))
 :pattern ( ($generated@@166 $generated@@210 $generated@@211 $generated@@212 $generated@@213))
))))
(assert (forall (($generated@@214 T@U) ($generated@@215 T@U) ($generated@@216 T@U) ($generated@@217 Bool) ($generated@@218 T@U) ($generated@@219 T@U) ) (! (let (($generated@@220 ($generated@@72 (type $generated@@219))))
 (=> (and (and (and (and (= (type $generated@@214) $generated@@82) (= (type $generated@@215) ($generated@@81 $generated@@82 $generated@@83))) (= (type $generated@@216) ($generated@@71 $generated@@4))) (= (type $generated@@218) $generated@@82)) (= (type $generated@@219) ($generated@@71 $generated@@220))) (= ($generated@@0 ($generated@@165 ($generated@@166 $generated@@214 $generated@@215 $generated@@216 $generated@@217) $generated@@218 $generated@@219))  (=> (and (not (= $generated@@218 $generated@@214)) ($generated@@0 ($generated@@88 ($generated@@86 $generated@@215 $generated@@218) $generated@@216))) $generated@@217))))
 :pattern ( ($generated@@165 ($generated@@166 $generated@@214 $generated@@215 $generated@@216 $generated@@217) $generated@@218 $generated@@219))
)))
(assert (forall (($generated@@223 T@U) ($generated@@224 T@U) ) (! (= (type ($generated@@221 $generated@@223 $generated@@224)) $generated@@141)
 :pattern ( ($generated@@221 $generated@@223 $generated@@224))
)))
(assert (forall (($generated@@225 T@U) ($generated@@226 T@U) ($generated@@227 T@U) ($generated@@228 T@U) ) (!  (=> (and (and (and (= (type $generated@@225) $generated@@69) (= (type $generated@@226) $generated@@69)) (= (type $generated@@227) $generated@@150)) (= (type $generated@@228) $generated@@150)) (= ($generated@@137 ($generated@@221 $generated@@227 $generated@@228) ($generated@@140 $generated@@225 $generated@@226))  (and ($generated@@222 $generated@@227 $generated@@225) ($generated@@222 $generated@@228 $generated@@226))))
 :pattern ( ($generated@@137 ($generated@@221 $generated@@227 $generated@@228) ($generated@@140 $generated@@225 $generated@@226)))
)))
(assert (= (type $generated@@229) $generated@@69))
(assert ($generated@@137 $generated@@156 $generated@@229))
(assert ($generated@@137 $generated@@158 $generated@@229))
(assert ($generated@@137 $generated@@159 $generated@@229))
(assert (forall (($generated@@231 T@U) ) (!  (=> (and (= (type $generated@@231) ($generated@@81 $generated@@82 $generated@@83)) ($generated@@230 $generated@@231)) ($generated@@79 $generated@@156 $generated@@229 $generated@@231))
 :pattern ( ($generated@@79 $generated@@156 $generated@@229 $generated@@231))
)))
(assert (forall (($generated@@232 T@U) ) (!  (=> (and (= (type $generated@@232) ($generated@@81 $generated@@82 $generated@@83)) ($generated@@230 $generated@@232)) ($generated@@79 $generated@@158 $generated@@229 $generated@@232))
 :pattern ( ($generated@@79 $generated@@158 $generated@@229 $generated@@232))
)))
(assert (forall (($generated@@233 T@U) ) (!  (=> (and (= (type $generated@@233) ($generated@@81 $generated@@82 $generated@@83)) ($generated@@230 $generated@@233)) ($generated@@79 $generated@@159 $generated@@229 $generated@@233))
 :pattern ( ($generated@@79 $generated@@159 $generated@@229 $generated@@233))
)))
(assert (forall (($generated@@234 T@U) ($generated@@235 T@U) ) (!  (=> (and (= (type $generated@@234) $generated@@141) (= (type $generated@@235) $generated@@141)) (= ($generated@@147 $generated@@234 $generated@@235) (= $generated@@234 $generated@@235)))
 :pattern ( ($generated@@147 $generated@@234 $generated@@235))
)))
(assert (forall (($generated@@237 T@U) ($generated@@238 T@U) ) (!  (=> (and (= (type $generated@@237) $generated@@141) (= (type $generated@@238) $generated@@141)) (= ($generated@@236 $generated@@237 $generated@@238) (= $generated@@237 $generated@@238)))
 :pattern ( ($generated@@236 $generated@@237 $generated@@238))
)))
(assert (forall (($generated@@240 T@U) ) (! (= (type ($generated@@239 $generated@@240)) $generated@@69)
 :pattern ( ($generated@@239 $generated@@240))
)))
(assert (forall (($generated@@241 T@U) ($generated@@242 T@U) ) (!  (=> (and (= (type $generated@@241) ($generated@@81 $generated@@150 $generated@@4)) (= (type $generated@@242) $generated@@69)) (= ($generated@@137 $generated@@241 ($generated@@239 $generated@@242)) (forall (($generated@@243 T@U) ) (!  (=> (and (= (type $generated@@243) $generated@@150) ($generated@@0 ($generated@@86 $generated@@241 $generated@@243))) ($generated@@222 $generated@@243 $generated@@242))
 :pattern ( ($generated@@86 $generated@@241 $generated@@243))
))))
 :pattern ( ($generated@@137 $generated@@241 ($generated@@239 $generated@@242)))
)))
(assert (forall (($generated@@245 T@U) ) (! (= (type ($generated@@244 $generated@@245)) $generated@@69)
 :pattern ( ($generated@@244 $generated@@245))
)))
(assert (forall (($generated@@246 T@U) ($generated@@247 T@U) ) (!  (=> (and (= (type $generated@@246) ($generated@@81 $generated@@150 $generated@@4)) (= (type $generated@@247) $generated@@69)) (= ($generated@@137 $generated@@246 ($generated@@244 $generated@@247)) (forall (($generated@@248 T@U) ) (!  (=> (and (= (type $generated@@248) $generated@@150) ($generated@@0 ($generated@@86 $generated@@246 $generated@@248))) ($generated@@222 $generated@@248 $generated@@247))
 :pattern ( ($generated@@86 $generated@@246 $generated@@248))
))))
 :pattern ( ($generated@@137 $generated@@246 ($generated@@244 $generated@@247)))
)))
(assert (forall (($generated@@250 Int) ) (! (= ($generated@@249 $generated@@250) $generated@@250)
 :pattern ( ($generated@@249 $generated@@250))
)))
(assert (forall (($generated@@252 T@U) ) (! (let (($generated@@253 (type $generated@@252)))
(= (type ($generated@@251 $generated@@252)) $generated@@253))
 :pattern ( ($generated@@251 $generated@@252))
)))
(assert (forall (($generated@@254 T@U) ) (! (= ($generated@@251 $generated@@254) $generated@@254)
 :pattern ( ($generated@@251 $generated@@254))
)))
(assert (forall (($generated@@256 T@U) ($generated@@257 T@U) ) (!  (=> (and (and (= (type $generated@@256) $generated@@141) (= (type $generated@@257) $generated@@141)) (and ($generated@@255 $generated@@256) ($generated@@255 $generated@@257))) (= ($generated@@236 $generated@@256 $generated@@257) true))
 :pattern ( ($generated@@236 $generated@@256 $generated@@257) ($generated@@255 $generated@@256))
 :pattern ( ($generated@@236 $generated@@256 $generated@@257) ($generated@@255 $generated@@257))
)))
(assert (forall (($generated@@259 T@U) ($generated@@260 T@U) ) (!  (=> (and (and (= (type $generated@@259) $generated@@141) (= (type $generated@@260) $generated@@141)) (and ($generated@@258 $generated@@259) ($generated@@258 $generated@@260))) (= ($generated@@236 $generated@@259 $generated@@260) true))
 :pattern ( ($generated@@236 $generated@@259 $generated@@260) ($generated@@258 $generated@@259))
 :pattern ( ($generated@@236 $generated@@259 $generated@@260) ($generated@@258 $generated@@260))
)))
(assert (forall (($generated@@262 T@U) ($generated@@263 T@U) ) (!  (=> (and (and (= (type $generated@@262) $generated@@141) (= (type $generated@@263) $generated@@141)) (and ($generated@@261 $generated@@262) ($generated@@261 $generated@@263))) (= ($generated@@236 $generated@@262 $generated@@263) true))
 :pattern ( ($generated@@236 $generated@@262 $generated@@263) ($generated@@261 $generated@@262))
 :pattern ( ($generated@@236 $generated@@262 $generated@@263) ($generated@@261 $generated@@263))
)))
(assert (forall (($generated@@265 T@U) ($generated@@266 T@U) ($generated@@267 T@U) ($generated@@268 T@U) ($generated@@269 T@U) ) (!  (=> (and (and (and (and (and (= (type $generated@@265) $generated@@69) (= (type $generated@@266) $generated@@69)) (= (type $generated@@267) $generated@@150)) (= (type $generated@@268) $generated@@150)) (= (type $generated@@269) ($generated@@81 $generated@@82 $generated@@83))) ($generated@@230 $generated@@269)) (= ($generated@@79 ($generated@@221 $generated@@267 $generated@@268) ($generated@@140 $generated@@265 $generated@@266) $generated@@269)  (and ($generated@@264 $generated@@267 $generated@@265 $generated@@269) ($generated@@264 $generated@@268 $generated@@266 $generated@@269))))
 :pattern ( ($generated@@79 ($generated@@221 $generated@@267 $generated@@268) ($generated@@140 $generated@@265 $generated@@266) $generated@@269))
)))
(assert (forall (($generated@@270 T@U) ) (!  (=> (= (type $generated@@270) $generated@@141) (= ($generated@@139 $generated@@270) (= ($generated@@155 $generated@@270) $generated@@61)))
 :pattern ( ($generated@@139 $generated@@270))
)))
(assert (forall (($generated@@271 T@U) ) (!  (=> (= (type $generated@@271) $generated@@141) (= ($generated@@255 $generated@@271) (= ($generated@@155 $generated@@271) $generated@@63)))
 :pattern ( ($generated@@255 $generated@@271))
)))
(assert (forall (($generated@@272 T@U) ) (!  (=> (= (type $generated@@272) $generated@@141) (= ($generated@@258 $generated@@272) (= ($generated@@155 $generated@@272) $generated@@65)))
 :pattern ( ($generated@@258 $generated@@272))
)))
(assert (forall (($generated@@273 T@U) ) (!  (=> (= (type $generated@@273) $generated@@141) (= ($generated@@261 $generated@@273) (= ($generated@@155 $generated@@273) $generated@@66)))
 :pattern ( ($generated@@261 $generated@@273))
)))
(assert (forall (($generated@@274 T@U) ) (!  (=> (and (= (type $generated@@274) $generated@@141) ($generated@@139 $generated@@274)) (exists (($generated@@275 T@U) ($generated@@276 T@U) ) (!  (and (and (= (type $generated@@275) $generated@@150) (= (type $generated@@276) $generated@@150)) (= $generated@@274 ($generated@@221 $generated@@275 $generated@@276)))
 :no-pattern (type $generated@@275)
 :no-pattern (type $generated@@276)
 :no-pattern ($generated $generated@@275)
 :no-pattern ($generated@@0 $generated@@275)
 :no-pattern ($generated $generated@@276)
 :no-pattern ($generated@@0 $generated@@276)
)))
 :pattern ( ($generated@@139 $generated@@274))
)))
(assert  (and (and (forall (($generated@@281 T@T) ) (= ($generated@@1 ($generated@@279 $generated@@281)) 17)) (forall (($generated@@282 T@T) ) (! (= ($generated@@280 ($generated@@279 $generated@@282)) $generated@@282)
 :pattern ( ($generated@@279 $generated@@282))
))) (forall (($generated@@283 T@T) ) (! (= (type ($generated@@277 $generated@@283)) ($generated@@279 $generated@@283))
 :pattern ( ($generated@@277 $generated@@283))
))))
(assert (forall (($generated@@284 T@T) ) (! (= ($generated@@278 ($generated@@277 $generated@@284)) 0)
 :pattern ( ($generated@@277 $generated@@284))
)))
(assert (forall (($generated@@285 T@U) ) (!  (=> (and (= (type $generated@@285) $generated@@141) ($generated@@255 $generated@@285)) (= $generated@@285 $generated@@156))
 :pattern ( ($generated@@255 $generated@@285))
)))
(assert (forall (($generated@@286 T@U) ) (!  (=> (and (= (type $generated@@286) $generated@@141) ($generated@@258 $generated@@286)) (= $generated@@286 $generated@@158))
 :pattern ( ($generated@@258 $generated@@286))
)))
(assert (forall (($generated@@287 T@U) ) (!  (=> (and (= (type $generated@@287) $generated@@141) ($generated@@261 $generated@@287)) (= $generated@@287 $generated@@159))
 :pattern ( ($generated@@261 $generated@@287))
)))
(assert (forall (($generated@@289 T@U) ) (! (= (type ($generated@@288 $generated@@289)) $generated@@150)
 :pattern ( ($generated@@288 $generated@@289))
)))
(assert (forall (($generated@@290 T@U) ($generated@@291 T@U) ($generated@@292 T@U) ) (!  (=> (and (= (type $generated@@291) $generated@@69) (= (type $generated@@292) ($generated@@81 $generated@@82 $generated@@83))) (= ($generated@@264 ($generated@@288 $generated@@290) $generated@@291 $generated@@292) ($generated@@79 $generated@@290 $generated@@291 $generated@@292)))
 :pattern ( ($generated@@264 ($generated@@288 $generated@@290) $generated@@291 $generated@@292))
)))
(assert  (=> (<= 1 $generated@@293) (forall (($generated@@296 Int) ($generated@@297 Int) ($generated@@298 T@U) ) (!  (=> (and (= (type $generated@@298) $generated@@141) (or ($generated@@295 $generated@@296 $generated@@297 $generated@@298) (and (not (= 1 $generated@@293)) ($generated@@137 $generated@@298 $generated@@229)))) true)
 :pattern ( ($generated@@294 $generated@@296 $generated@@297 $generated@@298))
))))
(assert  (=> (<= 1 $generated@@293) (forall (($generated@@301 Int) ($generated@@302 Int) ($generated@@303 T@U) ) (!  (=> (and (= (type $generated@@303) $generated@@141) (or ($generated@@300 $generated@@301 $generated@@302 $generated@@303) (and (not (= 1 $generated@@293)) ($generated@@137 $generated@@303 $generated@@229)))) true)
 :pattern ( ($generated@@299 $generated@@301 $generated@@302 $generated@@303))
))))
(assert (forall (($generated@@306 T@T) ) (! (= (type ($generated@@305 $generated@@306)) ($generated@@81 $generated@@306 $generated@@2))
 :pattern ( ($generated@@305 $generated@@306))
)))
(assert (forall (($generated@@307 T@U) ) (! (let (($generated@@308 ($generated@@84 (type $generated@@307))))
 (=> (= (type $generated@@307) ($generated@@81 $generated@@308 $generated@@2)) (and (= (= ($generated@@304 $generated@@307) 0) (= $generated@@307 ($generated@@305 $generated@@308))) (=> (not (= ($generated@@304 $generated@@307) 0)) (exists (($generated@@309 T@U) ) (!  (and (= (type $generated@@309) $generated@@308) (< 0 ($generated ($generated@@86 $generated@@307 $generated@@309))))
 :no-pattern (type $generated@@309)
 :no-pattern ($generated $generated@@309)
 :no-pattern ($generated@@0 $generated@@309)
))))))
 :pattern ( ($generated@@304 $generated@@307))
)))
(assert  (and (and (and (and (forall (($generated@@315 T@T) ($generated@@316 T@T) ) (= ($generated@@1 ($generated@@312 $generated@@315 $generated@@316)) 18)) (forall (($generated@@317 T@T) ($generated@@318 T@T) ) (! (= ($generated@@313 ($generated@@312 $generated@@317 $generated@@318)) $generated@@317)
 :pattern ( ($generated@@312 $generated@@317 $generated@@318))
))) (forall (($generated@@319 T@T) ($generated@@320 T@T) ) (! (= ($generated@@314 ($generated@@312 $generated@@319 $generated@@320)) $generated@@320)
 :pattern ( ($generated@@312 $generated@@319 $generated@@320))
))) (forall (($generated@@321 T@U) ) (! (let (($generated@@322 ($generated@@313 (type $generated@@321))))
(= (type ($generated@@310 $generated@@321)) ($generated@@81 $generated@@322 $generated@@4)))
 :pattern ( ($generated@@310 $generated@@321))
))) (forall (($generated@@323 T@T) ($generated@@324 T@T) ) (! (= (type ($generated@@311 $generated@@323 $generated@@324)) ($generated@@312 $generated@@323 $generated@@324))
 :pattern ( ($generated@@311 $generated@@323 $generated@@324))
))))
(assert (forall (($generated@@325 T@U) ($generated@@326 T@T) ) (! (let (($generated@@327 (type $generated@@325)))
 (not ($generated@@0 ($generated@@86 ($generated@@310 ($generated@@311 $generated@@327 $generated@@326)) $generated@@325))))
 :pattern ( (let (($generated@@327 (type $generated@@325)))
($generated@@86 ($generated@@310 ($generated@@311 $generated@@327 $generated@@326)) $generated@@325)))
)))
(assert  (and (and (and (and (forall (($generated@@333 T@T) ($generated@@334 T@T) ) (= ($generated@@1 ($generated@@330 $generated@@333 $generated@@334)) 19)) (forall (($generated@@335 T@T) ($generated@@336 T@T) ) (! (= ($generated@@331 ($generated@@330 $generated@@335 $generated@@336)) $generated@@335)
 :pattern ( ($generated@@330 $generated@@335 $generated@@336))
))) (forall (($generated@@337 T@T) ($generated@@338 T@T) ) (! (= ($generated@@332 ($generated@@330 $generated@@337 $generated@@338)) $generated@@338)
 :pattern ( ($generated@@330 $generated@@337 $generated@@338))
))) (forall (($generated@@339 T@U) ) (! (let (($generated@@340 ($generated@@331 (type $generated@@339))))
(= (type ($generated@@328 $generated@@339)) ($generated@@81 $generated@@340 $generated@@4)))
 :pattern ( ($generated@@328 $generated@@339))
))) (forall (($generated@@341 T@T) ($generated@@342 T@T) ) (! (= (type ($generated@@329 $generated@@341 $generated@@342)) ($generated@@330 $generated@@341 $generated@@342))
 :pattern ( ($generated@@329 $generated@@341 $generated@@342))
))))
(assert (forall (($generated@@343 T@U) ($generated@@344 T@T) ) (! (let (($generated@@345 (type $generated@@343)))
 (not ($generated@@0 ($generated@@86 ($generated@@328 ($generated@@329 $generated@@345 $generated@@344)) $generated@@343))))
 :pattern ( (let (($generated@@345 (type $generated@@343)))
($generated@@86 ($generated@@328 ($generated@@329 $generated@@345 $generated@@344)) $generated@@343)))
)))
(assert (forall (($generated@@346 T@U) ) (! (let (($generated@@347 ($generated@@84 (type $generated@@346))))
 (=> (= (type $generated@@346) ($generated@@81 $generated@@347 $generated@@2)) (= ($generated@@161 $generated@@346) (forall (($generated@@348 T@U) ) (!  (=> (= (type $generated@@348) $generated@@347) (and (<= 0 ($generated ($generated@@86 $generated@@346 $generated@@348))) (<= ($generated ($generated@@86 $generated@@346 $generated@@348)) ($generated@@304 $generated@@346))))
 :pattern ( ($generated@@86 $generated@@346 $generated@@348))
)))))
 :pattern ( ($generated@@161 $generated@@346))
)))
(assert (forall (($generated@@350 T@T) ($generated@@351 T@U) ) (! (= (type ($generated@@349 $generated@@350 $generated@@351)) $generated@@350)
 :pattern ( ($generated@@349 $generated@@350 $generated@@351))
)))
(assert (forall (($generated@@352 T@U) ) (!  (=> (and (= (type $generated@@352) $generated@@150) ($generated@@222 $generated@@352 $generated@@229)) (and (= ($generated@@288 ($generated@@349 $generated@@141 $generated@@352)) $generated@@352) ($generated@@137 ($generated@@349 $generated@@141 $generated@@352) $generated@@229)))
 :pattern ( ($generated@@222 $generated@@352 $generated@@229))
)))
(assert  (=> (<= 1 $generated@@293) (forall (($generated@@354 Int) ($generated@@355 Int) ($generated@@356 T@U) ) (!  (=> (and (= (type $generated@@356) $generated@@141) (or ($generated@@295 $generated@@354 $generated@@355 $generated@@356) (and (not (= 1 $generated@@293)) ($generated@@137 $generated@@356 $generated@@229)))) (and (and ($generated@@353 $generated@@356) (=> (=> ($generated@@236 $generated@@356 $generated@@156) (< $generated@@354 $generated@@355)) (and (and ($generated@@353 $generated@@356) (=> (not ($generated@@236 $generated@@356 $generated@@158)) ($generated@@353 $generated@@356))) (=> (=> (or ($generated@@236 $generated@@356 $generated@@158) ($generated@@236 $generated@@356 $generated@@156)) (and (= $generated@@354 ($generated@@249 100)) (= $generated@@355 ($generated@@249 1000)))) ($generated@@353 $generated@@356))))) (= ($generated@@294 $generated@@354 $generated@@355 $generated@@356)  (and (and (=> ($generated@@236 $generated@@356 $generated@@156) (< $generated@@354 $generated@@355)) (=> (or ($generated@@236 $generated@@356 $generated@@158) ($generated@@236 $generated@@356 $generated@@156)) (and (= $generated@@354 ($generated@@249 100)) (= $generated@@355 ($generated@@249 1000))))) (=> ($generated@@236 $generated@@356 $generated@@159) (or (<= ($generated@@249 0) $generated@@354) (<= ($generated@@249 0) $generated@@355)))))))
 :pattern ( ($generated@@294 $generated@@354 $generated@@355 $generated@@356))
))))
(assert  (=> (<= 1 $generated@@293) (forall (($generated@@357 Int) ($generated@@358 Int) ($generated@@359 T@U) ) (!  (=> (and (= (type $generated@@359) $generated@@141) (or ($generated@@300 $generated@@357 $generated@@358 $generated@@359) (and (not (= 1 $generated@@293)) ($generated@@137 $generated@@359 $generated@@229)))) (and (and ($generated@@353 $generated@@359) (=> (=> ($generated@@236 $generated@@359 $generated@@156) (< $generated@@357 $generated@@358)) (and (and ($generated@@353 $generated@@359) (=> (not ($generated@@236 $generated@@359 $generated@@158)) ($generated@@353 $generated@@359))) (=> (=> (or ($generated@@236 $generated@@359 $generated@@158) ($generated@@236 $generated@@359 $generated@@156)) (and (= $generated@@357 ($generated@@249 100)) (= $generated@@358 ($generated@@249 1000)))) ($generated@@353 $generated@@359))))) (= ($generated@@299 $generated@@357 $generated@@358 $generated@@359)  (and (and (=> ($generated@@236 $generated@@359 $generated@@156) (< $generated@@357 $generated@@358)) (=> (or ($generated@@236 $generated@@359 $generated@@158) ($generated@@236 $generated@@359 $generated@@156)) (and (= $generated@@357 ($generated@@249 100)) (= $generated@@358 ($generated@@249 1000))))) (=> ($generated@@236 $generated@@359 $generated@@159) (or (<= ($generated@@249 0) $generated@@357) (<= ($generated@@249 0) $generated@@358)))))))
 :pattern ( ($generated@@299 $generated@@357 $generated@@358 $generated@@359))
))))
(assert (forall (($generated@@360 T@U) ) (! (let (($generated@@361 ($generated@@314 (type $generated@@360))))
(let (($generated@@362 ($generated@@313 (type $generated@@360))))
 (=> (= (type $generated@@360) ($generated@@312 $generated@@362 $generated@@361)) (or (= $generated@@360 ($generated@@311 $generated@@362 $generated@@361)) (exists (($generated@@363 T@U) ) (!  (and (= (type $generated@@363) $generated@@362) ($generated@@0 ($generated@@86 ($generated@@310 $generated@@360) $generated@@363)))
 :no-pattern (type $generated@@363)
 :no-pattern ($generated $generated@@363)
 :no-pattern ($generated@@0 $generated@@363)
))))))
 :pattern ( ($generated@@310 $generated@@360))
)))
(assert (forall (($generated@@365 T@U) ) (! (let (($generated@@366 ($generated@@314 (type $generated@@365))))
(= (type ($generated@@364 $generated@@365)) ($generated@@81 $generated@@366 $generated@@4)))
 :pattern ( ($generated@@364 $generated@@365))
)))
(assert (forall (($generated@@367 T@U) ) (! (let (($generated@@368 ($generated@@314 (type $generated@@367))))
(let (($generated@@369 ($generated@@313 (type $generated@@367))))
 (=> (= (type $generated@@367) ($generated@@312 $generated@@369 $generated@@368)) (or (= $generated@@367 ($generated@@311 $generated@@369 $generated@@368)) (exists (($generated@@370 T@U) ) (!  (and (= (type $generated@@370) $generated@@368) ($generated@@0 ($generated@@86 ($generated@@364 $generated@@367) $generated@@370)))
 :no-pattern (type $generated@@370)
 :no-pattern ($generated $generated@@370)
 :no-pattern ($generated@@0 $generated@@370)
))))))
 :pattern ( ($generated@@364 $generated@@367))
)))
(assert (forall (($generated@@371 T@U) ) (! (let (($generated@@372 ($generated@@332 (type $generated@@371))))
(let (($generated@@373 ($generated@@331 (type $generated@@371))))
 (=> (= (type $generated@@371) ($generated@@330 $generated@@373 $generated@@372)) (or (= $generated@@371 ($generated@@329 $generated@@373 $generated@@372)) (exists (($generated@@374 T@U) ) (!  (and (= (type $generated@@374) $generated@@373) ($generated@@0 ($generated@@86 ($generated@@328 $generated@@371) $generated@@374)))
 :no-pattern (type $generated@@374)
 :no-pattern ($generated $generated@@374)
 :no-pattern ($generated@@0 $generated@@374)
))))))
 :pattern ( ($generated@@328 $generated@@371))
)))
(assert (forall (($generated@@376 T@U) ) (! (let (($generated@@377 ($generated@@332 (type $generated@@376))))
(= (type ($generated@@375 $generated@@376)) ($generated@@81 $generated@@377 $generated@@4)))
 :pattern ( ($generated@@375 $generated@@376))
)))
(assert (forall (($generated@@378 T@U) ) (! (let (($generated@@379 ($generated@@332 (type $generated@@378))))
(let (($generated@@380 ($generated@@331 (type $generated@@378))))
 (=> (= (type $generated@@378) ($generated@@330 $generated@@380 $generated@@379)) (or (= $generated@@378 ($generated@@329 $generated@@380 $generated@@379)) (exists (($generated@@381 T@U) ) (!  (and (= (type $generated@@381) $generated@@379) ($generated@@0 ($generated@@86 ($generated@@375 $generated@@378) $generated@@381)))
 :no-pattern (type $generated@@381)
 :no-pattern ($generated $generated@@381)
 :no-pattern ($generated@@0 $generated@@381)
))))))
 :pattern ( ($generated@@375 $generated@@378))
)))
(assert (forall (($generated@@382 T@U) ($generated@@383 T@U) ) (!  (=> (and (= (type $generated@@382) ($generated@@81 $generated@@150 $generated@@2)) (= (type $generated@@383) $generated@@69)) (= ($generated@@137 $generated@@382 ($generated@@160 $generated@@383)) (forall (($generated@@384 T@U) ) (!  (=> (and (= (type $generated@@384) $generated@@150) (< 0 ($generated ($generated@@86 $generated@@382 $generated@@384)))) ($generated@@222 $generated@@384 $generated@@383))
 :pattern ( ($generated@@86 $generated@@382 $generated@@384))
))))
 :pattern ( ($generated@@137 $generated@@382 ($generated@@160 $generated@@383)))
)))
(assert (forall (($generated@@385 T@U) ($generated@@386 T@U) ($generated@@387 T@U) ) (!  (=> (and (and (= (type $generated@@385) ($generated@@81 $generated@@150 $generated@@4)) (= (type $generated@@386) $generated@@69)) (= (type $generated@@387) ($generated@@81 $generated@@82 $generated@@83))) (= ($generated@@79 $generated@@385 ($generated@@239 $generated@@386) $generated@@387) (forall (($generated@@388 T@U) ) (!  (=> (and (= (type $generated@@388) $generated@@150) ($generated@@0 ($generated@@86 $generated@@385 $generated@@388))) ($generated@@264 $generated@@388 $generated@@386 $generated@@387))
 :pattern ( ($generated@@86 $generated@@385 $generated@@388))
))))
 :pattern ( ($generated@@79 $generated@@385 ($generated@@239 $generated@@386) $generated@@387))
)))
(assert (forall (($generated@@389 T@U) ($generated@@390 T@U) ($generated@@391 T@U) ) (!  (=> (and (and (= (type $generated@@389) ($generated@@81 $generated@@150 $generated@@4)) (= (type $generated@@390) $generated@@69)) (= (type $generated@@391) ($generated@@81 $generated@@82 $generated@@83))) (= ($generated@@79 $generated@@389 ($generated@@244 $generated@@390) $generated@@391) (forall (($generated@@392 T@U) ) (!  (=> (and (= (type $generated@@392) $generated@@150) ($generated@@0 ($generated@@86 $generated@@389 $generated@@392))) ($generated@@264 $generated@@392 $generated@@390 $generated@@391))
 :pattern ( ($generated@@86 $generated@@389 $generated@@392))
))))
 :pattern ( ($generated@@79 $generated@@389 ($generated@@244 $generated@@390) $generated@@391))
)))
(assert (forall (($generated@@393 T@U) ) (! (let (($generated@@394 (type $generated@@393)))
(= ($generated ($generated@@86 ($generated@@305 $generated@@394) $generated@@393)) 0))
 :pattern ( (let (($generated@@394 (type $generated@@393)))
($generated@@86 ($generated@@305 $generated@@394) $generated@@393)))
)))
(assert  (and (forall (($generated@@397 T@U) ) (! (= (type ($generated@@395 $generated@@397)) ($generated@@81 $generated@@150 $generated@@4))
 :pattern ( ($generated@@395 $generated@@397))
)) (forall (($generated@@398 T@U) ) (! (let (($generated@@399 ($generated@@314 (type $generated@@398))))
(let (($generated@@400 ($generated@@313 (type $generated@@398))))
(= (type ($generated@@396 $generated@@398)) ($generated@@81 $generated@@400 $generated@@399))))
 :pattern ( ($generated@@396 $generated@@398))
))))
(assert (forall (($generated@@401 T@U) ($generated@@402 T@U) ) (!  (=> (and (= (type $generated@@401) ($generated@@312 $generated@@150 $generated@@150)) (= (type $generated@@402) $generated@@150)) (= ($generated@@0 ($generated@@86 ($generated@@395 $generated@@401) $generated@@402))  (and ($generated@@0 ($generated@@86 ($generated@@310 $generated@@401) ($generated@@148 ($generated@@349 $generated@@141 $generated@@402)))) (= ($generated@@86 ($generated@@396 $generated@@401) ($generated@@148 ($generated@@349 $generated@@141 $generated@@402))) ($generated@@149 ($generated@@349 $generated@@141 $generated@@402))))))
 :pattern ( ($generated@@86 ($generated@@395 $generated@@401) $generated@@402))
)))
(assert  (and (forall (($generated@@405 T@U) ) (! (= (type ($generated@@403 $generated@@405)) ($generated@@81 $generated@@150 $generated@@4))
 :pattern ( ($generated@@403 $generated@@405))
)) (forall (($generated@@406 T@U) ) (! (let (($generated@@407 ($generated@@332 (type $generated@@406))))
(let (($generated@@408 ($generated@@331 (type $generated@@406))))
(= (type ($generated@@404 $generated@@406)) ($generated@@81 $generated@@408 $generated@@407))))
 :pattern ( ($generated@@404 $generated@@406))
))))
(assert (forall (($generated@@409 T@U) ($generated@@410 T@U) ) (!  (=> (and (= (type $generated@@409) ($generated@@330 $generated@@150 $generated@@150)) (= (type $generated@@410) $generated@@150)) (= ($generated@@0 ($generated@@86 ($generated@@403 $generated@@409) $generated@@410))  (and ($generated@@0 ($generated@@86 ($generated@@328 $generated@@409) ($generated@@148 ($generated@@349 $generated@@141 $generated@@410)))) (= ($generated@@86 ($generated@@404 $generated@@409) ($generated@@148 ($generated@@349 $generated@@141 $generated@@410))) ($generated@@149 ($generated@@349 $generated@@141 $generated@@410))))))
 :pattern ( ($generated@@86 ($generated@@403 $generated@@409) $generated@@410))
)))
(assert (forall (($generated@@411 T@U) ($generated@@412 T@U) ) (! (let (($generated@@413 (type $generated@@412)))
(let (($generated@@414 ($generated@@313 (type $generated@@411))))
 (=> (= (type $generated@@411) ($generated@@312 $generated@@414 $generated@@413)) (= ($generated@@0 ($generated@@86 ($generated@@364 $generated@@411) $generated@@412)) (exists (($generated@@415 T@U) ) (!  (and (= (type $generated@@415) $generated@@414) (and ($generated@@0 ($generated@@86 ($generated@@310 $generated@@411) $generated@@415)) (= $generated@@412 ($generated@@86 ($generated@@396 $generated@@411) $generated@@415))))
 :pattern ( ($generated@@86 ($generated@@310 $generated@@411) $generated@@415))
 :pattern ( ($generated@@86 ($generated@@396 $generated@@411) $generated@@415))
))))))
 :pattern ( ($generated@@86 ($generated@@364 $generated@@411) $generated@@412))
)))
(assert (forall (($generated@@416 T@U) ($generated@@417 T@U) ) (! (let (($generated@@418 (type $generated@@417)))
(let (($generated@@419 ($generated@@331 (type $generated@@416))))
 (=> (= (type $generated@@416) ($generated@@330 $generated@@419 $generated@@418)) (= ($generated@@0 ($generated@@86 ($generated@@375 $generated@@416) $generated@@417)) (exists (($generated@@420 T@U) ) (!  (and (= (type $generated@@420) $generated@@419) (and ($generated@@0 ($generated@@86 ($generated@@328 $generated@@416) $generated@@420)) (= $generated@@417 ($generated@@86 ($generated@@404 $generated@@416) $generated@@420))))
 :pattern ( ($generated@@86 ($generated@@328 $generated@@416) $generated@@420))
 :pattern ( ($generated@@86 ($generated@@404 $generated@@416) $generated@@420))
))))))
 :pattern ( ($generated@@86 ($generated@@375 $generated@@416) $generated@@417))
)))
(assert (forall (($generated@@422 T@U) ($generated@@423 T@U) ) (! (= (type ($generated@@421 $generated@@422 $generated@@423)) $generated@@69)
 :pattern ( ($generated@@421 $generated@@422 $generated@@423))
)))
(assert (forall (($generated@@424 T@U) ($generated@@425 T@U) ($generated@@426 T@U) ($generated@@427 T@U) ) (!  (=> (and (and (and (= (type $generated@@424) ($generated@@312 $generated@@150 $generated@@150)) (= (type $generated@@425) $generated@@69)) (= (type $generated@@426) $generated@@69)) (= (type $generated@@427) ($generated@@81 $generated@@82 $generated@@83))) (= ($generated@@79 $generated@@424 ($generated@@421 $generated@@425 $generated@@426) $generated@@427) (forall (($generated@@428 T@U) ) (!  (=> (and (= (type $generated@@428) $generated@@150) ($generated@@0 ($generated@@86 ($generated@@310 $generated@@424) $generated@@428))) (and ($generated@@264 ($generated@@86 ($generated@@396 $generated@@424) $generated@@428) $generated@@426 $generated@@427) ($generated@@264 $generated@@428 $generated@@425 $generated@@427)))
 :pattern ( ($generated@@86 ($generated@@396 $generated@@424) $generated@@428))
 :pattern ( ($generated@@86 ($generated@@310 $generated@@424) $generated@@428))
))))
 :pattern ( ($generated@@79 $generated@@424 ($generated@@421 $generated@@425 $generated@@426) $generated@@427))
)))
(assert (forall (($generated@@430 T@U) ($generated@@431 T@U) ) (! (= (type ($generated@@429 $generated@@430 $generated@@431)) $generated@@69)
 :pattern ( ($generated@@429 $generated@@430 $generated@@431))
)))
(assert (forall (($generated@@432 T@U) ($generated@@433 T@U) ($generated@@434 T@U) ($generated@@435 T@U) ) (!  (=> (and (and (and (= (type $generated@@432) ($generated@@330 $generated@@150 $generated@@150)) (= (type $generated@@433) $generated@@69)) (= (type $generated@@434) $generated@@69)) (= (type $generated@@435) ($generated@@81 $generated@@82 $generated@@83))) (= ($generated@@79 $generated@@432 ($generated@@429 $generated@@433 $generated@@434) $generated@@435) (forall (($generated@@436 T@U) ) (!  (=> (and (= (type $generated@@436) $generated@@150) ($generated@@0 ($generated@@86 ($generated@@328 $generated@@432) $generated@@436))) (and ($generated@@264 ($generated@@86 ($generated@@404 $generated@@432) $generated@@436) $generated@@434 $generated@@435) ($generated@@264 $generated@@436 $generated@@433 $generated@@435)))
 :pattern ( ($generated@@86 ($generated@@404 $generated@@432) $generated@@436))
 :pattern ( ($generated@@86 ($generated@@328 $generated@@432) $generated@@436))
))))
 :pattern ( ($generated@@79 $generated@@432 ($generated@@429 $generated@@433 $generated@@434) $generated@@435))
)))
(assert (forall (($generated@@438 T@T) ) (! (= (type ($generated@@437 $generated@@438)) ($generated@@81 $generated@@438 $generated@@4))
 :pattern ( ($generated@@437 $generated@@438))
)))
(assert (forall (($generated@@439 T@U) ) (! (let (($generated@@440 ($generated@@332 (type $generated@@439))))
(let (($generated@@441 ($generated@@331 (type $generated@@439))))
 (=> (= (type $generated@@439) ($generated@@330 $generated@@441 $generated@@440)) (= (= $generated@@439 ($generated@@329 $generated@@441 $generated@@440)) (= ($generated@@328 $generated@@439) ($generated@@437 $generated@@441))))))
 :pattern ( ($generated@@328 $generated@@439))
)))
(assert (forall (($generated@@442 T@U) ) (! (let (($generated@@443 ($generated@@332 (type $generated@@442))))
(let (($generated@@444 ($generated@@331 (type $generated@@442))))
 (=> (= (type $generated@@442) ($generated@@330 $generated@@444 $generated@@443)) (= (= $generated@@442 ($generated@@329 $generated@@444 $generated@@443)) (= ($generated@@375 $generated@@442) ($generated@@437 $generated@@443))))))
 :pattern ( ($generated@@375 $generated@@442))
)))
(assert (forall (($generated@@445 T@U) ) (! (let (($generated@@446 ($generated@@332 (type $generated@@445))))
(let (($generated@@447 ($generated@@331 (type $generated@@445))))
 (=> (= (type $generated@@445) ($generated@@330 $generated@@447 $generated@@446)) (= (= $generated@@445 ($generated@@329 $generated@@447 $generated@@446)) (= ($generated@@403 $generated@@445) ($generated@@437 $generated@@150))))))
 :pattern ( ($generated@@403 $generated@@445))
)))
(assert (forall (($generated@@448 T@U) ) (! (let (($generated@@449 ($generated@@314 (type $generated@@448))))
(let (($generated@@450 ($generated@@313 (type $generated@@448))))
 (=> (= (type $generated@@448) ($generated@@312 $generated@@450 $generated@@449)) (or (= $generated@@448 ($generated@@311 $generated@@450 $generated@@449)) (exists (($generated@@451 T@U) ($generated@@452 T@U) ) (!  (and (and (= (type $generated@@451) $generated@@150) (= (type $generated@@452) $generated@@150)) ($generated@@0 ($generated@@86 ($generated@@395 $generated@@448) ($generated@@288 ($generated@@221 $generated@@451 $generated@@452)))))
 :no-pattern (type $generated@@451)
 :no-pattern (type $generated@@452)
 :no-pattern ($generated $generated@@451)
 :no-pattern ($generated@@0 $generated@@451)
 :no-pattern ($generated $generated@@452)
 :no-pattern ($generated@@0 $generated@@452)
))))))
 :pattern ( ($generated@@395 $generated@@448))
)))
(assert (forall (($generated@@453 T@U) ) (! (let (($generated@@454 ($generated@@332 (type $generated@@453))))
(let (($generated@@455 ($generated@@331 (type $generated@@453))))
 (=> (= (type $generated@@453) ($generated@@330 $generated@@455 $generated@@454)) (or (= $generated@@453 ($generated@@329 $generated@@455 $generated@@454)) (exists (($generated@@456 T@U) ($generated@@457 T@U) ) (!  (and (and (= (type $generated@@456) $generated@@150) (= (type $generated@@457) $generated@@150)) ($generated@@0 ($generated@@86 ($generated@@403 $generated@@453) ($generated@@288 ($generated@@221 $generated@@456 $generated@@457)))))
 :no-pattern (type $generated@@456)
 :no-pattern (type $generated@@457)
 :no-pattern ($generated $generated@@456)
 :no-pattern ($generated@@0 $generated@@456)
 :no-pattern ($generated $generated@@457)
 :no-pattern ($generated@@0 $generated@@457)
))))))
 :pattern ( ($generated@@403 $generated@@453))
)))
(assert (forall (($generated@@458 T@U) ) (!  (=> (and (= (type $generated@@458) $generated@@150) ($generated@@222 $generated@@458 $generated@@46)) (and (= ($generated@@288 ($generated@@349 $generated@@2 $generated@@458)) $generated@@458) ($generated@@137 ($generated@@349 $generated@@2 $generated@@458) $generated@@46)))
 :pattern ( ($generated@@222 $generated@@458 $generated@@46))
)))
(assert (forall (($generated@@459 T@U) ) (!  (=> (and (= (type $generated@@459) $generated@@150) ($generated@@222 $generated@@459 $generated@@47)) (and (= ($generated@@288 ($generated@@349 $generated@@3 $generated@@459)) $generated@@459) ($generated@@137 ($generated@@349 $generated@@3 $generated@@459) $generated@@47)))
 :pattern ( ($generated@@222 $generated@@459 $generated@@47))
)))
(assert (forall (($generated@@460 T@U) ) (!  (=> (and (= (type $generated@@460) $generated@@150) ($generated@@222 $generated@@460 $generated@@44)) (and (= ($generated@@288 ($generated@@349 $generated@@4 $generated@@460)) $generated@@460) ($generated@@137 ($generated@@349 $generated@@4 $generated@@460) $generated@@44)))
 :pattern ( ($generated@@222 $generated@@460 $generated@@44))
)))
(assert (= ($generated@@1 $generated@@461) 20))
(assert (forall (($generated@@462 T@U) ) (!  (=> (and (= (type $generated@@462) $generated@@150) ($generated@@222 $generated@@462 $generated@@45)) (and (= ($generated@@288 ($generated@@349 $generated@@461 $generated@@462)) $generated@@462) ($generated@@137 ($generated@@349 $generated@@461 $generated@@462) $generated@@45)))
 :pattern ( ($generated@@222 $generated@@462 $generated@@45))
)))
(assert (forall (($generated@@463 T@U) ($generated@@464 T@U) ) (!  (=> (= (type $generated@@464) $generated@@69) (= ($generated@@222 ($generated@@288 $generated@@463) $generated@@464) ($generated@@137 $generated@@463 $generated@@464)))
 :pattern ( ($generated@@222 ($generated@@288 $generated@@463) $generated@@464))
)))
(assert (forall (($generated@@465 T@U) ) (! (let (($generated@@466 ($generated@@84 (type $generated@@465))))
 (=> (= (type $generated@@465) ($generated@@81 $generated@@466 $generated@@2)) (<= 0 ($generated@@304 $generated@@465))))
 :pattern ( ($generated@@304 $generated@@465))
)))
(assert (forall (($generated@@467 T@U) ) (! (let (($generated@@468 ($generated@@280 (type $generated@@467))))
 (=> (= (type $generated@@467) ($generated@@279 $generated@@468)) (<= 0 ($generated@@278 $generated@@467))))
 :pattern ( ($generated@@278 $generated@@467))
)))
(assert (forall (($generated@@470 T@U) ) (! (= (type ($generated@@469 $generated@@470)) $generated@@69)
 :pattern ( ($generated@@469 $generated@@470))
)))
(assert (forall (($generated@@471 T@U) ($generated@@472 T@U) ) (!  (=> (and (= (type $generated@@471) $generated@@69) (= (type $generated@@472) $generated@@69)) (= ($generated@@469 ($generated@@421 $generated@@471 $generated@@472)) $generated@@471))
 :pattern ( ($generated@@421 $generated@@471 $generated@@472))
)))
(assert (forall (($generated@@474 T@U) ) (! (= (type ($generated@@473 $generated@@474)) $generated@@69)
 :pattern ( ($generated@@473 $generated@@474))
)))
(assert (forall (($generated@@475 T@U) ($generated@@476 T@U) ) (!  (=> (and (= (type $generated@@475) $generated@@69) (= (type $generated@@476) $generated@@69)) (= ($generated@@473 ($generated@@421 $generated@@475 $generated@@476)) $generated@@476))
 :pattern ( ($generated@@421 $generated@@475 $generated@@476))
)))
(assert (forall (($generated@@477 T@U) ($generated@@478 T@U) ) (!  (=> (and (= (type $generated@@477) $generated@@69) (= (type $generated@@478) $generated@@69)) (= ($generated@@77 ($generated@@421 $generated@@477 $generated@@478)) $generated@@58))
 :pattern ( ($generated@@421 $generated@@477 $generated@@478))
)))
(assert (forall (($generated@@480 T@U) ) (! (= (type ($generated@@479 $generated@@480)) $generated@@69)
 :pattern ( ($generated@@479 $generated@@480))
)))
(assert (forall (($generated@@481 T@U) ($generated@@482 T@U) ) (!  (=> (and (= (type $generated@@481) $generated@@69) (= (type $generated@@482) $generated@@69)) (= ($generated@@479 ($generated@@429 $generated@@481 $generated@@482)) $generated@@481))
 :pattern ( ($generated@@429 $generated@@481 $generated@@482))
)))
(assert (forall (($generated@@484 T@U) ) (! (= (type ($generated@@483 $generated@@484)) $generated@@69)
 :pattern ( ($generated@@483 $generated@@484))
)))
(assert (forall (($generated@@485 T@U) ($generated@@486 T@U) ) (!  (=> (and (= (type $generated@@485) $generated@@69) (= (type $generated@@486) $generated@@69)) (= ($generated@@483 ($generated@@429 $generated@@485 $generated@@486)) $generated@@486))
 :pattern ( ($generated@@429 $generated@@485 $generated@@486))
)))
(assert (forall (($generated@@487 T@U) ($generated@@488 T@U) ) (!  (=> (and (= (type $generated@@487) $generated@@69) (= (type $generated@@488) $generated@@69)) (= ($generated@@77 ($generated@@429 $generated@@487 $generated@@488)) $generated@@59))
 :pattern ( ($generated@@429 $generated@@487 $generated@@488))
)))
(assert (forall (($generated@@489 T@U) ($generated@@490 T@U) ) (!  (=> (and (= (type $generated@@489) $generated@@150) (= (type $generated@@490) $generated@@150)) (= ($generated@@155 ($generated@@221 $generated@@489 $generated@@490)) $generated@@61))
 :pattern ( ($generated@@221 $generated@@489 $generated@@490))
)))
(assert (forall (($generated@@492 T@U) ) (! (= (type ($generated@@491 $generated@@492)) $generated@@69)
 :pattern ( ($generated@@491 $generated@@492))
)))
(assert (forall (($generated@@493 T@U) ($generated@@494 T@U) ) (!  (=> (and (= (type $generated@@493) $generated@@69) (= (type $generated@@494) $generated@@69)) (= ($generated@@491 ($generated@@140 $generated@@493 $generated@@494)) $generated@@493))
 :pattern ( ($generated@@140 $generated@@493 $generated@@494))
)))
(assert (forall (($generated@@496 T@U) ) (! (= (type ($generated@@495 $generated@@496)) $generated@@69)
 :pattern ( ($generated@@495 $generated@@496))
)))
(assert (forall (($generated@@497 T@U) ($generated@@498 T@U) ) (!  (=> (and (= (type $generated@@497) $generated@@69) (= (type $generated@@498) $generated@@69)) (= ($generated@@495 ($generated@@140 $generated@@497 $generated@@498)) $generated@@498))
 :pattern ( ($generated@@140 $generated@@497 $generated@@498))
)))
(assert (forall (($generated@@499 T@U) ($generated@@500 T@U) ) (!  (=> (and (= (type $generated@@499) $generated@@150) (= (type $generated@@500) $generated@@150)) (= ($generated@@148 ($generated@@221 $generated@@499 $generated@@500)) $generated@@499))
 :pattern ( ($generated@@221 $generated@@499 $generated@@500))
)))
(assert (forall (($generated@@501 T@U) ($generated@@502 T@U) ) (!  (=> (and (= (type $generated@@501) $generated@@150) (= (type $generated@@502) $generated@@150)) (= ($generated@@149 ($generated@@221 $generated@@501 $generated@@502)) $generated@@502))
 :pattern ( ($generated@@221 $generated@@501 $generated@@502))
)))
(assert  (and (forall (($generated@@505 T@U) ) (! (= (type ($generated@@503 $generated@@505)) $generated@@69)
 :pattern ( ($generated@@503 $generated@@505))
)) (forall (($generated@@506 T@U) ($generated@@507 Int) ) (! (let (($generated@@508 ($generated@@280 (type $generated@@506))))
(= (type ($generated@@504 $generated@@506 $generated@@507)) $generated@@508))
 :pattern ( ($generated@@504 $generated@@506 $generated@@507))
))))
(assert (forall (($generated@@509 T@U) ($generated@@510 T@U) ($generated@@511 T@U) ) (!  (=> (and (and (= (type $generated@@509) ($generated@@279 $generated@@150)) (= (type $generated@@510) $generated@@69)) (= (type $generated@@511) ($generated@@81 $generated@@82 $generated@@83))) (= ($generated@@79 $generated@@509 ($generated@@503 $generated@@510) $generated@@511) (forall (($generated@@512 Int) ) (!  (=> (and (<= 0 $generated@@512) (< $generated@@512 ($generated@@278 $generated@@509))) ($generated@@264 ($generated@@504 $generated@@509 $generated@@512) $generated@@510 $generated@@511))
 :pattern ( ($generated@@504 $generated@@509 $generated@@512))
))))
 :pattern ( ($generated@@79 $generated@@509 ($generated@@503 $generated@@510) $generated@@511))
)))
(assert (forall (($generated@@514 Int) ) (! (= ($generated@@513 ($generated@@80 $generated@@514)) $generated@@514)
 :pattern ( ($generated@@80 $generated@@514))
)))
(assert (forall (($generated@@516 T@U) ) (! (= (type ($generated@@515 $generated@@516)) $generated@@69)
 :pattern ( ($generated@@515 $generated@@516))
)))
(assert (forall (($generated@@517 T@U) ) (!  (=> (= (type $generated@@517) $generated@@69) (= ($generated@@515 ($generated@@239 $generated@@517)) $generated@@517))
 :pattern ( ($generated@@239 $generated@@517))
)))
(assert (forall (($generated@@518 T@U) ) (!  (=> (= (type $generated@@518) $generated@@69) (= ($generated@@77 ($generated@@239 $generated@@518)) $generated@@54))
 :pattern ( ($generated@@239 $generated@@518))
)))
(assert (forall (($generated@@520 T@U) ) (! (= (type ($generated@@519 $generated@@520)) $generated@@69)
 :pattern ( ($generated@@519 $generated@@520))
)))
(assert (forall (($generated@@521 T@U) ) (!  (=> (= (type $generated@@521) $generated@@69) (= ($generated@@519 ($generated@@244 $generated@@521)) $generated@@521))
 :pattern ( ($generated@@244 $generated@@521))
)))
(assert (forall (($generated@@522 T@U) ) (!  (=> (= (type $generated@@522) $generated@@69) (= ($generated@@77 ($generated@@244 $generated@@522)) $generated@@55))
 :pattern ( ($generated@@244 $generated@@522))
)))
(assert (forall (($generated@@524 T@U) ) (! (= (type ($generated@@523 $generated@@524)) $generated@@69)
 :pattern ( ($generated@@523 $generated@@524))
)))
(assert (forall (($generated@@525 T@U) ) (!  (=> (= (type $generated@@525) $generated@@69) (= ($generated@@523 ($generated@@160 $generated@@525)) $generated@@525))
 :pattern ( ($generated@@160 $generated@@525))
)))
(assert (forall (($generated@@526 T@U) ) (!  (=> (= (type $generated@@526) $generated@@69) (= ($generated@@77 ($generated@@160 $generated@@526)) $generated@@56))
 :pattern ( ($generated@@160 $generated@@526))
)))
(assert (forall (($generated@@528 T@U) ) (! (= (type ($generated@@527 $generated@@528)) $generated@@69)
 :pattern ( ($generated@@527 $generated@@528))
)))
(assert (forall (($generated@@529 T@U) ) (!  (=> (= (type $generated@@529) $generated@@69) (= ($generated@@527 ($generated@@503 $generated@@529)) $generated@@529))
 :pattern ( ($generated@@503 $generated@@529))
)))
(assert (forall (($generated@@530 T@U) ) (!  (=> (= (type $generated@@530) $generated@@69) (= ($generated@@77 ($generated@@503 $generated@@530)) $generated@@57))
 :pattern ( ($generated@@503 $generated@@530))
)))
(assert (forall (($generated@@531 T@U) ) (! (let (($generated@@532 (type $generated@@531)))
(= ($generated@@349 $generated@@532 ($generated@@288 $generated@@531)) $generated@@531))
 :pattern ( ($generated@@288 $generated@@531))
)))
(assert (forall (($generated@@533 T@U) ($generated@@534 T@U) ($generated@@535 T@U) ) (!  (=> (and (and (= (type $generated@@533) ($generated@@312 $generated@@150 $generated@@150)) (= (type $generated@@534) $generated@@69)) (= (type $generated@@535) $generated@@69)) (= ($generated@@137 $generated@@533 ($generated@@421 $generated@@534 $generated@@535)) (forall (($generated@@536 T@U) ) (!  (=> (and (= (type $generated@@536) $generated@@150) ($generated@@0 ($generated@@86 ($generated@@310 $generated@@533) $generated@@536))) (and ($generated@@222 ($generated@@86 ($generated@@396 $generated@@533) $generated@@536) $generated@@535) ($generated@@222 $generated@@536 $generated@@534)))
 :pattern ( ($generated@@86 ($generated@@396 $generated@@533) $generated@@536))
 :pattern ( ($generated@@86 ($generated@@310 $generated@@533) $generated@@536))
))))
 :pattern ( ($generated@@137 $generated@@533 ($generated@@421 $generated@@534 $generated@@535)))
)))
(assert (forall (($generated@@537 T@U) ($generated@@538 T@U) ($generated@@539 T@U) ) (!  (=> (and (and (= (type $generated@@537) ($generated@@330 $generated@@150 $generated@@150)) (= (type $generated@@538) $generated@@69)) (= (type $generated@@539) $generated@@69)) (= ($generated@@137 $generated@@537 ($generated@@429 $generated@@538 $generated@@539)) (forall (($generated@@540 T@U) ) (!  (=> (and (= (type $generated@@540) $generated@@150) ($generated@@0 ($generated@@86 ($generated@@328 $generated@@537) $generated@@540))) (and ($generated@@222 ($generated@@86 ($generated@@404 $generated@@537) $generated@@540) $generated@@539) ($generated@@222 $generated@@540 $generated@@538)))
 :pattern ( ($generated@@86 ($generated@@404 $generated@@537) $generated@@540))
 :pattern ( ($generated@@86 ($generated@@328 $generated@@537) $generated@@540))
))))
 :pattern ( ($generated@@137 $generated@@537 ($generated@@429 $generated@@538 $generated@@539)))
)))
(assert (forall (($generated@@541 T@U) ) (!  (=> (and (= (type $generated@@541) $generated@@141) ($generated@@353 $generated@@541)) (or (or ($generated@@255 $generated@@541) ($generated@@258 $generated@@541)) ($generated@@261 $generated@@541)))
 :pattern ( ($generated@@353 $generated@@541))
)))
(assert (forall (($generated@@544 T@U) ($generated@@545 T@U) ) (!  (=> (and (= (type $generated@@544) $generated@@150) (= (type $generated@@545) $generated@@150)) (< ($generated@@542 $generated@@544) ($generated@@543 ($generated@@221 $generated@@544 $generated@@545))))
 :pattern ( ($generated@@221 $generated@@544 $generated@@545))
)))
(assert (forall (($generated@@546 T@U) ($generated@@547 T@U) ) (!  (=> (and (= (type $generated@@546) $generated@@150) (= (type $generated@@547) $generated@@150)) (< ($generated@@542 $generated@@547) ($generated@@543 ($generated@@221 $generated@@546 $generated@@547))))
 :pattern ( ($generated@@221 $generated@@546 $generated@@547))
)))
(assert (forall (($generated@@548 T@U) ($generated@@549 T@U) ($generated@@550 T@U) ) (!  (=> (and (and (and (= (type $generated@@548) $generated@@150) (= (type $generated@@549) $generated@@69)) (= (type $generated@@550) $generated@@69)) ($generated@@222 $generated@@548 ($generated@@421 $generated@@549 $generated@@550))) (and (= ($generated@@288 ($generated@@349 ($generated@@312 $generated@@150 $generated@@150) $generated@@548)) $generated@@548) ($generated@@137 ($generated@@349 ($generated@@312 $generated@@150 $generated@@150) $generated@@548) ($generated@@421 $generated@@549 $generated@@550))))
 :pattern ( ($generated@@222 $generated@@548 ($generated@@421 $generated@@549 $generated@@550)))
)))
(assert (forall (($generated@@551 T@U) ($generated@@552 T@U) ($generated@@553 T@U) ) (!  (=> (and (and (and (= (type $generated@@551) $generated@@150) (= (type $generated@@552) $generated@@69)) (= (type $generated@@553) $generated@@69)) ($generated@@222 $generated@@551 ($generated@@429 $generated@@552 $generated@@553))) (and (= ($generated@@288 ($generated@@349 ($generated@@330 $generated@@150 $generated@@150) $generated@@551)) $generated@@551) ($generated@@137 ($generated@@349 ($generated@@330 $generated@@150 $generated@@150) $generated@@551) ($generated@@429 $generated@@552 $generated@@553))))
 :pattern ( ($generated@@222 $generated@@551 ($generated@@429 $generated@@552 $generated@@553)))
)))
(assert (forall (($generated@@554 T@U) ($generated@@555 T@U) ($generated@@556 T@U) ) (!  (=> (and (and (and (= (type $generated@@554) $generated@@69) (= (type $generated@@555) $generated@@69)) (= (type $generated@@556) $generated@@150)) ($generated@@222 $generated@@556 ($generated@@140 $generated@@554 $generated@@555))) (and (= ($generated@@288 ($generated@@349 $generated@@141 $generated@@556)) $generated@@556) ($generated@@137 ($generated@@349 $generated@@141 $generated@@556) ($generated@@140 $generated@@554 $generated@@555))))
 :pattern ( ($generated@@222 $generated@@556 ($generated@@140 $generated@@554 $generated@@555)))
)))
(assert (forall (($generated@@557 T@U) ) (! (let (($generated@@558 (type $generated@@557)))
 (not ($generated@@0 ($generated@@86 ($generated@@437 $generated@@558) $generated@@557))))
 :pattern ( (let (($generated@@558 (type $generated@@557)))
($generated@@86 ($generated@@437 $generated@@558) $generated@@557)))
)))
(assert (forall (($generated@@560 T@U) ) (! (= (type ($generated@@559 $generated@@560)) $generated@@74)
 :pattern ( ($generated@@559 $generated@@560))
)))
(assert (forall (($generated@@561 T@U) ($generated@@562 T@U) ) (!  (=> (and (= (type $generated@@561) $generated@@69) (= (type $generated@@562) $generated@@69)) (and (= ($generated@@77 ($generated@@140 $generated@@561 $generated@@562)) $generated@@62) (= ($generated@@559 ($generated@@140 $generated@@561 $generated@@562)) $generated@@67)))
 :pattern ( ($generated@@140 $generated@@561 $generated@@562))
)))
(assert (forall (($generated@@563 T@U) ) (!  (=> (and (= (type $generated@@563) $generated@@141) ($generated@@137 $generated@@563 $generated@@229)) (or (or ($generated@@255 $generated@@563) ($generated@@258 $generated@@563)) ($generated@@261 $generated@@563)))
 :pattern ( ($generated@@261 $generated@@563) ($generated@@137 $generated@@563 $generated@@229))
 :pattern ( ($generated@@258 $generated@@563) ($generated@@137 $generated@@563 $generated@@229))
 :pattern ( ($generated@@255 $generated@@563) ($generated@@137 $generated@@563 $generated@@229))
)))
(assert (forall (($generated@@564 T@U) ) (!  (=> (= (type $generated@@564) $generated@@141) (= ($generated@@542 ($generated@@288 $generated@@564)) ($generated@@543 $generated@@564)))
 :pattern ( ($generated@@542 ($generated@@288 $generated@@564)))
)))
(assert (forall (($generated@@565 T@U) ) (!  (=> (and (= (type $generated@@565) $generated@@150) ($generated@@222 $generated@@565 ($generated@@80 0))) (and (= ($generated@@288 ($generated@@349 $generated@@2 $generated@@565)) $generated@@565) ($generated@@137 ($generated@@349 ($generated@@81 $generated@@150 $generated@@4) $generated@@565) ($generated@@80 0))))
 :pattern ( ($generated@@222 $generated@@565 ($generated@@80 0)))
)))
(assert (forall (($generated@@566 T@U) ($generated@@567 T@U) ) (!  (=> (and (and (= (type $generated@@566) $generated@@150) (= (type $generated@@567) $generated@@69)) ($generated@@222 $generated@@566 ($generated@@239 $generated@@567))) (and (= ($generated@@288 ($generated@@349 ($generated@@81 $generated@@150 $generated@@4) $generated@@566)) $generated@@566) ($generated@@137 ($generated@@349 ($generated@@81 $generated@@150 $generated@@4) $generated@@566) ($generated@@239 $generated@@567))))
 :pattern ( ($generated@@222 $generated@@566 ($generated@@239 $generated@@567)))
)))
(assert (forall (($generated@@568 T@U) ($generated@@569 T@U) ) (!  (=> (and (and (= (type $generated@@568) $generated@@150) (= (type $generated@@569) $generated@@69)) ($generated@@222 $generated@@568 ($generated@@244 $generated@@569))) (and (= ($generated@@288 ($generated@@349 ($generated@@81 $generated@@150 $generated@@4) $generated@@568)) $generated@@568) ($generated@@137 ($generated@@349 ($generated@@81 $generated@@150 $generated@@4) $generated@@568) ($generated@@244 $generated@@569))))
 :pattern ( ($generated@@222 $generated@@568 ($generated@@244 $generated@@569)))
)))
(assert (forall (($generated@@570 T@U) ($generated@@571 T@U) ) (!  (=> (and (and (= (type $generated@@570) $generated@@150) (= (type $generated@@571) $generated@@69)) ($generated@@222 $generated@@570 ($generated@@160 $generated@@571))) (and (= ($generated@@288 ($generated@@349 ($generated@@81 $generated@@150 $generated@@2) $generated@@570)) $generated@@570) ($generated@@137 ($generated@@349 ($generated@@81 $generated@@150 $generated@@2) $generated@@570) ($generated@@160 $generated@@571))))
 :pattern ( ($generated@@222 $generated@@570 ($generated@@160 $generated@@571)))
)))
(assert (forall (($generated@@572 T@U) ($generated@@573 T@U) ) (!  (=> (and (and (= (type $generated@@572) $generated@@150) (= (type $generated@@573) $generated@@69)) ($generated@@222 $generated@@572 ($generated@@503 $generated@@573))) (and (= ($generated@@288 ($generated@@349 ($generated@@279 $generated@@150) $generated@@572)) $generated@@572) ($generated@@137 ($generated@@349 ($generated@@279 $generated@@150) $generated@@572) ($generated@@503 $generated@@573))))
 :pattern ( ($generated@@222 $generated@@572 ($generated@@503 $generated@@573)))
)))
(assert (= ($generated@@77 $generated@@229) $generated@@64))
(assert (= ($generated@@559 $generated@@229) $generated@@68))
(assert (forall (($generated@@574 T@U) ($generated@@575 T@U) ($generated@@576 T@U) ) (!  (=> (and (and (= (type $generated@@574) ($generated@@81 $generated@@150 $generated@@2)) (= (type $generated@@575) $generated@@69)) (= (type $generated@@576) ($generated@@81 $generated@@82 $generated@@83))) (= ($generated@@79 $generated@@574 ($generated@@160 $generated@@575) $generated@@576) (forall (($generated@@577 T@U) ) (!  (=> (and (= (type $generated@@577) $generated@@150) (< 0 ($generated ($generated@@86 $generated@@574 $generated@@577)))) ($generated@@264 $generated@@577 $generated@@575 $generated@@576))
 :pattern ( ($generated@@86 $generated@@574 $generated@@577))
))))
 :pattern ( ($generated@@79 $generated@@574 ($generated@@160 $generated@@575) $generated@@576))
)))
(assert (= $generated@@156 ($generated@@251 $generated@@156)))
(assert (= $generated@@158 ($generated@@251 $generated@@158)))
(assert (= $generated@@159 ($generated@@251 $generated@@159)))
(assert (forall (($generated@@578 T@U) ($generated@@579 T@U) ($generated@@580 T@U) ) (!  (=> (and (and (and (= (type $generated@@578) $generated@@141) (= (type $generated@@579) $generated@@69)) (= (type $generated@@580) ($generated@@81 $generated@@82 $generated@@83))) (and ($generated@@230 $generated@@580) (and ($generated@@139 $generated@@578) (exists (($generated@@581 T@U) ) (!  (and (= (type $generated@@581) $generated@@69) ($generated@@79 $generated@@578 ($generated@@140 $generated@@579 $generated@@581) $generated@@580))
 :pattern ( ($generated@@79 $generated@@578 ($generated@@140 $generated@@579 $generated@@581) $generated@@580))
))))) ($generated@@264 ($generated@@148 $generated@@578) $generated@@579 $generated@@580))
 :pattern ( ($generated@@264 ($generated@@148 $generated@@578) $generated@@579 $generated@@580))
)))
(assert (forall (($generated@@582 T@U) ($generated@@583 T@U) ($generated@@584 T@U) ) (!  (=> (and (and (and (= (type $generated@@582) $generated@@141) (= (type $generated@@583) $generated@@69)) (= (type $generated@@584) ($generated@@81 $generated@@82 $generated@@83))) (and ($generated@@230 $generated@@584) (and ($generated@@139 $generated@@582) (exists (($generated@@585 T@U) ) (!  (and (= (type $generated@@585) $generated@@69) ($generated@@79 $generated@@582 ($generated@@140 $generated@@585 $generated@@583) $generated@@584))
 :pattern ( ($generated@@79 $generated@@582 ($generated@@140 $generated@@585 $generated@@583) $generated@@584))
))))) ($generated@@264 ($generated@@149 $generated@@582) $generated@@583 $generated@@584))
 :pattern ( ($generated@@264 ($generated@@149 $generated@@582) $generated@@583 $generated@@584))
)))
(assert (forall (($generated@@586 T@U) ($generated@@587 T@U) ) (!  (=> (and (= (type $generated@@586) $generated@@150) (= (type $generated@@587) $generated@@150)) (= ($generated@@221 ($generated@@251 $generated@@586) ($generated@@251 $generated@@587)) ($generated@@251 ($generated@@221 $generated@@586 $generated@@587))))
 :pattern ( ($generated@@221 ($generated@@251 $generated@@586) ($generated@@251 $generated@@587)))
)))
(assert  (=> (<= 1 $generated@@293) (forall (($generated@@588 Int) ($generated@@589 Int) ($generated@@590 T@U) ) (!  (=> (and (= (type $generated@@590) $generated@@141) (or ($generated@@295 ($generated@@249 $generated@@588) ($generated@@249 $generated@@589) ($generated@@251 $generated@@590)) (and (not (= 1 $generated@@293)) ($generated@@137 $generated@@590 $generated@@229)))) (and (and ($generated@@353 ($generated@@251 $generated@@590)) (=> (=> ($generated@@236 $generated@@590 $generated@@156) (< $generated@@588 $generated@@589)) (and (and ($generated@@353 ($generated@@251 $generated@@590)) (=> (not ($generated@@236 $generated@@590 $generated@@158)) ($generated@@353 ($generated@@251 $generated@@590)))) (=> (=> (or ($generated@@236 $generated@@590 $generated@@158) ($generated@@236 $generated@@590 $generated@@156)) (and (= ($generated@@249 $generated@@588) ($generated@@249 100)) (= ($generated@@249 $generated@@589) ($generated@@249 1000)))) ($generated@@353 ($generated@@251 $generated@@590)))))) (= ($generated@@294 ($generated@@249 $generated@@588) ($generated@@249 $generated@@589) ($generated@@251 $generated@@590))  (and (and (=> ($generated@@236 $generated@@590 $generated@@156) (< $generated@@588 $generated@@589)) (=> (or ($generated@@236 $generated@@590 $generated@@158) ($generated@@236 $generated@@590 $generated@@156)) (and (= ($generated@@249 $generated@@588) ($generated@@249 100)) (= ($generated@@249 $generated@@589) ($generated@@249 1000))))) (=> ($generated@@236 $generated@@590 $generated@@159) (or (<= ($generated@@249 0) ($generated@@249 $generated@@588)) (<= ($generated@@249 0) ($generated@@249 $generated@@589))))))))
 :weight 3
 :pattern ( ($generated@@294 ($generated@@249 $generated@@588) ($generated@@249 $generated@@589) ($generated@@251 $generated@@590)))
))))
(assert  (=> (<= 1 $generated@@293) (forall (($generated@@591 Int) ($generated@@592 Int) ($generated@@593 T@U) ) (!  (=> (and (= (type $generated@@593) $generated@@141) (or ($generated@@300 ($generated@@249 $generated@@591) ($generated@@249 $generated@@592) ($generated@@251 $generated@@593)) (and (not (= 1 $generated@@293)) ($generated@@137 $generated@@593 $generated@@229)))) (and (and ($generated@@353 ($generated@@251 $generated@@593)) (=> (=> ($generated@@236 $generated@@593 $generated@@156) (< $generated@@591 $generated@@592)) (and (and ($generated@@353 ($generated@@251 $generated@@593)) (=> (not ($generated@@236 $generated@@593 $generated@@158)) ($generated@@353 ($generated@@251 $generated@@593)))) (=> (=> (or ($generated@@236 $generated@@593 $generated@@158) ($generated@@236 $generated@@593 $generated@@156)) (and (= ($generated@@249 $generated@@591) ($generated@@249 100)) (= ($generated@@249 $generated@@592) ($generated@@249 1000)))) ($generated@@353 ($generated@@251 $generated@@593)))))) (= ($generated@@299 ($generated@@249 $generated@@591) ($generated@@249 $generated@@592) ($generated@@251 $generated@@593))  (and (and (=> ($generated@@236 $generated@@593 $generated@@156) (< $generated@@591 $generated@@592)) (=> (or ($generated@@236 $generated@@593 $generated@@158) ($generated@@236 $generated@@593 $generated@@156)) (and (= ($generated@@249 $generated@@591) ($generated@@249 100)) (= ($generated@@249 $generated@@592) ($generated@@249 1000))))) (=> ($generated@@236 $generated@@593 $generated@@159) (or (<= ($generated@@249 0) ($generated@@249 $generated@@591)) (<= ($generated@@249 0) ($generated@@249 $generated@@592))))))))
 :weight 3
 :pattern ( ($generated@@299 ($generated@@249 $generated@@591) ($generated@@249 $generated@@592) ($generated@@251 $generated@@593)))
))))
(assert (forall (($generated@@594 Int) ) (! (= ($generated@@288 ($generated@@8 ($generated@@249 $generated@@594))) ($generated@@251 ($generated@@288 ($generated@@8 $generated@@594))))
 :pattern ( ($generated@@288 ($generated@@8 ($generated@@249 $generated@@594))))
)))
(assert (forall (($generated@@595 T@U) ) (! (= ($generated@@288 ($generated@@251 $generated@@595)) ($generated@@251 ($generated@@288 $generated@@595)))
 :pattern ( ($generated@@288 ($generated@@251 $generated@@595)))
)))
(assert (forall (($generated@@596 T@U) ) (! (let (($generated@@597 ($generated@@280 (type $generated@@596))))
 (=> (and (= (type $generated@@596) ($generated@@279 $generated@@597)) (= ($generated@@278 $generated@@596) 0)) (= $generated@@596 ($generated@@277 $generated@@597))))
 :pattern ( ($generated@@278 $generated@@596))
)))
(assert (forall (($generated@@598 T@U) ($generated@@599 T@U) ($generated@@600 T@U) ) (! (let (($generated@@601 (type $generated@@599)))
 (=> (and (and (= (type $generated@@598) ($generated@@81 $generated@@601 $generated@@2)) (= (type $generated@@600) $generated@@2)) (<= 0 ($generated $generated@@600))) (= ($generated@@304 ($generated@@87 $generated@@598 $generated@@599 $generated@@600)) (+ (- ($generated@@304 $generated@@598) ($generated ($generated@@86 $generated@@598 $generated@@599))) ($generated $generated@@600)))))
 :pattern ( ($generated@@304 ($generated@@87 $generated@@598 $generated@@599 $generated@@600)))
)))
(assert (forall (($generated@@602 T@U) ($generated@@603 T@U) ) (!  (=> (and (= (type $generated@@602) ($generated@@81 $generated@@82 $generated@@83)) (= (type $generated@@603) $generated@@2)) ($generated@@79 $generated@@603 $generated@@46 $generated@@602))
 :pattern ( ($generated@@79 $generated@@603 $generated@@46 $generated@@602))
)))
(assert (forall (($generated@@604 T@U) ($generated@@605 T@U) ) (!  (=> (and (= (type $generated@@604) ($generated@@81 $generated@@82 $generated@@83)) (= (type $generated@@605) $generated@@3)) ($generated@@79 $generated@@605 $generated@@47 $generated@@604))
 :pattern ( ($generated@@79 $generated@@605 $generated@@47 $generated@@604))
)))
(assert (forall (($generated@@606 T@U) ($generated@@607 T@U) ) (!  (=> (and (= (type $generated@@606) ($generated@@81 $generated@@82 $generated@@83)) (= (type $generated@@607) $generated@@4)) ($generated@@79 $generated@@607 $generated@@44 $generated@@606))
 :pattern ( ($generated@@79 $generated@@607 $generated@@44 $generated@@606))
)))
(assert (forall (($generated@@608 T@U) ($generated@@609 T@U) ) (!  (=> (and (= (type $generated@@608) ($generated@@81 $generated@@82 $generated@@83)) (= (type $generated@@609) $generated@@461)) ($generated@@79 $generated@@609 $generated@@45 $generated@@608))
 :pattern ( ($generated@@79 $generated@@609 $generated@@45 $generated@@608))
)))
(assert (forall (($generated@@610 T@U) ($generated@@611 T@U) ) (!  (=> (and (= (type $generated@@610) ($generated@@81 $generated@@82 $generated@@83)) (= (type $generated@@611) $generated@@150)) ($generated@@79 $generated@@611 $generated@@48 $generated@@610))
 :pattern ( ($generated@@79 $generated@@611 $generated@@48 $generated@@610))
)))
(assert (forall (($generated@@612 T@U) ($generated@@613 T@U) ) (!  (=> (and (= (type $generated@@612) ($generated@@279 $generated@@150)) (= (type $generated@@613) $generated@@69)) (= ($generated@@137 $generated@@612 ($generated@@503 $generated@@613)) (forall (($generated@@614 Int) ) (!  (=> (and (<= 0 $generated@@614) (< $generated@@614 ($generated@@278 $generated@@612))) ($generated@@222 ($generated@@504 $generated@@612 $generated@@614) $generated@@613))
 :pattern ( ($generated@@504 $generated@@612 $generated@@614))
))))
 :pattern ( ($generated@@137 $generated@@612 ($generated@@503 $generated@@613)))
)))
(assert (forall (($generated@@616 T@U) ($generated@@617 Int) ) (!  (=> (= (type $generated@@616) ($generated@@279 $generated@@150)) (=> (and (<= 0 $generated@@617) (< $generated@@617 ($generated@@278 $generated@@616))) (< ($generated@@543 ($generated@@349 $generated@@141 ($generated@@504 $generated@@616 $generated@@617))) ($generated@@615 $generated@@616))))
 :pattern ( ($generated@@543 ($generated@@349 $generated@@141 ($generated@@504 $generated@@616 $generated@@617))))
)))
(assert (forall (($generated@@618 T@U) ($generated@@619 T@U) ($generated@@620 T@U) ) (!  (=> (and (and (and (= (type $generated@@618) ($generated@@312 $generated@@150 $generated@@150)) (= (type $generated@@619) $generated@@69)) (= (type $generated@@620) $generated@@69)) ($generated@@137 $generated@@618 ($generated@@421 $generated@@619 $generated@@620))) (and (and ($generated@@137 ($generated@@310 $generated@@618) ($generated@@239 $generated@@619)) ($generated@@137 ($generated@@364 $generated@@618) ($generated@@239 $generated@@620))) ($generated@@137 ($generated@@395 $generated@@618) ($generated@@239 ($generated@@140 $generated@@619 $generated@@620)))))
 :pattern ( ($generated@@137 $generated@@618 ($generated@@421 $generated@@619 $generated@@620)))
)))
(assert (forall (($generated@@621 T@U) ($generated@@622 T@U) ($generated@@623 T@U) ) (!  (=> (and (and (and (= (type $generated@@621) ($generated@@330 $generated@@150 $generated@@150)) (= (type $generated@@622) $generated@@69)) (= (type $generated@@623) $generated@@69)) ($generated@@137 $generated@@621 ($generated@@429 $generated@@622 $generated@@623))) (and (and ($generated@@137 ($generated@@328 $generated@@621) ($generated@@244 $generated@@622)) ($generated@@137 ($generated@@375 $generated@@621) ($generated@@244 $generated@@623))) ($generated@@137 ($generated@@403 $generated@@621) ($generated@@244 ($generated@@140 $generated@@622 $generated@@623)))))
 :pattern ( ($generated@@137 $generated@@621 ($generated@@429 $generated@@622 $generated@@623)))
)))
(assert (forall (($generated@@624 T@U) ) (!  (=> (= (type $generated@@624) $generated@@2) ($generated@@137 $generated@@624 $generated@@46))
 :pattern ( ($generated@@137 $generated@@624 $generated@@46))
)))
(assert (forall (($generated@@625 T@U) ) (!  (=> (= (type $generated@@625) $generated@@3) ($generated@@137 $generated@@625 $generated@@47))
 :pattern ( ($generated@@137 $generated@@625 $generated@@47))
)))
(assert (forall (($generated@@626 T@U) ) (!  (=> (= (type $generated@@626) $generated@@4) ($generated@@137 $generated@@626 $generated@@44))
 :pattern ( ($generated@@137 $generated@@626 $generated@@44))
)))
(assert (forall (($generated@@627 T@U) ) (!  (=> (= (type $generated@@627) $generated@@461) ($generated@@137 $generated@@627 $generated@@45))
 :pattern ( ($generated@@137 $generated@@627 $generated@@45))
)))
(assert (forall (($generated@@628 T@U) ) (!  (=> (= (type $generated@@628) $generated@@150) ($generated@@137 $generated@@628 $generated@@48))
 :pattern ( ($generated@@137 $generated@@628 $generated@@48))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@629 () T@U)
(declare-fun $generated@@630 () T@U)
(declare-fun $generated@@631 () T@U)
(declare-fun $generated@@632 () Int)
(declare-fun $generated@@633 () Int)
(declare-fun $generated@@634 () T@U)
(declare-fun $generated@@635 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@629) ($generated@@167 $generated@@82 $generated@@4)) (= (type $generated@@630) $generated@@82)) (= (type $generated@@631) ($generated@@81 $generated@@82 $generated@@83))) (= (type $generated@@634) $generated@@141)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@636  (=> (and (= $generated@@629 ($generated@@166 $generated@@630 $generated@@631 $generated@@60 false)) (= (ControlFlow 0 2) (- 0 1))) (= ($generated@@294 $generated@@632 $generated@@633 $generated@@634) ($generated@@299 $generated@@632 $generated@@633 $generated@@634)))))
(let (($generated@@637  (=> (and ($generated@@230 $generated@@631) ($generated@@635 $generated@@631)) (=> (and (and (and ($generated@@137 $generated@@634 $generated@@229) ($generated@@79 $generated@@634 $generated@@229 $generated@@631)) ($generated@@353 $generated@@634)) (and (= 2 $generated@@293) (= (ControlFlow 0 3) 2))) $generated@@636))))
$generated@@637)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () Int)
(declare-fun $generated@@45 (Int) Bool)
(declare-fun $generated@@46 (Int) Bool)
(declare-fun $generated@@47 (Int) Int)
(declare-fun $generated@@49 (T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U) T@U)
(declare-fun $generated@@57 (T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@163 (T@U) T@U)
(declare-fun $generated@@167 (Int) Bool)
(declare-fun $generated@@168 (Int) Bool)
(declare-fun $generated@@173 (T@U) T@U)
(declare-fun $generated@@174 (T@T T@U) T@U)
(declare-fun $generated@@175 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@48 Int) ) (!  (=> (or ($generated@@46 $generated@@48) (not (= 0 $generated@@44))) (= ($generated@@45 $generated@@48)  (or false (= $generated@@48 ($generated@@47 5)))))
 :pattern ( ($generated@@45 $generated@@48))
))))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (= ($generated@@1 ($generated@@53 $generated@@66 $generated@@67)) 6)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@58 ($generated@@53 $generated@@68 $generated@@69)) $generated@@68)
 :pattern ( ($generated@@53 $generated@@68 $generated@@69))
))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@59 ($generated@@53 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@53 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@59 (type $generated@@72))))
(= (type ($generated@@57 $generated@@72 $generated@@73)) $generated@@74))
 :pattern ( ($generated@@57 $generated@@72 $generated@@73))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 (type $generated@@77)))
(let (($generated@@79 (type $generated@@76)))
(= (type ($generated@@60 $generated@@75 $generated@@76 $generated@@77)) ($generated@@53 $generated@@79 $generated@@78))))
 :pattern ( ($generated@@60 $generated@@75 $generated@@76 $generated@@77))
))) (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@59 (type $generated@@80))))
 (=> (= (type $generated@@82) $generated@@83) (= ($generated@@57 ($generated@@60 $generated@@80 $generated@@81 $generated@@82) $generated@@81) $generated@@82)))
 :weight 0
))) (and (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@86 $generated@@87) (= ($generated@@57 ($generated@@60 $generated@@85 $generated@@86 $generated@@84) $generated@@87) ($generated@@57 $generated@@85 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or true (= ($generated@@57 ($generated@@60 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@57 $generated@@89 $generated@@91)))
 :weight 0
)))) (forall (($generated@@92 T@T) ) (= ($generated@@1 ($generated@@55 $generated@@92)) 7))) (forall (($generated@@93 T@T) ) (! (= ($generated@@51 ($generated@@55 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@55 $generated@@93))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@51 (type $generated@@95))))
(= (type ($generated@@56 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@56 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@54) 8)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@61 $generated@@97 $generated@@98 $generated@@99)) $generated@@54)
 :pattern ( ($generated@@61 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@51 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@56 ($generated@@61 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@56 ($generated@@61 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@56 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@56 ($generated@@61 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@56 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@52) 9)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@112 $generated@@113)) 10))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@63 ($generated@@62 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@62 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@64 ($generated@@62 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@62 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@64 (type $generated@@118))))
(= (type ($generated@@49 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@49 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@62 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@64 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@49 ($generated@@65 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@49 ($generated@@65 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@49 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@49 ($generated@@65 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@49 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@49 ($generated@@65 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@49 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@62 $generated@@52 $generated@@4))
 :pattern ( ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@51 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@52) (= (type $generated@@156) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@157) ($generated@@55 $generated@@4))) (= (type $generated@@159) $generated@@52)) (= (type $generated@@160) ($generated@@55 $generated@@161))) (= ($generated@@0 ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@56 ($generated@@57 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 Int) ) (! (= ($generated@@47 $generated@@162) $generated@@162)
 :pattern ( ($generated@@47 $generated@@162))
)))
(assert (forall (($generated@@164 T@U) ) (! (let (($generated@@165 (type $generated@@164)))
(= (type ($generated@@163 $generated@@164)) $generated@@165))
 :pattern ( ($generated@@163 $generated@@164))
)))
(assert (forall (($generated@@166 T@U) ) (! (= ($generated@@163 $generated@@166) $generated@@166)
 :pattern ( ($generated@@163 $generated@@166))
)))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@169 Int) ) (!  (=> (or ($generated@@168 $generated@@169) (not (= 0 $generated@@44))) true)
 :pattern ( ($generated@@167 $generated@@169))
))))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@170 Int) ) (!  (=> (or ($generated@@46 $generated@@170) (not (= 0 $generated@@44))) true)
 :pattern ( ($generated@@45 $generated@@170))
))))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@171 Int) ) (!  (=> (or ($generated@@46 ($generated@@47 $generated@@171)) (not (= 0 $generated@@44))) (= ($generated@@45 ($generated@@47 $generated@@171))  (or false (= ($generated@@47 $generated@@171) ($generated@@47 5)))))
 :weight 3
 :pattern ( ($generated@@45 ($generated@@47 $generated@@171)))
))))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@172 Int) ) (!  (=> (or ($generated@@168 $generated@@172) (not (= 0 $generated@@44))) (= ($generated@@167 $generated@@172)  (and true (= $generated@@172 ($generated@@47 5)))))
 :pattern ( ($generated@@167 $generated@@172))
))))
(assert  (and (and (= ($generated@@1 $generated@@175) 11) (forall (($generated@@176 T@U) ) (! (= (type ($generated@@173 $generated@@176)) $generated@@175)
 :pattern ( ($generated@@173 $generated@@176))
))) (forall (($generated@@177 T@T) ($generated@@178 T@U) ) (! (= (type ($generated@@174 $generated@@177 $generated@@178)) $generated@@177)
 :pattern ( ($generated@@174 $generated@@177 $generated@@178))
))))
(assert (forall (($generated@@179 T@U) ) (! (let (($generated@@180 (type $generated@@179)))
(= ($generated@@174 $generated@@180 ($generated@@173 $generated@@179)) $generated@@179))
 :pattern ( ($generated@@173 $generated@@179))
)))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@181 Int) ) (!  (=> (or ($generated@@168 ($generated@@47 $generated@@181)) (not (= 0 $generated@@44))) (= ($generated@@167 ($generated@@47 $generated@@181))  (and true (= ($generated@@47 $generated@@181) ($generated@@47 5)))))
 :weight 3
 :pattern ( ($generated@@167 ($generated@@47 $generated@@181)))
))))
(assert (forall (($generated@@182 Int) ) (! (= ($generated@@173 ($generated@@8 ($generated@@47 $generated@@182))) ($generated@@163 ($generated@@173 ($generated@@8 $generated@@182))))
 :pattern ( ($generated@@173 ($generated@@8 ($generated@@47 $generated@@182))))
)))
(assert (forall (($generated@@183 T@U) ) (! (= ($generated@@173 ($generated@@163 $generated@@183)) ($generated@@163 ($generated@@173 $generated@@183)))
 :pattern ( ($generated@@173 ($generated@@163 $generated@@183)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 () Int)
(declare-fun $generated@@189 (T@U) Bool)
(declare-fun $generated@@190 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@184) ($generated@@62 $generated@@52 $generated@@4)) (= (type $generated@@185) $generated@@52)) (= (type $generated@@186) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@187) ($generated@@55 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@191  (=> (and (= $generated@@184 ($generated@@50 $generated@@185 $generated@@186 $generated@@187 false)) (= (ControlFlow 0 2) (- 0 1))) (= ($generated@@167 $generated@@188) ($generated@@45 $generated@@188)))))
(let (($generated@@192  (=> (and (and ($generated@@189 $generated@@186) ($generated@@190 $generated@@186)) (and (= 1 $generated@@44) (= (ControlFlow 0 3) 2))) $generated@@191)))
$generated@@192)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 () Int)
(declare-fun $generated@@164 (Int) Bool)
(declare-fun $generated@@165 (Int) Bool)
(declare-fun $generated@@167 (Int) Bool)
(declare-fun $generated@@168 (Int) Bool)
(declare-fun $generated@@171 (T@U) T@U)
(declare-fun $generated@@172 (T@T T@U) T@U)
(declare-fun $generated@@173 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (=> (<= 0 $generated@@163) (forall (($generated@@166 Int) ) (!  (=> (or ($generated@@165 $generated@@166) (not (= 0 $generated@@163))) true)
 :pattern ( ($generated@@164 $generated@@166))
))))
(assert  (=> (<= 0 $generated@@163) (forall (($generated@@169 Int) ) (!  (=> (or ($generated@@168 $generated@@169) (not (= 0 $generated@@163))) true)
 :pattern ( ($generated@@167 $generated@@169))
))))
(assert  (=> (<= 0 $generated@@163) (forall (($generated@@170 Int) ) (!  (=> (or ($generated@@168 $generated@@170) (not (= 0 $generated@@163))) (= ($generated@@167 $generated@@170) (= (= (+ 5 $generated@@170) ($generated@@157 0)) (= (+ 10 $generated@@170) ($generated@@157 0)))))
 :pattern ( ($generated@@167 $generated@@170))
))))
(assert  (and (and (= ($generated@@1 $generated@@173) 11) (forall (($generated@@174 T@U) ) (! (= (type ($generated@@171 $generated@@174)) $generated@@173)
 :pattern ( ($generated@@171 $generated@@174))
))) (forall (($generated@@175 T@T) ($generated@@176 T@U) ) (! (= (type ($generated@@172 $generated@@175 $generated@@176)) $generated@@175)
 :pattern ( ($generated@@172 $generated@@175 $generated@@176))
))))
(assert (forall (($generated@@177 T@U) ) (! (let (($generated@@178 (type $generated@@177)))
(= ($generated@@172 $generated@@178 ($generated@@171 $generated@@177)) $generated@@177))
 :pattern ( ($generated@@171 $generated@@177))
)))
(assert  (=> (<= 0 $generated@@163) (forall (($generated@@179 Int) ) (!  (=> (or ($generated@@165 $generated@@179) (not (= 0 $generated@@163))) (= ($generated@@164 $generated@@179) (=  (or false (= (+ 5 $generated@@179) ($generated@@157 0)))  (and true (= (+ 10 $generated@@179) ($generated@@157 0))))))
 :pattern ( ($generated@@164 $generated@@179))
))))
(assert  (=> (<= 0 $generated@@163) (forall (($generated@@180 Int) ) (!  (=> (or ($generated@@168 ($generated@@157 $generated@@180)) (not (= 0 $generated@@163))) (= ($generated@@167 ($generated@@157 $generated@@180)) (= (= ($generated@@157 (+ 5 $generated@@180)) ($generated@@157 0)) (= ($generated@@157 (+ 10 $generated@@180)) ($generated@@157 0)))))
 :weight 3
 :pattern ( ($generated@@167 ($generated@@157 $generated@@180)))
))))
(assert (forall (($generated@@181 Int) ) (! (= ($generated@@171 ($generated@@8 ($generated@@157 $generated@@181))) ($generated@@159 ($generated@@171 ($generated@@8 $generated@@181))))
 :pattern ( ($generated@@171 ($generated@@8 ($generated@@157 $generated@@181))))
)))
(assert (forall (($generated@@182 T@U) ) (! (= ($generated@@171 ($generated@@159 $generated@@182)) ($generated@@159 ($generated@@171 $generated@@182)))
 :pattern ( ($generated@@171 ($generated@@159 $generated@@182)))
)))
(assert  (=> (<= 0 $generated@@163) (forall (($generated@@183 Int) ) (!  (=> (or ($generated@@165 ($generated@@157 $generated@@183)) (not (= 0 $generated@@163))) (= ($generated@@164 ($generated@@157 $generated@@183)) (=  (or false (= ($generated@@157 (+ 5 $generated@@183)) ($generated@@157 0)))  (and true (= ($generated@@157 (+ 10 $generated@@183)) ($generated@@157 0))))))
 :weight 3
 :pattern ( ($generated@@164 ($generated@@157 $generated@@183)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 () Int)
(declare-fun $generated@@189 (T@U) Bool)
(declare-fun $generated@@190 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@184) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@185) $generated@@47)) (= (type $generated@@186) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@187) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@191  (=> (and (= $generated@@184 ($generated@@45 $generated@@185 $generated@@186 $generated@@187 false)) (= (ControlFlow 0 2) (- 0 1))) (= ($generated@@164 $generated@@188) ($generated@@167 $generated@@188)))))
(let (($generated@@192  (=> (and (and ($generated@@189 $generated@@186) ($generated@@190 $generated@@186)) (and (= 1 $generated@@163) (= (ControlFlow 0 3) 2))) $generated@@191)))
$generated@@192)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 () Int)
(declare-fun $generated@@164 (Int) Bool)
(declare-fun $generated@@165 (Int) Bool)
(declare-fun $generated@@167 (T@U) T@U)
(declare-fun $generated@@168 (T@T T@U) T@U)
(declare-fun $generated@@169 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (=> (<= 0 $generated@@163) (forall (($generated@@166 Int) ) (!  (=> (or ($generated@@165 $generated@@166) (not (= 0 $generated@@163))) true)
 :pattern ( ($generated@@164 $generated@@166))
))))
(assert  (and (and (= ($generated@@1 $generated@@169) 11) (forall (($generated@@170 T@U) ) (! (= (type ($generated@@167 $generated@@170)) $generated@@169)
 :pattern ( ($generated@@167 $generated@@170))
))) (forall (($generated@@171 T@T) ($generated@@172 T@U) ) (! (= (type ($generated@@168 $generated@@171 $generated@@172)) $generated@@171)
 :pattern ( ($generated@@168 $generated@@171 $generated@@172))
))))
(assert (forall (($generated@@173 T@U) ) (! (let (($generated@@174 (type $generated@@173)))
(= ($generated@@168 $generated@@174 ($generated@@167 $generated@@173)) $generated@@173))
 :pattern ( ($generated@@167 $generated@@173))
)))
(assert  (=> (<= 0 $generated@@163) (forall (($generated@@175 Int) ) (!  (=> (or ($generated@@165 $generated@@175) (not (= 0 $generated@@163))) (= ($generated@@164 $generated@@175) (=  (or false (= (+ 5 $generated@@175) ($generated@@157 0)))  (and true (= (+ 10 $generated@@175) ($generated@@157 0))))))
 :pattern ( ($generated@@164 $generated@@175))
))))
(assert (forall (($generated@@176 Int) ) (! (= ($generated@@167 ($generated@@8 ($generated@@157 $generated@@176))) ($generated@@159 ($generated@@167 ($generated@@8 $generated@@176))))
 :pattern ( ($generated@@167 ($generated@@8 ($generated@@157 $generated@@176))))
)))
(assert (forall (($generated@@177 T@U) ) (! (= ($generated@@167 ($generated@@159 $generated@@177)) ($generated@@159 ($generated@@167 $generated@@177)))
 :pattern ( ($generated@@167 ($generated@@159 $generated@@177)))
)))
(assert  (=> (<= 0 $generated@@163) (forall (($generated@@178 Int) ) (!  (=> (or ($generated@@165 ($generated@@157 $generated@@178)) (not (= 0 $generated@@163))) (= ($generated@@164 ($generated@@157 $generated@@178)) (=  (or false (= ($generated@@157 (+ 5 $generated@@178)) ($generated@@157 0)))  (and true (= ($generated@@157 (+ 10 $generated@@178)) ($generated@@157 0))))))
 :weight 3
 :pattern ( ($generated@@164 ($generated@@157 $generated@@178)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () Int)
(declare-fun $generated@@184 (T@U) Bool)
(declare-fun $generated@@185 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@179) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@180) $generated@@47)) (= (type $generated@@181) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@182) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@186  (=> (= $generated@@179 ($generated@@45 $generated@@180 $generated@@181 $generated@@182 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (not (= $generated@@183 (- 0 5)))) (=> (not (= $generated@@183 (- 0 5))) (=> (= (ControlFlow 0 2) (- 0 1)) (not (= $generated@@183 (- 0 10)))))))))
(let (($generated@@187  (=> (and (and (and ($generated@@184 $generated@@181) ($generated@@185 $generated@@181)) (= 1 $generated@@163)) (and (and ($generated@@165 $generated@@183) (and ($generated@@164 $generated@@183) (=  (or false (= (+ 5 $generated@@183) ($generated@@157 0)))  (and true (= (+ 10 $generated@@183) ($generated@@157 0)))))) (= (ControlFlow 0 4) 2))) $generated@@186)))
$generated@@187)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (Int) Int)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@163 () Int)
(declare-fun $generated@@164 (Int) Bool)
(declare-fun $generated@@165 (Int) Bool)
(declare-fun $generated@@167 (T@U) T@U)
(declare-fun $generated@@168 (T@T T@U) T@U)
(declare-fun $generated@@169 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@157 $generated@@158) $generated@@158)
 :pattern ( ($generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ) (! (let (($generated@@161 (type $generated@@160)))
(= (type ($generated@@159 $generated@@160)) $generated@@161))
 :pattern ( ($generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@159 $generated@@162) $generated@@162)
 :pattern ( ($generated@@159 $generated@@162))
)))
(assert  (=> (<= 0 $generated@@163) (forall (($generated@@166 Int) ) (!  (=> (or ($generated@@165 $generated@@166) (not (= 0 $generated@@163))) true)
 :pattern ( ($generated@@164 $generated@@166))
))))
(assert  (and (and (= ($generated@@1 $generated@@169) 11) (forall (($generated@@170 T@U) ) (! (= (type ($generated@@167 $generated@@170)) $generated@@169)
 :pattern ( ($generated@@167 $generated@@170))
))) (forall (($generated@@171 T@T) ($generated@@172 T@U) ) (! (= (type ($generated@@168 $generated@@171 $generated@@172)) $generated@@171)
 :pattern ( ($generated@@168 $generated@@171 $generated@@172))
))))
(assert (forall (($generated@@173 T@U) ) (! (let (($generated@@174 (type $generated@@173)))
(= ($generated@@168 $generated@@174 ($generated@@167 $generated@@173)) $generated@@173))
 :pattern ( ($generated@@167 $generated@@173))
)))
(assert  (=> (<= 0 $generated@@163) (forall (($generated@@175 Int) ) (!  (=> (or ($generated@@165 $generated@@175) (not (= 0 $generated@@163))) (= ($generated@@164 $generated@@175) (=  (or false (= (+ 5 $generated@@175) ($generated@@157 0)))  (and true (= (+ 10 $generated@@175) ($generated@@157 0))))))
 :pattern ( ($generated@@164 $generated@@175))
))))
(assert (forall (($generated@@176 Int) ) (! (= ($generated@@167 ($generated@@8 ($generated@@157 $generated@@176))) ($generated@@159 ($generated@@167 ($generated@@8 $generated@@176))))
 :pattern ( ($generated@@167 ($generated@@8 ($generated@@157 $generated@@176))))
)))
(assert (forall (($generated@@177 T@U) ) (! (= ($generated@@167 ($generated@@159 $generated@@177)) ($generated@@159 ($generated@@167 $generated@@177)))
 :pattern ( ($generated@@167 ($generated@@159 $generated@@177)))
)))
(assert  (=> (<= 0 $generated@@163) (forall (($generated@@178 Int) ) (!  (=> (or ($generated@@165 ($generated@@157 $generated@@178)) (not (= 0 $generated@@163))) (= ($generated@@164 ($generated@@157 $generated@@178)) (=  (or false (= ($generated@@157 (+ 5 $generated@@178)) ($generated@@157 0)))  (and true (= ($generated@@157 (+ 10 $generated@@178)) ($generated@@157 0))))))
 :weight 3
 :pattern ( ($generated@@164 ($generated@@157 $generated@@178)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 (T@U) Bool)
(declare-fun $generated@@184 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@179) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@180) $generated@@47)) (= (type $generated@@181) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@182) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@185  (=> (and (and (= $generated@@179 ($generated@@45 $generated@@180 $generated@@181 $generated@@182 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@165 ($generated@@157 4))) (or ($generated@@0 ($generated@@159 ($generated@@11 ($generated@@164 ($generated@@157 4))))) (=  (or false (= ($generated@@157 (+ 5 4)) ($generated@@157 0)))  (and true (= ($generated@@157 (+ 10 4)) ($generated@@157 0))))))))
(let (($generated@@186  (=> (and (and ($generated@@183 $generated@@181) ($generated@@184 $generated@@181)) (and (= 1 $generated@@163) (= (ControlFlow 0 3) 2))) $generated@@185)))
$generated@@186)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
