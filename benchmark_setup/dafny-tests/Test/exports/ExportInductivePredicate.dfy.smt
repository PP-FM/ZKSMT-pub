(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U) T@U)
(declare-fun $generated@@57 (T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (Int) Bool)
(declare-fun $generated@@164 (Int) Int)
(declare-fun $generated@@166 (T@U) T@U)
(declare-fun $generated@@170 (Int) T@U)
(declare-fun $generated@@171 (T@U) Bool)
(declare-fun $generated@@172 (T@U) Int)
(declare-fun $generated@@177 (T@U Int) Bool)
(declare-fun $generated@@183 (T@U) T@U)
(declare-fun $generated@@184 (T@T T@U) T@U)
(declare-fun $generated@@192 (T@U Int) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (= ($generated@@1 ($generated@@53 $generated@@66 $generated@@67)) 7)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@58 ($generated@@53 $generated@@68 $generated@@69)) $generated@@68)
 :pattern ( ($generated@@53 $generated@@68 $generated@@69))
))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@59 ($generated@@53 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@53 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@59 (type $generated@@72))))
(= (type ($generated@@57 $generated@@72 $generated@@73)) $generated@@74))
 :pattern ( ($generated@@57 $generated@@72 $generated@@73))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 (type $generated@@77)))
(let (($generated@@79 (type $generated@@76)))
(= (type ($generated@@60 $generated@@75 $generated@@76 $generated@@77)) ($generated@@53 $generated@@79 $generated@@78))))
 :pattern ( ($generated@@60 $generated@@75 $generated@@76 $generated@@77))
))) (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@59 (type $generated@@80))))
 (=> (= (type $generated@@82) $generated@@83) (= ($generated@@57 ($generated@@60 $generated@@80 $generated@@81 $generated@@82) $generated@@81) $generated@@82)))
 :weight 0
))) (and (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@86 $generated@@87) (= ($generated@@57 ($generated@@60 $generated@@85 $generated@@86 $generated@@84) $generated@@87) ($generated@@57 $generated@@85 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or true (= ($generated@@57 ($generated@@60 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@57 $generated@@89 $generated@@91)))
 :weight 0
)))) (forall (($generated@@92 T@T) ) (= ($generated@@1 ($generated@@55 $generated@@92)) 8))) (forall (($generated@@93 T@T) ) (! (= ($generated@@51 ($generated@@55 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@55 $generated@@93))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@51 (type $generated@@95))))
(= (type ($generated@@56 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@56 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@54) 9)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@61 $generated@@97 $generated@@98 $generated@@99)) $generated@@54)
 :pattern ( ($generated@@61 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@51 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@56 ($generated@@61 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@56 ($generated@@61 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@56 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@56 ($generated@@61 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@56 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@52) 10)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@112 $generated@@113)) 11))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@63 ($generated@@62 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@62 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@64 ($generated@@62 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@62 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@64 (type $generated@@118))))
(= (type ($generated@@49 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@49 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@62 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@64 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@49 ($generated@@65 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@49 ($generated@@65 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@49 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@49 ($generated@@65 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@49 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@49 ($generated@@65 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@49 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@62 $generated@@52 $generated@@4))
 :pattern ( ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@51 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@52) (= (type $generated@@156) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@157) ($generated@@55 $generated@@4))) (= (type $generated@@159) $generated@@52)) (= (type $generated@@160) ($generated@@55 $generated@@161))) (= ($generated@@0 ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@56 ($generated@@57 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (=> true (forall (($generated@@163 Int) ) (!  (=> true (= ($generated@@162 $generated@@163) (< $generated@@163 100)))
 :pattern ( ($generated@@162 $generated@@163))
))))
(assert (forall (($generated@@165 Int) ) (! (= ($generated@@164 $generated@@165) $generated@@165)
 :pattern ( ($generated@@164 $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! (let (($generated@@168 (type $generated@@167)))
(= (type ($generated@@166 $generated@@167)) $generated@@168))
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (forall (($generated@@169 T@U) ) (! (= ($generated@@166 $generated@@169) $generated@@169)
 :pattern ( ($generated@@166 $generated@@169))
)))
(assert (forall (($generated@@173 Int) ) (! (= (type ($generated@@170 $generated@@173)) $generated@@45)
 :pattern ( ($generated@@170 $generated@@173))
)))
(assert (forall (($generated@@174 Int) ) (!  (=> (<= 0 $generated@@174) (and ($generated@@171 ($generated@@170 $generated@@174)) (= ($generated@@172 ($generated@@170 $generated@@174)) $generated@@174)))
 :pattern ( ($generated@@170 $generated@@174))
)))
(assert (forall (($generated@@175 T@U) ($generated@@176 T@U) ) (!  (=> (and (= (type $generated@@175) $generated@@45) (= (type $generated@@176) $generated@@45)) (or (or ($generated@@44 $generated@@175 $generated@@176) (= $generated@@175 $generated@@176)) ($generated@@44 $generated@@176 $generated@@175)))
 :pattern ( ($generated@@44 $generated@@175 $generated@@176) ($generated@@44 $generated@@176 $generated@@175))
)))
(assert  (=> true (forall (($generated@@178 Int) ($generated@@179 T@U) ) (!  (=> (and (= (type $generated@@179) $generated@@45) (= $generated@@179 ($generated@@170 0))) ($generated@@177 $generated@@179 $generated@@178))
 :pattern ( ($generated@@177 $generated@@179 $generated@@178))
))))
(assert  (=> true (forall (($generated@@180 Int) ) (!  (=> ($generated@@162 $generated@@180) (forall (($generated@@181 T@U) ) (!  (=> (= (type $generated@@181) $generated@@45) ($generated@@177 $generated@@181 $generated@@180))
 :pattern ( ($generated@@177 $generated@@181 $generated@@180))
)))
 :pattern ( ($generated@@162 $generated@@180))
))))
(assert (forall (($generated@@182 T@U) ) (!  (=> (= (type $generated@@182) $generated@@45) (<= 0 ($generated@@172 $generated@@182)))
 :pattern ( ($generated@@172 $generated@@182))
)))
(assert  (and (forall (($generated@@185 T@U) ) (! (= (type ($generated@@183 $generated@@185)) $generated@@45)
 :pattern ( ($generated@@183 $generated@@185))
)) (forall (($generated@@186 T@T) ($generated@@187 T@U) ) (! (= (type ($generated@@184 $generated@@186 $generated@@187)) $generated@@186)
 :pattern ( ($generated@@184 $generated@@186 $generated@@187))
))))
(assert (forall (($generated@@188 T@U) ) (! (let (($generated@@189 (type $generated@@188)))
(= ($generated@@184 $generated@@189 ($generated@@183 $generated@@188)) $generated@@188))
 :pattern ( ($generated@@183 $generated@@188))
)))
(assert (forall (($generated@@190 T@U) ($generated@@191 T@U) ) (!  (=> (and (= (type $generated@@190) $generated@@45) (= (type $generated@@191) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@190 $generated@@191) (not (= $generated@@190 $generated@@191))) (=> (and ($generated@@171 $generated@@190) (not ($generated@@171 $generated@@191))) ($generated@@44 $generated@@190 $generated@@191))) (=> (and ($generated@@171 $generated@@190) ($generated@@171 $generated@@191)) (= ($generated@@44 $generated@@190 $generated@@191) (< ($generated@@172 $generated@@190) ($generated@@172 $generated@@191))))) (=> (and ($generated@@44 $generated@@190 $generated@@191) ($generated@@171 $generated@@191)) ($generated@@171 $generated@@190))))
 :pattern ( ($generated@@44 $generated@@190 $generated@@191))
)))
(assert  (=> true (forall (($generated@@193 T@U) ($generated@@194 Int) ) (!  (=> (and (= (type $generated@@193) $generated@@45) true) (and (=> (=> (< 0 ($generated@@172 $generated@@193)) (< $generated@@194 100)) (=> (= ($generated@@164 0) ($generated@@172 $generated@@193)) (forall (($generated@@195 T@U) ) (!  (=> (and (= (type $generated@@195) $generated@@45) ($generated@@44 $generated@@195 $generated@@193)) ($generated@@192 $generated@@195 $generated@@194))
 :pattern ( ($generated@@177 $generated@@195 $generated@@194))
)))) (= ($generated@@177 $generated@@193 $generated@@194)  (and (=> (< 0 ($generated@@172 $generated@@193)) (< $generated@@194 100)) (=> (= ($generated@@164 0) ($generated@@172 $generated@@193)) (forall (($generated@@196 T@U) ) (!  (=> (and (= (type $generated@@196) $generated@@45) ($generated@@44 $generated@@196 $generated@@193)) ($generated@@177 $generated@@196 $generated@@194))
 :pattern ( ($generated@@177 $generated@@196 $generated@@194))
)))))))
 :pattern ( ($generated@@177 $generated@@193 $generated@@194))
))))
(assert  (=> true (forall (($generated@@197 Int) ) (!  (=> (forall (($generated@@198 T@U) ) (!  (=> (= (type $generated@@198) $generated@@45) ($generated@@177 $generated@@198 $generated@@197))
 :pattern ( ($generated@@177 $generated@@198 $generated@@197))
)) ($generated@@162 $generated@@197))
 :pattern ( ($generated@@162 $generated@@197))
))))
(assert  (=> true (forall (($generated@@199 T@U) ($generated@@200 Int) ) (!  (=> (and (= (type $generated@@199) $generated@@45) true) (and (=> (=> (< 0 ($generated@@172 $generated@@199)) (< $generated@@200 100)) (=> (= ($generated@@164 0) ($generated@@172 $generated@@199)) (forall (($generated@@201 T@U) ) (!  (=> (and (= (type $generated@@201) $generated@@45) ($generated@@44 $generated@@201 $generated@@199)) ($generated@@192 $generated@@201 $generated@@200))
 :pattern ( ($generated@@177 $generated@@201 $generated@@200))
)))) (= ($generated@@177 ($generated@@166 $generated@@199) $generated@@200)  (and (=> (< 0 ($generated@@172 $generated@@199)) (< $generated@@200 100)) (=> (= ($generated@@164 0) ($generated@@172 $generated@@199)) (forall (($generated@@202 T@U) ) (!  (=> (and (= (type $generated@@202) $generated@@45) ($generated@@44 $generated@@202 $generated@@199)) ($generated@@177 $generated@@202 $generated@@200))
 :pattern ( ($generated@@177 $generated@@202 $generated@@200))
)))))))
 :weight 3
 :pattern ( ($generated@@177 ($generated@@166 $generated@@199) $generated@@200))
))))
(assert (forall (($generated@@203 T@U) ) (!  (=> (and (= (type $generated@@203) $generated@@45) ($generated@@171 $generated@@203)) (= $generated@@203 ($generated@@170 ($generated@@172 $generated@@203))))
 :pattern ( ($generated@@172 $generated@@203))
 :pattern ( ($generated@@171 $generated@@203))
)))
(assert  (=> true (forall (($generated@@204 T@U) ($generated@@205 Int) ) (!  (=> (and (= (type $generated@@204) $generated@@45) true) (and (=> (=> (< 0 ($generated@@172 $generated@@204)) (< $generated@@205 100)) (=> (= ($generated@@164 0) ($generated@@172 $generated@@204)) (forall (($generated@@206 T@U) ) (!  (=> (and (= (type $generated@@206) $generated@@45) ($generated@@44 $generated@@206 $generated@@204)) ($generated@@192 $generated@@206 $generated@@205))
 :pattern ( ($generated@@177 $generated@@206 $generated@@205))
)))) (= ($generated@@177 ($generated@@166 $generated@@204) ($generated@@164 $generated@@205))  (and (=> (< 0 ($generated@@172 $generated@@204)) (< $generated@@205 100)) (=> (= ($generated@@164 0) ($generated@@172 $generated@@204)) (forall (($generated@@207 T@U) ) (!  (=> (and (= (type $generated@@207) $generated@@45) ($generated@@44 $generated@@207 $generated@@204)) ($generated@@177 $generated@@207 $generated@@205))
 :pattern ( ($generated@@177 $generated@@207 $generated@@205))
)))))))
 :weight 3
 :pattern ( ($generated@@177 ($generated@@166 $generated@@204) ($generated@@164 $generated@@205)))
))))
(assert  (=> true (forall (($generated@@208 Int) ) (!  (=> true true)
 :pattern ( ($generated@@162 $generated@@208))
))))
(assert  (=> true (forall (($generated@@209 T@U) ($generated@@210 Int) ) (!  (=> (and (= (type $generated@@209) $generated@@45) true) true)
 :pattern ( ($generated@@177 $generated@@209 $generated@@210))
))))
(assert (forall (($generated@@211 Int) ) (! (= ($generated@@183 ($generated@@8 ($generated@@164 $generated@@211))) ($generated@@166 ($generated@@183 ($generated@@8 $generated@@211))))
 :pattern ( ($generated@@183 ($generated@@8 ($generated@@164 $generated@@211))))
)))
(assert (forall (($generated@@212 T@U) ) (! (= ($generated@@183 ($generated@@166 $generated@@212)) ($generated@@166 ($generated@@183 $generated@@212)))
 :pattern ( ($generated@@183 ($generated@@166 $generated@@212)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@213 () T@U)
(declare-fun $generated@@214 () T@U)
(declare-fun $generated@@215 () T@U)
(declare-fun $generated@@216 () T@U)
(declare-fun $generated@@217 (Int) Bool)
(declare-fun $generated@@218 () Int)
(declare-fun $generated@@219 (T@U) Bool)
(declare-fun $generated@@220 (T@U) Bool)
(declare-fun $generated@@221 () Int)
(assert  (and (and (and (= (type $generated@@213) ($generated@@62 $generated@@52 $generated@@4)) (= (type $generated@@214) $generated@@52)) (= (type $generated@@215) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@216) ($generated@@55 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@222  (=> (and (and (= $generated@@213 ($generated@@50 $generated@@214 $generated@@215 $generated@@216 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@217 $generated@@218)) (or ($generated@@162 $generated@@218) (< $generated@@218 100)))))
(let (($generated@@223  (=> (and (and (and ($generated@@219 $generated@@215) ($generated@@220 $generated@@215)) (= 0 $generated@@221)) (and (< $generated@@218 100) (= (ControlFlow 0 3) 2))) $generated@@222)))
$generated@@223)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 () Int)
(declare-fun $generated@@50 (T@U Int) Bool)
(declare-fun $generated@@51 (T@U) T@U)
(declare-fun $generated@@52 (Int) Int)
(declare-fun $generated@@53 (T@U Int) Bool)
(declare-fun $generated@@54 (T@U) Int)
(declare-fun $generated@@61 (T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@T T@T) T@T)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 (T@U T@U) T@U)
(declare-fun $generated@@69 (T@U T@U) T@U)
(declare-fun $generated@@70 (T@T) T@T)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@72 (T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@76 (T@T) T@T)
(declare-fun $generated@@77 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@174 (Int) T@U)
(declare-fun $generated@@180 (Int) Bool)
(declare-fun $generated@@183 (Int) Bool)
(declare-fun $generated@@187 (T@U) Bool)
(declare-fun $generated@@199 (T@U) T@U)
(declare-fun $generated@@200 (T@T T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert (forall (($generated@@55 T@U) ) (! (let (($generated@@56 (type $generated@@55)))
(= (type ($generated@@51 $generated@@55)) $generated@@56))
 :pattern ( ($generated@@51 $generated@@55))
)))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@57 T@U) ($generated@@58 Int) ) (!  (=> (and (= (type $generated@@57) $generated@@45) (or ($generated@@53 ($generated@@51 $generated@@57) ($generated@@52 $generated@@58)) (not (= 1 $generated@@49)))) (and (=> (=> (< 0 ($generated@@54 $generated@@57)) (< $generated@@58 100)) (=> (= ($generated@@52 0) ($generated@@54 $generated@@57)) (forall (($generated@@59 T@U) ) (!  (=> (and (= (type $generated@@59) $generated@@45) ($generated@@44 $generated@@59 $generated@@57)) ($generated@@53 $generated@@59 $generated@@58))
 :pattern ( ($generated@@50 $generated@@59 $generated@@58))
)))) (= ($generated@@50 ($generated@@51 $generated@@57) ($generated@@52 $generated@@58))  (and (=> (< 0 ($generated@@54 $generated@@57)) (< $generated@@58 100)) (=> (= ($generated@@52 0) ($generated@@54 $generated@@57)) (forall (($generated@@60 T@U) ) (!  (=> (and (= (type $generated@@60) $generated@@45) ($generated@@44 $generated@@60 $generated@@57)) ($generated@@50 $generated@@60 $generated@@58))
 :pattern ( ($generated@@50 $generated@@60 $generated@@58))
)))))))
 :weight 3
 :pattern ( ($generated@@50 ($generated@@51 $generated@@57) ($generated@@52 $generated@@58)))
))))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ) (= ($generated@@1 ($generated@@65 $generated@@78 $generated@@79)) 7)) (forall (($generated@@80 T@T) ($generated@@81 T@T) ) (! (= ($generated@@70 ($generated@@65 $generated@@80 $generated@@81)) $generated@@80)
 :pattern ( ($generated@@65 $generated@@80 $generated@@81))
))) (forall (($generated@@82 T@T) ($generated@@83 T@T) ) (! (= ($generated@@71 ($generated@@65 $generated@@82 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@65 $generated@@82 $generated@@83))
))) (forall (($generated@@84 T@U) ($generated@@85 T@U) ) (! (let (($generated@@86 ($generated@@71 (type $generated@@84))))
(= (type ($generated@@69 $generated@@84 $generated@@85)) $generated@@86))
 :pattern ( ($generated@@69 $generated@@84 $generated@@85))
))) (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (let (($generated@@90 (type $generated@@89)))
(let (($generated@@91 (type $generated@@88)))
(= (type ($generated@@72 $generated@@87 $generated@@88 $generated@@89)) ($generated@@65 $generated@@91 $generated@@90))))
 :pattern ( ($generated@@72 $generated@@87 $generated@@88 $generated@@89))
))) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (let (($generated@@95 ($generated@@71 (type $generated@@92))))
 (=> (= (type $generated@@94) $generated@@95) (= ($generated@@69 ($generated@@72 $generated@@92 $generated@@93 $generated@@94) $generated@@93) $generated@@94)))
 :weight 0
))) (and (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@98 $generated@@99) (= ($generated@@69 ($generated@@72 $generated@@97 $generated@@98 $generated@@96) $generated@@99) ($generated@@69 $generated@@97 $generated@@99)))
 :weight 0
)) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or true (= ($generated@@69 ($generated@@72 $generated@@101 $generated@@102 $generated@@100) $generated@@103) ($generated@@69 $generated@@101 $generated@@103)))
 :weight 0
)))) (forall (($generated@@104 T@T) ) (= ($generated@@1 ($generated@@67 $generated@@104)) 8))) (forall (($generated@@105 T@T) ) (! (= ($generated@@63 ($generated@@67 $generated@@105)) $generated@@105)
 :pattern ( ($generated@@67 $generated@@105))
))) (forall (($generated@@106 T@U) ($generated@@107 T@U) ) (! (let (($generated@@108 ($generated@@63 (type $generated@@107))))
(= (type ($generated@@68 $generated@@106 $generated@@107)) $generated@@108))
 :pattern ( ($generated@@68 $generated@@106 $generated@@107))
))) (= ($generated@@1 $generated@@66) 9)) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= (type ($generated@@73 $generated@@109 $generated@@110 $generated@@111)) $generated@@66)
 :pattern ( ($generated@@73 $generated@@109 $generated@@110 $generated@@111))
))) (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (let (($generated@@115 ($generated@@63 (type $generated@@113))))
 (=> (= (type $generated@@114) $generated@@115) (= ($generated@@68 ($generated@@73 $generated@@112 $generated@@113 $generated@@114) $generated@@113) $generated@@114)))
 :weight 0
))) (and (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@118 $generated@@119) (= ($generated@@68 ($generated@@73 $generated@@117 $generated@@118 $generated@@116) $generated@@119) ($generated@@68 $generated@@117 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or true (= ($generated@@68 ($generated@@73 $generated@@121 $generated@@122 $generated@@120) $generated@@123) ($generated@@68 $generated@@121 $generated@@123)))
 :weight 0
)))) (= ($generated@@1 $generated@@64) 10)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (= ($generated@@1 ($generated@@74 $generated@@124 $generated@@125)) 11))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@75 ($generated@@74 $generated@@126 $generated@@127)) $generated@@126)
 :pattern ( ($generated@@74 $generated@@126 $generated@@127))
))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@76 ($generated@@74 $generated@@128 $generated@@129)) $generated@@129)
 :pattern ( ($generated@@74 $generated@@128 $generated@@129))
))) (forall (($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (! (let (($generated@@133 ($generated@@76 (type $generated@@130))))
(= (type ($generated@@61 $generated@@130 $generated@@131 $generated@@132)) $generated@@133))
 :pattern ( ($generated@@61 $generated@@130 $generated@@131 $generated@@132))
))) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (let (($generated@@138 (type $generated@@137)))
(let (($generated@@139 (type $generated@@135)))
(= (type ($generated@@77 $generated@@134 $generated@@135 $generated@@136 $generated@@137)) ($generated@@74 $generated@@139 $generated@@138))))
 :pattern ( ($generated@@77 $generated@@134 $generated@@135 $generated@@136 $generated@@137))
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ) (! (let (($generated@@144 ($generated@@76 (type $generated@@140))))
 (=> (= (type $generated@@143) $generated@@144) (= ($generated@@61 ($generated@@77 $generated@@140 $generated@@141 $generated@@142 $generated@@143) $generated@@141 $generated@@142) $generated@@143)))
 :weight 0
))) (and (and (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or (= $generated@@147 $generated@@149) (= ($generated@@61 ($generated@@77 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@61 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ) (!  (or (= $generated@@154 $generated@@156) (= ($generated@@61 ($generated@@77 $generated@@152 $generated@@153 $generated@@154 $generated@@151) $generated@@155 $generated@@156) ($generated@@61 $generated@@152 $generated@@155 $generated@@156)))
 :weight 0
))) (forall (($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ) (!  (or true (= ($generated@@61 ($generated@@77 $generated@@158 $generated@@159 $generated@@160 $generated@@157) $generated@@161 $generated@@162) ($generated@@61 $generated@@158 $generated@@161 $generated@@162)))
 :weight 0
)))) (forall (($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ($generated@@166 Bool) ) (! (= (type ($generated@@62 $generated@@163 $generated@@164 $generated@@165 $generated@@166)) ($generated@@74 $generated@@64 $generated@@4))
 :pattern ( ($generated@@62 $generated@@163 $generated@@164 $generated@@165 $generated@@166))
))))
(assert (forall (($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 Bool) ($generated@@171 T@U) ($generated@@172 T@U) ) (! (let (($generated@@173 ($generated@@63 (type $generated@@172))))
 (=> (and (and (and (and (= (type $generated@@167) $generated@@64) (= (type $generated@@168) ($generated@@65 $generated@@64 $generated@@66))) (= (type $generated@@169) ($generated@@67 $generated@@4))) (= (type $generated@@171) $generated@@64)) (= (type $generated@@172) ($generated@@67 $generated@@173))) (= ($generated@@0 ($generated@@61 ($generated@@62 $generated@@167 $generated@@168 $generated@@169 $generated@@170) $generated@@171 $generated@@172))  (=> (and (not (= $generated@@171 $generated@@167)) ($generated@@0 ($generated@@68 ($generated@@69 $generated@@168 $generated@@171) $generated@@169))) $generated@@170))))
 :pattern ( ($generated@@61 ($generated@@62 $generated@@167 $generated@@168 $generated@@169 $generated@@170) $generated@@171 $generated@@172))
)))
(assert (forall (($generated@@175 Int) ) (! (= (type ($generated@@174 $generated@@175)) $generated@@45)
 :pattern ( ($generated@@174 $generated@@175))
)))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@176 Int) ($generated@@177 T@U) ) (!  (=> (and (= (type $generated@@177) $generated@@45) (= $generated@@177 ($generated@@174 0))) ($generated@@50 $generated@@177 $generated@@176))
 :pattern ( ($generated@@50 $generated@@177 $generated@@176))
))))
(assert (forall (($generated@@178 Int) ) (! (= ($generated@@52 $generated@@178) $generated@@178)
 :pattern ( ($generated@@52 $generated@@178))
)))
(assert (forall (($generated@@179 T@U) ) (! (= ($generated@@51 $generated@@179) $generated@@179)
 :pattern ( ($generated@@51 $generated@@179))
)))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@181 Int) ) (!  (=> ($generated@@180 $generated@@181) (forall (($generated@@182 T@U) ) (!  (=> (= (type $generated@@182) $generated@@45) ($generated@@50 $generated@@182 $generated@@181))
 :pattern ( ($generated@@50 $generated@@182 $generated@@181))
)))
 :pattern ( ($generated@@180 $generated@@181))
))))
(assert  (=> (<= 0 $generated@@49) (forall (($generated@@184 Int) ) (!  (=> (or ($generated@@183 $generated@@184) (not (= 0 $generated@@49))) true)
 :pattern ( ($generated@@180 $generated@@184))
))))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@185 Int) ) (!  (=> (forall (($generated@@186 T@U) ) (!  (=> (= (type $generated@@186) $generated@@45) ($generated@@50 $generated@@186 $generated@@185))
 :pattern ( ($generated@@50 $generated@@186 $generated@@185))
)) ($generated@@180 $generated@@185))
 :pattern ( ($generated@@180 $generated@@185))
))))
(assert (forall (($generated@@188 Int) ) (!  (=> (<= 0 $generated@@188) (and ($generated@@187 ($generated@@174 $generated@@188)) (= ($generated@@54 ($generated@@174 $generated@@188)) $generated@@188)))
 :pattern ( ($generated@@174 $generated@@188))
)))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@189 T@U) ($generated@@190 Int) ) (!  (=> (and (= (type $generated@@189) $generated@@45) (or ($generated@@53 $generated@@189 $generated@@190) (not (= 1 $generated@@49)))) (and (=> (=> (< 0 ($generated@@54 $generated@@189)) (< $generated@@190 100)) (=> (= ($generated@@52 0) ($generated@@54 $generated@@189)) (forall (($generated@@191 T@U) ) (!  (=> (and (= (type $generated@@191) $generated@@45) ($generated@@44 $generated@@191 $generated@@189)) ($generated@@53 $generated@@191 $generated@@190))
 :pattern ( ($generated@@50 $generated@@191 $generated@@190))
)))) (= ($generated@@50 $generated@@189 $generated@@190)  (and (=> (< 0 ($generated@@54 $generated@@189)) (< $generated@@190 100)) (=> (= ($generated@@52 0) ($generated@@54 $generated@@189)) (forall (($generated@@192 T@U) ) (!  (=> (and (= (type $generated@@192) $generated@@45) ($generated@@44 $generated@@192 $generated@@189)) ($generated@@50 $generated@@192 $generated@@190))
 :pattern ( ($generated@@50 $generated@@192 $generated@@190))
)))))))
 :pattern ( ($generated@@50 $generated@@189 $generated@@190))
))))
(assert  (=> (<= 0 $generated@@49) (forall (($generated@@193 Int) ) (!  (=> (or ($generated@@183 $generated@@193) (not (= 0 $generated@@49))) (= ($generated@@180 $generated@@193) (< $generated@@193 100)))
 :pattern ( ($generated@@180 $generated@@193))
))))
(assert (forall (($generated@@194 T@U) ($generated@@195 T@U) ) (!  (=> (and (= (type $generated@@194) $generated@@45) (= (type $generated@@195) $generated@@45)) (or (or ($generated@@44 $generated@@194 $generated@@195) (= $generated@@194 $generated@@195)) ($generated@@44 $generated@@195 $generated@@194)))
 :pattern ( ($generated@@44 $generated@@194 $generated@@195) ($generated@@44 $generated@@195 $generated@@194))
)))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@196 T@U) ($generated@@197 Int) ) (!  (=> (and (= (type $generated@@196) $generated@@45) (or ($generated@@53 $generated@@196 $generated@@197) (not (= 1 $generated@@49)))) true)
 :pattern ( ($generated@@50 $generated@@196 $generated@@197))
))))
(assert (forall (($generated@@198 T@U) ) (!  (=> (= (type $generated@@198) $generated@@45) (<= 0 ($generated@@54 $generated@@198)))
 :pattern ( ($generated@@54 $generated@@198))
)))
(assert  (and (forall (($generated@@201 T@U) ) (! (= (type ($generated@@199 $generated@@201)) $generated@@45)
 :pattern ( ($generated@@199 $generated@@201))
)) (forall (($generated@@202 T@T) ($generated@@203 T@U) ) (! (= (type ($generated@@200 $generated@@202 $generated@@203)) $generated@@202)
 :pattern ( ($generated@@200 $generated@@202 $generated@@203))
))))
(assert (forall (($generated@@204 T@U) ) (! (let (($generated@@205 (type $generated@@204)))
(= ($generated@@200 $generated@@205 ($generated@@199 $generated@@204)) $generated@@204))
 :pattern ( ($generated@@199 $generated@@204))
)))
(assert (forall (($generated@@206 T@U) ($generated@@207 T@U) ) (!  (=> (and (= (type $generated@@206) $generated@@45) (= (type $generated@@207) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@206 $generated@@207) (not (= $generated@@206 $generated@@207))) (=> (and ($generated@@187 $generated@@206) (not ($generated@@187 $generated@@207))) ($generated@@44 $generated@@206 $generated@@207))) (=> (and ($generated@@187 $generated@@206) ($generated@@187 $generated@@207)) (= ($generated@@44 $generated@@206 $generated@@207) (< ($generated@@54 $generated@@206) ($generated@@54 $generated@@207))))) (=> (and ($generated@@44 $generated@@206 $generated@@207) ($generated@@187 $generated@@207)) ($generated@@187 $generated@@206))))
 :pattern ( ($generated@@44 $generated@@206 $generated@@207))
)))
(assert (forall (($generated@@208 T@U) ) (!  (=> (and (= (type $generated@@208) $generated@@45) ($generated@@187 $generated@@208)) (= $generated@@208 ($generated@@174 ($generated@@54 $generated@@208))))
 :pattern ( ($generated@@54 $generated@@208))
 :pattern ( ($generated@@187 $generated@@208))
)))
(assert (forall (($generated@@209 Int) ) (! (= ($generated@@199 ($generated@@8 ($generated@@52 $generated@@209))) ($generated@@51 ($generated@@199 ($generated@@8 $generated@@209))))
 :pattern ( ($generated@@199 ($generated@@8 ($generated@@52 $generated@@209))))
)))
(assert (forall (($generated@@210 T@U) ) (! (= ($generated@@199 ($generated@@51 $generated@@210)) ($generated@@51 ($generated@@199 $generated@@210)))
 :pattern ( ($generated@@199 ($generated@@51 $generated@@210)))
)))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@211 T@U) ($generated@@212 Int) ) (!  (=> (and (= (type $generated@@211) $generated@@45) (or ($generated@@53 ($generated@@51 $generated@@211) $generated@@212) (not (= 1 $generated@@49)))) (and (=> (=> (< 0 ($generated@@54 $generated@@211)) (< $generated@@212 100)) (=> (= ($generated@@52 0) ($generated@@54 $generated@@211)) (forall (($generated@@213 T@U) ) (!  (=> (and (= (type $generated@@213) $generated@@45) ($generated@@44 $generated@@213 $generated@@211)) ($generated@@53 $generated@@213 $generated@@212))
 :pattern ( ($generated@@50 $generated@@213 $generated@@212))
)))) (= ($generated@@50 ($generated@@51 $generated@@211) $generated@@212)  (and (=> (< 0 ($generated@@54 $generated@@211)) (< $generated@@212 100)) (=> (= ($generated@@52 0) ($generated@@54 $generated@@211)) (forall (($generated@@214 T@U) ) (!  (=> (and (= (type $generated@@214) $generated@@45) ($generated@@44 $generated@@214 $generated@@211)) ($generated@@50 $generated@@214 $generated@@212))
 :pattern ( ($generated@@50 $generated@@214 $generated@@212))
)))))))
 :weight 3
 :pattern ( ($generated@@50 ($generated@@51 $generated@@211) $generated@@212))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@215 () T@U)
(declare-fun $generated@@216 () T@U)
(declare-fun $generated@@217 () T@U)
(declare-fun $generated@@218 () T@U)
(declare-fun $generated@@219 () Int)
(declare-fun $generated@@220 (T@U) Bool)
(declare-fun $generated@@221 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@215) ($generated@@74 $generated@@64 $generated@@4)) (= (type $generated@@216) $generated@@64)) (= (type $generated@@217) ($generated@@65 $generated@@64 $generated@@66))) (= (type $generated@@218) ($generated@@67 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@222  (=> (and (and (= $generated@@215 ($generated@@62 $generated@@216 $generated@@217 $generated@@218 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@183 $generated@@219)) (or ($generated@@180 $generated@@219) (< $generated@@219 100)))))
(let (($generated@@223  (=> (and (and (and ($generated@@220 $generated@@217) ($generated@@221 $generated@@217)) (= 1 $generated@@49)) (and (< $generated@@219 100) (= (ControlFlow 0 3) 2))) $generated@@222)))
$generated@@223)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U) T@U)
(declare-fun $generated@@57 (T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (Int) Int)
(declare-fun $generated@@164 (T@U) T@U)
(declare-fun $generated@@168 (Int) T@U)
(declare-fun $generated@@169 (T@U) Bool)
(declare-fun $generated@@170 (T@U) Int)
(declare-fun $generated@@175 (T@U Int) Bool)
(declare-fun $generated@@179 (T@U) T@U)
(declare-fun $generated@@180 (T@T T@U) T@U)
(declare-fun $generated@@188 (T@U Int) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (= ($generated@@1 ($generated@@53 $generated@@66 $generated@@67)) 7)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@58 ($generated@@53 $generated@@68 $generated@@69)) $generated@@68)
 :pattern ( ($generated@@53 $generated@@68 $generated@@69))
))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@59 ($generated@@53 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@53 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@59 (type $generated@@72))))
(= (type ($generated@@57 $generated@@72 $generated@@73)) $generated@@74))
 :pattern ( ($generated@@57 $generated@@72 $generated@@73))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 (type $generated@@77)))
(let (($generated@@79 (type $generated@@76)))
(= (type ($generated@@60 $generated@@75 $generated@@76 $generated@@77)) ($generated@@53 $generated@@79 $generated@@78))))
 :pattern ( ($generated@@60 $generated@@75 $generated@@76 $generated@@77))
))) (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@59 (type $generated@@80))))
 (=> (= (type $generated@@82) $generated@@83) (= ($generated@@57 ($generated@@60 $generated@@80 $generated@@81 $generated@@82) $generated@@81) $generated@@82)))
 :weight 0
))) (and (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@86 $generated@@87) (= ($generated@@57 ($generated@@60 $generated@@85 $generated@@86 $generated@@84) $generated@@87) ($generated@@57 $generated@@85 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or true (= ($generated@@57 ($generated@@60 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@57 $generated@@89 $generated@@91)))
 :weight 0
)))) (forall (($generated@@92 T@T) ) (= ($generated@@1 ($generated@@55 $generated@@92)) 8))) (forall (($generated@@93 T@T) ) (! (= ($generated@@51 ($generated@@55 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@55 $generated@@93))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@51 (type $generated@@95))))
(= (type ($generated@@56 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@56 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@54) 9)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@61 $generated@@97 $generated@@98 $generated@@99)) $generated@@54)
 :pattern ( ($generated@@61 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@51 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@56 ($generated@@61 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@56 ($generated@@61 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@56 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@56 ($generated@@61 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@56 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@52) 10)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@112 $generated@@113)) 11))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@63 ($generated@@62 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@62 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@64 ($generated@@62 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@62 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@64 (type $generated@@118))))
(= (type ($generated@@49 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@49 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@62 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@64 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@49 ($generated@@65 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@49 ($generated@@65 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@49 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@49 ($generated@@65 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@49 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@49 ($generated@@65 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@49 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@62 $generated@@52 $generated@@4))
 :pattern ( ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@51 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@52) (= (type $generated@@156) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@157) ($generated@@55 $generated@@4))) (= (type $generated@@159) $generated@@52)) (= (type $generated@@160) ($generated@@55 $generated@@161))) (= ($generated@@0 ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@56 ($generated@@57 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 Int) ) (! (= ($generated@@162 $generated@@163) $generated@@163)
 :pattern ( ($generated@@162 $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ) (! (let (($generated@@166 (type $generated@@165)))
(= (type ($generated@@164 $generated@@165)) $generated@@166))
 :pattern ( ($generated@@164 $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! (= ($generated@@164 $generated@@167) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167))
)))
(assert (forall (($generated@@171 Int) ) (! (= (type ($generated@@168 $generated@@171)) $generated@@45)
 :pattern ( ($generated@@168 $generated@@171))
)))
(assert (forall (($generated@@172 Int) ) (!  (=> (<= 0 $generated@@172) (and ($generated@@169 ($generated@@168 $generated@@172)) (= ($generated@@170 ($generated@@168 $generated@@172)) $generated@@172)))
 :pattern ( ($generated@@168 $generated@@172))
)))
(assert (forall (($generated@@173 T@U) ($generated@@174 T@U) ) (!  (=> (and (= (type $generated@@173) $generated@@45) (= (type $generated@@174) $generated@@45)) (or (or ($generated@@44 $generated@@173 $generated@@174) (= $generated@@173 $generated@@174)) ($generated@@44 $generated@@174 $generated@@173)))
 :pattern ( ($generated@@44 $generated@@173 $generated@@174) ($generated@@44 $generated@@174 $generated@@173))
)))
(assert  (=> true (forall (($generated@@176 Int) ($generated@@177 T@U) ) (!  (=> (and (= (type $generated@@177) $generated@@45) (= $generated@@177 ($generated@@168 0))) ($generated@@175 $generated@@177 $generated@@176))
 :pattern ( ($generated@@175 $generated@@177 $generated@@176))
))))
(assert (forall (($generated@@178 T@U) ) (!  (=> (= (type $generated@@178) $generated@@45) (<= 0 ($generated@@170 $generated@@178)))
 :pattern ( ($generated@@170 $generated@@178))
)))
(assert  (and (forall (($generated@@181 T@U) ) (! (= (type ($generated@@179 $generated@@181)) $generated@@45)
 :pattern ( ($generated@@179 $generated@@181))
)) (forall (($generated@@182 T@T) ($generated@@183 T@U) ) (! (= (type ($generated@@180 $generated@@182 $generated@@183)) $generated@@182)
 :pattern ( ($generated@@180 $generated@@182 $generated@@183))
))))
(assert (forall (($generated@@184 T@U) ) (! (let (($generated@@185 (type $generated@@184)))
(= ($generated@@180 $generated@@185 ($generated@@179 $generated@@184)) $generated@@184))
 :pattern ( ($generated@@179 $generated@@184))
)))
(assert (forall (($generated@@186 T@U) ($generated@@187 T@U) ) (!  (=> (and (= (type $generated@@186) $generated@@45) (= (type $generated@@187) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@186 $generated@@187) (not (= $generated@@186 $generated@@187))) (=> (and ($generated@@169 $generated@@186) (not ($generated@@169 $generated@@187))) ($generated@@44 $generated@@186 $generated@@187))) (=> (and ($generated@@169 $generated@@186) ($generated@@169 $generated@@187)) (= ($generated@@44 $generated@@186 $generated@@187) (< ($generated@@170 $generated@@186) ($generated@@170 $generated@@187))))) (=> (and ($generated@@44 $generated@@186 $generated@@187) ($generated@@169 $generated@@187)) ($generated@@169 $generated@@186))))
 :pattern ( ($generated@@44 $generated@@186 $generated@@187))
)))
(assert  (=> true (forall (($generated@@189 T@U) ($generated@@190 Int) ) (!  (=> (and (= (type $generated@@189) $generated@@45) true) (and (=> (=> (< 0 ($generated@@170 $generated@@189)) (< $generated@@190 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@189)) (forall (($generated@@191 T@U) ) (!  (=> (and (= (type $generated@@191) $generated@@45) ($generated@@44 $generated@@191 $generated@@189)) ($generated@@188 $generated@@191 $generated@@190))
 :pattern ( ($generated@@175 $generated@@191 $generated@@190))
)))) (= ($generated@@175 $generated@@189 $generated@@190)  (and (=> (< 0 ($generated@@170 $generated@@189)) (< $generated@@190 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@189)) (forall (($generated@@192 T@U) ) (!  (=> (and (= (type $generated@@192) $generated@@45) ($generated@@44 $generated@@192 $generated@@189)) ($generated@@175 $generated@@192 $generated@@190))
 :pattern ( ($generated@@175 $generated@@192 $generated@@190))
)))))))
 :pattern ( ($generated@@175 $generated@@189 $generated@@190))
))))
(assert  (=> true (forall (($generated@@193 T@U) ($generated@@194 Int) ) (!  (=> (and (= (type $generated@@193) $generated@@45) true) (and (=> (=> (< 0 ($generated@@170 $generated@@193)) (< $generated@@194 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@193)) (forall (($generated@@195 T@U) ) (!  (=> (and (= (type $generated@@195) $generated@@45) ($generated@@44 $generated@@195 $generated@@193)) ($generated@@188 $generated@@195 $generated@@194))
 :pattern ( ($generated@@175 $generated@@195 $generated@@194))
)))) (= ($generated@@175 ($generated@@164 $generated@@193) $generated@@194)  (and (=> (< 0 ($generated@@170 $generated@@193)) (< $generated@@194 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@193)) (forall (($generated@@196 T@U) ) (!  (=> (and (= (type $generated@@196) $generated@@45) ($generated@@44 $generated@@196 $generated@@193)) ($generated@@175 $generated@@196 $generated@@194))
 :pattern ( ($generated@@175 $generated@@196 $generated@@194))
)))))))
 :weight 3
 :pattern ( ($generated@@175 ($generated@@164 $generated@@193) $generated@@194))
))))
(assert (forall (($generated@@197 T@U) ) (!  (=> (and (= (type $generated@@197) $generated@@45) ($generated@@169 $generated@@197)) (= $generated@@197 ($generated@@168 ($generated@@170 $generated@@197))))
 :pattern ( ($generated@@170 $generated@@197))
 :pattern ( ($generated@@169 $generated@@197))
)))
(assert  (=> true (forall (($generated@@198 T@U) ($generated@@199 Int) ) (!  (=> (and (= (type $generated@@198) $generated@@45) true) (and (=> (=> (< 0 ($generated@@170 $generated@@198)) (< $generated@@199 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@198)) (forall (($generated@@200 T@U) ) (!  (=> (and (= (type $generated@@200) $generated@@45) ($generated@@44 $generated@@200 $generated@@198)) ($generated@@188 $generated@@200 $generated@@199))
 :pattern ( ($generated@@175 $generated@@200 $generated@@199))
)))) (= ($generated@@175 ($generated@@164 $generated@@198) ($generated@@162 $generated@@199))  (and (=> (< 0 ($generated@@170 $generated@@198)) (< $generated@@199 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@198)) (forall (($generated@@201 T@U) ) (!  (=> (and (= (type $generated@@201) $generated@@45) ($generated@@44 $generated@@201 $generated@@198)) ($generated@@175 $generated@@201 $generated@@199))
 :pattern ( ($generated@@175 $generated@@201 $generated@@199))
)))))))
 :weight 3
 :pattern ( ($generated@@175 ($generated@@164 $generated@@198) ($generated@@162 $generated@@199)))
))))
(assert  (=> true (forall (($generated@@202 T@U) ($generated@@203 Int) ) (!  (=> (and (= (type $generated@@202) $generated@@45) true) true)
 :pattern ( ($generated@@175 $generated@@202 $generated@@203))
))))
(assert (forall (($generated@@204 Int) ) (! (= ($generated@@179 ($generated@@8 ($generated@@162 $generated@@204))) ($generated@@164 ($generated@@179 ($generated@@8 $generated@@204))))
 :pattern ( ($generated@@179 ($generated@@8 ($generated@@162 $generated@@204))))
)))
(assert (forall (($generated@@205 T@U) ) (! (= ($generated@@179 ($generated@@164 $generated@@205)) ($generated@@164 ($generated@@179 $generated@@205)))
 :pattern ( ($generated@@179 ($generated@@164 $generated@@205)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@206 () T@U)
(declare-fun $generated@@207 () T@U)
(declare-fun $generated@@208 () T@U)
(declare-fun $generated@@209 () T@U)
(declare-fun $generated@@210 () Int)
(declare-fun $generated@@211 (T@U) Bool)
(declare-fun $generated@@212 (T@U) Bool)
(declare-fun $generated@@213 () Int)
(assert  (and (and (and (= (type $generated@@206) ($generated@@62 $generated@@52 $generated@@4)) (= (type $generated@@207) $generated@@52)) (= (type $generated@@208) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@209) ($generated@@55 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@214  (=> (= $generated@@206 ($generated@@50 $generated@@207 $generated@@208 $generated@@209 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@188 ($generated@@164 ($generated@@168 3)) $generated@@210) (or ($generated@@175 ($generated@@164 ($generated@@168 3)) $generated@@210) (=> ($generated@@0 ($generated@@164 ($generated@@11 (< 0 ($generated@@170 ($generated@@164 ($generated@@168 3))))))) (< $generated@@210 100))))) (=> (=> ($generated@@188 ($generated@@164 ($generated@@168 3)) $generated@@210) (or ($generated@@175 ($generated@@164 ($generated@@168 3)) $generated@@210) (=> ($generated@@0 ($generated@@164 ($generated@@11 (< 0 ($generated@@170 ($generated@@164 ($generated@@168 3))))))) (< $generated@@210 100)))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@188 ($generated@@164 ($generated@@168 3)) $generated@@210) (or ($generated@@175 ($generated@@164 ($generated@@168 3)) $generated@@210) (=> (= ($generated@@162 0) ($generated@@162 ($generated@@170 ($generated@@164 ($generated@@168 3))))) (forall (($generated@@215 T@U) ) (!  (=> (and (= (type $generated@@215) $generated@@45) ($generated@@44 $generated@@215 ($generated@@168 3))) ($generated@@175 $generated@@215 $generated@@210))
 :pattern ( ($generated@@175 $generated@@215 $generated@@210))
)))))))))))
(let (($generated@@216  (=> (and (and (and ($generated@@211 $generated@@208) ($generated@@212 $generated@@208)) (= 0 $generated@@213)) (and (< $generated@@210 100) (= (ControlFlow 0 4) 2))) $generated@@214)))
$generated@@216)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U) T@U)
(declare-fun $generated@@57 (T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (Int) Bool)
(declare-fun $generated@@164 (Int) Int)
(declare-fun $generated@@166 (T@U) T@U)
(declare-fun $generated@@170 (Int) T@U)
(declare-fun $generated@@171 (T@U) Bool)
(declare-fun $generated@@172 (T@U) Int)
(declare-fun $generated@@177 (T@U Int) Bool)
(declare-fun $generated@@183 (T@U) T@U)
(declare-fun $generated@@184 (T@T T@U) T@U)
(declare-fun $generated@@192 (T@U Int) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (= ($generated@@1 ($generated@@53 $generated@@66 $generated@@67)) 7)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@58 ($generated@@53 $generated@@68 $generated@@69)) $generated@@68)
 :pattern ( ($generated@@53 $generated@@68 $generated@@69))
))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@59 ($generated@@53 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@53 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@59 (type $generated@@72))))
(= (type ($generated@@57 $generated@@72 $generated@@73)) $generated@@74))
 :pattern ( ($generated@@57 $generated@@72 $generated@@73))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 (type $generated@@77)))
(let (($generated@@79 (type $generated@@76)))
(= (type ($generated@@60 $generated@@75 $generated@@76 $generated@@77)) ($generated@@53 $generated@@79 $generated@@78))))
 :pattern ( ($generated@@60 $generated@@75 $generated@@76 $generated@@77))
))) (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@59 (type $generated@@80))))
 (=> (= (type $generated@@82) $generated@@83) (= ($generated@@57 ($generated@@60 $generated@@80 $generated@@81 $generated@@82) $generated@@81) $generated@@82)))
 :weight 0
))) (and (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@86 $generated@@87) (= ($generated@@57 ($generated@@60 $generated@@85 $generated@@86 $generated@@84) $generated@@87) ($generated@@57 $generated@@85 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or true (= ($generated@@57 ($generated@@60 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@57 $generated@@89 $generated@@91)))
 :weight 0
)))) (forall (($generated@@92 T@T) ) (= ($generated@@1 ($generated@@55 $generated@@92)) 8))) (forall (($generated@@93 T@T) ) (! (= ($generated@@51 ($generated@@55 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@55 $generated@@93))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@51 (type $generated@@95))))
(= (type ($generated@@56 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@56 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@54) 9)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@61 $generated@@97 $generated@@98 $generated@@99)) $generated@@54)
 :pattern ( ($generated@@61 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@51 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@56 ($generated@@61 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@56 ($generated@@61 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@56 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@56 ($generated@@61 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@56 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@52) 10)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@112 $generated@@113)) 11))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@63 ($generated@@62 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@62 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@64 ($generated@@62 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@62 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@64 (type $generated@@118))))
(= (type ($generated@@49 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@49 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@62 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@64 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@49 ($generated@@65 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@49 ($generated@@65 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@49 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@49 ($generated@@65 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@49 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@49 ($generated@@65 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@49 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@62 $generated@@52 $generated@@4))
 :pattern ( ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@51 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@52) (= (type $generated@@156) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@157) ($generated@@55 $generated@@4))) (= (type $generated@@159) $generated@@52)) (= (type $generated@@160) ($generated@@55 $generated@@161))) (= ($generated@@0 ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@56 ($generated@@57 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert  (=> true (forall (($generated@@163 Int) ) (!  (=> true (= ($generated@@162 $generated@@163) (< $generated@@163 100)))
 :pattern ( ($generated@@162 $generated@@163))
))))
(assert (forall (($generated@@165 Int) ) (! (= ($generated@@164 $generated@@165) $generated@@165)
 :pattern ( ($generated@@164 $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! (let (($generated@@168 (type $generated@@167)))
(= (type ($generated@@166 $generated@@167)) $generated@@168))
 :pattern ( ($generated@@166 $generated@@167))
)))
(assert (forall (($generated@@169 T@U) ) (! (= ($generated@@166 $generated@@169) $generated@@169)
 :pattern ( ($generated@@166 $generated@@169))
)))
(assert (forall (($generated@@173 Int) ) (! (= (type ($generated@@170 $generated@@173)) $generated@@45)
 :pattern ( ($generated@@170 $generated@@173))
)))
(assert (forall (($generated@@174 Int) ) (!  (=> (<= 0 $generated@@174) (and ($generated@@171 ($generated@@170 $generated@@174)) (= ($generated@@172 ($generated@@170 $generated@@174)) $generated@@174)))
 :pattern ( ($generated@@170 $generated@@174))
)))
(assert (forall (($generated@@175 T@U) ($generated@@176 T@U) ) (!  (=> (and (= (type $generated@@175) $generated@@45) (= (type $generated@@176) $generated@@45)) (or (or ($generated@@44 $generated@@175 $generated@@176) (= $generated@@175 $generated@@176)) ($generated@@44 $generated@@176 $generated@@175)))
 :pattern ( ($generated@@44 $generated@@175 $generated@@176) ($generated@@44 $generated@@176 $generated@@175))
)))
(assert  (=> true (forall (($generated@@178 Int) ($generated@@179 T@U) ) (!  (=> (and (= (type $generated@@179) $generated@@45) (= $generated@@179 ($generated@@170 0))) ($generated@@177 $generated@@179 $generated@@178))
 :pattern ( ($generated@@177 $generated@@179 $generated@@178))
))))
(assert  (=> true (forall (($generated@@180 Int) ) (!  (=> ($generated@@162 $generated@@180) (forall (($generated@@181 T@U) ) (!  (=> (= (type $generated@@181) $generated@@45) ($generated@@177 $generated@@181 $generated@@180))
 :pattern ( ($generated@@177 $generated@@181 $generated@@180))
)))
 :pattern ( ($generated@@162 $generated@@180))
))))
(assert (forall (($generated@@182 T@U) ) (!  (=> (= (type $generated@@182) $generated@@45) (<= 0 ($generated@@172 $generated@@182)))
 :pattern ( ($generated@@172 $generated@@182))
)))
(assert  (and (forall (($generated@@185 T@U) ) (! (= (type ($generated@@183 $generated@@185)) $generated@@45)
 :pattern ( ($generated@@183 $generated@@185))
)) (forall (($generated@@186 T@T) ($generated@@187 T@U) ) (! (= (type ($generated@@184 $generated@@186 $generated@@187)) $generated@@186)
 :pattern ( ($generated@@184 $generated@@186 $generated@@187))
))))
(assert (forall (($generated@@188 T@U) ) (! (let (($generated@@189 (type $generated@@188)))
(= ($generated@@184 $generated@@189 ($generated@@183 $generated@@188)) $generated@@188))
 :pattern ( ($generated@@183 $generated@@188))
)))
(assert (forall (($generated@@190 T@U) ($generated@@191 T@U) ) (!  (=> (and (= (type $generated@@190) $generated@@45) (= (type $generated@@191) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@190 $generated@@191) (not (= $generated@@190 $generated@@191))) (=> (and ($generated@@171 $generated@@190) (not ($generated@@171 $generated@@191))) ($generated@@44 $generated@@190 $generated@@191))) (=> (and ($generated@@171 $generated@@190) ($generated@@171 $generated@@191)) (= ($generated@@44 $generated@@190 $generated@@191) (< ($generated@@172 $generated@@190) ($generated@@172 $generated@@191))))) (=> (and ($generated@@44 $generated@@190 $generated@@191) ($generated@@171 $generated@@191)) ($generated@@171 $generated@@190))))
 :pattern ( ($generated@@44 $generated@@190 $generated@@191))
)))
(assert  (=> true (forall (($generated@@193 T@U) ($generated@@194 Int) ) (!  (=> (and (= (type $generated@@193) $generated@@45) true) (and (=> (=> (< 0 ($generated@@172 $generated@@193)) (< $generated@@194 100)) (=> (= ($generated@@164 0) ($generated@@172 $generated@@193)) (forall (($generated@@195 T@U) ) (!  (=> (and (= (type $generated@@195) $generated@@45) ($generated@@44 $generated@@195 $generated@@193)) ($generated@@192 $generated@@195 $generated@@194))
 :pattern ( ($generated@@177 $generated@@195 $generated@@194))
)))) (= ($generated@@177 $generated@@193 $generated@@194)  (and (=> (< 0 ($generated@@172 $generated@@193)) (< $generated@@194 100)) (=> (= ($generated@@164 0) ($generated@@172 $generated@@193)) (forall (($generated@@196 T@U) ) (!  (=> (and (= (type $generated@@196) $generated@@45) ($generated@@44 $generated@@196 $generated@@193)) ($generated@@177 $generated@@196 $generated@@194))
 :pattern ( ($generated@@177 $generated@@196 $generated@@194))
)))))))
 :pattern ( ($generated@@177 $generated@@193 $generated@@194))
))))
(assert  (=> true (forall (($generated@@197 Int) ) (!  (=> (forall (($generated@@198 T@U) ) (!  (=> (= (type $generated@@198) $generated@@45) ($generated@@177 $generated@@198 $generated@@197))
 :pattern ( ($generated@@177 $generated@@198 $generated@@197))
)) ($generated@@162 $generated@@197))
 :pattern ( ($generated@@162 $generated@@197))
))))
(assert  (=> true (forall (($generated@@199 T@U) ($generated@@200 Int) ) (!  (=> (and (= (type $generated@@199) $generated@@45) true) (and (=> (=> (< 0 ($generated@@172 $generated@@199)) (< $generated@@200 100)) (=> (= ($generated@@164 0) ($generated@@172 $generated@@199)) (forall (($generated@@201 T@U) ) (!  (=> (and (= (type $generated@@201) $generated@@45) ($generated@@44 $generated@@201 $generated@@199)) ($generated@@192 $generated@@201 $generated@@200))
 :pattern ( ($generated@@177 $generated@@201 $generated@@200))
)))) (= ($generated@@177 ($generated@@166 $generated@@199) $generated@@200)  (and (=> (< 0 ($generated@@172 $generated@@199)) (< $generated@@200 100)) (=> (= ($generated@@164 0) ($generated@@172 $generated@@199)) (forall (($generated@@202 T@U) ) (!  (=> (and (= (type $generated@@202) $generated@@45) ($generated@@44 $generated@@202 $generated@@199)) ($generated@@177 $generated@@202 $generated@@200))
 :pattern ( ($generated@@177 $generated@@202 $generated@@200))
)))))))
 :weight 3
 :pattern ( ($generated@@177 ($generated@@166 $generated@@199) $generated@@200))
))))
(assert (forall (($generated@@203 T@U) ) (!  (=> (and (= (type $generated@@203) $generated@@45) ($generated@@171 $generated@@203)) (= $generated@@203 ($generated@@170 ($generated@@172 $generated@@203))))
 :pattern ( ($generated@@172 $generated@@203))
 :pattern ( ($generated@@171 $generated@@203))
)))
(assert  (=> true (forall (($generated@@204 T@U) ($generated@@205 Int) ) (!  (=> (and (= (type $generated@@204) $generated@@45) true) (and (=> (=> (< 0 ($generated@@172 $generated@@204)) (< $generated@@205 100)) (=> (= ($generated@@164 0) ($generated@@172 $generated@@204)) (forall (($generated@@206 T@U) ) (!  (=> (and (= (type $generated@@206) $generated@@45) ($generated@@44 $generated@@206 $generated@@204)) ($generated@@192 $generated@@206 $generated@@205))
 :pattern ( ($generated@@177 $generated@@206 $generated@@205))
)))) (= ($generated@@177 ($generated@@166 $generated@@204) ($generated@@164 $generated@@205))  (and (=> (< 0 ($generated@@172 $generated@@204)) (< $generated@@205 100)) (=> (= ($generated@@164 0) ($generated@@172 $generated@@204)) (forall (($generated@@207 T@U) ) (!  (=> (and (= (type $generated@@207) $generated@@45) ($generated@@44 $generated@@207 $generated@@204)) ($generated@@177 $generated@@207 $generated@@205))
 :pattern ( ($generated@@177 $generated@@207 $generated@@205))
)))))))
 :weight 3
 :pattern ( ($generated@@177 ($generated@@166 $generated@@204) ($generated@@164 $generated@@205)))
))))
(assert  (=> true (forall (($generated@@208 Int) ) (!  (=> true true)
 :pattern ( ($generated@@162 $generated@@208))
))))
(assert  (=> true (forall (($generated@@209 T@U) ($generated@@210 Int) ) (!  (=> (and (= (type $generated@@209) $generated@@45) true) true)
 :pattern ( ($generated@@177 $generated@@209 $generated@@210))
))))
(assert (forall (($generated@@211 Int) ) (! (= ($generated@@183 ($generated@@8 ($generated@@164 $generated@@211))) ($generated@@166 ($generated@@183 ($generated@@8 $generated@@211))))
 :pattern ( ($generated@@183 ($generated@@8 ($generated@@164 $generated@@211))))
)))
(assert (forall (($generated@@212 T@U) ) (! (= ($generated@@183 ($generated@@166 $generated@@212)) ($generated@@166 ($generated@@183 $generated@@212)))
 :pattern ( ($generated@@183 ($generated@@166 $generated@@212)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@213 () T@U)
(declare-fun $generated@@214 () T@U)
(declare-fun $generated@@215 () T@U)
(declare-fun $generated@@216 () T@U)
(declare-fun $generated@@217 (Int) Bool)
(declare-fun $generated@@218 () Int)
(declare-fun $generated@@219 (T@U) Bool)
(declare-fun $generated@@220 (T@U) Bool)
(declare-fun $generated@@221 () Int)
(assert  (and (and (and (= (type $generated@@213) ($generated@@62 $generated@@52 $generated@@4)) (= (type $generated@@214) $generated@@52)) (= (type $generated@@215) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@216) ($generated@@55 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@222  (=> (and (and (= $generated@@213 ($generated@@50 $generated@@214 $generated@@215 $generated@@216 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@217 $generated@@218)) (or ($generated@@162 $generated@@218) (< $generated@@218 100)))))
(let (($generated@@223  (=> (and (and (and ($generated@@219 $generated@@215) ($generated@@220 $generated@@215)) (= 0 $generated@@221)) (and (< $generated@@218 100) (= (ControlFlow 0 3) 2))) $generated@@222)))
$generated@@223)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 () Int)
(declare-fun $generated@@50 (T@U Int) Bool)
(declare-fun $generated@@51 (T@U) T@U)
(declare-fun $generated@@52 (Int) Int)
(declare-fun $generated@@53 (T@U Int) Bool)
(declare-fun $generated@@54 (T@U) Int)
(declare-fun $generated@@61 (T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@T T@T) T@T)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 (T@U T@U) T@U)
(declare-fun $generated@@69 (T@U T@U) T@U)
(declare-fun $generated@@70 (T@T) T@T)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@72 (T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@76 (T@T) T@T)
(declare-fun $generated@@77 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@174 (Int) T@U)
(declare-fun $generated@@180 (T@U) Bool)
(declare-fun $generated@@191 (T@U) T@U)
(declare-fun $generated@@192 (T@T T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert (forall (($generated@@55 T@U) ) (! (let (($generated@@56 (type $generated@@55)))
(= (type ($generated@@51 $generated@@55)) $generated@@56))
 :pattern ( ($generated@@51 $generated@@55))
)))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@57 T@U) ($generated@@58 Int) ) (!  (=> (and (= (type $generated@@57) $generated@@45) (or ($generated@@53 ($generated@@51 $generated@@57) ($generated@@52 $generated@@58)) (not (= 1 $generated@@49)))) (and (=> (=> (< 0 ($generated@@54 $generated@@57)) (< $generated@@58 100)) (=> (= ($generated@@52 0) ($generated@@54 $generated@@57)) (forall (($generated@@59 T@U) ) (!  (=> (and (= (type $generated@@59) $generated@@45) ($generated@@44 $generated@@59 $generated@@57)) ($generated@@53 $generated@@59 $generated@@58))
 :pattern ( ($generated@@50 $generated@@59 $generated@@58))
)))) (= ($generated@@50 ($generated@@51 $generated@@57) ($generated@@52 $generated@@58))  (and (=> (< 0 ($generated@@54 $generated@@57)) (< $generated@@58 100)) (=> (= ($generated@@52 0) ($generated@@54 $generated@@57)) (forall (($generated@@60 T@U) ) (!  (=> (and (= (type $generated@@60) $generated@@45) ($generated@@44 $generated@@60 $generated@@57)) ($generated@@50 $generated@@60 $generated@@58))
 :pattern ( ($generated@@50 $generated@@60 $generated@@58))
)))))))
 :weight 3
 :pattern ( ($generated@@50 ($generated@@51 $generated@@57) ($generated@@52 $generated@@58)))
))))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ) (= ($generated@@1 ($generated@@65 $generated@@78 $generated@@79)) 7)) (forall (($generated@@80 T@T) ($generated@@81 T@T) ) (! (= ($generated@@70 ($generated@@65 $generated@@80 $generated@@81)) $generated@@80)
 :pattern ( ($generated@@65 $generated@@80 $generated@@81))
))) (forall (($generated@@82 T@T) ($generated@@83 T@T) ) (! (= ($generated@@71 ($generated@@65 $generated@@82 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@65 $generated@@82 $generated@@83))
))) (forall (($generated@@84 T@U) ($generated@@85 T@U) ) (! (let (($generated@@86 ($generated@@71 (type $generated@@84))))
(= (type ($generated@@69 $generated@@84 $generated@@85)) $generated@@86))
 :pattern ( ($generated@@69 $generated@@84 $generated@@85))
))) (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (let (($generated@@90 (type $generated@@89)))
(let (($generated@@91 (type $generated@@88)))
(= (type ($generated@@72 $generated@@87 $generated@@88 $generated@@89)) ($generated@@65 $generated@@91 $generated@@90))))
 :pattern ( ($generated@@72 $generated@@87 $generated@@88 $generated@@89))
))) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (let (($generated@@95 ($generated@@71 (type $generated@@92))))
 (=> (= (type $generated@@94) $generated@@95) (= ($generated@@69 ($generated@@72 $generated@@92 $generated@@93 $generated@@94) $generated@@93) $generated@@94)))
 :weight 0
))) (and (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@98 $generated@@99) (= ($generated@@69 ($generated@@72 $generated@@97 $generated@@98 $generated@@96) $generated@@99) ($generated@@69 $generated@@97 $generated@@99)))
 :weight 0
)) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or true (= ($generated@@69 ($generated@@72 $generated@@101 $generated@@102 $generated@@100) $generated@@103) ($generated@@69 $generated@@101 $generated@@103)))
 :weight 0
)))) (forall (($generated@@104 T@T) ) (= ($generated@@1 ($generated@@67 $generated@@104)) 8))) (forall (($generated@@105 T@T) ) (! (= ($generated@@63 ($generated@@67 $generated@@105)) $generated@@105)
 :pattern ( ($generated@@67 $generated@@105))
))) (forall (($generated@@106 T@U) ($generated@@107 T@U) ) (! (let (($generated@@108 ($generated@@63 (type $generated@@107))))
(= (type ($generated@@68 $generated@@106 $generated@@107)) $generated@@108))
 :pattern ( ($generated@@68 $generated@@106 $generated@@107))
))) (= ($generated@@1 $generated@@66) 9)) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= (type ($generated@@73 $generated@@109 $generated@@110 $generated@@111)) $generated@@66)
 :pattern ( ($generated@@73 $generated@@109 $generated@@110 $generated@@111))
))) (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (let (($generated@@115 ($generated@@63 (type $generated@@113))))
 (=> (= (type $generated@@114) $generated@@115) (= ($generated@@68 ($generated@@73 $generated@@112 $generated@@113 $generated@@114) $generated@@113) $generated@@114)))
 :weight 0
))) (and (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@118 $generated@@119) (= ($generated@@68 ($generated@@73 $generated@@117 $generated@@118 $generated@@116) $generated@@119) ($generated@@68 $generated@@117 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or true (= ($generated@@68 ($generated@@73 $generated@@121 $generated@@122 $generated@@120) $generated@@123) ($generated@@68 $generated@@121 $generated@@123)))
 :weight 0
)))) (= ($generated@@1 $generated@@64) 10)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (= ($generated@@1 ($generated@@74 $generated@@124 $generated@@125)) 11))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@75 ($generated@@74 $generated@@126 $generated@@127)) $generated@@126)
 :pattern ( ($generated@@74 $generated@@126 $generated@@127))
))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@76 ($generated@@74 $generated@@128 $generated@@129)) $generated@@129)
 :pattern ( ($generated@@74 $generated@@128 $generated@@129))
))) (forall (($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (! (let (($generated@@133 ($generated@@76 (type $generated@@130))))
(= (type ($generated@@61 $generated@@130 $generated@@131 $generated@@132)) $generated@@133))
 :pattern ( ($generated@@61 $generated@@130 $generated@@131 $generated@@132))
))) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (let (($generated@@138 (type $generated@@137)))
(let (($generated@@139 (type $generated@@135)))
(= (type ($generated@@77 $generated@@134 $generated@@135 $generated@@136 $generated@@137)) ($generated@@74 $generated@@139 $generated@@138))))
 :pattern ( ($generated@@77 $generated@@134 $generated@@135 $generated@@136 $generated@@137))
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ) (! (let (($generated@@144 ($generated@@76 (type $generated@@140))))
 (=> (= (type $generated@@143) $generated@@144) (= ($generated@@61 ($generated@@77 $generated@@140 $generated@@141 $generated@@142 $generated@@143) $generated@@141 $generated@@142) $generated@@143)))
 :weight 0
))) (and (and (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or (= $generated@@147 $generated@@149) (= ($generated@@61 ($generated@@77 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@61 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ) (!  (or (= $generated@@154 $generated@@156) (= ($generated@@61 ($generated@@77 $generated@@152 $generated@@153 $generated@@154 $generated@@151) $generated@@155 $generated@@156) ($generated@@61 $generated@@152 $generated@@155 $generated@@156)))
 :weight 0
))) (forall (($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ) (!  (or true (= ($generated@@61 ($generated@@77 $generated@@158 $generated@@159 $generated@@160 $generated@@157) $generated@@161 $generated@@162) ($generated@@61 $generated@@158 $generated@@161 $generated@@162)))
 :weight 0
)))) (forall (($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ($generated@@166 Bool) ) (! (= (type ($generated@@62 $generated@@163 $generated@@164 $generated@@165 $generated@@166)) ($generated@@74 $generated@@64 $generated@@4))
 :pattern ( ($generated@@62 $generated@@163 $generated@@164 $generated@@165 $generated@@166))
))))
(assert (forall (($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 Bool) ($generated@@171 T@U) ($generated@@172 T@U) ) (! (let (($generated@@173 ($generated@@63 (type $generated@@172))))
 (=> (and (and (and (and (= (type $generated@@167) $generated@@64) (= (type $generated@@168) ($generated@@65 $generated@@64 $generated@@66))) (= (type $generated@@169) ($generated@@67 $generated@@4))) (= (type $generated@@171) $generated@@64)) (= (type $generated@@172) ($generated@@67 $generated@@173))) (= ($generated@@0 ($generated@@61 ($generated@@62 $generated@@167 $generated@@168 $generated@@169 $generated@@170) $generated@@171 $generated@@172))  (=> (and (not (= $generated@@171 $generated@@167)) ($generated@@0 ($generated@@68 ($generated@@69 $generated@@168 $generated@@171) $generated@@169))) $generated@@170))))
 :pattern ( ($generated@@61 ($generated@@62 $generated@@167 $generated@@168 $generated@@169 $generated@@170) $generated@@171 $generated@@172))
)))
(assert (forall (($generated@@175 Int) ) (! (= (type ($generated@@174 $generated@@175)) $generated@@45)
 :pattern ( ($generated@@174 $generated@@175))
)))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@176 Int) ($generated@@177 T@U) ) (!  (=> (and (= (type $generated@@177) $generated@@45) (= $generated@@177 ($generated@@174 0))) ($generated@@50 $generated@@177 $generated@@176))
 :pattern ( ($generated@@50 $generated@@177 $generated@@176))
))))
(assert (forall (($generated@@178 Int) ) (! (= ($generated@@52 $generated@@178) $generated@@178)
 :pattern ( ($generated@@52 $generated@@178))
)))
(assert (forall (($generated@@179 T@U) ) (! (= ($generated@@51 $generated@@179) $generated@@179)
 :pattern ( ($generated@@51 $generated@@179))
)))
(assert (forall (($generated@@181 Int) ) (!  (=> (<= 0 $generated@@181) (and ($generated@@180 ($generated@@174 $generated@@181)) (= ($generated@@54 ($generated@@174 $generated@@181)) $generated@@181)))
 :pattern ( ($generated@@174 $generated@@181))
)))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@182 T@U) ($generated@@183 Int) ) (!  (=> (and (= (type $generated@@182) $generated@@45) (or ($generated@@53 $generated@@182 $generated@@183) (not (= 1 $generated@@49)))) (and (=> (=> (< 0 ($generated@@54 $generated@@182)) (< $generated@@183 100)) (=> (= ($generated@@52 0) ($generated@@54 $generated@@182)) (forall (($generated@@184 T@U) ) (!  (=> (and (= (type $generated@@184) $generated@@45) ($generated@@44 $generated@@184 $generated@@182)) ($generated@@53 $generated@@184 $generated@@183))
 :pattern ( ($generated@@50 $generated@@184 $generated@@183))
)))) (= ($generated@@50 $generated@@182 $generated@@183)  (and (=> (< 0 ($generated@@54 $generated@@182)) (< $generated@@183 100)) (=> (= ($generated@@52 0) ($generated@@54 $generated@@182)) (forall (($generated@@185 T@U) ) (!  (=> (and (= (type $generated@@185) $generated@@45) ($generated@@44 $generated@@185 $generated@@182)) ($generated@@50 $generated@@185 $generated@@183))
 :pattern ( ($generated@@50 $generated@@185 $generated@@183))
)))))))
 :pattern ( ($generated@@50 $generated@@182 $generated@@183))
))))
(assert (forall (($generated@@186 T@U) ($generated@@187 T@U) ) (!  (=> (and (= (type $generated@@186) $generated@@45) (= (type $generated@@187) $generated@@45)) (or (or ($generated@@44 $generated@@186 $generated@@187) (= $generated@@186 $generated@@187)) ($generated@@44 $generated@@187 $generated@@186)))
 :pattern ( ($generated@@44 $generated@@186 $generated@@187) ($generated@@44 $generated@@187 $generated@@186))
)))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@188 T@U) ($generated@@189 Int) ) (!  (=> (and (= (type $generated@@188) $generated@@45) (or ($generated@@53 $generated@@188 $generated@@189) (not (= 1 $generated@@49)))) true)
 :pattern ( ($generated@@50 $generated@@188 $generated@@189))
))))
(assert (forall (($generated@@190 T@U) ) (!  (=> (= (type $generated@@190) $generated@@45) (<= 0 ($generated@@54 $generated@@190)))
 :pattern ( ($generated@@54 $generated@@190))
)))
(assert  (and (forall (($generated@@193 T@U) ) (! (= (type ($generated@@191 $generated@@193)) $generated@@45)
 :pattern ( ($generated@@191 $generated@@193))
)) (forall (($generated@@194 T@T) ($generated@@195 T@U) ) (! (= (type ($generated@@192 $generated@@194 $generated@@195)) $generated@@194)
 :pattern ( ($generated@@192 $generated@@194 $generated@@195))
))))
(assert (forall (($generated@@196 T@U) ) (! (let (($generated@@197 (type $generated@@196)))
(= ($generated@@192 $generated@@197 ($generated@@191 $generated@@196)) $generated@@196))
 :pattern ( ($generated@@191 $generated@@196))
)))
(assert (forall (($generated@@198 T@U) ($generated@@199 T@U) ) (!  (=> (and (= (type $generated@@198) $generated@@45) (= (type $generated@@199) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@198 $generated@@199) (not (= $generated@@198 $generated@@199))) (=> (and ($generated@@180 $generated@@198) (not ($generated@@180 $generated@@199))) ($generated@@44 $generated@@198 $generated@@199))) (=> (and ($generated@@180 $generated@@198) ($generated@@180 $generated@@199)) (= ($generated@@44 $generated@@198 $generated@@199) (< ($generated@@54 $generated@@198) ($generated@@54 $generated@@199))))) (=> (and ($generated@@44 $generated@@198 $generated@@199) ($generated@@180 $generated@@199)) ($generated@@180 $generated@@198))))
 :pattern ( ($generated@@44 $generated@@198 $generated@@199))
)))
(assert (forall (($generated@@200 T@U) ) (!  (=> (and (= (type $generated@@200) $generated@@45) ($generated@@180 $generated@@200)) (= $generated@@200 ($generated@@174 ($generated@@54 $generated@@200))))
 :pattern ( ($generated@@54 $generated@@200))
 :pattern ( ($generated@@180 $generated@@200))
)))
(assert (forall (($generated@@201 Int) ) (! (= ($generated@@191 ($generated@@8 ($generated@@52 $generated@@201))) ($generated@@51 ($generated@@191 ($generated@@8 $generated@@201))))
 :pattern ( ($generated@@191 ($generated@@8 ($generated@@52 $generated@@201))))
)))
(assert (forall (($generated@@202 T@U) ) (! (= ($generated@@191 ($generated@@51 $generated@@202)) ($generated@@51 ($generated@@191 $generated@@202)))
 :pattern ( ($generated@@191 ($generated@@51 $generated@@202)))
)))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@203 T@U) ($generated@@204 Int) ) (!  (=> (and (= (type $generated@@203) $generated@@45) (or ($generated@@53 ($generated@@51 $generated@@203) $generated@@204) (not (= 1 $generated@@49)))) (and (=> (=> (< 0 ($generated@@54 $generated@@203)) (< $generated@@204 100)) (=> (= ($generated@@52 0) ($generated@@54 $generated@@203)) (forall (($generated@@205 T@U) ) (!  (=> (and (= (type $generated@@205) $generated@@45) ($generated@@44 $generated@@205 $generated@@203)) ($generated@@53 $generated@@205 $generated@@204))
 :pattern ( ($generated@@50 $generated@@205 $generated@@204))
)))) (= ($generated@@50 ($generated@@51 $generated@@203) $generated@@204)  (and (=> (< 0 ($generated@@54 $generated@@203)) (< $generated@@204 100)) (=> (= ($generated@@52 0) ($generated@@54 $generated@@203)) (forall (($generated@@206 T@U) ) (!  (=> (and (= (type $generated@@206) $generated@@45) ($generated@@44 $generated@@206 $generated@@203)) ($generated@@50 $generated@@206 $generated@@204))
 :pattern ( ($generated@@50 $generated@@206 $generated@@204))
)))))))
 :weight 3
 :pattern ( ($generated@@50 ($generated@@51 $generated@@203) $generated@@204))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@207 () T@U)
(declare-fun $generated@@208 () T@U)
(declare-fun $generated@@209 () T@U)
(declare-fun $generated@@210 () T@U)
(declare-fun $generated@@211 () Int)
(declare-fun $generated@@212 (T@U) Bool)
(declare-fun $generated@@213 (T@U) Bool)
(assert  (and (and (and (= (type $generated@@207) ($generated@@74 $generated@@64 $generated@@4)) (= (type $generated@@208) $generated@@64)) (= (type $generated@@209) ($generated@@65 $generated@@64 $generated@@66))) (= (type $generated@@210) ($generated@@67 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@214  (=> (= $generated@@207 ($generated@@62 $generated@@208 $generated@@209 $generated@@210 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@53 ($generated@@51 ($generated@@174 3)) $generated@@211) (or ($generated@@50 ($generated@@51 ($generated@@174 3)) $generated@@211) (=> ($generated@@0 ($generated@@51 ($generated@@11 (< 0 ($generated@@54 ($generated@@51 ($generated@@174 3))))))) (< $generated@@211 100))))) (=> (=> ($generated@@53 ($generated@@51 ($generated@@174 3)) $generated@@211) (or ($generated@@50 ($generated@@51 ($generated@@174 3)) $generated@@211) (=> ($generated@@0 ($generated@@51 ($generated@@11 (< 0 ($generated@@54 ($generated@@51 ($generated@@174 3))))))) (< $generated@@211 100)))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@53 ($generated@@51 ($generated@@174 3)) $generated@@211) (or ($generated@@50 ($generated@@51 ($generated@@174 3)) $generated@@211) (=> (= ($generated@@52 0) ($generated@@52 ($generated@@54 ($generated@@51 ($generated@@174 3))))) (forall (($generated@@215 T@U) ) (!  (=> (and (= (type $generated@@215) $generated@@45) ($generated@@44 $generated@@215 ($generated@@174 3))) ($generated@@50 $generated@@215 $generated@@211))
 :pattern ( ($generated@@50 $generated@@215 $generated@@211))
)))))))))))
(let (($generated@@216  (=> (and (and (and ($generated@@212 $generated@@209) ($generated@@213 $generated@@209)) (= 2 $generated@@49)) (and (< $generated@@211 100) (= (ControlFlow 0 4) 2))) $generated@@214)))
$generated@@216)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U) T@U)
(declare-fun $generated@@57 (T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (Int) Int)
(declare-fun $generated@@164 (T@U) T@U)
(declare-fun $generated@@168 (Int) T@U)
(declare-fun $generated@@169 (T@U) Bool)
(declare-fun $generated@@170 (T@U) Int)
(declare-fun $generated@@175 (T@U Int) Bool)
(declare-fun $generated@@179 (T@U) T@U)
(declare-fun $generated@@180 (T@T T@U) T@U)
(declare-fun $generated@@188 (T@U Int) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (= ($generated@@1 ($generated@@53 $generated@@66 $generated@@67)) 7)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@58 ($generated@@53 $generated@@68 $generated@@69)) $generated@@68)
 :pattern ( ($generated@@53 $generated@@68 $generated@@69))
))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@59 ($generated@@53 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@53 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@59 (type $generated@@72))))
(= (type ($generated@@57 $generated@@72 $generated@@73)) $generated@@74))
 :pattern ( ($generated@@57 $generated@@72 $generated@@73))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 (type $generated@@77)))
(let (($generated@@79 (type $generated@@76)))
(= (type ($generated@@60 $generated@@75 $generated@@76 $generated@@77)) ($generated@@53 $generated@@79 $generated@@78))))
 :pattern ( ($generated@@60 $generated@@75 $generated@@76 $generated@@77))
))) (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@59 (type $generated@@80))))
 (=> (= (type $generated@@82) $generated@@83) (= ($generated@@57 ($generated@@60 $generated@@80 $generated@@81 $generated@@82) $generated@@81) $generated@@82)))
 :weight 0
))) (and (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@86 $generated@@87) (= ($generated@@57 ($generated@@60 $generated@@85 $generated@@86 $generated@@84) $generated@@87) ($generated@@57 $generated@@85 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or true (= ($generated@@57 ($generated@@60 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@57 $generated@@89 $generated@@91)))
 :weight 0
)))) (forall (($generated@@92 T@T) ) (= ($generated@@1 ($generated@@55 $generated@@92)) 8))) (forall (($generated@@93 T@T) ) (! (= ($generated@@51 ($generated@@55 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@55 $generated@@93))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@51 (type $generated@@95))))
(= (type ($generated@@56 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@56 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@54) 9)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@61 $generated@@97 $generated@@98 $generated@@99)) $generated@@54)
 :pattern ( ($generated@@61 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@51 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@56 ($generated@@61 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@56 ($generated@@61 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@56 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@56 ($generated@@61 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@56 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@52) 10)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@112 $generated@@113)) 11))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@63 ($generated@@62 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@62 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@64 ($generated@@62 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@62 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@64 (type $generated@@118))))
(= (type ($generated@@49 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@49 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@62 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@64 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@49 ($generated@@65 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@49 ($generated@@65 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@49 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@49 ($generated@@65 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@49 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@49 ($generated@@65 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@49 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@62 $generated@@52 $generated@@4))
 :pattern ( ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@51 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@52) (= (type $generated@@156) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@157) ($generated@@55 $generated@@4))) (= (type $generated@@159) $generated@@52)) (= (type $generated@@160) ($generated@@55 $generated@@161))) (= ($generated@@0 ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@56 ($generated@@57 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 Int) ) (! (= ($generated@@162 $generated@@163) $generated@@163)
 :pattern ( ($generated@@162 $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ) (! (let (($generated@@166 (type $generated@@165)))
(= (type ($generated@@164 $generated@@165)) $generated@@166))
 :pattern ( ($generated@@164 $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! (= ($generated@@164 $generated@@167) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167))
)))
(assert (forall (($generated@@171 Int) ) (! (= (type ($generated@@168 $generated@@171)) $generated@@45)
 :pattern ( ($generated@@168 $generated@@171))
)))
(assert (forall (($generated@@172 Int) ) (!  (=> (<= 0 $generated@@172) (and ($generated@@169 ($generated@@168 $generated@@172)) (= ($generated@@170 ($generated@@168 $generated@@172)) $generated@@172)))
 :pattern ( ($generated@@168 $generated@@172))
)))
(assert (forall (($generated@@173 T@U) ($generated@@174 T@U) ) (!  (=> (and (= (type $generated@@173) $generated@@45) (= (type $generated@@174) $generated@@45)) (or (or ($generated@@44 $generated@@173 $generated@@174) (= $generated@@173 $generated@@174)) ($generated@@44 $generated@@174 $generated@@173)))
 :pattern ( ($generated@@44 $generated@@173 $generated@@174) ($generated@@44 $generated@@174 $generated@@173))
)))
(assert  (=> true (forall (($generated@@176 Int) ($generated@@177 T@U) ) (!  (=> (and (= (type $generated@@177) $generated@@45) (= $generated@@177 ($generated@@168 0))) ($generated@@175 $generated@@177 $generated@@176))
 :pattern ( ($generated@@175 $generated@@177 $generated@@176))
))))
(assert (forall (($generated@@178 T@U) ) (!  (=> (= (type $generated@@178) $generated@@45) (<= 0 ($generated@@170 $generated@@178)))
 :pattern ( ($generated@@170 $generated@@178))
)))
(assert  (and (forall (($generated@@181 T@U) ) (! (= (type ($generated@@179 $generated@@181)) $generated@@45)
 :pattern ( ($generated@@179 $generated@@181))
)) (forall (($generated@@182 T@T) ($generated@@183 T@U) ) (! (= (type ($generated@@180 $generated@@182 $generated@@183)) $generated@@182)
 :pattern ( ($generated@@180 $generated@@182 $generated@@183))
))))
(assert (forall (($generated@@184 T@U) ) (! (let (($generated@@185 (type $generated@@184)))
(= ($generated@@180 $generated@@185 ($generated@@179 $generated@@184)) $generated@@184))
 :pattern ( ($generated@@179 $generated@@184))
)))
(assert (forall (($generated@@186 T@U) ($generated@@187 T@U) ) (!  (=> (and (= (type $generated@@186) $generated@@45) (= (type $generated@@187) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@186 $generated@@187) (not (= $generated@@186 $generated@@187))) (=> (and ($generated@@169 $generated@@186) (not ($generated@@169 $generated@@187))) ($generated@@44 $generated@@186 $generated@@187))) (=> (and ($generated@@169 $generated@@186) ($generated@@169 $generated@@187)) (= ($generated@@44 $generated@@186 $generated@@187) (< ($generated@@170 $generated@@186) ($generated@@170 $generated@@187))))) (=> (and ($generated@@44 $generated@@186 $generated@@187) ($generated@@169 $generated@@187)) ($generated@@169 $generated@@186))))
 :pattern ( ($generated@@44 $generated@@186 $generated@@187))
)))
(assert  (=> true (forall (($generated@@189 T@U) ($generated@@190 Int) ) (!  (=> (and (= (type $generated@@189) $generated@@45) true) (and (=> (=> (< 0 ($generated@@170 $generated@@189)) (< $generated@@190 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@189)) (forall (($generated@@191 T@U) ) (!  (=> (and (= (type $generated@@191) $generated@@45) ($generated@@44 $generated@@191 $generated@@189)) ($generated@@188 $generated@@191 $generated@@190))
 :pattern ( ($generated@@175 $generated@@191 $generated@@190))
)))) (= ($generated@@175 $generated@@189 $generated@@190)  (and (=> (< 0 ($generated@@170 $generated@@189)) (< $generated@@190 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@189)) (forall (($generated@@192 T@U) ) (!  (=> (and (= (type $generated@@192) $generated@@45) ($generated@@44 $generated@@192 $generated@@189)) ($generated@@175 $generated@@192 $generated@@190))
 :pattern ( ($generated@@175 $generated@@192 $generated@@190))
)))))))
 :pattern ( ($generated@@175 $generated@@189 $generated@@190))
))))
(assert  (=> true (forall (($generated@@193 T@U) ($generated@@194 Int) ) (!  (=> (and (= (type $generated@@193) $generated@@45) true) (and (=> (=> (< 0 ($generated@@170 $generated@@193)) (< $generated@@194 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@193)) (forall (($generated@@195 T@U) ) (!  (=> (and (= (type $generated@@195) $generated@@45) ($generated@@44 $generated@@195 $generated@@193)) ($generated@@188 $generated@@195 $generated@@194))
 :pattern ( ($generated@@175 $generated@@195 $generated@@194))
)))) (= ($generated@@175 ($generated@@164 $generated@@193) $generated@@194)  (and (=> (< 0 ($generated@@170 $generated@@193)) (< $generated@@194 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@193)) (forall (($generated@@196 T@U) ) (!  (=> (and (= (type $generated@@196) $generated@@45) ($generated@@44 $generated@@196 $generated@@193)) ($generated@@175 $generated@@196 $generated@@194))
 :pattern ( ($generated@@175 $generated@@196 $generated@@194))
)))))))
 :weight 3
 :pattern ( ($generated@@175 ($generated@@164 $generated@@193) $generated@@194))
))))
(assert (forall (($generated@@197 T@U) ) (!  (=> (and (= (type $generated@@197) $generated@@45) ($generated@@169 $generated@@197)) (= $generated@@197 ($generated@@168 ($generated@@170 $generated@@197))))
 :pattern ( ($generated@@170 $generated@@197))
 :pattern ( ($generated@@169 $generated@@197))
)))
(assert  (=> true (forall (($generated@@198 T@U) ($generated@@199 Int) ) (!  (=> (and (= (type $generated@@198) $generated@@45) true) (and (=> (=> (< 0 ($generated@@170 $generated@@198)) (< $generated@@199 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@198)) (forall (($generated@@200 T@U) ) (!  (=> (and (= (type $generated@@200) $generated@@45) ($generated@@44 $generated@@200 $generated@@198)) ($generated@@188 $generated@@200 $generated@@199))
 :pattern ( ($generated@@175 $generated@@200 $generated@@199))
)))) (= ($generated@@175 ($generated@@164 $generated@@198) ($generated@@162 $generated@@199))  (and (=> (< 0 ($generated@@170 $generated@@198)) (< $generated@@199 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@198)) (forall (($generated@@201 T@U) ) (!  (=> (and (= (type $generated@@201) $generated@@45) ($generated@@44 $generated@@201 $generated@@198)) ($generated@@175 $generated@@201 $generated@@199))
 :pattern ( ($generated@@175 $generated@@201 $generated@@199))
)))))))
 :weight 3
 :pattern ( ($generated@@175 ($generated@@164 $generated@@198) ($generated@@162 $generated@@199)))
))))
(assert  (=> true (forall (($generated@@202 T@U) ($generated@@203 Int) ) (!  (=> (and (= (type $generated@@202) $generated@@45) true) true)
 :pattern ( ($generated@@175 $generated@@202 $generated@@203))
))))
(assert (forall (($generated@@204 Int) ) (! (= ($generated@@179 ($generated@@8 ($generated@@162 $generated@@204))) ($generated@@164 ($generated@@179 ($generated@@8 $generated@@204))))
 :pattern ( ($generated@@179 ($generated@@8 ($generated@@162 $generated@@204))))
)))
(assert (forall (($generated@@205 T@U) ) (! (= ($generated@@179 ($generated@@164 $generated@@205)) ($generated@@164 ($generated@@179 $generated@@205)))
 :pattern ( ($generated@@179 ($generated@@164 $generated@@205)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@206 () T@U)
(declare-fun $generated@@207 () T@U)
(declare-fun $generated@@208 () T@U)
(declare-fun $generated@@209 () T@U)
(declare-fun $generated@@210 () Int)
(declare-fun $generated@@211 (T@U) Bool)
(declare-fun $generated@@212 (T@U) Bool)
(declare-fun $generated@@213 () Int)
(assert  (and (and (and (= (type $generated@@206) ($generated@@62 $generated@@52 $generated@@4)) (= (type $generated@@207) $generated@@52)) (= (type $generated@@208) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@209) ($generated@@55 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@214  (=> (= $generated@@206 ($generated@@50 $generated@@207 $generated@@208 $generated@@209 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@188 ($generated@@164 ($generated@@168 3)) $generated@@210) (or ($generated@@175 ($generated@@164 ($generated@@168 3)) $generated@@210) (=> ($generated@@0 ($generated@@164 ($generated@@11 (< 0 ($generated@@170 ($generated@@164 ($generated@@168 3))))))) (< $generated@@210 100))))) (=> (=> ($generated@@188 ($generated@@164 ($generated@@168 3)) $generated@@210) (or ($generated@@175 ($generated@@164 ($generated@@168 3)) $generated@@210) (=> ($generated@@0 ($generated@@164 ($generated@@11 (< 0 ($generated@@170 ($generated@@164 ($generated@@168 3))))))) (< $generated@@210 100)))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@188 ($generated@@164 ($generated@@168 3)) $generated@@210) (or ($generated@@175 ($generated@@164 ($generated@@168 3)) $generated@@210) (=> (= ($generated@@162 0) ($generated@@162 ($generated@@170 ($generated@@164 ($generated@@168 3))))) (forall (($generated@@215 T@U) ) (!  (=> (and (= (type $generated@@215) $generated@@45) ($generated@@44 $generated@@215 ($generated@@168 3))) ($generated@@175 $generated@@215 $generated@@210))
 :pattern ( ($generated@@175 $generated@@215 $generated@@210))
)))))))))))
(let (($generated@@216  (=> (and (and (and ($generated@@211 $generated@@208) ($generated@@212 $generated@@208)) (= 0 $generated@@213)) (and (< $generated@@210 100) (= (ControlFlow 0 4) 2))) $generated@@214)))
$generated@@216)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U) T@U)
(declare-fun $generated@@57 (T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (Int) Int)
(declare-fun $generated@@164 (T@U) T@U)
(declare-fun $generated@@168 (Int) T@U)
(declare-fun $generated@@169 (T@U) Bool)
(declare-fun $generated@@170 (T@U) Int)
(declare-fun $generated@@175 (T@U Int) Bool)
(declare-fun $generated@@179 (T@U) T@U)
(declare-fun $generated@@180 (T@T T@U) T@U)
(declare-fun $generated@@188 (T@U Int) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (= ($generated@@1 ($generated@@53 $generated@@66 $generated@@67)) 7)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@58 ($generated@@53 $generated@@68 $generated@@69)) $generated@@68)
 :pattern ( ($generated@@53 $generated@@68 $generated@@69))
))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@59 ($generated@@53 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@53 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@59 (type $generated@@72))))
(= (type ($generated@@57 $generated@@72 $generated@@73)) $generated@@74))
 :pattern ( ($generated@@57 $generated@@72 $generated@@73))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 (type $generated@@77)))
(let (($generated@@79 (type $generated@@76)))
(= (type ($generated@@60 $generated@@75 $generated@@76 $generated@@77)) ($generated@@53 $generated@@79 $generated@@78))))
 :pattern ( ($generated@@60 $generated@@75 $generated@@76 $generated@@77))
))) (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@59 (type $generated@@80))))
 (=> (= (type $generated@@82) $generated@@83) (= ($generated@@57 ($generated@@60 $generated@@80 $generated@@81 $generated@@82) $generated@@81) $generated@@82)))
 :weight 0
))) (and (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@86 $generated@@87) (= ($generated@@57 ($generated@@60 $generated@@85 $generated@@86 $generated@@84) $generated@@87) ($generated@@57 $generated@@85 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or true (= ($generated@@57 ($generated@@60 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@57 $generated@@89 $generated@@91)))
 :weight 0
)))) (forall (($generated@@92 T@T) ) (= ($generated@@1 ($generated@@55 $generated@@92)) 8))) (forall (($generated@@93 T@T) ) (! (= ($generated@@51 ($generated@@55 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@55 $generated@@93))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@51 (type $generated@@95))))
(= (type ($generated@@56 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@56 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@54) 9)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@61 $generated@@97 $generated@@98 $generated@@99)) $generated@@54)
 :pattern ( ($generated@@61 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@51 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@56 ($generated@@61 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@56 ($generated@@61 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@56 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@56 ($generated@@61 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@56 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@52) 10)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@112 $generated@@113)) 11))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@63 ($generated@@62 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@62 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@64 ($generated@@62 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@62 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@64 (type $generated@@118))))
(= (type ($generated@@49 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@49 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@62 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@64 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@49 ($generated@@65 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@49 ($generated@@65 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@49 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@49 ($generated@@65 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@49 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@49 ($generated@@65 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@49 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@62 $generated@@52 $generated@@4))
 :pattern ( ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@51 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@52) (= (type $generated@@156) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@157) ($generated@@55 $generated@@4))) (= (type $generated@@159) $generated@@52)) (= (type $generated@@160) ($generated@@55 $generated@@161))) (= ($generated@@0 ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@56 ($generated@@57 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 Int) ) (! (= ($generated@@162 $generated@@163) $generated@@163)
 :pattern ( ($generated@@162 $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ) (! (let (($generated@@166 (type $generated@@165)))
(= (type ($generated@@164 $generated@@165)) $generated@@166))
 :pattern ( ($generated@@164 $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! (= ($generated@@164 $generated@@167) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167))
)))
(assert (forall (($generated@@171 Int) ) (! (= (type ($generated@@168 $generated@@171)) $generated@@45)
 :pattern ( ($generated@@168 $generated@@171))
)))
(assert (forall (($generated@@172 Int) ) (!  (=> (<= 0 $generated@@172) (and ($generated@@169 ($generated@@168 $generated@@172)) (= ($generated@@170 ($generated@@168 $generated@@172)) $generated@@172)))
 :pattern ( ($generated@@168 $generated@@172))
)))
(assert (forall (($generated@@173 T@U) ($generated@@174 T@U) ) (!  (=> (and (= (type $generated@@173) $generated@@45) (= (type $generated@@174) $generated@@45)) (or (or ($generated@@44 $generated@@173 $generated@@174) (= $generated@@173 $generated@@174)) ($generated@@44 $generated@@174 $generated@@173)))
 :pattern ( ($generated@@44 $generated@@173 $generated@@174) ($generated@@44 $generated@@174 $generated@@173))
)))
(assert  (=> true (forall (($generated@@176 Int) ($generated@@177 T@U) ) (!  (=> (and (= (type $generated@@177) $generated@@45) (= $generated@@177 ($generated@@168 0))) ($generated@@175 $generated@@177 $generated@@176))
 :pattern ( ($generated@@175 $generated@@177 $generated@@176))
))))
(assert (forall (($generated@@178 T@U) ) (!  (=> (= (type $generated@@178) $generated@@45) (<= 0 ($generated@@170 $generated@@178)))
 :pattern ( ($generated@@170 $generated@@178))
)))
(assert  (and (forall (($generated@@181 T@U) ) (! (= (type ($generated@@179 $generated@@181)) $generated@@45)
 :pattern ( ($generated@@179 $generated@@181))
)) (forall (($generated@@182 T@T) ($generated@@183 T@U) ) (! (= (type ($generated@@180 $generated@@182 $generated@@183)) $generated@@182)
 :pattern ( ($generated@@180 $generated@@182 $generated@@183))
))))
(assert (forall (($generated@@184 T@U) ) (! (let (($generated@@185 (type $generated@@184)))
(= ($generated@@180 $generated@@185 ($generated@@179 $generated@@184)) $generated@@184))
 :pattern ( ($generated@@179 $generated@@184))
)))
(assert (forall (($generated@@186 T@U) ($generated@@187 T@U) ) (!  (=> (and (= (type $generated@@186) $generated@@45) (= (type $generated@@187) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@186 $generated@@187) (not (= $generated@@186 $generated@@187))) (=> (and ($generated@@169 $generated@@186) (not ($generated@@169 $generated@@187))) ($generated@@44 $generated@@186 $generated@@187))) (=> (and ($generated@@169 $generated@@186) ($generated@@169 $generated@@187)) (= ($generated@@44 $generated@@186 $generated@@187) (< ($generated@@170 $generated@@186) ($generated@@170 $generated@@187))))) (=> (and ($generated@@44 $generated@@186 $generated@@187) ($generated@@169 $generated@@187)) ($generated@@169 $generated@@186))))
 :pattern ( ($generated@@44 $generated@@186 $generated@@187))
)))
(assert  (=> true (forall (($generated@@189 T@U) ($generated@@190 Int) ) (!  (=> (and (= (type $generated@@189) $generated@@45) true) (and (=> (=> (< 0 ($generated@@170 $generated@@189)) (< $generated@@190 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@189)) (forall (($generated@@191 T@U) ) (!  (=> (and (= (type $generated@@191) $generated@@45) ($generated@@44 $generated@@191 $generated@@189)) ($generated@@188 $generated@@191 $generated@@190))
 :pattern ( ($generated@@175 $generated@@191 $generated@@190))
)))) (= ($generated@@175 $generated@@189 $generated@@190)  (and (=> (< 0 ($generated@@170 $generated@@189)) (< $generated@@190 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@189)) (forall (($generated@@192 T@U) ) (!  (=> (and (= (type $generated@@192) $generated@@45) ($generated@@44 $generated@@192 $generated@@189)) ($generated@@175 $generated@@192 $generated@@190))
 :pattern ( ($generated@@175 $generated@@192 $generated@@190))
)))))))
 :pattern ( ($generated@@175 $generated@@189 $generated@@190))
))))
(assert  (=> true (forall (($generated@@193 T@U) ($generated@@194 Int) ) (!  (=> (and (= (type $generated@@193) $generated@@45) true) (and (=> (=> (< 0 ($generated@@170 $generated@@193)) (< $generated@@194 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@193)) (forall (($generated@@195 T@U) ) (!  (=> (and (= (type $generated@@195) $generated@@45) ($generated@@44 $generated@@195 $generated@@193)) ($generated@@188 $generated@@195 $generated@@194))
 :pattern ( ($generated@@175 $generated@@195 $generated@@194))
)))) (= ($generated@@175 ($generated@@164 $generated@@193) $generated@@194)  (and (=> (< 0 ($generated@@170 $generated@@193)) (< $generated@@194 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@193)) (forall (($generated@@196 T@U) ) (!  (=> (and (= (type $generated@@196) $generated@@45) ($generated@@44 $generated@@196 $generated@@193)) ($generated@@175 $generated@@196 $generated@@194))
 :pattern ( ($generated@@175 $generated@@196 $generated@@194))
)))))))
 :weight 3
 :pattern ( ($generated@@175 ($generated@@164 $generated@@193) $generated@@194))
))))
(assert (forall (($generated@@197 T@U) ) (!  (=> (and (= (type $generated@@197) $generated@@45) ($generated@@169 $generated@@197)) (= $generated@@197 ($generated@@168 ($generated@@170 $generated@@197))))
 :pattern ( ($generated@@170 $generated@@197))
 :pattern ( ($generated@@169 $generated@@197))
)))
(assert  (=> true (forall (($generated@@198 T@U) ($generated@@199 Int) ) (!  (=> (and (= (type $generated@@198) $generated@@45) true) (and (=> (=> (< 0 ($generated@@170 $generated@@198)) (< $generated@@199 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@198)) (forall (($generated@@200 T@U) ) (!  (=> (and (= (type $generated@@200) $generated@@45) ($generated@@44 $generated@@200 $generated@@198)) ($generated@@188 $generated@@200 $generated@@199))
 :pattern ( ($generated@@175 $generated@@200 $generated@@199))
)))) (= ($generated@@175 ($generated@@164 $generated@@198) ($generated@@162 $generated@@199))  (and (=> (< 0 ($generated@@170 $generated@@198)) (< $generated@@199 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@198)) (forall (($generated@@201 T@U) ) (!  (=> (and (= (type $generated@@201) $generated@@45) ($generated@@44 $generated@@201 $generated@@198)) ($generated@@175 $generated@@201 $generated@@199))
 :pattern ( ($generated@@175 $generated@@201 $generated@@199))
)))))))
 :weight 3
 :pattern ( ($generated@@175 ($generated@@164 $generated@@198) ($generated@@162 $generated@@199)))
))))
(assert  (=> true (forall (($generated@@202 T@U) ($generated@@203 Int) ) (!  (=> (and (= (type $generated@@202) $generated@@45) true) true)
 :pattern ( ($generated@@175 $generated@@202 $generated@@203))
))))
(assert (forall (($generated@@204 Int) ) (! (= ($generated@@179 ($generated@@8 ($generated@@162 $generated@@204))) ($generated@@164 ($generated@@179 ($generated@@8 $generated@@204))))
 :pattern ( ($generated@@179 ($generated@@8 ($generated@@162 $generated@@204))))
)))
(assert (forall (($generated@@205 T@U) ) (! (= ($generated@@179 ($generated@@164 $generated@@205)) ($generated@@164 ($generated@@179 $generated@@205)))
 :pattern ( ($generated@@179 ($generated@@164 $generated@@205)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@206 () T@U)
(declare-fun $generated@@207 () Int)
(declare-fun $generated@@208 (T@U) Bool)
(declare-fun $generated@@209 () T@U)
(declare-fun $generated@@210 (T@U) Bool)
(declare-fun $generated@@211 () T@U)
(declare-fun $generated@@212 () T@U)
(declare-fun $generated@@213 () T@U)
(declare-fun $generated@@214 () T@U)
(declare-fun $generated@@215 () Int)
(assert  (and (and (and (and (and (= (type $generated@@206) $generated@@45) (= (type $generated@@209) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@211) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@212) ($generated@@62 $generated@@52 $generated@@4))) (= (type $generated@@213) $generated@@52)) (= (type $generated@@214) ($generated@@55 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@216  (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@188 $generated@@206 $generated@@207) (or ($generated@@175 $generated@@206 $generated@@207) (=> (< 0 ($generated@@170 $generated@@206)) (< $generated@@207 100))))) (=> (=> ($generated@@188 $generated@@206 $generated@@207) (or ($generated@@175 $generated@@206 $generated@@207) (=> (< 0 ($generated@@170 $generated@@206)) (< $generated@@207 100)))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@188 $generated@@206 $generated@@207) (or ($generated@@175 $generated@@206 $generated@@207) (=> (= ($generated@@162 0) ($generated@@170 $generated@@206)) (forall (($generated@@217 T@U) ) (!  (=> (and (= (type $generated@@217) $generated@@45) ($generated@@44 $generated@@217 $generated@@206)) ($generated@@175 $generated@@217 $generated@@207))
 :pattern ( ($generated@@175 $generated@@217 $generated@@207))
))))))))))
(let (($generated@@218  (=> (<= ($generated@@170 $generated@@206) 0) (=> (and (and (and ($generated@@208 $generated@@209) ($generated@@210 $generated@@209)) (= $generated@@211 $generated@@209)) (and (forall (($generated@@219 T@U) ($generated@@220 Int) ) (!  (=> (= (type $generated@@219) $generated@@45) (=> (and ($generated@@44 $generated@@219 $generated@@206) (< $generated@@220 100)) ($generated@@175 $generated@@219 $generated@@220)))
 :no-pattern (type $generated@@219)
 :no-pattern ($generated $generated@@219)
 :no-pattern ($generated@@0 $generated@@219)
)) (= (ControlFlow 0 5) 2))) $generated@@216))))
(let (($generated@@221  (=> (and (< 0 ($generated@@170 $generated@@206)) (= (ControlFlow 0 4) 2)) $generated@@216)))
(let (($generated@@222  (=> (= $generated@@212 ($generated@@50 $generated@@213 $generated@@211 $generated@@214 false)) (and (=> (= (ControlFlow 0 6) 4) $generated@@221) (=> (= (ControlFlow 0 6) 5) $generated@@218)))))
(let (($generated@@223  (=> (and (and (and ($generated@@208 $generated@@211) ($generated@@210 $generated@@211)) (= 1 $generated@@215)) (and (< $generated@@207 100) (= (ControlFlow 0 7) 6))) $generated@@222)))
$generated@@223))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U) T@U)
(declare-fun $generated@@57 (T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (Int) Int)
(declare-fun $generated@@164 (T@U) T@U)
(declare-fun $generated@@168 (Int) T@U)
(declare-fun $generated@@169 (T@U) Bool)
(declare-fun $generated@@170 (T@U) Int)
(declare-fun $generated@@175 (T@U Int) Bool)
(declare-fun $generated@@179 (T@U) T@U)
(declare-fun $generated@@180 (T@T T@U) T@U)
(declare-fun $generated@@188 (T@U Int) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (= ($generated@@1 ($generated@@53 $generated@@66 $generated@@67)) 7)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@58 ($generated@@53 $generated@@68 $generated@@69)) $generated@@68)
 :pattern ( ($generated@@53 $generated@@68 $generated@@69))
))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@59 ($generated@@53 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@53 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@59 (type $generated@@72))))
(= (type ($generated@@57 $generated@@72 $generated@@73)) $generated@@74))
 :pattern ( ($generated@@57 $generated@@72 $generated@@73))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 (type $generated@@77)))
(let (($generated@@79 (type $generated@@76)))
(= (type ($generated@@60 $generated@@75 $generated@@76 $generated@@77)) ($generated@@53 $generated@@79 $generated@@78))))
 :pattern ( ($generated@@60 $generated@@75 $generated@@76 $generated@@77))
))) (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@59 (type $generated@@80))))
 (=> (= (type $generated@@82) $generated@@83) (= ($generated@@57 ($generated@@60 $generated@@80 $generated@@81 $generated@@82) $generated@@81) $generated@@82)))
 :weight 0
))) (and (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@86 $generated@@87) (= ($generated@@57 ($generated@@60 $generated@@85 $generated@@86 $generated@@84) $generated@@87) ($generated@@57 $generated@@85 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or true (= ($generated@@57 ($generated@@60 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@57 $generated@@89 $generated@@91)))
 :weight 0
)))) (forall (($generated@@92 T@T) ) (= ($generated@@1 ($generated@@55 $generated@@92)) 8))) (forall (($generated@@93 T@T) ) (! (= ($generated@@51 ($generated@@55 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@55 $generated@@93))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (! (let (($generated@@96 ($generated@@51 (type $generated@@95))))
(= (type ($generated@@56 $generated@@94 $generated@@95)) $generated@@96))
 :pattern ( ($generated@@56 $generated@@94 $generated@@95))
))) (= ($generated@@1 $generated@@54) 9)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= (type ($generated@@61 $generated@@97 $generated@@98 $generated@@99)) $generated@@54)
 :pattern ( ($generated@@61 $generated@@97 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 ($generated@@51 (type $generated@@101))))
 (=> (= (type $generated@@102) $generated@@103) (= ($generated@@56 ($generated@@61 $generated@@100 $generated@@101 $generated@@102) $generated@@101) $generated@@102)))
 :weight 0
))) (and (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@56 ($generated@@61 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@56 $generated@@105 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or true (= ($generated@@56 ($generated@@61 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@56 $generated@@109 $generated@@111)))
 :weight 0
)))) (= ($generated@@1 $generated@@52) 10)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@112 $generated@@113)) 11))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@63 ($generated@@62 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@62 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@64 ($generated@@62 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@62 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@64 (type $generated@@118))))
(= (type ($generated@@49 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@49 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@62 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@65 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@64 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@49 ($generated@@65 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@49 ($generated@@65 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@49 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@49 ($generated@@65 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@49 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@49 ($generated@@65 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@49 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@62 $generated@@52 $generated@@4))
 :pattern ( ($generated@@50 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@51 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@52) (= (type $generated@@156) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@157) ($generated@@55 $generated@@4))) (= (type $generated@@159) $generated@@52)) (= (type $generated@@160) ($generated@@55 $generated@@161))) (= ($generated@@0 ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@56 ($generated@@57 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@49 ($generated@@50 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 Int) ) (! (= ($generated@@162 $generated@@163) $generated@@163)
 :pattern ( ($generated@@162 $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ) (! (let (($generated@@166 (type $generated@@165)))
(= (type ($generated@@164 $generated@@165)) $generated@@166))
 :pattern ( ($generated@@164 $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! (= ($generated@@164 $generated@@167) $generated@@167)
 :pattern ( ($generated@@164 $generated@@167))
)))
(assert (forall (($generated@@171 Int) ) (! (= (type ($generated@@168 $generated@@171)) $generated@@45)
 :pattern ( ($generated@@168 $generated@@171))
)))
(assert (forall (($generated@@172 Int) ) (!  (=> (<= 0 $generated@@172) (and ($generated@@169 ($generated@@168 $generated@@172)) (= ($generated@@170 ($generated@@168 $generated@@172)) $generated@@172)))
 :pattern ( ($generated@@168 $generated@@172))
)))
(assert (forall (($generated@@173 T@U) ($generated@@174 T@U) ) (!  (=> (and (= (type $generated@@173) $generated@@45) (= (type $generated@@174) $generated@@45)) (or (or ($generated@@44 $generated@@173 $generated@@174) (= $generated@@173 $generated@@174)) ($generated@@44 $generated@@174 $generated@@173)))
 :pattern ( ($generated@@44 $generated@@173 $generated@@174) ($generated@@44 $generated@@174 $generated@@173))
)))
(assert  (=> true (forall (($generated@@176 Int) ($generated@@177 T@U) ) (!  (=> (and (= (type $generated@@177) $generated@@45) (= $generated@@177 ($generated@@168 0))) ($generated@@175 $generated@@177 $generated@@176))
 :pattern ( ($generated@@175 $generated@@177 $generated@@176))
))))
(assert (forall (($generated@@178 T@U) ) (!  (=> (= (type $generated@@178) $generated@@45) (<= 0 ($generated@@170 $generated@@178)))
 :pattern ( ($generated@@170 $generated@@178))
)))
(assert  (and (forall (($generated@@181 T@U) ) (! (= (type ($generated@@179 $generated@@181)) $generated@@45)
 :pattern ( ($generated@@179 $generated@@181))
)) (forall (($generated@@182 T@T) ($generated@@183 T@U) ) (! (= (type ($generated@@180 $generated@@182 $generated@@183)) $generated@@182)
 :pattern ( ($generated@@180 $generated@@182 $generated@@183))
))))
(assert (forall (($generated@@184 T@U) ) (! (let (($generated@@185 (type $generated@@184)))
(= ($generated@@180 $generated@@185 ($generated@@179 $generated@@184)) $generated@@184))
 :pattern ( ($generated@@179 $generated@@184))
)))
(assert (forall (($generated@@186 T@U) ($generated@@187 T@U) ) (!  (=> (and (= (type $generated@@186) $generated@@45) (= (type $generated@@187) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@186 $generated@@187) (not (= $generated@@186 $generated@@187))) (=> (and ($generated@@169 $generated@@186) (not ($generated@@169 $generated@@187))) ($generated@@44 $generated@@186 $generated@@187))) (=> (and ($generated@@169 $generated@@186) ($generated@@169 $generated@@187)) (= ($generated@@44 $generated@@186 $generated@@187) (< ($generated@@170 $generated@@186) ($generated@@170 $generated@@187))))) (=> (and ($generated@@44 $generated@@186 $generated@@187) ($generated@@169 $generated@@187)) ($generated@@169 $generated@@186))))
 :pattern ( ($generated@@44 $generated@@186 $generated@@187))
)))
(assert  (=> true (forall (($generated@@189 T@U) ($generated@@190 Int) ) (!  (=> (and (= (type $generated@@189) $generated@@45) true) (and (=> (=> (< 0 ($generated@@170 $generated@@189)) (< $generated@@190 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@189)) (forall (($generated@@191 T@U) ) (!  (=> (and (= (type $generated@@191) $generated@@45) ($generated@@44 $generated@@191 $generated@@189)) ($generated@@188 $generated@@191 $generated@@190))
 :pattern ( ($generated@@175 $generated@@191 $generated@@190))
)))) (= ($generated@@175 $generated@@189 $generated@@190)  (and (=> (< 0 ($generated@@170 $generated@@189)) (< $generated@@190 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@189)) (forall (($generated@@192 T@U) ) (!  (=> (and (= (type $generated@@192) $generated@@45) ($generated@@44 $generated@@192 $generated@@189)) ($generated@@175 $generated@@192 $generated@@190))
 :pattern ( ($generated@@175 $generated@@192 $generated@@190))
)))))))
 :pattern ( ($generated@@175 $generated@@189 $generated@@190))
))))
(assert  (=> true (forall (($generated@@193 T@U) ($generated@@194 Int) ) (!  (=> (and (= (type $generated@@193) $generated@@45) true) (and (=> (=> (< 0 ($generated@@170 $generated@@193)) (< $generated@@194 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@193)) (forall (($generated@@195 T@U) ) (!  (=> (and (= (type $generated@@195) $generated@@45) ($generated@@44 $generated@@195 $generated@@193)) ($generated@@188 $generated@@195 $generated@@194))
 :pattern ( ($generated@@175 $generated@@195 $generated@@194))
)))) (= ($generated@@175 ($generated@@164 $generated@@193) $generated@@194)  (and (=> (< 0 ($generated@@170 $generated@@193)) (< $generated@@194 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@193)) (forall (($generated@@196 T@U) ) (!  (=> (and (= (type $generated@@196) $generated@@45) ($generated@@44 $generated@@196 $generated@@193)) ($generated@@175 $generated@@196 $generated@@194))
 :pattern ( ($generated@@175 $generated@@196 $generated@@194))
)))))))
 :weight 3
 :pattern ( ($generated@@175 ($generated@@164 $generated@@193) $generated@@194))
))))
(assert (forall (($generated@@197 T@U) ) (!  (=> (and (= (type $generated@@197) $generated@@45) ($generated@@169 $generated@@197)) (= $generated@@197 ($generated@@168 ($generated@@170 $generated@@197))))
 :pattern ( ($generated@@170 $generated@@197))
 :pattern ( ($generated@@169 $generated@@197))
)))
(assert  (=> true (forall (($generated@@198 T@U) ($generated@@199 Int) ) (!  (=> (and (= (type $generated@@198) $generated@@45) true) (and (=> (=> (< 0 ($generated@@170 $generated@@198)) (< $generated@@199 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@198)) (forall (($generated@@200 T@U) ) (!  (=> (and (= (type $generated@@200) $generated@@45) ($generated@@44 $generated@@200 $generated@@198)) ($generated@@188 $generated@@200 $generated@@199))
 :pattern ( ($generated@@175 $generated@@200 $generated@@199))
)))) (= ($generated@@175 ($generated@@164 $generated@@198) ($generated@@162 $generated@@199))  (and (=> (< 0 ($generated@@170 $generated@@198)) (< $generated@@199 100)) (=> (= ($generated@@162 0) ($generated@@170 $generated@@198)) (forall (($generated@@201 T@U) ) (!  (=> (and (= (type $generated@@201) $generated@@45) ($generated@@44 $generated@@201 $generated@@198)) ($generated@@175 $generated@@201 $generated@@199))
 :pattern ( ($generated@@175 $generated@@201 $generated@@199))
)))))))
 :weight 3
 :pattern ( ($generated@@175 ($generated@@164 $generated@@198) ($generated@@162 $generated@@199)))
))))
(assert  (=> true (forall (($generated@@202 T@U) ($generated@@203 Int) ) (!  (=> (and (= (type $generated@@202) $generated@@45) true) true)
 :pattern ( ($generated@@175 $generated@@202 $generated@@203))
))))
(assert (forall (($generated@@204 Int) ) (! (= ($generated@@179 ($generated@@8 ($generated@@162 $generated@@204))) ($generated@@164 ($generated@@179 ($generated@@8 $generated@@204))))
 :pattern ( ($generated@@179 ($generated@@8 ($generated@@162 $generated@@204))))
)))
(assert (forall (($generated@@205 T@U) ) (! (= ($generated@@179 ($generated@@164 $generated@@205)) ($generated@@164 ($generated@@179 $generated@@205)))
 :pattern ( ($generated@@179 ($generated@@164 $generated@@205)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@206 () T@U)
(declare-fun $generated@@207 () Int)
(declare-fun $generated@@208 (T@U) Bool)
(declare-fun $generated@@209 () T@U)
(declare-fun $generated@@210 (T@U) Bool)
(declare-fun $generated@@211 () T@U)
(declare-fun $generated@@212 () T@U)
(declare-fun $generated@@213 () T@U)
(declare-fun $generated@@214 () T@U)
(declare-fun $generated@@215 () Int)
(assert  (and (and (and (and (and (= (type $generated@@206) $generated@@45) (= (type $generated@@209) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@211) ($generated@@53 $generated@@52 $generated@@54))) (= (type $generated@@212) ($generated@@62 $generated@@52 $generated@@4))) (= (type $generated@@213) $generated@@52)) (= (type $generated@@214) ($generated@@55 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@216  (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@188 $generated@@206 $generated@@207) (or ($generated@@175 $generated@@206 $generated@@207) (=> (< 0 ($generated@@170 $generated@@206)) (< $generated@@207 100))))) (=> (=> ($generated@@188 $generated@@206 $generated@@207) (or ($generated@@175 $generated@@206 $generated@@207) (=> (< 0 ($generated@@170 $generated@@206)) (< $generated@@207 100)))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@188 $generated@@206 $generated@@207) (or ($generated@@175 $generated@@206 $generated@@207) (=> (= ($generated@@162 0) ($generated@@170 $generated@@206)) (forall (($generated@@217 T@U) ) (!  (=> (and (= (type $generated@@217) $generated@@45) ($generated@@44 $generated@@217 $generated@@206)) ($generated@@175 $generated@@217 $generated@@207))
 :pattern ( ($generated@@175 $generated@@217 $generated@@207))
))))))))))
(let (($generated@@218  (=> (<= ($generated@@170 $generated@@206) 0) (=> (and (and (and ($generated@@208 $generated@@209) ($generated@@210 $generated@@209)) (= $generated@@211 $generated@@209)) (and (forall (($generated@@219 T@U) ($generated@@220 Int) ) (!  (=> (= (type $generated@@219) $generated@@45) (=> (and ($generated@@44 $generated@@219 $generated@@206) (< $generated@@220 100)) ($generated@@175 $generated@@219 $generated@@220)))
 :no-pattern (type $generated@@219)
 :no-pattern ($generated $generated@@219)
 :no-pattern ($generated@@0 $generated@@219)
)) (= (ControlFlow 0 5) 2))) $generated@@216))))
(let (($generated@@221  (=> (and (< 0 ($generated@@170 $generated@@206)) (= (ControlFlow 0 4) 2)) $generated@@216)))
(let (($generated@@222  (=> (= $generated@@212 ($generated@@50 $generated@@213 $generated@@211 $generated@@214 false)) (and (=> (= (ControlFlow 0 6) 4) $generated@@221) (=> (= (ControlFlow 0 6) 5) $generated@@218)))))
(let (($generated@@223  (=> (and (and (and ($generated@@208 $generated@@211) ($generated@@210 $generated@@211)) (= 1 $generated@@215)) (and (< $generated@@207 100) (= (ControlFlow 0 7) 6))) $generated@@222)))
$generated@@223))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
