(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@55 () T@U)
(declare-fun $generated@@56 () T@U)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@58 () T@U)
(declare-fun $generated@@59 () T@U)
(declare-fun $generated@@60 () T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@67 (T@U) T@U)
(declare-fun $generated@@69 (T@U T@U T@U) Bool)
(declare-fun $generated@@70 (Int) T@U)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@76 (T@U T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@U T@U) T@U)
(declare-fun $generated@@79 (T@U T@U T@U) T@U)
(declare-fun $generated@@127 (T@U T@U T@U) T@U)
(declare-fun $generated@@128 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@129 (T@T T@T) T@T)
(declare-fun $generated@@130 (T@T) T@T)
(declare-fun $generated@@131 (T@T) T@T)
(declare-fun $generated@@132 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@183 () Int)
(declare-fun $generated@@184 (T@U Int) Bool)
(declare-fun $generated@@185 () T@T)
(declare-fun $generated@@186 (Int) Bool)
(declare-fun $generated@@189 (T@T) T@U)
(declare-fun $generated@@190 (T@U) Int)
(declare-fun $generated@@191 (T@T) T@T)
(declare-fun $generated@@192 (T@T) T@T)
(declare-fun $generated@@197 (T@U) T@U)
(declare-fun $generated@@198 (T@T T@T) T@U)
(declare-fun $generated@@199 (T@T T@T) T@T)
(declare-fun $generated@@200 (T@T) T@T)
(declare-fun $generated@@201 (T@T) T@T)
(declare-fun $generated@@215 (T@U) T@U)
(declare-fun $generated@@216 (T@T T@T) T@U)
(declare-fun $generated@@217 (T@T T@T) T@T)
(declare-fun $generated@@218 (T@T) T@T)
(declare-fun $generated@@219 (T@T) T@T)
(declare-fun $generated@@241 (T@U) T@U)
(declare-fun $generated@@242 () T@T)
(declare-fun $generated@@243 (T@U T@U T@U) Bool)
(declare-fun $generated@@249 (T@U) T@U)
(declare-fun $generated@@255 (T@U T@U) T@U)
(declare-fun $generated@@256 (T@U) T@U)
(declare-fun $generated@@267 (T@U T@U) T@U)
(declare-fun $generated@@268 (T@U) T@U)
(declare-fun $generated@@279 (T@U) T@U)
(declare-fun $generated@@280 () T@U)
(declare-fun $generated@@284 (T@T) T@U)
(declare-fun $generated@@289 (T@U) T@U)
(declare-fun $generated@@295 (T@U) T@U)
(declare-fun $generated@@299 (T@U) T@U)
(declare-fun $generated@@305 (T@U) T@U)
(declare-fun $generated@@309 (T@U) T@U)
(declare-fun $generated@@315 (T@U) T@U)
(declare-fun $generated@@316 (T@U Int) T@U)
(declare-fun $generated@@325 (T@U) Int)
(declare-fun $generated@@327 (T@U) T@U)
(declare-fun $generated@@331 (T@U) T@U)
(declare-fun $generated@@335 (T@U) T@U)
(declare-fun $generated@@336 (T@U) T@U)
(declare-fun $generated@@341 (T@U) T@U)
(declare-fun $generated@@359 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@61) 6) (= (type $generated@@44) $generated@@61)) (= (type $generated@@45) $generated@@61)) (= (type $generated@@46) $generated@@61)) (= (type $generated@@47) $generated@@61)) (= (type $generated@@48) $generated@@61)) (= ($generated@@1 $generated@@62) 7)) (= (type $generated@@49) $generated@@62)) (= (type $generated@@50) $generated@@62)) (= (type $generated@@51) $generated@@62)) (= (type $generated@@52) $generated@@62)) (= (type $generated@@53) $generated@@62)) (= (type $generated@@54) $generated@@62)) (= (type $generated@@55) $generated@@62)) (= (type $generated@@56) $generated@@62)) (= (type $generated@@57) $generated@@62)) (= (type $generated@@58) $generated@@62)) (= (type $generated@@59) $generated@@62)) (forall (($generated@@65 T@T) ) (= ($generated@@1 ($generated@@63 $generated@@65)) 8))) (forall (($generated@@66 T@T) ) (! (= ($generated@@64 ($generated@@63 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@63 $generated@@66))
))) (= (type $generated@@60) ($generated@@63 $generated@@4))))
(assert (distinct $generated@@44 $generated@@45 $generated@@46 $generated@@47 $generated@@48 $generated@@49 $generated@@50 $generated@@51 $generated@@52 $generated@@53 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60)
)
(assert (forall (($generated@@68 T@U) ) (! (= (type ($generated@@67 $generated@@68)) $generated@@62)
 :pattern ( ($generated@@67 $generated@@68))
)))
(assert (= ($generated@@67 $generated@@44) $generated@@49))
(assert (= ($generated@@67 $generated@@45) $generated@@50))
(assert (= ($generated@@67 $generated@@46) $generated@@51))
(assert (= ($generated@@67 $generated@@47) $generated@@52))
(assert (= ($generated@@67 $generated@@48) $generated@@53))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ) (= ($generated@@1 ($generated@@71 $generated@@80 $generated@@81)) 9)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@82 $generated@@83)) $generated@@82)
 :pattern ( ($generated@@71 $generated@@82 $generated@@83))
))) (forall (($generated@@84 T@T) ($generated@@85 T@T) ) (! (= ($generated@@75 ($generated@@71 $generated@@84 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@71 $generated@@84 $generated@@85))
))) (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (let (($generated@@88 ($generated@@75 (type $generated@@86))))
(= (type ($generated@@76 $generated@@86 $generated@@87)) $generated@@88))
 :pattern ( ($generated@@76 $generated@@86 $generated@@87))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (let (($generated@@92 (type $generated@@91)))
(let (($generated@@93 (type $generated@@90)))
(= (type ($generated@@77 $generated@@89 $generated@@90 $generated@@91)) ($generated@@71 $generated@@93 $generated@@92))))
 :pattern ( ($generated@@77 $generated@@89 $generated@@90 $generated@@91))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (let (($generated@@97 ($generated@@75 (type $generated@@94))))
 (=> (= (type $generated@@96) $generated@@97) (= ($generated@@76 ($generated@@77 $generated@@94 $generated@@95 $generated@@96) $generated@@95) $generated@@96)))
 :weight 0
))) (and (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@100 $generated@@101) (= ($generated@@76 ($generated@@77 $generated@@99 $generated@@100 $generated@@98) $generated@@101) ($generated@@76 $generated@@99 $generated@@101)))
 :weight 0
)) (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or true (= ($generated@@76 ($generated@@77 $generated@@103 $generated@@104 $generated@@102) $generated@@105) ($generated@@76 $generated@@103 $generated@@105)))
 :weight 0
)))) (= ($generated@@1 $generated@@72) 10)) (forall (($generated@@106 T@U) ($generated@@107 T@U) ) (! (let (($generated@@108 ($generated@@64 (type $generated@@107))))
(= (type ($generated@@78 $generated@@106 $generated@@107)) $generated@@108))
 :pattern ( ($generated@@78 $generated@@106 $generated@@107))
))) (= ($generated@@1 $generated@@73) 11)) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= (type ($generated@@79 $generated@@109 $generated@@110 $generated@@111)) $generated@@73)
 :pattern ( ($generated@@79 $generated@@109 $generated@@110 $generated@@111))
))) (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (let (($generated@@115 ($generated@@64 (type $generated@@113))))
 (=> (= (type $generated@@114) $generated@@115) (= ($generated@@78 ($generated@@79 $generated@@112 $generated@@113 $generated@@114) $generated@@113) $generated@@114)))
 :weight 0
))) (and (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@118 $generated@@119) (= ($generated@@78 ($generated@@79 $generated@@117 $generated@@118 $generated@@116) $generated@@119) ($generated@@78 $generated@@117 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or true (= ($generated@@78 ($generated@@79 $generated@@121 $generated@@122 $generated@@120) $generated@@123) ($generated@@78 $generated@@121 $generated@@123)))
 :weight 0
)))) (forall (($generated@@124 Int) ) (! (= (type ($generated@@70 $generated@@124)) $generated@@61)
 :pattern ( ($generated@@70 $generated@@124))
))))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> (and (= (type $generated@@125) $generated@@2) (= (type $generated@@126) ($generated@@71 $generated@@72 $generated@@73))) ($generated@@69 $generated@@125 ($generated@@70 0) $generated@@126))
 :pattern ( ($generated@@69 $generated@@125 ($generated@@70 0) $generated@@126))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@133 T@T) ($generated@@134 T@T) ) (= ($generated@@1 ($generated@@129 $generated@@133 $generated@@134)) 12)) (forall (($generated@@135 T@T) ($generated@@136 T@T) ) (! (= ($generated@@130 ($generated@@129 $generated@@135 $generated@@136)) $generated@@135)
 :pattern ( ($generated@@129 $generated@@135 $generated@@136))
))) (forall (($generated@@137 T@T) ($generated@@138 T@T) ) (! (= ($generated@@131 ($generated@@129 $generated@@137 $generated@@138)) $generated@@138)
 :pattern ( ($generated@@129 $generated@@137 $generated@@138))
))) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (! (let (($generated@@142 ($generated@@131 (type $generated@@139))))
(= (type ($generated@@127 $generated@@139 $generated@@140 $generated@@141)) $generated@@142))
 :pattern ( ($generated@@127 $generated@@139 $generated@@140 $generated@@141))
))) (forall (($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ) (! (let (($generated@@147 (type $generated@@146)))
(let (($generated@@148 (type $generated@@144)))
(= (type ($generated@@132 $generated@@143 $generated@@144 $generated@@145 $generated@@146)) ($generated@@129 $generated@@148 $generated@@147))))
 :pattern ( ($generated@@132 $generated@@143 $generated@@144 $generated@@145 $generated@@146))
))) (forall (($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ) (! (let (($generated@@153 ($generated@@131 (type $generated@@149))))
 (=> (= (type $generated@@152) $generated@@153) (= ($generated@@127 ($generated@@132 $generated@@149 $generated@@150 $generated@@151 $generated@@152) $generated@@150 $generated@@151) $generated@@152)))
 :weight 0
))) (and (and (forall (($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ) (!  (or (= $generated@@156 $generated@@158) (= ($generated@@127 ($generated@@132 $generated@@155 $generated@@156 $generated@@157 $generated@@154) $generated@@158 $generated@@159) ($generated@@127 $generated@@155 $generated@@158 $generated@@159)))
 :weight 0
)) (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ) (!  (or (= $generated@@163 $generated@@165) (= ($generated@@127 ($generated@@132 $generated@@161 $generated@@162 $generated@@163 $generated@@160) $generated@@164 $generated@@165) ($generated@@127 $generated@@161 $generated@@164 $generated@@165)))
 :weight 0
))) (forall (($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 T@U) ) (!  (or true (= ($generated@@127 ($generated@@132 $generated@@167 $generated@@168 $generated@@169 $generated@@166) $generated@@170 $generated@@171) ($generated@@127 $generated@@167 $generated@@170 $generated@@171)))
 :weight 0
)))) (forall (($generated@@172 T@U) ($generated@@173 T@U) ($generated@@174 T@U) ($generated@@175 Bool) ) (! (= (type ($generated@@128 $generated@@172 $generated@@173 $generated@@174 $generated@@175)) ($generated@@129 $generated@@72 $generated@@4))
 :pattern ( ($generated@@128 $generated@@172 $generated@@173 $generated@@174 $generated@@175))
))))
(assert (forall (($generated@@176 T@U) ($generated@@177 T@U) ($generated@@178 T@U) ($generated@@179 Bool) ($generated@@180 T@U) ($generated@@181 T@U) ) (! (let (($generated@@182 ($generated@@64 (type $generated@@181))))
 (=> (and (and (and (and (= (type $generated@@176) $generated@@72) (= (type $generated@@177) ($generated@@71 $generated@@72 $generated@@73))) (= (type $generated@@178) ($generated@@63 $generated@@4))) (= (type $generated@@180) $generated@@72)) (= (type $generated@@181) ($generated@@63 $generated@@182))) (= ($generated@@0 ($generated@@127 ($generated@@128 $generated@@176 $generated@@177 $generated@@178 $generated@@179) $generated@@180 $generated@@181))  (=> (and (not (= $generated@@180 $generated@@176)) ($generated@@0 ($generated@@78 ($generated@@76 $generated@@177 $generated@@180) $generated@@178))) $generated@@179))))
 :pattern ( ($generated@@127 ($generated@@128 $generated@@176 $generated@@177 $generated@@178 $generated@@179) $generated@@180 $generated@@181))
)))
(assert (= ($generated@@1 $generated@@185) 13))
(assert  (=> (<= 0 $generated@@183) (forall (($generated@@187 T@U) ($generated@@188 Int) ) (!  (=> (and (= (type $generated@@187) $generated@@185) (or ($generated@@186 $generated@@188) (not (= 0 $generated@@183)))) true)
 :pattern ( ($generated@@184 $generated@@187 $generated@@188))
))))
(assert  (and (and (forall (($generated@@193 T@T) ) (= ($generated@@1 ($generated@@191 $generated@@193)) 14)) (forall (($generated@@194 T@T) ) (! (= ($generated@@192 ($generated@@191 $generated@@194)) $generated@@194)
 :pattern ( ($generated@@191 $generated@@194))
))) (forall (($generated@@195 T@T) ) (! (= (type ($generated@@189 $generated@@195)) ($generated@@191 $generated@@195))
 :pattern ( ($generated@@189 $generated@@195))
))))
(assert (forall (($generated@@196 T@T) ) (! (= ($generated@@190 ($generated@@189 $generated@@196)) 0)
 :pattern ( ($generated@@189 $generated@@196))
)))
(assert  (and (and (and (and (forall (($generated@@202 T@T) ($generated@@203 T@T) ) (= ($generated@@1 ($generated@@199 $generated@@202 $generated@@203)) 15)) (forall (($generated@@204 T@T) ($generated@@205 T@T) ) (! (= ($generated@@200 ($generated@@199 $generated@@204 $generated@@205)) $generated@@204)
 :pattern ( ($generated@@199 $generated@@204 $generated@@205))
))) (forall (($generated@@206 T@T) ($generated@@207 T@T) ) (! (= ($generated@@201 ($generated@@199 $generated@@206 $generated@@207)) $generated@@207)
 :pattern ( ($generated@@199 $generated@@206 $generated@@207))
))) (forall (($generated@@208 T@U) ) (! (let (($generated@@209 ($generated@@200 (type $generated@@208))))
(= (type ($generated@@197 $generated@@208)) ($generated@@71 $generated@@209 $generated@@4)))
 :pattern ( ($generated@@197 $generated@@208))
))) (forall (($generated@@210 T@T) ($generated@@211 T@T) ) (! (= (type ($generated@@198 $generated@@210 $generated@@211)) ($generated@@199 $generated@@210 $generated@@211))
 :pattern ( ($generated@@198 $generated@@210 $generated@@211))
))))
(assert (forall (($generated@@212 T@U) ($generated@@213 T@T) ) (! (let (($generated@@214 (type $generated@@212)))
 (not ($generated@@0 ($generated@@76 ($generated@@197 ($generated@@198 $generated@@214 $generated@@213)) $generated@@212))))
 :pattern ( (let (($generated@@214 (type $generated@@212)))
($generated@@76 ($generated@@197 ($generated@@198 $generated@@214 $generated@@213)) $generated@@212)))
)))
(assert  (and (and (and (and (forall (($generated@@220 T@T) ($generated@@221 T@T) ) (= ($generated@@1 ($generated@@217 $generated@@220 $generated@@221)) 16)) (forall (($generated@@222 T@T) ($generated@@223 T@T) ) (! (= ($generated@@218 ($generated@@217 $generated@@222 $generated@@223)) $generated@@222)
 :pattern ( ($generated@@217 $generated@@222 $generated@@223))
))) (forall (($generated@@224 T@T) ($generated@@225 T@T) ) (! (= ($generated@@219 ($generated@@217 $generated@@224 $generated@@225)) $generated@@225)
 :pattern ( ($generated@@217 $generated@@224 $generated@@225))
))) (forall (($generated@@226 T@U) ) (! (let (($generated@@227 ($generated@@218 (type $generated@@226))))
(= (type ($generated@@215 $generated@@226)) ($generated@@71 $generated@@227 $generated@@4)))
 :pattern ( ($generated@@215 $generated@@226))
))) (forall (($generated@@228 T@T) ($generated@@229 T@T) ) (! (= (type ($generated@@216 $generated@@228 $generated@@229)) ($generated@@217 $generated@@228 $generated@@229))
 :pattern ( ($generated@@216 $generated@@228 $generated@@229))
))))
(assert (forall (($generated@@230 T@U) ($generated@@231 T@T) ) (! (let (($generated@@232 (type $generated@@230)))
 (not ($generated@@0 ($generated@@76 ($generated@@215 ($generated@@216 $generated@@232 $generated@@231)) $generated@@230))))
 :pattern ( (let (($generated@@232 (type $generated@@230)))
($generated@@76 ($generated@@215 ($generated@@216 $generated@@232 $generated@@231)) $generated@@230)))
)))
(assert (forall (($generated@@233 T@U) ) (! (let (($generated@@234 ($generated@@201 (type $generated@@233))))
(let (($generated@@235 ($generated@@200 (type $generated@@233))))
 (=> (= (type $generated@@233) ($generated@@199 $generated@@235 $generated@@234)) (or (= $generated@@233 ($generated@@198 $generated@@235 $generated@@234)) (exists (($generated@@236 T@U) ) (!  (and (= (type $generated@@236) $generated@@235) ($generated@@0 ($generated@@76 ($generated@@197 $generated@@233) $generated@@236)))
 :no-pattern (type $generated@@236)
 :no-pattern ($generated $generated@@236)
 :no-pattern ($generated@@0 $generated@@236)
))))))
 :pattern ( ($generated@@197 $generated@@233))
)))
(assert (forall (($generated@@237 T@U) ) (! (let (($generated@@238 ($generated@@219 (type $generated@@237))))
(let (($generated@@239 ($generated@@218 (type $generated@@237))))
 (=> (= (type $generated@@237) ($generated@@217 $generated@@239 $generated@@238)) (or (= $generated@@237 ($generated@@216 $generated@@239 $generated@@238)) (exists (($generated@@240 T@U) ) (!  (and (= (type $generated@@240) $generated@@239) ($generated@@0 ($generated@@76 ($generated@@215 $generated@@237) $generated@@240)))
 :no-pattern (type $generated@@240)
 :no-pattern ($generated $generated@@240)
 :no-pattern ($generated@@0 $generated@@240)
))))))
 :pattern ( ($generated@@215 $generated@@237))
)))
(assert  (and (= ($generated@@1 $generated@@242) 17) (forall (($generated@@244 T@U) ) (! (= (type ($generated@@241 $generated@@244)) $generated@@61)
 :pattern ( ($generated@@241 $generated@@244))
))))
(assert (forall (($generated@@245 T@U) ($generated@@246 T@U) ($generated@@247 T@U) ) (!  (=> (and (and (= (type $generated@@245) ($generated@@71 $generated@@242 $generated@@4)) (= (type $generated@@246) $generated@@61)) (= (type $generated@@247) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@245 ($generated@@241 $generated@@246) $generated@@247) (forall (($generated@@248 T@U) ) (!  (=> (and (= (type $generated@@248) $generated@@242) ($generated@@0 ($generated@@76 $generated@@245 $generated@@248))) ($generated@@243 $generated@@248 $generated@@246 $generated@@247))
 :pattern ( ($generated@@76 $generated@@245 $generated@@248))
))))
 :pattern ( ($generated@@69 $generated@@245 ($generated@@241 $generated@@246) $generated@@247))
)))
(assert (forall (($generated@@250 T@U) ) (! (= (type ($generated@@249 $generated@@250)) $generated@@61)
 :pattern ( ($generated@@249 $generated@@250))
)))
(assert (forall (($generated@@251 T@U) ($generated@@252 T@U) ($generated@@253 T@U) ) (!  (=> (and (and (= (type $generated@@251) ($generated@@71 $generated@@242 $generated@@4)) (= (type $generated@@252) $generated@@61)) (= (type $generated@@253) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@251 ($generated@@249 $generated@@252) $generated@@253) (forall (($generated@@254 T@U) ) (!  (=> (and (= (type $generated@@254) $generated@@242) ($generated@@0 ($generated@@76 $generated@@251 $generated@@254))) ($generated@@243 $generated@@254 $generated@@252 $generated@@253))
 :pattern ( ($generated@@76 $generated@@251 $generated@@254))
))))
 :pattern ( ($generated@@69 $generated@@251 ($generated@@249 $generated@@252) $generated@@253))
)))
(assert  (and (forall (($generated@@257 T@U) ($generated@@258 T@U) ) (! (= (type ($generated@@255 $generated@@257 $generated@@258)) $generated@@61)
 :pattern ( ($generated@@255 $generated@@257 $generated@@258))
)) (forall (($generated@@259 T@U) ) (! (let (($generated@@260 ($generated@@201 (type $generated@@259))))
(let (($generated@@261 ($generated@@200 (type $generated@@259))))
(= (type ($generated@@256 $generated@@259)) ($generated@@71 $generated@@261 $generated@@260))))
 :pattern ( ($generated@@256 $generated@@259))
))))
(assert (forall (($generated@@262 T@U) ($generated@@263 T@U) ($generated@@264 T@U) ($generated@@265 T@U) ) (!  (=> (and (and (and (= (type $generated@@262) ($generated@@199 $generated@@242 $generated@@242)) (= (type $generated@@263) $generated@@61)) (= (type $generated@@264) $generated@@61)) (= (type $generated@@265) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@262 ($generated@@255 $generated@@263 $generated@@264) $generated@@265) (forall (($generated@@266 T@U) ) (!  (=> (and (= (type $generated@@266) $generated@@242) ($generated@@0 ($generated@@76 ($generated@@197 $generated@@262) $generated@@266))) (and ($generated@@243 ($generated@@76 ($generated@@256 $generated@@262) $generated@@266) $generated@@264 $generated@@265) ($generated@@243 $generated@@266 $generated@@263 $generated@@265)))
 :pattern ( ($generated@@76 ($generated@@256 $generated@@262) $generated@@266))
 :pattern ( ($generated@@76 ($generated@@197 $generated@@262) $generated@@266))
))))
 :pattern ( ($generated@@69 $generated@@262 ($generated@@255 $generated@@263 $generated@@264) $generated@@265))
)))
(assert  (and (forall (($generated@@269 T@U) ($generated@@270 T@U) ) (! (= (type ($generated@@267 $generated@@269 $generated@@270)) $generated@@61)
 :pattern ( ($generated@@267 $generated@@269 $generated@@270))
)) (forall (($generated@@271 T@U) ) (! (let (($generated@@272 ($generated@@219 (type $generated@@271))))
(let (($generated@@273 ($generated@@218 (type $generated@@271))))
(= (type ($generated@@268 $generated@@271)) ($generated@@71 $generated@@273 $generated@@272))))
 :pattern ( ($generated@@268 $generated@@271))
))))
(assert (forall (($generated@@274 T@U) ($generated@@275 T@U) ($generated@@276 T@U) ($generated@@277 T@U) ) (!  (=> (and (and (and (= (type $generated@@274) ($generated@@217 $generated@@242 $generated@@242)) (= (type $generated@@275) $generated@@61)) (= (type $generated@@276) $generated@@61)) (= (type $generated@@277) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@274 ($generated@@267 $generated@@275 $generated@@276) $generated@@277) (forall (($generated@@278 T@U) ) (!  (=> (and (= (type $generated@@278) $generated@@242) ($generated@@0 ($generated@@76 ($generated@@215 $generated@@274) $generated@@278))) (and ($generated@@243 ($generated@@76 ($generated@@268 $generated@@274) $generated@@278) $generated@@276 $generated@@277) ($generated@@243 $generated@@278 $generated@@275 $generated@@277)))
 :pattern ( ($generated@@76 ($generated@@268 $generated@@274) $generated@@278))
 :pattern ( ($generated@@76 ($generated@@215 $generated@@274) $generated@@278))
))))
 :pattern ( ($generated@@69 $generated@@274 ($generated@@267 $generated@@275 $generated@@276) $generated@@277))
)))
(assert  (and (forall (($generated@@281 T@U) ) (! (= (type ($generated@@279 $generated@@281)) $generated@@185)
 :pattern ( ($generated@@279 $generated@@281))
)) (= (type $generated@@280) $generated@@185)))
(assert (forall (($generated@@282 T@U) ($generated@@283 Int) ) (!  (=> (= (type $generated@@282) $generated@@185) (= ($generated@@184 $generated@@282 $generated@@283) ($generated@@184 $generated@@280 $generated@@283)))
 :pattern ( ($generated@@184 ($generated@@279 $generated@@282) $generated@@283))
)))
(assert (forall (($generated@@285 T@T) ) (! (= (type ($generated@@284 $generated@@285)) ($generated@@71 $generated@@285 $generated@@4))
 :pattern ( ($generated@@284 $generated@@285))
)))
(assert (forall (($generated@@286 T@U) ) (! (let (($generated@@287 ($generated@@219 (type $generated@@286))))
(let (($generated@@288 ($generated@@218 (type $generated@@286))))
 (=> (= (type $generated@@286) ($generated@@217 $generated@@288 $generated@@287)) (= (= $generated@@286 ($generated@@216 $generated@@288 $generated@@287)) (= ($generated@@215 $generated@@286) ($generated@@284 $generated@@288))))))
 :pattern ( ($generated@@215 $generated@@286))
)))
(assert (forall (($generated@@290 T@U) ) (! (= (type ($generated@@289 $generated@@290)) $generated@@185)
 :pattern ( ($generated@@289 $generated@@290))
)))
(assert (forall (($generated@@291 T@U) ($generated@@292 Int) ) (!  (=> (= (type $generated@@291) $generated@@185) (= ($generated@@184 ($generated@@289 $generated@@291) $generated@@292) ($generated@@184 $generated@@291 $generated@@292)))
 :pattern ( ($generated@@184 ($generated@@289 $generated@@291) $generated@@292))
)))
(assert (forall (($generated@@293 T@U) ) (! (let (($generated@@294 ($generated@@192 (type $generated@@293))))
 (=> (= (type $generated@@293) ($generated@@191 $generated@@294)) (<= 0 ($generated@@190 $generated@@293))))
 :pattern ( ($generated@@190 $generated@@293))
)))
(assert (forall (($generated@@296 T@U) ) (! (= (type ($generated@@295 $generated@@296)) $generated@@61)
 :pattern ( ($generated@@295 $generated@@296))
)))
(assert (forall (($generated@@297 T@U) ($generated@@298 T@U) ) (!  (=> (and (= (type $generated@@297) $generated@@61) (= (type $generated@@298) $generated@@61)) (= ($generated@@295 ($generated@@255 $generated@@297 $generated@@298)) $generated@@297))
 :pattern ( ($generated@@255 $generated@@297 $generated@@298))
)))
(assert (forall (($generated@@300 T@U) ) (! (= (type ($generated@@299 $generated@@300)) $generated@@61)
 :pattern ( ($generated@@299 $generated@@300))
)))
(assert (forall (($generated@@301 T@U) ($generated@@302 T@U) ) (!  (=> (and (= (type $generated@@301) $generated@@61) (= (type $generated@@302) $generated@@61)) (= ($generated@@299 ($generated@@255 $generated@@301 $generated@@302)) $generated@@302))
 :pattern ( ($generated@@255 $generated@@301 $generated@@302))
)))
(assert (forall (($generated@@303 T@U) ($generated@@304 T@U) ) (!  (=> (and (= (type $generated@@303) $generated@@61) (= (type $generated@@304) $generated@@61)) (= ($generated@@67 ($generated@@255 $generated@@303 $generated@@304)) $generated@@58))
 :pattern ( ($generated@@255 $generated@@303 $generated@@304))
)))
(assert (forall (($generated@@306 T@U) ) (! (= (type ($generated@@305 $generated@@306)) $generated@@61)
 :pattern ( ($generated@@305 $generated@@306))
)))
(assert (forall (($generated@@307 T@U) ($generated@@308 T@U) ) (!  (=> (and (= (type $generated@@307) $generated@@61) (= (type $generated@@308) $generated@@61)) (= ($generated@@305 ($generated@@267 $generated@@307 $generated@@308)) $generated@@307))
 :pattern ( ($generated@@267 $generated@@307 $generated@@308))
)))
(assert (forall (($generated@@310 T@U) ) (! (= (type ($generated@@309 $generated@@310)) $generated@@61)
 :pattern ( ($generated@@309 $generated@@310))
)))
(assert (forall (($generated@@311 T@U) ($generated@@312 T@U) ) (!  (=> (and (= (type $generated@@311) $generated@@61) (= (type $generated@@312) $generated@@61)) (= ($generated@@309 ($generated@@267 $generated@@311 $generated@@312)) $generated@@312))
 :pattern ( ($generated@@267 $generated@@311 $generated@@312))
)))
(assert (forall (($generated@@313 T@U) ($generated@@314 T@U) ) (!  (=> (and (= (type $generated@@313) $generated@@61) (= (type $generated@@314) $generated@@61)) (= ($generated@@67 ($generated@@267 $generated@@313 $generated@@314)) $generated@@59))
 :pattern ( ($generated@@267 $generated@@313 $generated@@314))
)))
(assert  (and (forall (($generated@@317 T@U) ) (! (= (type ($generated@@315 $generated@@317)) $generated@@61)
 :pattern ( ($generated@@315 $generated@@317))
)) (forall (($generated@@318 T@U) ($generated@@319 Int) ) (! (let (($generated@@320 ($generated@@192 (type $generated@@318))))
(= (type ($generated@@316 $generated@@318 $generated@@319)) $generated@@320))
 :pattern ( ($generated@@316 $generated@@318 $generated@@319))
))))
(assert (forall (($generated@@321 T@U) ($generated@@322 T@U) ($generated@@323 T@U) ) (!  (=> (and (and (= (type $generated@@321) ($generated@@191 $generated@@242)) (= (type $generated@@322) $generated@@61)) (= (type $generated@@323) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@321 ($generated@@315 $generated@@322) $generated@@323) (forall (($generated@@324 Int) ) (!  (=> (and (<= 0 $generated@@324) (< $generated@@324 ($generated@@190 $generated@@321))) ($generated@@243 ($generated@@316 $generated@@321 $generated@@324) $generated@@322 $generated@@323))
 :pattern ( ($generated@@316 $generated@@321 $generated@@324))
))))
 :pattern ( ($generated@@69 $generated@@321 ($generated@@315 $generated@@322) $generated@@323))
)))
(assert (forall (($generated@@326 Int) ) (! (= ($generated@@325 ($generated@@70 $generated@@326)) $generated@@326)
 :pattern ( ($generated@@70 $generated@@326))
)))
(assert (forall (($generated@@328 T@U) ) (! (= (type ($generated@@327 $generated@@328)) $generated@@61)
 :pattern ( ($generated@@327 $generated@@328))
)))
(assert (forall (($generated@@329 T@U) ) (!  (=> (= (type $generated@@329) $generated@@61) (= ($generated@@327 ($generated@@241 $generated@@329)) $generated@@329))
 :pattern ( ($generated@@241 $generated@@329))
)))
(assert (forall (($generated@@330 T@U) ) (!  (=> (= (type $generated@@330) $generated@@61) (= ($generated@@67 ($generated@@241 $generated@@330)) $generated@@54))
 :pattern ( ($generated@@241 $generated@@330))
)))
(assert (forall (($generated@@332 T@U) ) (! (= (type ($generated@@331 $generated@@332)) $generated@@61)
 :pattern ( ($generated@@331 $generated@@332))
)))
(assert (forall (($generated@@333 T@U) ) (!  (=> (= (type $generated@@333) $generated@@61) (= ($generated@@331 ($generated@@249 $generated@@333)) $generated@@333))
 :pattern ( ($generated@@249 $generated@@333))
)))
(assert (forall (($generated@@334 T@U) ) (!  (=> (= (type $generated@@334) $generated@@61) (= ($generated@@67 ($generated@@249 $generated@@334)) $generated@@55))
 :pattern ( ($generated@@249 $generated@@334))
)))
(assert  (and (forall (($generated@@337 T@U) ) (! (= (type ($generated@@335 $generated@@337)) $generated@@61)
 :pattern ( ($generated@@335 $generated@@337))
)) (forall (($generated@@338 T@U) ) (! (= (type ($generated@@336 $generated@@338)) $generated@@61)
 :pattern ( ($generated@@336 $generated@@338))
))))
(assert (forall (($generated@@339 T@U) ) (!  (=> (= (type $generated@@339) $generated@@61) (= ($generated@@336 ($generated@@335 $generated@@339)) $generated@@339))
 :pattern ( ($generated@@335 $generated@@339))
)))
(assert (forall (($generated@@340 T@U) ) (!  (=> (= (type $generated@@340) $generated@@61) (= ($generated@@67 ($generated@@335 $generated@@340)) $generated@@56))
 :pattern ( ($generated@@335 $generated@@340))
)))
(assert (forall (($generated@@342 T@U) ) (! (= (type ($generated@@341 $generated@@342)) $generated@@61)
 :pattern ( ($generated@@341 $generated@@342))
)))
(assert (forall (($generated@@343 T@U) ) (!  (=> (= (type $generated@@343) $generated@@61) (= ($generated@@341 ($generated@@315 $generated@@343)) $generated@@343))
 :pattern ( ($generated@@315 $generated@@343))
)))
(assert (forall (($generated@@344 T@U) ) (!  (=> (= (type $generated@@344) $generated@@61) (= ($generated@@67 ($generated@@315 $generated@@344)) $generated@@57))
 :pattern ( ($generated@@315 $generated@@344))
)))
(assert (forall (($generated@@345 T@U) ) (! (let (($generated@@346 (type $generated@@345)))
 (not ($generated@@0 ($generated@@76 ($generated@@284 $generated@@346) $generated@@345))))
 :pattern ( (let (($generated@@346 (type $generated@@345)))
($generated@@76 ($generated@@284 $generated@@346) $generated@@345)))
)))
(assert (forall (($generated@@347 T@U) ($generated@@348 T@U) ($generated@@349 T@U) ) (!  (=> (and (and (= (type $generated@@347) ($generated@@71 $generated@@242 $generated@@2)) (= (type $generated@@348) $generated@@61)) (= (type $generated@@349) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@347 ($generated@@335 $generated@@348) $generated@@349) (forall (($generated@@350 T@U) ) (!  (=> (and (= (type $generated@@350) $generated@@242) (< 0 ($generated ($generated@@76 $generated@@347 $generated@@350)))) ($generated@@243 $generated@@350 $generated@@348 $generated@@349))
 :pattern ( ($generated@@76 $generated@@347 $generated@@350))
))))
 :pattern ( ($generated@@69 $generated@@347 ($generated@@335 $generated@@348) $generated@@349))
)))
(assert (forall (($generated@@351 T@U) ) (! (let (($generated@@352 ($generated@@192 (type $generated@@351))))
 (=> (and (= (type $generated@@351) ($generated@@191 $generated@@352)) (= ($generated@@190 $generated@@351) 0)) (= $generated@@351 ($generated@@189 $generated@@352))))
 :pattern ( ($generated@@190 $generated@@351))
)))
(assert (forall (($generated@@353 T@U) ($generated@@354 T@U) ) (!  (=> (and (= (type $generated@@353) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@354) $generated@@2)) ($generated@@69 $generated@@354 $generated@@46 $generated@@353))
 :pattern ( ($generated@@69 $generated@@354 $generated@@46 $generated@@353))
)))
(assert (forall (($generated@@355 T@U) ($generated@@356 T@U) ) (!  (=> (and (= (type $generated@@355) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@356) $generated@@3)) ($generated@@69 $generated@@356 $generated@@47 $generated@@355))
 :pattern ( ($generated@@69 $generated@@356 $generated@@47 $generated@@355))
)))
(assert (forall (($generated@@357 T@U) ($generated@@358 T@U) ) (!  (=> (and (= (type $generated@@357) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@358) $generated@@4)) ($generated@@69 $generated@@358 $generated@@44 $generated@@357))
 :pattern ( ($generated@@69 $generated@@358 $generated@@44 $generated@@357))
)))
(assert (= ($generated@@1 $generated@@359) 18))
(assert (forall (($generated@@360 T@U) ($generated@@361 T@U) ) (!  (=> (and (= (type $generated@@360) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@361) $generated@@359)) ($generated@@69 $generated@@361 $generated@@45 $generated@@360))
 :pattern ( ($generated@@69 $generated@@361 $generated@@45 $generated@@360))
)))
(assert (forall (($generated@@362 T@U) ($generated@@363 T@U) ) (!  (=> (and (= (type $generated@@362) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@363) $generated@@242)) ($generated@@69 $generated@@363 $generated@@48 $generated@@362))
 :pattern ( ($generated@@69 $generated@@363 $generated@@48 $generated@@362))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@364 () T@U)
(declare-fun $generated@@365 () T@U)
(declare-fun $generated@@366 () T@U)
(declare-fun $generated@@367 () T@U)
(declare-fun $generated@@368 () T@U)
(declare-fun $generated@@369 () Int)
(declare-fun $generated@@370 (T@U) Bool)
(declare-fun $generated@@371 (T@U) Bool)
(assert  (and (and (and (and (= (type $generated@@364) $generated@@185) (= (type $generated@@365) $generated@@185)) (= (type $generated@@366) ($generated@@129 $generated@@72 $generated@@4))) (= (type $generated@@367) $generated@@72)) (= (type $generated@@368) ($generated@@71 $generated@@72 $generated@@73))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@372  (=> (= ($generated@@279 $generated@@364) $generated@@364) (=> (and (= ($generated@@279 $generated@@365) $generated@@365) (= $generated@@366 ($generated@@128 $generated@@367 $generated@@368 $generated@@60 false))) (=> (and (and ($generated@@69 ($generated@@8 $generated@@369) $generated@@46 $generated@@368) ($generated@@186 $generated@@369)) (and ($generated@@186 $generated@@369) (= (ControlFlow 0 2) (- 0 1)))) ($generated@@184 $generated@@365 $generated@@369))))))
(let (($generated@@373  (=> (and (and (and ($generated@@370 $generated@@368) ($generated@@371 $generated@@368)) (= 1 $generated@@183)) (and (forall (($generated@@374 Int) ) (!  (=> true ($generated@@184 $generated@@364 $generated@@374))
 :pattern ( ($generated@@184 $generated@@364 $generated@@374))
)) (= (ControlFlow 0 3) 2))) $generated@@372)))
$generated@@373)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
