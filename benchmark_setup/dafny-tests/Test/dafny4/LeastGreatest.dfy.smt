(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () Int)
(declare-fun $generated@@45 (T@U T@U Int) Bool)
(declare-fun $generated@@46 (T@U T@U) Bool)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@U T@U) Bool)
(declare-fun $generated@@58 (T@U) T@U)
(declare-fun $generated@@59 (T@U Int) Bool)
(declare-fun $generated@@60 (T@U) Int)
(declare-fun $generated@@61 (Int) Int)
(declare-fun $generated@@62 (T@U T@U) T@U)
(declare-fun $generated@@63 (Int) T@U)
(declare-fun $generated@@76 (T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@78 (T@T) T@T)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 (T@T T@T) T@T)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@T) T@T)
(declare-fun $generated@@83 (T@U T@U) T@U)
(declare-fun $generated@@84 (T@U T@U) T@U)
(declare-fun $generated@@85 (T@T) T@T)
(declare-fun $generated@@86 (T@T) T@T)
(declare-fun $generated@@87 (T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T T@T) T@T)
(declare-fun $generated@@90 (T@T) T@T)
(declare-fun $generated@@91 (T@T) T@T)
(declare-fun $generated@@92 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@193 (T@U) T@U)
(declare-fun $generated@@205 (T@U) Bool)
(declare-fun $generated@@222 (T@U) T@U)
(declare-fun $generated@@223 (T@T T@U) T@U)
(declare-fun $generated@@236 (T@U) T@U)
(declare-fun $generated@@237 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (= ($generated@@1 $generated@@47) 6) (= ($generated@@1 $generated@@48) 7)))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@50 T@U) ($generated@@51 Int) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> (and (and (and (and (and (= (type $generated@@50) $generated@@47) (= (type $generated@@52) $generated@@48)) (= (type $generated@@53) $generated@@48)) (= (type $generated@@54) $generated@@48)) ($generated@@49 $generated@@52 $generated@@53)) ($generated@@45 $generated@@50 $generated@@52 $generated@@51)) ($generated@@45 $generated@@50 $generated@@53 $generated@@51))
 :pattern ( ($generated@@45 $generated@@50 $generated@@52 $generated@@51) ($generated@@46 $generated@@52 $generated@@54) ($generated@@46 $generated@@53 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> (and (and (and (= (type $generated@@55) $generated@@48) (= (type $generated@@56) $generated@@48)) (= (type $generated@@57) $generated@@48)) (and ($generated@@49 $generated@@55 $generated@@56) ($generated@@49 $generated@@56 $generated@@57))) ($generated@@49 $generated@@55 $generated@@57))
 :pattern ( ($generated@@49 $generated@@55 $generated@@56) ($generated@@49 $generated@@56 $generated@@57))
 :pattern ( ($generated@@49 $generated@@55 $generated@@56) ($generated@@49 $generated@@55 $generated@@57))
)))
(assert  (and (and (forall (($generated@@64 T@U) ) (! (= (type ($generated@@58 $generated@@64)) $generated@@47)
 :pattern ( ($generated@@58 $generated@@64))
)) (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (! (= (type ($generated@@62 $generated@@65 $generated@@66)) $generated@@48)
 :pattern ( ($generated@@62 $generated@@65 $generated@@66))
))) (forall (($generated@@67 Int) ) (! (= (type ($generated@@63 $generated@@67)) $generated@@48)
 :pattern ( ($generated@@63 $generated@@67))
))))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 Int) ) (!  (=> (and (and (= (type $generated@@68) $generated@@47) (= (type $generated@@69) $generated@@48)) (or ($generated@@59 $generated@@69 $generated@@70) (not (= 1 $generated@@44)))) (and (and (=> (< 0 ($generated@@60 $generated@@69)) (=> (not (= $generated@@70 ($generated@@61 0))) ($generated@@59 ($generated@@62 $generated@@69 ($generated@@63 1)) (- $generated@@70 1)))) (=> (=> (< 0 ($generated@@60 $generated@@69)) (or (= $generated@@70 ($generated@@61 0)) ($generated@@45 $generated@@68 ($generated@@62 $generated@@69 ($generated@@63 1)) (- $generated@@70 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@69)) (forall (($generated@@71 T@U) ) (!  (=> (and (= (type $generated@@71) $generated@@48) ($generated@@46 $generated@@71 $generated@@69)) ($generated@@59 $generated@@71 $generated@@70))
 :pattern ( ($generated@@45 $generated@@68 $generated@@71 $generated@@70))
))))) (= ($generated@@45 ($generated@@58 $generated@@68) $generated@@69 $generated@@70)  (and (=> (< 0 ($generated@@60 $generated@@69)) (or (= $generated@@70 ($generated@@61 0)) ($generated@@45 $generated@@68 ($generated@@62 $generated@@69 ($generated@@63 1)) (- $generated@@70 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@69)) (exists (($generated@@72 T@U) ) (!  (and (= (type $generated@@72) $generated@@48) (and ($generated@@46 $generated@@72 $generated@@69) ($generated@@45 $generated@@68 $generated@@72 $generated@@70)))
 :pattern ( ($generated@@45 $generated@@68 $generated@@72 $generated@@70))
)))))))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@68) $generated@@69 $generated@@70))
))))
(assert (forall (($generated@@73 T@U) ($generated@@74 Int) ($generated@@75 Int) ) (!  (=> (= (type $generated@@73) $generated@@48) (=> (and (and (<= 0 $generated@@74) (<= 0 $generated@@75)) (<= (+ $generated@@74 $generated@@75) ($generated@@60 $generated@@73))) (= ($generated@@62 ($generated@@62 $generated@@73 ($generated@@63 $generated@@74)) ($generated@@63 $generated@@75)) ($generated@@62 $generated@@73 ($generated@@63 (+ $generated@@74 $generated@@75))))))
 :pattern ( ($generated@@62 ($generated@@62 $generated@@73 ($generated@@63 $generated@@74)) ($generated@@63 $generated@@75)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (= ($generated@@1 ($generated@@80 $generated@@93 $generated@@94)) 8)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (! (= ($generated@@85 ($generated@@80 $generated@@95 $generated@@96)) $generated@@95)
 :pattern ( ($generated@@80 $generated@@95 $generated@@96))
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (! (= ($generated@@86 ($generated@@80 $generated@@97 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@80 $generated@@97 $generated@@98))
))) (forall (($generated@@99 T@U) ($generated@@100 T@U) ) (! (let (($generated@@101 ($generated@@86 (type $generated@@99))))
(= (type ($generated@@84 $generated@@99 $generated@@100)) $generated@@101))
 :pattern ( ($generated@@84 $generated@@99 $generated@@100))
))) (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (let (($generated@@105 (type $generated@@104)))
(let (($generated@@106 (type $generated@@103)))
(= (type ($generated@@87 $generated@@102 $generated@@103 $generated@@104)) ($generated@@80 $generated@@106 $generated@@105))))
 :pattern ( ($generated@@87 $generated@@102 $generated@@103 $generated@@104))
))) (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (let (($generated@@110 ($generated@@86 (type $generated@@107))))
 (=> (= (type $generated@@109) $generated@@110) (= ($generated@@84 ($generated@@87 $generated@@107 $generated@@108 $generated@@109) $generated@@108) $generated@@109)))
 :weight 0
))) (and (forall (($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@113 $generated@@114) (= ($generated@@84 ($generated@@87 $generated@@112 $generated@@113 $generated@@111) $generated@@114) ($generated@@84 $generated@@112 $generated@@114)))
 :weight 0
)) (forall (($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or true (= ($generated@@84 ($generated@@87 $generated@@116 $generated@@117 $generated@@115) $generated@@118) ($generated@@84 $generated@@116 $generated@@118)))
 :weight 0
)))) (forall (($generated@@119 T@T) ) (= ($generated@@1 ($generated@@82 $generated@@119)) 9))) (forall (($generated@@120 T@T) ) (! (= ($generated@@78 ($generated@@82 $generated@@120)) $generated@@120)
 :pattern ( ($generated@@82 $generated@@120))
))) (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (! (let (($generated@@123 ($generated@@78 (type $generated@@122))))
(= (type ($generated@@83 $generated@@121 $generated@@122)) $generated@@123))
 :pattern ( ($generated@@83 $generated@@121 $generated@@122))
))) (= ($generated@@1 $generated@@81) 10)) (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= (type ($generated@@88 $generated@@124 $generated@@125 $generated@@126)) $generated@@81)
 :pattern ( ($generated@@88 $generated@@124 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (let (($generated@@130 ($generated@@78 (type $generated@@128))))
 (=> (= (type $generated@@129) $generated@@130) (= ($generated@@83 ($generated@@88 $generated@@127 $generated@@128 $generated@@129) $generated@@128) $generated@@129)))
 :weight 0
))) (and (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (or (= $generated@@133 $generated@@134) (= ($generated@@83 ($generated@@88 $generated@@132 $generated@@133 $generated@@131) $generated@@134) ($generated@@83 $generated@@132 $generated@@134)))
 :weight 0
)) (forall (($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or true (= ($generated@@83 ($generated@@88 $generated@@136 $generated@@137 $generated@@135) $generated@@138) ($generated@@83 $generated@@136 $generated@@138)))
 :weight 0
)))) (= ($generated@@1 $generated@@79) 11)) (forall (($generated@@139 T@T) ($generated@@140 T@T) ) (= ($generated@@1 ($generated@@89 $generated@@139 $generated@@140)) 12))) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (! (= ($generated@@90 ($generated@@89 $generated@@141 $generated@@142)) $generated@@141)
 :pattern ( ($generated@@89 $generated@@141 $generated@@142))
))) (forall (($generated@@143 T@T) ($generated@@144 T@T) ) (! (= ($generated@@91 ($generated@@89 $generated@@143 $generated@@144)) $generated@@144)
 :pattern ( ($generated@@89 $generated@@143 $generated@@144))
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (! (let (($generated@@148 ($generated@@91 (type $generated@@145))))
(= (type ($generated@@76 $generated@@145 $generated@@146 $generated@@147)) $generated@@148))
 :pattern ( ($generated@@76 $generated@@145 $generated@@146 $generated@@147))
))) (forall (($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ) (! (let (($generated@@153 (type $generated@@152)))
(let (($generated@@154 (type $generated@@150)))
(= (type ($generated@@92 $generated@@149 $generated@@150 $generated@@151 $generated@@152)) ($generated@@89 $generated@@154 $generated@@153))))
 :pattern ( ($generated@@92 $generated@@149 $generated@@150 $generated@@151 $generated@@152))
))) (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ) (! (let (($generated@@159 ($generated@@91 (type $generated@@155))))
 (=> (= (type $generated@@158) $generated@@159) (= ($generated@@76 ($generated@@92 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@156 $generated@@157) $generated@@158)))
 :weight 0
))) (and (and (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ) (!  (or (= $generated@@162 $generated@@164) (= ($generated@@76 ($generated@@92 $generated@@161 $generated@@162 $generated@@163 $generated@@160) $generated@@164 $generated@@165) ($generated@@76 $generated@@161 $generated@@164 $generated@@165)))
 :weight 0
)) (forall (($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 T@U) ) (!  (or (= $generated@@169 $generated@@171) (= ($generated@@76 ($generated@@92 $generated@@167 $generated@@168 $generated@@169 $generated@@166) $generated@@170 $generated@@171) ($generated@@76 $generated@@167 $generated@@170 $generated@@171)))
 :weight 0
))) (forall (($generated@@172 T@U) ($generated@@173 T@U) ($generated@@174 T@U) ($generated@@175 T@U) ($generated@@176 T@U) ($generated@@177 T@U) ) (!  (or true (= ($generated@@76 ($generated@@92 $generated@@173 $generated@@174 $generated@@175 $generated@@172) $generated@@176 $generated@@177) ($generated@@76 $generated@@173 $generated@@176 $generated@@177)))
 :weight 0
)))) (forall (($generated@@178 T@U) ($generated@@179 T@U) ($generated@@180 T@U) ($generated@@181 Bool) ) (! (= (type ($generated@@77 $generated@@178 $generated@@179 $generated@@180 $generated@@181)) ($generated@@89 $generated@@79 $generated@@4))
 :pattern ( ($generated@@77 $generated@@178 $generated@@179 $generated@@180 $generated@@181))
))))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@U) ($generated@@184 T@U) ($generated@@185 Bool) ($generated@@186 T@U) ($generated@@187 T@U) ) (! (let (($generated@@188 ($generated@@78 (type $generated@@187))))
 (=> (and (and (and (and (= (type $generated@@182) $generated@@79) (= (type $generated@@183) ($generated@@80 $generated@@79 $generated@@81))) (= (type $generated@@184) ($generated@@82 $generated@@4))) (= (type $generated@@186) $generated@@79)) (= (type $generated@@187) ($generated@@82 $generated@@188))) (= ($generated@@0 ($generated@@76 ($generated@@77 $generated@@182 $generated@@183 $generated@@184 $generated@@185) $generated@@186 $generated@@187))  (=> (and (not (= $generated@@186 $generated@@182)) ($generated@@0 ($generated@@83 ($generated@@84 $generated@@183 $generated@@186) $generated@@184))) $generated@@185))))
 :pattern ( ($generated@@76 ($generated@@77 $generated@@182 $generated@@183 $generated@@184 $generated@@185) $generated@@186 $generated@@187))
)))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@189 T@U) ($generated@@190 Int) ($generated@@191 T@U) ) (!  (=> (and (and (= (type $generated@@189) $generated@@47) (= (type $generated@@191) $generated@@48)) (= $generated@@191 ($generated@@63 0))) (not ($generated@@45 $generated@@189 $generated@@191 $generated@@190)))
 :pattern ( ($generated@@45 $generated@@189 $generated@@191 $generated@@190))
))))
(assert (forall (($generated@@192 Int) ) (! (= ($generated@@61 $generated@@192) $generated@@192)
 :pattern ( ($generated@@61 $generated@@192))
)))
(assert (forall (($generated@@194 T@U) ) (! (let (($generated@@195 (type $generated@@194)))
(= (type ($generated@@193 $generated@@194)) $generated@@195))
 :pattern ( ($generated@@193 $generated@@194))
)))
(assert (forall (($generated@@196 T@U) ) (! (= ($generated@@193 $generated@@196) $generated@@196)
 :pattern ( ($generated@@193 $generated@@196))
)))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@197 T@U) ($generated@@198 T@U) ($generated@@199 Int) ) (!  (=> (and (and (= (type $generated@@197) $generated@@47) (= (type $generated@@198) $generated@@48)) (or ($generated@@59 ($generated@@193 $generated@@198) $generated@@199) (not (= 1 $generated@@44)))) (and (and (=> (< 0 ($generated@@60 $generated@@198)) (=> (not (= $generated@@199 ($generated@@61 0))) ($generated@@59 ($generated@@62 $generated@@198 ($generated@@63 1)) (- $generated@@199 1)))) (=> (=> (< 0 ($generated@@60 $generated@@198)) (or (= $generated@@199 ($generated@@61 0)) ($generated@@45 ($generated@@58 $generated@@197) ($generated@@62 $generated@@198 ($generated@@63 1)) (- $generated@@199 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@198)) (forall (($generated@@200 T@U) ) (!  (=> (and (= (type $generated@@200) $generated@@48) ($generated@@46 $generated@@200 $generated@@198)) ($generated@@59 $generated@@200 $generated@@199))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@197) $generated@@200 $generated@@199))
))))) (= ($generated@@45 ($generated@@58 $generated@@197) ($generated@@193 $generated@@198) $generated@@199)  (and (=> (< 0 ($generated@@60 $generated@@198)) (or (= $generated@@199 ($generated@@61 0)) ($generated@@45 ($generated@@58 $generated@@197) ($generated@@62 $generated@@198 ($generated@@63 1)) (- $generated@@199 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@198)) (exists (($generated@@201 T@U) ) (!  (and (= (type $generated@@201) $generated@@48) (and ($generated@@46 $generated@@201 $generated@@198) ($generated@@45 ($generated@@58 $generated@@197) $generated@@201 $generated@@199)))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@197) $generated@@201 $generated@@199))
)))))))
 :weight 3
 :pattern ( ($generated@@45 ($generated@@58 $generated@@197) ($generated@@193 $generated@@198) $generated@@199))
))))
(assert (forall (($generated@@202 T@U) ($generated@@203 T@U) ($generated@@204 Int) ) (!  (=> (and (= (type $generated@@202) $generated@@47) (= (type $generated@@203) $generated@@48)) (= ($generated@@45 ($generated@@58 $generated@@202) $generated@@203 $generated@@204) ($generated@@45 $generated@@202 $generated@@203 $generated@@204)))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@202) $generated@@203 $generated@@204))
)))
(assert (forall (($generated@@206 T@U) ($generated@@207 T@U) ) (!  (=> (and (and (= (type $generated@@206) $generated@@48) (= (type $generated@@207) $generated@@48)) (and ($generated@@205 $generated@@207) (<= ($generated@@60 $generated@@207) ($generated@@60 $generated@@206)))) (and (= ($generated@@205 ($generated@@62 $generated@@206 $generated@@207)) ($generated@@205 $generated@@206)) (= ($generated@@60 ($generated@@62 $generated@@206 $generated@@207)) (- ($generated@@60 $generated@@206) ($generated@@60 $generated@@207)))))
 :pattern ( ($generated@@62 $generated@@206 $generated@@207))
)))
(assert (forall (($generated@@208 Int) ) (!  (=> (<= 0 $generated@@208) (and ($generated@@205 ($generated@@63 $generated@@208)) (= ($generated@@60 ($generated@@63 $generated@@208)) $generated@@208)))
 :pattern ( ($generated@@63 $generated@@208))
)))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@209 T@U) ($generated@@210 T@U) ($generated@@211 Int) ) (!  (=> (and (and (= (type $generated@@209) $generated@@47) (= (type $generated@@210) $generated@@48)) (or ($generated@@59 ($generated@@193 $generated@@210) ($generated@@61 $generated@@211)) (not (= 1 $generated@@44)))) (and (and (=> (< 0 ($generated@@60 $generated@@210)) (=> (not (= $generated@@211 ($generated@@61 0))) ($generated@@59 ($generated@@62 $generated@@210 ($generated@@63 1)) (- $generated@@211 1)))) (=> (=> (< 0 ($generated@@60 $generated@@210)) (or (= $generated@@211 ($generated@@61 0)) ($generated@@45 ($generated@@58 $generated@@209) ($generated@@62 $generated@@210 ($generated@@63 1)) (- $generated@@211 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@210)) (forall (($generated@@212 T@U) ) (!  (=> (and (= (type $generated@@212) $generated@@48) ($generated@@46 $generated@@212 $generated@@210)) ($generated@@59 $generated@@212 $generated@@211))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@209) $generated@@212 $generated@@211))
))))) (= ($generated@@45 ($generated@@58 $generated@@209) ($generated@@193 $generated@@210) ($generated@@61 $generated@@211))  (and (=> (< 0 ($generated@@60 $generated@@210)) (or (= $generated@@211 ($generated@@61 0)) ($generated@@45 ($generated@@58 $generated@@209) ($generated@@62 $generated@@210 ($generated@@63 1)) (- $generated@@211 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@210)) (exists (($generated@@213 T@U) ) (!  (and (= (type $generated@@213) $generated@@48) (and ($generated@@46 $generated@@213 $generated@@210) ($generated@@45 ($generated@@58 $generated@@209) $generated@@213 $generated@@211)))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@209) $generated@@213 $generated@@211))
)))))))
 :weight 3
 :pattern ( ($generated@@45 ($generated@@58 $generated@@209) ($generated@@193 $generated@@210) ($generated@@61 $generated@@211)))
))))
(assert (forall (($generated@@214 T@U) ($generated@@215 T@U) ) (!  (=> (and (= (type $generated@@214) $generated@@48) (= (type $generated@@215) $generated@@48)) (or (or ($generated@@49 $generated@@214 $generated@@215) (= $generated@@214 $generated@@215)) ($generated@@49 $generated@@215 $generated@@214)))
 :pattern ( ($generated@@49 $generated@@214 $generated@@215) ($generated@@49 $generated@@215 $generated@@214))
)))
(assert (forall (($generated@@216 T@U) ($generated@@217 T@U) ) (!  (=> (and (= (type $generated@@216) $generated@@48) (= (type $generated@@217) $generated@@48)) (= ($generated@@46 $generated@@216 $generated@@217) ($generated@@49 $generated@@216 $generated@@217)))
 :pattern ( ($generated@@46 $generated@@216 $generated@@217))
)))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@218 T@U) ($generated@@219 T@U) ($generated@@220 Int) ) (!  (=> (and (and (= (type $generated@@218) $generated@@47) (= (type $generated@@219) $generated@@48)) (or ($generated@@59 $generated@@219 $generated@@220) (not (= 1 $generated@@44)))) true)
 :pattern ( ($generated@@45 $generated@@218 $generated@@219 $generated@@220))
))))
(assert (forall (($generated@@221 T@U) ) (!  (=> (= (type $generated@@221) $generated@@48) (<= 0 ($generated@@60 $generated@@221)))
 :pattern ( ($generated@@60 $generated@@221))
)))
(assert  (and (forall (($generated@@224 T@U) ) (! (= (type ($generated@@222 $generated@@224)) $generated@@48)
 :pattern ( ($generated@@222 $generated@@224))
)) (forall (($generated@@225 T@T) ($generated@@226 T@U) ) (! (= (type ($generated@@223 $generated@@225 $generated@@226)) $generated@@225)
 :pattern ( ($generated@@223 $generated@@225 $generated@@226))
))))
(assert (forall (($generated@@227 T@U) ) (! (let (($generated@@228 (type $generated@@227)))
(= ($generated@@223 $generated@@228 ($generated@@222 $generated@@227)) $generated@@227))
 :pattern ( ($generated@@222 $generated@@227))
)))
(assert (forall (($generated@@229 T@U) ($generated@@230 T@U) ) (!  (=> (and (= (type $generated@@229) $generated@@48) (= (type $generated@@230) $generated@@48)) (and (and (and (=> ($generated@@49 $generated@@229 $generated@@230) (not (= $generated@@229 $generated@@230))) (=> (and ($generated@@205 $generated@@229) (not ($generated@@205 $generated@@230))) ($generated@@49 $generated@@229 $generated@@230))) (=> (and ($generated@@205 $generated@@229) ($generated@@205 $generated@@230)) (= ($generated@@49 $generated@@229 $generated@@230) (< ($generated@@60 $generated@@229) ($generated@@60 $generated@@230))))) (=> (and ($generated@@49 $generated@@229 $generated@@230) ($generated@@205 $generated@@230)) ($generated@@205 $generated@@229))))
 :pattern ( ($generated@@49 $generated@@229 $generated@@230))
)))
(assert (forall (($generated@@231 T@U) ) (!  (=> (and (= (type $generated@@231) $generated@@48) ($generated@@205 $generated@@231)) (= $generated@@231 ($generated@@63 ($generated@@60 $generated@@231))))
 :pattern ( ($generated@@60 $generated@@231))
 :pattern ( ($generated@@205 $generated@@231))
)))
(assert (forall (($generated@@232 T@U) ($generated@@233 T@U) ) (!  (=> (and (and (= (type $generated@@232) $generated@@48) (= (type $generated@@233) $generated@@48)) (and ($generated@@205 $generated@@233) (<= ($generated@@60 $generated@@233) ($generated@@60 $generated@@232)))) (or (and (= $generated@@233 ($generated@@63 0)) (= ($generated@@62 $generated@@232 $generated@@233) $generated@@232)) (and (not (= $generated@@233 ($generated@@63 0))) ($generated@@49 ($generated@@62 $generated@@232 $generated@@233) $generated@@232))))
 :pattern ( ($generated@@62 $generated@@232 $generated@@233))
)))
(assert (forall (($generated@@234 Int) ) (! (= ($generated@@222 ($generated@@8 ($generated@@61 $generated@@234))) ($generated@@193 ($generated@@222 ($generated@@8 $generated@@234))))
 :pattern ( ($generated@@222 ($generated@@8 ($generated@@61 $generated@@234))))
)))
(assert (forall (($generated@@235 T@U) ) (! (= ($generated@@222 ($generated@@193 $generated@@235)) ($generated@@193 ($generated@@222 $generated@@235)))
 :pattern ( ($generated@@222 ($generated@@193 $generated@@235)))
)))
(assert  (and (forall (($generated@@238 T@U) ) (! (= (type ($generated@@236 $generated@@238)) $generated@@47)
 :pattern ( ($generated@@236 $generated@@238))
)) (= (type $generated@@237) $generated@@47)))
(assert (forall (($generated@@239 T@U) ($generated@@240 T@U) ($generated@@241 Int) ) (!  (=> (and (= (type $generated@@239) $generated@@47) (= (type $generated@@240) $generated@@48)) (= ($generated@@45 $generated@@239 $generated@@240 $generated@@241) ($generated@@45 $generated@@237 $generated@@240 $generated@@241)))
 :pattern ( ($generated@@45 ($generated@@236 $generated@@239) $generated@@240 $generated@@241))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@242 () Int)
(declare-fun $generated@@243 () T@U)
(declare-fun $generated@@244 (T@U) Bool)
(declare-fun $generated@@245 () T@U)
(declare-fun $generated@@246 (T@U) Bool)
(declare-fun $generated@@247 () T@U)
(declare-fun $generated@@248 () T@U)
(declare-fun $generated@@249 () T@U)
(declare-fun $generated@@250 () T@U)
(declare-fun $generated@@251 () T@U)
(assert  (and (and (and (and (and (and (= (type $generated@@243) $generated@@48) (= (type $generated@@245) ($generated@@80 $generated@@79 $generated@@81))) (= (type $generated@@247) ($generated@@80 $generated@@79 $generated@@81))) (= (type $generated@@248) ($generated@@89 $generated@@79 $generated@@4))) (= (type $generated@@249) $generated@@79)) (= (type $generated@@250) ($generated@@80 $generated@@79 $generated@@81))) (= (type $generated@@251) ($generated@@82 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@252  (=> (= (ControlFlow 0 2) (- 0 1)) (<= ($generated@@61 0) $generated@@242))))
(let (($generated@@253  (=> (<= ($generated@@60 $generated@@243) 0) (=> (and (and (and ($generated@@244 $generated@@245) ($generated@@246 $generated@@245)) (= $generated@@247 $generated@@245)) (and (forall (($generated@@254 T@U) ($generated@@255 Int) ) (!  (=> (= (type $generated@@254) $generated@@48) (=> (and ($generated@@49 $generated@@254 $generated@@243) ($generated@@45 ($generated@@58 $generated@@237) $generated@@254 $generated@@255)) (<= ($generated@@61 0) $generated@@255)))
 :no-pattern (type $generated@@254)
 :no-pattern ($generated $generated@@254)
 :no-pattern ($generated@@0 $generated@@254)
)) (= (ControlFlow 0 4) 2))) $generated@@252))))
(let (($generated@@256  (=> (and (< 0 ($generated@@60 $generated@@243)) (= (ControlFlow 0 3) 2)) $generated@@252)))
(let (($generated@@257  (=> (= $generated@@248 ($generated@@77 $generated@@249 $generated@@250 $generated@@251 false)) (=> (and (and ($generated@@244 $generated@@247) ($generated@@246 $generated@@247)) (and (= $generated@@250 $generated@@247) (forall (($generated@@258 T@U) ($generated@@259 Int) ) (!  (=> (= (type $generated@@258) $generated@@48) (=> (and ($generated@@45 ($generated@@58 $generated@@237) $generated@@258 $generated@@259) (or ($generated@@49 $generated@@258 $generated@@243) (and (= $generated@@258 $generated@@243) (and (<= 0 $generated@@259) (< $generated@@259 $generated@@242))))) (<= ($generated@@61 0) $generated@@259)))
 :no-pattern (type $generated@@258)
 :no-pattern ($generated $generated@@258)
 :no-pattern ($generated@@0 $generated@@258)
)))) (and (=> (= (ControlFlow 0 5) 3) $generated@@256) (=> (= (ControlFlow 0 5) 4) $generated@@253))))))
(let (($generated@@260  (=> (and (and (and ($generated@@244 $generated@@250) ($generated@@246 $generated@@250)) (= 2 $generated@@44)) (and (and ($generated@@59 $generated@@243 $generated@@242) (and ($generated@@45 ($generated@@58 $generated@@237) $generated@@243 $generated@@242) (and (=> (< 0 ($generated@@60 $generated@@243)) (or (= $generated@@242 ($generated@@61 0)) ($generated@@45 ($generated@@58 $generated@@237) ($generated@@62 $generated@@243 ($generated@@63 1)) (- $generated@@242 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@243)) (exists (($generated@@261 T@U) ) (!  (and (= (type $generated@@261) $generated@@48) (and ($generated@@46 $generated@@261 $generated@@243) ($generated@@45 ($generated@@58 $generated@@237) $generated@@261 $generated@@242)))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@237) $generated@@261 $generated@@242))
)))))) (= (ControlFlow 0 6) 5))) $generated@@257)))
$generated@@260))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () Int)
(declare-fun $generated@@45 (T@U T@U Int) Bool)
(declare-fun $generated@@46 (T@U T@U) Bool)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@U T@U) Bool)
(declare-fun $generated@@58 (T@U) T@U)
(declare-fun $generated@@59 (T@U Int) Bool)
(declare-fun $generated@@60 (T@U) Int)
(declare-fun $generated@@61 (Int) Int)
(declare-fun $generated@@62 (T@U T@U) T@U)
(declare-fun $generated@@63 (Int) T@U)
(declare-fun $generated@@76 (T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@78 (T@T) T@T)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 (T@T T@T) T@T)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@T) T@T)
(declare-fun $generated@@83 (T@U T@U) T@U)
(declare-fun $generated@@84 (T@U T@U) T@U)
(declare-fun $generated@@85 (T@T) T@T)
(declare-fun $generated@@86 (T@T) T@T)
(declare-fun $generated@@87 (T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T T@T) T@T)
(declare-fun $generated@@90 (T@T) T@T)
(declare-fun $generated@@91 (T@T) T@T)
(declare-fun $generated@@92 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@189 (T@U Int) Bool)
(declare-fun $generated@@197 (T@U) T@U)
(declare-fun $generated@@201 (Int) Bool)
(declare-fun $generated@@217 (T@U) Bool)
(declare-fun $generated@@230 (T@U) T@U)
(declare-fun $generated@@231 () T@U)
(declare-fun $generated@@241 (T@U) T@U)
(declare-fun $generated@@242 (T@T T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (= ($generated@@1 $generated@@47) 6) (= ($generated@@1 $generated@@48) 7)))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@50 T@U) ($generated@@51 Int) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> (and (and (and (and (and (= (type $generated@@50) $generated@@47) (= (type $generated@@52) $generated@@48)) (= (type $generated@@53) $generated@@48)) (= (type $generated@@54) $generated@@48)) ($generated@@49 $generated@@52 $generated@@53)) ($generated@@45 $generated@@50 $generated@@52 $generated@@51)) ($generated@@45 $generated@@50 $generated@@53 $generated@@51))
 :pattern ( ($generated@@45 $generated@@50 $generated@@52 $generated@@51) ($generated@@46 $generated@@52 $generated@@54) ($generated@@46 $generated@@53 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> (and (and (and (= (type $generated@@55) $generated@@48) (= (type $generated@@56) $generated@@48)) (= (type $generated@@57) $generated@@48)) (and ($generated@@49 $generated@@55 $generated@@56) ($generated@@49 $generated@@56 $generated@@57))) ($generated@@49 $generated@@55 $generated@@57))
 :pattern ( ($generated@@49 $generated@@55 $generated@@56) ($generated@@49 $generated@@56 $generated@@57))
 :pattern ( ($generated@@49 $generated@@55 $generated@@56) ($generated@@49 $generated@@55 $generated@@57))
)))
(assert  (and (and (forall (($generated@@64 T@U) ) (! (= (type ($generated@@58 $generated@@64)) $generated@@47)
 :pattern ( ($generated@@58 $generated@@64))
)) (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (! (= (type ($generated@@62 $generated@@65 $generated@@66)) $generated@@48)
 :pattern ( ($generated@@62 $generated@@65 $generated@@66))
))) (forall (($generated@@67 Int) ) (! (= (type ($generated@@63 $generated@@67)) $generated@@48)
 :pattern ( ($generated@@63 $generated@@67))
))))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 Int) ) (!  (=> (and (and (= (type $generated@@68) $generated@@47) (= (type $generated@@69) $generated@@48)) (or ($generated@@59 $generated@@69 $generated@@70) (not (= 1 $generated@@44)))) (and (and (=> (< 0 ($generated@@60 $generated@@69)) (=> (not (= $generated@@70 ($generated@@61 0))) ($generated@@59 ($generated@@62 $generated@@69 ($generated@@63 1)) (- $generated@@70 1)))) (=> (=> (< 0 ($generated@@60 $generated@@69)) (or (= $generated@@70 ($generated@@61 0)) ($generated@@45 $generated@@68 ($generated@@62 $generated@@69 ($generated@@63 1)) (- $generated@@70 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@69)) (forall (($generated@@71 T@U) ) (!  (=> (and (= (type $generated@@71) $generated@@48) ($generated@@46 $generated@@71 $generated@@69)) ($generated@@59 $generated@@71 $generated@@70))
 :pattern ( ($generated@@45 $generated@@68 $generated@@71 $generated@@70))
))))) (= ($generated@@45 ($generated@@58 $generated@@68) $generated@@69 $generated@@70)  (and (=> (< 0 ($generated@@60 $generated@@69)) (or (= $generated@@70 ($generated@@61 0)) ($generated@@45 $generated@@68 ($generated@@62 $generated@@69 ($generated@@63 1)) (- $generated@@70 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@69)) (exists (($generated@@72 T@U) ) (!  (and (= (type $generated@@72) $generated@@48) (and ($generated@@46 $generated@@72 $generated@@69) ($generated@@45 $generated@@68 $generated@@72 $generated@@70)))
 :pattern ( ($generated@@45 $generated@@68 $generated@@72 $generated@@70))
)))))))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@68) $generated@@69 $generated@@70))
))))
(assert (forall (($generated@@73 T@U) ($generated@@74 Int) ($generated@@75 Int) ) (!  (=> (= (type $generated@@73) $generated@@48) (=> (and (and (<= 0 $generated@@74) (<= 0 $generated@@75)) (<= (+ $generated@@74 $generated@@75) ($generated@@60 $generated@@73))) (= ($generated@@62 ($generated@@62 $generated@@73 ($generated@@63 $generated@@74)) ($generated@@63 $generated@@75)) ($generated@@62 $generated@@73 ($generated@@63 (+ $generated@@74 $generated@@75))))))
 :pattern ( ($generated@@62 ($generated@@62 $generated@@73 ($generated@@63 $generated@@74)) ($generated@@63 $generated@@75)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (= ($generated@@1 ($generated@@80 $generated@@93 $generated@@94)) 8)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (! (= ($generated@@85 ($generated@@80 $generated@@95 $generated@@96)) $generated@@95)
 :pattern ( ($generated@@80 $generated@@95 $generated@@96))
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (! (= ($generated@@86 ($generated@@80 $generated@@97 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@80 $generated@@97 $generated@@98))
))) (forall (($generated@@99 T@U) ($generated@@100 T@U) ) (! (let (($generated@@101 ($generated@@86 (type $generated@@99))))
(= (type ($generated@@84 $generated@@99 $generated@@100)) $generated@@101))
 :pattern ( ($generated@@84 $generated@@99 $generated@@100))
))) (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (let (($generated@@105 (type $generated@@104)))
(let (($generated@@106 (type $generated@@103)))
(= (type ($generated@@87 $generated@@102 $generated@@103 $generated@@104)) ($generated@@80 $generated@@106 $generated@@105))))
 :pattern ( ($generated@@87 $generated@@102 $generated@@103 $generated@@104))
))) (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (let (($generated@@110 ($generated@@86 (type $generated@@107))))
 (=> (= (type $generated@@109) $generated@@110) (= ($generated@@84 ($generated@@87 $generated@@107 $generated@@108 $generated@@109) $generated@@108) $generated@@109)))
 :weight 0
))) (and (forall (($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@113 $generated@@114) (= ($generated@@84 ($generated@@87 $generated@@112 $generated@@113 $generated@@111) $generated@@114) ($generated@@84 $generated@@112 $generated@@114)))
 :weight 0
)) (forall (($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or true (= ($generated@@84 ($generated@@87 $generated@@116 $generated@@117 $generated@@115) $generated@@118) ($generated@@84 $generated@@116 $generated@@118)))
 :weight 0
)))) (forall (($generated@@119 T@T) ) (= ($generated@@1 ($generated@@82 $generated@@119)) 9))) (forall (($generated@@120 T@T) ) (! (= ($generated@@78 ($generated@@82 $generated@@120)) $generated@@120)
 :pattern ( ($generated@@82 $generated@@120))
))) (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (! (let (($generated@@123 ($generated@@78 (type $generated@@122))))
(= (type ($generated@@83 $generated@@121 $generated@@122)) $generated@@123))
 :pattern ( ($generated@@83 $generated@@121 $generated@@122))
))) (= ($generated@@1 $generated@@81) 10)) (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= (type ($generated@@88 $generated@@124 $generated@@125 $generated@@126)) $generated@@81)
 :pattern ( ($generated@@88 $generated@@124 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (let (($generated@@130 ($generated@@78 (type $generated@@128))))
 (=> (= (type $generated@@129) $generated@@130) (= ($generated@@83 ($generated@@88 $generated@@127 $generated@@128 $generated@@129) $generated@@128) $generated@@129)))
 :weight 0
))) (and (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (or (= $generated@@133 $generated@@134) (= ($generated@@83 ($generated@@88 $generated@@132 $generated@@133 $generated@@131) $generated@@134) ($generated@@83 $generated@@132 $generated@@134)))
 :weight 0
)) (forall (($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or true (= ($generated@@83 ($generated@@88 $generated@@136 $generated@@137 $generated@@135) $generated@@138) ($generated@@83 $generated@@136 $generated@@138)))
 :weight 0
)))) (= ($generated@@1 $generated@@79) 11)) (forall (($generated@@139 T@T) ($generated@@140 T@T) ) (= ($generated@@1 ($generated@@89 $generated@@139 $generated@@140)) 12))) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (! (= ($generated@@90 ($generated@@89 $generated@@141 $generated@@142)) $generated@@141)
 :pattern ( ($generated@@89 $generated@@141 $generated@@142))
))) (forall (($generated@@143 T@T) ($generated@@144 T@T) ) (! (= ($generated@@91 ($generated@@89 $generated@@143 $generated@@144)) $generated@@144)
 :pattern ( ($generated@@89 $generated@@143 $generated@@144))
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (! (let (($generated@@148 ($generated@@91 (type $generated@@145))))
(= (type ($generated@@76 $generated@@145 $generated@@146 $generated@@147)) $generated@@148))
 :pattern ( ($generated@@76 $generated@@145 $generated@@146 $generated@@147))
))) (forall (($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ) (! (let (($generated@@153 (type $generated@@152)))
(let (($generated@@154 (type $generated@@150)))
(= (type ($generated@@92 $generated@@149 $generated@@150 $generated@@151 $generated@@152)) ($generated@@89 $generated@@154 $generated@@153))))
 :pattern ( ($generated@@92 $generated@@149 $generated@@150 $generated@@151 $generated@@152))
))) (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ) (! (let (($generated@@159 ($generated@@91 (type $generated@@155))))
 (=> (= (type $generated@@158) $generated@@159) (= ($generated@@76 ($generated@@92 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@156 $generated@@157) $generated@@158)))
 :weight 0
))) (and (and (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ) (!  (or (= $generated@@162 $generated@@164) (= ($generated@@76 ($generated@@92 $generated@@161 $generated@@162 $generated@@163 $generated@@160) $generated@@164 $generated@@165) ($generated@@76 $generated@@161 $generated@@164 $generated@@165)))
 :weight 0
)) (forall (($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 T@U) ) (!  (or (= $generated@@169 $generated@@171) (= ($generated@@76 ($generated@@92 $generated@@167 $generated@@168 $generated@@169 $generated@@166) $generated@@170 $generated@@171) ($generated@@76 $generated@@167 $generated@@170 $generated@@171)))
 :weight 0
))) (forall (($generated@@172 T@U) ($generated@@173 T@U) ($generated@@174 T@U) ($generated@@175 T@U) ($generated@@176 T@U) ($generated@@177 T@U) ) (!  (or true (= ($generated@@76 ($generated@@92 $generated@@173 $generated@@174 $generated@@175 $generated@@172) $generated@@176 $generated@@177) ($generated@@76 $generated@@173 $generated@@176 $generated@@177)))
 :weight 0
)))) (forall (($generated@@178 T@U) ($generated@@179 T@U) ($generated@@180 T@U) ($generated@@181 Bool) ) (! (= (type ($generated@@77 $generated@@178 $generated@@179 $generated@@180 $generated@@181)) ($generated@@89 $generated@@79 $generated@@4))
 :pattern ( ($generated@@77 $generated@@178 $generated@@179 $generated@@180 $generated@@181))
))))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@U) ($generated@@184 T@U) ($generated@@185 Bool) ($generated@@186 T@U) ($generated@@187 T@U) ) (! (let (($generated@@188 ($generated@@78 (type $generated@@187))))
 (=> (and (and (and (and (= (type $generated@@182) $generated@@79) (= (type $generated@@183) ($generated@@80 $generated@@79 $generated@@81))) (= (type $generated@@184) ($generated@@82 $generated@@4))) (= (type $generated@@186) $generated@@79)) (= (type $generated@@187) ($generated@@82 $generated@@188))) (= ($generated@@0 ($generated@@76 ($generated@@77 $generated@@182 $generated@@183 $generated@@184 $generated@@185) $generated@@186 $generated@@187))  (=> (and (not (= $generated@@186 $generated@@182)) ($generated@@0 ($generated@@83 ($generated@@84 $generated@@183 $generated@@186) $generated@@184))) $generated@@185))))
 :pattern ( ($generated@@76 ($generated@@77 $generated@@182 $generated@@183 $generated@@184 $generated@@185) $generated@@186 $generated@@187))
)))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@190 T@U) ($generated@@191 Int) ) (!  (=> (and (= (type $generated@@190) $generated@@47) (exists (($generated@@192 T@U) ) (!  (and (= (type $generated@@192) $generated@@48) ($generated@@45 ($generated@@58 $generated@@190) $generated@@192 $generated@@191))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@190) $generated@@192 $generated@@191))
))) ($generated@@189 ($generated@@58 $generated@@190) $generated@@191))
 :pattern ( ($generated@@189 ($generated@@58 $generated@@190) $generated@@191))
))))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@193 T@U) ($generated@@194 Int) ($generated@@195 T@U) ) (!  (=> (and (and (= (type $generated@@193) $generated@@47) (= (type $generated@@195) $generated@@48)) (= $generated@@195 ($generated@@63 0))) (not ($generated@@45 $generated@@193 $generated@@195 $generated@@194)))
 :pattern ( ($generated@@45 $generated@@193 $generated@@195 $generated@@194))
))))
(assert (forall (($generated@@196 Int) ) (! (= ($generated@@61 $generated@@196) $generated@@196)
 :pattern ( ($generated@@61 $generated@@196))
)))
(assert (forall (($generated@@198 T@U) ) (! (let (($generated@@199 (type $generated@@198)))
(= (type ($generated@@197 $generated@@198)) $generated@@199))
 :pattern ( ($generated@@197 $generated@@198))
)))
(assert (forall (($generated@@200 T@U) ) (! (= ($generated@@197 $generated@@200) $generated@@200)
 :pattern ( ($generated@@197 $generated@@200))
)))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@202 T@U) ($generated@@203 Int) ) (!  (=> (and (= (type $generated@@202) $generated@@47) (or ($generated@@201 $generated@@203) (not (= 0 $generated@@44)))) true)
 :pattern ( ($generated@@189 $generated@@202 $generated@@203))
))))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@204 T@U) ($generated@@205 Int) ) (!  (=> (and (= (type $generated@@204) $generated@@47) (or ($generated@@201 $generated@@205) (not (= 0 $generated@@44)))) (and (=> (not (= $generated@@205 ($generated@@61 0))) ($generated@@201 (- $generated@@205 1))) (= ($generated@@189 ($generated@@58 $generated@@204) $generated@@205)  (or (= $generated@@205 ($generated@@61 0)) ($generated@@189 $generated@@204 (- $generated@@205 1))))))
 :pattern ( ($generated@@189 ($generated@@58 $generated@@204) $generated@@205))
))))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@206 T@U) ($generated@@207 Int) ) (!  (=> (and (= (type $generated@@206) $generated@@47) ($generated@@189 ($generated@@58 $generated@@206) $generated@@207)) (exists (($generated@@208 T@U) ) (!  (and (= (type $generated@@208) $generated@@48) ($generated@@45 ($generated@@58 $generated@@206) $generated@@208 $generated@@207))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@206) $generated@@208 $generated@@207))
)))
 :pattern ( ($generated@@189 ($generated@@58 $generated@@206) $generated@@207))
))))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@209 T@U) ($generated@@210 T@U) ($generated@@211 Int) ) (!  (=> (and (and (= (type $generated@@209) $generated@@47) (= (type $generated@@210) $generated@@48)) (or ($generated@@59 ($generated@@197 $generated@@210) $generated@@211) (not (= 1 $generated@@44)))) (and (and (=> (< 0 ($generated@@60 $generated@@210)) (=> (not (= $generated@@211 ($generated@@61 0))) ($generated@@59 ($generated@@62 $generated@@210 ($generated@@63 1)) (- $generated@@211 1)))) (=> (=> (< 0 ($generated@@60 $generated@@210)) (or (= $generated@@211 ($generated@@61 0)) ($generated@@45 ($generated@@58 $generated@@209) ($generated@@62 $generated@@210 ($generated@@63 1)) (- $generated@@211 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@210)) (forall (($generated@@212 T@U) ) (!  (=> (and (= (type $generated@@212) $generated@@48) ($generated@@46 $generated@@212 $generated@@210)) ($generated@@59 $generated@@212 $generated@@211))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@209) $generated@@212 $generated@@211))
))))) (= ($generated@@45 ($generated@@58 $generated@@209) ($generated@@197 $generated@@210) $generated@@211)  (and (=> (< 0 ($generated@@60 $generated@@210)) (or (= $generated@@211 ($generated@@61 0)) ($generated@@45 ($generated@@58 $generated@@209) ($generated@@62 $generated@@210 ($generated@@63 1)) (- $generated@@211 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@210)) (exists (($generated@@213 T@U) ) (!  (and (= (type $generated@@213) $generated@@48) (and ($generated@@46 $generated@@213 $generated@@210) ($generated@@45 ($generated@@58 $generated@@209) $generated@@213 $generated@@211)))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@209) $generated@@213 $generated@@211))
)))))))
 :weight 3
 :pattern ( ($generated@@45 ($generated@@58 $generated@@209) ($generated@@197 $generated@@210) $generated@@211))
))))
(assert (forall (($generated@@214 T@U) ($generated@@215 T@U) ($generated@@216 Int) ) (!  (=> (and (= (type $generated@@214) $generated@@47) (= (type $generated@@215) $generated@@48)) (= ($generated@@45 ($generated@@58 $generated@@214) $generated@@215 $generated@@216) ($generated@@45 $generated@@214 $generated@@215 $generated@@216)))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@214) $generated@@215 $generated@@216))
)))
(assert (forall (($generated@@218 T@U) ($generated@@219 T@U) ) (!  (=> (and (and (= (type $generated@@218) $generated@@48) (= (type $generated@@219) $generated@@48)) (and ($generated@@217 $generated@@219) (<= ($generated@@60 $generated@@219) ($generated@@60 $generated@@218)))) (and (= ($generated@@217 ($generated@@62 $generated@@218 $generated@@219)) ($generated@@217 $generated@@218)) (= ($generated@@60 ($generated@@62 $generated@@218 $generated@@219)) (- ($generated@@60 $generated@@218) ($generated@@60 $generated@@219)))))
 :pattern ( ($generated@@62 $generated@@218 $generated@@219))
)))
(assert (forall (($generated@@220 Int) ) (!  (=> (<= 0 $generated@@220) (and ($generated@@217 ($generated@@63 $generated@@220)) (= ($generated@@60 ($generated@@63 $generated@@220)) $generated@@220)))
 :pattern ( ($generated@@63 $generated@@220))
)))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@221 T@U) ($generated@@222 T@U) ($generated@@223 Int) ) (!  (=> (and (and (= (type $generated@@221) $generated@@47) (= (type $generated@@222) $generated@@48)) (or ($generated@@59 ($generated@@197 $generated@@222) ($generated@@61 $generated@@223)) (not (= 1 $generated@@44)))) (and (and (=> (< 0 ($generated@@60 $generated@@222)) (=> (not (= $generated@@223 ($generated@@61 0))) ($generated@@59 ($generated@@62 $generated@@222 ($generated@@63 1)) (- $generated@@223 1)))) (=> (=> (< 0 ($generated@@60 $generated@@222)) (or (= $generated@@223 ($generated@@61 0)) ($generated@@45 ($generated@@58 $generated@@221) ($generated@@62 $generated@@222 ($generated@@63 1)) (- $generated@@223 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@222)) (forall (($generated@@224 T@U) ) (!  (=> (and (= (type $generated@@224) $generated@@48) ($generated@@46 $generated@@224 $generated@@222)) ($generated@@59 $generated@@224 $generated@@223))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@221) $generated@@224 $generated@@223))
))))) (= ($generated@@45 ($generated@@58 $generated@@221) ($generated@@197 $generated@@222) ($generated@@61 $generated@@223))  (and (=> (< 0 ($generated@@60 $generated@@222)) (or (= $generated@@223 ($generated@@61 0)) ($generated@@45 ($generated@@58 $generated@@221) ($generated@@62 $generated@@222 ($generated@@63 1)) (- $generated@@223 1)))) (=> (= ($generated@@61 0) ($generated@@60 $generated@@222)) (exists (($generated@@225 T@U) ) (!  (and (= (type $generated@@225) $generated@@48) (and ($generated@@46 $generated@@225 $generated@@222) ($generated@@45 ($generated@@58 $generated@@221) $generated@@225 $generated@@223)))
 :pattern ( ($generated@@45 ($generated@@58 $generated@@221) $generated@@225 $generated@@223))
)))))))
 :weight 3
 :pattern ( ($generated@@45 ($generated@@58 $generated@@221) ($generated@@197 $generated@@222) ($generated@@61 $generated@@223)))
))))
(assert (forall (($generated@@226 T@U) ($generated@@227 T@U) ) (!  (=> (and (= (type $generated@@226) $generated@@48) (= (type $generated@@227) $generated@@48)) (or (or ($generated@@49 $generated@@226 $generated@@227) (= $generated@@226 $generated@@227)) ($generated@@49 $generated@@227 $generated@@226)))
 :pattern ( ($generated@@49 $generated@@226 $generated@@227) ($generated@@49 $generated@@227 $generated@@226))
)))
(assert (forall (($generated@@228 T@U) ($generated@@229 T@U) ) (!  (=> (and (= (type $generated@@228) $generated@@48) (= (type $generated@@229) $generated@@48)) (= ($generated@@46 $generated@@228 $generated@@229) ($generated@@49 $generated@@228 $generated@@229)))
 :pattern ( ($generated@@46 $generated@@228 $generated@@229))
)))
(assert  (and (forall (($generated@@232 T@U) ) (! (= (type ($generated@@230 $generated@@232)) $generated@@47)
 :pattern ( ($generated@@230 $generated@@232))
)) (= (type $generated@@231) $generated@@47)))
(assert (forall (($generated@@233 T@U) ($generated@@234 Int) ) (!  (=> (= (type $generated@@233) $generated@@47) (= ($generated@@189 $generated@@233 $generated@@234) ($generated@@189 $generated@@231 $generated@@234)))
 :pattern ( ($generated@@189 ($generated@@230 $generated@@233) $generated@@234))
)))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@235 T@U) ($generated@@236 T@U) ($generated@@237 Int) ) (!  (=> (and (and (= (type $generated@@235) $generated@@47) (= (type $generated@@236) $generated@@48)) (or ($generated@@59 $generated@@236 $generated@@237) (not (= 1 $generated@@44)))) true)
 :pattern ( ($generated@@45 $generated@@235 $generated@@236 $generated@@237))
))))
(assert (forall (($generated@@238 T@U) ($generated@@239 Int) ) (!  (=> (= (type $generated@@238) $generated@@47) (= ($generated@@189 ($generated@@58 $generated@@238) $generated@@239) ($generated@@189 $generated@@238 $generated@@239)))
 :pattern ( ($generated@@189 ($generated@@58 $generated@@238) $generated@@239))
)))
(assert (forall (($generated@@240 T@U) ) (!  (=> (= (type $generated@@240) $generated@@48) (<= 0 ($generated@@60 $generated@@240)))
 :pattern ( ($generated@@60 $generated@@240))
)))
(assert  (and (forall (($generated@@243 T@U) ) (! (= (type ($generated@@241 $generated@@243)) $generated@@48)
 :pattern ( ($generated@@241 $generated@@243))
)) (forall (($generated@@244 T@T) ($generated@@245 T@U) ) (! (= (type ($generated@@242 $generated@@244 $generated@@245)) $generated@@244)
 :pattern ( ($generated@@242 $generated@@244 $generated@@245))
))))
(assert (forall (($generated@@246 T@U) ) (! (let (($generated@@247 (type $generated@@246)))
(= ($generated@@242 $generated@@247 ($generated@@241 $generated@@246)) $generated@@246))
 :pattern ( ($generated@@241 $generated@@246))
)))
(assert (forall (($generated@@248 T@U) ($generated@@249 T@U) ) (!  (=> (and (= (type $generated@@248) $generated@@48) (= (type $generated@@249) $generated@@48)) (and (and (and (=> ($generated@@49 $generated@@248 $generated@@249) (not (= $generated@@248 $generated@@249))) (=> (and ($generated@@217 $generated@@248) (not ($generated@@217 $generated@@249))) ($generated@@49 $generated@@248 $generated@@249))) (=> (and ($generated@@217 $generated@@248) ($generated@@217 $generated@@249)) (= ($generated@@49 $generated@@248 $generated@@249) (< ($generated@@60 $generated@@248) ($generated@@60 $generated@@249))))) (=> (and ($generated@@49 $generated@@248 $generated@@249) ($generated@@217 $generated@@249)) ($generated@@217 $generated@@248))))
 :pattern ( ($generated@@49 $generated@@248 $generated@@249))
)))
(assert (forall (($generated@@250 T@U) ) (!  (=> (and (= (type $generated@@250) $generated@@48) ($generated@@217 $generated@@250)) (= $generated@@250 ($generated@@63 ($generated@@60 $generated@@250))))
 :pattern ( ($generated@@60 $generated@@250))
 :pattern ( ($generated@@217 $generated@@250))
)))
(assert (forall (($generated@@251 T@U) ($generated@@252 T@U) ) (!  (=> (and (and (= (type $generated@@251) $generated@@48) (= (type $generated@@252) $generated@@48)) (and ($generated@@217 $generated@@252) (<= ($generated@@60 $generated@@252) ($generated@@60 $generated@@251)))) (or (and (= $generated@@252 ($generated@@63 0)) (= ($generated@@62 $generated@@251 $generated@@252) $generated@@251)) (and (not (= $generated@@252 ($generated@@63 0))) ($generated@@49 ($generated@@62 $generated@@251 $generated@@252) $generated@@251))))
 :pattern ( ($generated@@62 $generated@@251 $generated@@252))
)))
(assert (forall (($generated@@253 Int) ) (! (= ($generated@@241 ($generated@@8 ($generated@@61 $generated@@253))) ($generated@@197 ($generated@@241 ($generated@@8 $generated@@253))))
 :pattern ( ($generated@@241 ($generated@@8 ($generated@@61 $generated@@253))))
)))
(assert (forall (($generated@@254 T@U) ) (! (= ($generated@@241 ($generated@@197 $generated@@254)) ($generated@@197 ($generated@@241 $generated@@254)))
 :pattern ( ($generated@@241 ($generated@@197 $generated@@254)))
)))
(assert (forall (($generated@@255 T@U) ($generated@@256 T@U) ($generated@@257 Int) ) (!  (=> (and (= (type $generated@@255) $generated@@47) (= (type $generated@@256) $generated@@48)) (= ($generated@@45 $generated@@255 $generated@@256 $generated@@257) ($generated@@45 $generated@@231 $generated@@256 $generated@@257)))
 :pattern ( ($generated@@45 ($generated@@230 $generated@@255) $generated@@256 $generated@@257))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@258 () T@U)
(declare-fun $generated@@259 () T@U)
(declare-fun $generated@@260 () T@U)
(declare-fun $generated@@261 () T@U)
(declare-fun $generated@@262 (T@U) Bool)
(declare-fun $generated@@263 () T@U)
(declare-fun $generated@@264 (T@U) Bool)
(declare-fun $generated@@265 () Int)
(assert  (and (and (and (and (= (type $generated@@258) ($generated@@89 $generated@@79 $generated@@4)) (= (type $generated@@259) $generated@@79)) (= (type $generated@@260) ($generated@@80 $generated@@79 $generated@@81))) (= (type $generated@@261) ($generated@@82 $generated@@4))) (= (type $generated@@263) ($generated@@80 $generated@@79 $generated@@81))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@266  (=> (= $generated@@258 ($generated@@77 $generated@@259 $generated@@260 $generated@@261 false)) (=> (and (and (and ($generated@@262 $generated@@263) ($generated@@264 $generated@@263)) (= $generated@@260 $generated@@263)) (and (and (forall (($generated@@267 Int) )  (=> (and (<= ($generated@@61 0) $generated@@267) (and (<= 0 $generated@@267) (< $generated@@267 $generated@@265))) ($generated@@189 ($generated@@58 $generated@@231) $generated@@267))) (= (ControlFlow 0 2) (- 0 1))) ($generated@@201 $generated@@265))) (or ($generated@@189 ($generated@@58 $generated@@231) $generated@@265) (or (= $generated@@265 ($generated@@61 0)) ($generated@@189 ($generated@@58 ($generated@@58 $generated@@231)) (- $generated@@265 1))))))))
(let (($generated@@268  (=> (and (and (and ($generated@@262 $generated@@260) ($generated@@264 $generated@@260)) (= 1 $generated@@44)) (and (<= ($generated@@61 0) $generated@@265) (= (ControlFlow 0 3) 2))) $generated@@266)))
$generated@@268)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 (Int) T@U)
(declare-fun $generated@@51 (T@U) Int)
(declare-fun $generated@@58 (T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U) T@U)
(declare-fun $generated@@66 (T@U T@U) T@U)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@69 (T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@74 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@171 () Int)
(declare-fun $generated@@172 (T@U T@U Int) Bool)
(declare-fun $generated@@173 () T@T)
(declare-fun $generated@@177 (T@U Int) Bool)
(declare-fun $generated@@178 (T@U) T@U)
(declare-fun $generated@@183 (Int) Int)
(declare-fun $generated@@185 (T@U) T@U)
(declare-fun $generated@@189 (Int) Bool)
(declare-fun $generated@@198 (T@U) Bool)
(declare-fun $generated@@202 (T@U Int) Bool)
(declare-fun $generated@@210 (T@U) T@U)
(declare-fun $generated@@211 () T@U)
(declare-fun $generated@@221 (T@U) T@U)
(declare-fun $generated@@222 (T@T T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (! (= (type ($generated@@49 $generated@@52 $generated@@53)) $generated@@45)
 :pattern ( ($generated@@49 $generated@@52 $generated@@53))
)) (forall (($generated@@54 Int) ) (! (= (type ($generated@@50 $generated@@54)) $generated@@45)
 :pattern ( ($generated@@50 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 Int) ($generated@@57 Int) ) (!  (=> (= (type $generated@@55) $generated@@45) (=> (and (and (<= 0 $generated@@56) (<= 0 $generated@@57)) (<= (+ $generated@@56 $generated@@57) ($generated@@51 $generated@@55))) (= ($generated@@49 ($generated@@49 $generated@@55 ($generated@@50 $generated@@56)) ($generated@@50 $generated@@57)) ($generated@@49 $generated@@55 ($generated@@50 (+ $generated@@56 $generated@@57))))))
 :pattern ( ($generated@@49 ($generated@@49 $generated@@55 ($generated@@50 $generated@@56)) ($generated@@50 $generated@@57)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@75 $generated@@76)) 7)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ) (! (= ($generated@@67 ($generated@@62 $generated@@77 $generated@@78)) $generated@@77)
 :pattern ( ($generated@@62 $generated@@77 $generated@@78))
))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ) (! (= ($generated@@68 ($generated@@62 $generated@@79 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@62 $generated@@79 $generated@@80))
))) (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@68 (type $generated@@81))))
(= (type ($generated@@66 $generated@@81 $generated@@82)) $generated@@83))
 :pattern ( ($generated@@66 $generated@@81 $generated@@82))
))) (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (let (($generated@@87 (type $generated@@86)))
(let (($generated@@88 (type $generated@@85)))
(= (type ($generated@@69 $generated@@84 $generated@@85 $generated@@86)) ($generated@@62 $generated@@88 $generated@@87))))
 :pattern ( ($generated@@69 $generated@@84 $generated@@85 $generated@@86))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (let (($generated@@92 ($generated@@68 (type $generated@@89))))
 (=> (= (type $generated@@91) $generated@@92) (= ($generated@@66 ($generated@@69 $generated@@89 $generated@@90 $generated@@91) $generated@@90) $generated@@91)))
 :weight 0
))) (and (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@95 $generated@@96) (= ($generated@@66 ($generated@@69 $generated@@94 $generated@@95 $generated@@93) $generated@@96) ($generated@@66 $generated@@94 $generated@@96)))
 :weight 0
)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or true (= ($generated@@66 ($generated@@69 $generated@@98 $generated@@99 $generated@@97) $generated@@100) ($generated@@66 $generated@@98 $generated@@100)))
 :weight 0
)))) (forall (($generated@@101 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@101)) 8))) (forall (($generated@@102 T@T) ) (! (= ($generated@@60 ($generated@@64 $generated@@102)) $generated@@102)
 :pattern ( ($generated@@64 $generated@@102))
))) (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (! (let (($generated@@105 ($generated@@60 (type $generated@@104))))
(= (type ($generated@@65 $generated@@103 $generated@@104)) $generated@@105))
 :pattern ( ($generated@@65 $generated@@103 $generated@@104))
))) (= ($generated@@1 $generated@@63) 9)) (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= (type ($generated@@70 $generated@@106 $generated@@107 $generated@@108)) $generated@@63)
 :pattern ( ($generated@@70 $generated@@106 $generated@@107 $generated@@108))
))) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (let (($generated@@112 ($generated@@60 (type $generated@@110))))
 (=> (= (type $generated@@111) $generated@@112) (= ($generated@@65 ($generated@@70 $generated@@109 $generated@@110 $generated@@111) $generated@@110) $generated@@111)))
 :weight 0
))) (and (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@115 $generated@@116) (= ($generated@@65 ($generated@@70 $generated@@114 $generated@@115 $generated@@113) $generated@@116) ($generated@@65 $generated@@114 $generated@@116)))
 :weight 0
)) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or true (= ($generated@@65 ($generated@@70 $generated@@118 $generated@@119 $generated@@117) $generated@@120) ($generated@@65 $generated@@118 $generated@@120)))
 :weight 0
)))) (= ($generated@@1 $generated@@61) 10)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (= ($generated@@1 ($generated@@71 $generated@@121 $generated@@122)) 11))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (! (= ($generated@@72 ($generated@@71 $generated@@123 $generated@@124)) $generated@@123)
 :pattern ( ($generated@@71 $generated@@123 $generated@@124))
))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@73 ($generated@@71 $generated@@125 $generated@@126)) $generated@@126)
 :pattern ( ($generated@@71 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (let (($generated@@130 ($generated@@73 (type $generated@@127))))
(= (type ($generated@@58 $generated@@127 $generated@@128 $generated@@129)) $generated@@130))
 :pattern ( ($generated@@58 $generated@@127 $generated@@128 $generated@@129))
))) (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (let (($generated@@135 (type $generated@@134)))
(let (($generated@@136 (type $generated@@132)))
(= (type ($generated@@74 $generated@@131 $generated@@132 $generated@@133 $generated@@134)) ($generated@@71 $generated@@136 $generated@@135))))
 :pattern ( ($generated@@74 $generated@@131 $generated@@132 $generated@@133 $generated@@134))
))) (forall (($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (let (($generated@@141 ($generated@@73 (type $generated@@137))))
 (=> (= (type $generated@@140) $generated@@141) (= ($generated@@58 ($generated@@74 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@138 $generated@@139) $generated@@140)))
 :weight 0
))) (and (and (forall (($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (!  (or (= $generated@@144 $generated@@146) (= ($generated@@58 ($generated@@74 $generated@@143 $generated@@144 $generated@@145 $generated@@142) $generated@@146 $generated@@147) ($generated@@58 $generated@@143 $generated@@146 $generated@@147)))
 :weight 0
)) (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ) (!  (or (= $generated@@151 $generated@@153) (= ($generated@@58 ($generated@@74 $generated@@149 $generated@@150 $generated@@151 $generated@@148) $generated@@152 $generated@@153) ($generated@@58 $generated@@149 $generated@@152 $generated@@153)))
 :weight 0
))) (forall (($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ) (!  (or true (= ($generated@@58 ($generated@@74 $generated@@155 $generated@@156 $generated@@157 $generated@@154) $generated@@158 $generated@@159) ($generated@@58 $generated@@155 $generated@@158 $generated@@159)))
 :weight 0
)))) (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 Bool) ) (! (= (type ($generated@@59 $generated@@160 $generated@@161 $generated@@162 $generated@@163)) ($generated@@71 $generated@@61 $generated@@4))
 :pattern ( ($generated@@59 $generated@@160 $generated@@161 $generated@@162 $generated@@163))
))))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ($generated@@166 T@U) ($generated@@167 Bool) ($generated@@168 T@U) ($generated@@169 T@U) ) (! (let (($generated@@170 ($generated@@60 (type $generated@@169))))
 (=> (and (and (and (and (= (type $generated@@164) $generated@@61) (= (type $generated@@165) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@166) ($generated@@64 $generated@@4))) (= (type $generated@@168) $generated@@61)) (= (type $generated@@169) ($generated@@64 $generated@@170))) (= ($generated@@0 ($generated@@58 ($generated@@59 $generated@@164 $generated@@165 $generated@@166 $generated@@167) $generated@@168 $generated@@169))  (=> (and (not (= $generated@@168 $generated@@164)) ($generated@@0 ($generated@@65 ($generated@@66 $generated@@165 $generated@@168) $generated@@166))) $generated@@167))))
 :pattern ( ($generated@@58 ($generated@@59 $generated@@164 $generated@@165 $generated@@166 $generated@@167) $generated@@168 $generated@@169))
)))
(assert (= ($generated@@1 $generated@@173) 12))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@174 T@U) ($generated@@175 Int) ($generated@@176 T@U) ) (!  (=> (and (and (= (type $generated@@174) $generated@@173) (= (type $generated@@176) $generated@@45)) (= $generated@@176 ($generated@@50 0))) ($generated@@172 $generated@@174 $generated@@176 $generated@@175))
 :pattern ( ($generated@@172 $generated@@174 $generated@@176 $generated@@175))
))))
(assert (forall (($generated@@179 T@U) ) (! (= (type ($generated@@178 $generated@@179)) $generated@@173)
 :pattern ( ($generated@@178 $generated@@179))
)))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@180 T@U) ($generated@@181 Int) ) (!  (=> (and (= (type $generated@@180) $generated@@173) (forall (($generated@@182 T@U) ) (!  (=> (= (type $generated@@182) $generated@@45) ($generated@@172 ($generated@@178 $generated@@180) $generated@@182 $generated@@181))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@180) $generated@@182 $generated@@181))
))) ($generated@@177 ($generated@@178 $generated@@180) $generated@@181))
 :pattern ( ($generated@@177 ($generated@@178 $generated@@180) $generated@@181))
))))
(assert (forall (($generated@@184 Int) ) (! (= ($generated@@183 $generated@@184) $generated@@184)
 :pattern ( ($generated@@183 $generated@@184))
)))
(assert (forall (($generated@@186 T@U) ) (! (let (($generated@@187 (type $generated@@186)))
(= (type ($generated@@185 $generated@@186)) $generated@@187))
 :pattern ( ($generated@@185 $generated@@186))
)))
(assert (forall (($generated@@188 T@U) ) (! (= ($generated@@185 $generated@@188) $generated@@188)
 :pattern ( ($generated@@185 $generated@@188))
)))
(assert  (=> (<= 0 $generated@@171) (forall (($generated@@190 T@U) ($generated@@191 Int) ) (!  (=> (and (= (type $generated@@190) $generated@@173) (or ($generated@@189 $generated@@191) (not (= 0 $generated@@171)))) true)
 :pattern ( ($generated@@177 $generated@@190 $generated@@191))
))))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@192 T@U) ($generated@@193 Int) ) (!  (=> (and (= (type $generated@@192) $generated@@173) ($generated@@177 ($generated@@178 $generated@@192) $generated@@193)) (forall (($generated@@194 T@U) ) (!  (=> (= (type $generated@@194) $generated@@45) ($generated@@172 ($generated@@178 $generated@@192) $generated@@194 $generated@@193))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@192) $generated@@194 $generated@@193))
)))
 :pattern ( ($generated@@177 ($generated@@178 $generated@@192) $generated@@193))
))))
(assert (forall (($generated@@195 T@U) ($generated@@196 T@U) ($generated@@197 Int) ) (!  (=> (and (= (type $generated@@195) $generated@@173) (= (type $generated@@196) $generated@@45)) (= ($generated@@172 ($generated@@178 $generated@@195) $generated@@196 $generated@@197) ($generated@@172 $generated@@195 $generated@@196 $generated@@197)))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@195) $generated@@196 $generated@@197))
)))
(assert (forall (($generated@@199 T@U) ($generated@@200 T@U) ) (!  (=> (and (and (= (type $generated@@199) $generated@@45) (= (type $generated@@200) $generated@@45)) (and ($generated@@198 $generated@@200) (<= ($generated@@51 $generated@@200) ($generated@@51 $generated@@199)))) (and (= ($generated@@198 ($generated@@49 $generated@@199 $generated@@200)) ($generated@@198 $generated@@199)) (= ($generated@@51 ($generated@@49 $generated@@199 $generated@@200)) (- ($generated@@51 $generated@@199) ($generated@@51 $generated@@200)))))
 :pattern ( ($generated@@49 $generated@@199 $generated@@200))
)))
(assert (forall (($generated@@201 Int) ) (!  (=> (<= 0 $generated@@201) (and ($generated@@198 ($generated@@50 $generated@@201)) (= ($generated@@51 ($generated@@50 $generated@@201)) $generated@@201)))
 :pattern ( ($generated@@50 $generated@@201))
)))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@203 T@U) ($generated@@204 T@U) ($generated@@205 Int) ) (!  (=> (and (and (= (type $generated@@203) $generated@@173) (= (type $generated@@204) $generated@@45)) (or ($generated@@202 $generated@@204 $generated@@205) (not (= 1 $generated@@171)))) (and (and (=> (< 0 ($generated@@51 $generated@@204)) (=> (not (= $generated@@205 0)) ($generated@@202 ($generated@@49 $generated@@204 ($generated@@50 1)) (+ $generated@@205 1)))) (=> (=> (< 0 ($generated@@51 $generated@@204)) (and (not (= $generated@@205 0)) ($generated@@172 $generated@@203 ($generated@@49 $generated@@204 ($generated@@50 1)) (+ $generated@@205 1)))) (=> (= ($generated@@183 0) ($generated@@51 $generated@@204)) (forall (($generated@@206 T@U) ) (!  (=> (and (= (type $generated@@206) $generated@@45) ($generated@@44 $generated@@206 $generated@@204)) ($generated@@202 $generated@@206 $generated@@205))
 :pattern ( ($generated@@172 $generated@@203 $generated@@206 $generated@@205))
))))) (= ($generated@@172 ($generated@@178 $generated@@203) $generated@@204 $generated@@205)  (and (=> (< 0 ($generated@@51 $generated@@204)) (and (not (= $generated@@205 0)) ($generated@@172 $generated@@203 ($generated@@49 $generated@@204 ($generated@@50 1)) (+ $generated@@205 1)))) (=> (= ($generated@@183 0) ($generated@@51 $generated@@204)) (forall (($generated@@207 T@U) ) (!  (=> (and (= (type $generated@@207) $generated@@45) ($generated@@44 $generated@@207 $generated@@204)) ($generated@@172 $generated@@203 $generated@@207 $generated@@205))
 :pattern ( ($generated@@172 $generated@@203 $generated@@207 $generated@@205))
)))))))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@203) $generated@@204 $generated@@205))
))))
(assert (forall (($generated@@208 T@U) ($generated@@209 T@U) ) (!  (=> (and (= (type $generated@@208) $generated@@45) (= (type $generated@@209) $generated@@45)) (or (or ($generated@@44 $generated@@208 $generated@@209) (= $generated@@208 $generated@@209)) ($generated@@44 $generated@@209 $generated@@208)))
 :pattern ( ($generated@@44 $generated@@208 $generated@@209) ($generated@@44 $generated@@209 $generated@@208))
)))
(assert  (and (forall (($generated@@212 T@U) ) (! (= (type ($generated@@210 $generated@@212)) $generated@@173)
 :pattern ( ($generated@@210 $generated@@212))
)) (= (type $generated@@211) $generated@@173)))
(assert (forall (($generated@@213 T@U) ($generated@@214 Int) ) (!  (=> (= (type $generated@@213) $generated@@173) (= ($generated@@177 $generated@@213 $generated@@214) ($generated@@177 $generated@@211 $generated@@214)))
 :pattern ( ($generated@@177 ($generated@@210 $generated@@213) $generated@@214))
)))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@215 T@U) ($generated@@216 T@U) ($generated@@217 Int) ) (!  (=> (and (and (= (type $generated@@215) $generated@@173) (= (type $generated@@216) $generated@@45)) (or ($generated@@202 $generated@@216 $generated@@217) (not (= 1 $generated@@171)))) true)
 :pattern ( ($generated@@172 $generated@@215 $generated@@216 $generated@@217))
))))
(assert (forall (($generated@@218 T@U) ($generated@@219 Int) ) (!  (=> (= (type $generated@@218) $generated@@173) (= ($generated@@177 ($generated@@178 $generated@@218) $generated@@219) ($generated@@177 $generated@@218 $generated@@219)))
 :pattern ( ($generated@@177 ($generated@@178 $generated@@218) $generated@@219))
)))
(assert (forall (($generated@@220 T@U) ) (!  (=> (= (type $generated@@220) $generated@@45) (<= 0 ($generated@@51 $generated@@220)))
 :pattern ( ($generated@@51 $generated@@220))
)))
(assert  (and (forall (($generated@@223 T@U) ) (! (= (type ($generated@@221 $generated@@223)) $generated@@45)
 :pattern ( ($generated@@221 $generated@@223))
)) (forall (($generated@@224 T@T) ($generated@@225 T@U) ) (! (= (type ($generated@@222 $generated@@224 $generated@@225)) $generated@@224)
 :pattern ( ($generated@@222 $generated@@224 $generated@@225))
))))
(assert (forall (($generated@@226 T@U) ) (! (let (($generated@@227 (type $generated@@226)))
(= ($generated@@222 $generated@@227 ($generated@@221 $generated@@226)) $generated@@226))
 :pattern ( ($generated@@221 $generated@@226))
)))
(assert (forall (($generated@@228 T@U) ($generated@@229 T@U) ) (!  (=> (and (= (type $generated@@228) $generated@@45) (= (type $generated@@229) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@228 $generated@@229) (not (= $generated@@228 $generated@@229))) (=> (and ($generated@@198 $generated@@228) (not ($generated@@198 $generated@@229))) ($generated@@44 $generated@@228 $generated@@229))) (=> (and ($generated@@198 $generated@@228) ($generated@@198 $generated@@229)) (= ($generated@@44 $generated@@228 $generated@@229) (< ($generated@@51 $generated@@228) ($generated@@51 $generated@@229))))) (=> (and ($generated@@44 $generated@@228 $generated@@229) ($generated@@198 $generated@@229)) ($generated@@198 $generated@@228))))
 :pattern ( ($generated@@44 $generated@@228 $generated@@229))
)))
(assert  (=> (<= 0 $generated@@171) (forall (($generated@@230 T@U) ($generated@@231 Int) ) (!  (=> (and (= (type $generated@@230) $generated@@173) (or ($generated@@189 $generated@@231) (not (= 0 $generated@@171)))) (and (=> (not (= $generated@@231 0)) ($generated@@189 (+ $generated@@231 1))) (= ($generated@@177 ($generated@@178 $generated@@230) $generated@@231)  (and (not (= $generated@@231 0)) ($generated@@177 $generated@@230 (+ $generated@@231 1))))))
 :pattern ( ($generated@@177 ($generated@@178 $generated@@230) $generated@@231))
))))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@232 T@U) ($generated@@233 T@U) ($generated@@234 Int) ) (!  (=> (and (and (= (type $generated@@232) $generated@@173) (= (type $generated@@233) $generated@@45)) (or ($generated@@202 ($generated@@185 $generated@@233) $generated@@234) (not (= 1 $generated@@171)))) (and (and (=> (< 0 ($generated@@51 $generated@@233)) (=> (not (= $generated@@234 0)) ($generated@@202 ($generated@@49 $generated@@233 ($generated@@50 1)) (+ $generated@@234 1)))) (=> (=> (< 0 ($generated@@51 $generated@@233)) (and (not (= $generated@@234 0)) ($generated@@172 ($generated@@178 $generated@@232) ($generated@@49 $generated@@233 ($generated@@50 1)) (+ $generated@@234 1)))) (=> (= ($generated@@183 0) ($generated@@51 $generated@@233)) (forall (($generated@@235 T@U) ) (!  (=> (and (= (type $generated@@235) $generated@@45) ($generated@@44 $generated@@235 $generated@@233)) ($generated@@202 $generated@@235 $generated@@234))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@232) $generated@@235 $generated@@234))
))))) (= ($generated@@172 ($generated@@178 $generated@@232) ($generated@@185 $generated@@233) $generated@@234)  (and (=> (< 0 ($generated@@51 $generated@@233)) (and (not (= $generated@@234 0)) ($generated@@172 ($generated@@178 $generated@@232) ($generated@@49 $generated@@233 ($generated@@50 1)) (+ $generated@@234 1)))) (=> (= ($generated@@183 0) ($generated@@51 $generated@@233)) (forall (($generated@@236 T@U) ) (!  (=> (and (= (type $generated@@236) $generated@@45) ($generated@@44 $generated@@236 $generated@@233)) ($generated@@172 ($generated@@178 $generated@@232) $generated@@236 $generated@@234))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@232) $generated@@236 $generated@@234))
)))))))
 :weight 3
 :pattern ( ($generated@@172 ($generated@@178 $generated@@232) ($generated@@185 $generated@@233) $generated@@234))
))))
(assert (forall (($generated@@237 T@U) ) (!  (=> (and (= (type $generated@@237) $generated@@45) ($generated@@198 $generated@@237)) (= $generated@@237 ($generated@@50 ($generated@@51 $generated@@237))))
 :pattern ( ($generated@@51 $generated@@237))
 :pattern ( ($generated@@198 $generated@@237))
)))
(assert (forall (($generated@@238 T@U) ($generated@@239 T@U) ) (!  (=> (and (and (= (type $generated@@238) $generated@@45) (= (type $generated@@239) $generated@@45)) (and ($generated@@198 $generated@@239) (<= ($generated@@51 $generated@@239) ($generated@@51 $generated@@238)))) (or (and (= $generated@@239 ($generated@@50 0)) (= ($generated@@49 $generated@@238 $generated@@239) $generated@@238)) (and (not (= $generated@@239 ($generated@@50 0))) ($generated@@44 ($generated@@49 $generated@@238 $generated@@239) $generated@@238))))
 :pattern ( ($generated@@49 $generated@@238 $generated@@239))
)))
(assert (forall (($generated@@240 Int) ) (! (= ($generated@@221 ($generated@@8 ($generated@@183 $generated@@240))) ($generated@@185 ($generated@@221 ($generated@@8 $generated@@240))))
 :pattern ( ($generated@@221 ($generated@@8 ($generated@@183 $generated@@240))))
)))
(assert (forall (($generated@@241 T@U) ) (! (= ($generated@@221 ($generated@@185 $generated@@241)) ($generated@@185 ($generated@@221 $generated@@241)))
 :pattern ( ($generated@@221 ($generated@@185 $generated@@241)))
)))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@242 T@U) ($generated@@243 T@U) ($generated@@244 Int) ) (!  (=> (and (and (= (type $generated@@242) $generated@@173) (= (type $generated@@243) $generated@@45)) (or ($generated@@202 ($generated@@185 $generated@@243) ($generated@@183 $generated@@244)) (not (= 1 $generated@@171)))) (and (and (=> (< 0 ($generated@@51 $generated@@243)) (=> (not (= $generated@@244 0)) ($generated@@202 ($generated@@49 $generated@@243 ($generated@@50 1)) (+ $generated@@244 1)))) (=> (=> (< 0 ($generated@@51 $generated@@243)) (and (not (= $generated@@244 0)) ($generated@@172 ($generated@@178 $generated@@242) ($generated@@49 $generated@@243 ($generated@@50 1)) (+ $generated@@244 1)))) (=> (= ($generated@@183 0) ($generated@@51 $generated@@243)) (forall (($generated@@245 T@U) ) (!  (=> (and (= (type $generated@@245) $generated@@45) ($generated@@44 $generated@@245 $generated@@243)) ($generated@@202 $generated@@245 $generated@@244))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@242) $generated@@245 $generated@@244))
))))) (= ($generated@@172 ($generated@@178 $generated@@242) ($generated@@185 $generated@@243) ($generated@@183 $generated@@244))  (and (=> (< 0 ($generated@@51 $generated@@243)) (and (not (= $generated@@244 0)) ($generated@@172 ($generated@@178 $generated@@242) ($generated@@49 $generated@@243 ($generated@@50 1)) (+ $generated@@244 1)))) (=> (= ($generated@@183 0) ($generated@@51 $generated@@243)) (forall (($generated@@246 T@U) ) (!  (=> (and (= (type $generated@@246) $generated@@45) ($generated@@44 $generated@@246 $generated@@243)) ($generated@@172 ($generated@@178 $generated@@242) $generated@@246 $generated@@244))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@242) $generated@@246 $generated@@244))
)))))))
 :weight 3
 :pattern ( ($generated@@172 ($generated@@178 $generated@@242) ($generated@@185 $generated@@243) ($generated@@183 $generated@@244)))
))))
(assert (forall (($generated@@247 T@U) ($generated@@248 T@U) ($generated@@249 Int) ) (!  (=> (and (= (type $generated@@247) $generated@@173) (= (type $generated@@248) $generated@@45)) (= ($generated@@172 $generated@@247 $generated@@248 $generated@@249) ($generated@@172 $generated@@211 $generated@@248 $generated@@249)))
 :pattern ( ($generated@@172 ($generated@@210 $generated@@247) $generated@@248 $generated@@249))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@250 () T@U)
(declare-fun $generated@@251 () T@U)
(declare-fun $generated@@252 () T@U)
(declare-fun $generated@@253 () T@U)
(declare-fun $generated@@254 (T@U) Bool)
(declare-fun $generated@@255 () T@U)
(declare-fun $generated@@256 (T@U) Bool)
(declare-fun $generated@@257 () Int)
(assert  (and (and (and (and (= (type $generated@@250) ($generated@@71 $generated@@61 $generated@@4)) (= (type $generated@@251) $generated@@61)) (= (type $generated@@252) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@253) ($generated@@64 $generated@@4))) (= (type $generated@@255) ($generated@@62 $generated@@61 $generated@@63))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@258  (=> (= $generated@@250 ($generated@@59 $generated@@251 $generated@@252 $generated@@253 false)) (=> (and (and (and ($generated@@254 $generated@@255) ($generated@@256 $generated@@255)) (= $generated@@252 $generated@@255)) (and (forall (($generated@@259 Int) )  (=> (and (<= $generated@@259 ($generated@@183 0)) (and (<= 0 (- 0 $generated@@259)) (< (- 0 $generated@@259) (- 0 $generated@@257)))) (not ($generated@@177 ($generated@@178 $generated@@211) $generated@@259)))) (= (ControlFlow 0 2) (- 0 1)))) (not ($generated@@177 ($generated@@178 ($generated@@178 $generated@@211)) $generated@@257))))))
(let (($generated@@260  (=> (and (and (and ($generated@@254 $generated@@252) ($generated@@256 $generated@@252)) (= 1 $generated@@171)) (and (<= $generated@@257 ($generated@@183 0)) (= (ControlFlow 0 3) 2))) $generated@@258)))
$generated@@260)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 (Int) T@U)
(declare-fun $generated@@51 (T@U) Int)
(declare-fun $generated@@58 (T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U) T@U)
(declare-fun $generated@@66 (T@U T@U) T@U)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@69 (T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@74 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@171 () Int)
(declare-fun $generated@@172 (T@U T@U Int) Bool)
(declare-fun $generated@@173 () T@T)
(declare-fun $generated@@177 (Int) Int)
(declare-fun $generated@@179 (T@U) T@U)
(declare-fun $generated@@183 (T@U) T@U)
(declare-fun $generated@@188 (T@U) Bool)
(declare-fun $generated@@192 (T@U Int) Bool)
(declare-fun $generated@@204 (T@U) T@U)
(declare-fun $generated@@205 (T@T T@U) T@U)
(declare-fun $generated@@228 (T@U) T@U)
(declare-fun $generated@@229 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (! (= (type ($generated@@49 $generated@@52 $generated@@53)) $generated@@45)
 :pattern ( ($generated@@49 $generated@@52 $generated@@53))
)) (forall (($generated@@54 Int) ) (! (= (type ($generated@@50 $generated@@54)) $generated@@45)
 :pattern ( ($generated@@50 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 Int) ($generated@@57 Int) ) (!  (=> (= (type $generated@@55) $generated@@45) (=> (and (and (<= 0 $generated@@56) (<= 0 $generated@@57)) (<= (+ $generated@@56 $generated@@57) ($generated@@51 $generated@@55))) (= ($generated@@49 ($generated@@49 $generated@@55 ($generated@@50 $generated@@56)) ($generated@@50 $generated@@57)) ($generated@@49 $generated@@55 ($generated@@50 (+ $generated@@56 $generated@@57))))))
 :pattern ( ($generated@@49 ($generated@@49 $generated@@55 ($generated@@50 $generated@@56)) ($generated@@50 $generated@@57)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@75 $generated@@76)) 7)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ) (! (= ($generated@@67 ($generated@@62 $generated@@77 $generated@@78)) $generated@@77)
 :pattern ( ($generated@@62 $generated@@77 $generated@@78))
))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ) (! (= ($generated@@68 ($generated@@62 $generated@@79 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@62 $generated@@79 $generated@@80))
))) (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@68 (type $generated@@81))))
(= (type ($generated@@66 $generated@@81 $generated@@82)) $generated@@83))
 :pattern ( ($generated@@66 $generated@@81 $generated@@82))
))) (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (let (($generated@@87 (type $generated@@86)))
(let (($generated@@88 (type $generated@@85)))
(= (type ($generated@@69 $generated@@84 $generated@@85 $generated@@86)) ($generated@@62 $generated@@88 $generated@@87))))
 :pattern ( ($generated@@69 $generated@@84 $generated@@85 $generated@@86))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (let (($generated@@92 ($generated@@68 (type $generated@@89))))
 (=> (= (type $generated@@91) $generated@@92) (= ($generated@@66 ($generated@@69 $generated@@89 $generated@@90 $generated@@91) $generated@@90) $generated@@91)))
 :weight 0
))) (and (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@95 $generated@@96) (= ($generated@@66 ($generated@@69 $generated@@94 $generated@@95 $generated@@93) $generated@@96) ($generated@@66 $generated@@94 $generated@@96)))
 :weight 0
)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or true (= ($generated@@66 ($generated@@69 $generated@@98 $generated@@99 $generated@@97) $generated@@100) ($generated@@66 $generated@@98 $generated@@100)))
 :weight 0
)))) (forall (($generated@@101 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@101)) 8))) (forall (($generated@@102 T@T) ) (! (= ($generated@@60 ($generated@@64 $generated@@102)) $generated@@102)
 :pattern ( ($generated@@64 $generated@@102))
))) (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (! (let (($generated@@105 ($generated@@60 (type $generated@@104))))
(= (type ($generated@@65 $generated@@103 $generated@@104)) $generated@@105))
 :pattern ( ($generated@@65 $generated@@103 $generated@@104))
))) (= ($generated@@1 $generated@@63) 9)) (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= (type ($generated@@70 $generated@@106 $generated@@107 $generated@@108)) $generated@@63)
 :pattern ( ($generated@@70 $generated@@106 $generated@@107 $generated@@108))
))) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (let (($generated@@112 ($generated@@60 (type $generated@@110))))
 (=> (= (type $generated@@111) $generated@@112) (= ($generated@@65 ($generated@@70 $generated@@109 $generated@@110 $generated@@111) $generated@@110) $generated@@111)))
 :weight 0
))) (and (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@115 $generated@@116) (= ($generated@@65 ($generated@@70 $generated@@114 $generated@@115 $generated@@113) $generated@@116) ($generated@@65 $generated@@114 $generated@@116)))
 :weight 0
)) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or true (= ($generated@@65 ($generated@@70 $generated@@118 $generated@@119 $generated@@117) $generated@@120) ($generated@@65 $generated@@118 $generated@@120)))
 :weight 0
)))) (= ($generated@@1 $generated@@61) 10)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (= ($generated@@1 ($generated@@71 $generated@@121 $generated@@122)) 11))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (! (= ($generated@@72 ($generated@@71 $generated@@123 $generated@@124)) $generated@@123)
 :pattern ( ($generated@@71 $generated@@123 $generated@@124))
))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@73 ($generated@@71 $generated@@125 $generated@@126)) $generated@@126)
 :pattern ( ($generated@@71 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (let (($generated@@130 ($generated@@73 (type $generated@@127))))
(= (type ($generated@@58 $generated@@127 $generated@@128 $generated@@129)) $generated@@130))
 :pattern ( ($generated@@58 $generated@@127 $generated@@128 $generated@@129))
))) (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (let (($generated@@135 (type $generated@@134)))
(let (($generated@@136 (type $generated@@132)))
(= (type ($generated@@74 $generated@@131 $generated@@132 $generated@@133 $generated@@134)) ($generated@@71 $generated@@136 $generated@@135))))
 :pattern ( ($generated@@74 $generated@@131 $generated@@132 $generated@@133 $generated@@134))
))) (forall (($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (let (($generated@@141 ($generated@@73 (type $generated@@137))))
 (=> (= (type $generated@@140) $generated@@141) (= ($generated@@58 ($generated@@74 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@138 $generated@@139) $generated@@140)))
 :weight 0
))) (and (and (forall (($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (!  (or (= $generated@@144 $generated@@146) (= ($generated@@58 ($generated@@74 $generated@@143 $generated@@144 $generated@@145 $generated@@142) $generated@@146 $generated@@147) ($generated@@58 $generated@@143 $generated@@146 $generated@@147)))
 :weight 0
)) (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ) (!  (or (= $generated@@151 $generated@@153) (= ($generated@@58 ($generated@@74 $generated@@149 $generated@@150 $generated@@151 $generated@@148) $generated@@152 $generated@@153) ($generated@@58 $generated@@149 $generated@@152 $generated@@153)))
 :weight 0
))) (forall (($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ) (!  (or true (= ($generated@@58 ($generated@@74 $generated@@155 $generated@@156 $generated@@157 $generated@@154) $generated@@158 $generated@@159) ($generated@@58 $generated@@155 $generated@@158 $generated@@159)))
 :weight 0
)))) (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 Bool) ) (! (= (type ($generated@@59 $generated@@160 $generated@@161 $generated@@162 $generated@@163)) ($generated@@71 $generated@@61 $generated@@4))
 :pattern ( ($generated@@59 $generated@@160 $generated@@161 $generated@@162 $generated@@163))
))))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ($generated@@166 T@U) ($generated@@167 Bool) ($generated@@168 T@U) ($generated@@169 T@U) ) (! (let (($generated@@170 ($generated@@60 (type $generated@@169))))
 (=> (and (and (and (and (= (type $generated@@164) $generated@@61) (= (type $generated@@165) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@166) ($generated@@64 $generated@@4))) (= (type $generated@@168) $generated@@61)) (= (type $generated@@169) ($generated@@64 $generated@@170))) (= ($generated@@0 ($generated@@58 ($generated@@59 $generated@@164 $generated@@165 $generated@@166 $generated@@167) $generated@@168 $generated@@169))  (=> (and (not (= $generated@@168 $generated@@164)) ($generated@@0 ($generated@@65 ($generated@@66 $generated@@165 $generated@@168) $generated@@166))) $generated@@167))))
 :pattern ( ($generated@@58 ($generated@@59 $generated@@164 $generated@@165 $generated@@166 $generated@@167) $generated@@168 $generated@@169))
)))
(assert (= ($generated@@1 $generated@@173) 12))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@174 T@U) ($generated@@175 Int) ($generated@@176 T@U) ) (!  (=> (and (and (= (type $generated@@174) $generated@@173) (= (type $generated@@176) $generated@@45)) (= $generated@@176 ($generated@@50 0))) ($generated@@172 $generated@@174 $generated@@176 $generated@@175))
 :pattern ( ($generated@@172 $generated@@174 $generated@@176 $generated@@175))
))))
(assert (forall (($generated@@178 Int) ) (! (= ($generated@@177 $generated@@178) $generated@@178)
 :pattern ( ($generated@@177 $generated@@178))
)))
(assert (forall (($generated@@180 T@U) ) (! (let (($generated@@181 (type $generated@@180)))
(= (type ($generated@@179 $generated@@180)) $generated@@181))
 :pattern ( ($generated@@179 $generated@@180))
)))
(assert (forall (($generated@@182 T@U) ) (! (= ($generated@@179 $generated@@182) $generated@@182)
 :pattern ( ($generated@@179 $generated@@182))
)))
(assert (forall (($generated@@184 T@U) ) (! (= (type ($generated@@183 $generated@@184)) $generated@@173)
 :pattern ( ($generated@@183 $generated@@184))
)))
(assert (forall (($generated@@185 T@U) ($generated@@186 T@U) ($generated@@187 Int) ) (!  (=> (and (= (type $generated@@185) $generated@@173) (= (type $generated@@186) $generated@@45)) (= ($generated@@172 ($generated@@183 $generated@@185) $generated@@186 $generated@@187) ($generated@@172 $generated@@185 $generated@@186 $generated@@187)))
 :pattern ( ($generated@@172 ($generated@@183 $generated@@185) $generated@@186 $generated@@187))
)))
(assert (forall (($generated@@189 T@U) ($generated@@190 T@U) ) (!  (=> (and (and (= (type $generated@@189) $generated@@45) (= (type $generated@@190) $generated@@45)) (and ($generated@@188 $generated@@190) (<= ($generated@@51 $generated@@190) ($generated@@51 $generated@@189)))) (and (= ($generated@@188 ($generated@@49 $generated@@189 $generated@@190)) ($generated@@188 $generated@@189)) (= ($generated@@51 ($generated@@49 $generated@@189 $generated@@190)) (- ($generated@@51 $generated@@189) ($generated@@51 $generated@@190)))))
 :pattern ( ($generated@@49 $generated@@189 $generated@@190))
)))
(assert (forall (($generated@@191 Int) ) (!  (=> (<= 0 $generated@@191) (and ($generated@@188 ($generated@@50 $generated@@191)) (= ($generated@@51 ($generated@@50 $generated@@191)) $generated@@191)))
 :pattern ( ($generated@@50 $generated@@191))
)))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@193 T@U) ($generated@@194 T@U) ($generated@@195 Int) ) (!  (=> (and (and (= (type $generated@@193) $generated@@173) (= (type $generated@@194) $generated@@45)) (or ($generated@@192 $generated@@194 $generated@@195) (not (= 1 $generated@@171)))) (and (and (=> (< 0 ($generated@@51 $generated@@194)) (=> (not (= $generated@@195 0)) ($generated@@192 ($generated@@49 $generated@@194 ($generated@@50 1)) (+ $generated@@195 1)))) (=> (=> (< 0 ($generated@@51 $generated@@194)) (and (not (= $generated@@195 0)) ($generated@@172 $generated@@193 ($generated@@49 $generated@@194 ($generated@@50 1)) (+ $generated@@195 1)))) (=> (= ($generated@@177 0) ($generated@@51 $generated@@194)) (forall (($generated@@196 T@U) ) (!  (=> (and (= (type $generated@@196) $generated@@45) ($generated@@44 $generated@@196 $generated@@194)) ($generated@@192 $generated@@196 $generated@@195))
 :pattern ( ($generated@@172 $generated@@193 $generated@@196 $generated@@195))
))))) (= ($generated@@172 ($generated@@183 $generated@@193) $generated@@194 $generated@@195)  (and (=> (< 0 ($generated@@51 $generated@@194)) (and (not (= $generated@@195 0)) ($generated@@172 $generated@@193 ($generated@@49 $generated@@194 ($generated@@50 1)) (+ $generated@@195 1)))) (=> (= ($generated@@177 0) ($generated@@51 $generated@@194)) (forall (($generated@@197 T@U) ) (!  (=> (and (= (type $generated@@197) $generated@@45) ($generated@@44 $generated@@197 $generated@@194)) ($generated@@172 $generated@@193 $generated@@197 $generated@@195))
 :pattern ( ($generated@@172 $generated@@193 $generated@@197 $generated@@195))
)))))))
 :pattern ( ($generated@@172 ($generated@@183 $generated@@193) $generated@@194 $generated@@195))
))))
(assert (forall (($generated@@198 T@U) ($generated@@199 T@U) ) (!  (=> (and (= (type $generated@@198) $generated@@45) (= (type $generated@@199) $generated@@45)) (or (or ($generated@@44 $generated@@198 $generated@@199) (= $generated@@198 $generated@@199)) ($generated@@44 $generated@@199 $generated@@198)))
 :pattern ( ($generated@@44 $generated@@198 $generated@@199) ($generated@@44 $generated@@199 $generated@@198))
)))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@200 T@U) ($generated@@201 T@U) ($generated@@202 Int) ) (!  (=> (and (and (= (type $generated@@200) $generated@@173) (= (type $generated@@201) $generated@@45)) (or ($generated@@192 $generated@@201 $generated@@202) (not (= 1 $generated@@171)))) true)
 :pattern ( ($generated@@172 $generated@@200 $generated@@201 $generated@@202))
))))
(assert (forall (($generated@@203 T@U) ) (!  (=> (= (type $generated@@203) $generated@@45) (<= 0 ($generated@@51 $generated@@203)))
 :pattern ( ($generated@@51 $generated@@203))
)))
(assert  (and (forall (($generated@@206 T@U) ) (! (= (type ($generated@@204 $generated@@206)) $generated@@45)
 :pattern ( ($generated@@204 $generated@@206))
)) (forall (($generated@@207 T@T) ($generated@@208 T@U) ) (! (= (type ($generated@@205 $generated@@207 $generated@@208)) $generated@@207)
 :pattern ( ($generated@@205 $generated@@207 $generated@@208))
))))
(assert (forall (($generated@@209 T@U) ) (! (let (($generated@@210 (type $generated@@209)))
(= ($generated@@205 $generated@@210 ($generated@@204 $generated@@209)) $generated@@209))
 :pattern ( ($generated@@204 $generated@@209))
)))
(assert (forall (($generated@@211 T@U) ($generated@@212 T@U) ) (!  (=> (and (= (type $generated@@211) $generated@@45) (= (type $generated@@212) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@211 $generated@@212) (not (= $generated@@211 $generated@@212))) (=> (and ($generated@@188 $generated@@211) (not ($generated@@188 $generated@@212))) ($generated@@44 $generated@@211 $generated@@212))) (=> (and ($generated@@188 $generated@@211) ($generated@@188 $generated@@212)) (= ($generated@@44 $generated@@211 $generated@@212) (< ($generated@@51 $generated@@211) ($generated@@51 $generated@@212))))) (=> (and ($generated@@44 $generated@@211 $generated@@212) ($generated@@188 $generated@@212)) ($generated@@188 $generated@@211))))
 :pattern ( ($generated@@44 $generated@@211 $generated@@212))
)))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@213 T@U) ($generated@@214 T@U) ($generated@@215 Int) ) (!  (=> (and (and (= (type $generated@@213) $generated@@173) (= (type $generated@@214) $generated@@45)) (or ($generated@@192 ($generated@@179 $generated@@214) $generated@@215) (not (= 1 $generated@@171)))) (and (and (=> (< 0 ($generated@@51 $generated@@214)) (=> (not (= $generated@@215 0)) ($generated@@192 ($generated@@49 $generated@@214 ($generated@@50 1)) (+ $generated@@215 1)))) (=> (=> (< 0 ($generated@@51 $generated@@214)) (and (not (= $generated@@215 0)) ($generated@@172 ($generated@@183 $generated@@213) ($generated@@49 $generated@@214 ($generated@@50 1)) (+ $generated@@215 1)))) (=> (= ($generated@@177 0) ($generated@@51 $generated@@214)) (forall (($generated@@216 T@U) ) (!  (=> (and (= (type $generated@@216) $generated@@45) ($generated@@44 $generated@@216 $generated@@214)) ($generated@@192 $generated@@216 $generated@@215))
 :pattern ( ($generated@@172 ($generated@@183 $generated@@213) $generated@@216 $generated@@215))
))))) (= ($generated@@172 ($generated@@183 $generated@@213) ($generated@@179 $generated@@214) $generated@@215)  (and (=> (< 0 ($generated@@51 $generated@@214)) (and (not (= $generated@@215 0)) ($generated@@172 ($generated@@183 $generated@@213) ($generated@@49 $generated@@214 ($generated@@50 1)) (+ $generated@@215 1)))) (=> (= ($generated@@177 0) ($generated@@51 $generated@@214)) (forall (($generated@@217 T@U) ) (!  (=> (and (= (type $generated@@217) $generated@@45) ($generated@@44 $generated@@217 $generated@@214)) ($generated@@172 ($generated@@183 $generated@@213) $generated@@217 $generated@@215))
 :pattern ( ($generated@@172 ($generated@@183 $generated@@213) $generated@@217 $generated@@215))
)))))))
 :weight 3
 :pattern ( ($generated@@172 ($generated@@183 $generated@@213) ($generated@@179 $generated@@214) $generated@@215))
))))
(assert (forall (($generated@@218 T@U) ) (!  (=> (and (= (type $generated@@218) $generated@@45) ($generated@@188 $generated@@218)) (= $generated@@218 ($generated@@50 ($generated@@51 $generated@@218))))
 :pattern ( ($generated@@51 $generated@@218))
 :pattern ( ($generated@@188 $generated@@218))
)))
(assert (forall (($generated@@219 T@U) ($generated@@220 T@U) ) (!  (=> (and (and (= (type $generated@@219) $generated@@45) (= (type $generated@@220) $generated@@45)) (and ($generated@@188 $generated@@220) (<= ($generated@@51 $generated@@220) ($generated@@51 $generated@@219)))) (or (and (= $generated@@220 ($generated@@50 0)) (= ($generated@@49 $generated@@219 $generated@@220) $generated@@219)) (and (not (= $generated@@220 ($generated@@50 0))) ($generated@@44 ($generated@@49 $generated@@219 $generated@@220) $generated@@219))))
 :pattern ( ($generated@@49 $generated@@219 $generated@@220))
)))
(assert (forall (($generated@@221 Int) ) (! (= ($generated@@204 ($generated@@8 ($generated@@177 $generated@@221))) ($generated@@179 ($generated@@204 ($generated@@8 $generated@@221))))
 :pattern ( ($generated@@204 ($generated@@8 ($generated@@177 $generated@@221))))
)))
(assert (forall (($generated@@222 T@U) ) (! (= ($generated@@204 ($generated@@179 $generated@@222)) ($generated@@179 ($generated@@204 $generated@@222)))
 :pattern ( ($generated@@204 ($generated@@179 $generated@@222)))
)))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@223 T@U) ($generated@@224 T@U) ($generated@@225 Int) ) (!  (=> (and (and (= (type $generated@@223) $generated@@173) (= (type $generated@@224) $generated@@45)) (or ($generated@@192 ($generated@@179 $generated@@224) ($generated@@177 $generated@@225)) (not (= 1 $generated@@171)))) (and (and (=> (< 0 ($generated@@51 $generated@@224)) (=> (not (= $generated@@225 0)) ($generated@@192 ($generated@@49 $generated@@224 ($generated@@50 1)) (+ $generated@@225 1)))) (=> (=> (< 0 ($generated@@51 $generated@@224)) (and (not (= $generated@@225 0)) ($generated@@172 ($generated@@183 $generated@@223) ($generated@@49 $generated@@224 ($generated@@50 1)) (+ $generated@@225 1)))) (=> (= ($generated@@177 0) ($generated@@51 $generated@@224)) (forall (($generated@@226 T@U) ) (!  (=> (and (= (type $generated@@226) $generated@@45) ($generated@@44 $generated@@226 $generated@@224)) ($generated@@192 $generated@@226 $generated@@225))
 :pattern ( ($generated@@172 ($generated@@183 $generated@@223) $generated@@226 $generated@@225))
))))) (= ($generated@@172 ($generated@@183 $generated@@223) ($generated@@179 $generated@@224) ($generated@@177 $generated@@225))  (and (=> (< 0 ($generated@@51 $generated@@224)) (and (not (= $generated@@225 0)) ($generated@@172 ($generated@@183 $generated@@223) ($generated@@49 $generated@@224 ($generated@@50 1)) (+ $generated@@225 1)))) (=> (= ($generated@@177 0) ($generated@@51 $generated@@224)) (forall (($generated@@227 T@U) ) (!  (=> (and (= (type $generated@@227) $generated@@45) ($generated@@44 $generated@@227 $generated@@224)) ($generated@@172 ($generated@@183 $generated@@223) $generated@@227 $generated@@225))
 :pattern ( ($generated@@172 ($generated@@183 $generated@@223) $generated@@227 $generated@@225))
)))))))
 :weight 3
 :pattern ( ($generated@@172 ($generated@@183 $generated@@223) ($generated@@179 $generated@@224) ($generated@@177 $generated@@225)))
))))
(assert  (and (forall (($generated@@230 T@U) ) (! (= (type ($generated@@228 $generated@@230)) $generated@@173)
 :pattern ( ($generated@@228 $generated@@230))
)) (= (type $generated@@229) $generated@@173)))
(assert (forall (($generated@@231 T@U) ($generated@@232 T@U) ($generated@@233 Int) ) (!  (=> (and (= (type $generated@@231) $generated@@173) (= (type $generated@@232) $generated@@45)) (= ($generated@@172 $generated@@231 $generated@@232 $generated@@233) ($generated@@172 $generated@@229 $generated@@232 $generated@@233)))
 :pattern ( ($generated@@172 ($generated@@228 $generated@@231) $generated@@232 $generated@@233))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@234 () T@U)
(declare-fun $generated@@235 () Int)
(declare-fun $generated@@236 (T@U) Bool)
(declare-fun $generated@@237 () T@U)
(declare-fun $generated@@238 (T@U) Bool)
(declare-fun $generated@@239 () T@U)
(declare-fun $generated@@240 () T@U)
(declare-fun $generated@@241 () T@U)
(declare-fun $generated@@242 () T@U)
(declare-fun $generated@@243 () T@U)
(assert  (and (and (and (and (and (and (= (type $generated@@234) $generated@@45) (= (type $generated@@237) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@239) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@240) ($generated@@71 $generated@@61 $generated@@4))) (= (type $generated@@241) $generated@@61)) (= (type $generated@@242) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@243) ($generated@@64 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@244  (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> ($generated@@192 $generated@@234 $generated@@235) (or ($generated@@172 ($generated@@183 $generated@@229) $generated@@234 $generated@@235) (=> (< 0 ($generated@@51 $generated@@234)) (not (= $generated@@235 0)))))) (=> (=> ($generated@@192 $generated@@234 $generated@@235) (or ($generated@@172 ($generated@@183 $generated@@229) $generated@@234 $generated@@235) (=> (< 0 ($generated@@51 $generated@@234)) (not (= $generated@@235 0))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@192 $generated@@234 $generated@@235) (or ($generated@@172 ($generated@@183 $generated@@229) $generated@@234 $generated@@235) (=> (< 0 ($generated@@51 $generated@@234)) ($generated@@172 ($generated@@183 ($generated@@183 $generated@@229)) ($generated@@49 $generated@@234 ($generated@@50 1)) (+ $generated@@235 1)))))) (=> (=> ($generated@@192 $generated@@234 $generated@@235) (or ($generated@@172 ($generated@@183 $generated@@229) $generated@@234 $generated@@235) (=> (< 0 ($generated@@51 $generated@@234)) ($generated@@172 ($generated@@183 ($generated@@183 $generated@@229)) ($generated@@49 $generated@@234 ($generated@@50 1)) (+ $generated@@235 1))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@192 $generated@@234 $generated@@235) (or ($generated@@172 ($generated@@183 $generated@@229) $generated@@234 $generated@@235) (=> (= ($generated@@177 0) ($generated@@51 $generated@@234)) (forall (($generated@@245 T@U) ) (!  (=> (and (= (type $generated@@245) $generated@@45) ($generated@@44 $generated@@245 $generated@@234)) ($generated@@172 ($generated@@183 ($generated@@183 $generated@@229)) $generated@@245 $generated@@235))
 :pattern ( ($generated@@172 ($generated@@183 ($generated@@183 $generated@@229)) $generated@@245 $generated@@235))
))))))))))))
(let (($generated@@246  (=> (<= ($generated@@51 $generated@@234) 0) (=> (and (and (and ($generated@@236 $generated@@237) ($generated@@238 $generated@@237)) (= $generated@@239 $generated@@237)) (and (forall (($generated@@247 T@U) ($generated@@248 Int) ) (!  (=> (= (type $generated@@247) $generated@@45) (=> (and ($generated@@44 $generated@@247 $generated@@234) (< 0 $generated@@248)) ($generated@@172 ($generated@@183 $generated@@229) $generated@@247 $generated@@248)))
 :no-pattern (type $generated@@247)
 :no-pattern ($generated $generated@@247)
 :no-pattern ($generated@@0 $generated@@247)
)) (= (ControlFlow 0 6) 2))) $generated@@244))))
(let (($generated@@249  (=> (and (< 0 ($generated@@51 $generated@@234)) (= (ControlFlow 0 5) 2)) $generated@@244)))
(let (($generated@@250  (=> (= $generated@@240 ($generated@@59 $generated@@241 $generated@@242 $generated@@243 false)) (=> (and (and ($generated@@236 $generated@@239) ($generated@@238 $generated@@239)) (and (= $generated@@242 $generated@@239) (forall (($generated@@251 T@U) ($generated@@252 Int) ) (!  (=> (= (type $generated@@251) $generated@@45) (=> (and (< 0 $generated@@252) (or ($generated@@44 $generated@@251 $generated@@234) (and (= $generated@@251 $generated@@234) (and (<= 0 $generated@@252) (< $generated@@252 $generated@@235))))) ($generated@@172 ($generated@@183 $generated@@229) $generated@@251 $generated@@252)))
 :no-pattern (type $generated@@251)
 :no-pattern ($generated $generated@@251)
 :no-pattern ($generated@@0 $generated@@251)
)))) (and (=> (= (ControlFlow 0 7) 5) $generated@@249) (=> (= (ControlFlow 0 7) 6) $generated@@246))))))
(let (($generated@@253  (=> (and (and (and ($generated@@236 $generated@@242) ($generated@@238 $generated@@242)) (= 2 $generated@@171)) (and (< 0 $generated@@235) (= (ControlFlow 0 8) 7))) $generated@@250)))
$generated@@253))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@55 () T@U)
(declare-fun $generated@@56 () T@U)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@58 () T@U)
(declare-fun $generated@@59 () T@U)
(declare-fun $generated@@60 () T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@67 () Int)
(declare-fun $generated@@68 (T@U T@U Int) Bool)
(declare-fun $generated@@69 (T@U T@U) Bool)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 (T@U T@U) Bool)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@80 (T@U T@U T@U) Bool)
(declare-fun $generated@@81 (Int) T@U)
(declare-fun $generated@@82 (T@T T@T) T@T)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 (T@T) T@T)
(declare-fun $generated@@86 (T@T) T@T)
(declare-fun $generated@@87 (T@U T@U) T@U)
(declare-fun $generated@@88 (T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@U T@U) T@U)
(declare-fun $generated@@90 (T@U T@U T@U) T@U)
(declare-fun $generated@@141 (T@U) T@U)
(declare-fun $generated@@142 (T@U Int) Bool)
(declare-fun $generated@@143 (T@U) Int)
(declare-fun $generated@@144 (Int) Int)
(declare-fun $generated@@145 (T@U T@U) T@U)
(declare-fun $generated@@146 (Int) T@U)
(declare-fun $generated@@159 (T@U T@U T@U) T@U)
(declare-fun $generated@@160 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@161 (T@T T@T) T@T)
(declare-fun $generated@@162 (T@T) T@T)
(declare-fun $generated@@163 (T@T) T@T)
(declare-fun $generated@@164 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@215 (T@U Int) Bool)
(declare-fun $generated@@223 (T@U) T@U)
(declare-fun $generated@@227 (Int) Bool)
(declare-fun $generated@@235 (T@T) T@U)
(declare-fun $generated@@236 (T@U) Int)
(declare-fun $generated@@237 (T@T) T@T)
(declare-fun $generated@@238 (T@T) T@T)
(declare-fun $generated@@251 (T@U T@U T@U) Bool)
(declare-fun $generated@@252 (T@U) T@U)
(declare-fun $generated@@257 (T@U) T@U)
(declare-fun $generated@@258 (T@T T@T) T@U)
(declare-fun $generated@@259 (T@T T@T) T@T)
(declare-fun $generated@@260 (T@T) T@T)
(declare-fun $generated@@261 (T@T) T@T)
(declare-fun $generated@@275 (T@U) T@U)
(declare-fun $generated@@276 (T@T T@T) T@U)
(declare-fun $generated@@277 (T@T T@T) T@T)
(declare-fun $generated@@278 (T@T) T@T)
(declare-fun $generated@@279 (T@T) T@T)
(declare-fun $generated@@293 (T@U) Bool)
(declare-fun $generated@@312 (T@U) T@U)
(declare-fun $generated@@318 (T@U) T@U)
(declare-fun $generated@@324 (T@U T@U) T@U)
(declare-fun $generated@@325 (T@U) T@U)
(declare-fun $generated@@336 (T@U T@U) T@U)
(declare-fun $generated@@337 (T@U) T@U)
(declare-fun $generated@@350 (T@U) T@U)
(declare-fun $generated@@351 () T@U)
(declare-fun $generated@@358 (T@T) T@U)
(declare-fun $generated@@368 (T@U) T@U)
(declare-fun $generated@@372 (T@U) T@U)
(declare-fun $generated@@378 (T@U) T@U)
(declare-fun $generated@@382 (T@U) T@U)
(declare-fun $generated@@388 (T@U) T@U)
(declare-fun $generated@@389 (T@U Int) T@U)
(declare-fun $generated@@398 (T@U) Int)
(declare-fun $generated@@400 (T@U) T@U)
(declare-fun $generated@@404 (T@U) T@U)
(declare-fun $generated@@408 (T@U) T@U)
(declare-fun $generated@@409 (T@U) T@U)
(declare-fun $generated@@414 (T@U) T@U)
(declare-fun $generated@@418 (T@T T@U) T@U)
(declare-fun $generated@@444 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@61) 6) (= (type $generated@@44) $generated@@61)) (= (type $generated@@45) $generated@@61)) (= (type $generated@@46) $generated@@61)) (= (type $generated@@47) $generated@@61)) (= (type $generated@@48) $generated@@61)) (= ($generated@@1 $generated@@62) 7)) (= (type $generated@@49) $generated@@62)) (= (type $generated@@50) $generated@@62)) (= (type $generated@@51) $generated@@62)) (= (type $generated@@52) $generated@@62)) (= (type $generated@@53) $generated@@62)) (= (type $generated@@54) $generated@@62)) (= (type $generated@@55) $generated@@62)) (= (type $generated@@56) $generated@@62)) (= (type $generated@@57) $generated@@62)) (= (type $generated@@58) $generated@@62)) (= (type $generated@@59) $generated@@62)) (forall (($generated@@65 T@T) ) (= ($generated@@1 ($generated@@63 $generated@@65)) 8))) (forall (($generated@@66 T@T) ) (! (= ($generated@@64 ($generated@@63 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@63 $generated@@66))
))) (= (type $generated@@60) ($generated@@63 $generated@@4))))
(assert (distinct $generated@@44 $generated@@45 $generated@@46 $generated@@47 $generated@@48 $generated@@49 $generated@@50 $generated@@51 $generated@@52 $generated@@53 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60)
)
(assert  (and (= ($generated@@1 $generated@@70) 9) (= ($generated@@1 $generated@@71) 10)))
(assert  (=> (<= 1 $generated@@67) (forall (($generated@@73 T@U) ($generated@@74 Int) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> (and (and (and (and (and (= (type $generated@@73) $generated@@70) (= (type $generated@@75) $generated@@71)) (= (type $generated@@76) $generated@@71)) (= (type $generated@@77) $generated@@71)) ($generated@@72 $generated@@75 $generated@@76)) ($generated@@68 $generated@@73 $generated@@75 $generated@@74)) ($generated@@68 $generated@@73 $generated@@76 $generated@@74))
 :pattern ( ($generated@@68 $generated@@73 $generated@@75 $generated@@74) ($generated@@69 $generated@@75 $generated@@77) ($generated@@69 $generated@@76 $generated@@77))
))))
(assert (forall (($generated@@79 T@U) ) (! (= (type ($generated@@78 $generated@@79)) $generated@@62)
 :pattern ( ($generated@@78 $generated@@79))
)))
(assert (= ($generated@@78 $generated@@44) $generated@@49))
(assert (= ($generated@@78 $generated@@45) $generated@@50))
(assert (= ($generated@@78 $generated@@46) $generated@@51))
(assert (= ($generated@@78 $generated@@47) $generated@@52))
(assert (= ($generated@@78 $generated@@48) $generated@@53))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ) (= ($generated@@1 ($generated@@82 $generated@@91 $generated@@92)) 11)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (! (= ($generated@@85 ($generated@@82 $generated@@93 $generated@@94)) $generated@@93)
 :pattern ( ($generated@@82 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (! (= ($generated@@86 ($generated@@82 $generated@@95 $generated@@96)) $generated@@96)
 :pattern ( ($generated@@82 $generated@@95 $generated@@96))
))) (forall (($generated@@97 T@U) ($generated@@98 T@U) ) (! (let (($generated@@99 ($generated@@86 (type $generated@@97))))
(= (type ($generated@@87 $generated@@97 $generated@@98)) $generated@@99))
 :pattern ( ($generated@@87 $generated@@97 $generated@@98))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (let (($generated@@103 (type $generated@@102)))
(let (($generated@@104 (type $generated@@101)))
(= (type ($generated@@88 $generated@@100 $generated@@101 $generated@@102)) ($generated@@82 $generated@@104 $generated@@103))))
 :pattern ( ($generated@@88 $generated@@100 $generated@@101 $generated@@102))
))) (forall (($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (let (($generated@@108 ($generated@@86 (type $generated@@105))))
 (=> (= (type $generated@@107) $generated@@108) (= ($generated@@87 ($generated@@88 $generated@@105 $generated@@106 $generated@@107) $generated@@106) $generated@@107)))
 :weight 0
))) (and (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@111 $generated@@112) (= ($generated@@87 ($generated@@88 $generated@@110 $generated@@111 $generated@@109) $generated@@112) ($generated@@87 $generated@@110 $generated@@112)))
 :weight 0
)) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or true (= ($generated@@87 ($generated@@88 $generated@@114 $generated@@115 $generated@@113) $generated@@116) ($generated@@87 $generated@@114 $generated@@116)))
 :weight 0
)))) (= ($generated@@1 $generated@@83) 12)) (forall (($generated@@117 T@U) ($generated@@118 T@U) ) (! (let (($generated@@119 ($generated@@64 (type $generated@@118))))
(= (type ($generated@@89 $generated@@117 $generated@@118)) $generated@@119))
 :pattern ( ($generated@@89 $generated@@117 $generated@@118))
))) (= ($generated@@1 $generated@@84) 13)) (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= (type ($generated@@90 $generated@@120 $generated@@121 $generated@@122)) $generated@@84)
 :pattern ( ($generated@@90 $generated@@120 $generated@@121 $generated@@122))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 ($generated@@64 (type $generated@@124))))
 (=> (= (type $generated@@125) $generated@@126) (= ($generated@@89 ($generated@@90 $generated@@123 $generated@@124 $generated@@125) $generated@@124) $generated@@125)))
 :weight 0
))) (and (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or (= $generated@@129 $generated@@130) (= ($generated@@89 ($generated@@90 $generated@@128 $generated@@129 $generated@@127) $generated@@130) ($generated@@89 $generated@@128 $generated@@130)))
 :weight 0
)) (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (or true (= ($generated@@89 ($generated@@90 $generated@@132 $generated@@133 $generated@@131) $generated@@134) ($generated@@89 $generated@@132 $generated@@134)))
 :weight 0
)))) (forall (($generated@@135 Int) ) (! (= (type ($generated@@81 $generated@@135)) $generated@@61)
 :pattern ( ($generated@@81 $generated@@135))
))))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (!  (=> (and (= (type $generated@@136) $generated@@2) (= (type $generated@@137) ($generated@@82 $generated@@83 $generated@@84))) ($generated@@80 $generated@@136 ($generated@@81 0) $generated@@137))
 :pattern ( ($generated@@80 $generated@@136 ($generated@@81 0) $generated@@137))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (=> (and (and (and (= (type $generated@@138) $generated@@71) (= (type $generated@@139) $generated@@71)) (= (type $generated@@140) $generated@@71)) (and ($generated@@72 $generated@@138 $generated@@139) ($generated@@72 $generated@@139 $generated@@140))) ($generated@@72 $generated@@138 $generated@@140))
 :pattern ( ($generated@@72 $generated@@138 $generated@@139) ($generated@@72 $generated@@139 $generated@@140))
 :pattern ( ($generated@@72 $generated@@138 $generated@@139) ($generated@@72 $generated@@138 $generated@@140))
)))
(assert  (and (and (forall (($generated@@147 T@U) ) (! (= (type ($generated@@141 $generated@@147)) $generated@@70)
 :pattern ( ($generated@@141 $generated@@147))
)) (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (! (= (type ($generated@@145 $generated@@148 $generated@@149)) $generated@@71)
 :pattern ( ($generated@@145 $generated@@148 $generated@@149))
))) (forall (($generated@@150 Int) ) (! (= (type ($generated@@146 $generated@@150)) $generated@@71)
 :pattern ( ($generated@@146 $generated@@150))
))))
(assert  (=> (<= 1 $generated@@67) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Int) ) (!  (=> (and (and (= (type $generated@@151) $generated@@70) (= (type $generated@@152) $generated@@71)) (or ($generated@@142 $generated@@152 $generated@@153) (not (= 1 $generated@@67)))) (and (and (=> (< 0 ($generated@@143 $generated@@152)) (=> (not (= $generated@@153 ($generated@@144 0))) ($generated@@142 ($generated@@145 $generated@@152 ($generated@@146 1)) (- $generated@@153 1)))) (=> (=> (< 0 ($generated@@143 $generated@@152)) (or (= $generated@@153 ($generated@@144 0)) ($generated@@68 $generated@@151 ($generated@@145 $generated@@152 ($generated@@146 1)) (- $generated@@153 1)))) (=> (= ($generated@@144 0) ($generated@@143 $generated@@152)) (forall (($generated@@154 T@U) ) (!  (=> (and (= (type $generated@@154) $generated@@71) ($generated@@69 $generated@@154 $generated@@152)) ($generated@@142 $generated@@154 $generated@@153))
 :pattern ( ($generated@@68 $generated@@151 $generated@@154 $generated@@153))
))))) (= ($generated@@68 ($generated@@141 $generated@@151) $generated@@152 $generated@@153)  (and (=> (< 0 ($generated@@143 $generated@@152)) (or (= $generated@@153 ($generated@@144 0)) ($generated@@68 $generated@@151 ($generated@@145 $generated@@152 ($generated@@146 1)) (- $generated@@153 1)))) (=> (= ($generated@@144 0) ($generated@@143 $generated@@152)) (exists (($generated@@155 T@U) ) (!  (and (= (type $generated@@155) $generated@@71) (and ($generated@@69 $generated@@155 $generated@@152) ($generated@@68 $generated@@151 $generated@@155 $generated@@153)))
 :pattern ( ($generated@@68 $generated@@151 $generated@@155 $generated@@153))
)))))))
 :pattern ( ($generated@@68 ($generated@@141 $generated@@151) $generated@@152 $generated@@153))
))))
(assert (forall (($generated@@156 T@U) ($generated@@157 Int) ($generated@@158 Int) ) (!  (=> (= (type $generated@@156) $generated@@71) (=> (and (and (<= 0 $generated@@157) (<= 0 $generated@@158)) (<= (+ $generated@@157 $generated@@158) ($generated@@143 $generated@@156))) (= ($generated@@145 ($generated@@145 $generated@@156 ($generated@@146 $generated@@157)) ($generated@@146 $generated@@158)) ($generated@@145 $generated@@156 ($generated@@146 (+ $generated@@157 $generated@@158))))))
 :pattern ( ($generated@@145 ($generated@@145 $generated@@156 ($generated@@146 $generated@@157)) ($generated@@146 $generated@@158)))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@165 T@T) ($generated@@166 T@T) ) (= ($generated@@1 ($generated@@161 $generated@@165 $generated@@166)) 14)) (forall (($generated@@167 T@T) ($generated@@168 T@T) ) (! (= ($generated@@162 ($generated@@161 $generated@@167 $generated@@168)) $generated@@167)
 :pattern ( ($generated@@161 $generated@@167 $generated@@168))
))) (forall (($generated@@169 T@T) ($generated@@170 T@T) ) (! (= ($generated@@163 ($generated@@161 $generated@@169 $generated@@170)) $generated@@170)
 :pattern ( ($generated@@161 $generated@@169 $generated@@170))
))) (forall (($generated@@171 T@U) ($generated@@172 T@U) ($generated@@173 T@U) ) (! (let (($generated@@174 ($generated@@163 (type $generated@@171))))
(= (type ($generated@@159 $generated@@171 $generated@@172 $generated@@173)) $generated@@174))
 :pattern ( ($generated@@159 $generated@@171 $generated@@172 $generated@@173))
))) (forall (($generated@@175 T@U) ($generated@@176 T@U) ($generated@@177 T@U) ($generated@@178 T@U) ) (! (let (($generated@@179 (type $generated@@178)))
(let (($generated@@180 (type $generated@@176)))
(= (type ($generated@@164 $generated@@175 $generated@@176 $generated@@177 $generated@@178)) ($generated@@161 $generated@@180 $generated@@179))))
 :pattern ( ($generated@@164 $generated@@175 $generated@@176 $generated@@177 $generated@@178))
))) (forall (($generated@@181 T@U) ($generated@@182 T@U) ($generated@@183 T@U) ($generated@@184 T@U) ) (! (let (($generated@@185 ($generated@@163 (type $generated@@181))))
 (=> (= (type $generated@@184) $generated@@185) (= ($generated@@159 ($generated@@164 $generated@@181 $generated@@182 $generated@@183 $generated@@184) $generated@@182 $generated@@183) $generated@@184)))
 :weight 0
))) (and (and (forall (($generated@@186 T@U) ($generated@@187 T@U) ($generated@@188 T@U) ($generated@@189 T@U) ($generated@@190 T@U) ($generated@@191 T@U) ) (!  (or (= $generated@@188 $generated@@190) (= ($generated@@159 ($generated@@164 $generated@@187 $generated@@188 $generated@@189 $generated@@186) $generated@@190 $generated@@191) ($generated@@159 $generated@@187 $generated@@190 $generated@@191)))
 :weight 0
)) (forall (($generated@@192 T@U) ($generated@@193 T@U) ($generated@@194 T@U) ($generated@@195 T@U) ($generated@@196 T@U) ($generated@@197 T@U) ) (!  (or (= $generated@@195 $generated@@197) (= ($generated@@159 ($generated@@164 $generated@@193 $generated@@194 $generated@@195 $generated@@192) $generated@@196 $generated@@197) ($generated@@159 $generated@@193 $generated@@196 $generated@@197)))
 :weight 0
))) (forall (($generated@@198 T@U) ($generated@@199 T@U) ($generated@@200 T@U) ($generated@@201 T@U) ($generated@@202 T@U) ($generated@@203 T@U) ) (!  (or true (= ($generated@@159 ($generated@@164 $generated@@199 $generated@@200 $generated@@201 $generated@@198) $generated@@202 $generated@@203) ($generated@@159 $generated@@199 $generated@@202 $generated@@203)))
 :weight 0
)))) (forall (($generated@@204 T@U) ($generated@@205 T@U) ($generated@@206 T@U) ($generated@@207 Bool) ) (! (= (type ($generated@@160 $generated@@204 $generated@@205 $generated@@206 $generated@@207)) ($generated@@161 $generated@@83 $generated@@4))
 :pattern ( ($generated@@160 $generated@@204 $generated@@205 $generated@@206 $generated@@207))
))))
(assert (forall (($generated@@208 T@U) ($generated@@209 T@U) ($generated@@210 T@U) ($generated@@211 Bool) ($generated@@212 T@U) ($generated@@213 T@U) ) (! (let (($generated@@214 ($generated@@64 (type $generated@@213))))
 (=> (and (and (and (and (= (type $generated@@208) $generated@@83) (= (type $generated@@209) ($generated@@82 $generated@@83 $generated@@84))) (= (type $generated@@210) ($generated@@63 $generated@@4))) (= (type $generated@@212) $generated@@83)) (= (type $generated@@213) ($generated@@63 $generated@@214))) (= ($generated@@0 ($generated@@159 ($generated@@160 $generated@@208 $generated@@209 $generated@@210 $generated@@211) $generated@@212 $generated@@213))  (=> (and (not (= $generated@@212 $generated@@208)) ($generated@@0 ($generated@@89 ($generated@@87 $generated@@209 $generated@@212) $generated@@210))) $generated@@211))))
 :pattern ( ($generated@@159 ($generated@@160 $generated@@208 $generated@@209 $generated@@210 $generated@@211) $generated@@212 $generated@@213))
)))
(assert  (=> (<= 1 $generated@@67) (forall (($generated@@216 T@U) ($generated@@217 Int) ) (!  (=> (and (= (type $generated@@216) $generated@@70) (exists (($generated@@218 T@U) ) (!  (and (= (type $generated@@218) $generated@@71) ($generated@@68 ($generated@@141 $generated@@216) $generated@@218 $generated@@217))
 :pattern ( ($generated@@68 ($generated@@141 $generated@@216) $generated@@218 $generated@@217))
))) ($generated@@215 ($generated@@141 $generated@@216) $generated@@217))
 :pattern ( ($generated@@215 ($generated@@141 $generated@@216) $generated@@217))
))))
(assert  (=> (<= 1 $generated@@67) (forall (($generated@@219 T@U) ($generated@@220 Int) ($generated@@221 T@U) ) (!  (=> (and (and (= (type $generated@@219) $generated@@70) (= (type $generated@@221) $generated@@71)) (= $generated@@221 ($generated@@146 0))) (not ($generated@@68 $generated@@219 $generated@@221 $generated@@220)))
 :pattern ( ($generated@@68 $generated@@219 $generated@@221 $generated@@220))
))))
(assert (forall (($generated@@222 Int) ) (! (= ($generated@@144 $generated@@222) $generated@@222)
 :pattern ( ($generated@@144 $generated@@222))
)))
(assert (forall (($generated@@224 T@U) ) (! (let (($generated@@225 (type $generated@@224)))
(= (type ($generated@@223 $generated@@224)) $generated@@225))
 :pattern ( ($generated@@223 $generated@@224))
)))
(assert (forall (($generated@@226 T@U) ) (! (= ($generated@@223 $generated@@226) $generated@@226)
 :pattern ( ($generated@@223 $generated@@226))
)))
(assert  (=> (<= 0 $generated@@67) (forall (($generated@@228 T@U) ($generated@@229 Int) ) (!  (=> (and (= (type $generated@@228) $generated@@70) (or ($generated@@227 $generated@@229) (not (= 0 $generated@@67)))) true)
 :pattern ( ($generated@@215 $generated@@228 $generated@@229))
))))
(assert  (=> (<= 0 $generated@@67) (forall (($generated@@230 T@U) ($generated@@231 Int) ) (!  (=> (and (= (type $generated@@230) $generated@@70) (or ($generated@@227 $generated@@231) (not (= 0 $generated@@67)))) (and (=> (not (= $generated@@231 ($generated@@144 0))) ($generated@@227 (- $generated@@231 1))) (= ($generated@@215 ($generated@@141 $generated@@230) $generated@@231)  (or (= $generated@@231 ($generated@@144 0)) ($generated@@215 $generated@@230 (- $generated@@231 1))))))
 :pattern ( ($generated@@215 ($generated@@141 $generated@@230) $generated@@231))
))))
(assert  (=> (<= 1 $generated@@67) (forall (($generated@@232 T@U) ($generated@@233 Int) ) (!  (=> (and (= (type $generated@@232) $generated@@70) ($generated@@215 ($generated@@141 $generated@@232) $generated@@233)) (exists (($generated@@234 T@U) ) (!  (and (= (type $generated@@234) $generated@@71) ($generated@@68 ($generated@@141 $generated@@232) $generated@@234 $generated@@233))
 :pattern ( ($generated@@68 ($generated@@141 $generated@@232) $generated@@234 $generated@@233))
)))
 :pattern ( ($generated@@215 ($generated@@141 $generated@@232) $generated@@233))
))))
(assert  (and (and (forall (($generated@@239 T@T) ) (= ($generated@@1 ($generated@@237 $generated@@239)) 15)) (forall (($generated@@240 T@T) ) (! (= ($generated@@238 ($generated@@237 $generated@@240)) $generated@@240)
 :pattern ( ($generated@@237 $generated@@240))
))) (forall (($generated@@241 T@T) ) (! (= (type ($generated@@235 $generated@@241)) ($generated@@237 $generated@@241))
 :pattern ( ($generated@@235 $generated@@241))
))))
(assert (forall (($generated@@242 T@T) ) (! (= ($generated@@236 ($generated@@235 $generated@@242)) 0)
 :pattern ( ($generated@@235 $generated@@242))
)))
(assert  (=> (<= 1 $generated@@67) (forall (($generated@@243 T@U) ($generated@@244 T@U) ($generated@@245 Int) ) (!  (=> (and (and (= (type $generated@@243) $generated@@70) (= (type $generated@@244) $generated@@71)) (or ($generated@@142 ($generated@@223 $generated@@244) $generated@@245) (not (= 1 $generated@@67)))) (and (and (=> (< 0 ($generated@@143 $generated@@244)) (=> (not (= $generated@@245 ($generated@@144 0))) ($generated@@142 ($generated@@145 $generated@@244 ($generated@@146 1)) (- $generated@@245 1)))) (=> (=> (< 0 ($generated@@143 $generated@@244)) (or (= $generated@@245 ($generated@@144 0)) ($generated@@68 ($generated@@141 $generated@@243) ($generated@@145 $generated@@244 ($generated@@146 1)) (- $generated@@245 1)))) (=> (= ($generated@@144 0) ($generated@@143 $generated@@244)) (forall (($generated@@246 T@U) ) (!  (=> (and (= (type $generated@@246) $generated@@71) ($generated@@69 $generated@@246 $generated@@244)) ($generated@@142 $generated@@246 $generated@@245))
 :pattern ( ($generated@@68 ($generated@@141 $generated@@243) $generated@@246 $generated@@245))
))))) (= ($generated@@68 ($generated@@141 $generated@@243) ($generated@@223 $generated@@244) $generated@@245)  (and (=> (< 0 ($generated@@143 $generated@@244)) (or (= $generated@@245 ($generated@@144 0)) ($generated@@68 ($generated@@141 $generated@@243) ($generated@@145 $generated@@244 ($generated@@146 1)) (- $generated@@245 1)))) (=> (= ($generated@@144 0) ($generated@@143 $generated@@244)) (exists (($generated@@247 T@U) ) (!  (and (= (type $generated@@247) $generated@@71) (and ($generated@@69 $generated@@247 $generated@@244) ($generated@@68 ($generated@@141 $generated@@243) $generated@@247 $generated@@245)))
 :pattern ( ($generated@@68 ($generated@@141 $generated@@243) $generated@@247 $generated@@245))
)))))))
 :weight 3
 :pattern ( ($generated@@68 ($generated@@141 $generated@@243) ($generated@@223 $generated@@244) $generated@@245))
))))
(assert (forall (($generated@@248 T@U) ($generated@@249 T@U) ($generated@@250 Int) ) (!  (=> (and (= (type $generated@@248) $generated@@70) (= (type $generated@@249) $generated@@71)) (= ($generated@@68 ($generated@@141 $generated@@248) $generated@@249 $generated@@250) ($generated@@68 $generated@@248 $generated@@249 $generated@@250)))
 :pattern ( ($generated@@68 ($generated@@141 $generated@@248) $generated@@249 $generated@@250))
)))
(assert (forall (($generated@@253 T@U) ) (! (= (type ($generated@@252 $generated@@253)) $generated@@71)
 :pattern ( ($generated@@252 $generated@@253))
)))
(assert (forall (($generated@@254 T@U) ($generated@@255 T@U) ($generated@@256 T@U) ) (!  (=> (and (= (type $generated@@255) $generated@@61) (= (type $generated@@256) ($generated@@82 $generated@@83 $generated@@84))) (= ($generated@@251 ($generated@@252 $generated@@254) $generated@@255 $generated@@256) ($generated@@80 $generated@@254 $generated@@255 $generated@@256)))
 :pattern ( ($generated@@251 ($generated@@252 $generated@@254) $generated@@255 $generated@@256))
)))
(assert  (and (and (and (and (forall (($generated@@262 T@T) ($generated@@263 T@T) ) (= ($generated@@1 ($generated@@259 $generated@@262 $generated@@263)) 16)) (forall (($generated@@264 T@T) ($generated@@265 T@T) ) (! (= ($generated@@260 ($generated@@259 $generated@@264 $generated@@265)) $generated@@264)
 :pattern ( ($generated@@259 $generated@@264 $generated@@265))
))) (forall (($generated@@266 T@T) ($generated@@267 T@T) ) (! (= ($generated@@261 ($generated@@259 $generated@@266 $generated@@267)) $generated@@267)
 :pattern ( ($generated@@259 $generated@@266 $generated@@267))
))) (forall (($generated@@268 T@U) ) (! (let (($generated@@269 ($generated@@260 (type $generated@@268))))
(= (type ($generated@@257 $generated@@268)) ($generated@@82 $generated@@269 $generated@@4)))
 :pattern ( ($generated@@257 $generated@@268))
))) (forall (($generated@@270 T@T) ($generated@@271 T@T) ) (! (= (type ($generated@@258 $generated@@270 $generated@@271)) ($generated@@259 $generated@@270 $generated@@271))
 :pattern ( ($generated@@258 $generated@@270 $generated@@271))
))))
(assert (forall (($generated@@272 T@U) ($generated@@273 T@T) ) (! (let (($generated@@274 (type $generated@@272)))
 (not ($generated@@0 ($generated@@87 ($generated@@257 ($generated@@258 $generated@@274 $generated@@273)) $generated@@272))))
 :pattern ( (let (($generated@@274 (type $generated@@272)))
($generated@@87 ($generated@@257 ($generated@@258 $generated@@274 $generated@@273)) $generated@@272)))
)))
(assert  (and (and (and (and (forall (($generated@@280 T@T) ($generated@@281 T@T) ) (= ($generated@@1 ($generated@@277 $generated@@280 $generated@@281)) 17)) (forall (($generated@@282 T@T) ($generated@@283 T@T) ) (! (= ($generated@@278 ($generated@@277 $generated@@282 $generated@@283)) $generated@@282)
 :pattern ( ($generated@@277 $generated@@282 $generated@@283))
))) (forall (($generated@@284 T@T) ($generated@@285 T@T) ) (! (= ($generated@@279 ($generated@@277 $generated@@284 $generated@@285)) $generated@@285)
 :pattern ( ($generated@@277 $generated@@284 $generated@@285))
))) (forall (($generated@@286 T@U) ) (! (let (($generated@@287 ($generated@@278 (type $generated@@286))))
(= (type ($generated@@275 $generated@@286)) ($generated@@82 $generated@@287 $generated@@4)))
 :pattern ( ($generated@@275 $generated@@286))
))) (forall (($generated@@288 T@T) ($generated@@289 T@T) ) (! (= (type ($generated@@276 $generated@@288 $generated@@289)) ($generated@@277 $generated@@288 $generated@@289))
 :pattern ( ($generated@@276 $generated@@288 $generated@@289))
))))
(assert (forall (($generated@@290 T@U) ($generated@@291 T@T) ) (! (let (($generated@@292 (type $generated@@290)))
 (not ($generated@@0 ($generated@@87 ($generated@@275 ($generated@@276 $generated@@292 $generated@@291)) $generated@@290))))
 :pattern ( (let (($generated@@292 (type $generated@@290)))
($generated@@87 ($generated@@275 ($generated@@276 $generated@@292 $generated@@291)) $generated@@290)))
)))
(assert (forall (($generated@@294 T@U) ($generated@@295 T@U) ) (!  (=> (and (and (= (type $generated@@294) $generated@@71) (= (type $generated@@295) $generated@@71)) (and ($generated@@293 $generated@@295) (<= ($generated@@143 $generated@@295) ($generated@@143 $generated@@294)))) (and (= ($generated@@293 ($generated@@145 $generated@@294 $generated@@295)) ($generated@@293 $generated@@294)) (= ($generated@@143 ($generated@@145 $generated@@294 $generated@@295)) (- ($generated@@143 $generated@@294) ($generated@@143 $generated@@295)))))
 :pattern ( ($generated@@145 $generated@@294 $generated@@295))
)))
(assert (forall (($generated@@296 Int) ) (!  (=> (<= 0 $generated@@296) (and ($generated@@293 ($generated@@146 $generated@@296)) (= ($generated@@143 ($generated@@146 $generated@@296)) $generated@@296)))
 :pattern ( ($generated@@146 $generated@@296))
)))
(assert (forall (($generated@@297 T@U) ) (! (let (($generated@@298 ($generated@@261 (type $generated@@297))))
(let (($generated@@299 ($generated@@260 (type $generated@@297))))
 (=> (= (type $generated@@297) ($generated@@259 $generated@@299 $generated@@298)) (or (= $generated@@297 ($generated@@258 $generated@@299 $generated@@298)) (exists (($generated@@300 T@U) ) (!  (and (= (type $generated@@300) $generated@@299) ($generated@@0 ($generated@@87 ($generated@@257 $generated@@297) $generated@@300)))
 :no-pattern (type $generated@@300)
 :no-pattern ($generated $generated@@300)
 :no-pattern ($generated@@0 $generated@@300)
))))))
 :pattern ( ($generated@@257 $generated@@297))
)))
(assert (forall (($generated@@301 T@U) ) (! (let (($generated@@302 ($generated@@279 (type $generated@@301))))
(let (($generated@@303 ($generated@@278 (type $generated@@301))))
 (=> (= (type $generated@@301) ($generated@@277 $generated@@303 $generated@@302)) (or (= $generated@@301 ($generated@@276 $generated@@303 $generated@@302)) (exists (($generated@@304 T@U) ) (!  (and (= (type $generated@@304) $generated@@303) ($generated@@0 ($generated@@87 ($generated@@275 $generated@@301) $generated@@304)))
 :no-pattern (type $generated@@304)
 :no-pattern ($generated $generated@@304)
 :no-pattern ($generated@@0 $generated@@304)
))))))
 :pattern ( ($generated@@275 $generated@@301))
)))
(assert  (=> (<= 1 $generated@@67) (forall (($generated@@305 T@U) ($generated@@306 T@U) ($generated@@307 Int) ) (!  (=> (and (and (= (type $generated@@305) $generated@@70) (= (type $generated@@306) $generated@@71)) (or ($generated@@142 ($generated@@223 $generated@@306) ($generated@@144 $generated@@307)) (not (= 1 $generated@@67)))) (and (and (=> (< 0 ($generated@@143 $generated@@306)) (=> (not (= $generated@@307 ($generated@@144 0))) ($generated@@142 ($generated@@145 $generated@@306 ($generated@@146 1)) (- $generated@@307 1)))) (=> (=> (< 0 ($generated@@143 $generated@@306)) (or (= $generated@@307 ($generated@@144 0)) ($generated@@68 ($generated@@141 $generated@@305) ($generated@@145 $generated@@306 ($generated@@146 1)) (- $generated@@307 1)))) (=> (= ($generated@@144 0) ($generated@@143 $generated@@306)) (forall (($generated@@308 T@U) ) (!  (=> (and (= (type $generated@@308) $generated@@71) ($generated@@69 $generated@@308 $generated@@306)) ($generated@@142 $generated@@308 $generated@@307))
 :pattern ( ($generated@@68 ($generated@@141 $generated@@305) $generated@@308 $generated@@307))
))))) (= ($generated@@68 ($generated@@141 $generated@@305) ($generated@@223 $generated@@306) ($generated@@144 $generated@@307))  (and (=> (< 0 ($generated@@143 $generated@@306)) (or (= $generated@@307 ($generated@@144 0)) ($generated@@68 ($generated@@141 $generated@@305) ($generated@@145 $generated@@306 ($generated@@146 1)) (- $generated@@307 1)))) (=> (= ($generated@@144 0) ($generated@@143 $generated@@306)) (exists (($generated@@309 T@U) ) (!  (and (= (type $generated@@309) $generated@@71) (and ($generated@@69 $generated@@309 $generated@@306) ($generated@@68 ($generated@@141 $generated@@305) $generated@@309 $generated@@307)))
 :pattern ( ($generated@@68 ($generated@@141 $generated@@305) $generated@@309 $generated@@307))
)))))))
 :weight 3
 :pattern ( ($generated@@68 ($generated@@141 $generated@@305) ($generated@@223 $generated@@306) ($generated@@144 $generated@@307)))
))))
(assert (forall (($generated@@310 T@U) ($generated@@311 T@U) ) (!  (=> (and (= (type $generated@@310) $generated@@71) (= (type $generated@@311) $generated@@71)) (or (or ($generated@@72 $generated@@310 $generated@@311) (= $generated@@310 $generated@@311)) ($generated@@72 $generated@@311 $generated@@310)))
 :pattern ( ($generated@@72 $generated@@310 $generated@@311) ($generated@@72 $generated@@311 $generated@@310))
)))
(assert (forall (($generated@@313 T@U) ) (! (= (type ($generated@@312 $generated@@313)) $generated@@61)
 :pattern ( ($generated@@312 $generated@@313))
)))
(assert (forall (($generated@@314 T@U) ($generated@@315 T@U) ($generated@@316 T@U) ) (!  (=> (and (and (= (type $generated@@314) ($generated@@82 $generated@@71 $generated@@4)) (= (type $generated@@315) $generated@@61)) (= (type $generated@@316) ($generated@@82 $generated@@83 $generated@@84))) (= ($generated@@80 $generated@@314 ($generated@@312 $generated@@315) $generated@@316) (forall (($generated@@317 T@U) ) (!  (=> (and (= (type $generated@@317) $generated@@71) ($generated@@0 ($generated@@87 $generated@@314 $generated@@317))) ($generated@@251 $generated@@317 $generated@@315 $generated@@316))
 :pattern ( ($generated@@87 $generated@@314 $generated@@317))
))))
 :pattern ( ($generated@@80 $generated@@314 ($generated@@312 $generated@@315) $generated@@316))
)))
(assert (forall (($generated@@319 T@U) ) (! (= (type ($generated@@318 $generated@@319)) $generated@@61)
 :pattern ( ($generated@@318 $generated@@319))
)))
(assert (forall (($generated@@320 T@U) ($generated@@321 T@U) ($generated@@322 T@U) ) (!  (=> (and (and (= (type $generated@@320) ($generated@@82 $generated@@71 $generated@@4)) (= (type $generated@@321) $generated@@61)) (= (type $generated@@322) ($generated@@82 $generated@@83 $generated@@84))) (= ($generated@@80 $generated@@320 ($generated@@318 $generated@@321) $generated@@322) (forall (($generated@@323 T@U) ) (!  (=> (and (= (type $generated@@323) $generated@@71) ($generated@@0 ($generated@@87 $generated@@320 $generated@@323))) ($generated@@251 $generated@@323 $generated@@321 $generated@@322))
 :pattern ( ($generated@@87 $generated@@320 $generated@@323))
))))
 :pattern ( ($generated@@80 $generated@@320 ($generated@@318 $generated@@321) $generated@@322))
)))
(assert  (and (forall (($generated@@326 T@U) ($generated@@327 T@U) ) (! (= (type ($generated@@324 $generated@@326 $generated@@327)) $generated@@61)
 :pattern ( ($generated@@324 $generated@@326 $generated@@327))
)) (forall (($generated@@328 T@U) ) (! (let (($generated@@329 ($generated@@261 (type $generated@@328))))
(let (($generated@@330 ($generated@@260 (type $generated@@328))))
(= (type ($generated@@325 $generated@@328)) ($generated@@82 $generated@@330 $generated@@329))))
 :pattern ( ($generated@@325 $generated@@328))
))))
(assert (forall (($generated@@331 T@U) ($generated@@332 T@U) ($generated@@333 T@U) ($generated@@334 T@U) ) (!  (=> (and (and (and (= (type $generated@@331) ($generated@@259 $generated@@71 $generated@@71)) (= (type $generated@@332) $generated@@61)) (= (type $generated@@333) $generated@@61)) (= (type $generated@@334) ($generated@@82 $generated@@83 $generated@@84))) (= ($generated@@80 $generated@@331 ($generated@@324 $generated@@332 $generated@@333) $generated@@334) (forall (($generated@@335 T@U) ) (!  (=> (and (= (type $generated@@335) $generated@@71) ($generated@@0 ($generated@@87 ($generated@@257 $generated@@331) $generated@@335))) (and ($generated@@251 ($generated@@87 ($generated@@325 $generated@@331) $generated@@335) $generated@@333 $generated@@334) ($generated@@251 $generated@@335 $generated@@332 $generated@@334)))
 :pattern ( ($generated@@87 ($generated@@325 $generated@@331) $generated@@335))
 :pattern ( ($generated@@87 ($generated@@257 $generated@@331) $generated@@335))
))))
 :pattern ( ($generated@@80 $generated@@331 ($generated@@324 $generated@@332 $generated@@333) $generated@@334))
)))
(assert  (and (forall (($generated@@338 T@U) ($generated@@339 T@U) ) (! (= (type ($generated@@336 $generated@@338 $generated@@339)) $generated@@61)
 :pattern ( ($generated@@336 $generated@@338 $generated@@339))
)) (forall (($generated@@340 T@U) ) (! (let (($generated@@341 ($generated@@279 (type $generated@@340))))
(let (($generated@@342 ($generated@@278 (type $generated@@340))))
(= (type ($generated@@337 $generated@@340)) ($generated@@82 $generated@@342 $generated@@341))))
 :pattern ( ($generated@@337 $generated@@340))
))))
(assert (forall (($generated@@343 T@U) ($generated@@344 T@U) ($generated@@345 T@U) ($generated@@346 T@U) ) (!  (=> (and (and (and (= (type $generated@@343) ($generated@@277 $generated@@71 $generated@@71)) (= (type $generated@@344) $generated@@61)) (= (type $generated@@345) $generated@@61)) (= (type $generated@@346) ($generated@@82 $generated@@83 $generated@@84))) (= ($generated@@80 $generated@@343 ($generated@@336 $generated@@344 $generated@@345) $generated@@346) (forall (($generated@@347 T@U) ) (!  (=> (and (= (type $generated@@347) $generated@@71) ($generated@@0 ($generated@@87 ($generated@@275 $generated@@343) $generated@@347))) (and ($generated@@251 ($generated@@87 ($generated@@337 $generated@@343) $generated@@347) $generated@@345 $generated@@346) ($generated@@251 $generated@@347 $generated@@344 $generated@@346)))
 :pattern ( ($generated@@87 ($generated@@337 $generated@@343) $generated@@347))
 :pattern ( ($generated@@87 ($generated@@275 $generated@@343) $generated@@347))
))))
 :pattern ( ($generated@@80 $generated@@343 ($generated@@336 $generated@@344 $generated@@345) $generated@@346))
)))
(assert (forall (($generated@@348 T@U) ($generated@@349 T@U) ) (!  (=> (and (= (type $generated@@348) $generated@@71) (= (type $generated@@349) $generated@@71)) (= ($generated@@69 $generated@@348 $generated@@349) ($generated@@72 $generated@@348 $generated@@349)))
 :pattern ( ($generated@@69 $generated@@348 $generated@@349))
)))
(assert  (and (forall (($generated@@352 T@U) ) (! (= (type ($generated@@350 $generated@@352)) $generated@@70)
 :pattern ( ($generated@@350 $generated@@352))
)) (= (type $generated@@351) $generated@@70)))
(assert (forall (($generated@@353 T@U) ($generated@@354 Int) ) (!  (=> (= (type $generated@@353) $generated@@70) (= ($generated@@215 $generated@@353 $generated@@354) ($generated@@215 $generated@@351 $generated@@354)))
 :pattern ( ($generated@@215 ($generated@@350 $generated@@353) $generated@@354))
)))
(assert  (=> (<= 1 $generated@@67) (forall (($generated@@355 T@U) ($generated@@356 T@U) ($generated@@357 Int) ) (!  (=> (and (and (= (type $generated@@355) $generated@@70) (= (type $generated@@356) $generated@@71)) (or ($generated@@142 $generated@@356 $generated@@357) (not (= 1 $generated@@67)))) true)
 :pattern ( ($generated@@68 $generated@@355 $generated@@356 $generated@@357))
))))
(assert (forall (($generated@@359 T@T) ) (! (= (type ($generated@@358 $generated@@359)) ($generated@@82 $generated@@359 $generated@@4))
 :pattern ( ($generated@@358 $generated@@359))
)))
(assert (forall (($generated@@360 T@U) ) (! (let (($generated@@361 ($generated@@279 (type $generated@@360))))
(let (($generated@@362 ($generated@@278 (type $generated@@360))))
 (=> (= (type $generated@@360) ($generated@@277 $generated@@362 $generated@@361)) (= (= $generated@@360 ($generated@@276 $generated@@362 $generated@@361)) (= ($generated@@275 $generated@@360) ($generated@@358 $generated@@362))))))
 :pattern ( ($generated@@275 $generated@@360))
)))
(assert (forall (($generated@@363 T@U) ($generated@@364 Int) ) (!  (=> (= (type $generated@@363) $generated@@70) (= ($generated@@215 ($generated@@141 $generated@@363) $generated@@364) ($generated@@215 $generated@@363 $generated@@364)))
 :pattern ( ($generated@@215 ($generated@@141 $generated@@363) $generated@@364))
)))
(assert (forall (($generated@@365 T@U) ) (!  (=> (= (type $generated@@365) $generated@@71) (<= 0 ($generated@@143 $generated@@365)))
 :pattern ( ($generated@@143 $generated@@365))
)))
(assert (forall (($generated@@366 T@U) ) (! (let (($generated@@367 ($generated@@238 (type $generated@@366))))
 (=> (= (type $generated@@366) ($generated@@237 $generated@@367)) (<= 0 ($generated@@236 $generated@@366))))
 :pattern ( ($generated@@236 $generated@@366))
)))
(assert (forall (($generated@@369 T@U) ) (! (= (type ($generated@@368 $generated@@369)) $generated@@61)
 :pattern ( ($generated@@368 $generated@@369))
)))
(assert (forall (($generated@@370 T@U) ($generated@@371 T@U) ) (!  (=> (and (= (type $generated@@370) $generated@@61) (= (type $generated@@371) $generated@@61)) (= ($generated@@368 ($generated@@324 $generated@@370 $generated@@371)) $generated@@370))
 :pattern ( ($generated@@324 $generated@@370 $generated@@371))
)))
(assert (forall (($generated@@373 T@U) ) (! (= (type ($generated@@372 $generated@@373)) $generated@@61)
 :pattern ( ($generated@@372 $generated@@373))
)))
(assert (forall (($generated@@374 T@U) ($generated@@375 T@U) ) (!  (=> (and (= (type $generated@@374) $generated@@61) (= (type $generated@@375) $generated@@61)) (= ($generated@@372 ($generated@@324 $generated@@374 $generated@@375)) $generated@@375))
 :pattern ( ($generated@@324 $generated@@374 $generated@@375))
)))
(assert (forall (($generated@@376 T@U) ($generated@@377 T@U) ) (!  (=> (and (= (type $generated@@376) $generated@@61) (= (type $generated@@377) $generated@@61)) (= ($generated@@78 ($generated@@324 $generated@@376 $generated@@377)) $generated@@58))
 :pattern ( ($generated@@324 $generated@@376 $generated@@377))
)))
(assert (forall (($generated@@379 T@U) ) (! (= (type ($generated@@378 $generated@@379)) $generated@@61)
 :pattern ( ($generated@@378 $generated@@379))
)))
(assert (forall (($generated@@380 T@U) ($generated@@381 T@U) ) (!  (=> (and (= (type $generated@@380) $generated@@61) (= (type $generated@@381) $generated@@61)) (= ($generated@@378 ($generated@@336 $generated@@380 $generated@@381)) $generated@@380))
 :pattern ( ($generated@@336 $generated@@380 $generated@@381))
)))
(assert (forall (($generated@@383 T@U) ) (! (= (type ($generated@@382 $generated@@383)) $generated@@61)
 :pattern ( ($generated@@382 $generated@@383))
)))
(assert (forall (($generated@@384 T@U) ($generated@@385 T@U) ) (!  (=> (and (= (type $generated@@384) $generated@@61) (= (type $generated@@385) $generated@@61)) (= ($generated@@382 ($generated@@336 $generated@@384 $generated@@385)) $generated@@385))
 :pattern ( ($generated@@336 $generated@@384 $generated@@385))
)))
(assert (forall (($generated@@386 T@U) ($generated@@387 T@U) ) (!  (=> (and (= (type $generated@@386) $generated@@61) (= (type $generated@@387) $generated@@61)) (= ($generated@@78 ($generated@@336 $generated@@386 $generated@@387)) $generated@@59))
 :pattern ( ($generated@@336 $generated@@386 $generated@@387))
)))
(assert  (and (forall (($generated@@390 T@U) ) (! (= (type ($generated@@388 $generated@@390)) $generated@@61)
 :pattern ( ($generated@@388 $generated@@390))
)) (forall (($generated@@391 T@U) ($generated@@392 Int) ) (! (let (($generated@@393 ($generated@@238 (type $generated@@391))))
(= (type ($generated@@389 $generated@@391 $generated@@392)) $generated@@393))
 :pattern ( ($generated@@389 $generated@@391 $generated@@392))
))))
(assert (forall (($generated@@394 T@U) ($generated@@395 T@U) ($generated@@396 T@U) ) (!  (=> (and (and (= (type $generated@@394) ($generated@@237 $generated@@71)) (= (type $generated@@395) $generated@@61)) (= (type $generated@@396) ($generated@@82 $generated@@83 $generated@@84))) (= ($generated@@80 $generated@@394 ($generated@@388 $generated@@395) $generated@@396) (forall (($generated@@397 Int) ) (!  (=> (and (<= 0 $generated@@397) (< $generated@@397 ($generated@@236 $generated@@394))) ($generated@@251 ($generated@@389 $generated@@394 $generated@@397) $generated@@395 $generated@@396))
 :pattern ( ($generated@@389 $generated@@394 $generated@@397))
))))
 :pattern ( ($generated@@80 $generated@@394 ($generated@@388 $generated@@395) $generated@@396))
)))
(assert (forall (($generated@@399 Int) ) (! (= ($generated@@398 ($generated@@81 $generated@@399)) $generated@@399)
 :pattern ( ($generated@@81 $generated@@399))
)))
(assert (forall (($generated@@401 T@U) ) (! (= (type ($generated@@400 $generated@@401)) $generated@@61)
 :pattern ( ($generated@@400 $generated@@401))
)))
(assert (forall (($generated@@402 T@U) ) (!  (=> (= (type $generated@@402) $generated@@61) (= ($generated@@400 ($generated@@312 $generated@@402)) $generated@@402))
 :pattern ( ($generated@@312 $generated@@402))
)))
(assert (forall (($generated@@403 T@U) ) (!  (=> (= (type $generated@@403) $generated@@61) (= ($generated@@78 ($generated@@312 $generated@@403)) $generated@@54))
 :pattern ( ($generated@@312 $generated@@403))
)))
(assert (forall (($generated@@405 T@U) ) (! (= (type ($generated@@404 $generated@@405)) $generated@@61)
 :pattern ( ($generated@@404 $generated@@405))
)))
(assert (forall (($generated@@406 T@U) ) (!  (=> (= (type $generated@@406) $generated@@61) (= ($generated@@404 ($generated@@318 $generated@@406)) $generated@@406))
 :pattern ( ($generated@@318 $generated@@406))
)))
(assert (forall (($generated@@407 T@U) ) (!  (=> (= (type $generated@@407) $generated@@61) (= ($generated@@78 ($generated@@318 $generated@@407)) $generated@@55))
 :pattern ( ($generated@@318 $generated@@407))
)))
(assert  (and (forall (($generated@@410 T@U) ) (! (= (type ($generated@@408 $generated@@410)) $generated@@61)
 :pattern ( ($generated@@408 $generated@@410))
)) (forall (($generated@@411 T@U) ) (! (= (type ($generated@@409 $generated@@411)) $generated@@61)
 :pattern ( ($generated@@409 $generated@@411))
))))
(assert (forall (($generated@@412 T@U) ) (!  (=> (= (type $generated@@412) $generated@@61) (= ($generated@@409 ($generated@@408 $generated@@412)) $generated@@412))
 :pattern ( ($generated@@408 $generated@@412))
)))
(assert (forall (($generated@@413 T@U) ) (!  (=> (= (type $generated@@413) $generated@@61) (= ($generated@@78 ($generated@@408 $generated@@413)) $generated@@56))
 :pattern ( ($generated@@408 $generated@@413))
)))
(assert (forall (($generated@@415 T@U) ) (! (= (type ($generated@@414 $generated@@415)) $generated@@61)
 :pattern ( ($generated@@414 $generated@@415))
)))
(assert (forall (($generated@@416 T@U) ) (!  (=> (= (type $generated@@416) $generated@@61) (= ($generated@@414 ($generated@@388 $generated@@416)) $generated@@416))
 :pattern ( ($generated@@388 $generated@@416))
)))
(assert (forall (($generated@@417 T@U) ) (!  (=> (= (type $generated@@417) $generated@@61) (= ($generated@@78 ($generated@@388 $generated@@417)) $generated@@57))
 :pattern ( ($generated@@388 $generated@@417))
)))
(assert (forall (($generated@@419 T@T) ($generated@@420 T@U) ) (! (= (type ($generated@@418 $generated@@419 $generated@@420)) $generated@@419)
 :pattern ( ($generated@@418 $generated@@419 $generated@@420))
)))
(assert (forall (($generated@@421 T@U) ) (! (let (($generated@@422 (type $generated@@421)))
(= ($generated@@418 $generated@@422 ($generated@@252 $generated@@421)) $generated@@421))
 :pattern ( ($generated@@252 $generated@@421))
)))
(assert (forall (($generated@@423 T@U) ($generated@@424 T@U) ) (!  (=> (and (= (type $generated@@423) $generated@@71) (= (type $generated@@424) $generated@@71)) (and (and (and (=> ($generated@@72 $generated@@423 $generated@@424) (not (= $generated@@423 $generated@@424))) (=> (and ($generated@@293 $generated@@423) (not ($generated@@293 $generated@@424))) ($generated@@72 $generated@@423 $generated@@424))) (=> (and ($generated@@293 $generated@@423) ($generated@@293 $generated@@424)) (= ($generated@@72 $generated@@423 $generated@@424) (< ($generated@@143 $generated@@423) ($generated@@143 $generated@@424))))) (=> (and ($generated@@72 $generated@@423 $generated@@424) ($generated@@293 $generated@@424)) ($generated@@293 $generated@@423))))
 :pattern ( ($generated@@72 $generated@@423 $generated@@424))
)))
(assert (forall (($generated@@425 T@U) ) (! (let (($generated@@426 (type $generated@@425)))
 (not ($generated@@0 ($generated@@87 ($generated@@358 $generated@@426) $generated@@425))))
 :pattern ( (let (($generated@@426 (type $generated@@425)))
($generated@@87 ($generated@@358 $generated@@426) $generated@@425)))
)))
(assert (forall (($generated@@427 T@U) ) (!  (=> (and (= (type $generated@@427) $generated@@71) ($generated@@293 $generated@@427)) (= $generated@@427 ($generated@@146 ($generated@@143 $generated@@427))))
 :pattern ( ($generated@@143 $generated@@427))
 :pattern ( ($generated@@293 $generated@@427))
)))
(assert (forall (($generated@@428 T@U) ($generated@@429 T@U) ($generated@@430 T@U) ) (!  (=> (and (and (= (type $generated@@428) ($generated@@82 $generated@@71 $generated@@2)) (= (type $generated@@429) $generated@@61)) (= (type $generated@@430) ($generated@@82 $generated@@83 $generated@@84))) (= ($generated@@80 $generated@@428 ($generated@@408 $generated@@429) $generated@@430) (forall (($generated@@431 T@U) ) (!  (=> (and (= (type $generated@@431) $generated@@71) (< 0 ($generated ($generated@@87 $generated@@428 $generated@@431)))) ($generated@@251 $generated@@431 $generated@@429 $generated@@430))
 :pattern ( ($generated@@87 $generated@@428 $generated@@431))
))))
 :pattern ( ($generated@@80 $generated@@428 ($generated@@408 $generated@@429) $generated@@430))
)))
(assert (forall (($generated@@432 T@U) ($generated@@433 T@U) ) (!  (=> (and (and (= (type $generated@@432) $generated@@71) (= (type $generated@@433) $generated@@71)) (and ($generated@@293 $generated@@433) (<= ($generated@@143 $generated@@433) ($generated@@143 $generated@@432)))) (or (and (= $generated@@433 ($generated@@146 0)) (= ($generated@@145 $generated@@432 $generated@@433) $generated@@432)) (and (not (= $generated@@433 ($generated@@146 0))) ($generated@@72 ($generated@@145 $generated@@432 $generated@@433) $generated@@432))))
 :pattern ( ($generated@@145 $generated@@432 $generated@@433))
)))
(assert (forall (($generated@@434 Int) ) (! (= ($generated@@252 ($generated@@8 ($generated@@144 $generated@@434))) ($generated@@223 ($generated@@252 ($generated@@8 $generated@@434))))
 :pattern ( ($generated@@252 ($generated@@8 ($generated@@144 $generated@@434))))
)))
(assert (forall (($generated@@435 T@U) ) (! (= ($generated@@252 ($generated@@223 $generated@@435)) ($generated@@223 ($generated@@252 $generated@@435)))
 :pattern ( ($generated@@252 ($generated@@223 $generated@@435)))
)))
(assert (forall (($generated@@436 T@U) ) (! (let (($generated@@437 ($generated@@238 (type $generated@@436))))
 (=> (and (= (type $generated@@436) ($generated@@237 $generated@@437)) (= ($generated@@236 $generated@@436) 0)) (= $generated@@436 ($generated@@235 $generated@@437))))
 :pattern ( ($generated@@236 $generated@@436))
)))
(assert (forall (($generated@@438 T@U) ($generated@@439 T@U) ) (!  (=> (and (= (type $generated@@438) ($generated@@82 $generated@@83 $generated@@84)) (= (type $generated@@439) $generated@@2)) ($generated@@80 $generated@@439 $generated@@46 $generated@@438))
 :pattern ( ($generated@@80 $generated@@439 $generated@@46 $generated@@438))
)))
(assert (forall (($generated@@440 T@U) ($generated@@441 T@U) ) (!  (=> (and (= (type $generated@@440) ($generated@@82 $generated@@83 $generated@@84)) (= (type $generated@@441) $generated@@3)) ($generated@@80 $generated@@441 $generated@@47 $generated@@440))
 :pattern ( ($generated@@80 $generated@@441 $generated@@47 $generated@@440))
)))
(assert (forall (($generated@@442 T@U) ($generated@@443 T@U) ) (!  (=> (and (= (type $generated@@442) ($generated@@82 $generated@@83 $generated@@84)) (= (type $generated@@443) $generated@@4)) ($generated@@80 $generated@@443 $generated@@44 $generated@@442))
 :pattern ( ($generated@@80 $generated@@443 $generated@@44 $generated@@442))
)))
(assert (= ($generated@@1 $generated@@444) 18))
(assert (forall (($generated@@445 T@U) ($generated@@446 T@U) ) (!  (=> (and (= (type $generated@@445) ($generated@@82 $generated@@83 $generated@@84)) (= (type $generated@@446) $generated@@444)) ($generated@@80 $generated@@446 $generated@@45 $generated@@445))
 :pattern ( ($generated@@80 $generated@@446 $generated@@45 $generated@@445))
)))
(assert (forall (($generated@@447 T@U) ($generated@@448 T@U) ) (!  (=> (and (= (type $generated@@447) ($generated@@82 $generated@@83 $generated@@84)) (= (type $generated@@448) $generated@@71)) ($generated@@80 $generated@@448 $generated@@48 $generated@@447))
 :pattern ( ($generated@@80 $generated@@448 $generated@@48 $generated@@447))
)))
(assert (forall (($generated@@449 T@U) ($generated@@450 T@U) ($generated@@451 Int) ) (!  (=> (and (= (type $generated@@449) $generated@@70) (= (type $generated@@450) $generated@@71)) (= ($generated@@68 $generated@@449 $generated@@450 $generated@@451) ($generated@@68 $generated@@351 $generated@@450 $generated@@451)))
 :pattern ( ($generated@@68 ($generated@@350 $generated@@449) $generated@@450 $generated@@451))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@452 () Int)
(declare-fun $generated@@453 (T@U) Bool)
(declare-fun $generated@@454 () T@U)
(declare-fun $generated@@455 (T@U) Bool)
(declare-fun $generated@@456 () T@U)
(declare-fun $generated@@457 () T@U)
(declare-fun $generated@@458 () T@U)
(declare-fun $generated@@459 () T@U)
(declare-fun $generated@@460 () T@U)
(declare-fun $generated@@461 () T@U)
(assert  (and (and (and (and (and (and (= (type $generated@@454) ($generated@@82 $generated@@83 $generated@@84)) (= (type $generated@@456) ($generated@@82 $generated@@83 $generated@@84))) (= (type $generated@@458) ($generated@@82 $generated@@83 $generated@@84))) (= (type $generated@@457) ($generated@@82 $generated@@83 $generated@@84))) (= (type $generated@@459) ($generated@@161 $generated@@83 $generated@@4))) (= (type $generated@@460) $generated@@83)) (= (type $generated@@461) ($generated@@82 $generated@@83 $generated@@84))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@462  (=> (= (ControlFlow 0 2) (- 0 1)) (= ($generated@@215 ($generated@@141 ($generated@@141 $generated@@351)) $generated@@452) (<= ($generated@@144 0) $generated@@452)))))
(let (($generated@@463  (=> (and (< $generated@@452 ($generated@@144 0)) (= (ControlFlow 0 5) 2)) $generated@@462)))
(let (($generated@@464  (=> (<= ($generated@@144 0) $generated@@452) (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= ($generated@@144 0) $generated@@452)) (=> (<= ($generated@@144 0) $generated@@452) (=> (and (and (and ($generated@@453 $generated@@454) ($generated@@455 $generated@@454)) ($generated@@227 $generated@@452)) (and (and ($generated@@227 $generated@@452) (and ($generated@@215 ($generated@@141 $generated@@351) $generated@@452) (or (= $generated@@452 ($generated@@144 0)) ($generated@@215 ($generated@@141 $generated@@351) (- $generated@@452 1))))) (and (= $generated@@456 $generated@@454) (= (ControlFlow 0 3) 2)))) $generated@@462))))))
(let (($generated@@465  (and (=> (= (ControlFlow 0 6) 3) $generated@@464) (=> (= (ControlFlow 0 6) 5) $generated@@463))))
(let (($generated@@466  (=> (not ($generated@@215 ($generated@@141 $generated@@351) $generated@@452)) (=> (and (= $generated@@456 $generated@@457) (= (ControlFlow 0 9) 6)) $generated@@465))))
(let (($generated@@467  (=> ($generated@@215 ($generated@@141 $generated@@351) $generated@@452) (and (=> (= (ControlFlow 0 7) (- 0 8)) (=> ($generated@@227 $generated@@452) (or ($generated@@215 ($generated@@141 $generated@@351) $generated@@452) (or (= $generated@@452 ($generated@@144 0)) ($generated@@215 ($generated@@141 ($generated@@141 $generated@@351)) (- $generated@@452 1)))))) (=> (=> ($generated@@227 $generated@@452) (or ($generated@@215 ($generated@@141 $generated@@351) $generated@@452) (or (= $generated@@452 ($generated@@144 0)) ($generated@@215 ($generated@@141 ($generated@@141 $generated@@351)) (- $generated@@452 1))))) (=> (and ($generated@@453 $generated@@458) ($generated@@455 $generated@@458)) (=> (and (and (<= ($generated@@144 0) $generated@@452) (= $generated@@457 $generated@@458)) (and (= $generated@@456 $generated@@458) (= (ControlFlow 0 7) 6))) $generated@@465)))))))
(let (($generated@@468  (=> (= $generated@@459 ($generated@@160 $generated@@460 $generated@@461 $generated@@60 false)) (=> (and (and (and ($generated@@453 $generated@@457) ($generated@@455 $generated@@457)) (= $generated@@461 $generated@@457)) (and (and (forall (($generated@@469 Int) )  (=> (and ($generated@@0 ($generated@@223 ($generated@@11 true))) (and (<= 0 $generated@@469) (< $generated@@469 $generated@@452))) (= ($generated@@215 ($generated@@141 $generated@@351) $generated@@469) (<= ($generated@@144 0) $generated@@469)))) ($generated@@80 ($generated@@8 $generated@@452) $generated@@46 $generated@@457)) (and ($generated@@227 $generated@@452) ($generated@@227 $generated@@452)))) (and (=> (= (ControlFlow 0 10) 7) $generated@@467) (=> (= (ControlFlow 0 10) 9) $generated@@466))))))
(let (($generated@@470  (=> (and (and ($generated@@453 $generated@@461) ($generated@@455 $generated@@461)) (and (= 2 $generated@@67) (= (ControlFlow 0 11) 10))) $generated@@468)))
$generated@@470)))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 (Int) T@U)
(declare-fun $generated@@51 (T@U) Int)
(declare-fun $generated@@58 (T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@U T@U) T@U)
(declare-fun $generated@@66 (T@U T@U) T@U)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@69 (T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@74 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@171 () Int)
(declare-fun $generated@@172 (T@U T@U Int) Bool)
(declare-fun $generated@@173 () T@T)
(declare-fun $generated@@177 (T@U Int) Bool)
(declare-fun $generated@@178 (T@U) T@U)
(declare-fun $generated@@183 (Int) Int)
(declare-fun $generated@@185 (T@U) T@U)
(declare-fun $generated@@189 (Int) Bool)
(declare-fun $generated@@198 (T@U) Bool)
(declare-fun $generated@@202 (T@U Int) Bool)
(declare-fun $generated@@210 (T@U) T@U)
(declare-fun $generated@@211 () T@U)
(declare-fun $generated@@221 (T@U) T@U)
(declare-fun $generated@@222 (T@T T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@1 $generated@@45) 6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> (and (and (and (= (type $generated@@46) $generated@@45) (= (type $generated@@47) $generated@@45)) (= (type $generated@@48) $generated@@45)) (and ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))) ($generated@@44 $generated@@46 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 $generated@@46 $generated@@47) ($generated@@44 $generated@@46 $generated@@48))
)))
(assert  (and (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (! (= (type ($generated@@49 $generated@@52 $generated@@53)) $generated@@45)
 :pattern ( ($generated@@49 $generated@@52 $generated@@53))
)) (forall (($generated@@54 Int) ) (! (= (type ($generated@@50 $generated@@54)) $generated@@45)
 :pattern ( ($generated@@50 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 Int) ($generated@@57 Int) ) (!  (=> (= (type $generated@@55) $generated@@45) (=> (and (and (<= 0 $generated@@56) (<= 0 $generated@@57)) (<= (+ $generated@@56 $generated@@57) ($generated@@51 $generated@@55))) (= ($generated@@49 ($generated@@49 $generated@@55 ($generated@@50 $generated@@56)) ($generated@@50 $generated@@57)) ($generated@@49 $generated@@55 ($generated@@50 (+ $generated@@56 $generated@@57))))))
 :pattern ( ($generated@@49 ($generated@@49 $generated@@55 ($generated@@50 $generated@@56)) ($generated@@50 $generated@@57)))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@75 $generated@@76)) 7)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ) (! (= ($generated@@67 ($generated@@62 $generated@@77 $generated@@78)) $generated@@77)
 :pattern ( ($generated@@62 $generated@@77 $generated@@78))
))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ) (! (= ($generated@@68 ($generated@@62 $generated@@79 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@62 $generated@@79 $generated@@80))
))) (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (let (($generated@@83 ($generated@@68 (type $generated@@81))))
(= (type ($generated@@66 $generated@@81 $generated@@82)) $generated@@83))
 :pattern ( ($generated@@66 $generated@@81 $generated@@82))
))) (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (let (($generated@@87 (type $generated@@86)))
(let (($generated@@88 (type $generated@@85)))
(= (type ($generated@@69 $generated@@84 $generated@@85 $generated@@86)) ($generated@@62 $generated@@88 $generated@@87))))
 :pattern ( ($generated@@69 $generated@@84 $generated@@85 $generated@@86))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (let (($generated@@92 ($generated@@68 (type $generated@@89))))
 (=> (= (type $generated@@91) $generated@@92) (= ($generated@@66 ($generated@@69 $generated@@89 $generated@@90 $generated@@91) $generated@@90) $generated@@91)))
 :weight 0
))) (and (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@95 $generated@@96) (= ($generated@@66 ($generated@@69 $generated@@94 $generated@@95 $generated@@93) $generated@@96) ($generated@@66 $generated@@94 $generated@@96)))
 :weight 0
)) (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or true (= ($generated@@66 ($generated@@69 $generated@@98 $generated@@99 $generated@@97) $generated@@100) ($generated@@66 $generated@@98 $generated@@100)))
 :weight 0
)))) (forall (($generated@@101 T@T) ) (= ($generated@@1 ($generated@@64 $generated@@101)) 8))) (forall (($generated@@102 T@T) ) (! (= ($generated@@60 ($generated@@64 $generated@@102)) $generated@@102)
 :pattern ( ($generated@@64 $generated@@102))
))) (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (! (let (($generated@@105 ($generated@@60 (type $generated@@104))))
(= (type ($generated@@65 $generated@@103 $generated@@104)) $generated@@105))
 :pattern ( ($generated@@65 $generated@@103 $generated@@104))
))) (= ($generated@@1 $generated@@63) 9)) (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= (type ($generated@@70 $generated@@106 $generated@@107 $generated@@108)) $generated@@63)
 :pattern ( ($generated@@70 $generated@@106 $generated@@107 $generated@@108))
))) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (let (($generated@@112 ($generated@@60 (type $generated@@110))))
 (=> (= (type $generated@@111) $generated@@112) (= ($generated@@65 ($generated@@70 $generated@@109 $generated@@110 $generated@@111) $generated@@110) $generated@@111)))
 :weight 0
))) (and (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@115 $generated@@116) (= ($generated@@65 ($generated@@70 $generated@@114 $generated@@115 $generated@@113) $generated@@116) ($generated@@65 $generated@@114 $generated@@116)))
 :weight 0
)) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or true (= ($generated@@65 ($generated@@70 $generated@@118 $generated@@119 $generated@@117) $generated@@120) ($generated@@65 $generated@@118 $generated@@120)))
 :weight 0
)))) (= ($generated@@1 $generated@@61) 10)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (= ($generated@@1 ($generated@@71 $generated@@121 $generated@@122)) 11))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (! (= ($generated@@72 ($generated@@71 $generated@@123 $generated@@124)) $generated@@123)
 :pattern ( ($generated@@71 $generated@@123 $generated@@124))
))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@73 ($generated@@71 $generated@@125 $generated@@126)) $generated@@126)
 :pattern ( ($generated@@71 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (let (($generated@@130 ($generated@@73 (type $generated@@127))))
(= (type ($generated@@58 $generated@@127 $generated@@128 $generated@@129)) $generated@@130))
 :pattern ( ($generated@@58 $generated@@127 $generated@@128 $generated@@129))
))) (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (let (($generated@@135 (type $generated@@134)))
(let (($generated@@136 (type $generated@@132)))
(= (type ($generated@@74 $generated@@131 $generated@@132 $generated@@133 $generated@@134)) ($generated@@71 $generated@@136 $generated@@135))))
 :pattern ( ($generated@@74 $generated@@131 $generated@@132 $generated@@133 $generated@@134))
))) (forall (($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (let (($generated@@141 ($generated@@73 (type $generated@@137))))
 (=> (= (type $generated@@140) $generated@@141) (= ($generated@@58 ($generated@@74 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@138 $generated@@139) $generated@@140)))
 :weight 0
))) (and (and (forall (($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (!  (or (= $generated@@144 $generated@@146) (= ($generated@@58 ($generated@@74 $generated@@143 $generated@@144 $generated@@145 $generated@@142) $generated@@146 $generated@@147) ($generated@@58 $generated@@143 $generated@@146 $generated@@147)))
 :weight 0
)) (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ) (!  (or (= $generated@@151 $generated@@153) (= ($generated@@58 ($generated@@74 $generated@@149 $generated@@150 $generated@@151 $generated@@148) $generated@@152 $generated@@153) ($generated@@58 $generated@@149 $generated@@152 $generated@@153)))
 :weight 0
))) (forall (($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ) (!  (or true (= ($generated@@58 ($generated@@74 $generated@@155 $generated@@156 $generated@@157 $generated@@154) $generated@@158 $generated@@159) ($generated@@58 $generated@@155 $generated@@158 $generated@@159)))
 :weight 0
)))) (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 Bool) ) (! (= (type ($generated@@59 $generated@@160 $generated@@161 $generated@@162 $generated@@163)) ($generated@@71 $generated@@61 $generated@@4))
 :pattern ( ($generated@@59 $generated@@160 $generated@@161 $generated@@162 $generated@@163))
))))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ($generated@@166 T@U) ($generated@@167 Bool) ($generated@@168 T@U) ($generated@@169 T@U) ) (! (let (($generated@@170 ($generated@@60 (type $generated@@169))))
 (=> (and (and (and (and (= (type $generated@@164) $generated@@61) (= (type $generated@@165) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@166) ($generated@@64 $generated@@4))) (= (type $generated@@168) $generated@@61)) (= (type $generated@@169) ($generated@@64 $generated@@170))) (= ($generated@@0 ($generated@@58 ($generated@@59 $generated@@164 $generated@@165 $generated@@166 $generated@@167) $generated@@168 $generated@@169))  (=> (and (not (= $generated@@168 $generated@@164)) ($generated@@0 ($generated@@65 ($generated@@66 $generated@@165 $generated@@168) $generated@@166))) $generated@@167))))
 :pattern ( ($generated@@58 ($generated@@59 $generated@@164 $generated@@165 $generated@@166 $generated@@167) $generated@@168 $generated@@169))
)))
(assert (= ($generated@@1 $generated@@173) 12))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@174 T@U) ($generated@@175 Int) ($generated@@176 T@U) ) (!  (=> (and (and (= (type $generated@@174) $generated@@173) (= (type $generated@@176) $generated@@45)) (= $generated@@176 ($generated@@50 0))) ($generated@@172 $generated@@174 $generated@@176 $generated@@175))
 :pattern ( ($generated@@172 $generated@@174 $generated@@176 $generated@@175))
))))
(assert (forall (($generated@@179 T@U) ) (! (= (type ($generated@@178 $generated@@179)) $generated@@173)
 :pattern ( ($generated@@178 $generated@@179))
)))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@180 T@U) ($generated@@181 Int) ) (!  (=> (and (= (type $generated@@180) $generated@@173) (forall (($generated@@182 T@U) ) (!  (=> (= (type $generated@@182) $generated@@45) ($generated@@172 ($generated@@178 $generated@@180) $generated@@182 $generated@@181))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@180) $generated@@182 $generated@@181))
))) ($generated@@177 ($generated@@178 $generated@@180) $generated@@181))
 :pattern ( ($generated@@177 ($generated@@178 $generated@@180) $generated@@181))
))))
(assert (forall (($generated@@184 Int) ) (! (= ($generated@@183 $generated@@184) $generated@@184)
 :pattern ( ($generated@@183 $generated@@184))
)))
(assert (forall (($generated@@186 T@U) ) (! (let (($generated@@187 (type $generated@@186)))
(= (type ($generated@@185 $generated@@186)) $generated@@187))
 :pattern ( ($generated@@185 $generated@@186))
)))
(assert (forall (($generated@@188 T@U) ) (! (= ($generated@@185 $generated@@188) $generated@@188)
 :pattern ( ($generated@@185 $generated@@188))
)))
(assert  (=> (<= 0 $generated@@171) (forall (($generated@@190 T@U) ($generated@@191 Int) ) (!  (=> (and (= (type $generated@@190) $generated@@173) (or ($generated@@189 $generated@@191) (not (= 0 $generated@@171)))) true)
 :pattern ( ($generated@@177 $generated@@190 $generated@@191))
))))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@192 T@U) ($generated@@193 Int) ) (!  (=> (and (= (type $generated@@192) $generated@@173) ($generated@@177 ($generated@@178 $generated@@192) $generated@@193)) (forall (($generated@@194 T@U) ) (!  (=> (= (type $generated@@194) $generated@@45) ($generated@@172 ($generated@@178 $generated@@192) $generated@@194 $generated@@193))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@192) $generated@@194 $generated@@193))
)))
 :pattern ( ($generated@@177 ($generated@@178 $generated@@192) $generated@@193))
))))
(assert (forall (($generated@@195 T@U) ($generated@@196 T@U) ($generated@@197 Int) ) (!  (=> (and (= (type $generated@@195) $generated@@173) (= (type $generated@@196) $generated@@45)) (= ($generated@@172 ($generated@@178 $generated@@195) $generated@@196 $generated@@197) ($generated@@172 $generated@@195 $generated@@196 $generated@@197)))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@195) $generated@@196 $generated@@197))
)))
(assert (forall (($generated@@199 T@U) ($generated@@200 T@U) ) (!  (=> (and (and (= (type $generated@@199) $generated@@45) (= (type $generated@@200) $generated@@45)) (and ($generated@@198 $generated@@200) (<= ($generated@@51 $generated@@200) ($generated@@51 $generated@@199)))) (and (= ($generated@@198 ($generated@@49 $generated@@199 $generated@@200)) ($generated@@198 $generated@@199)) (= ($generated@@51 ($generated@@49 $generated@@199 $generated@@200)) (- ($generated@@51 $generated@@199) ($generated@@51 $generated@@200)))))
 :pattern ( ($generated@@49 $generated@@199 $generated@@200))
)))
(assert (forall (($generated@@201 Int) ) (!  (=> (<= 0 $generated@@201) (and ($generated@@198 ($generated@@50 $generated@@201)) (= ($generated@@51 ($generated@@50 $generated@@201)) $generated@@201)))
 :pattern ( ($generated@@50 $generated@@201))
)))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@203 T@U) ($generated@@204 T@U) ($generated@@205 Int) ) (!  (=> (and (and (= (type $generated@@203) $generated@@173) (= (type $generated@@204) $generated@@45)) (or ($generated@@202 $generated@@204 $generated@@205) (not (= 1 $generated@@171)))) (and (and (=> (< 0 ($generated@@51 $generated@@204)) (=> (not (= $generated@@205 0)) ($generated@@202 ($generated@@49 $generated@@204 ($generated@@50 1)) (+ $generated@@205 1)))) (=> (=> (< 0 ($generated@@51 $generated@@204)) (and (not (= $generated@@205 0)) ($generated@@172 $generated@@203 ($generated@@49 $generated@@204 ($generated@@50 1)) (+ $generated@@205 1)))) (=> (= ($generated@@183 0) ($generated@@51 $generated@@204)) (forall (($generated@@206 T@U) ) (!  (=> (and (= (type $generated@@206) $generated@@45) ($generated@@44 $generated@@206 $generated@@204)) ($generated@@202 $generated@@206 $generated@@205))
 :pattern ( ($generated@@172 $generated@@203 $generated@@206 $generated@@205))
))))) (= ($generated@@172 ($generated@@178 $generated@@203) $generated@@204 $generated@@205)  (and (=> (< 0 ($generated@@51 $generated@@204)) (and (not (= $generated@@205 0)) ($generated@@172 $generated@@203 ($generated@@49 $generated@@204 ($generated@@50 1)) (+ $generated@@205 1)))) (=> (= ($generated@@183 0) ($generated@@51 $generated@@204)) (forall (($generated@@207 T@U) ) (!  (=> (and (= (type $generated@@207) $generated@@45) ($generated@@44 $generated@@207 $generated@@204)) ($generated@@172 $generated@@203 $generated@@207 $generated@@205))
 :pattern ( ($generated@@172 $generated@@203 $generated@@207 $generated@@205))
)))))))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@203) $generated@@204 $generated@@205))
))))
(assert (forall (($generated@@208 T@U) ($generated@@209 T@U) ) (!  (=> (and (= (type $generated@@208) $generated@@45) (= (type $generated@@209) $generated@@45)) (or (or ($generated@@44 $generated@@208 $generated@@209) (= $generated@@208 $generated@@209)) ($generated@@44 $generated@@209 $generated@@208)))
 :pattern ( ($generated@@44 $generated@@208 $generated@@209) ($generated@@44 $generated@@209 $generated@@208))
)))
(assert  (and (forall (($generated@@212 T@U) ) (! (= (type ($generated@@210 $generated@@212)) $generated@@173)
 :pattern ( ($generated@@210 $generated@@212))
)) (= (type $generated@@211) $generated@@173)))
(assert (forall (($generated@@213 T@U) ($generated@@214 Int) ) (!  (=> (= (type $generated@@213) $generated@@173) (= ($generated@@177 $generated@@213 $generated@@214) ($generated@@177 $generated@@211 $generated@@214)))
 :pattern ( ($generated@@177 ($generated@@210 $generated@@213) $generated@@214))
)))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@215 T@U) ($generated@@216 T@U) ($generated@@217 Int) ) (!  (=> (and (and (= (type $generated@@215) $generated@@173) (= (type $generated@@216) $generated@@45)) (or ($generated@@202 $generated@@216 $generated@@217) (not (= 1 $generated@@171)))) true)
 :pattern ( ($generated@@172 $generated@@215 $generated@@216 $generated@@217))
))))
(assert (forall (($generated@@218 T@U) ($generated@@219 Int) ) (!  (=> (= (type $generated@@218) $generated@@173) (= ($generated@@177 ($generated@@178 $generated@@218) $generated@@219) ($generated@@177 $generated@@218 $generated@@219)))
 :pattern ( ($generated@@177 ($generated@@178 $generated@@218) $generated@@219))
)))
(assert (forall (($generated@@220 T@U) ) (!  (=> (= (type $generated@@220) $generated@@45) (<= 0 ($generated@@51 $generated@@220)))
 :pattern ( ($generated@@51 $generated@@220))
)))
(assert  (and (forall (($generated@@223 T@U) ) (! (= (type ($generated@@221 $generated@@223)) $generated@@45)
 :pattern ( ($generated@@221 $generated@@223))
)) (forall (($generated@@224 T@T) ($generated@@225 T@U) ) (! (= (type ($generated@@222 $generated@@224 $generated@@225)) $generated@@224)
 :pattern ( ($generated@@222 $generated@@224 $generated@@225))
))))
(assert (forall (($generated@@226 T@U) ) (! (let (($generated@@227 (type $generated@@226)))
(= ($generated@@222 $generated@@227 ($generated@@221 $generated@@226)) $generated@@226))
 :pattern ( ($generated@@221 $generated@@226))
)))
(assert (forall (($generated@@228 T@U) ($generated@@229 T@U) ) (!  (=> (and (= (type $generated@@228) $generated@@45) (= (type $generated@@229) $generated@@45)) (and (and (and (=> ($generated@@44 $generated@@228 $generated@@229) (not (= $generated@@228 $generated@@229))) (=> (and ($generated@@198 $generated@@228) (not ($generated@@198 $generated@@229))) ($generated@@44 $generated@@228 $generated@@229))) (=> (and ($generated@@198 $generated@@228) ($generated@@198 $generated@@229)) (= ($generated@@44 $generated@@228 $generated@@229) (< ($generated@@51 $generated@@228) ($generated@@51 $generated@@229))))) (=> (and ($generated@@44 $generated@@228 $generated@@229) ($generated@@198 $generated@@229)) ($generated@@198 $generated@@228))))
 :pattern ( ($generated@@44 $generated@@228 $generated@@229))
)))
(assert  (=> (<= 0 $generated@@171) (forall (($generated@@230 T@U) ($generated@@231 Int) ) (!  (=> (and (= (type $generated@@230) $generated@@173) (or ($generated@@189 $generated@@231) (not (= 0 $generated@@171)))) (and (=> (not (= $generated@@231 0)) ($generated@@189 (+ $generated@@231 1))) (= ($generated@@177 ($generated@@178 $generated@@230) $generated@@231)  (and (not (= $generated@@231 0)) ($generated@@177 $generated@@230 (+ $generated@@231 1))))))
 :pattern ( ($generated@@177 ($generated@@178 $generated@@230) $generated@@231))
))))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@232 T@U) ($generated@@233 T@U) ($generated@@234 Int) ) (!  (=> (and (and (= (type $generated@@232) $generated@@173) (= (type $generated@@233) $generated@@45)) (or ($generated@@202 ($generated@@185 $generated@@233) $generated@@234) (not (= 1 $generated@@171)))) (and (and (=> (< 0 ($generated@@51 $generated@@233)) (=> (not (= $generated@@234 0)) ($generated@@202 ($generated@@49 $generated@@233 ($generated@@50 1)) (+ $generated@@234 1)))) (=> (=> (< 0 ($generated@@51 $generated@@233)) (and (not (= $generated@@234 0)) ($generated@@172 ($generated@@178 $generated@@232) ($generated@@49 $generated@@233 ($generated@@50 1)) (+ $generated@@234 1)))) (=> (= ($generated@@183 0) ($generated@@51 $generated@@233)) (forall (($generated@@235 T@U) ) (!  (=> (and (= (type $generated@@235) $generated@@45) ($generated@@44 $generated@@235 $generated@@233)) ($generated@@202 $generated@@235 $generated@@234))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@232) $generated@@235 $generated@@234))
))))) (= ($generated@@172 ($generated@@178 $generated@@232) ($generated@@185 $generated@@233) $generated@@234)  (and (=> (< 0 ($generated@@51 $generated@@233)) (and (not (= $generated@@234 0)) ($generated@@172 ($generated@@178 $generated@@232) ($generated@@49 $generated@@233 ($generated@@50 1)) (+ $generated@@234 1)))) (=> (= ($generated@@183 0) ($generated@@51 $generated@@233)) (forall (($generated@@236 T@U) ) (!  (=> (and (= (type $generated@@236) $generated@@45) ($generated@@44 $generated@@236 $generated@@233)) ($generated@@172 ($generated@@178 $generated@@232) $generated@@236 $generated@@234))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@232) $generated@@236 $generated@@234))
)))))))
 :weight 3
 :pattern ( ($generated@@172 ($generated@@178 $generated@@232) ($generated@@185 $generated@@233) $generated@@234))
))))
(assert (forall (($generated@@237 T@U) ) (!  (=> (and (= (type $generated@@237) $generated@@45) ($generated@@198 $generated@@237)) (= $generated@@237 ($generated@@50 ($generated@@51 $generated@@237))))
 :pattern ( ($generated@@51 $generated@@237))
 :pattern ( ($generated@@198 $generated@@237))
)))
(assert (forall (($generated@@238 T@U) ($generated@@239 T@U) ) (!  (=> (and (and (= (type $generated@@238) $generated@@45) (= (type $generated@@239) $generated@@45)) (and ($generated@@198 $generated@@239) (<= ($generated@@51 $generated@@239) ($generated@@51 $generated@@238)))) (or (and (= $generated@@239 ($generated@@50 0)) (= ($generated@@49 $generated@@238 $generated@@239) $generated@@238)) (and (not (= $generated@@239 ($generated@@50 0))) ($generated@@44 ($generated@@49 $generated@@238 $generated@@239) $generated@@238))))
 :pattern ( ($generated@@49 $generated@@238 $generated@@239))
)))
(assert (forall (($generated@@240 Int) ) (! (= ($generated@@221 ($generated@@8 ($generated@@183 $generated@@240))) ($generated@@185 ($generated@@221 ($generated@@8 $generated@@240))))
 :pattern ( ($generated@@221 ($generated@@8 ($generated@@183 $generated@@240))))
)))
(assert (forall (($generated@@241 T@U) ) (! (= ($generated@@221 ($generated@@185 $generated@@241)) ($generated@@185 ($generated@@221 $generated@@241)))
 :pattern ( ($generated@@221 ($generated@@185 $generated@@241)))
)))
(assert  (=> (<= 1 $generated@@171) (forall (($generated@@242 T@U) ($generated@@243 T@U) ($generated@@244 Int) ) (!  (=> (and (and (= (type $generated@@242) $generated@@173) (= (type $generated@@243) $generated@@45)) (or ($generated@@202 ($generated@@185 $generated@@243) ($generated@@183 $generated@@244)) (not (= 1 $generated@@171)))) (and (and (=> (< 0 ($generated@@51 $generated@@243)) (=> (not (= $generated@@244 0)) ($generated@@202 ($generated@@49 $generated@@243 ($generated@@50 1)) (+ $generated@@244 1)))) (=> (=> (< 0 ($generated@@51 $generated@@243)) (and (not (= $generated@@244 0)) ($generated@@172 ($generated@@178 $generated@@242) ($generated@@49 $generated@@243 ($generated@@50 1)) (+ $generated@@244 1)))) (=> (= ($generated@@183 0) ($generated@@51 $generated@@243)) (forall (($generated@@245 T@U) ) (!  (=> (and (= (type $generated@@245) $generated@@45) ($generated@@44 $generated@@245 $generated@@243)) ($generated@@202 $generated@@245 $generated@@244))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@242) $generated@@245 $generated@@244))
))))) (= ($generated@@172 ($generated@@178 $generated@@242) ($generated@@185 $generated@@243) ($generated@@183 $generated@@244))  (and (=> (< 0 ($generated@@51 $generated@@243)) (and (not (= $generated@@244 0)) ($generated@@172 ($generated@@178 $generated@@242) ($generated@@49 $generated@@243 ($generated@@50 1)) (+ $generated@@244 1)))) (=> (= ($generated@@183 0) ($generated@@51 $generated@@243)) (forall (($generated@@246 T@U) ) (!  (=> (and (= (type $generated@@246) $generated@@45) ($generated@@44 $generated@@246 $generated@@243)) ($generated@@172 ($generated@@178 $generated@@242) $generated@@246 $generated@@244))
 :pattern ( ($generated@@172 ($generated@@178 $generated@@242) $generated@@246 $generated@@244))
)))))))
 :weight 3
 :pattern ( ($generated@@172 ($generated@@178 $generated@@242) ($generated@@185 $generated@@243) ($generated@@183 $generated@@244)))
))))
(assert (forall (($generated@@247 T@U) ($generated@@248 T@U) ($generated@@249 Int) ) (!  (=> (and (= (type $generated@@247) $generated@@173) (= (type $generated@@248) $generated@@45)) (= ($generated@@172 $generated@@247 $generated@@248 $generated@@249) ($generated@@172 $generated@@211 $generated@@248 $generated@@249)))
 :pattern ( ($generated@@172 ($generated@@210 $generated@@247) $generated@@248 $generated@@249))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@250 () Int)
(declare-fun $generated@@251 (T@U) Bool)
(declare-fun $generated@@252 () T@U)
(declare-fun $generated@@253 (T@U) Bool)
(declare-fun $generated@@254 () T@U)
(declare-fun $generated@@255 () T@U)
(declare-fun $generated@@256 () T@U)
(declare-fun $generated@@257 () T@U)
(declare-fun $generated@@258 () T@U)
(declare-fun $generated@@259 () T@U)
(assert  (and (and (and (and (and (and (= (type $generated@@255) ($generated@@62 $generated@@61 $generated@@63)) (= (type $generated@@254) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@252) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@256) ($generated@@71 $generated@@61 $generated@@4))) (= (type $generated@@257) $generated@@61)) (= (type $generated@@258) ($generated@@62 $generated@@61 $generated@@63))) (= (type $generated@@259) ($generated@@64 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@260  (=> (= (ControlFlow 0 2) (- 0 1)) (= ($generated@@177 ($generated@@178 ($generated@@178 $generated@@211)) $generated@@250) (< 0 $generated@@250)))))
(let (($generated@@261  (=> (<= $generated@@250 0) (and (=> (= (ControlFlow 0 5) (- 0 6)) (<= $generated@@250 ($generated@@183 0))) (=> (<= $generated@@250 ($generated@@183 0)) (=> (and ($generated@@251 $generated@@252) ($generated@@253 $generated@@252)) (=> (and (and ($generated@@189 $generated@@250) (not ($generated@@177 ($generated@@178 ($generated@@178 $generated@@211)) $generated@@250))) (and (= $generated@@254 $generated@@252) (= (ControlFlow 0 5) 2))) $generated@@260)))))))
(let (($generated@@262  (=> (< 0 $generated@@250) (and (=> (= (ControlFlow 0 3) (- 0 4)) (< 0 $generated@@250)) (=> (< 0 $generated@@250) (=> (and (and (and ($generated@@251 $generated@@255) ($generated@@253 $generated@@255)) ($generated@@189 $generated@@250)) (and (and ($generated@@189 $generated@@250) (and ($generated@@177 ($generated@@178 $generated@@211) $generated@@250) (and (not (= $generated@@250 0)) ($generated@@177 ($generated@@178 $generated@@211) (+ $generated@@250 1))))) (and (= $generated@@254 $generated@@255) (= (ControlFlow 0 3) 2)))) $generated@@260))))))
(let (($generated@@263  (=> (= $generated@@256 ($generated@@59 $generated@@257 $generated@@258 $generated@@259 false)) (=> (and (and ($generated@@251 $generated@@254) ($generated@@253 $generated@@254)) (and (= $generated@@258 $generated@@254) (forall (($generated@@264 Int) )  (=> (and ($generated@@0 ($generated@@185 ($generated@@11 true))) (and (<= 0 $generated@@264) (< $generated@@264 $generated@@250))) (= ($generated@@177 ($generated@@178 $generated@@211) $generated@@264) (< 0 $generated@@264)))))) (and (=> (= (ControlFlow 0 7) 3) $generated@@262) (=> (= (ControlFlow 0 7) 5) $generated@@261))))))
(let (($generated@@265  (=> (and (and ($generated@@251 $generated@@258) ($generated@@253 $generated@@258)) (and (= 2 $generated@@171) (= (ControlFlow 0 8) 7))) $generated@@263)))
$generated@@265))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 (T@T T@T) T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U T@U) T@U)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@108 (T@T T@T) T@T)
(declare-fun $generated@@109 (T@T) T@T)
(declare-fun $generated@@110 (T@T) T@T)
(declare-fun $generated@@111 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U T@U) Bool)
(declare-fun $generated@@170 (T@U T@U) T@U)
(declare-fun $generated@@188 (T@U) T@U)
(declare-fun $generated@@189 (T@T T@U) T@U)
(declare-fun $generated@@190 () T@T)
(declare-fun $generated@@196 (T@T) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@1 ($generated@@45 $generated@@57 $generated@@58)) 6)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@51 ($generated@@45 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@45 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@52 ($generated@@45 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@45 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (let (($generated@@65 ($generated@@52 (type $generated@@63))))
(= (type ($generated@@49 $generated@@63 $generated@@64)) $generated@@65))
 :pattern ( ($generated@@49 $generated@@63 $generated@@64))
))) (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 (type $generated@@68)))
(let (($generated@@70 (type $generated@@67)))
(= (type ($generated@@53 $generated@@66 $generated@@67 $generated@@68)) ($generated@@45 $generated@@70 $generated@@69))))
 :pattern ( ($generated@@53 $generated@@66 $generated@@67 $generated@@68))
))) (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@52 (type $generated@@71))))
 (=> (= (type $generated@@73) $generated@@74) (= ($generated@@49 ($generated@@53 $generated@@71 $generated@@72 $generated@@73) $generated@@72) $generated@@73)))
 :weight 0
))) (and (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@77 $generated@@78) (= ($generated@@49 ($generated@@53 $generated@@76 $generated@@77 $generated@@75) $generated@@78) ($generated@@49 $generated@@76 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or true (= ($generated@@49 ($generated@@53 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@49 $generated@@80 $generated@@82)))
 :weight 0
)))) (= ($generated@@1 $generated@@46) 7)) (forall (($generated@@83 T@T) ) (= ($generated@@1 ($generated@@54 $generated@@83)) 8))) (forall (($generated@@84 T@T) ) (! (= ($generated@@55 ($generated@@54 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@54 $generated@@84))
))) (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (! (let (($generated@@87 ($generated@@55 (type $generated@@86))))
(= (type ($generated@@48 $generated@@85 $generated@@86)) $generated@@87))
 :pattern ( ($generated@@48 $generated@@85 $generated@@86))
))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= (type ($generated@@56 $generated@@88 $generated@@89 $generated@@90)) $generated@@47)
 :pattern ( ($generated@@56 $generated@@88 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (let (($generated@@94 ($generated@@55 (type $generated@@92))))
 (=> (= (type $generated@@93) $generated@@94) (= ($generated@@48 ($generated@@56 $generated@@91 $generated@@92 $generated@@93) $generated@@92) $generated@@93)))
 :weight 0
))) (and (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@97 $generated@@98) (= ($generated@@48 ($generated@@56 $generated@@96 $generated@@97 $generated@@95) $generated@@98) ($generated@@48 $generated@@96 $generated@@98)))
 :weight 0
)) (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or true (= ($generated@@48 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@48 $generated@@100 $generated@@102)))
 :weight 0
)))) (= (type $generated@@50) ($generated@@54 $generated@@4))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (and (and (= (type $generated@@103) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@104) ($generated@@45 $generated@@46 $generated@@47))) ($generated@@44 $generated@@103 $generated@@104)) (forall (($generated@@105 T@U) ) (!  (=> (and (= (type $generated@@105) $generated@@46) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@103 $generated@@105) $generated@@50))) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50)))
 :pattern ( ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50))
)))
 :pattern ( ($generated@@44 $generated@@103 $generated@@104))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@108 $generated@@112 $generated@@113)) 10)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@109 ($generated@@108 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@108 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@110 ($generated@@108 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@108 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@110 (type $generated@@118))))
(= (type ($generated@@106 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@106 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@108 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@110 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@106 ($generated@@111 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@106 ($generated@@111 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@106 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@106 ($generated@@111 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@106 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@106 ($generated@@111 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@106 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@108 $generated@@46 $generated@@4))
 :pattern ( ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@55 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@46) (= (type $generated@@156) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@157) ($generated@@54 $generated@@4))) (= (type $generated@@159) $generated@@46)) (= (type $generated@@160) ($generated@@54 $generated@@161))) (= ($generated@@0 ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@U) ) (! (let (($generated@@165 ($generated@@51 (type $generated@@163))))
 (=> (and (= (type $generated@@163) ($generated@@45 $generated@@165 $generated@@4)) (= (type $generated@@164) ($generated@@45 $generated@@165 $generated@@4))) (= ($generated@@162 $generated@@163 $generated@@164) (forall (($generated@@166 T@U) ) (!  (=> (= (type $generated@@166) $generated@@165) (= ($generated@@0 ($generated@@49 $generated@@163 $generated@@166)) ($generated@@0 ($generated@@49 $generated@@164 $generated@@166))))
 :pattern ( ($generated@@49 $generated@@163 $generated@@166))
 :pattern ( ($generated@@49 $generated@@164 $generated@@166))
)))))
 :pattern ( ($generated@@162 $generated@@163 $generated@@164))
)))
(assert (forall (($generated@@167 T@U) ($generated@@168 T@U) ) (! (let (($generated@@169 ($generated@@51 (type $generated@@167))))
 (=> (and (and (= (type $generated@@167) ($generated@@45 $generated@@169 $generated@@4)) (= (type $generated@@168) ($generated@@45 $generated@@169 $generated@@4))) ($generated@@162 $generated@@167 $generated@@168)) (= $generated@@167 $generated@@168)))
 :pattern ( ($generated@@162 $generated@@167 $generated@@168))
)))
(assert (forall (($generated@@171 T@U) ($generated@@172 T@U) ) (! (let (($generated@@173 (type $generated@@172)))
(= (type ($generated@@170 $generated@@171 $generated@@172)) ($generated@@45 $generated@@173 $generated@@4)))
 :pattern ( ($generated@@170 $generated@@171 $generated@@172))
)))
(assert (forall (($generated@@174 T@U) ($generated@@175 T@U) ($generated@@176 T@U) ) (! (let (($generated@@177 (type $generated@@175)))
 (=> (and (and (= (type $generated@@174) ($generated@@45 $generated@@177 $generated@@4)) (= (type $generated@@176) $generated@@177)) ($generated@@0 ($generated@@49 $generated@@174 $generated@@176))) ($generated@@0 ($generated@@49 ($generated@@170 $generated@@174 $generated@@175) $generated@@176))))
 :pattern ( ($generated@@170 $generated@@174 $generated@@175) ($generated@@49 $generated@@174 $generated@@176))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ($generated@@180 T@U) ) (! (let (($generated@@181 (type $generated@@179)))
 (=> (and (= (type $generated@@178) ($generated@@45 $generated@@181 $generated@@4)) (= (type $generated@@180) $generated@@181)) (= ($generated@@0 ($generated@@49 ($generated@@170 $generated@@178 $generated@@179) $generated@@180))  (or (= $generated@@180 $generated@@179) ($generated@@0 ($generated@@49 $generated@@178 $generated@@180))))))
 :pattern ( ($generated@@49 ($generated@@170 $generated@@178 $generated@@179) $generated@@180))
)))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@U) ($generated@@184 T@U) ) (!  (=> (and (and (and (and (= (type $generated@@182) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@183) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@184) ($generated@@45 $generated@@46 $generated@@47))) (not (= $generated@@182 $generated@@184))) (and ($generated@@44 $generated@@182 $generated@@183) ($generated@@44 $generated@@183 $generated@@184))) ($generated@@44 $generated@@182 $generated@@184))
 :pattern ( ($generated@@44 $generated@@182 $generated@@183) ($generated@@44 $generated@@183 $generated@@184))
)))
(assert (forall (($generated@@185 T@U) ($generated@@186 T@U) ) (! (let (($generated@@187 (type $generated@@186)))
 (=> (= (type $generated@@185) ($generated@@45 $generated@@187 $generated@@4)) ($generated@@0 ($generated@@49 ($generated@@170 $generated@@185 $generated@@186) $generated@@186))))
 :pattern ( ($generated@@170 $generated@@185 $generated@@186))
)))
(assert  (and (and (= ($generated@@1 $generated@@190) 11) (forall (($generated@@191 T@U) ) (! (= (type ($generated@@188 $generated@@191)) $generated@@190)
 :pattern ( ($generated@@188 $generated@@191))
))) (forall (($generated@@192 T@T) ($generated@@193 T@U) ) (! (= (type ($generated@@189 $generated@@192 $generated@@193)) $generated@@192)
 :pattern ( ($generated@@189 $generated@@192 $generated@@193))
))))
(assert (forall (($generated@@194 T@U) ) (! (let (($generated@@195 (type $generated@@194)))
(= ($generated@@189 $generated@@195 ($generated@@188 $generated@@194)) $generated@@194))
 :pattern ( ($generated@@188 $generated@@194))
)))
(assert (forall (($generated@@197 T@T) ) (! (= (type ($generated@@196 $generated@@197)) ($generated@@45 $generated@@197 $generated@@4))
 :pattern ( ($generated@@196 $generated@@197))
)))
(assert (forall (($generated@@198 T@U) ) (! (let (($generated@@199 (type $generated@@198)))
 (not ($generated@@0 ($generated@@49 ($generated@@196 $generated@@199) $generated@@198))))
 :pattern ( (let (($generated@@199 (type $generated@@198)))
($generated@@49 ($generated@@196 $generated@@199) $generated@@198)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 (T@T T@T) T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U T@U) T@U)
(declare-fun $generated@@49 (T@U T@U) T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@108 (T@T T@T) T@T)
(declare-fun $generated@@109 (T@T) T@T)
(declare-fun $generated@@110 (T@T) T@T)
(declare-fun $generated@@111 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@162 (T@U T@U) Bool)
(declare-fun $generated@@170 (T@U T@U) T@U)
(declare-fun $generated@@188 (T@U) T@U)
(declare-fun $generated@@189 (T@T T@U) T@U)
(declare-fun $generated@@190 () T@T)
(declare-fun $generated@@196 (T@T) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@1 ($generated@@45 $generated@@57 $generated@@58)) 6)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@51 ($generated@@45 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@45 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@52 ($generated@@45 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@45 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (let (($generated@@65 ($generated@@52 (type $generated@@63))))
(= (type ($generated@@49 $generated@@63 $generated@@64)) $generated@@65))
 :pattern ( ($generated@@49 $generated@@63 $generated@@64))
))) (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 (type $generated@@68)))
(let (($generated@@70 (type $generated@@67)))
(= (type ($generated@@53 $generated@@66 $generated@@67 $generated@@68)) ($generated@@45 $generated@@70 $generated@@69))))
 :pattern ( ($generated@@53 $generated@@66 $generated@@67 $generated@@68))
))) (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (let (($generated@@74 ($generated@@52 (type $generated@@71))))
 (=> (= (type $generated@@73) $generated@@74) (= ($generated@@49 ($generated@@53 $generated@@71 $generated@@72 $generated@@73) $generated@@72) $generated@@73)))
 :weight 0
))) (and (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@77 $generated@@78) (= ($generated@@49 ($generated@@53 $generated@@76 $generated@@77 $generated@@75) $generated@@78) ($generated@@49 $generated@@76 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or true (= ($generated@@49 ($generated@@53 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@49 $generated@@80 $generated@@82)))
 :weight 0
)))) (= ($generated@@1 $generated@@46) 7)) (forall (($generated@@83 T@T) ) (= ($generated@@1 ($generated@@54 $generated@@83)) 8))) (forall (($generated@@84 T@T) ) (! (= ($generated@@55 ($generated@@54 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@54 $generated@@84))
))) (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (! (let (($generated@@87 ($generated@@55 (type $generated@@86))))
(= (type ($generated@@48 $generated@@85 $generated@@86)) $generated@@87))
 :pattern ( ($generated@@48 $generated@@85 $generated@@86))
))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= (type ($generated@@56 $generated@@88 $generated@@89 $generated@@90)) $generated@@47)
 :pattern ( ($generated@@56 $generated@@88 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (let (($generated@@94 ($generated@@55 (type $generated@@92))))
 (=> (= (type $generated@@93) $generated@@94) (= ($generated@@48 ($generated@@56 $generated@@91 $generated@@92 $generated@@93) $generated@@92) $generated@@93)))
 :weight 0
))) (and (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@97 $generated@@98) (= ($generated@@48 ($generated@@56 $generated@@96 $generated@@97 $generated@@95) $generated@@98) ($generated@@48 $generated@@96 $generated@@98)))
 :weight 0
)) (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or true (= ($generated@@48 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@48 $generated@@100 $generated@@102)))
 :weight 0
)))) (= (type $generated@@50) ($generated@@54 $generated@@4))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (and (and (= (type $generated@@103) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@104) ($generated@@45 $generated@@46 $generated@@47))) ($generated@@44 $generated@@103 $generated@@104)) (forall (($generated@@105 T@U) ) (!  (=> (and (= (type $generated@@105) $generated@@46) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@103 $generated@@105) $generated@@50))) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50)))
 :pattern ( ($generated@@48 ($generated@@49 $generated@@104 $generated@@105) $generated@@50))
)))
 :pattern ( ($generated@@44 $generated@@103 $generated@@104))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@1 ($generated@@108 $generated@@112 $generated@@113)) 10)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@109 ($generated@@108 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@108 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@110 ($generated@@108 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@108 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 ($generated@@110 (type $generated@@118))))
(= (type ($generated@@106 $generated@@118 $generated@@119 $generated@@120)) $generated@@121))
 :pattern ( ($generated@@106 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (let (($generated@@126 (type $generated@@125)))
(let (($generated@@127 (type $generated@@123)))
(= (type ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125)) ($generated@@108 $generated@@127 $generated@@126))))
 :pattern ( ($generated@@111 $generated@@122 $generated@@123 $generated@@124 $generated@@125))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 ($generated@@110 (type $generated@@128))))
 (=> (= (type $generated@@131) $generated@@132) (= ($generated@@106 ($generated@@111 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@129 $generated@@130) $generated@@131)))
 :weight 0
))) (and (and (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@106 ($generated@@111 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@106 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@106 ($generated@@111 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@106 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
))) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or true (= ($generated@@106 ($generated@@111 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@106 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ) (! (= (type ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154)) ($generated@@108 $generated@@46 $generated@@4))
 :pattern ( ($generated@@107 $generated@@151 $generated@@152 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (let (($generated@@161 ($generated@@55 (type $generated@@160))))
 (=> (and (and (and (and (= (type $generated@@155) $generated@@46) (= (type $generated@@156) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@157) ($generated@@54 $generated@@4))) (= (type $generated@@159) $generated@@46)) (= (type $generated@@160) ($generated@@54 $generated@@161))) (= ($generated@@0 ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (not (= $generated@@159 $generated@@155)) ($generated@@0 ($generated@@48 ($generated@@49 $generated@@156 $generated@@159) $generated@@157))) $generated@@158))))
 :pattern ( ($generated@@106 ($generated@@107 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@U) ) (! (let (($generated@@165 ($generated@@51 (type $generated@@163))))
 (=> (and (= (type $generated@@163) ($generated@@45 $generated@@165 $generated@@4)) (= (type $generated@@164) ($generated@@45 $generated@@165 $generated@@4))) (= ($generated@@162 $generated@@163 $generated@@164) (forall (($generated@@166 T@U) ) (!  (=> (= (type $generated@@166) $generated@@165) (= ($generated@@0 ($generated@@49 $generated@@163 $generated@@166)) ($generated@@0 ($generated@@49 $generated@@164 $generated@@166))))
 :pattern ( ($generated@@49 $generated@@163 $generated@@166))
 :pattern ( ($generated@@49 $generated@@164 $generated@@166))
)))))
 :pattern ( ($generated@@162 $generated@@163 $generated@@164))
)))
(assert (forall (($generated@@167 T@U) ($generated@@168 T@U) ) (! (let (($generated@@169 ($generated@@51 (type $generated@@167))))
 (=> (and (and (= (type $generated@@167) ($generated@@45 $generated@@169 $generated@@4)) (= (type $generated@@168) ($generated@@45 $generated@@169 $generated@@4))) ($generated@@162 $generated@@167 $generated@@168)) (= $generated@@167 $generated@@168)))
 :pattern ( ($generated@@162 $generated@@167 $generated@@168))
)))
(assert (forall (($generated@@171 T@U) ($generated@@172 T@U) ) (! (let (($generated@@173 (type $generated@@172)))
(= (type ($generated@@170 $generated@@171 $generated@@172)) ($generated@@45 $generated@@173 $generated@@4)))
 :pattern ( ($generated@@170 $generated@@171 $generated@@172))
)))
(assert (forall (($generated@@174 T@U) ($generated@@175 T@U) ($generated@@176 T@U) ) (! (let (($generated@@177 (type $generated@@175)))
 (=> (and (and (= (type $generated@@174) ($generated@@45 $generated@@177 $generated@@4)) (= (type $generated@@176) $generated@@177)) ($generated@@0 ($generated@@49 $generated@@174 $generated@@176))) ($generated@@0 ($generated@@49 ($generated@@170 $generated@@174 $generated@@175) $generated@@176))))
 :pattern ( ($generated@@170 $generated@@174 $generated@@175) ($generated@@49 $generated@@174 $generated@@176))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ($generated@@180 T@U) ) (! (let (($generated@@181 (type $generated@@179)))
 (=> (and (= (type $generated@@178) ($generated@@45 $generated@@181 $generated@@4)) (= (type $generated@@180) $generated@@181)) (= ($generated@@0 ($generated@@49 ($generated@@170 $generated@@178 $generated@@179) $generated@@180))  (or (= $generated@@180 $generated@@179) ($generated@@0 ($generated@@49 $generated@@178 $generated@@180))))))
 :pattern ( ($generated@@49 ($generated@@170 $generated@@178 $generated@@179) $generated@@180))
)))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@U) ($generated@@184 T@U) ) (!  (=> (and (and (and (and (= (type $generated@@182) ($generated@@45 $generated@@46 $generated@@47)) (= (type $generated@@183) ($generated@@45 $generated@@46 $generated@@47))) (= (type $generated@@184) ($generated@@45 $generated@@46 $generated@@47))) (not (= $generated@@182 $generated@@184))) (and ($generated@@44 $generated@@182 $generated@@183) ($generated@@44 $generated@@183 $generated@@184))) ($generated@@44 $generated@@182 $generated@@184))
 :pattern ( ($generated@@44 $generated@@182 $generated@@183) ($generated@@44 $generated@@183 $generated@@184))
)))
(assert (forall (($generated@@185 T@U) ($generated@@186 T@U) ) (! (let (($generated@@187 (type $generated@@186)))
 (=> (= (type $generated@@185) ($generated@@45 $generated@@187 $generated@@4)) ($generated@@0 ($generated@@49 ($generated@@170 $generated@@185 $generated@@186) $generated@@186))))
 :pattern ( ($generated@@170 $generated@@185 $generated@@186))
)))
(assert  (and (and (= ($generated@@1 $generated@@190) 11) (forall (($generated@@191 T@U) ) (! (= (type ($generated@@188 $generated@@191)) $generated@@190)
 :pattern ( ($generated@@188 $generated@@191))
))) (forall (($generated@@192 T@T) ($generated@@193 T@U) ) (! (= (type ($generated@@189 $generated@@192 $generated@@193)) $generated@@192)
 :pattern ( ($generated@@189 $generated@@192 $generated@@193))
))))
(assert (forall (($generated@@194 T@U) ) (! (let (($generated@@195 (type $generated@@194)))
(= ($generated@@189 $generated@@195 ($generated@@188 $generated@@194)) $generated@@194))
 :pattern ( ($generated@@188 $generated@@194))
)))
(assert (forall (($generated@@197 T@T) ) (! (= (type ($generated@@196 $generated@@197)) ($generated@@45 $generated@@197 $generated@@4))
 :pattern ( ($generated@@196 $generated@@197))
)))
(assert (forall (($generated@@198 T@U) ) (! (let (($generated@@199 (type $generated@@198)))
 (not ($generated@@0 ($generated@@49 ($generated@@196 $generated@@199) $generated@@198))))
 :pattern ( (let (($generated@@199 (type $generated@@198)))
($generated@@49 ($generated@@196 $generated@@199) $generated@@198)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 (T@U T@U) Bool)
(declare-fun $generated@@165 (T@U T@U) T@U)
(declare-fun $generated@@180 (T@U) T@U)
(declare-fun $generated@@181 (T@T T@U) T@U)
(declare-fun $generated@@182 () T@T)
(declare-fun $generated@@188 (T@T) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ) (! (let (($generated@@160 ($generated@@53 (type $generated@@158))))
 (=> (and (= (type $generated@@158) ($generated@@48 $generated@@160 $generated@@4)) (= (type $generated@@159) ($generated@@48 $generated@@160 $generated@@4))) (= ($generated@@157 $generated@@158 $generated@@159) (forall (($generated@@161 T@U) ) (!  (=> (= (type $generated@@161) $generated@@160) (= ($generated@@0 ($generated@@52 $generated@@158 $generated@@161)) ($generated@@0 ($generated@@52 $generated@@159 $generated@@161))))
 :pattern ( ($generated@@52 $generated@@158 $generated@@161))
 :pattern ( ($generated@@52 $generated@@159 $generated@@161))
)))))
 :pattern ( ($generated@@157 $generated@@158 $generated@@159))
)))
(assert (forall (($generated@@162 T@U) ($generated@@163 T@U) ) (! (let (($generated@@164 ($generated@@53 (type $generated@@162))))
 (=> (and (and (= (type $generated@@162) ($generated@@48 $generated@@164 $generated@@4)) (= (type $generated@@163) ($generated@@48 $generated@@164 $generated@@4))) ($generated@@157 $generated@@162 $generated@@163)) (= $generated@@162 $generated@@163)))
 :pattern ( ($generated@@157 $generated@@162 $generated@@163))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (! (let (($generated@@168 (type $generated@@167)))
(= (type ($generated@@165 $generated@@166 $generated@@167)) ($generated@@48 $generated@@168 $generated@@4)))
 :pattern ( ($generated@@165 $generated@@166 $generated@@167))
)))
(assert (forall (($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 T@U) ) (! (let (($generated@@172 (type $generated@@170)))
 (=> (and (and (= (type $generated@@169) ($generated@@48 $generated@@172 $generated@@4)) (= (type $generated@@171) $generated@@172)) ($generated@@0 ($generated@@52 $generated@@169 $generated@@171))) ($generated@@0 ($generated@@52 ($generated@@165 $generated@@169 $generated@@170) $generated@@171))))
 :pattern ( ($generated@@165 $generated@@169 $generated@@170) ($generated@@52 $generated@@169 $generated@@171))
)))
(assert (forall (($generated@@173 T@U) ($generated@@174 T@U) ($generated@@175 T@U) ) (! (let (($generated@@176 (type $generated@@174)))
 (=> (and (= (type $generated@@173) ($generated@@48 $generated@@176 $generated@@4)) (= (type $generated@@175) $generated@@176)) (= ($generated@@0 ($generated@@52 ($generated@@165 $generated@@173 $generated@@174) $generated@@175))  (or (= $generated@@175 $generated@@174) ($generated@@0 ($generated@@52 $generated@@173 $generated@@175))))))
 :pattern ( ($generated@@52 ($generated@@165 $generated@@173 $generated@@174) $generated@@175))
)))
(assert (forall (($generated@@177 T@U) ($generated@@178 T@U) ) (! (let (($generated@@179 (type $generated@@178)))
 (=> (= (type $generated@@177) ($generated@@48 $generated@@179 $generated@@4)) ($generated@@0 ($generated@@52 ($generated@@165 $generated@@177 $generated@@178) $generated@@178))))
 :pattern ( ($generated@@165 $generated@@177 $generated@@178))
)))
(assert  (and (and (= ($generated@@1 $generated@@182) 11) (forall (($generated@@183 T@U) ) (! (= (type ($generated@@180 $generated@@183)) $generated@@182)
 :pattern ( ($generated@@180 $generated@@183))
))) (forall (($generated@@184 T@T) ($generated@@185 T@U) ) (! (= (type ($generated@@181 $generated@@184 $generated@@185)) $generated@@184)
 :pattern ( ($generated@@181 $generated@@184 $generated@@185))
))))
(assert (forall (($generated@@186 T@U) ) (! (let (($generated@@187 (type $generated@@186)))
(= ($generated@@181 $generated@@187 ($generated@@180 $generated@@186)) $generated@@186))
 :pattern ( ($generated@@180 $generated@@186))
)))
(assert (forall (($generated@@189 T@T) ) (! (= (type ($generated@@188 $generated@@189)) ($generated@@48 $generated@@189 $generated@@4))
 :pattern ( ($generated@@188 $generated@@189))
)))
(assert (forall (($generated@@190 T@U) ) (! (let (($generated@@191 (type $generated@@190)))
 (not ($generated@@0 ($generated@@52 ($generated@@188 $generated@@191) $generated@@190))))
 :pattern ( (let (($generated@@191 (type $generated@@190)))
($generated@@52 ($generated@@188 $generated@@191) $generated@@190)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@192 () Int)
(declare-fun $generated@@193 () Int)
(declare-fun $generated@@194 () Int)
(declare-fun $generated@@195 () Int)
(declare-fun $generated@@196 () T@U)
(declare-fun $generated@@197 () T@U)
(declare-fun $generated@@198 () T@U)
(declare-fun $generated@@199 () T@U)
(declare-fun $generated@@200 (T@U) Bool)
(declare-fun $generated@@201 (T@U) Bool)
(declare-fun $generated@@202 () Int)
(assert  (and (and (and (= (type $generated@@196) ($generated@@57 $generated@@47 $generated@@4)) (= (type $generated@@197) $generated@@47)) (= (type $generated@@198) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@199) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@203  (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@157 ($generated@@165 ($generated@@165 ($generated@@188 $generated@@182) ($generated@@180 ($generated@@8 $generated@@192))) ($generated@@180 ($generated@@8 $generated@@193))) ($generated@@165 ($generated@@165 ($generated@@188 $generated@@182) ($generated@@180 ($generated@@8 $generated@@194))) ($generated@@180 ($generated@@8 $generated@@195))))) (=> ($generated@@157 ($generated@@165 ($generated@@165 ($generated@@188 $generated@@182) ($generated@@180 ($generated@@8 $generated@@192))) ($generated@@180 ($generated@@8 $generated@@193))) ($generated@@165 ($generated@@165 ($generated@@188 $generated@@182) ($generated@@180 ($generated@@8 $generated@@194))) ($generated@@180 ($generated@@8 $generated@@195)))) (=> (= (ControlFlow 0 2) (- 0 1)) (<= $generated@@194 $generated@@195))))))
(let (($generated@@204  (=> (and (and (<= $generated@@193 $generated@@192) (= $generated@@194 $generated@@193)) (and (= $generated@@195 $generated@@192) (= (ControlFlow 0 5) 2))) $generated@@203)))
(let (($generated@@205  (=> (and (and (< $generated@@192 $generated@@193) (= $generated@@194 $generated@@192)) (and (= $generated@@195 $generated@@193) (= (ControlFlow 0 4) 2))) $generated@@203)))
(let (($generated@@206  (=> (= $generated@@196 ($generated@@45 $generated@@197 $generated@@198 $generated@@199 false)) (and (=> (= (ControlFlow 0 6) 4) $generated@@205) (=> (= (ControlFlow 0 6) 5) $generated@@204)))))
(let (($generated@@207  (=> (and (and ($generated@@200 $generated@@198) ($generated@@201 $generated@@198)) (and (= 0 $generated@@202) (= (ControlFlow 0 7) 6))) $generated@@206)))
$generated@@207))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
