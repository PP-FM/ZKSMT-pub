(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 (T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@60 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@157 () Int)
(declare-fun $generated@@158 (T@U Int Int) Bool)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@160 (Int) Int)
(declare-fun $generated@@161 () T@T)
(declare-fun $generated@@162 (Int Int) Bool)
(declare-fun $generated@@163 (Int Int) Bool)
(declare-fun $generated@@164 (T@U) T@U)
(declare-fun $generated@@165 (Int Int) Bool)
(declare-fun $generated@@187 (T@U) T@U)
(declare-fun $generated@@188 (T@T T@U) T@U)
(declare-fun $generated@@189 () T@T)
(declare-fun $generated@@199 (T@U) T@U)
(declare-fun $generated@@200 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (= ($generated@@1 ($generated@@48 $generated@@61 $generated@@62)) 6)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@53 ($generated@@48 $generated@@63 $generated@@64)) $generated@@63)
 :pattern ( ($generated@@48 $generated@@63 $generated@@64))
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@48 $generated@@65 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (let (($generated@@69 ($generated@@54 (type $generated@@67))))
(= (type ($generated@@52 $generated@@67 $generated@@68)) $generated@@69))
 :pattern ( ($generated@@52 $generated@@67 $generated@@68))
))) (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (let (($generated@@73 (type $generated@@72)))
(let (($generated@@74 (type $generated@@71)))
(= (type ($generated@@55 $generated@@70 $generated@@71 $generated@@72)) ($generated@@48 $generated@@74 $generated@@73))))
 :pattern ( ($generated@@55 $generated@@70 $generated@@71 $generated@@72))
))) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (let (($generated@@78 ($generated@@54 (type $generated@@75))))
 (=> (= (type $generated@@77) $generated@@78) (= ($generated@@52 ($generated@@55 $generated@@75 $generated@@76 $generated@@77) $generated@@76) $generated@@77)))
 :weight 0
))) (and (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@52 ($generated@@55 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@52 $generated@@80 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or true (= ($generated@@52 ($generated@@55 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@52 $generated@@84 $generated@@86)))
 :weight 0
)))) (forall (($generated@@87 T@T) ) (= ($generated@@1 ($generated@@50 $generated@@87)) 7))) (forall (($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@50 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@50 $generated@@88))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (let (($generated@@91 ($generated@@46 (type $generated@@90))))
(= (type ($generated@@51 $generated@@89 $generated@@90)) $generated@@91))
 :pattern ( ($generated@@51 $generated@@89 $generated@@90))
))) (= ($generated@@1 $generated@@49) 8)) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= (type ($generated@@56 $generated@@92 $generated@@93 $generated@@94)) $generated@@49)
 :pattern ( ($generated@@56 $generated@@92 $generated@@93 $generated@@94))
))) (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (let (($generated@@98 ($generated@@46 (type $generated@@96))))
 (=> (= (type $generated@@97) $generated@@98) (= ($generated@@51 ($generated@@56 $generated@@95 $generated@@96 $generated@@97) $generated@@96) $generated@@97)))
 :weight 0
))) (and (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@51 ($generated@@56 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@51 $generated@@100 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or true (= ($generated@@51 ($generated@@56 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@51 $generated@@104 $generated@@106)))
 :weight 0
)))) (= ($generated@@1 $generated@@47) 9)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@1 ($generated@@57 $generated@@107 $generated@@108)) 10))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@58 ($generated@@57 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@57 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@59 ($generated@@57 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@57 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (let (($generated@@116 ($generated@@59 (type $generated@@113))))
(= (type ($generated@@44 $generated@@113 $generated@@114 $generated@@115)) $generated@@116))
 :pattern ( ($generated@@44 $generated@@113 $generated@@114 $generated@@115))
))) (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (let (($generated@@121 (type $generated@@120)))
(let (($generated@@122 (type $generated@@118)))
(= (type ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120)) ($generated@@57 $generated@@122 $generated@@121))))
 :pattern ( ($generated@@60 $generated@@117 $generated@@118 $generated@@119 $generated@@120))
))) (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@59 (type $generated@@123))))
 (=> (= (type $generated@@126) $generated@@127) (= ($generated@@44 ($generated@@60 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@124 $generated@@125) $generated@@126)))
 :weight 0
))) (and (and (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@44 ($generated@@60 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@44 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@44 ($generated@@60 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@44 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or true (= ($generated@@44 ($generated@@60 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@44 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ) (! (= (type ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149)) ($generated@@57 $generated@@47 $generated@@4))
 :pattern ( ($generated@@45 $generated@@146 $generated@@147 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (let (($generated@@156 ($generated@@46 (type $generated@@155))))
 (=> (and (and (and (and (= (type $generated@@150) $generated@@47) (= (type $generated@@151) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@152) ($generated@@50 $generated@@4))) (= (type $generated@@154) $generated@@47)) (= (type $generated@@155) ($generated@@50 $generated@@156))) (= ($generated@@0 ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (not (= $generated@@154 $generated@@150)) ($generated@@0 ($generated@@51 ($generated@@52 $generated@@151 $generated@@154) $generated@@152))) $generated@@153))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert  (and (and (= ($generated@@1 $generated@@161) 11) (forall (($generated@@166 T@U) ) (! (= (type ($generated@@159 $generated@@166)) $generated@@161)
 :pattern ( ($generated@@159 $generated@@166))
))) (forall (($generated@@167 T@U) ) (! (let (($generated@@168 (type $generated@@167)))
(= (type ($generated@@164 $generated@@167)) $generated@@168))
 :pattern ( ($generated@@164 $generated@@167))
))))
(assert  (=> (<= 1 $generated@@157) (forall (($generated@@169 T@U) ($generated@@170 Int) ($generated@@171 Int) ) (!  (=> (and (= (type $generated@@169) $generated@@161) (or ($generated@@162 ($generated@@160 $generated@@170) ($generated@@160 $generated@@171)) (not (= 1 $generated@@157)))) (and ($generated@@163 ($generated@@160 $generated@@170) ($generated@@160 $generated@@171)) (= ($generated@@158 ($generated@@159 $generated@@169) ($generated@@160 $generated@@170) ($generated@@160 $generated@@171)) ($generated@@0 ($generated@@164 ($generated@@11 ($generated@@165 ($generated@@160 $generated@@170) ($generated@@160 $generated@@171))))))))
 :weight 3
 :pattern ( ($generated@@158 ($generated@@159 $generated@@169) ($generated@@160 $generated@@170) ($generated@@160 $generated@@171)))
))))
(assert  (=> (<= 1 $generated@@157) (forall (($generated@@172 T@U) ($generated@@173 Int) ($generated@@174 Int) ) (!  (=> (and (= (type $generated@@172) $generated@@161) (or ($generated@@162 $generated@@173 $generated@@174) (not (= 1 $generated@@157)))) (and ($generated@@163 $generated@@173 $generated@@174) (= ($generated@@158 ($generated@@159 $generated@@172) $generated@@173 $generated@@174) ($generated@@165 $generated@@173 $generated@@174))))
 :pattern ( ($generated@@158 ($generated@@159 $generated@@172) $generated@@173 $generated@@174))
))))
(assert (forall (($generated@@175 Int) ) (! (= ($generated@@160 $generated@@175) $generated@@175)
 :pattern ( ($generated@@160 $generated@@175))
)))
(assert (forall (($generated@@176 T@U) ) (! (= ($generated@@164 $generated@@176) $generated@@176)
 :pattern ( ($generated@@164 $generated@@176))
)))
(assert (forall (($generated@@177 T@U) ($generated@@178 Int) ($generated@@179 Int) ) (!  (=> (= (type $generated@@177) $generated@@161) (= ($generated@@158 ($generated@@159 $generated@@177) $generated@@178 $generated@@179) ($generated@@158 $generated@@177 $generated@@178 $generated@@179)))
 :pattern ( ($generated@@158 ($generated@@159 $generated@@177) $generated@@178 $generated@@179))
)))
(assert  (=> (<= 0 $generated@@157) (forall (($generated@@180 Int) ($generated@@181 Int) ) (!  (=> (or ($generated@@163 $generated@@180 $generated@@181) (not (= 0 $generated@@157))) true)
 :pattern ( ($generated@@165 $generated@@180 $generated@@181))
))))
(assert  (=> (<= 1 $generated@@157) (forall (($generated@@182 T@U) ($generated@@183 Int) ($generated@@184 Int) ) (!  (=> (and (= (type $generated@@182) $generated@@161) (or ($generated@@162 $generated@@183 $generated@@184) (not (= 1 $generated@@157)))) true)
 :pattern ( ($generated@@158 $generated@@182 $generated@@183 $generated@@184))
))))
(assert  (=> (<= 0 $generated@@157) (forall (($generated@@185 Int) ($generated@@186 Int) ) (!  (=> (or ($generated@@163 ($generated@@160 $generated@@185) ($generated@@160 $generated@@186)) (not (= 0 $generated@@157))) (= ($generated@@165 ($generated@@160 $generated@@185) ($generated@@160 $generated@@186)) (= ($generated@@160 $generated@@185) ($generated@@160 $generated@@186))))
 :weight 3
 :pattern ( ($generated@@165 ($generated@@160 $generated@@185) ($generated@@160 $generated@@186)))
))))
(assert  (and (and (= ($generated@@1 $generated@@189) 12) (forall (($generated@@190 T@U) ) (! (= (type ($generated@@187 $generated@@190)) $generated@@189)
 :pattern ( ($generated@@187 $generated@@190))
))) (forall (($generated@@191 T@T) ($generated@@192 T@U) ) (! (= (type ($generated@@188 $generated@@191 $generated@@192)) $generated@@191)
 :pattern ( ($generated@@188 $generated@@191 $generated@@192))
))))
(assert (forall (($generated@@193 T@U) ) (! (let (($generated@@194 (type $generated@@193)))
(= ($generated@@188 $generated@@194 ($generated@@187 $generated@@193)) $generated@@193))
 :pattern ( ($generated@@187 $generated@@193))
)))
(assert (forall (($generated@@195 Int) ) (! (= ($generated@@187 ($generated@@8 ($generated@@160 $generated@@195))) ($generated@@164 ($generated@@187 ($generated@@8 $generated@@195))))
 :pattern ( ($generated@@187 ($generated@@8 ($generated@@160 $generated@@195))))
)))
(assert (forall (($generated@@196 T@U) ) (! (= ($generated@@187 ($generated@@164 $generated@@196)) ($generated@@164 ($generated@@187 $generated@@196)))
 :pattern ( ($generated@@187 ($generated@@164 $generated@@196)))
)))
(assert  (=> (<= 0 $generated@@157) (forall (($generated@@197 Int) ($generated@@198 Int) ) (!  (=> (or ($generated@@163 $generated@@197 $generated@@198) (not (= 0 $generated@@157))) (= ($generated@@165 $generated@@197 $generated@@198) (= $generated@@197 $generated@@198)))
 :pattern ( ($generated@@165 $generated@@197 $generated@@198))
))))
(assert  (and (forall (($generated@@201 T@U) ) (! (= (type ($generated@@199 $generated@@201)) $generated@@161)
 :pattern ( ($generated@@199 $generated@@201))
)) (= (type $generated@@200) $generated@@161)))
(assert (forall (($generated@@202 T@U) ($generated@@203 Int) ($generated@@204 Int) ) (!  (=> (= (type $generated@@202) $generated@@161) (= ($generated@@158 $generated@@202 $generated@@203 $generated@@204) ($generated@@158 $generated@@200 $generated@@203 $generated@@204)))
 :pattern ( ($generated@@158 ($generated@@199 $generated@@202) $generated@@203 $generated@@204))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@205 () T@U)
(declare-fun $generated@@206 () T@U)
(declare-fun $generated@@207 () T@U)
(declare-fun $generated@@208 () T@U)
(declare-fun $generated@@209 () T@U)
(declare-fun $generated@@210 () T@U)
(declare-fun $generated@@211 () T@U)
(declare-fun $generated@@212 () T@U)
(declare-fun $generated@@213 () Int)
(declare-fun $generated@@214 () Int)
(declare-fun $generated@@215 (T@U) Bool)
(declare-fun $generated@@216 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (= (type $generated@@205) $generated@@161) (= (type $generated@@206) $generated@@161)) (= (type $generated@@207) $generated@@161)) (= (type $generated@@208) $generated@@161)) (= (type $generated@@209) ($generated@@57 $generated@@47 $generated@@4))) (= (type $generated@@210) $generated@@47)) (= (type $generated@@211) ($generated@@48 $generated@@47 $generated@@49))) (= (type $generated@@212) ($generated@@50 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@217  (=> (and (= ($generated@@199 $generated@@205) $generated@@205) (= ($generated@@199 $generated@@206) $generated@@206)) (=> (and (and (= ($generated@@199 $generated@@207) $generated@@207) (= ($generated@@199 $generated@@208) $generated@@208)) (and (= $generated@@209 ($generated@@45 $generated@@210 $generated@@211 $generated@@212 false)) (= (ControlFlow 0 2) (- 0 1)))) (= $generated@@213 $generated@@214)))))
(let (($generated@@218  (=> (and (and (and ($generated@@215 $generated@@211) ($generated@@216 $generated@@211)) (= 2 $generated@@157)) (and ($generated@@158 $generated@@206 $generated@@213 $generated@@214) (= (ControlFlow 0 3) 2))) $generated@@217)))
$generated@@218)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () Int)
(declare-fun $generated@@45 (T@U) Int)
(declare-fun $generated@@46 (T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () Bool)
(declare-fun $generated@@49 () Bool)
(declare-fun $generated@@50 (Int) Int)
(declare-fun $generated@@51 () Int)
(declare-fun $generated@@55 (T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 (T@T T@T) T@T)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U) T@U)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@U T@U T@U) T@U)
(declare-fun $generated@@67 (T@U T@U T@U) T@U)
(declare-fun $generated@@68 (T@T T@T) T@T)
(declare-fun $generated@@69 (T@T) T@T)
(declare-fun $generated@@70 (T@T) T@T)
(declare-fun $generated@@71 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@169 (T@U) T@U)
(declare-fun $generated@@174 (T@U) T@U)
(declare-fun $generated@@175 (T@T T@U) T@U)
(declare-fun $generated@@176 () T@T)
(declare-fun $generated@@182 (T@U) T@U)
(declare-fun $generated@@183 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (= ($generated@@1 $generated@@47) 6) (forall (($generated@@52 T@U) ) (! (= (type ($generated@@46 $generated@@52)) $generated@@47)
 :pattern ( ($generated@@46 $generated@@52))
))))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@53 T@U) ) (!  (=> (and (= (type $generated@@53) $generated@@47) (or $generated@@48 (not (= 1 $generated@@44)))) (and $generated@@49 (= ($generated@@45 ($generated@@46 $generated@@53)) ($generated@@50 $generated@@51))))
 :pattern ( ($generated@@45 ($generated@@46 $generated@@53)))
))))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@54 T@U) ) (!  (=> (and (= (type $generated@@54) $generated@@47) (or $generated@@48 (not (= 1 $generated@@44)))) (and $generated@@49 (= ($generated@@45 ($generated@@46 $generated@@54)) ($generated@@50 $generated@@51))))
 :weight 3
 :pattern ( ($generated@@45 ($generated@@46 $generated@@54)))
))))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (= ($generated@@1 ($generated@@59 $generated@@72 $generated@@73)) 7)) (forall (($generated@@74 T@T) ($generated@@75 T@T) ) (! (= ($generated@@64 ($generated@@59 $generated@@74 $generated@@75)) $generated@@74)
 :pattern ( ($generated@@59 $generated@@74 $generated@@75))
))) (forall (($generated@@76 T@T) ($generated@@77 T@T) ) (! (= ($generated@@65 ($generated@@59 $generated@@76 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@59 $generated@@76 $generated@@77))
))) (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (! (let (($generated@@80 ($generated@@65 (type $generated@@78))))
(= (type ($generated@@63 $generated@@78 $generated@@79)) $generated@@80))
 :pattern ( ($generated@@63 $generated@@78 $generated@@79))
))) (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (let (($generated@@84 (type $generated@@83)))
(let (($generated@@85 (type $generated@@82)))
(= (type ($generated@@66 $generated@@81 $generated@@82 $generated@@83)) ($generated@@59 $generated@@85 $generated@@84))))
 :pattern ( ($generated@@66 $generated@@81 $generated@@82 $generated@@83))
))) (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (let (($generated@@89 ($generated@@65 (type $generated@@86))))
 (=> (= (type $generated@@88) $generated@@89) (= ($generated@@63 ($generated@@66 $generated@@86 $generated@@87 $generated@@88) $generated@@87) $generated@@88)))
 :weight 0
))) (and (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@92 $generated@@93) (= ($generated@@63 ($generated@@66 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@63 $generated@@91 $generated@@93)))
 :weight 0
)) (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or true (= ($generated@@63 ($generated@@66 $generated@@95 $generated@@96 $generated@@94) $generated@@97) ($generated@@63 $generated@@95 $generated@@97)))
 :weight 0
)))) (forall (($generated@@98 T@T) ) (= ($generated@@1 ($generated@@61 $generated@@98)) 8))) (forall (($generated@@99 T@T) ) (! (= ($generated@@57 ($generated@@61 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@61 $generated@@99))
))) (forall (($generated@@100 T@U) ($generated@@101 T@U) ) (! (let (($generated@@102 ($generated@@57 (type $generated@@101))))
(= (type ($generated@@62 $generated@@100 $generated@@101)) $generated@@102))
 :pattern ( ($generated@@62 $generated@@100 $generated@@101))
))) (= ($generated@@1 $generated@@60) 9)) (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= (type ($generated@@67 $generated@@103 $generated@@104 $generated@@105)) $generated@@60)
 :pattern ( ($generated@@67 $generated@@103 $generated@@104 $generated@@105))
))) (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (let (($generated@@109 ($generated@@57 (type $generated@@107))))
 (=> (= (type $generated@@108) $generated@@109) (= ($generated@@62 ($generated@@67 $generated@@106 $generated@@107 $generated@@108) $generated@@107) $generated@@108)))
 :weight 0
))) (and (forall (($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@112 $generated@@113) (= ($generated@@62 ($generated@@67 $generated@@111 $generated@@112 $generated@@110) $generated@@113) ($generated@@62 $generated@@111 $generated@@113)))
 :weight 0
)) (forall (($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or true (= ($generated@@62 ($generated@@67 $generated@@115 $generated@@116 $generated@@114) $generated@@117) ($generated@@62 $generated@@115 $generated@@117)))
 :weight 0
)))) (= ($generated@@1 $generated@@58) 10)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (= ($generated@@1 ($generated@@68 $generated@@118 $generated@@119)) 11))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (! (= ($generated@@69 ($generated@@68 $generated@@120 $generated@@121)) $generated@@120)
 :pattern ( ($generated@@68 $generated@@120 $generated@@121))
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (! (= ($generated@@70 ($generated@@68 $generated@@122 $generated@@123)) $generated@@123)
 :pattern ( ($generated@@68 $generated@@122 $generated@@123))
))) (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (let (($generated@@127 ($generated@@70 (type $generated@@124))))
(= (type ($generated@@55 $generated@@124 $generated@@125 $generated@@126)) $generated@@127))
 :pattern ( ($generated@@55 $generated@@124 $generated@@125 $generated@@126))
))) (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (let (($generated@@132 (type $generated@@131)))
(let (($generated@@133 (type $generated@@129)))
(= (type ($generated@@71 $generated@@128 $generated@@129 $generated@@130 $generated@@131)) ($generated@@68 $generated@@133 $generated@@132))))
 :pattern ( ($generated@@71 $generated@@128 $generated@@129 $generated@@130 $generated@@131))
))) (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (let (($generated@@138 ($generated@@70 (type $generated@@134))))
 (=> (= (type $generated@@137) $generated@@138) (= ($generated@@55 ($generated@@71 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@135 $generated@@136) $generated@@137)))
 :weight 0
))) (and (and (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@141 $generated@@143) (= ($generated@@55 ($generated@@71 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@55 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
)) (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or (= $generated@@148 $generated@@150) (= ($generated@@55 ($generated@@71 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@55 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
))) (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ) (!  (or true (= ($generated@@55 ($generated@@71 $generated@@152 $generated@@153 $generated@@154 $generated@@151) $generated@@155 $generated@@156) ($generated@@55 $generated@@152 $generated@@155 $generated@@156)))
 :weight 0
)))) (forall (($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 Bool) ) (! (= (type ($generated@@56 $generated@@157 $generated@@158 $generated@@159 $generated@@160)) ($generated@@68 $generated@@58 $generated@@4))
 :pattern ( ($generated@@56 $generated@@157 $generated@@158 $generated@@159 $generated@@160))
))))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 Bool) ($generated@@165 T@U) ($generated@@166 T@U) ) (! (let (($generated@@167 ($generated@@57 (type $generated@@166))))
 (=> (and (and (and (and (= (type $generated@@161) $generated@@58) (= (type $generated@@162) ($generated@@59 $generated@@58 $generated@@60))) (= (type $generated@@163) ($generated@@61 $generated@@4))) (= (type $generated@@165) $generated@@58)) (= (type $generated@@166) ($generated@@61 $generated@@167))) (= ($generated@@0 ($generated@@55 ($generated@@56 $generated@@161 $generated@@162 $generated@@163 $generated@@164) $generated@@165 $generated@@166))  (=> (and (not (= $generated@@165 $generated@@161)) ($generated@@0 ($generated@@62 ($generated@@63 $generated@@162 $generated@@165) $generated@@163))) $generated@@164))))
 :pattern ( ($generated@@55 ($generated@@56 $generated@@161 $generated@@162 $generated@@163 $generated@@164) $generated@@165 $generated@@166))
)))
(assert (forall (($generated@@168 Int) ) (! (= ($generated@@50 $generated@@168) $generated@@168)
 :pattern ( ($generated@@50 $generated@@168))
)))
(assert (forall (($generated@@170 T@U) ) (! (let (($generated@@171 (type $generated@@170)))
(= (type ($generated@@169 $generated@@170)) $generated@@171))
 :pattern ( ($generated@@169 $generated@@170))
)))
(assert (forall (($generated@@172 T@U) ) (! (= ($generated@@169 $generated@@172) $generated@@172)
 :pattern ( ($generated@@169 $generated@@172))
)))
(assert  (=> (<= 1 $generated@@44) (forall (($generated@@173 T@U) ) (!  (=> (and (= (type $generated@@173) $generated@@47) (or $generated@@48 (not (= 1 $generated@@44)))) true)
 :pattern ( ($generated@@45 $generated@@173))
))))
(assert  (=> (<= 0 $generated@@44) (=> (or $generated@@49 (not (= 0 $generated@@44))) (= $generated@@51 ($generated@@50 6)))))
(assert  (=> (<= 0 $generated@@44) (=> (or $generated@@49 (not (= 0 $generated@@44))) (= $generated@@51 ($generated@@50 6)))))
(assert  (=> (<= 0 $generated@@44) (=> (or $generated@@49 (not (= 0 $generated@@44))) true)))
(assert  (and (and (= ($generated@@1 $generated@@176) 12) (forall (($generated@@177 T@U) ) (! (= (type ($generated@@174 $generated@@177)) $generated@@176)
 :pattern ( ($generated@@174 $generated@@177))
))) (forall (($generated@@178 T@T) ($generated@@179 T@U) ) (! (= (type ($generated@@175 $generated@@178 $generated@@179)) $generated@@178)
 :pattern ( ($generated@@175 $generated@@178 $generated@@179))
))))
(assert (forall (($generated@@180 T@U) ) (! (let (($generated@@181 (type $generated@@180)))
(= ($generated@@175 $generated@@181 ($generated@@174 $generated@@180)) $generated@@180))
 :pattern ( ($generated@@174 $generated@@180))
)))
(assert  (and (forall (($generated@@184 T@U) ) (! (= (type ($generated@@182 $generated@@184)) $generated@@47)
 :pattern ( ($generated@@182 $generated@@184))
)) (= (type $generated@@183) $generated@@47)))
(assert (forall (($generated@@185 T@U) ) (!  (=> (= (type $generated@@185) $generated@@47) (= ($generated@@45 $generated@@185) ($generated@@45 $generated@@183)))
 :pattern ( ($generated@@45 ($generated@@182 $generated@@185)))
)))
(assert (forall (($generated@@186 T@U) ) (!  (=> (= (type $generated@@186) $generated@@47) (= ($generated@@45 ($generated@@46 $generated@@186)) ($generated@@45 $generated@@186)))
 :pattern ( ($generated@@45 ($generated@@46 $generated@@186)))
)))
(assert (forall (($generated@@187 Int) ) (! (= ($generated@@174 ($generated@@8 ($generated@@50 $generated@@187))) ($generated@@169 ($generated@@174 ($generated@@8 $generated@@187))))
 :pattern ( ($generated@@174 ($generated@@8 ($generated@@50 $generated@@187))))
)))
(assert (forall (($generated@@188 T@U) ) (! (= ($generated@@174 ($generated@@169 $generated@@188)) ($generated@@169 ($generated@@174 $generated@@188)))
 :pattern ( ($generated@@174 ($generated@@169 $generated@@188)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@189 () T@U)
(declare-fun $generated@@190 () T@U)
(declare-fun $generated@@191 () T@U)
(declare-fun $generated@@192 () T@U)
(declare-fun $generated@@193 () T@U)
(declare-fun $generated@@194 () T@U)
(declare-fun $generated@@195 () T@U)
(declare-fun $generated@@196 () T@U)
(declare-fun $generated@@197 (T@U) Bool)
(declare-fun $generated@@198 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (= (type $generated@@189) $generated@@47) (= (type $generated@@190) $generated@@47)) (= (type $generated@@191) $generated@@47)) (= (type $generated@@192) $generated@@47)) (= (type $generated@@193) ($generated@@68 $generated@@58 $generated@@4))) (= (type $generated@@194) $generated@@58)) (= (type $generated@@195) ($generated@@59 $generated@@58 $generated@@60))) (= (type $generated@@196) ($generated@@61 $generated@@4))))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@199  (=> (and (and (and (= ($generated@@182 $generated@@189) $generated@@189) (= ($generated@@182 $generated@@190) $generated@@190)) (and (= ($generated@@182 $generated@@191) $generated@@191) (= ($generated@@182 $generated@@192) $generated@@192))) (and (and (= $generated@@193 ($generated@@56 $generated@@194 $generated@@195 $generated@@196 false)) $generated@@48) (and $generated@@48 (= (ControlFlow 0 2) (- 0 1))))) (= ($generated@@45 $generated@@192) ($generated@@50 6)))))
(let (($generated@@200  (=> (and (and ($generated@@197 $generated@@195) ($generated@@198 $generated@@195)) (and (= 2 $generated@@44) (= (ControlFlow 0 3) 2))) $generated@@199)))
$generated@@200)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
