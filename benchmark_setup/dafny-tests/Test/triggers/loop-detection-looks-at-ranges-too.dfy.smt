(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Int)
(declare-fun $generated@@0 (T@U) Bool)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (RoundingMode) T@U)
(declare-fun $generated@@13 (T@U) RoundingMode)
(declare-fun $generated@@14 (String) T@U)
(declare-fun $generated@@15 (T@U) String)
(declare-fun $generated@@16 ((RegEx String)) T@U)
(declare-fun $generated@@17 (T@U) (RegEx String))
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@55 () T@U)
(declare-fun $generated@@56 () T@U)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@58 () T@U)
(declare-fun $generated@@59 () T@U)
(declare-fun $generated@@60 () T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@67 (T@U) T@U)
(declare-fun $generated@@69 (T@U T@U T@U) Bool)
(declare-fun $generated@@70 (Int) T@U)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@76 (T@U T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@U T@U) T@U)
(declare-fun $generated@@79 (T@U T@U T@U) T@U)
(declare-fun $generated@@127 (T@U T@U T@U) T@U)
(declare-fun $generated@@128 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@129 (T@T T@T) T@T)
(declare-fun $generated@@130 (T@T) T@T)
(declare-fun $generated@@131 (T@T) T@T)
(declare-fun $generated@@132 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@183 (T@U) T@U)
(declare-fun $generated@@187 () Int)
(declare-fun $generated@@188 (Int) Bool)
(declare-fun $generated@@189 (Int) Bool)
(declare-fun $generated@@191 (T@T) T@U)
(declare-fun $generated@@192 (T@U) Int)
(declare-fun $generated@@193 (T@T) T@T)
(declare-fun $generated@@194 (T@T) T@T)
(declare-fun $generated@@199 (T@U T@U T@U) Bool)
(declare-fun $generated@@200 (T@U) T@U)
(declare-fun $generated@@201 () T@T)
(declare-fun $generated@@206 (T@U) T@U)
(declare-fun $generated@@207 (T@T T@T) T@U)
(declare-fun $generated@@208 (T@T T@T) T@T)
(declare-fun $generated@@209 (T@T) T@T)
(declare-fun $generated@@210 (T@T) T@T)
(declare-fun $generated@@224 (T@U) T@U)
(declare-fun $generated@@225 (T@T T@T) T@U)
(declare-fun $generated@@226 (T@T T@T) T@T)
(declare-fun $generated@@227 (T@T) T@T)
(declare-fun $generated@@228 (T@T) T@T)
(declare-fun $generated@@250 (T@U) T@U)
(declare-fun $generated@@256 (T@U) T@U)
(declare-fun $generated@@262 (T@U T@U) T@U)
(declare-fun $generated@@263 (T@U) T@U)
(declare-fun $generated@@274 (T@U T@U) T@U)
(declare-fun $generated@@275 (T@U) T@U)
(declare-fun $generated@@286 (T@T) T@U)
(declare-fun $generated@@293 (T@U) T@U)
(declare-fun $generated@@297 (T@U) T@U)
(declare-fun $generated@@303 (T@U) T@U)
(declare-fun $generated@@307 (T@U) T@U)
(declare-fun $generated@@313 (T@U) T@U)
(declare-fun $generated@@314 (T@U Int) T@U)
(declare-fun $generated@@323 (T@U) Int)
(declare-fun $generated@@325 (T@U) T@U)
(declare-fun $generated@@329 (T@U) T@U)
(declare-fun $generated@@333 (T@U) T@U)
(declare-fun $generated@@334 (T@U) T@U)
(declare-fun $generated@@339 (T@U) T@U)
(declare-fun $generated@@343 (T@T T@U) T@U)
(declare-fun $generated@@363 () T@T)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (= ($generated@@1 $generated@@5) 3)) (= ($generated@@1 $generated@@6) 4)) (= ($generated@@1 $generated@@7) 5)) (forall (($generated@@18 Int) ) (! (= ($generated ($generated@@8 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@8 $generated@@18))
))) (forall (($generated@@19 T@U) ) (!  (=> (= (type $generated@@19) $generated@@2) (= ($generated@@8 ($generated $generated@@19)) $generated@@19))
 :pattern ( ($generated $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= (type ($generated@@8 $generated@@20)) $generated@@2)
 :pattern ( ($generated@@8 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@9 $generated@@21))
))) (forall (($generated@@22 T@U) ) (!  (=> (= (type $generated@@22) $generated@@3) (= ($generated@@9 ($generated@@10 $generated@@22)) $generated@@22))
 :pattern ( ($generated@@10 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= (type ($generated@@9 $generated@@23)) $generated@@3)
 :pattern ( ($generated@@9 $generated@@23))
))) (forall (($generated@@24 Bool) ) (! (= ($generated@@0 ($generated@@11 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@11 $generated@@24))
))) (forall (($generated@@25 T@U) ) (!  (=> (= (type $generated@@25) $generated@@4) (= ($generated@@11 ($generated@@0 $generated@@25)) $generated@@25))
 :pattern ( ($generated@@0 $generated@@25))
))) (forall (($generated@@26 Bool) ) (! (= (type ($generated@@11 $generated@@26)) $generated@@4)
 :pattern ( ($generated@@11 $generated@@26))
))) (forall (($generated@@27 RoundingMode) ) (! (= ($generated@@13 ($generated@@12 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@12 $generated@@27))
))) (forall (($generated@@28 T@U) ) (!  (=> (= (type $generated@@28) $generated@@5) (= ($generated@@12 ($generated@@13 $generated@@28)) $generated@@28))
 :pattern ( ($generated@@13 $generated@@28))
))) (forall (($generated@@29 RoundingMode) ) (! (= (type ($generated@@12 $generated@@29)) $generated@@5)
 :pattern ( ($generated@@12 $generated@@29))
))) (forall (($generated@@30 String) ) (! (= ($generated@@15 ($generated@@14 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@14 $generated@@30))
))) (forall (($generated@@31 T@U) ) (!  (=> (= (type $generated@@31) $generated@@6) (= ($generated@@14 ($generated@@15 $generated@@31)) $generated@@31))
 :pattern ( ($generated@@15 $generated@@31))
))) (forall (($generated@@32 String) ) (! (= (type ($generated@@14 $generated@@32)) $generated@@6)
 :pattern ( ($generated@@14 $generated@@32))
))) (forall (($generated@@33 (RegEx String)) ) (! (= ($generated@@17 ($generated@@16 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@16 $generated@@33))
))) (forall (($generated@@34 T@U) ) (!  (=> (= (type $generated@@34) $generated@@7) (= ($generated@@16 ($generated@@17 $generated@@34)) $generated@@34))
 :pattern ( ($generated@@17 $generated@@34))
))) (forall (($generated@@35 (RegEx String)) ) (! (= (type ($generated@@16 $generated@@35)) $generated@@7)
 :pattern ( ($generated@@16 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ) (! (UOrdering2 $generated@@36 $generated@@36)
 :no-pattern ($generated $generated@@36)
 :no-pattern ($generated@@0 $generated@@36)
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (let (($generated@@40 (type $generated@@37)))
 (=> (and (and (= (type $generated@@38) $generated@@40) (= (type $generated@@39) $generated@@40)) (and (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))) (UOrdering2 $generated@@37 $generated@@39)))
 :pattern ( (UOrdering2 $generated@@37 $generated@@38) (UOrdering2 $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (let (($generated@@43 (type $generated@@41)))
 (=> (= (type $generated@@42) $generated@@43) (=> (and (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41)) (= $generated@@41 $generated@@42))))
 :pattern ( (UOrdering2 $generated@@41 $generated@@42) (UOrdering2 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@61) 6) (= (type $generated@@44) $generated@@61)) (= (type $generated@@45) $generated@@61)) (= (type $generated@@46) $generated@@61)) (= (type $generated@@47) $generated@@61)) (= (type $generated@@48) $generated@@61)) (= ($generated@@1 $generated@@62) 7)) (= (type $generated@@49) $generated@@62)) (= (type $generated@@50) $generated@@62)) (= (type $generated@@51) $generated@@62)) (= (type $generated@@52) $generated@@62)) (= (type $generated@@53) $generated@@62)) (= (type $generated@@54) $generated@@62)) (= (type $generated@@55) $generated@@62)) (= (type $generated@@56) $generated@@62)) (= (type $generated@@57) $generated@@62)) (= (type $generated@@58) $generated@@62)) (= (type $generated@@59) $generated@@62)) (forall (($generated@@65 T@T) ) (= ($generated@@1 ($generated@@63 $generated@@65)) 8))) (forall (($generated@@66 T@T) ) (! (= ($generated@@64 ($generated@@63 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@63 $generated@@66))
))) (= (type $generated@@60) ($generated@@63 $generated@@4))))
(assert (distinct $generated@@44 $generated@@45 $generated@@46 $generated@@47 $generated@@48 $generated@@49 $generated@@50 $generated@@51 $generated@@52 $generated@@53 $generated@@54 $generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59 $generated@@60)
)
(assert (forall (($generated@@68 T@U) ) (! (= (type ($generated@@67 $generated@@68)) $generated@@62)
 :pattern ( ($generated@@67 $generated@@68))
)))
(assert (= ($generated@@67 $generated@@44) $generated@@49))
(assert (= ($generated@@67 $generated@@45) $generated@@50))
(assert (= ($generated@@67 $generated@@46) $generated@@51))
(assert (= ($generated@@67 $generated@@47) $generated@@52))
(assert (= ($generated@@67 $generated@@48) $generated@@53))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ) (= ($generated@@1 ($generated@@71 $generated@@80 $generated@@81)) 9)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@82 $generated@@83)) $generated@@82)
 :pattern ( ($generated@@71 $generated@@82 $generated@@83))
))) (forall (($generated@@84 T@T) ($generated@@85 T@T) ) (! (= ($generated@@75 ($generated@@71 $generated@@84 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@71 $generated@@84 $generated@@85))
))) (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (let (($generated@@88 ($generated@@75 (type $generated@@86))))
(= (type ($generated@@76 $generated@@86 $generated@@87)) $generated@@88))
 :pattern ( ($generated@@76 $generated@@86 $generated@@87))
))) (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (let (($generated@@92 (type $generated@@91)))
(let (($generated@@93 (type $generated@@90)))
(= (type ($generated@@77 $generated@@89 $generated@@90 $generated@@91)) ($generated@@71 $generated@@93 $generated@@92))))
 :pattern ( ($generated@@77 $generated@@89 $generated@@90 $generated@@91))
))) (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (let (($generated@@97 ($generated@@75 (type $generated@@94))))
 (=> (= (type $generated@@96) $generated@@97) (= ($generated@@76 ($generated@@77 $generated@@94 $generated@@95 $generated@@96) $generated@@95) $generated@@96)))
 :weight 0
))) (and (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@100 $generated@@101) (= ($generated@@76 ($generated@@77 $generated@@99 $generated@@100 $generated@@98) $generated@@101) ($generated@@76 $generated@@99 $generated@@101)))
 :weight 0
)) (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or true (= ($generated@@76 ($generated@@77 $generated@@103 $generated@@104 $generated@@102) $generated@@105) ($generated@@76 $generated@@103 $generated@@105)))
 :weight 0
)))) (= ($generated@@1 $generated@@72) 10)) (forall (($generated@@106 T@U) ($generated@@107 T@U) ) (! (let (($generated@@108 ($generated@@64 (type $generated@@107))))
(= (type ($generated@@78 $generated@@106 $generated@@107)) $generated@@108))
 :pattern ( ($generated@@78 $generated@@106 $generated@@107))
))) (= ($generated@@1 $generated@@73) 11)) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= (type ($generated@@79 $generated@@109 $generated@@110 $generated@@111)) $generated@@73)
 :pattern ( ($generated@@79 $generated@@109 $generated@@110 $generated@@111))
))) (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (let (($generated@@115 ($generated@@64 (type $generated@@113))))
 (=> (= (type $generated@@114) $generated@@115) (= ($generated@@78 ($generated@@79 $generated@@112 $generated@@113 $generated@@114) $generated@@113) $generated@@114)))
 :weight 0
))) (and (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@118 $generated@@119) (= ($generated@@78 ($generated@@79 $generated@@117 $generated@@118 $generated@@116) $generated@@119) ($generated@@78 $generated@@117 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or true (= ($generated@@78 ($generated@@79 $generated@@121 $generated@@122 $generated@@120) $generated@@123) ($generated@@78 $generated@@121 $generated@@123)))
 :weight 0
)))) (forall (($generated@@124 Int) ) (! (= (type ($generated@@70 $generated@@124)) $generated@@61)
 :pattern ( ($generated@@70 $generated@@124))
))))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> (and (= (type $generated@@125) $generated@@2) (= (type $generated@@126) ($generated@@71 $generated@@72 $generated@@73))) ($generated@@69 $generated@@125 ($generated@@70 0) $generated@@126))
 :pattern ( ($generated@@69 $generated@@125 ($generated@@70 0) $generated@@126))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@133 T@T) ($generated@@134 T@T) ) (= ($generated@@1 ($generated@@129 $generated@@133 $generated@@134)) 12)) (forall (($generated@@135 T@T) ($generated@@136 T@T) ) (! (= ($generated@@130 ($generated@@129 $generated@@135 $generated@@136)) $generated@@135)
 :pattern ( ($generated@@129 $generated@@135 $generated@@136))
))) (forall (($generated@@137 T@T) ($generated@@138 T@T) ) (! (= ($generated@@131 ($generated@@129 $generated@@137 $generated@@138)) $generated@@138)
 :pattern ( ($generated@@129 $generated@@137 $generated@@138))
))) (forall (($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (! (let (($generated@@142 ($generated@@131 (type $generated@@139))))
(= (type ($generated@@127 $generated@@139 $generated@@140 $generated@@141)) $generated@@142))
 :pattern ( ($generated@@127 $generated@@139 $generated@@140 $generated@@141))
))) (forall (($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ) (! (let (($generated@@147 (type $generated@@146)))
(let (($generated@@148 (type $generated@@144)))
(= (type ($generated@@132 $generated@@143 $generated@@144 $generated@@145 $generated@@146)) ($generated@@129 $generated@@148 $generated@@147))))
 :pattern ( ($generated@@132 $generated@@143 $generated@@144 $generated@@145 $generated@@146))
))) (forall (($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ) (! (let (($generated@@153 ($generated@@131 (type $generated@@149))))
 (=> (= (type $generated@@152) $generated@@153) (= ($generated@@127 ($generated@@132 $generated@@149 $generated@@150 $generated@@151 $generated@@152) $generated@@150 $generated@@151) $generated@@152)))
 :weight 0
))) (and (and (forall (($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ) (!  (or (= $generated@@156 $generated@@158) (= ($generated@@127 ($generated@@132 $generated@@155 $generated@@156 $generated@@157 $generated@@154) $generated@@158 $generated@@159) ($generated@@127 $generated@@155 $generated@@158 $generated@@159)))
 :weight 0
)) (forall (($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ) (!  (or (= $generated@@163 $generated@@165) (= ($generated@@127 ($generated@@132 $generated@@161 $generated@@162 $generated@@163 $generated@@160) $generated@@164 $generated@@165) ($generated@@127 $generated@@161 $generated@@164 $generated@@165)))
 :weight 0
))) (forall (($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 T@U) ($generated@@170 T@U) ($generated@@171 T@U) ) (!  (or true (= ($generated@@127 ($generated@@132 $generated@@167 $generated@@168 $generated@@169 $generated@@166) $generated@@170 $generated@@171) ($generated@@127 $generated@@167 $generated@@170 $generated@@171)))
 :weight 0
)))) (forall (($generated@@172 T@U) ($generated@@173 T@U) ($generated@@174 T@U) ($generated@@175 Bool) ) (! (= (type ($generated@@128 $generated@@172 $generated@@173 $generated@@174 $generated@@175)) ($generated@@129 $generated@@72 $generated@@4))
 :pattern ( ($generated@@128 $generated@@172 $generated@@173 $generated@@174 $generated@@175))
))))
(assert (forall (($generated@@176 T@U) ($generated@@177 T@U) ($generated@@178 T@U) ($generated@@179 Bool) ($generated@@180 T@U) ($generated@@181 T@U) ) (! (let (($generated@@182 ($generated@@64 (type $generated@@181))))
 (=> (and (and (and (and (= (type $generated@@176) $generated@@72) (= (type $generated@@177) ($generated@@71 $generated@@72 $generated@@73))) (= (type $generated@@178) ($generated@@63 $generated@@4))) (= (type $generated@@180) $generated@@72)) (= (type $generated@@181) ($generated@@63 $generated@@182))) (= ($generated@@0 ($generated@@127 ($generated@@128 $generated@@176 $generated@@177 $generated@@178 $generated@@179) $generated@@180 $generated@@181))  (=> (and (not (= $generated@@180 $generated@@176)) ($generated@@0 ($generated@@78 ($generated@@76 $generated@@177 $generated@@180) $generated@@178))) $generated@@179))))
 :pattern ( ($generated@@127 ($generated@@128 $generated@@176 $generated@@177 $generated@@178 $generated@@179) $generated@@180 $generated@@181))
)))
(assert (forall (($generated@@184 T@U) ) (! (let (($generated@@185 (type $generated@@184)))
(= (type ($generated@@183 $generated@@184)) $generated@@185))
 :pattern ( ($generated@@183 $generated@@184))
)))
(assert (forall (($generated@@186 T@U) ) (! (= ($generated@@183 $generated@@186) $generated@@186)
 :pattern ( ($generated@@183 $generated@@186))
)))
(assert  (=> (<= 0 $generated@@187) (forall (($generated@@190 Int) ) (!  (=> (or ($generated@@189 $generated@@190) (not (= 0 $generated@@187))) true)
 :pattern ( ($generated@@188 $generated@@190))
))))
(assert  (and (and (forall (($generated@@195 T@T) ) (= ($generated@@1 ($generated@@193 $generated@@195)) 13)) (forall (($generated@@196 T@T) ) (! (= ($generated@@194 ($generated@@193 $generated@@196)) $generated@@196)
 :pattern ( ($generated@@193 $generated@@196))
))) (forall (($generated@@197 T@T) ) (! (= (type ($generated@@191 $generated@@197)) ($generated@@193 $generated@@197))
 :pattern ( ($generated@@191 $generated@@197))
))))
(assert (forall (($generated@@198 T@T) ) (! (= ($generated@@192 ($generated@@191 $generated@@198)) 0)
 :pattern ( ($generated@@191 $generated@@198))
)))
(assert  (and (= ($generated@@1 $generated@@201) 14) (forall (($generated@@202 T@U) ) (! (= (type ($generated@@200 $generated@@202)) $generated@@201)
 :pattern ( ($generated@@200 $generated@@202))
))))
(assert (forall (($generated@@203 T@U) ($generated@@204 T@U) ($generated@@205 T@U) ) (!  (=> (and (= (type $generated@@204) $generated@@61) (= (type $generated@@205) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@199 ($generated@@200 $generated@@203) $generated@@204 $generated@@205) ($generated@@69 $generated@@203 $generated@@204 $generated@@205)))
 :pattern ( ($generated@@199 ($generated@@200 $generated@@203) $generated@@204 $generated@@205))
)))
(assert  (and (and (and (and (forall (($generated@@211 T@T) ($generated@@212 T@T) ) (= ($generated@@1 ($generated@@208 $generated@@211 $generated@@212)) 15)) (forall (($generated@@213 T@T) ($generated@@214 T@T) ) (! (= ($generated@@209 ($generated@@208 $generated@@213 $generated@@214)) $generated@@213)
 :pattern ( ($generated@@208 $generated@@213 $generated@@214))
))) (forall (($generated@@215 T@T) ($generated@@216 T@T) ) (! (= ($generated@@210 ($generated@@208 $generated@@215 $generated@@216)) $generated@@216)
 :pattern ( ($generated@@208 $generated@@215 $generated@@216))
))) (forall (($generated@@217 T@U) ) (! (let (($generated@@218 ($generated@@209 (type $generated@@217))))
(= (type ($generated@@206 $generated@@217)) ($generated@@71 $generated@@218 $generated@@4)))
 :pattern ( ($generated@@206 $generated@@217))
))) (forall (($generated@@219 T@T) ($generated@@220 T@T) ) (! (= (type ($generated@@207 $generated@@219 $generated@@220)) ($generated@@208 $generated@@219 $generated@@220))
 :pattern ( ($generated@@207 $generated@@219 $generated@@220))
))))
(assert (forall (($generated@@221 T@U) ($generated@@222 T@T) ) (! (let (($generated@@223 (type $generated@@221)))
 (not ($generated@@0 ($generated@@76 ($generated@@206 ($generated@@207 $generated@@223 $generated@@222)) $generated@@221))))
 :pattern ( (let (($generated@@223 (type $generated@@221)))
($generated@@76 ($generated@@206 ($generated@@207 $generated@@223 $generated@@222)) $generated@@221)))
)))
(assert  (and (and (and (and (forall (($generated@@229 T@T) ($generated@@230 T@T) ) (= ($generated@@1 ($generated@@226 $generated@@229 $generated@@230)) 16)) (forall (($generated@@231 T@T) ($generated@@232 T@T) ) (! (= ($generated@@227 ($generated@@226 $generated@@231 $generated@@232)) $generated@@231)
 :pattern ( ($generated@@226 $generated@@231 $generated@@232))
))) (forall (($generated@@233 T@T) ($generated@@234 T@T) ) (! (= ($generated@@228 ($generated@@226 $generated@@233 $generated@@234)) $generated@@234)
 :pattern ( ($generated@@226 $generated@@233 $generated@@234))
))) (forall (($generated@@235 T@U) ) (! (let (($generated@@236 ($generated@@227 (type $generated@@235))))
(= (type ($generated@@224 $generated@@235)) ($generated@@71 $generated@@236 $generated@@4)))
 :pattern ( ($generated@@224 $generated@@235))
))) (forall (($generated@@237 T@T) ($generated@@238 T@T) ) (! (= (type ($generated@@225 $generated@@237 $generated@@238)) ($generated@@226 $generated@@237 $generated@@238))
 :pattern ( ($generated@@225 $generated@@237 $generated@@238))
))))
(assert (forall (($generated@@239 T@U) ($generated@@240 T@T) ) (! (let (($generated@@241 (type $generated@@239)))
 (not ($generated@@0 ($generated@@76 ($generated@@224 ($generated@@225 $generated@@241 $generated@@240)) $generated@@239))))
 :pattern ( (let (($generated@@241 (type $generated@@239)))
($generated@@76 ($generated@@224 ($generated@@225 $generated@@241 $generated@@240)) $generated@@239)))
)))
(assert (forall (($generated@@242 T@U) ) (! (let (($generated@@243 ($generated@@210 (type $generated@@242))))
(let (($generated@@244 ($generated@@209 (type $generated@@242))))
 (=> (= (type $generated@@242) ($generated@@208 $generated@@244 $generated@@243)) (or (= $generated@@242 ($generated@@207 $generated@@244 $generated@@243)) (exists (($generated@@245 T@U) ) (!  (and (= (type $generated@@245) $generated@@244) ($generated@@0 ($generated@@76 ($generated@@206 $generated@@242) $generated@@245)))
 :no-pattern (type $generated@@245)
 :no-pattern ($generated $generated@@245)
 :no-pattern ($generated@@0 $generated@@245)
))))))
 :pattern ( ($generated@@206 $generated@@242))
)))
(assert (forall (($generated@@246 T@U) ) (! (let (($generated@@247 ($generated@@228 (type $generated@@246))))
(let (($generated@@248 ($generated@@227 (type $generated@@246))))
 (=> (= (type $generated@@246) ($generated@@226 $generated@@248 $generated@@247)) (or (= $generated@@246 ($generated@@225 $generated@@248 $generated@@247)) (exists (($generated@@249 T@U) ) (!  (and (= (type $generated@@249) $generated@@248) ($generated@@0 ($generated@@76 ($generated@@224 $generated@@246) $generated@@249)))
 :no-pattern (type $generated@@249)
 :no-pattern ($generated $generated@@249)
 :no-pattern ($generated@@0 $generated@@249)
))))))
 :pattern ( ($generated@@224 $generated@@246))
)))
(assert (forall (($generated@@251 T@U) ) (! (= (type ($generated@@250 $generated@@251)) $generated@@61)
 :pattern ( ($generated@@250 $generated@@251))
)))
(assert (forall (($generated@@252 T@U) ($generated@@253 T@U) ($generated@@254 T@U) ) (!  (=> (and (and (= (type $generated@@252) ($generated@@71 $generated@@201 $generated@@4)) (= (type $generated@@253) $generated@@61)) (= (type $generated@@254) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@252 ($generated@@250 $generated@@253) $generated@@254) (forall (($generated@@255 T@U) ) (!  (=> (and (= (type $generated@@255) $generated@@201) ($generated@@0 ($generated@@76 $generated@@252 $generated@@255))) ($generated@@199 $generated@@255 $generated@@253 $generated@@254))
 :pattern ( ($generated@@76 $generated@@252 $generated@@255))
))))
 :pattern ( ($generated@@69 $generated@@252 ($generated@@250 $generated@@253) $generated@@254))
)))
(assert (forall (($generated@@257 T@U) ) (! (= (type ($generated@@256 $generated@@257)) $generated@@61)
 :pattern ( ($generated@@256 $generated@@257))
)))
(assert (forall (($generated@@258 T@U) ($generated@@259 T@U) ($generated@@260 T@U) ) (!  (=> (and (and (= (type $generated@@258) ($generated@@71 $generated@@201 $generated@@4)) (= (type $generated@@259) $generated@@61)) (= (type $generated@@260) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@258 ($generated@@256 $generated@@259) $generated@@260) (forall (($generated@@261 T@U) ) (!  (=> (and (= (type $generated@@261) $generated@@201) ($generated@@0 ($generated@@76 $generated@@258 $generated@@261))) ($generated@@199 $generated@@261 $generated@@259 $generated@@260))
 :pattern ( ($generated@@76 $generated@@258 $generated@@261))
))))
 :pattern ( ($generated@@69 $generated@@258 ($generated@@256 $generated@@259) $generated@@260))
)))
(assert  (and (forall (($generated@@264 T@U) ($generated@@265 T@U) ) (! (= (type ($generated@@262 $generated@@264 $generated@@265)) $generated@@61)
 :pattern ( ($generated@@262 $generated@@264 $generated@@265))
)) (forall (($generated@@266 T@U) ) (! (let (($generated@@267 ($generated@@210 (type $generated@@266))))
(let (($generated@@268 ($generated@@209 (type $generated@@266))))
(= (type ($generated@@263 $generated@@266)) ($generated@@71 $generated@@268 $generated@@267))))
 :pattern ( ($generated@@263 $generated@@266))
))))
(assert (forall (($generated@@269 T@U) ($generated@@270 T@U) ($generated@@271 T@U) ($generated@@272 T@U) ) (!  (=> (and (and (and (= (type $generated@@269) ($generated@@208 $generated@@201 $generated@@201)) (= (type $generated@@270) $generated@@61)) (= (type $generated@@271) $generated@@61)) (= (type $generated@@272) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@269 ($generated@@262 $generated@@270 $generated@@271) $generated@@272) (forall (($generated@@273 T@U) ) (!  (=> (and (= (type $generated@@273) $generated@@201) ($generated@@0 ($generated@@76 ($generated@@206 $generated@@269) $generated@@273))) (and ($generated@@199 ($generated@@76 ($generated@@263 $generated@@269) $generated@@273) $generated@@271 $generated@@272) ($generated@@199 $generated@@273 $generated@@270 $generated@@272)))
 :pattern ( ($generated@@76 ($generated@@263 $generated@@269) $generated@@273))
 :pattern ( ($generated@@76 ($generated@@206 $generated@@269) $generated@@273))
))))
 :pattern ( ($generated@@69 $generated@@269 ($generated@@262 $generated@@270 $generated@@271) $generated@@272))
)))
(assert  (and (forall (($generated@@276 T@U) ($generated@@277 T@U) ) (! (= (type ($generated@@274 $generated@@276 $generated@@277)) $generated@@61)
 :pattern ( ($generated@@274 $generated@@276 $generated@@277))
)) (forall (($generated@@278 T@U) ) (! (let (($generated@@279 ($generated@@228 (type $generated@@278))))
(let (($generated@@280 ($generated@@227 (type $generated@@278))))
(= (type ($generated@@275 $generated@@278)) ($generated@@71 $generated@@280 $generated@@279))))
 :pattern ( ($generated@@275 $generated@@278))
))))
(assert (forall (($generated@@281 T@U) ($generated@@282 T@U) ($generated@@283 T@U) ($generated@@284 T@U) ) (!  (=> (and (and (and (= (type $generated@@281) ($generated@@226 $generated@@201 $generated@@201)) (= (type $generated@@282) $generated@@61)) (= (type $generated@@283) $generated@@61)) (= (type $generated@@284) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@281 ($generated@@274 $generated@@282 $generated@@283) $generated@@284) (forall (($generated@@285 T@U) ) (!  (=> (and (= (type $generated@@285) $generated@@201) ($generated@@0 ($generated@@76 ($generated@@224 $generated@@281) $generated@@285))) (and ($generated@@199 ($generated@@76 ($generated@@275 $generated@@281) $generated@@285) $generated@@283 $generated@@284) ($generated@@199 $generated@@285 $generated@@282 $generated@@284)))
 :pattern ( ($generated@@76 ($generated@@275 $generated@@281) $generated@@285))
 :pattern ( ($generated@@76 ($generated@@224 $generated@@281) $generated@@285))
))))
 :pattern ( ($generated@@69 $generated@@281 ($generated@@274 $generated@@282 $generated@@283) $generated@@284))
)))
(assert (forall (($generated@@287 T@T) ) (! (= (type ($generated@@286 $generated@@287)) ($generated@@71 $generated@@287 $generated@@4))
 :pattern ( ($generated@@286 $generated@@287))
)))
(assert (forall (($generated@@288 T@U) ) (! (let (($generated@@289 ($generated@@228 (type $generated@@288))))
(let (($generated@@290 ($generated@@227 (type $generated@@288))))
 (=> (= (type $generated@@288) ($generated@@226 $generated@@290 $generated@@289)) (= (= $generated@@288 ($generated@@225 $generated@@290 $generated@@289)) (= ($generated@@224 $generated@@288) ($generated@@286 $generated@@290))))))
 :pattern ( ($generated@@224 $generated@@288))
)))
(assert (forall (($generated@@291 T@U) ) (! (let (($generated@@292 ($generated@@194 (type $generated@@291))))
 (=> (= (type $generated@@291) ($generated@@193 $generated@@292)) (<= 0 ($generated@@192 $generated@@291))))
 :pattern ( ($generated@@192 $generated@@291))
)))
(assert (forall (($generated@@294 T@U) ) (! (= (type ($generated@@293 $generated@@294)) $generated@@61)
 :pattern ( ($generated@@293 $generated@@294))
)))
(assert (forall (($generated@@295 T@U) ($generated@@296 T@U) ) (!  (=> (and (= (type $generated@@295) $generated@@61) (= (type $generated@@296) $generated@@61)) (= ($generated@@293 ($generated@@262 $generated@@295 $generated@@296)) $generated@@295))
 :pattern ( ($generated@@262 $generated@@295 $generated@@296))
)))
(assert (forall (($generated@@298 T@U) ) (! (= (type ($generated@@297 $generated@@298)) $generated@@61)
 :pattern ( ($generated@@297 $generated@@298))
)))
(assert (forall (($generated@@299 T@U) ($generated@@300 T@U) ) (!  (=> (and (= (type $generated@@299) $generated@@61) (= (type $generated@@300) $generated@@61)) (= ($generated@@297 ($generated@@262 $generated@@299 $generated@@300)) $generated@@300))
 :pattern ( ($generated@@262 $generated@@299 $generated@@300))
)))
(assert (forall (($generated@@301 T@U) ($generated@@302 T@U) ) (!  (=> (and (= (type $generated@@301) $generated@@61) (= (type $generated@@302) $generated@@61)) (= ($generated@@67 ($generated@@262 $generated@@301 $generated@@302)) $generated@@58))
 :pattern ( ($generated@@262 $generated@@301 $generated@@302))
)))
(assert (forall (($generated@@304 T@U) ) (! (= (type ($generated@@303 $generated@@304)) $generated@@61)
 :pattern ( ($generated@@303 $generated@@304))
)))
(assert (forall (($generated@@305 T@U) ($generated@@306 T@U) ) (!  (=> (and (= (type $generated@@305) $generated@@61) (= (type $generated@@306) $generated@@61)) (= ($generated@@303 ($generated@@274 $generated@@305 $generated@@306)) $generated@@305))
 :pattern ( ($generated@@274 $generated@@305 $generated@@306))
)))
(assert (forall (($generated@@308 T@U) ) (! (= (type ($generated@@307 $generated@@308)) $generated@@61)
 :pattern ( ($generated@@307 $generated@@308))
)))
(assert (forall (($generated@@309 T@U) ($generated@@310 T@U) ) (!  (=> (and (= (type $generated@@309) $generated@@61) (= (type $generated@@310) $generated@@61)) (= ($generated@@307 ($generated@@274 $generated@@309 $generated@@310)) $generated@@310))
 :pattern ( ($generated@@274 $generated@@309 $generated@@310))
)))
(assert (forall (($generated@@311 T@U) ($generated@@312 T@U) ) (!  (=> (and (= (type $generated@@311) $generated@@61) (= (type $generated@@312) $generated@@61)) (= ($generated@@67 ($generated@@274 $generated@@311 $generated@@312)) $generated@@59))
 :pattern ( ($generated@@274 $generated@@311 $generated@@312))
)))
(assert  (and (forall (($generated@@315 T@U) ) (! (= (type ($generated@@313 $generated@@315)) $generated@@61)
 :pattern ( ($generated@@313 $generated@@315))
)) (forall (($generated@@316 T@U) ($generated@@317 Int) ) (! (let (($generated@@318 ($generated@@194 (type $generated@@316))))
(= (type ($generated@@314 $generated@@316 $generated@@317)) $generated@@318))
 :pattern ( ($generated@@314 $generated@@316 $generated@@317))
))))
(assert (forall (($generated@@319 T@U) ($generated@@320 T@U) ($generated@@321 T@U) ) (!  (=> (and (and (= (type $generated@@319) ($generated@@193 $generated@@201)) (= (type $generated@@320) $generated@@61)) (= (type $generated@@321) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@319 ($generated@@313 $generated@@320) $generated@@321) (forall (($generated@@322 Int) ) (!  (=> (and (<= 0 $generated@@322) (< $generated@@322 ($generated@@192 $generated@@319))) ($generated@@199 ($generated@@314 $generated@@319 $generated@@322) $generated@@320 $generated@@321))
 :pattern ( ($generated@@314 $generated@@319 $generated@@322))
))))
 :pattern ( ($generated@@69 $generated@@319 ($generated@@313 $generated@@320) $generated@@321))
)))
(assert (forall (($generated@@324 Int) ) (! (= ($generated@@323 ($generated@@70 $generated@@324)) $generated@@324)
 :pattern ( ($generated@@70 $generated@@324))
)))
(assert (forall (($generated@@326 T@U) ) (! (= (type ($generated@@325 $generated@@326)) $generated@@61)
 :pattern ( ($generated@@325 $generated@@326))
)))
(assert (forall (($generated@@327 T@U) ) (!  (=> (= (type $generated@@327) $generated@@61) (= ($generated@@325 ($generated@@250 $generated@@327)) $generated@@327))
 :pattern ( ($generated@@250 $generated@@327))
)))
(assert (forall (($generated@@328 T@U) ) (!  (=> (= (type $generated@@328) $generated@@61) (= ($generated@@67 ($generated@@250 $generated@@328)) $generated@@54))
 :pattern ( ($generated@@250 $generated@@328))
)))
(assert (forall (($generated@@330 T@U) ) (! (= (type ($generated@@329 $generated@@330)) $generated@@61)
 :pattern ( ($generated@@329 $generated@@330))
)))
(assert (forall (($generated@@331 T@U) ) (!  (=> (= (type $generated@@331) $generated@@61) (= ($generated@@329 ($generated@@256 $generated@@331)) $generated@@331))
 :pattern ( ($generated@@256 $generated@@331))
)))
(assert (forall (($generated@@332 T@U) ) (!  (=> (= (type $generated@@332) $generated@@61) (= ($generated@@67 ($generated@@256 $generated@@332)) $generated@@55))
 :pattern ( ($generated@@256 $generated@@332))
)))
(assert  (and (forall (($generated@@335 T@U) ) (! (= (type ($generated@@333 $generated@@335)) $generated@@61)
 :pattern ( ($generated@@333 $generated@@335))
)) (forall (($generated@@336 T@U) ) (! (= (type ($generated@@334 $generated@@336)) $generated@@61)
 :pattern ( ($generated@@334 $generated@@336))
))))
(assert (forall (($generated@@337 T@U) ) (!  (=> (= (type $generated@@337) $generated@@61) (= ($generated@@334 ($generated@@333 $generated@@337)) $generated@@337))
 :pattern ( ($generated@@333 $generated@@337))
)))
(assert (forall (($generated@@338 T@U) ) (!  (=> (= (type $generated@@338) $generated@@61) (= ($generated@@67 ($generated@@333 $generated@@338)) $generated@@56))
 :pattern ( ($generated@@333 $generated@@338))
)))
(assert (forall (($generated@@340 T@U) ) (! (= (type ($generated@@339 $generated@@340)) $generated@@61)
 :pattern ( ($generated@@339 $generated@@340))
)))
(assert (forall (($generated@@341 T@U) ) (!  (=> (= (type $generated@@341) $generated@@61) (= ($generated@@339 ($generated@@313 $generated@@341)) $generated@@341))
 :pattern ( ($generated@@313 $generated@@341))
)))
(assert (forall (($generated@@342 T@U) ) (!  (=> (= (type $generated@@342) $generated@@61) (= ($generated@@67 ($generated@@313 $generated@@342)) $generated@@57))
 :pattern ( ($generated@@313 $generated@@342))
)))
(assert (forall (($generated@@344 T@T) ($generated@@345 T@U) ) (! (= (type ($generated@@343 $generated@@344 $generated@@345)) $generated@@344)
 :pattern ( ($generated@@343 $generated@@344 $generated@@345))
)))
(assert (forall (($generated@@346 T@U) ) (! (let (($generated@@347 (type $generated@@346)))
(= ($generated@@343 $generated@@347 ($generated@@200 $generated@@346)) $generated@@346))
 :pattern ( ($generated@@200 $generated@@346))
)))
(assert (forall (($generated@@348 T@U) ) (! (let (($generated@@349 (type $generated@@348)))
 (not ($generated@@0 ($generated@@76 ($generated@@286 $generated@@349) $generated@@348))))
 :pattern ( (let (($generated@@349 (type $generated@@348)))
($generated@@76 ($generated@@286 $generated@@349) $generated@@348)))
)))
(assert (forall (($generated@@350 T@U) ($generated@@351 T@U) ($generated@@352 T@U) ) (!  (=> (and (and (= (type $generated@@350) ($generated@@71 $generated@@201 $generated@@2)) (= (type $generated@@351) $generated@@61)) (= (type $generated@@352) ($generated@@71 $generated@@72 $generated@@73))) (= ($generated@@69 $generated@@350 ($generated@@333 $generated@@351) $generated@@352) (forall (($generated@@353 T@U) ) (!  (=> (and (= (type $generated@@353) $generated@@201) (< 0 ($generated ($generated@@76 $generated@@350 $generated@@353)))) ($generated@@199 $generated@@353 $generated@@351 $generated@@352))
 :pattern ( ($generated@@76 $generated@@350 $generated@@353))
))))
 :pattern ( ($generated@@69 $generated@@350 ($generated@@333 $generated@@351) $generated@@352))
)))
(assert (forall (($generated@@354 T@U) ) (! (= ($generated@@200 ($generated@@183 $generated@@354)) ($generated@@183 ($generated@@200 $generated@@354)))
 :pattern ( ($generated@@200 ($generated@@183 $generated@@354)))
)))
(assert (forall (($generated@@355 T@U) ) (! (let (($generated@@356 ($generated@@194 (type $generated@@355))))
 (=> (and (= (type $generated@@355) ($generated@@193 $generated@@356)) (= ($generated@@192 $generated@@355) 0)) (= $generated@@355 ($generated@@191 $generated@@356))))
 :pattern ( ($generated@@192 $generated@@355))
)))
(assert (forall (($generated@@357 T@U) ($generated@@358 T@U) ) (!  (=> (and (= (type $generated@@357) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@358) $generated@@2)) ($generated@@69 $generated@@358 $generated@@46 $generated@@357))
 :pattern ( ($generated@@69 $generated@@358 $generated@@46 $generated@@357))
)))
(assert (forall (($generated@@359 T@U) ($generated@@360 T@U) ) (!  (=> (and (= (type $generated@@359) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@360) $generated@@3)) ($generated@@69 $generated@@360 $generated@@47 $generated@@359))
 :pattern ( ($generated@@69 $generated@@360 $generated@@47 $generated@@359))
)))
(assert (forall (($generated@@361 T@U) ($generated@@362 T@U) ) (!  (=> (and (= (type $generated@@361) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@362) $generated@@4)) ($generated@@69 $generated@@362 $generated@@44 $generated@@361))
 :pattern ( ($generated@@69 $generated@@362 $generated@@44 $generated@@361))
)))
(assert (= ($generated@@1 $generated@@363) 17))
(assert (forall (($generated@@364 T@U) ($generated@@365 T@U) ) (!  (=> (and (= (type $generated@@364) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@365) $generated@@363)) ($generated@@69 $generated@@365 $generated@@45 $generated@@364))
 :pattern ( ($generated@@69 $generated@@365 $generated@@45 $generated@@364))
)))
(assert (forall (($generated@@366 T@U) ($generated@@367 T@U) ) (!  (=> (and (= (type $generated@@366) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@367) $generated@@201)) ($generated@@69 $generated@@367 $generated@@48 $generated@@366))
 :pattern ( ($generated@@69 $generated@@367 $generated@@48 $generated@@366))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@368 () Int)
(declare-fun $generated@@369 () T@U)
(declare-fun $generated@@370 () Int)
(declare-fun $generated@@371 () Int)
(declare-fun $generated@@372 () Int)
(declare-fun $generated@@373 () T@U)
(declare-fun $generated@@374 () T@U)
(declare-fun $generated@@375 (T@U) Bool)
(declare-fun $generated@@376 (T@U) Bool)
(assert  (and (and (= (type $generated@@369) ($generated@@71 $generated@@72 $generated@@73)) (= (type $generated@@373) ($generated@@129 $generated@@72 $generated@@4))) (= (type $generated@@374) $generated@@72)))
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let (($generated@@377 true))
(let (($generated@@378 true))
(let (($generated@@379  (=> (and (=> (not ($generated@@0 ($generated@@183 ($generated@@11 true)))) (forall (($generated@@380 Int) ($generated@@381 Int) ) (!  (and (=> (= $generated@@381 (+ $generated@@380 1)) ($generated@@189 $generated@@381)) (=> (and (= $generated@@381 (+ $generated@@380 1)) ($generated@@188 $generated@@381)) ($generated@@189 $generated@@380)))
 :pattern ( ($generated@@188 $generated@@380) ($generated@@188 $generated@@381))
))) (= (ControlFlow 0 2) (- 0 1))) (or true (forall (($generated@@382 Int) ($generated@@383 Int) ) (!  (=> (and (= $generated@@383 (+ $generated@@382 1)) ($generated@@188 $generated@@383)) ($generated@@188 $generated@@382))
 :pattern ( ($generated@@188 $generated@@382) ($generated@@188 $generated@@383))
))))))
(let (($generated@@384  (=> (and (not ($generated@@188 (+ $generated@@368 1))) (= (ControlFlow 0 6) 2)) $generated@@379)))
(let (($generated@@385  (=> (and (and ($generated@@188 (+ $generated@@368 1)) ($generated@@69 ($generated@@8 $generated@@368) $generated@@46 $generated@@369)) (and ($generated@@189 $generated@@368) (= (ControlFlow 0 5) 2))) $generated@@379)))
(let (($generated@@386  (=> (= $generated@@370 (+ $generated@@368 1)) (=> (and ($generated@@69 ($generated@@8 $generated@@370) $generated@@46 $generated@@369) ($generated@@189 (+ $generated@@368 1))) (and (=> (= (ControlFlow 0 7) 5) $generated@@385) (=> (= (ControlFlow 0 7) 6) $generated@@384))))))
(let (($generated@@387  (=> (not ($generated@@0 ($generated@@183 ($generated@@11 true)))) (and (=> (= (ControlFlow 0 8) 7) $generated@@386) (=> (= (ControlFlow 0 8) 4) $generated@@378)))))
(let (($generated@@388  (=> (and ($generated@@0 ($generated@@183 ($generated@@11 true))) (= (ControlFlow 0 3) 2)) $generated@@379)))
(let (($generated@@389  (=> (=> (not ($generated@@0 ($generated@@183 ($generated@@11 true)))) (forall (($generated@@390 Int) ($generated@@391 Int) ) (!  (and (=> (= $generated@@391 (+ $generated@@390 1)) ($generated@@189 $generated@@390)) (=> (and (= $generated@@391 (+ $generated@@390 1)) ($generated@@188 $generated@@390)) ($generated@@189 $generated@@391)))
 :pattern ( ($generated@@188 $generated@@391) ($generated@@188 $generated@@390))
))) (and (=> (= (ControlFlow 0 9) (- 0 10)) (or true (forall (($generated@@392 Int) ($generated@@393 Int) ) (!  (=> (and (= $generated@@393 (+ $generated@@392 1)) ($generated@@188 $generated@@392)) ($generated@@188 $generated@@393))
 :pattern ( ($generated@@188 $generated@@393) ($generated@@188 $generated@@392))
)))) (=> (or true (forall (($generated@@394 Int) ($generated@@395 Int) ) (!  (=> (and (= $generated@@395 (+ $generated@@394 1)) ($generated@@188 $generated@@394)) ($generated@@188 $generated@@395))
 :pattern ( ($generated@@188 $generated@@395) ($generated@@188 $generated@@394))
))) (and (=> (= (ControlFlow 0 9) 8) $generated@@387) (=> (= (ControlFlow 0 9) 3) $generated@@388)))))))
(let (($generated@@396  (=> (and (not ($generated@@188 $generated@@371)) (= (ControlFlow 0 14) 9)) $generated@@389)))
(let (($generated@@397  (=> ($generated@@188 $generated@@371) (=> (and (and (= $generated@@372 (+ $generated@@371 1)) ($generated@@69 ($generated@@8 $generated@@372) $generated@@46 $generated@@369)) (and ($generated@@189 (+ $generated@@371 1)) (= (ControlFlow 0 13) 9))) $generated@@389))))
(let (($generated@@398  (=> (and ($generated@@69 ($generated@@8 $generated@@371) $generated@@46 $generated@@369) ($generated@@189 $generated@@371)) (and (=> (= (ControlFlow 0 15) 13) $generated@@397) (=> (= (ControlFlow 0 15) 14) $generated@@396)))))
(let (($generated@@399  (=> (not ($generated@@0 ($generated@@183 ($generated@@11 true)))) (and (=> (= (ControlFlow 0 16) 15) $generated@@398) (=> (= (ControlFlow 0 16) 12) $generated@@377)))))
(let (($generated@@400  (=> (and ($generated@@0 ($generated@@183 ($generated@@11 true))) (= (ControlFlow 0 11) 9)) $generated@@389)))
(let (($generated@@401  (=> (= $generated@@373 ($generated@@128 $generated@@374 $generated@@369 $generated@@60 false)) (and (=> (= (ControlFlow 0 17) 16) $generated@@399) (=> (= (ControlFlow 0 17) 11) $generated@@400)))))
(let (($generated@@402  (=> (and (and ($generated@@375 $generated@@369) ($generated@@376 $generated@@369)) (and (= 1 $generated@@187) (= (ControlFlow 0 18) 17))) $generated@@401)))
$generated@@402)))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
